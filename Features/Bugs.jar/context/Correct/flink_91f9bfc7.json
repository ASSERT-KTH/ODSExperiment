{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.flink.api.java.typeutils.TypeExtractor.LOG.info((\"Class \" + clazz) + \" is not a valid POJO type\")",
            "dst_parent": "{\n    org.apache.flink.api.java.typeutils.TypeExtractor.LOG.info((\"Class \" + clazz) + \" is not a valid POJO type\");\n    return null;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "org.apache.flink.api.java.typeutils.TypeExtractor.LOG.warn((\"Class \" + clazz) + \" is not a valid POJO type\")",
            "src_parent": "{\n    org.apache.flink.api.java.typeutils.TypeExtractor.LOG.warn((\"Class \" + clazz) + \" is not a valid POJO type\");\n    return null;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.flink.api.java.typeutils.TypeExtractor.LOG.info((\"Class \" + clazz) + \" contains custom serialization methods we do not call.\")",
            "dst_parent": "{\n    org.apache.flink.api.java.typeutils.TypeExtractor.LOG.info((\"Class \" + clazz) + \" contains custom serialization methods we do not call.\");\n    return null;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "org.apache.flink.api.java.typeutils.TypeExtractor.LOG.warn((\"Class \" + clazz) + \" contains custom serialization methods we do not call.\")",
            "src_parent": "{\n    org.apache.flink.api.java.typeutils.TypeExtractor.LOG.warn((\"Class \" + clazz) + \" contains custom serialization methods we do not call.\");\n    return null;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.flink.api.java.typeutils.TypeExtractor.LOG.info((\"Class \" + clazz) + \" must have a default constructor to be used as a POJO.\")",
            "dst_parent": "{\n    org.apache.flink.api.java.typeutils.TypeExtractor.LOG.info((\"Class \" + clazz) + \" must have a default constructor to be used as a POJO.\");\n    return null;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "org.apache.flink.api.java.typeutils.TypeExtractor.LOG.warn((\"Class \" + clazz) + \" must have a default constructor to be used as a POJO.\")",
            "src_parent": "{\n    org.apache.flink.api.java.typeutils.TypeExtractor.LOG.warn((\"Class \" + clazz) + \" must have a default constructor to be used as a POJO.\");\n    return null;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.flink.api.java.typeutils.TypeExtractor.LOG.debug(((\"Class \" + clazz) + \" does not contain a getter for field \") + f.getName())",
            "dst_parent": "{\n    org.apache.flink.api.java.typeutils.TypeExtractor.LOG.debug(((\"Class \" + clazz) + \" does not contain a getter for field \") + f.getName());\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "org.apache.flink.api.java.typeutils.TypeExtractor.LOG.warn(((\"Class \" + clazz) + \" does not contain a getter for field \") + f.getName())",
            "src_parent": "{\n    org.apache.flink.api.java.typeutils.TypeExtractor.LOG.warn(((\"Class \" + clazz) + \" does not contain a getter for field \") + f.getName());\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.flink.api.java.typeutils.TypeExtractor.LOG.debug(((\"Class \" + clazz) + \" does not contain a setter for field \") + f.getName())",
            "dst_parent": "{\n    org.apache.flink.api.java.typeutils.TypeExtractor.LOG.debug(((\"Class \" + clazz) + \" does not contain a setter for field \") + f.getName());\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "org.apache.flink.api.java.typeutils.TypeExtractor.LOG.warn(((\"Class \" + clazz) + \" does not contain a setter for field \") + f.getName())",
            "src_parent": "{\n    org.apache.flink.api.java.typeutils.TypeExtractor.LOG.warn(((\"Class \" + clazz) + \" does not contain a setter for field \") + f.getName());\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(!clazz.isPrimitive()) && (java.lang.reflect.Modifier.isInterface(clazz.getModifiers()) || (java.lang.reflect.Modifier.isAbstract(clazz.getModifiers()) && (!clazz.isArray())))",
            "src_parent": "if ((!clazz.isPrimitive()) && (java.lang.reflect.Modifier.isInterface(clazz.getModifiers()) || (java.lang.reflect.Modifier.isAbstract(clazz.getModifiers()) && (!clazz.isArray())))) {\n    throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Interfaces and abstract classes are not valid types: \" + clazz);\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Interfaces and abstract classes are not valid types: \" + clazz)",
            "src_parent": "{\n    throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Interfaces and abstract classes are not valid types: \" + clazz);\n}",
            "src_parent_type": "Block",
            "src_type": "Throw"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (fields.size() == 0) {\n    org.apache.flink.api.java.typeutils.TypeExtractor.LOG.info((\"No fields detected for class \" + clazz) + \". Cannot be used as a PojoType. Will be handled as GenericType\");\n    return new org.apache.flink.api.java.typeutils.GenericTypeInfo<OUT>(clazz);\n}",
            "src_parent": "{\n    if (parameterizedType != null) {\n        org.apache.flink.api.java.typeutils.TypeExtractor.getTypeHierarchy(typeHierarchy, parameterizedType, java.lang.Object.class);\n    } else if (typeHierarchy.size() <= 1) {\n        org.apache.flink.api.java.typeutils.TypeExtractor.getTypeHierarchy(typeHierarchy, clazz, java.lang.Object.class);\n    }\n    java.util.List<java.lang.reflect.Field> fields = org.apache.flink.api.java.typeutils.TypeExtractor.getAllDeclaredFields(clazz);\n    if (fields.size() == 0) {\n        org.apache.flink.api.java.typeutils.TypeExtractor.LOG.info((\"No fields detected for class \" + clazz) + \". Cannot be used as a PojoType. Will be handled as GenericType\");\n        return new org.apache.flink.api.java.typeutils.GenericTypeInfo<OUT>(clazz);\n    }\n    java.util.List<org.apache.flink.api.java.typeutils.PojoField> pojoFields = new java.util.ArrayList<org.apache.flink.api.java.typeutils.PojoField>();\n    for (java.lang.reflect.Field field : fields) {\n        java.lang.reflect.Type fieldType = field.getGenericType();\n        if (!isValidPojoField(field, clazz, typeHierarchy)) {\n            org.apache.flink.api.java.typeutils.TypeExtractor.LOG.info((\"Class \" + clazz) + \" is not a valid POJO type\");\n            return null;\n        }\n        try {\n            java.util.ArrayList<java.lang.reflect.Type> fieldTypeHierarchy = new java.util.ArrayList<java.lang.reflect.Type>(typeHierarchy);\n            fieldTypeHierarchy.add(fieldType);\n            org.apache.flink.api.common.typeinfo.TypeInformation<?> ti = createTypeInfoWithTypeHierarchy(fieldTypeHierarchy, fieldType, in1Type, in2Type);\n            pojoFields.add(new org.apache.flink.api.java.typeutils.PojoField(field, ti));\n        } catch (org.apache.flink.api.common.functions.InvalidTypesException e) {\n            java.lang.Class<?> genericClass = java.lang.Object.class;\n            if (org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(fieldType)) {\n                genericClass = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(fieldType);\n            }\n            pojoFields.add(new org.apache.flink.api.java.typeutils.PojoField(field, new org.apache.flink.api.java.typeutils.GenericTypeInfo<OUT>(((java.lang.Class<OUT>) (genericClass)))));\n        }\n    }\n    org.apache.flink.api.common.typeutils.CompositeType<OUT> pojoType = new org.apache.flink.api.java.typeutils.PojoTypeInfo<OUT>(clazz, pojoFields);\n    java.util.List<java.lang.reflect.Method> methods = org.apache.flink.api.java.typeutils.TypeExtractor.getAllDeclaredMethods(clazz);\n    for (java.lang.reflect.Method method : methods) {\n        if (method.getName().equals(\"readObject\") || method.getName().equals(\"writeObject\")) {\n            org.apache.flink.api.java.typeutils.TypeExtractor.LOG.info((\"Class \" + clazz) + \" contains custom serialization methods we do not call.\");\n            return null;\n        }\n    }\n    try {\n        clazz.getDeclaredConstructor();\n    } catch (java.lang.NoSuchMethodException e) {\n        if (clazz.isInterface() || java.lang.reflect.Modifier.isAbstract(clazz.getModifiers())) {\n            org.apache.flink.api.java.typeutils.TypeExtractor.LOG.info(((\"Class \" + clazz) + \" is abstract or an interface, having a concrete \") + \"type can increase performance.\");\n        } else {\n            org.apache.flink.api.java.typeutils.TypeExtractor.LOG.info((\"Class \" + clazz) + \" must have a default constructor to be used as a POJO.\");\n            return null;\n        }\n    }\n    return pojoType;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (curT == null) {\n    break;\n}",
            "src_parent": "{\n    typeHierarchy.add(curT);\n    curT = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(curT).getGenericSuperclass();\n    if (curT == null) {\n        break;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "return new org.apache.flink.api.java.typeutils.GenericTypeInfo<OUT>(clazz)",
            "src_parent": "{\n    return new org.apache.flink.api.java.typeutils.GenericTypeInfo<OUT>(clazz);\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (clazz.isInterface() || java.lang.reflect.Modifier.isAbstract(clazz.getModifiers())) {\n    org.apache.flink.api.java.typeutils.TypeExtractor.LOG.info(((\"Class \" + clazz) + \" is abstract or an interface, having a concrete \") + \"type can increase performance.\");\n} else {\n    org.apache.flink.api.java.typeutils.TypeExtractor.LOG.info((\"Class \" + clazz) + \" must have a default constructor to be used as a POJO.\");\n    return null;\n}",
            "src_parent": "{\n    if (clazz.isInterface() || java.lang.reflect.Modifier.isAbstract(clazz.getModifiers())) {\n        org.apache.flink.api.java.typeutils.TypeExtractor.LOG.info(((\"Class \" + clazz) + \" is abstract or an interface, having a concrete \") + \"type can increase performance.\");\n    } else {\n        org.apache.flink.api.java.typeutils.TypeExtractor.LOG.info((\"Class \" + clazz) + \" must have a default constructor to be used as a POJO.\");\n        return null;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (java.lang.reflect.Modifier.isInterface(clazz.getModifiers())) {\n    return new org.apache.flink.api.java.typeutils.GenericTypeInfo<OUT>(clazz);\n}",
            "dst_parent": "{\n    org.apache.commons.lang3.Validate.notNull(clazz);\n    if (clazz.equals(java.lang.Object.class)) {\n        return new org.apache.flink.api.java.typeutils.GenericTypeInfo<OUT>(clazz);\n    }\n    if (clazz.isArray()) {\n        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo<OUT> primitiveArrayInfo = org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo.getInfoFor(clazz);\n        if (primitiveArrayInfo != null) {\n            return primitiveArrayInfo;\n        }\n        org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo<OUT, ?> basicArrayInfo = org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo.getInfoFor(clazz);\n        if (basicArrayInfo != null) {\n            return basicArrayInfo;\n        } else {\n            return org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo.getInfoFor(clazz);\n        }\n    }\n    if (org.apache.hadoop.io.Writable.class.isAssignableFrom(clazz)) {\n        return ((org.apache.flink.api.common.typeinfo.TypeInformation<OUT>) (org.apache.flink.api.java.typeutils.WritableTypeInfo.getWritableTypeInfo(((java.lang.Class<? extends org.apache.hadoop.io.Writable>) (clazz)))));\n    }\n    org.apache.flink.api.common.typeinfo.TypeInformation<OUT> basicTypeInfo = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(clazz);\n    if (basicTypeInfo != null) {\n        return basicTypeInfo;\n    }\n    if (org.apache.flink.types.Value.class.isAssignableFrom(clazz)) {\n        java.lang.Class<? extends org.apache.flink.types.Value> valueClass = clazz.asSubclass(org.apache.flink.types.Value.class);\n        return ((org.apache.flink.api.common.typeinfo.TypeInformation<OUT>) (org.apache.flink.api.java.typeutils.ValueTypeInfo.getValueTypeInfo(valueClass)));\n    }\n    if (org.apache.flink.api.java.tuple.Tuple.class.isAssignableFrom(clazz)) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Type information extraction for tuples cannot be done based on the class.\");\n    }\n    if (java.lang.Enum.class.isAssignableFrom(clazz)) {\n        return ((org.apache.flink.api.common.typeinfo.TypeInformation<OUT>) (new org.apache.flink.api.java.typeutils.EnumTypeInfo(clazz)));\n    }\n    if (alreadySeen.contains(clazz)) {\n        return new org.apache.flink.api.java.typeutils.GenericTypeInfo<OUT>(clazz);\n    }\n    alreadySeen.add(clazz);\n    if (java.lang.reflect.Modifier.isInterface(clazz.getModifiers())) {\n        return new org.apache.flink.api.java.typeutils.GenericTypeInfo<OUT>(clazz);\n    }\n    if (clazz.equals(java.lang.Class.class)) {\n        return new org.apache.flink.api.java.typeutils.GenericTypeInfo<OUT>(clazz);\n    }\n    try {\n        org.apache.flink.api.common.typeinfo.TypeInformation<OUT> pojoType = analyzePojo(clazz, new java.util.ArrayList<java.lang.reflect.Type>(typeHierarchy), parameterizedType, in1Type, in2Type);\n        if (pojoType != null) {\n            return pojoType;\n        }\n    } catch (org.apache.flink.api.common.functions.InvalidTypesException e) {\n        if (org.apache.flink.api.java.typeutils.TypeExtractor.LOG.isDebugEnabled()) {\n            org.apache.flink.api.java.typeutils.TypeExtractor.LOG.debug(((\"Unable to handle type \" + clazz) + \" as POJO. Message: \") + e.getMessage(), e);\n        }\n    }\n    return new org.apache.flink.api.java.typeutils.GenericTypeInfo<OUT>(clazz);\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if ((!clazz.isPrimitive()) && (java.lang.reflect.Modifier.isInterface(clazz.getModifiers()) || (java.lang.reflect.Modifier.isAbstract(clazz.getModifiers()) && (!clazz.isArray())))) {\n    throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Interfaces and abstract classes are not valid types: \" + clazz);\n}",
            "src_parent": "{\n    org.apache.commons.lang3.Validate.notNull(clazz);\n    if ((!clazz.isPrimitive()) && (java.lang.reflect.Modifier.isInterface(clazz.getModifiers()) || (java.lang.reflect.Modifier.isAbstract(clazz.getModifiers()) && (!clazz.isArray())))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Interfaces and abstract classes are not valid types: \" + clazz);\n    }\n    if (clazz.equals(java.lang.Object.class)) {\n        return new org.apache.flink.api.java.typeutils.GenericTypeInfo<OUT>(clazz);\n    }\n    if (clazz.isArray()) {\n        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo<OUT> primitiveArrayInfo = org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo.getInfoFor(clazz);\n        if (primitiveArrayInfo != null) {\n            return primitiveArrayInfo;\n        }\n        org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo<OUT, ?> basicArrayInfo = org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo.getInfoFor(clazz);\n        if (basicArrayInfo != null) {\n            return basicArrayInfo;\n        } else {\n            return org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo.getInfoFor(clazz);\n        }\n    }\n    if (org.apache.hadoop.io.Writable.class.isAssignableFrom(clazz)) {\n        return ((org.apache.flink.api.common.typeinfo.TypeInformation<OUT>) (org.apache.flink.api.java.typeutils.WritableTypeInfo.getWritableTypeInfo(((java.lang.Class<? extends org.apache.hadoop.io.Writable>) (clazz)))));\n    }\n    org.apache.flink.api.common.typeinfo.TypeInformation<OUT> basicTypeInfo = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(clazz);\n    if (basicTypeInfo != null) {\n        return basicTypeInfo;\n    }\n    if (org.apache.flink.types.Value.class.isAssignableFrom(clazz)) {\n        java.lang.Class<? extends org.apache.flink.types.Value> valueClass = clazz.asSubclass(org.apache.flink.types.Value.class);\n        return ((org.apache.flink.api.common.typeinfo.TypeInformation<OUT>) (org.apache.flink.api.java.typeutils.ValueTypeInfo.getValueTypeInfo(valueClass)));\n    }\n    if (org.apache.flink.api.java.tuple.Tuple.class.isAssignableFrom(clazz)) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Type information extraction for tuples cannot be done based on the class.\");\n    }\n    if (java.lang.Enum.class.isAssignableFrom(clazz)) {\n        return ((org.apache.flink.api.common.typeinfo.TypeInformation<OUT>) (new org.apache.flink.api.java.typeutils.EnumTypeInfo(clazz)));\n    }\n    if (alreadySeen.contains(clazz)) {\n        return new org.apache.flink.api.java.typeutils.GenericTypeInfo<OUT>(clazz);\n    }\n    alreadySeen.add(clazz);\n    if (clazz.equals(java.lang.Class.class)) {\n        return new org.apache.flink.api.java.typeutils.GenericTypeInfo<OUT>(clazz);\n    }\n    try {\n        org.apache.flink.api.common.typeinfo.TypeInformation<OUT> pojoType = analyzePojo(clazz, new java.util.ArrayList<java.lang.reflect.Type>(typeHierarchy), parameterizedType, in1Type, in2Type);\n        if (pojoType != null) {\n            return pojoType;\n        }\n    } catch (org.apache.flink.api.common.functions.InvalidTypesException e) {\n        if (org.apache.flink.api.java.typeutils.TypeExtractor.LOG.isDebugEnabled()) {\n            org.apache.flink.api.java.typeutils.TypeExtractor.LOG.debug(((\"Unable to handle type \" + clazz) + \" as POJO. Message: \") + e.getMessage(), e);\n        }\n    }\n    return new org.apache.flink.api.java.typeutils.GenericTypeInfo<OUT>(clazz);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.reflect.Modifier.isAbstract(clazz.getModifiers())",
            "dst_parent": "clazz.isInterface() || java.lang.reflect.Modifier.isAbstract(clazz.getModifiers())",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "java.lang.reflect.Modifier.isAbstract(clazz.getModifiers())",
            "src_parent": "(java.lang.reflect.Modifier.isAbstract(clazz.getModifiers()) && (!clazz.isArray()))",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.flink.api.java.typeutils.TypeExtractor.LOG.info((\"Class \" + clazz) + \" must have a default constructor to be used as a POJO.\")",
            "dst_parent": "{\n    org.apache.flink.api.java.typeutils.TypeExtractor.LOG.info((\"Class \" + clazz) + \" must have a default constructor to be used as a POJO.\");\n    return null;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "org.apache.flink.api.java.typeutils.TypeExtractor.LOG.warn((\"Class \" + clazz) + \" must have a default constructor to be used as a POJO.\")",
            "src_parent": "{\n    org.apache.flink.api.java.typeutils.TypeExtractor.LOG.warn((\"Class \" + clazz) + \" must have a default constructor to be used as a POJO.\");\n    return null;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return null",
            "dst_parent": "{\n    org.apache.flink.api.java.typeutils.TypeExtractor.LOG.info((\"Class \" + clazz) + \" must have a default constructor to be used as a POJO.\");\n    return null;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return null",
            "src_parent": "{\n    org.apache.flink.api.java.typeutils.TypeExtractor.LOG.warn((\"Class \" + clazz) + \" must have a default constructor to be used as a POJO.\");\n    return null;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        }
      ],
      "file_name": "TypeExtractor"
    }
  ],
  "id": "flink_91f9bfc7"
}