{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (tempLookup == subst.getVariableResolver()) {\n    final java.util.Map<java.lang.String, java.lang.String> map = ((java.util.Map<java.lang.String, java.lang.String>) (componentMap.get(org.apache.logging.log4j.core.config.Configuration.CONTEXT_PROPERTIES)));\n    final org.apache.logging.log4j.core.lookup.StrLookup lookup = (map == null) ? null : new org.apache.logging.log4j.core.lookup.MapLookup(map);\n    subst.setVariableResolver(new org.apache.logging.log4j.core.lookup.Interpolator(lookup));\n}",
            "src_parent": "{\n    if (tempLookup == subst.getVariableResolver()) {\n        final java.util.Map<java.lang.String, java.lang.String> map = ((java.util.Map<java.lang.String, java.lang.String>) (componentMap.get(org.apache.logging.log4j.core.config.Configuration.CONTEXT_PROPERTIES)));\n        final org.apache.logging.log4j.core.lookup.StrLookup lookup = (map == null) ? null : new org.apache.logging.log4j.core.lookup.MapLookup(map);\n        subst.setVariableResolver(new org.apache.logging.log4j.core.lookup.Interpolator(lookup));\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Continue",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "subst.setVariableResolver(((org.apache.logging.log4j.core.lookup.StrLookup) (child.getObject())))",
            "src_parent": "{\n    subst.setVariableResolver(((org.apache.logging.log4j.core.lookup.StrLookup) (child.getObject())));\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Continue",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.error(\"Properties declaration must be the first element in the configuration\");\n}",
            "src_parent": "if (tempLookup == subst.getVariableResolver()) {\n    subst.setVariableResolver(((org.apache.logging.log4j.core.lookup.StrLookup) (child.getObject())));\n} else {\n    org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.error(\"Properties declaration must be the first element in the configuration\");\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (rootNode.hasChildren() && rootNode.getChildren().get(0).getName().equalsIgnoreCase(\"Properties\")) {\n    org.apache.logging.log4j.core.config.Node first = rootNode.getChildren().get(0);\n    createConfiguration(first, null);\n    if (first.getObject() != null) {\n        subst.setVariableResolver(((org.apache.logging.log4j.core.lookup.StrLookup) (first.getObject())));\n    }\n} else {\n    final java.util.Map<java.lang.String, java.lang.String> map = ((java.util.Map<java.lang.String, java.lang.String>) (componentMap.get(org.apache.logging.log4j.core.config.Configuration.CONTEXT_PROPERTIES)));\n    final org.apache.logging.log4j.core.lookup.StrLookup lookup = (map == null) ? null : new org.apache.logging.log4j.core.lookup.MapLookup(map);\n    subst.setVariableResolver(new org.apache.logging.log4j.core.lookup.Interpolator(lookup));\n}",
            "src_parent": "{\n    boolean setRoot = false;\n    boolean setLoggers = false;\n    if (rootNode.hasChildren() && rootNode.getChildren().get(0).getName().equalsIgnoreCase(\"Properties\")) {\n        org.apache.logging.log4j.core.config.Node first = rootNode.getChildren().get(0);\n        createConfiguration(first, null);\n        if (first.getObject() != null) {\n            subst.setVariableResolver(((org.apache.logging.log4j.core.lookup.StrLookup) (first.getObject())));\n        }\n    } else {\n        final java.util.Map<java.lang.String, java.lang.String> map = ((java.util.Map<java.lang.String, java.lang.String>) (componentMap.get(org.apache.logging.log4j.core.config.Configuration.CONTEXT_PROPERTIES)));\n        final org.apache.logging.log4j.core.lookup.StrLookup lookup = (map == null) ? null : new org.apache.logging.log4j.core.lookup.MapLookup(map);\n        subst.setVariableResolver(new org.apache.logging.log4j.core.lookup.Interpolator(lookup));\n    }\n    for (final org.apache.logging.log4j.core.config.Node child : rootNode.getChildren()) {\n        if (child.getName().equalsIgnoreCase(\"Properties\")) {\n            if (tempLookup == subst.getVariableResolver()) {\n                org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.error(\"Properties declaration must be the first element in the configuration\");\n            }\n            continue;\n        }\n        createConfiguration(child, null);\n        if (child.getObject() == null) {\n            continue;\n        }\n        if (child.getName().equalsIgnoreCase(\"Appenders\")) {\n            appenders = ((java.util.concurrent.ConcurrentMap<java.lang.String, org.apache.logging.log4j.core.Appender>) (child.getObject()));\n        } else if (child.getObject() instanceof org.apache.logging.log4j.core.Filter) {\n            addFilter(((org.apache.logging.log4j.core.Filter) (child.getObject())));\n        } else if (child.getName().equalsIgnoreCase(\"Loggers\")) {\n            final org.apache.logging.log4j.core.config.Loggers l = ((org.apache.logging.log4j.core.config.Loggers) (child.getObject()));\n            loggers = l.getMap();\n            setLoggers = true;\n            if (l.getRoot() != null) {\n                root = l.getRoot();\n                setRoot = true;\n            }\n        } else {\n            org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.error((((\"Unknown object \\\"\" + child.getName()) + \"\\\" of type \") + child.getObject().getClass().getName()) + \" is ignored\");\n        }\n    }\n    if (!setLoggers) {\n        org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.warn(\"No Loggers were configured, using default. Is the Loggers element missing?\");\n        setToDefault();\n        return;\n    } else if (!setRoot) {\n        org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.warn(\"No Root logger was configured, creating default ERROR-level Root logger with Console appender\");\n        setToDefault();\n    }\n    for (final java.util.Map.Entry<java.lang.String, org.apache.logging.log4j.core.config.LoggerConfig> entry : loggers.entrySet()) {\n        final org.apache.logging.log4j.core.config.LoggerConfig l = entry.getValue();\n        for (final org.apache.logging.log4j.core.config.AppenderRef ref : l.getAppenderRefs()) {\n            final org.apache.logging.log4j.core.Appender app = appenders.get(ref.getRef());\n            if (app != null) {\n                l.addAppender(app, ref.getLevel(), ref.getFilter());\n            } else {\n                org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.error(((\"Unable to locate appender \" + ref.getRef()) + \" for logger \") + l.getName());\n            }\n        }\n    }\n    setParents();\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (child.getName().equalsIgnoreCase(\"Properties\")) {\n    if (tempLookup == subst.getVariableResolver()) {\n        org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.error(\"Properties declaration must be the first element in the configuration\");\n    }\n    continue;\n}",
            "dst_parent": "{\n    if (child.getName().equalsIgnoreCase(\"Properties\")) {\n        if (tempLookup == subst.getVariableResolver()) {\n            org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.error(\"Properties declaration must be the first element in the configuration\");\n        }\n        continue;\n    }\n    createConfiguration(child, null);\n    if (child.getObject() == null) {\n        continue;\n    }\n    if (child.getName().equalsIgnoreCase(\"Appenders\")) {\n        appenders = ((java.util.concurrent.ConcurrentMap<java.lang.String, org.apache.logging.log4j.core.Appender>) (child.getObject()));\n    } else if (child.getObject() instanceof org.apache.logging.log4j.core.Filter) {\n        addFilter(((org.apache.logging.log4j.core.Filter) (child.getObject())));\n    } else if (child.getName().equalsIgnoreCase(\"Loggers\")) {\n        final org.apache.logging.log4j.core.config.Loggers l = ((org.apache.logging.log4j.core.config.Loggers) (child.getObject()));\n        loggers = l.getMap();\n        setLoggers = true;\n        if (l.getRoot() != null) {\n            root = l.getRoot();\n            setRoot = true;\n        }\n    } else {\n        org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.error((((\"Unknown object \\\"\" + child.getName()) + \"\\\" of type \") + child.getObject().getClass().getName()) + \" is ignored\");\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (child.getName().equalsIgnoreCase(\"Properties\")) {\n    if (tempLookup == subst.getVariableResolver()) {\n        subst.setVariableResolver(((org.apache.logging.log4j.core.lookup.StrLookup) (child.getObject())));\n    } else {\n        org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.error(\"Properties declaration must be the first element in the configuration\");\n    }\n    continue;\n} else if (tempLookup == subst.getVariableResolver()) {\n    final java.util.Map<java.lang.String, java.lang.String> map = ((java.util.Map<java.lang.String, java.lang.String>) (componentMap.get(org.apache.logging.log4j.core.config.Configuration.CONTEXT_PROPERTIES)));\n    final org.apache.logging.log4j.core.lookup.StrLookup lookup = (map == null) ? null : new org.apache.logging.log4j.core.lookup.MapLookup(map);\n    subst.setVariableResolver(new org.apache.logging.log4j.core.lookup.Interpolator(lookup));\n}",
            "src_parent": "{\n    createConfiguration(child, null);\n    if (child.getObject() == null) {\n        continue;\n    }\n    if (child.getName().equalsIgnoreCase(\"Properties\")) {\n        if (tempLookup == subst.getVariableResolver()) {\n            subst.setVariableResolver(((org.apache.logging.log4j.core.lookup.StrLookup) (child.getObject())));\n        } else {\n            org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.error(\"Properties declaration must be the first element in the configuration\");\n        }\n        continue;\n    } else if (tempLookup == subst.getVariableResolver()) {\n        final java.util.Map<java.lang.String, java.lang.String> map = ((java.util.Map<java.lang.String, java.lang.String>) (componentMap.get(org.apache.logging.log4j.core.config.Configuration.CONTEXT_PROPERTIES)));\n        final org.apache.logging.log4j.core.lookup.StrLookup lookup = (map == null) ? null : new org.apache.logging.log4j.core.lookup.MapLookup(map);\n        subst.setVariableResolver(new org.apache.logging.log4j.core.lookup.Interpolator(lookup));\n    }\n    if (child.getName().equalsIgnoreCase(\"Appenders\")) {\n        appenders = ((java.util.concurrent.ConcurrentMap<java.lang.String, org.apache.logging.log4j.core.Appender>) (child.getObject()));\n    } else if (child.getObject() instanceof org.apache.logging.log4j.core.Filter) {\n        addFilter(((org.apache.logging.log4j.core.Filter) (child.getObject())));\n    } else if (child.getName().equalsIgnoreCase(\"Loggers\")) {\n        final org.apache.logging.log4j.core.config.Loggers l = ((org.apache.logging.log4j.core.config.Loggers) (child.getObject()));\n        loggers = l.getMap();\n        setLoggers = true;\n        if (l.getRoot() != null) {\n            root = l.getRoot();\n            setRoot = true;\n        }\n    } else {\n        org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.error((((\"Unknown object \\\"\" + child.getName()) + \"\\\" of type \") + child.getObject().getClass().getName()) + \" is ignored\");\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    final java.util.Map<java.lang.String, java.lang.String> map = ((java.util.Map<java.lang.String, java.lang.String>) (componentMap.get(org.apache.logging.log4j.core.config.Configuration.CONTEXT_PROPERTIES)));\n    final org.apache.logging.log4j.core.lookup.StrLookup lookup = (map == null) ? null : new org.apache.logging.log4j.core.lookup.MapLookup(map);\n    subst.setVariableResolver(new org.apache.logging.log4j.core.lookup.Interpolator(lookup));\n}",
            "dst_parent": "if (rootNode.hasChildren() && rootNode.getChildren().get(0).getName().equalsIgnoreCase(\"Properties\")) {\n    org.apache.logging.log4j.core.config.Node first = rootNode.getChildren().get(0);\n    createConfiguration(first, null);\n    if (first.getObject() != null) {\n        subst.setVariableResolver(((org.apache.logging.log4j.core.lookup.StrLookup) (first.getObject())));\n    }\n} else {\n    final java.util.Map<java.lang.String, java.lang.String> map = ((java.util.Map<java.lang.String, java.lang.String>) (componentMap.get(org.apache.logging.log4j.core.config.Configuration.CONTEXT_PROPERTIES)));\n    final org.apache.logging.log4j.core.lookup.StrLookup lookup = (map == null) ? null : new org.apache.logging.log4j.core.lookup.MapLookup(map);\n    subst.setVariableResolver(new org.apache.logging.log4j.core.lookup.Interpolator(lookup));\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    if (tempLookup == subst.getVariableResolver()) {\n        final java.util.Map<java.lang.String, java.lang.String> map = ((java.util.Map<java.lang.String, java.lang.String>) (componentMap.get(org.apache.logging.log4j.core.config.Configuration.CONTEXT_PROPERTIES)));\n        final org.apache.logging.log4j.core.lookup.StrLookup lookup = (map == null) ? null : new org.apache.logging.log4j.core.lookup.MapLookup(map);\n        subst.setVariableResolver(new org.apache.logging.log4j.core.lookup.Interpolator(lookup));\n    }\n}",
            "src_parent": "if (child.getName().equalsIgnoreCase(\"Properties\")) {\n    if (tempLookup == subst.getVariableResolver()) {\n        subst.setVariableResolver(((org.apache.logging.log4j.core.lookup.StrLookup) (child.getObject())));\n    } else {\n        org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.error(\"Properties declaration must be the first element in the configuration\");\n    }\n    continue;\n} else if (tempLookup == subst.getVariableResolver()) {\n    final java.util.Map<java.lang.String, java.lang.String> map = ((java.util.Map<java.lang.String, java.lang.String>) (componentMap.get(org.apache.logging.log4j.core.config.Configuration.CONTEXT_PROPERTIES)));\n    final org.apache.logging.log4j.core.lookup.StrLookup lookup = (map == null) ? null : new org.apache.logging.log4j.core.lookup.MapLookup(map);\n    subst.setVariableResolver(new org.apache.logging.log4j.core.lookup.Interpolator(lookup));\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "subst",
            "dst_parent": "subst.setVariableResolver(((org.apache.logging.log4j.core.lookup.StrLookup) (first.getObject())))",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "subst",
            "src_parent": "subst.setVariableResolver(((org.apache.logging.log4j.core.lookup.StrLookup) (child.getObject())))",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Continue",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.error(\"Properties declaration must be the first element in the configuration\")",
            "dst_parent": "{\n    org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.error(\"Properties declaration must be the first element in the configuration\");\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.error(\"Properties declaration must be the first element in the configuration\")",
            "src_parent": "{\n    org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.error(\"Properties declaration must be the first element in the configuration\");\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "BaseConfiguration"
    }
  ],
  "id": "logging-log4j2_2c966ad9"
}