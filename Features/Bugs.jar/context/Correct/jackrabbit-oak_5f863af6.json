{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(path, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions))",
            "dst_parent": "{\n    org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(path, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions));\n    return hasPermissions(getEntryIterator(predicate), predicate, permissions, path);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "UPD",
            "src": "java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = getEntryIterator(new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(path, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions)))",
            "src_parent": "{\n    java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = getEntryIterator(new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(path, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions)));\n    return hasPermissions(it, permissions, path);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions))",
            "dst_parent": "{\n    org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions));\n    return hasPermissions(getEntryIterator(predicate), predicate, permissions, tree.getPath());\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "UPD",
            "src": "java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = getEntryIterator(tree, property, permissions)",
            "src_parent": "{\n    java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = getEntryIterator(tree, property, permissions);\n    return hasPermissions(it, permissions, tree.getPath());\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate",
            "dst_parent": "org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(path, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions))",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>",
            "src_parent": "java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = getEntryIterator(new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(path, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions)))",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate",
            "dst_parent": "org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions))",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>",
            "src_parent": "java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = getEntryIterator(tree, property, permissions)",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "predicate",
            "dst_parent": "getEntryIterator(predicate)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "it",
            "src_parent": "hasPermissions(it, permissions, path)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "predicate",
            "dst_parent": "getEntryIterator(predicate)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "it",
            "src_parent": "hasPermissions(it, permissions, tree.getPath())",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "it",
            "dst_parent": "hasPermissions(it, predicate, permissions, tree.getPath())",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "property",
            "src_parent": "getIterator(property, permissions)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "predicate",
            "dst_parent": "hasPermissions(it, predicate, permissions, tree.getPath())",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "permissions",
            "src_parent": "getIterator(property, permissions)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate()",
            "src_parent": "getEntryIterator(new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate())",
            "src_parent_type": "Invocation",
            "src_type": "ConstructorCall"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "VE: Modifiers_Method",
            "src_parent": "private boolean internalIsGranted(@javax.annotation.Nonnull\norg.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nullable\norg.apache.jackrabbit.oak.api.PropertyState property, long permissions) {\n    java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = getEntryIterator(tree, property, permissions);\n    return hasPermissions(it, permissions, tree.getPath());\n}",
            "src_parent_type": "Method",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "@javax.annotation.Nonnull\norg.apache.jackrabbit.oak.api.Tree tree",
            "src_parent": "private boolean internalIsGranted(@javax.annotation.Nonnull\norg.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nullable\norg.apache.jackrabbit.oak.api.PropertyState property, long permissions) {\n    java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = getEntryIterator(tree, property, permissions);\n    return hasPermissions(it, permissions, tree.getPath());\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "@javax.annotation.Nullable\norg.apache.jackrabbit.oak.api.PropertyState property",
            "src_parent": "private boolean internalIsGranted(@javax.annotation.Nonnull\norg.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nullable\norg.apache.jackrabbit.oak.api.PropertyState property, long permissions) {\n    java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = getEntryIterator(tree, property, permissions);\n    return hasPermissions(it, permissions, tree.getPath());\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "long permissions",
            "src_parent": "private boolean internalIsGranted(@javax.annotation.Nonnull\norg.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nullable\norg.apache.jackrabbit.oak.api.PropertyState property, long permissions) {\n    java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = getEntryIterator(tree, property, permissions);\n    return hasPermissions(it, permissions, tree.getPath());\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "@javax.annotation.Nonnull\nprivate java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> getEntryIterator(@javax.annotation.Nonnull\norg.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nullable\norg.apache.jackrabbit.oak.api.PropertyState property, long permissions) {\n    return getEntryIterator(new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions)));\n}",
            "src_parent": "final class CompiledPermissionImpl implements org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissions , org.apache.jackrabbit.oak.spi.security.authorization.permission.PermissionConstants {\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.class);\n\n    private static final java.util.Map<java.lang.Long, org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits> READ_BITS = com.google.common.collect.ImmutableMap.of(Permissions.READ, PrivilegeBits.BUILT_IN.get(PrivilegeConstants.JCR_READ), Permissions.READ_NODE, PrivilegeBits.BUILT_IN.get(PrivilegeConstants.REP_READ_NODES), Permissions.READ_PROPERTY, PrivilegeBits.BUILT_IN.get(PrivilegeConstants.REP_READ_PROPERTIES), Permissions.READ_ACCESS_CONTROL, PrivilegeBits.BUILT_IN.get(PrivilegeConstants.JCR_READ_ACCESS_CONTROL));\n\n    private org.apache.jackrabbit.oak.api.Root root;\n\n    private final java.lang.String workspaceName;\n\n    private final org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.ReadPolicy readPolicy;\n\n    private org.apache.jackrabbit.oak.security.authorization.permission.PermissionStoreImpl store;\n\n    private final org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProvider userStore;\n\n    private final org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProvider groupStore;\n\n    private org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBitsProvider bitsProvider;\n\n    private final org.apache.jackrabbit.oak.security.authorization.permission.TreeTypeProvider typeProvider;\n\n    private CompiledPermissionImpl(@javax.annotation.Nonnull\n    java.util.Set<java.security.Principal> principals, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.api.Root root, @javax.annotation.Nonnull\n    java.lang.String workspaceName, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.spi.security.authorization.restriction.RestrictionProvider restrictionProvider, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.spi.security.ConfigurationParameters options, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.spi.security.Context ctx) {\n        this.root = root;\n        this.workspaceName = workspaceName;\n        bitsProvider = new org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBitsProvider(root);\n        java.util.Set<java.lang.String> readPaths = options.getConfigValue(org.apache.jackrabbit.oak.security.authorization.permission.PARAM_READ_PATHS, org.apache.jackrabbit.oak.security.authorization.permission.DEFAULT_READ_PATHS);\n        readPolicy = (readPaths.isEmpty()) ? org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.EmptyReadPolicy.INSTANCE : new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.DefaultReadPolicy(readPaths);\n        store = new org.apache.jackrabbit.oak.security.authorization.permission.PermissionStoreImpl(root, workspaceName, restrictionProvider);\n        java.util.Set<java.lang.String> userNames = new java.util.HashSet<java.lang.String>(principals.size());\n        java.util.Set<java.lang.String> groupNames = new java.util.HashSet<java.lang.String>(principals.size());\n        for (java.security.Principal principal : principals) {\n            if (principal instanceof java.security.acl.Group) {\n                groupNames.add(principal.getName());\n            } else {\n                userNames.add(principal.getName());\n            }\n        }\n        org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryCache cache = new org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryCache();\n        userStore = new org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProviderImpl(store, cache, userNames, options);\n        groupStore = new org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProviderImpl(store, cache, groupNames, options);\n        typeProvider = new org.apache.jackrabbit.oak.security.authorization.permission.TreeTypeProvider(ctx);\n    }\n\n    static org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissions create(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.api.Root root, @javax.annotation.Nonnull\n    java.lang.String workspaceName, @javax.annotation.Nonnull\n    java.util.Set<java.security.Principal> principals, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.spi.security.authorization.restriction.RestrictionProvider restrictionProvider, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.spi.security.ConfigurationParameters options, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.spi.security.Context ctx) {\n        org.apache.jackrabbit.oak.api.Tree permissionsTree = org.apache.jackrabbit.oak.security.authorization.permission.PermissionUtil.getPermissionsRoot(root, workspaceName);\n        if ((!permissionsTree.exists()) || principals.isEmpty()) {\n            return org.apache.jackrabbit.oak.security.authorization.permission.NoPermissions.getInstance();\n        } else {\n            return new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl(principals, root, workspaceName, restrictionProvider, options, ctx);\n        }\n    }\n\n    @java.lang.Override\n    public void refresh(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.api.Root root, @javax.annotation.Nonnull\n    java.lang.String workspaceName) {\n        this.root = root;\n        this.bitsProvider = new org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBitsProvider(root);\n        store.flush(root);\n        userStore.flush();\n        groupStore.flush();\n    }\n\n    @javax.annotation.Nonnull\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.security.authorization.permission.RepositoryPermission getRepositoryPermission() {\n        return new org.apache.jackrabbit.oak.spi.security.authorization.permission.RepositoryPermission() {\n            @java.lang.Override\n            public boolean isGranted(long repositoryPermissions) {\n                return hasPermissions(getEntryIterator(new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate()), repositoryPermissions, null);\n            }\n        };\n    }\n\n    @javax.annotation.Nonnull\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.security.authorization.permission.TreePermission getTreePermission(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.spi.security.authorization.permission.TreePermission parentPermission) {\n        if (tree.isRoot()) {\n            return new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.TreePermissionImpl(tree, TreeTypeProvider.TYPE_DEFAULT, EMPTY);\n        }\n        int parentType = org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.getParentType(parentPermission);\n        int type = typeProvider.getType(tree, parentType);\n        switch (type) {\n            case TreeTypeProvider.TYPE_HIDDEN :\n                return ALL;\n            case TreeTypeProvider.TYPE_VERSION :\n                java.lang.String ntName = org.apache.jackrabbit.oak.util.TreeUtil.getPrimaryTypeName(tree);\n                if (ntName == null) {\n                    return EMPTY;\n                }\n                if (VersionConstants.VERSION_STORE_NT_NAMES.contains(ntName) || VersionConstants.NT_ACTIVITY.equals(ntName)) {\n                    return new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.TreePermissionImpl(tree, TreeTypeProvider.TYPE_VERSION, parentPermission);\n                } else {\n                    org.apache.jackrabbit.oak.api.Tree versionableTree = getVersionableTree(tree);\n                    if (versionableTree == null) {\n                        org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.log.warn(\"Cannot retrieve versionable node for \" + tree.getPath());\n                        return EMPTY;\n                    } else {\n                        while (!versionableTree.exists()) {\n                            versionableTree = versionableTree.getParent();\n                        } \n                        org.apache.jackrabbit.oak.spi.security.authorization.permission.TreePermission pp = getParentPermission(versionableTree, TreeTypeProvider.TYPE_VERSION);\n                        return new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.TreePermissionImpl(versionableTree, TreeTypeProvider.TYPE_VERSION, pp);\n                    }\n                }\n            case TreeTypeProvider.TYPE_INTERNAL :\n                return EMPTY;\n            default :\n                return new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.TreePermissionImpl(tree, type, parentPermission);\n        }\n    }\n\n    @javax.annotation.Nonnull\n    private org.apache.jackrabbit.oak.spi.security.authorization.permission.TreePermission getParentPermission(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.api.Tree tree, int type) {\n        java.util.List<org.apache.jackrabbit.oak.api.Tree> trees = new java.util.ArrayList<org.apache.jackrabbit.oak.api.Tree>();\n        while (!tree.isRoot()) {\n            tree = tree.getParent();\n            if (tree.exists()) {\n                trees.add(0, tree);\n            }\n        } \n        org.apache.jackrabbit.oak.spi.security.authorization.permission.TreePermission pp = EMPTY;\n        for (org.apache.jackrabbit.oak.api.Tree tr : trees) {\n            pp = new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.TreePermissionImpl(tr, type, pp);\n        }\n        return pp;\n    }\n\n    @java.lang.Override\n    public boolean isGranted(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nullable\n    org.apache.jackrabbit.oak.api.PropertyState property, long permissions) {\n        int type = typeProvider.getType(tree);\n        switch (type) {\n            case TreeTypeProvider.TYPE_HIDDEN :\n                return true;\n            case TreeTypeProvider.TYPE_VERSION :\n                org.apache.jackrabbit.oak.api.Tree versionableTree = getVersionableTree(tree);\n                if (versionableTree == null) {\n                    return false;\n                }\n                if (versionableTree.exists()) {\n                    return internalIsGranted(versionableTree, property, permissions);\n                } else {\n                    java.lang.String path = versionableTree.getPath();\n                    if (property != null) {\n                        path = org.apache.jackrabbit.oak.commons.PathUtils.concat(path, property.getName());\n                    }\n                    return isGranted(path, permissions);\n                }\n            case TreeTypeProvider.TYPE_INTERNAL :\n                return false;\n            default :\n                return internalIsGranted(tree, property, permissions);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isGranted(@javax.annotation.Nonnull\n    java.lang.String path, long permissions) {\n        java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = getEntryIterator(new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(path, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions)));\n        return hasPermissions(it, permissions, path);\n    }\n\n    @javax.annotation.Nonnull\n    @java.lang.Override\n    public java.util.Set<java.lang.String> getPrivileges(@javax.annotation.Nullable\n    org.apache.jackrabbit.oak.api.Tree tree) {\n        return bitsProvider.getPrivilegeNames(internalGetPrivileges(tree));\n    }\n\n    @java.lang.Override\n    public boolean hasPrivileges(@javax.annotation.Nullable\n    org.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nonnull\n    java.lang.String... privilegeNames) {\n        return internalGetPrivileges(tree).includes(bitsProvider.getBits(privilegeNames));\n    }\n\n    private boolean internalIsGranted(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nullable\n    org.apache.jackrabbit.oak.api.PropertyState property, long permissions) {\n        java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = getEntryIterator(tree, property, permissions);\n        return hasPermissions(it, permissions, tree.getPath());\n    }\n\n    private boolean hasPermissions(@javax.annotation.Nonnull\n    java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> entries, long permissions, @javax.annotation.Nullable\n    java.lang.String path) {\n        boolean isReadable = (org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.diff(Permissions.READ, permissions) != org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.READ) && readPolicy.isReadablePath(path, false);\n        if ((!entries.hasNext()) && (!isReadable)) {\n            return false;\n        }\n        boolean respectParent = (path != null) && org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions);\n        long allows = (isReadable) ? org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.READ : org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.NO_PERMISSION;\n        long denies = org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.NO_PERMISSION;\n        org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits allowBits = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.getInstance();\n        if (isReadable) {\n            allowBits.add(bitsProvider.getBits(PrivilegeConstants.JCR_READ));\n        }\n        org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits denyBits = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.getInstance();\n        org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits parentAllowBits;\n        org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits parentDenyBits;\n        java.lang.String parentPath;\n        if (respectParent) {\n            parentAllowBits = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.getInstance();\n            parentDenyBits = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.getInstance();\n            parentPath = org.apache.jackrabbit.oak.security.authorization.permission.PermissionUtil.getParentPathOrNull(path);\n        } else {\n            parentAllowBits = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.EMPTY;\n            parentDenyBits = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.EMPTY;\n            parentPath = null;\n        }\n        while (entries.hasNext()) {\n            org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry entry = entries.next();\n            if (respectParent && (parentPath != null)) {\n                boolean matchesParent = entry.matchesParent(parentPath);\n                if (matchesParent) {\n                    if (entry.isAllow) {\n                        parentAllowBits.addDifference(entry.privilegeBits, parentDenyBits);\n                    } else {\n                        parentDenyBits.addDifference(entry.privilegeBits, parentAllowBits);\n                    }\n                }\n            }\n            if (entry.isAllow) {\n                allowBits.addDifference(entry.privilegeBits, denyBits);\n                long ap = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.calculatePermissions(allowBits, parentAllowBits, true);\n                allows |= org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.diff(ap, denies);\n                if ((allows | (~permissions)) == (-1)) {\n                    return true;\n                }\n            } else {\n                denyBits.addDifference(entry.privilegeBits, allowBits);\n                long dp = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.calculatePermissions(denyBits, parentDenyBits, false);\n                denies |= org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.diff(dp, allows);\n                if (org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.includes(denies, permissions)) {\n                    return false;\n                }\n            }\n        } \n        return (allows | (~permissions)) == (-1);\n    }\n\n    @javax.annotation.Nonnull\n    private org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits internalGetPrivileges(@javax.annotation.Nullable\n    org.apache.jackrabbit.oak.api.Tree tree) {\n        int type = (tree == null) ? TreeTypeProvider.TYPE_DEFAULT : typeProvider.getType(tree);\n        switch (type) {\n            case TreeTypeProvider.TYPE_HIDDEN :\n                return org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.EMPTY;\n            case TreeTypeProvider.TYPE_VERSION :\n                org.apache.jackrabbit.oak.api.Tree versionableTree = getVersionableTree(tree);\n                if ((versionableTree == null) || (!versionableTree.exists())) {\n                    return org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.EMPTY;\n                } else {\n                    return getPrivilegeBits(versionableTree);\n                }\n            case TreeTypeProvider.TYPE_INTERNAL :\n                return org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.EMPTY;\n            default :\n                return getPrivilegeBits(tree);\n        }\n    }\n\n    @javax.annotation.Nonnull\n    private org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits getPrivilegeBits(@javax.annotation.Nullable\n    org.apache.jackrabbit.oak.api.Tree tree) {\n        org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate pred = (tree == null) ? new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate() : new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, null, false);\n        java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> entries = getEntryIterator(pred);\n        org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits allowBits = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.getInstance();\n        org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits denyBits = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.getInstance();\n        while (entries.hasNext()) {\n            org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry entry = entries.next();\n            if (entry.isAllow) {\n                allowBits.addDifference(entry.privilegeBits, denyBits);\n            } else {\n                denyBits.addDifference(entry.privilegeBits, allowBits);\n            }\n        } \n        if ((tree != null) && readPolicy.isReadableTree(tree, false)) {\n            allowBits.add(bitsProvider.getBits(PrivilegeConstants.JCR_READ));\n        }\n        return allowBits;\n    }\n\n    @javax.annotation.Nonnull\n    private java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> getEntryIterator(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nullable\n    org.apache.jackrabbit.oak.api.PropertyState property, long permissions) {\n        return getEntryIterator(new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions)));\n    }\n\n    @javax.annotation.Nonnull\n    private java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> getEntryIterator(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate) {\n        java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> userEntries = userStore.getEntryIterator(predicate);\n        java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> groupEntries = groupStore.getEntryIterator(predicate);\n        return com.google.common.collect.Iterators.concat(userEntries, groupEntries);\n    }\n\n    @javax.annotation.CheckForNull\n    private org.apache.jackrabbit.oak.api.Tree getVersionableTree(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.api.Tree versionStoreTree) {\n        java.lang.String relPath = \"\";\n        java.lang.String versionablePath = null;\n        org.apache.jackrabbit.oak.api.Tree t = versionStoreTree;\n        while ((t.exists() && (!t.isRoot())) && (!VersionConstants.VERSION_STORE_ROOT_NAMES.contains(t.getName()))) {\n            java.lang.String ntName = org.apache.jackrabbit.oak.util.TreeUtil.getPrimaryTypeName(t);\n            if (VersionConstants.JCR_FROZENNODE.equals(t.getName()) && (t != versionStoreTree)) {\n                relPath = org.apache.jackrabbit.oak.commons.PathUtils.relativize(t.getPath(), versionStoreTree.getPath());\n            } else if (JcrConstants.NT_VERSIONHISTORY.equals(ntName)) {\n                org.apache.jackrabbit.oak.api.PropertyState prop = t.getProperty(workspaceName);\n                if (prop != null) {\n                    versionablePath = org.apache.jackrabbit.oak.commons.PathUtils.concat(prop.getValue(Type.PATH), relPath);\n                }\n                return versionablePath == null ? null : root.getTree(versionablePath);\n            } else if (VersionConstants.NT_CONFIGURATION.equals(ntName)) {\n                java.lang.String rootId = org.apache.jackrabbit.oak.util.TreeUtil.getString(t, VersionConstants.JCR_ROOT);\n                if (rootId != null) {\n                    versionablePath = new org.apache.jackrabbit.oak.plugins.identifier.IdentifierManager(root).getPath(rootId);\n                    return versionablePath == null ? null : root.getTree(versionablePath);\n                } else {\n                    org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.log.error(\"Missing mandatory property jcr:root with configuration node.\");\n                    return null;\n                }\n            } else if (VersionConstants.NT_ACTIVITY.equals(ntName)) {\n                return versionStoreTree;\n            }\n            t = t.getParent();\n        } \n        return versionStoreTree;\n    }\n\n    private static int getParentType(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.spi.security.authorization.permission.TreePermission parentPermission) {\n        if (parentPermission instanceof org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.TreePermissionImpl) {\n            return ((org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.TreePermissionImpl) (parentPermission)).type;\n        } else if (parentPermission == org.apache.jackrabbit.oak.spi.security.authorization.permission.TreePermission.EMPTY) {\n            return TreeTypeProvider.TYPE_DEFAULT;\n        } else {\n            throw new java.lang.IllegalArgumentException(\"Illegal TreePermission implementation.\");\n        }\n    }\n\n    private final class TreePermissionImpl implements org.apache.jackrabbit.oak.spi.security.authorization.permission.TreePermission {\n        private final org.apache.jackrabbit.oak.api.Tree tree;\n\n        private final org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.TreePermissionImpl parent;\n\n        private final int type;\n\n        private final boolean readableTree;\n\n        private java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> userEntries;\n\n        private java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> groupEntries;\n\n        private boolean skipped;\n\n        private org.apache.jackrabbit.oak.security.authorization.permission.ReadStatus readStatus;\n\n        private TreePermissionImpl(org.apache.jackrabbit.oak.api.Tree tree, int treeType, org.apache.jackrabbit.oak.spi.security.authorization.permission.TreePermission parentPermission) {\n            this.tree = tree;\n            if (parentPermission instanceof org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.TreePermissionImpl) {\n                parent = ((org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.TreePermissionImpl) (parentPermission));\n            } else {\n                parent = null;\n            }\n            readableTree = readPolicy.isReadableTree(tree, parent);\n            type = treeType;\n        }\n\n        @javax.annotation.Nonnull\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.spi.security.authorization.permission.TreePermission getChildPermission(@javax.annotation.Nonnull\n        java.lang.String childName, @javax.annotation.Nonnull\n        org.apache.jackrabbit.oak.spi.state.NodeState childState) {\n            org.apache.jackrabbit.oak.api.Tree childTree = new org.apache.jackrabbit.oak.plugins.tree.impl.ImmutableTree(((org.apache.jackrabbit.oak.plugins.tree.impl.ImmutableTree) (tree)), childName, childState);\n            return getTreePermission(childTree, this);\n        }\n\n        @java.lang.Override\n        public boolean canRead() {\n            boolean isAcTree = isAcTree();\n            if ((!isAcTree) && readableTree) {\n                return true;\n            }\n            if (readStatus == null) {\n                readStatus = ReadStatus.DENY_THIS;\n                long permission = (isAcTree) ? org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.READ_ACCESS_CONTROL : org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.READ_NODE;\n                org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits requiredBits = org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.READ_BITS.get(permission);\n                java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = getIterator(null, permission);\n                while (it.hasNext()) {\n                    org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry entry = it.next();\n                    if (entry.privilegeBits.includes(requiredBits)) {\n                        readStatus = org.apache.jackrabbit.oak.security.authorization.permission.ReadStatus.create(entry, permission, skipped);\n                        break;\n                    } else if ((permission == org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.READ_NODE) && entry.privilegeBits.includes(org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.READ_BITS.get(Permissions.READ_PROPERTY))) {\n                        skipped = true;\n                    }\n                } \n            }\n            return readStatus.allowsThis();\n        }\n\n        @java.lang.Override\n        public boolean canRead(@javax.annotation.Nonnull\n        org.apache.jackrabbit.oak.api.PropertyState property) {\n            boolean isAcTree = isAcTree();\n            if ((!isAcTree) && readableTree) {\n                return true;\n            }\n            if ((readStatus != null) && readStatus.allowsProperties()) {\n                return true;\n            }\n            long permission = (isAcTree) ? org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.READ_ACCESS_CONTROL : org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.READ_PROPERTY;\n            java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = getIterator(property, permission);\n            while (it.hasNext()) {\n                org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry entry = it.next();\n                if (entry.privilegeBits.includes(org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.READ_BITS.get(permission))) {\n                    return entry.isAllow;\n                }\n            } \n            return false;\n        }\n\n        @java.lang.Override\n        public boolean canReadAll() {\n            return (readStatus != null) && readStatus.allowsAll();\n        }\n\n        @java.lang.Override\n        public boolean canReadProperties() {\n            return (readStatus != null) && readStatus.allowsProperties();\n        }\n\n        @java.lang.Override\n        public boolean isGranted(long permissions) {\n            return hasPermissions(getIterator(null, permissions), permissions, tree.getPath());\n        }\n\n        @java.lang.Override\n        public boolean isGranted(long permissions, @javax.annotation.Nonnull\n        org.apache.jackrabbit.oak.api.PropertyState property) {\n            return hasPermissions(getIterator(property, permissions), permissions, tree.getPath());\n        }\n\n        private java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> getIterator(@javax.annotation.Nullable\n        org.apache.jackrabbit.oak.api.PropertyState property, long permissions) {\n            org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions));\n            return com.google.common.collect.Iterators.concat(new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.LazyIterator(this, true, predicate), new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.LazyIterator(this, false, predicate));\n        }\n\n        private java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> getUserEntries() {\n            if (userEntries == null) {\n                userEntries = userStore.getEntries(tree);\n            }\n            return userEntries.iterator();\n        }\n\n        private java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> getGroupEntries() {\n            if (groupEntries == null) {\n                groupEntries = groupStore.getEntries(tree);\n            }\n            return groupEntries.iterator();\n        }\n\n        private boolean isAcTree() {\n            return type == TreeTypeProvider.TYPE_AC;\n        }\n    }\n\n    private static final class LazyIterator extends org.apache.jackrabbit.commons.iterator.AbstractLazyIterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> {\n        private final org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.TreePermissionImpl treePermission;\n\n        private final boolean isUser;\n\n        private final org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate;\n\n        private java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> nextEntries = com.google.common.collect.Iterators.emptyIterator();\n\n        private org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.TreePermissionImpl tp;\n\n        private LazyIterator(@javax.annotation.Nonnull\n        org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.TreePermissionImpl treePermission, boolean isUser, @javax.annotation.Nonnull\n        org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate) {\n            this.treePermission = treePermission;\n            this.isUser = isUser;\n            this.predicate = predicate;\n            tp = treePermission;\n        }\n\n        @java.lang.Override\n        protected org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry getNext() {\n            org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry next = null;\n            while (next == null) {\n                if (nextEntries.hasNext()) {\n                    org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry pe = nextEntries.next();\n                    if (predicate.apply(pe)) {\n                        next = pe;\n                    } else {\n                        treePermission.skipped = true;\n                    }\n                } else {\n                    if (tp == null) {\n                        break;\n                    }\n                    nextEntries = (isUser) ? tp.getUserEntries() : tp.getGroupEntries();\n                    tp = tp.parent;\n                }\n            } \n            return next;\n        }\n    }\n\n    private interface ReadPolicy {\n        public abstract boolean isReadableTree(@javax.annotation.Nonnull\n        org.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nullable\n        org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.TreePermissionImpl parent);\n\n        public abstract boolean isReadableTree(@javax.annotation.Nonnull\n        org.apache.jackrabbit.oak.api.Tree tree, boolean exactMatch);\n\n        public abstract boolean isReadablePath(@javax.annotation.Nullable\n        java.lang.String treePath, boolean exactMatch);\n    }\n\n    private static final class EmptyReadPolicy implements org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.ReadPolicy {\n        private static final org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.ReadPolicy INSTANCE = new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.EmptyReadPolicy();\n\n        private EmptyReadPolicy() {\n        }\n\n        @java.lang.Override\n        public boolean isReadableTree(@javax.annotation.Nonnull\n        org.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nullable\n        org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.TreePermissionImpl parent) {\n            return false;\n        }\n\n        public boolean isReadableTree(@javax.annotation.Nonnull\n        org.apache.jackrabbit.oak.api.Tree tree, boolean exactMatch) {\n            return false;\n        }\n\n        @java.lang.Override\n        public boolean isReadablePath(@javax.annotation.Nullable\n        java.lang.String treePath, boolean exactMatch) {\n            return false;\n        }\n    }\n\n    private static final class DefaultReadPolicy implements org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.ReadPolicy {\n        private final java.lang.String[] readPaths;\n\n        private final java.lang.String[] altReadPaths;\n\n        private final boolean isDefaultPaths;\n\n        private DefaultReadPolicy(java.util.Set<java.lang.String> readPaths) {\n            this.readPaths = readPaths.toArray(new java.lang.String[readPaths.size()]);\n            altReadPaths = new java.lang.String[readPaths.size()];\n            int i = 0;\n            for (java.lang.String p : this.readPaths) {\n                altReadPaths[i++] = p + '/';\n            }\n            isDefaultPaths = (readPaths.size() == org.apache.jackrabbit.oak.security.authorization.permission.DEFAULT_READ_PATHS.size()) && readPaths.containsAll(org.apache.jackrabbit.oak.security.authorization.permission.DEFAULT_READ_PATHS);\n        }\n\n        public boolean isReadableTree(@javax.annotation.Nonnull\n        org.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nullable\n        org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.TreePermissionImpl parent) {\n            if (parent != null) {\n                if (parent.readableTree) {\n                    return true;\n                } else if ((!isDefaultPaths) || parent.tree.getName().equals(JcrConstants.JCR_SYSTEM)) {\n                    return isReadableTree(tree, true);\n                } else {\n                    return false;\n                }\n            } else {\n                return isReadableTree(tree, true);\n            }\n        }\n\n        public boolean isReadableTree(@javax.annotation.Nonnull\n        org.apache.jackrabbit.oak.api.Tree tree, boolean exactMatch) {\n            java.lang.String targetPath = tree.getPath();\n            for (java.lang.String path : readPaths) {\n                if (targetPath.equals(path)) {\n                    return true;\n                }\n            }\n            if (!exactMatch) {\n                for (java.lang.String path : altReadPaths) {\n                    if (targetPath.startsWith(path)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        public boolean isReadablePath(@javax.annotation.Nullable\n        java.lang.String treePath, boolean exactMatch) {\n            if (treePath != null) {\n                for (java.lang.String path : readPaths) {\n                    if (treePath.equals(path)) {\n                        return true;\n                    }\n                }\n                if (!exactMatch) {\n                    for (java.lang.String path : altReadPaths) {\n                        if (treePath.startsWith(path)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "return hasPermissions(getIterator(null, permissions), permissions, tree.getPath())",
            "src_parent": "{\n    return hasPermissions(getIterator(null, permissions), permissions, tree.getPath());\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "getIterator(property, permissions)",
            "src_parent": "hasPermissions(getIterator(property, permissions), permissions, tree.getPath())",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "@javax.annotation.Nonnull\norg.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate",
            "src_parent": "private boolean hasPermissions(@javax.annotation.Nonnull\njava.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> entries, @javax.annotation.Nonnull\norg.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate, long permissions, @javax.annotation.Nullable\njava.lang.String path) {\n    boolean isReadable = (org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.diff(Permissions.READ, permissions) != org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.READ) && readPolicy.isReadablePath(path, false);\n    if ((!entries.hasNext()) && (!isReadable)) {\n        return false;\n    }\n    boolean respectParent = (path != null) && org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions);\n    long allows = (isReadable) ? org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.READ : org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.NO_PERMISSION;\n    long denies = org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.NO_PERMISSION;\n    org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits allowBits = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.getInstance();\n    if (isReadable) {\n        allowBits.add(bitsProvider.getBits(PrivilegeConstants.JCR_READ));\n    }\n    org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits denyBits = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.getInstance();\n    org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits parentAllowBits;\n    org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits parentDenyBits;\n    java.lang.String parentPath;\n    if (respectParent) {\n        parentAllowBits = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.getInstance();\n        parentDenyBits = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.getInstance();\n        parentPath = org.apache.jackrabbit.oak.security.authorization.permission.PermissionUtil.getParentPathOrNull(path);\n    } else {\n        parentAllowBits = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.EMPTY;\n        parentDenyBits = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.EMPTY;\n        parentPath = null;\n    }\n    while (entries.hasNext()) {\n        org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry entry = entries.next();\n        if (respectParent && (parentPath != null)) {\n            boolean matchesParent = entry.matchesParent(parentPath);\n            if (matchesParent) {\n                if (entry.isAllow) {\n                    parentAllowBits.addDifference(entry.privilegeBits, parentDenyBits);\n                } else {\n                    parentDenyBits.addDifference(entry.privilegeBits, parentAllowBits);\n                }\n            }\n        }\n        if (entry.isAllow) {\n            if ((!respectParent) || predicate.apply(entry, false)) {\n                allowBits.addDifference(entry.privilegeBits, denyBits);\n            }\n            long ap = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.calculatePermissions(allowBits, parentAllowBits, true);\n            allows |= org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.diff(ap, denies);\n            if ((allows | (~permissions)) == (-1)) {\n                return true;\n            }\n        } else {\n            if ((!respectParent) || predicate.apply(entry, false)) {\n                denyBits.addDifference(entry.privilegeBits, allowBits);\n            }\n            long dp = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.calculatePermissions(denyBits, parentDenyBits, false);\n            denies |= org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.diff(dp, allows);\n            if (org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.includes(denies, permissions)) {\n                return false;\n            }\n        }\n    } \n    return (allows | (~permissions)) == (-1);\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, null, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions))",
            "src_parent": "{\n    org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, null, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions));\n    java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = com.google.common.collect.Iterators.concat(new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.LazyIterator(this, true, predicate), new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.LazyIterator(this, false, predicate));\n    return hasPermissions(it, predicate, permissions, tree.getPath());\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = com.google.common.collect.Iterators.concat(new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.LazyIterator(this, true, predicate), new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.LazyIterator(this, false, predicate))",
            "src_parent": "{\n    org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, null, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions));\n    java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = com.google.common.collect.Iterators.concat(new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.LazyIterator(this, true, predicate), new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.LazyIterator(this, false, predicate));\n    return hasPermissions(it, predicate, permissions, tree.getPath());\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "return hasPermissions(it, predicate, permissions, tree.getPath())",
            "src_parent": "{\n    org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, null, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions));\n    java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = com.google.common.collect.Iterators.concat(new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.LazyIterator(this, true, predicate), new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.LazyIterator(this, false, predicate));\n    return hasPermissions(it, predicate, permissions, tree.getPath());\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions))",
            "src_parent": "{\n    org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions));\n    java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = com.google.common.collect.Iterators.concat(new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.LazyIterator(this, true, predicate), new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.LazyIterator(this, false, predicate));\n    return hasPermissions(it, predicate, permissions, tree.getPath());\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = com.google.common.collect.Iterators.concat(new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.LazyIterator(this, true, predicate), new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.LazyIterator(this, false, predicate))",
            "src_parent": "{\n    org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions));\n    java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> it = com.google.common.collect.Iterators.concat(new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.LazyIterator(this, true, predicate), new org.apache.jackrabbit.oak.security.authorization.permission.CompiledPermissionImpl.LazyIterator(this, false, predicate));\n    return hasPermissions(it, predicate, permissions, tree.getPath());\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "getEntryIterator(predicate)",
            "src_parent": "hasPermissions(getEntryIterator(predicate), predicate, permissions, path)",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "predicate",
            "src_parent": "hasPermissions(getEntryIterator(predicate), predicate, permissions, path)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "getEntryIterator(predicate)",
            "src_parent": "hasPermissions(getEntryIterator(predicate), predicate, permissions, tree.getPath())",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "predicate",
            "src_parent": "hasPermissions(getEntryIterator(predicate), predicate, permissions, tree.getPath())",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if ((!respectParent) || predicate.apply(entry, false)) {\n    allowBits.addDifference(entry.privilegeBits, denyBits);\n}",
            "src_parent": "{\n    if ((!respectParent) || predicate.apply(entry, false)) {\n        allowBits.addDifference(entry.privilegeBits, denyBits);\n    }\n    long ap = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.calculatePermissions(allowBits, parentAllowBits, true);\n    allows |= org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.diff(ap, denies);\n    if ((allows | (~permissions)) == (-1)) {\n        return true;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if ((!respectParent) || predicate.apply(entry, false)) {\n    denyBits.addDifference(entry.privilegeBits, allowBits);\n}",
            "src_parent": "{\n    if ((!respectParent) || predicate.apply(entry, false)) {\n        denyBits.addDifference(entry.privilegeBits, allowBits);\n    }\n    long dp = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.calculatePermissions(denyBits, parentDenyBits, false);\n    denies |= org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.diff(dp, allows);\n    if (org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.includes(denies, permissions)) {\n        return false;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate()",
            "src_parent": "{\n    org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate();\n    return hasPermissions(getEntryIterator(predicate), predicate, repositoryPermissions, null);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "predicate",
            "src_parent": "hasPermissions(getEntryIterator(predicate), predicate, repositoryPermissions, null)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "predicate",
            "src_parent": "getEntryIterator(predicate)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Method",
            "dst_parent": "private boolean internalIsGranted(@javax.annotation.Nonnull\norg.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nullable\norg.apache.jackrabbit.oak.api.PropertyState property, long permissions) {\n    org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions));\n    return hasPermissions(getEntryIterator(predicate), predicate, permissions, tree.getPath());\n}",
            "dst_parent_type": "Method",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Method",
            "src_parent": "@javax.annotation.Nonnull\nprivate java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> getEntryIterator(@javax.annotation.Nonnull\norg.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nullable\norg.apache.jackrabbit.oak.api.PropertyState property, long permissions) {\n    return getEntryIterator(new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions)));\n}",
            "src_parent_type": "Method",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "@javax.annotation.Nonnull\norg.apache.jackrabbit.oak.api.Tree tree",
            "dst_parent": "private boolean internalIsGranted(@javax.annotation.Nonnull\norg.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nullable\norg.apache.jackrabbit.oak.api.PropertyState property, long permissions) {\n    org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions));\n    return hasPermissions(getEntryIterator(predicate), predicate, permissions, tree.getPath());\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "@javax.annotation.Nonnull\norg.apache.jackrabbit.oak.api.Tree tree",
            "src_parent": "@javax.annotation.Nonnull\nprivate java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> getEntryIterator(@javax.annotation.Nonnull\norg.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nullable\norg.apache.jackrabbit.oak.api.PropertyState property, long permissions) {\n    return getEntryIterator(new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions)));\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "@javax.annotation.Nullable\norg.apache.jackrabbit.oak.api.PropertyState property",
            "dst_parent": "private boolean internalIsGranted(@javax.annotation.Nonnull\norg.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nullable\norg.apache.jackrabbit.oak.api.PropertyState property, long permissions) {\n    org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions));\n    return hasPermissions(getEntryIterator(predicate), predicate, permissions, tree.getPath());\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "@javax.annotation.Nullable\norg.apache.jackrabbit.oak.api.PropertyState property",
            "src_parent": "@javax.annotation.Nonnull\nprivate java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> getEntryIterator(@javax.annotation.Nonnull\norg.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nullable\norg.apache.jackrabbit.oak.api.PropertyState property, long permissions) {\n    return getEntryIterator(new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions)));\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "long permissions",
            "dst_parent": "private boolean internalIsGranted(@javax.annotation.Nonnull\norg.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nullable\norg.apache.jackrabbit.oak.api.PropertyState property, long permissions) {\n    org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions));\n    return hasPermissions(getEntryIterator(predicate), predicate, permissions, tree.getPath());\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "long permissions",
            "src_parent": "@javax.annotation.Nonnull\nprivate java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> getEntryIterator(@javax.annotation.Nonnull\norg.apache.jackrabbit.oak.api.Tree tree, @javax.annotation.Nullable\norg.apache.jackrabbit.oak.api.PropertyState property, long permissions) {\n    return getEntryIterator(new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions)));\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(path, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions))",
            "dst_parent": "org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(path, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions))",
            "dst_parent_type": "LocalVariable",
            "dst_type": "ConstructorCall",
            "operator": "MOV",
            "src": "new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(path, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions))",
            "src_parent": "getEntryIterator(new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(path, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions)))",
            "src_parent_type": "Invocation",
            "src_type": "ConstructorCall"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions))",
            "dst_parent": "org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate = new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions))",
            "dst_parent_type": "LocalVariable",
            "dst_type": "ConstructorCall",
            "operator": "MOV",
            "src": "new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions))",
            "src_parent": "getEntryIterator(new org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate(tree, property, org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.respectParentPermissions(permissions)))",
            "src_parent_type": "Invocation",
            "src_type": "ConstructorCall"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "predicate",
            "dst_parent": "getEntryIterator(predicate)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "it",
            "src_parent": "hasPermissions(it, permissions, path)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "predicate",
            "dst_parent": "getEntryIterator(predicate)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "it",
            "src_parent": "hasPermissions(it, permissions, tree.getPath())",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "permissions",
            "dst_parent": "hasPermissions(it, predicate, permissions, tree.getPath())",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "permissions",
            "src_parent": "hasPermissions(getIterator(null, permissions), permissions, tree.getPath())",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "tree.getPath()",
            "dst_parent": "hasPermissions(it, predicate, permissions, tree.getPath())",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "tree.getPath()",
            "src_parent": "hasPermissions(getIterator(property, permissions), permissions, tree.getPath())",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "it",
            "dst_parent": "hasPermissions(it, predicate, permissions, tree.getPath())",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "property",
            "src_parent": "getIterator(property, permissions)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "predicate",
            "dst_parent": "hasPermissions(it, predicate, permissions, tree.getPath())",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "permissions",
            "src_parent": "getIterator(property, permissions)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "tree.getPath()",
            "dst_parent": "hasPermissions(it, predicate, permissions, tree.getPath())",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "tree.getPath()",
            "src_parent": "hasPermissions(getIterator(null, permissions), permissions, tree.getPath())",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "allowBits.addDifference(entry.privilegeBits, denyBits)",
            "dst_parent": "{\n    allowBits.addDifference(entry.privilegeBits, denyBits);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "allowBits.addDifference(entry.privilegeBits, denyBits)",
            "src_parent": "{\n    allowBits.addDifference(entry.privilegeBits, denyBits);\n    long ap = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.calculatePermissions(allowBits, parentAllowBits, true);\n    allows |= org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.diff(ap, denies);\n    if ((allows | (~permissions)) == (-1)) {\n        return true;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "denyBits.addDifference(entry.privilegeBits, allowBits)",
            "dst_parent": "{\n    denyBits.addDifference(entry.privilegeBits, allowBits);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "denyBits.addDifference(entry.privilegeBits, allowBits)",
            "src_parent": "{\n    denyBits.addDifference(entry.privilegeBits, allowBits);\n    long dp = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.calculatePermissions(denyBits, parentDenyBits, false);\n    denies |= org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.diff(dp, allows);\n    if (org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions.includes(denies, permissions)) {\n        return false;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "CompiledPermissionImpl"
    }
  ],
  "id": "jackrabbit-oak_5f863af6"
}