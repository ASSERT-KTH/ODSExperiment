{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static boolean isExcludedProperty(org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr, org.apache.jackrabbit.oak.spi.state.NodeState definition) {\n    java.lang.String name = pr.propertyName;\n    if (name.contains(\"/\")) {\n        return true;\n    }\n    for (java.lang.String e : definition.getStrings(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.EXCLUDE_PROPERTY_NAMES)) {\n        if (e.equalsIgnoreCase(name)) {\n            return true;\n        }\n    }\n    java.lang.Integer type = null;\n    if (pr.first != null) {\n        type = pr.first.getType().tag();\n    } else if (pr.last != null) {\n        type = pr.last.getType().tag();\n    } else if ((pr.list != null) && (!pr.list.isEmpty())) {\n        type = pr.list.get(0).getType().tag();\n    }\n    if (type != null) {\n        boolean isIn = false;\n        for (java.lang.String e : definition.getStrings(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.INCLUDE_PROPERTY_TYPES)) {\n            if (javax.jcr.PropertyType.valueFromName(e) == type) {\n                isIn = true;\n            }\n        }\n        if (!isIn) {\n            return true;\n        }\n    }\n    return false;\n}",
            "src_parent": "public class LuceneIndex implements org.apache.jackrabbit.oak.spi.query.QueryIndex.FulltextQueryIndex {\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.class);\n\n    public static final java.lang.String NATIVE_QUERY_FUNCTION = \"native*lucene\";\n\n    private final org.apache.lucene.analysis.Analyzer analyzer;\n\n    private final org.apache.jackrabbit.oak.plugins.index.aggregate.NodeAggregator aggregator;\n\n    public LuceneIndex(org.apache.lucene.analysis.Analyzer analyzer, org.apache.jackrabbit.oak.plugins.index.aggregate.NodeAggregator aggregator) {\n        this.analyzer = analyzer;\n        this.aggregator = aggregator;\n    }\n\n    @java.lang.Override\n    public java.lang.String getIndexName() {\n        return \"lucene\";\n    }\n\n    @java.lang.Override\n    public double getCost(org.apache.jackrabbit.oak.spi.query.Filter filter, org.apache.jackrabbit.oak.spi.state.NodeState root) {\n        if (!org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.isLive(root)) {\n            return java.lang.Double.POSITIVE_INFINITY;\n        }\n        org.apache.jackrabbit.oak.query.fulltext.FullTextExpression ft = filter.getFullTextConstraint();\n        if (ft == null) {\n            return java.lang.Double.POSITIVE_INFINITY;\n        }\n        java.util.Set<java.lang.String> relPaths = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getRelativePaths(ft);\n        if (relPaths.size() > 1) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.LOG.warn(\"More than one relative parent for query \" + filter.getQueryStatement());\n            return new org.apache.jackrabbit.oak.plugins.index.lucene.MultiLuceneIndex(filter, root, relPaths).getCost();\n        }\n        java.lang.String parent = relPaths.iterator().next();\n        if (parent.isEmpty()) {\n            return 10;\n        }\n        return 15;\n    }\n\n    private static java.util.Set<java.lang.String> getRelativePaths(org.apache.jackrabbit.oak.query.fulltext.FullTextExpression ft) {\n        if (ft == null) {\n            return java.util.Collections.emptySet();\n        }\n        final java.util.HashSet<java.lang.String> relPaths = new java.util.HashSet<java.lang.String>();\n        ft.accept(new org.apache.jackrabbit.oak.query.fulltext.FullTextVisitor.FullTextVisitorBase() {\n            @java.lang.Override\n            public boolean visit(org.apache.jackrabbit.oak.query.fulltext.FullTextTerm term) {\n                java.lang.String p = term.getPropertyName();\n                if (p == null) {\n                    relPaths.add(\"\");\n                } else if (p.startsWith(\"../\") || p.startsWith(\"./\")) {\n                    throw new java.lang.IllegalArgumentException(\"Relative parent is not supported:\" + p);\n                } else if (getDepth(p) > 1) {\n                    java.lang.String parent = getParentPath(p);\n                    relPaths.add(parent);\n                } else {\n                    relPaths.add(\"\");\n                }\n                return true;\n            }\n        });\n        return relPaths;\n    }\n\n    private static boolean isLive(org.apache.jackrabbit.oak.spi.state.NodeState root) {\n        org.apache.jackrabbit.oak.spi.state.NodeState def = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getIndexDef(root);\n        if (def == null) {\n            return false;\n        }\n        java.lang.String type = def.getString(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.PERSISTENCE_NAME);\n        if ((type == null) || org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.PERSISTENCE_OAK.equalsIgnoreCase(type)) {\n            return org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getIndexDataNode(def) != null;\n        }\n        if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.PERSISTENCE_FILE.equalsIgnoreCase(type)) {\n            return def.getString(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.PERSISTENCE_PATH) != null;\n        }\n        return false;\n    }\n\n    private static org.apache.lucene.store.Directory newDirectory(org.apache.jackrabbit.oak.spi.state.NodeState root) {\n        org.apache.jackrabbit.oak.spi.state.NodeState def = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getIndexDef(root);\n        if (def == null) {\n            return null;\n        }\n        java.lang.String type = def.getString(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.PERSISTENCE_NAME);\n        if ((type == null) || org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.PERSISTENCE_OAK.equalsIgnoreCase(type)) {\n            org.apache.jackrabbit.oak.spi.state.NodeState index = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getIndexDataNode(def);\n            if (index == null) {\n                return null;\n            }\n            return new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(new org.apache.jackrabbit.oak.spi.state.ReadOnlyBuilder(index));\n        }\n        if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.PERSISTENCE_FILE.equalsIgnoreCase(type)) {\n            java.lang.String fs = def.getString(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.PERSISTENCE_PATH);\n            if (fs == null) {\n                return null;\n            }\n            java.io.File f = new java.io.File(fs);\n            if (!f.exists()) {\n                return null;\n            }\n            try {\n                return org.apache.lucene.store.FSDirectory.open(f);\n            } catch (java.io.IOException e) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.LOG.error(\"Unable to open directory {}\", fs);\n            }\n        }\n        return null;\n    }\n\n    private static org.apache.jackrabbit.oak.spi.state.NodeState getIndexDef(org.apache.jackrabbit.oak.spi.state.NodeState node) {\n        org.apache.jackrabbit.oak.spi.state.NodeState state = node.getChildNode(org.apache.jackrabbit.oak.plugins.index.IndexConstants.INDEX_DEFINITIONS_NAME);\n        for (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry entry : state.getChildNodeEntries()) {\n            org.apache.jackrabbit.oak.spi.state.NodeState ns = entry.getNodeState();\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.TYPE_LUCENE.equals(ns.getString(org.apache.jackrabbit.oak.plugins.index.IndexConstants.TYPE_PROPERTY_NAME))) {\n                return ns;\n            }\n        }\n        return null;\n    }\n\n    private static org.apache.jackrabbit.oak.spi.state.NodeState getIndexDataNode(org.apache.jackrabbit.oak.spi.state.NodeState node) {\n        if (node.hasChildNode(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.INDEX_DATA_CHILD_NAME)) {\n            return node.getChildNode(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.INDEX_DATA_CHILD_NAME);\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.String getPlan(org.apache.jackrabbit.oak.spi.query.Filter filter, org.apache.jackrabbit.oak.spi.state.NodeState root) {\n        org.apache.jackrabbit.oak.query.fulltext.FullTextExpression ft = filter.getFullTextConstraint();\n        java.util.Set<java.lang.String> relPaths = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getRelativePaths(ft);\n        if (relPaths.size() > 1) {\n            return new org.apache.jackrabbit.oak.plugins.index.lucene.MultiLuceneIndex(filter, root, relPaths).getPlan();\n        }\n        java.lang.String parent = (relPaths.size() == 0) ? \"\" : relPaths.iterator().next();\n        boolean nonFullTextConstraints = parent.isEmpty();\n        java.lang.String plan = ((org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getQuery(filter, null, nonFullTextConstraints, analyzer, org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getIndexDef(root)) + \" ft:(\") + ft) + \")\";\n        if (!parent.isEmpty()) {\n            plan += \" parent:\" + parent;\n        }\n        return plan;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.query.Cursor query(org.apache.jackrabbit.oak.spi.query.Filter filter, org.apache.jackrabbit.oak.spi.state.NodeState root) {\n        if (!org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.isLive(root)) {\n            throw new java.lang.IllegalStateException(\"Lucene index is not live\");\n        }\n        org.apache.jackrabbit.oak.query.fulltext.FullTextExpression ft = filter.getFullTextConstraint();\n        java.util.Set<java.lang.String> relPaths = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getRelativePaths(ft);\n        if (relPaths.size() > 1) {\n            return new org.apache.jackrabbit.oak.plugins.index.lucene.MultiLuceneIndex(filter, root, relPaths).query();\n        }\n        java.lang.String parent = (relPaths.size() == 0) ? \"\" : relPaths.iterator().next();\n        boolean nonFullTextConstraints = parent.isEmpty();\n        org.apache.lucene.store.Directory directory = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.newDirectory(root);\n        org.apache.jackrabbit.oak.query.QueryEngineSettings settings = filter.getQueryEngineSettings();\n        if (directory == null) {\n            return newPathCursor(java.util.Collections.<java.lang.String>emptySet(), settings);\n        }\n        long s = java.lang.System.currentTimeMillis();\n        try {\n            try {\n                org.apache.lucene.index.IndexReader reader = org.apache.lucene.index.DirectoryReader.open(directory);\n                try {\n                    org.apache.lucene.search.IndexSearcher searcher = new org.apache.lucene.search.IndexSearcher(reader);\n                    java.util.List<org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.LuceneResultRow> rows = new java.util.ArrayList<org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.LuceneResultRow>();\n                    org.apache.lucene.search.Query query = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getQuery(filter, reader, nonFullTextConstraints, analyzer, org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getIndexDef(root));\n                    java.util.HashSet<java.lang.String> seenPaths = new java.util.HashSet<java.lang.String>();\n                    int parentDepth = getDepth(parent);\n                    if (query != null) {\n                        org.apache.lucene.search.TopDocs docs = searcher.search(query, java.lang.Integer.MAX_VALUE);\n                        for (org.apache.lucene.search.ScoreDoc doc : docs.scoreDocs) {\n                            java.lang.String path = reader.document(doc.doc, org.apache.jackrabbit.oak.plugins.index.lucene.FieldNames.PATH_SELECTOR).get(org.apache.jackrabbit.oak.plugins.index.lucene.FieldNames.PATH);\n                            if (path != null) {\n                                if (\"\".equals(path)) {\n                                    path = \"/\";\n                                }\n                                if (!parent.isEmpty()) {\n                                    path = getAncestorPath(path, parentDepth);\n                                    if (seenPaths.contains(path)) {\n                                        continue;\n                                    }\n                                    seenPaths.add(path);\n                                }\n                                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.LuceneResultRow r = new org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.LuceneResultRow();\n                                r.path = path;\n                                r.score = doc.score;\n                                rows.add(r);\n                            }\n                        }\n                    }\n                    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.LOG.debug(\"query via {} took {} ms.\", this, java.lang.System.currentTimeMillis() - s);\n                    return new org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.LucenePathCursor(rows, settings);\n                } finally {\n                    reader.close();\n                }\n            } finally {\n                directory.close();\n            }\n        } catch (java.io.IOException e) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.LOG.warn(\"query via {} failed.\", this, e);\n            return newPathCursor(java.util.Collections.<java.lang.String>emptySet(), settings);\n        }\n    }\n\n    private static org.apache.lucene.search.Query getQuery(org.apache.jackrabbit.oak.spi.query.Filter filter, org.apache.lucene.index.IndexReader reader, boolean nonFullTextConstraints, org.apache.lucene.analysis.Analyzer analyzer, org.apache.jackrabbit.oak.spi.state.NodeState indexDefinition) {\n        java.util.List<org.apache.lucene.search.Query> qs = new java.util.ArrayList<org.apache.lucene.search.Query>();\n        org.apache.jackrabbit.oak.query.fulltext.FullTextExpression ft = filter.getFullTextConstraint();\n        if (ft == null) {\n        } else {\n            qs.add(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getFullTextQuery(ft, analyzer, reader));\n        }\n        org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr = filter.getPropertyRestriction(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.NATIVE_QUERY_FUNCTION);\n        if (pr != null) {\n            java.lang.String query = java.lang.String.valueOf(pr.first.getValue(pr.first.getType()));\n            org.apache.lucene.queryparser.classic.QueryParser queryParser = new org.apache.lucene.queryparser.classic.QueryParser(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.VERSION, \"\", analyzer);\n            if (query.startsWith(\"mlt?\")) {\n                java.lang.String mltQueryString = query.replace(\"mlt?\", \"\");\n                if (reader != null) {\n                    org.apache.lucene.search.Query moreLikeThis = org.apache.jackrabbit.oak.plugins.index.lucene.util.MoreLikeThisHelper.getMoreLikeThis(reader, analyzer, mltQueryString);\n                    if (moreLikeThis != null) {\n                        qs.add(moreLikeThis);\n                    }\n                }\n            } else {\n                try {\n                    qs.add(queryParser.parse(query));\n                } catch (org.apache.lucene.queryparser.classic.ParseException e) {\n                    throw new java.lang.RuntimeException(e);\n                }\n            }\n        } else if (nonFullTextConstraints) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.addNonFullTextConstraints(qs, filter, reader, analyzer, indexDefinition);\n        }\n        if (qs.size() == 0) {\n            return new org.apache.lucene.search.MatchAllDocsQuery();\n        }\n        if (qs.size() == 1) {\n            return qs.get(0);\n        }\n        org.apache.lucene.search.BooleanQuery bq = new org.apache.lucene.search.BooleanQuery();\n        for (org.apache.lucene.search.Query q : qs) {\n            bq.add(q, org.apache.jackrabbit.oak.plugins.index.lucene.MUST);\n        }\n        return bq;\n    }\n\n    private static void addNonFullTextConstraints(java.util.List<org.apache.lucene.search.Query> qs, org.apache.jackrabbit.oak.spi.query.Filter filter, org.apache.lucene.index.IndexReader reader, org.apache.lucene.analysis.Analyzer analyzer, org.apache.jackrabbit.oak.spi.state.NodeState indexDefinition) {\n        if (!filter.matchesAllTypes()) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.addNodeTypeConstraints(qs, filter);\n        }\n        java.lang.String path = filter.getPath();\n        switch (filter.getPathRestriction()) {\n            case ALL_CHILDREN :\n                if (\"/\".equals(path)) {\n                    break;\n                }\n                if (!path.endsWith(\"/\")) {\n                    path += \"/\";\n                }\n                qs.add(new org.apache.lucene.search.PrefixQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newPathTerm(path)));\n                break;\n            case DIRECT_CHILDREN :\n                if (!path.endsWith(\"/\")) {\n                    path += \"/\";\n                }\n                qs.add(new org.apache.lucene.search.PrefixQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newPathTerm(path)));\n                break;\n            case EXACT :\n                qs.add(new org.apache.lucene.search.TermQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newPathTerm(path)));\n                break;\n            case PARENT :\n                if (denotesRoot(path)) {\n                    qs.add(new org.apache.lucene.search.TermQuery(new org.apache.lucene.index.Term(FieldNames.PATH, \"///\")));\n                } else {\n                    qs.add(new org.apache.lucene.search.TermQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newPathTerm(getParentPath(path))));\n                }\n                break;\n            case NO_RESTRICTION :\n                break;\n        }\n        for (org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr : filter.getPropertyRestrictions()) {\n            if ((pr.first == null) && (pr.last == null)) {\n                continue;\n            }\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.isExcludedProperty(pr, indexDefinition)) {\n                continue;\n            }\n            java.lang.String name = pr.propertyName;\n            if (\"rep:excerpt\".equals(name)) {\n                continue;\n            }\n            if (org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE.equals(name)) {\n                continue;\n            }\n            if (skipTokenization(name)) {\n                qs.add(new org.apache.lucene.search.TermQuery(new org.apache.lucene.index.Term(name, pr.first.getValue(org.apache.jackrabbit.oak.plugins.index.lucene.STRING))));\n                continue;\n            }\n            java.lang.String first = null;\n            java.lang.String last = null;\n            boolean isLike = pr.isLike;\n            if (pr.first != null) {\n                first = pr.first.getValue(org.apache.jackrabbit.oak.plugins.index.lucene.STRING);\n                first = first.replace(\"\\\\\", \"\");\n            }\n            if (pr.last != null) {\n                last = pr.last.getValue(org.apache.jackrabbit.oak.plugins.index.lucene.STRING);\n                last = last.replace(\"\\\\\", \"\");\n            }\n            if (isLike) {\n                first = first.replace('%', WildcardQuery.WILDCARD_STRING);\n                first = first.replace('_', WildcardQuery.WILDCARD_CHAR);\n                int indexOfWS = first.indexOf(WildcardQuery.WILDCARD_STRING);\n                int indexOfWC = first.indexOf(WildcardQuery.WILDCARD_CHAR);\n                int len = first.length();\n                if ((indexOfWS == len) || (indexOfWC == len)) {\n                    first = first.substring(0, first.length() - 1);\n                    if (org.apache.jackrabbit.oak.plugins.index.lucene.JCR_PATH.equals(name)) {\n                        qs.add(new org.apache.lucene.search.PrefixQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newPathTerm(first)));\n                    } else {\n                        qs.add(new org.apache.lucene.search.PrefixQuery(new org.apache.lucene.index.Term(name, first)));\n                    }\n                } else if (org.apache.jackrabbit.oak.plugins.index.lucene.JCR_PATH.equals(name)) {\n                    qs.add(new org.apache.lucene.search.WildcardQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newPathTerm(first)));\n                } else {\n                    qs.add(new org.apache.lucene.search.WildcardQuery(new org.apache.lucene.index.Term(name, first)));\n                }\n                continue;\n            }\n            if ((((first != null) && first.equals(last)) && pr.firstIncluding) && pr.lastIncluding) {\n                if (org.apache.jackrabbit.oak.plugins.index.lucene.JCR_PATH.equals(name)) {\n                    qs.add(new org.apache.lucene.search.TermQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newPathTerm(first)));\n                } else if (\"*\".equals(name)) {\n                    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.addReferenceConstraint(first, qs, reader);\n                } else {\n                    for (java.lang.String t : org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.tokenize(first, analyzer)) {\n                        qs.add(new org.apache.lucene.search.TermQuery(new org.apache.lucene.index.Term(name, t)));\n                    }\n                }\n                continue;\n            }\n            first = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.tokenizeAndPoll(first, analyzer);\n            last = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.tokenizeAndPoll(last, analyzer);\n            qs.add(org.apache.lucene.search.TermRangeQuery.newStringRange(name, first, last, pr.firstIncluding, pr.lastIncluding));\n        }\n    }\n\n    private static java.lang.String tokenizeAndPoll(java.lang.String token, org.apache.lucene.analysis.Analyzer analyzer) {\n        if (token != null) {\n            java.util.List<java.lang.String> tokens = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.tokenize(token, analyzer);\n            if (!tokens.isEmpty()) {\n                token = tokens.get(0);\n            }\n        }\n        return token;\n    }\n\n    private static boolean isExcludedProperty(org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr, org.apache.jackrabbit.oak.spi.state.NodeState definition) {\n        java.lang.String name = pr.propertyName;\n        if (name.contains(\"/\")) {\n            return true;\n        }\n        for (java.lang.String e : definition.getStrings(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.EXCLUDE_PROPERTY_NAMES)) {\n            if (e.equalsIgnoreCase(name)) {\n                return true;\n            }\n        }\n        java.lang.Integer type = null;\n        if (pr.first != null) {\n            type = pr.first.getType().tag();\n        } else if (pr.last != null) {\n            type = pr.last.getType().tag();\n        } else if ((pr.list != null) && (!pr.list.isEmpty())) {\n            type = pr.list.get(0).getType().tag();\n        }\n        if (type != null) {\n            boolean isIn = false;\n            for (java.lang.String e : definition.getStrings(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.INCLUDE_PROPERTY_TYPES)) {\n                if (javax.jcr.PropertyType.valueFromName(e) == type) {\n                    isIn = true;\n                }\n            }\n            if (!isIn) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static void addReferenceConstraint(java.lang.String uuid, java.util.List<org.apache.lucene.search.Query> qs, org.apache.lucene.index.IndexReader reader) {\n        if (reader == null) {\n            qs.add(new org.apache.lucene.search.TermQuery(new org.apache.lucene.index.Term(\"*\", uuid)));\n            return;\n        }\n        org.apache.lucene.search.BooleanQuery bq = new org.apache.lucene.search.BooleanQuery();\n        java.util.Collection<java.lang.String> fields = org.apache.lucene.index.MultiFields.getIndexedFields(reader);\n        for (java.lang.String f : fields) {\n            bq.add(new org.apache.lucene.search.TermQuery(new org.apache.lucene.index.Term(f, uuid)), org.apache.jackrabbit.oak.plugins.index.lucene.SHOULD);\n        }\n        qs.add(bq);\n    }\n\n    private static void addNodeTypeConstraints(java.util.List<org.apache.lucene.search.Query> qs, org.apache.jackrabbit.oak.spi.query.Filter filter) {\n        org.apache.lucene.search.BooleanQuery bq = new org.apache.lucene.search.BooleanQuery();\n        for (java.lang.String type : filter.getPrimaryTypes()) {\n            bq.add(new org.apache.lucene.search.TermQuery(new org.apache.lucene.index.Term(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, type)), org.apache.jackrabbit.oak.plugins.index.lucene.SHOULD);\n        }\n        for (java.lang.String type : filter.getMixinTypes()) {\n            bq.add(new org.apache.lucene.search.TermQuery(new org.apache.lucene.index.Term(org.apache.jackrabbit.JcrConstants.JCR_MIXINTYPES, type)), org.apache.jackrabbit.oak.plugins.index.lucene.SHOULD);\n        }\n        qs.add(bq);\n    }\n\n    static org.apache.lucene.search.Query getFullTextQuery(org.apache.jackrabbit.oak.query.fulltext.FullTextExpression ft, final org.apache.lucene.analysis.Analyzer analyzer, final org.apache.lucene.index.IndexReader reader) {\n        final java.util.concurrent.atomic.AtomicReference<org.apache.lucene.search.Query> result = new java.util.concurrent.atomic.AtomicReference<org.apache.lucene.search.Query>();\n        ft.accept(new org.apache.jackrabbit.oak.query.fulltext.FullTextVisitor() {\n            @java.lang.Override\n            public boolean visit(org.apache.jackrabbit.oak.query.fulltext.FullTextOr or) {\n                org.apache.lucene.search.BooleanQuery q = new org.apache.lucene.search.BooleanQuery();\n                for (org.apache.jackrabbit.oak.query.fulltext.FullTextExpression e : or.list) {\n                    org.apache.lucene.search.Query x = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getFullTextQuery(e, analyzer, reader);\n                    q.add(x, org.apache.jackrabbit.oak.plugins.index.lucene.SHOULD);\n                }\n                result.set(q);\n                return true;\n            }\n\n            @java.lang.Override\n            public boolean visit(org.apache.jackrabbit.oak.query.fulltext.FullTextAnd and) {\n                org.apache.lucene.search.BooleanQuery q = new org.apache.lucene.search.BooleanQuery();\n                for (org.apache.jackrabbit.oak.query.fulltext.FullTextExpression e : and.list) {\n                    org.apache.lucene.search.Query x = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getFullTextQuery(e, analyzer, reader);\n                    if (x instanceof org.apache.lucene.search.BooleanQuery) {\n                        org.apache.lucene.search.BooleanQuery bq = ((org.apache.lucene.search.BooleanQuery) (x));\n                        for (org.apache.lucene.search.BooleanClause c : bq.clauses()) {\n                            q.add(c);\n                        }\n                    } else {\n                        q.add(x, org.apache.jackrabbit.oak.plugins.index.lucene.MUST);\n                    }\n                }\n                result.set(q);\n                return true;\n            }\n\n            @java.lang.Override\n            public boolean visit(org.apache.jackrabbit.oak.query.fulltext.FullTextTerm term) {\n                java.lang.String p = term.getPropertyName();\n                if ((p != null) && (p.indexOf('/') >= 0)) {\n                    p = getName(p);\n                }\n                org.apache.lucene.search.Query q = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.tokenToQuery(term.getText(), p, analyzer, reader);\n                if (q == null) {\n                    return false;\n                }\n                java.lang.String boost = term.getBoost();\n                if (boost != null) {\n                    q.setBoost(java.lang.Float.parseFloat(boost));\n                }\n                if (term.isNot()) {\n                    org.apache.lucene.search.BooleanQuery bq = new org.apache.lucene.search.BooleanQuery();\n                    bq.add(q, org.apache.jackrabbit.oak.plugins.index.lucene.MUST_NOT);\n                    result.set(bq);\n                } else {\n                    result.set(q);\n                }\n                return true;\n            }\n        });\n        return result.get();\n    }\n\n    static org.apache.lucene.search.Query tokenToQuery(java.lang.String text, java.lang.String fieldName, org.apache.lucene.analysis.Analyzer analyzer, org.apache.lucene.index.IndexReader reader) {\n        if (analyzer == null) {\n            return null;\n        }\n        java.util.List<java.lang.String> tokens = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.tokenize(text, analyzer);\n        if (tokens.isEmpty()) {\n            return new org.apache.lucene.search.BooleanQuery();\n        }\n        if (tokens.size() == 1) {\n            java.lang.String token = tokens.iterator().next();\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.hasFulltextToken(token)) {\n                return new org.apache.lucene.search.WildcardQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newFulltextTerm(token, fieldName));\n            } else {\n                return new org.apache.lucene.search.TermQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newFulltextTerm(token, fieldName));\n            }\n        } else if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.hasFulltextToken(tokens)) {\n            org.apache.lucene.search.MultiPhraseQuery mpq = new org.apache.lucene.search.MultiPhraseQuery();\n            for (java.lang.String token : tokens) {\n                if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.hasFulltextToken(token)) {\n                    org.apache.lucene.index.Term[] terms = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.extractMatchingTokens(reader, fieldName, token);\n                    if ((terms != null) && (terms.length > 0)) {\n                        mpq.add(terms);\n                    }\n                } else {\n                    mpq.add(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newFulltextTerm(token, fieldName));\n                }\n            }\n            return mpq;\n        } else {\n            org.apache.lucene.search.PhraseQuery pq = new org.apache.lucene.search.PhraseQuery();\n            for (java.lang.String t : tokens) {\n                pq.add(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newFulltextTerm(t, fieldName));\n            }\n            return pq;\n        }\n    }\n\n    private static org.apache.lucene.index.Term[] extractMatchingTokens(org.apache.lucene.index.IndexReader reader, java.lang.String fieldName, java.lang.String token) {\n        if (reader == null) {\n            return null;\n        }\n        try {\n            java.util.List<org.apache.lucene.index.Term> terms = new java.util.ArrayList<org.apache.lucene.index.Term>();\n            org.apache.lucene.index.Term onTerm = org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newFulltextTerm(token, fieldName);\n            org.apache.lucene.index.Terms t = org.apache.lucene.index.MultiFields.getTerms(reader, onTerm.field());\n            org.apache.lucene.util.automaton.Automaton a = org.apache.lucene.search.WildcardQuery.toAutomaton(onTerm);\n            org.apache.lucene.util.automaton.CompiledAutomaton ca = new org.apache.lucene.util.automaton.CompiledAutomaton(a);\n            org.apache.lucene.index.TermsEnum te = ca.getTermsEnum(t);\n            org.apache.lucene.util.BytesRef text;\n            while ((text = te.next()) != null) {\n                terms.add(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newFulltextTerm(text.utf8ToString(), fieldName));\n            } \n            return terms.toArray(new org.apache.lucene.index.Term[terms.size()]);\n        } catch (java.io.IOException e) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.LOG.error(\"Building fulltext query failed\", e.getMessage());\n            return null;\n        }\n    }\n\n    private static boolean hasFulltextToken(java.util.List<java.lang.String> tokens) {\n        for (java.lang.String token : tokens) {\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.hasFulltextToken(token)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static boolean hasFulltextToken(java.lang.String token) {\n        for (char c : org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.fulltextTokens) {\n            if (token.indexOf(c) != (-1)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static char[] fulltextTokens = new char[]{ '*', '?' };\n\n    static java.util.List<java.lang.String> tokenize(java.lang.String text, org.apache.lucene.analysis.Analyzer analyzer) {\n        java.util.List<java.lang.String> tokens = new java.util.ArrayList<java.lang.String>();\n        org.apache.lucene.analysis.TokenStream stream = null;\n        try {\n            stream = analyzer.tokenStream(FieldNames.FULLTEXT, new java.io.StringReader(text));\n            org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt = stream.addAttribute(org.apache.lucene.analysis.tokenattributes.CharTermAttribute.class);\n            org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt = stream.addAttribute(org.apache.lucene.analysis.tokenattributes.OffsetAttribute.class);\n            stream.reset();\n            int poz = 0;\n            boolean hasFulltextToken = false;\n            java.lang.StringBuilder token = new java.lang.StringBuilder();\n            while (stream.incrementToken()) {\n                java.lang.String term = termAtt.toString();\n                int start = offsetAtt.startOffset();\n                int end = offsetAtt.endOffset();\n                if (start > poz) {\n                    for (int i = poz; i < start; i++) {\n                        for (char c : org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.fulltextTokens) {\n                            if (c == text.charAt(i)) {\n                                token.append(c);\n                                hasFulltextToken = true;\n                            }\n                        }\n                    }\n                }\n                poz = end;\n                if (hasFulltextToken) {\n                    token.append(term);\n                    hasFulltextToken = false;\n                } else {\n                    if (token.length() > 0) {\n                        tokens.add(token.toString());\n                    }\n                    token = new java.lang.StringBuilder();\n                    token.append(term);\n                }\n            } \n            if (poz < text.length()) {\n                for (int i = poz; i < text.length(); i++) {\n                    for (char c : org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.fulltextTokens) {\n                        if (c == text.charAt(i)) {\n                            token.append(c);\n                        }\n                    }\n                }\n            }\n            if (token.length() > 0) {\n                tokens.add(token.toString());\n            }\n            stream.end();\n        } catch (java.io.IOException e) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.LOG.error(\"Building fulltext query failed\", e.getMessage());\n            return null;\n        } finally {\n            try {\n                if (stream != null) {\n                    stream.close();\n                }\n            } catch (java.io.IOException e) {\n            }\n        }\n        return tokens;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.plugins.index.aggregate.NodeAggregator getNodeAggregator() {\n        return aggregator;\n    }\n\n    static class LuceneResultRow {\n        java.lang.String path;\n\n        double score;\n    }\n\n    static class LucenePathCursor implements org.apache.jackrabbit.oak.spi.query.Cursor {\n        private final org.apache.jackrabbit.oak.spi.query.Cursor pathCursor;\n\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.LuceneResultRow currentRow;\n\n        LucenePathCursor(java.util.List<org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.LuceneResultRow> list, org.apache.jackrabbit.oak.query.QueryEngineSettings settings) {\n            final java.util.Iterator<org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.LuceneResultRow> it = list.iterator();\n            java.util.Iterator<java.lang.String> pathIterator = new java.util.Iterator<java.lang.String>() {\n                @java.lang.Override\n                public boolean hasNext() {\n                    return it.hasNext();\n                }\n\n                @java.lang.Override\n                public java.lang.String next() {\n                    currentRow = it.next();\n                    return currentRow.path;\n                }\n\n                @java.lang.Override\n                public void remove() {\n                    it.remove();\n                }\n            };\n            pathCursor = new org.apache.jackrabbit.oak.spi.query.Cursors.PathCursor(pathIterator, true, settings);\n        }\n\n        @java.lang.Override\n        public boolean hasNext() {\n            return pathCursor.hasNext();\n        }\n\n        @java.lang.Override\n        public void remove() {\n            pathCursor.remove();\n        }\n\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.spi.query.IndexRow next() {\n            final org.apache.jackrabbit.oak.spi.query.IndexRow pathRow = pathCursor.next();\n            return new org.apache.jackrabbit.oak.spi.query.IndexRow() {\n                @java.lang.Override\n                public java.lang.String getPath() {\n                    return pathRow.getPath();\n                }\n\n                @java.lang.Override\n                public org.apache.jackrabbit.oak.api.PropertyValue getValue(java.lang.String columnName) {\n                    if (QueryImpl.JCR_SCORE.equals(columnName)) {\n                        return org.apache.jackrabbit.oak.spi.query.PropertyValues.newDouble(currentRow.score);\n                    }\n                    return pathRow.getValue(columnName);\n                }\n            };\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.spi.state.NodeState indexDefinition",
            "src_parent": "private static org.apache.lucene.search.Query getQuery(org.apache.jackrabbit.oak.spi.query.Filter filter, org.apache.lucene.index.IndexReader reader, boolean nonFullTextConstraints, org.apache.lucene.analysis.Analyzer analyzer, org.apache.jackrabbit.oak.spi.state.NodeState indexDefinition) {\n    java.util.List<org.apache.lucene.search.Query> qs = new java.util.ArrayList<org.apache.lucene.search.Query>();\n    org.apache.jackrabbit.oak.query.fulltext.FullTextExpression ft = filter.getFullTextConstraint();\n    if (ft == null) {\n    } else {\n        qs.add(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getFullTextQuery(ft, analyzer, reader));\n    }\n    org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr = filter.getPropertyRestriction(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.NATIVE_QUERY_FUNCTION);\n    if (pr != null) {\n        java.lang.String query = java.lang.String.valueOf(pr.first.getValue(pr.first.getType()));\n        org.apache.lucene.queryparser.classic.QueryParser queryParser = new org.apache.lucene.queryparser.classic.QueryParser(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.VERSION, \"\", analyzer);\n        if (query.startsWith(\"mlt?\")) {\n            java.lang.String mltQueryString = query.replace(\"mlt?\", \"\");\n            if (reader != null) {\n                org.apache.lucene.search.Query moreLikeThis = org.apache.jackrabbit.oak.plugins.index.lucene.util.MoreLikeThisHelper.getMoreLikeThis(reader, analyzer, mltQueryString);\n                if (moreLikeThis != null) {\n                    qs.add(moreLikeThis);\n                }\n            }\n        } else {\n            try {\n                qs.add(queryParser.parse(query));\n            } catch (org.apache.lucene.queryparser.classic.ParseException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n    } else if (nonFullTextConstraints) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.addNonFullTextConstraints(qs, filter, reader, analyzer, indexDefinition);\n    }\n    if (qs.size() == 0) {\n        return new org.apache.lucene.search.MatchAllDocsQuery();\n    }\n    if (qs.size() == 1) {\n        return qs.get(0);\n    }\n    org.apache.lucene.search.BooleanQuery bq = new org.apache.lucene.search.BooleanQuery();\n    for (org.apache.lucene.search.Query q : qs) {\n        bq.add(q, org.apache.jackrabbit.oak.plugins.index.lucene.MUST);\n    }\n    return bq;\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.spi.state.NodeState indexDefinition",
            "src_parent": "private static void addNonFullTextConstraints(java.util.List<org.apache.lucene.search.Query> qs, org.apache.jackrabbit.oak.spi.query.Filter filter, org.apache.lucene.index.IndexReader reader, org.apache.lucene.analysis.Analyzer analyzer, org.apache.jackrabbit.oak.spi.state.NodeState indexDefinition) {\n    if (!filter.matchesAllTypes()) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.addNodeTypeConstraints(qs, filter);\n    }\n    java.lang.String path = filter.getPath();\n    switch (filter.getPathRestriction()) {\n        case ALL_CHILDREN :\n            if (\"/\".equals(path)) {\n                break;\n            }\n            if (!path.endsWith(\"/\")) {\n                path += \"/\";\n            }\n            qs.add(new org.apache.lucene.search.PrefixQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newPathTerm(path)));\n            break;\n        case DIRECT_CHILDREN :\n            if (!path.endsWith(\"/\")) {\n                path += \"/\";\n            }\n            qs.add(new org.apache.lucene.search.PrefixQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newPathTerm(path)));\n            break;\n        case EXACT :\n            qs.add(new org.apache.lucene.search.TermQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newPathTerm(path)));\n            break;\n        case PARENT :\n            if (denotesRoot(path)) {\n                qs.add(new org.apache.lucene.search.TermQuery(new org.apache.lucene.index.Term(FieldNames.PATH, \"///\")));\n            } else {\n                qs.add(new org.apache.lucene.search.TermQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newPathTerm(getParentPath(path))));\n            }\n            break;\n        case NO_RESTRICTION :\n            break;\n    }\n    for (org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr : filter.getPropertyRestrictions()) {\n        if ((pr.first == null) && (pr.last == null)) {\n            continue;\n        }\n        if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.isExcludedProperty(pr, indexDefinition)) {\n            continue;\n        }\n        java.lang.String name = pr.propertyName;\n        if (\"rep:excerpt\".equals(name)) {\n            continue;\n        }\n        if (org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE.equals(name)) {\n            continue;\n        }\n        if (skipTokenization(name)) {\n            qs.add(new org.apache.lucene.search.TermQuery(new org.apache.lucene.index.Term(name, pr.first.getValue(org.apache.jackrabbit.oak.plugins.index.lucene.STRING))));\n            continue;\n        }\n        java.lang.String first = null;\n        java.lang.String last = null;\n        boolean isLike = pr.isLike;\n        if (pr.first != null) {\n            first = pr.first.getValue(org.apache.jackrabbit.oak.plugins.index.lucene.STRING);\n            first = first.replace(\"\\\\\", \"\");\n        }\n        if (pr.last != null) {\n            last = pr.last.getValue(org.apache.jackrabbit.oak.plugins.index.lucene.STRING);\n            last = last.replace(\"\\\\\", \"\");\n        }\n        if (isLike) {\n            first = first.replace('%', WildcardQuery.WILDCARD_STRING);\n            first = first.replace('_', WildcardQuery.WILDCARD_CHAR);\n            int indexOfWS = first.indexOf(WildcardQuery.WILDCARD_STRING);\n            int indexOfWC = first.indexOf(WildcardQuery.WILDCARD_CHAR);\n            int len = first.length();\n            if ((indexOfWS == len) || (indexOfWC == len)) {\n                first = first.substring(0, first.length() - 1);\n                if (org.apache.jackrabbit.oak.plugins.index.lucene.JCR_PATH.equals(name)) {\n                    qs.add(new org.apache.lucene.search.PrefixQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newPathTerm(first)));\n                } else {\n                    qs.add(new org.apache.lucene.search.PrefixQuery(new org.apache.lucene.index.Term(name, first)));\n                }\n            } else if (org.apache.jackrabbit.oak.plugins.index.lucene.JCR_PATH.equals(name)) {\n                qs.add(new org.apache.lucene.search.WildcardQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newPathTerm(first)));\n            } else {\n                qs.add(new org.apache.lucene.search.WildcardQuery(new org.apache.lucene.index.Term(name, first)));\n            }\n            continue;\n        }\n        if ((((first != null) && first.equals(last)) && pr.firstIncluding) && pr.lastIncluding) {\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.JCR_PATH.equals(name)) {\n                qs.add(new org.apache.lucene.search.TermQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newPathTerm(first)));\n            } else if (\"*\".equals(name)) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.addReferenceConstraint(first, qs, reader);\n            } else {\n                for (java.lang.String t : org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.tokenize(first, analyzer)) {\n                    qs.add(new org.apache.lucene.search.TermQuery(new org.apache.lucene.index.Term(name, t)));\n                }\n            }\n            continue;\n        }\n        first = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.tokenizeAndPoll(first, analyzer);\n        last = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.tokenizeAndPoll(last, analyzer);\n        qs.add(org.apache.lucene.search.TermRangeQuery.newStringRange(name, first, last, pr.firstIncluding, pr.lastIncluding));\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Switch",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.isExcludedProperty(pr, indexDefinition)",
            "src_parent": "if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.isExcludedProperty(pr, indexDefinition)) {\n    continue;\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getIndexDef(root)",
            "src_parent": "org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getQuery(filter, null, nonFullTextConstraints, analyzer, org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getIndexDef(root))",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getIndexDef(root)",
            "src_parent": "org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getQuery(filter, reader, nonFullTextConstraints, analyzer, org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.getIndexDef(root))",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "indexDefinition",
            "src_parent": "org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.addNonFullTextConstraints(qs, filter, reader, analyzer, indexDefinition)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Switch",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String name = pr.propertyName",
            "dst_parent": "{\n    if ((pr.first == null) && (pr.last == null)) {\n        continue;\n    }\n    if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.isExcludedProperty(pr, indexDefinition)) {\n        continue;\n    }\n    java.lang.String name = pr.propertyName;\n    if (\"rep:excerpt\".equals(name)) {\n        continue;\n    }\n    if (org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE.equals(name)) {\n        continue;\n    }\n    if (skipTokenization(name)) {\n        qs.add(new org.apache.lucene.search.TermQuery(new org.apache.lucene.index.Term(name, pr.first.getValue(org.apache.jackrabbit.oak.plugins.index.lucene.STRING))));\n        continue;\n    }\n    java.lang.String first = null;\n    java.lang.String last = null;\n    boolean isLike = pr.isLike;\n    if (pr.first != null) {\n        first = pr.first.getValue(org.apache.jackrabbit.oak.plugins.index.lucene.STRING);\n        first = first.replace(\"\\\\\", \"\");\n    }\n    if (pr.last != null) {\n        last = pr.last.getValue(org.apache.jackrabbit.oak.plugins.index.lucene.STRING);\n        last = last.replace(\"\\\\\", \"\");\n    }\n    if (isLike) {\n        first = first.replace('%', WildcardQuery.WILDCARD_STRING);\n        first = first.replace('_', WildcardQuery.WILDCARD_CHAR);\n        int indexOfWS = first.indexOf(WildcardQuery.WILDCARD_STRING);\n        int indexOfWC = first.indexOf(WildcardQuery.WILDCARD_CHAR);\n        int len = first.length();\n        if ((indexOfWS == len) || (indexOfWC == len)) {\n            first = first.substring(0, first.length() - 1);\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.JCR_PATH.equals(name)) {\n                qs.add(new org.apache.lucene.search.PrefixQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newPathTerm(first)));\n            } else {\n                qs.add(new org.apache.lucene.search.PrefixQuery(new org.apache.lucene.index.Term(name, first)));\n            }\n        } else if (org.apache.jackrabbit.oak.plugins.index.lucene.JCR_PATH.equals(name)) {\n            qs.add(new org.apache.lucene.search.WildcardQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newPathTerm(first)));\n        } else {\n            qs.add(new org.apache.lucene.search.WildcardQuery(new org.apache.lucene.index.Term(name, first)));\n        }\n        continue;\n    }\n    if ((((first != null) && first.equals(last)) && pr.firstIncluding) && pr.lastIncluding) {\n        if (org.apache.jackrabbit.oak.plugins.index.lucene.JCR_PATH.equals(name)) {\n            qs.add(new org.apache.lucene.search.TermQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newPathTerm(first)));\n        } else if (\"*\".equals(name)) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.addReferenceConstraint(first, qs, reader);\n        } else {\n            for (java.lang.String t : org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.tokenize(first, analyzer)) {\n                qs.add(new org.apache.lucene.search.TermQuery(new org.apache.lucene.index.Term(name, t)));\n            }\n        }\n        continue;\n    }\n    first = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.tokenizeAndPoll(first, analyzer);\n    last = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.tokenizeAndPoll(last, analyzer);\n    qs.add(org.apache.lucene.search.TermRangeQuery.newStringRange(name, first, last, pr.firstIncluding, pr.lastIncluding));\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.lang.String name = pr.propertyName",
            "src_parent": "{\n    if ((pr.first == null) && (pr.last == null)) {\n        continue;\n    }\n    java.lang.String name = pr.propertyName;\n    if (name.contains(\"/\")) {\n        continue;\n    }\n    if (\"rep:excerpt\".equals(name)) {\n        continue;\n    }\n    if (org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE.equals(name)) {\n        continue;\n    }\n    if (skipTokenization(name)) {\n        qs.add(new org.apache.lucene.search.TermQuery(new org.apache.lucene.index.Term(name, pr.first.getValue(org.apache.jackrabbit.oak.plugins.index.lucene.STRING))));\n        continue;\n    }\n    java.lang.String first = null;\n    java.lang.String last = null;\n    boolean isLike = pr.isLike;\n    if (pr.first != null) {\n        first = pr.first.getValue(org.apache.jackrabbit.oak.plugins.index.lucene.STRING);\n        first = first.replace(\"\\\\\", \"\");\n    }\n    if (pr.last != null) {\n        last = pr.last.getValue(org.apache.jackrabbit.oak.plugins.index.lucene.STRING);\n        last = last.replace(\"\\\\\", \"\");\n    }\n    if (isLike) {\n        first = first.replace('%', WildcardQuery.WILDCARD_STRING);\n        first = first.replace('_', WildcardQuery.WILDCARD_CHAR);\n        int indexOfWS = first.indexOf(WildcardQuery.WILDCARD_STRING);\n        int indexOfWC = first.indexOf(WildcardQuery.WILDCARD_CHAR);\n        int len = first.length();\n        if ((indexOfWS == len) || (indexOfWC == len)) {\n            first = first.substring(0, first.length() - 1);\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.JCR_PATH.equals(name)) {\n                qs.add(new org.apache.lucene.search.PrefixQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newPathTerm(first)));\n            } else {\n                qs.add(new org.apache.lucene.search.PrefixQuery(new org.apache.lucene.index.Term(name, first)));\n            }\n        } else if (org.apache.jackrabbit.oak.plugins.index.lucene.JCR_PATH.equals(name)) {\n            qs.add(new org.apache.lucene.search.WildcardQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newPathTerm(first)));\n        } else {\n            qs.add(new org.apache.lucene.search.WildcardQuery(new org.apache.lucene.index.Term(name, first)));\n        }\n        continue;\n    }\n    if ((((first != null) && first.equals(last)) && pr.firstIncluding) && pr.lastIncluding) {\n        if (org.apache.jackrabbit.oak.plugins.index.lucene.JCR_PATH.equals(name)) {\n            qs.add(new org.apache.lucene.search.TermQuery(org.apache.jackrabbit.oak.plugins.index.lucene.TermFactory.newPathTerm(first)));\n        } else if (\"*\".equals(name)) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.addReferenceConstraint(first, qs, reader);\n        } else {\n            for (java.lang.String t : org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.tokenize(first, analyzer)) {\n                qs.add(new org.apache.lucene.search.TermQuery(new org.apache.lucene.index.Term(name, t)));\n            }\n        }\n        continue;\n    }\n    first = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.tokenizeAndPoll(first, analyzer);\n    last = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndex.tokenizeAndPoll(last, analyzer);\n    qs.add(org.apache.lucene.search.TermRangeQuery.newStringRange(name, first, last, pr.firstIncluding, pr.lastIncluding));\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "name.contains(\"/\")",
            "dst_parent": "if (name.contains(\"/\")) {\n    return true;\n}",
            "dst_parent_type": "If",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "name.contains(\"/\")",
            "src_parent": "if (name.contains(\"/\")) {\n    continue;\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "LuceneIndex"
    }
  ],
  "id": "jackrabbit-oak_63070cf9"
}