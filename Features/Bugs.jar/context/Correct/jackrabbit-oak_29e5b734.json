{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.Set<org.apache.jackrabbit.api.security.JackrabbitAccessControlList>",
            "dst_parent": "java.util.Set<org.apache.jackrabbit.api.security.JackrabbitAccessControlList> effective = com.google.common.collect.Sets.newTreeSet(new java.util.Comparator<org.apache.jackrabbit.api.security.JackrabbitAccessControlList>() {\n    @java.lang.Override\n    public int compare(org.apache.jackrabbit.api.security.JackrabbitAccessControlList list1, org.apache.jackrabbit.api.security.JackrabbitAccessControlList list2) {\n        if (list1.equals(list2)) {\n            return 0;\n        } else {\n            java.lang.String p1 = list1.getPath();\n            java.lang.String p2 = list2.getPath();\n            if (p1 == null) {\n                return -1;\n            } else if (p2 == null) {\n                return 1;\n            } else {\n                int depth1 = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(p1);\n                int depth2 = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(p2);\n                return depth1 == depth2 ? p1.compareTo(p2) : com.google.common.primitives.Ints.compare(depth1, depth2);\n            }\n        }\n    }\n})",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.util.List<javax.jcr.security.AccessControlPolicy>",
            "src_parent": "java.util.List<javax.jcr.security.AccessControlPolicy> effective = new java.util.ArrayList<javax.jcr.security.AccessControlPolicy>()",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.api.security.JackrabbitAccessControlList",
            "dst_parent": "org.apache.jackrabbit.api.security.JackrabbitAccessControlList policy = createACL(path, accessControlledTree, true)",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "javax.jcr.security.AccessControlPolicy",
            "src_parent": "javax.jcr.security.AccessControlPolicy policy = createACL(path, accessControlledTree, true)",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "new java.util.ArrayList<javax.jcr.security.AccessControlPolicy>()",
            "src_parent": "java.util.List<javax.jcr.security.AccessControlPolicy> effective = new java.util.ArrayList<javax.jcr.security.AccessControlPolicy>()",
            "src_parent_type": "LocalVariable",
            "src_type": "ConstructorCall"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.util.Set<java.lang.String> paths = com.google.common.collect.Sets.newHashSet()",
            "src_parent": "{\n    org.apache.jackrabbit.oak.security.authorization.accesscontrol.Util.checkValidPrincipals(principals, principalManager);\n    org.apache.jackrabbit.oak.api.Root r = getLatestRoot();\n    org.apache.jackrabbit.oak.api.Result aceResult = org.apache.jackrabbit.oak.security.authorization.accesscontrol.AccessControlManagerImpl.searchAces(principals, r);\n    java.util.Set<org.apache.jackrabbit.api.security.JackrabbitAccessControlList> effective = com.google.common.collect.Sets.newTreeSet(new java.util.Comparator<org.apache.jackrabbit.api.security.JackrabbitAccessControlList>() {\n        @java.lang.Override\n        public int compare(org.apache.jackrabbit.api.security.JackrabbitAccessControlList list1, org.apache.jackrabbit.api.security.JackrabbitAccessControlList list2) {\n            if (list1.equals(list2)) {\n                return 0;\n            } else {\n                java.lang.String p1 = list1.getPath();\n                java.lang.String p2 = list2.getPath();\n                if (p1 == null) {\n                    return -1;\n                } else if (p2 == null) {\n                    return 1;\n                } else {\n                    int depth1 = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(p1);\n                    int depth2 = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(p2);\n                    return depth1 == depth2 ? p1.compareTo(p2) : com.google.common.primitives.Ints.compare(depth1, depth2);\n                }\n            }\n        }\n    });\n    java.util.Set<java.lang.String> paths = com.google.common.collect.Sets.newHashSet();\n    for (org.apache.jackrabbit.oak.api.ResultRow row : aceResult.getRows()) {\n        java.lang.String acePath = row.getPath();\n        java.lang.String aclName = org.apache.jackrabbit.util.Text.getName(org.apache.jackrabbit.util.Text.getRelativeParent(acePath, 1));\n        org.apache.jackrabbit.oak.api.Tree accessControlledTree = r.getTree(org.apache.jackrabbit.util.Text.getRelativeParent(acePath, 2));\n        if (aclName.isEmpty() || (!accessControlledTree.exists())) {\n            org.apache.jackrabbit.oak.security.authorization.accesscontrol.AccessControlManagerImpl.log.debug(\"Isolated access control entry -> ignore query result at \" + acePath);\n            continue;\n        }\n        java.lang.String path = (org.apache.jackrabbit.oak.security.authorization.accesscontrol.REP_REPO_POLICY.equals(aclName)) ? null : accessControlledTree.getPath();\n        if (paths.contains(path)) {\n            continue;\n        }\n        org.apache.jackrabbit.api.security.JackrabbitAccessControlList policy = createACL(path, accessControlledTree, true);\n        if (policy != null) {\n            effective.add(policy);\n            paths.add(path);\n        }\n    }\n    return effective.toArray(new javax.jcr.security.AccessControlPolicy[effective.size()]);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "com.google.common.collect.Sets.newTreeSet(new java.util.Comparator<org.apache.jackrabbit.api.security.JackrabbitAccessControlList>() {\n    @java.lang.Override\n    public int compare(org.apache.jackrabbit.api.security.JackrabbitAccessControlList list1, org.apache.jackrabbit.api.security.JackrabbitAccessControlList list2) {\n        if (list1.equals(list2)) {\n            return 0;\n        } else {\n            java.lang.String p1 = list1.getPath();\n            java.lang.String p2 = list2.getPath();\n            if (p1 == null) {\n                return -1;\n            } else if (p2 == null) {\n                return 1;\n            } else {\n                int depth1 = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(p1);\n                int depth2 = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(p2);\n                return depth1 == depth2 ? p1.compareTo(p2) : com.google.common.primitives.Ints.compare(depth1, depth2);\n            }\n        }\n    }\n})",
            "src_parent": "java.util.Set<org.apache.jackrabbit.api.security.JackrabbitAccessControlList> effective = com.google.common.collect.Sets.newTreeSet(new java.util.Comparator<org.apache.jackrabbit.api.security.JackrabbitAccessControlList>() {\n    @java.lang.Override\n    public int compare(org.apache.jackrabbit.api.security.JackrabbitAccessControlList list1, org.apache.jackrabbit.api.security.JackrabbitAccessControlList list2) {\n        if (list1.equals(list2)) {\n            return 0;\n        } else {\n            java.lang.String p1 = list1.getPath();\n            java.lang.String p2 = list2.getPath();\n            if (p1 == null) {\n                return -1;\n            } else if (p2 == null) {\n                return 1;\n            } else {\n                int depth1 = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(p1);\n                int depth2 = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(p2);\n                return depth1 == depth2 ? p1.compareTo(p2) : com.google.common.primitives.Ints.compare(depth1, depth2);\n            }\n        }\n    }\n})",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (paths.contains(path)) {\n    continue;\n}",
            "src_parent": "{\n    java.lang.String acePath = row.getPath();\n    java.lang.String aclName = org.apache.jackrabbit.util.Text.getName(org.apache.jackrabbit.util.Text.getRelativeParent(acePath, 1));\n    org.apache.jackrabbit.oak.api.Tree accessControlledTree = r.getTree(org.apache.jackrabbit.util.Text.getRelativeParent(acePath, 2));\n    if (aclName.isEmpty() || (!accessControlledTree.exists())) {\n        org.apache.jackrabbit.oak.security.authorization.accesscontrol.AccessControlManagerImpl.log.debug(\"Isolated access control entry -> ignore query result at \" + acePath);\n        continue;\n    }\n    java.lang.String path = (org.apache.jackrabbit.oak.security.authorization.accesscontrol.REP_REPO_POLICY.equals(aclName)) ? null : accessControlledTree.getPath();\n    if (paths.contains(path)) {\n        continue;\n    }\n    org.apache.jackrabbit.api.security.JackrabbitAccessControlList policy = createACL(path, accessControlledTree, true);\n    if (policy != null) {\n        effective.add(policy);\n        paths.add(path);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "paths.add(path)",
            "src_parent": "{\n    effective.add(policy);\n    paths.add(path);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "AccessControlManagerImpl"
    }
  ],
  "id": "jackrabbit-oak_29e5b734"
}