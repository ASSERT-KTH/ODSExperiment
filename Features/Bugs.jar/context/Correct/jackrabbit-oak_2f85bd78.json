{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static final boolean allowOtherWhitespaceChars = java.lang.Boolean.getBoolean(\"oak.allowOtherWhitespaceChars\");",
            "src_parent": "public class Namespaces implements org.apache.jackrabbit.oak.plugins.name.NamespaceConstants {\n    private static final java.util.Map<java.lang.String, java.lang.String> ENCODED_URIS = com.google.common.collect.Maps.newConcurrentMap();\n\n    private static final boolean allowOtherWhitespaceChars = java.lang.Boolean.getBoolean(\"oak.allowOtherWhitespaceChars\");\n\n    private Namespaces() {\n    }\n\n    public static void setupNamespaces(org.apache.jackrabbit.oak.spi.state.NodeBuilder system) {\n        if (!system.hasChildNode(org.apache.jackrabbit.oak.plugins.name.REP_NAMESPACES)) {\n            org.apache.jackrabbit.oak.spi.state.NodeBuilder namespaces = org.apache.jackrabbit.oak.plugins.name.Namespaces.createStandardMappings(system);\n            org.apache.jackrabbit.oak.plugins.name.Namespaces.buildIndexNode(namespaces);\n        }\n    }\n\n    public static org.apache.jackrabbit.oak.spi.state.NodeBuilder createStandardMappings(org.apache.jackrabbit.oak.spi.state.NodeBuilder system) {\n        com.google.common.base.Preconditions.checkState(!system.hasChildNode(org.apache.jackrabbit.oak.plugins.name.REP_NAMESPACES));\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder namespaces = system.setChildNode(org.apache.jackrabbit.oak.plugins.name.REP_NAMESPACES);\n        namespaces.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, NodeTypeConstants.NT_REP_UNSTRUCTURED, org.apache.jackrabbit.oak.plugins.name.NAME);\n        namespaces.setProperty(org.apache.jackrabbit.oak.plugins.name.PREFIX_JCR, org.apache.jackrabbit.oak.plugins.name.NAMESPACE_JCR);\n        namespaces.setProperty(org.apache.jackrabbit.oak.plugins.name.PREFIX_NT, org.apache.jackrabbit.oak.plugins.name.NAMESPACE_NT);\n        namespaces.setProperty(org.apache.jackrabbit.oak.plugins.name.PREFIX_MIX, org.apache.jackrabbit.oak.plugins.name.NAMESPACE_MIX);\n        namespaces.setProperty(org.apache.jackrabbit.oak.plugins.name.PREFIX_XML, org.apache.jackrabbit.oak.plugins.name.NAMESPACE_XML);\n        namespaces.setProperty(org.apache.jackrabbit.oak.plugins.name.PREFIX_SV, org.apache.jackrabbit.oak.plugins.name.NAMESPACE_SV);\n        namespaces.setProperty(org.apache.jackrabbit.oak.plugins.name.PREFIX_REP, org.apache.jackrabbit.oak.plugins.name.NAMESPACE_REP);\n        return namespaces;\n    }\n\n    public static java.lang.String addCustomMapping(org.apache.jackrabbit.oak.spi.state.NodeBuilder namespaces, java.lang.String uri, java.lang.String prefixHint) {\n        for (org.apache.jackrabbit.oak.api.PropertyState property : namespaces.getProperties()) {\n            if (property.getType() == STRING) {\n                java.lang.String prefix = property.getName();\n                if (org.apache.jackrabbit.oak.plugins.name.Namespaces.isValidPrefix(prefix) && uri.equals(property.getValue(org.apache.jackrabbit.oak.plugins.name.STRING))) {\n                    return prefix;\n                }\n            }\n        }\n        java.lang.String prefix = prefixHint;\n        int iteration = 1;\n        while (namespaces.hasProperty(prefix)) {\n            prefix = prefixHint + (++iteration);\n        } \n        namespaces.setProperty(prefix, uri);\n        return prefix;\n    }\n\n    public static void buildIndexNode(org.apache.jackrabbit.oak.spi.state.NodeBuilder namespaces) {\n        java.util.Set<java.lang.String> prefixes = com.google.common.collect.Sets.newHashSet(\"\");\n        java.util.Set<java.lang.String> uris = com.google.common.collect.Sets.newHashSet(\"\");\n        java.util.Map<java.lang.String, java.lang.String> reverse = new java.util.HashMap<java.lang.String, java.lang.String>();\n        for (org.apache.jackrabbit.oak.api.PropertyState property : namespaces.getProperties()) {\n            java.lang.String prefix = property.getName();\n            if (org.apache.jackrabbit.oak.plugins.name.STRING.equals(property.getType()) && org.apache.jackrabbit.oak.plugins.name.Namespaces.isValidPrefix(prefix)) {\n                prefixes.add(prefix);\n                java.lang.String uri = property.getValue(org.apache.jackrabbit.oak.plugins.name.STRING);\n                uris.add(uri);\n                reverse.put(uri, prefix);\n            }\n        }\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder data = namespaces.setChildNode(org.apache.jackrabbit.oak.plugins.name.REP_NSDATA);\n        data.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, NodeTypeConstants.NT_REP_UNSTRUCTURED, Type.NAME);\n        data.setProperty(org.apache.jackrabbit.oak.plugins.name.REP_PREFIXES, prefixes, Type.STRINGS);\n        data.setProperty(org.apache.jackrabbit.oak.plugins.name.REP_URIS, uris, Type.STRINGS);\n        for (java.util.Map.Entry<java.lang.String, java.lang.String> e : reverse.entrySet()) {\n            data.setProperty(org.apache.jackrabbit.oak.plugins.name.Namespaces.encodeUri(e.getKey()), e.getValue());\n        }\n    }\n\n    private static org.apache.jackrabbit.oak.api.Tree getNamespaceTree(org.apache.jackrabbit.oak.api.Tree root) {\n        return root.getChild(org.apache.jackrabbit.JcrConstants.JCR_SYSTEM).getChild(org.apache.jackrabbit.oak.plugins.name.REP_NAMESPACES);\n    }\n\n    public static java.util.Map<java.lang.String, java.lang.String> getNamespaceMap(org.apache.jackrabbit.oak.api.Tree root) {\n        java.util.Map<java.lang.String, java.lang.String> map = com.google.common.collect.Maps.newHashMap();\n        map.put(\"\", \"\");\n        org.apache.jackrabbit.oak.api.Tree namespaces = org.apache.jackrabbit.oak.plugins.name.Namespaces.getNamespaceTree(root);\n        for (org.apache.jackrabbit.oak.api.PropertyState property : namespaces.getProperties()) {\n            java.lang.String prefix = property.getName();\n            if (org.apache.jackrabbit.oak.plugins.name.STRING.equals(property.getType()) && org.apache.jackrabbit.oak.plugins.name.Namespaces.isValidPrefix(prefix)) {\n                map.put(prefix, property.getValue(org.apache.jackrabbit.oak.plugins.name.STRING));\n            }\n        }\n        return map;\n    }\n\n    static java.lang.String[] getNamespacePrefixes(org.apache.jackrabbit.oak.api.Tree root) {\n        java.util.Set<java.lang.String> prefSet = org.apache.jackrabbit.oak.plugins.name.Namespaces.getNamespacePrefixesAsSet(root);\n        java.lang.String[] prefixes = prefSet.toArray(new java.lang.String[prefSet.size()]);\n        java.util.Arrays.sort(prefixes);\n        return prefixes;\n    }\n\n    static java.util.Set<java.lang.String> getNamespacePrefixesAsSet(org.apache.jackrabbit.oak.api.Tree root) {\n        return org.apache.jackrabbit.oak.plugins.name.Namespaces.safeGet(org.apache.jackrabbit.oak.plugins.name.Namespaces.getNamespaceTree(root).getChild(org.apache.jackrabbit.oak.plugins.name.REP_NSDATA), org.apache.jackrabbit.oak.plugins.name.REP_PREFIXES);\n    }\n\n    public static java.lang.String getNamespacePrefix(org.apache.jackrabbit.oak.api.Tree root, java.lang.String uri) {\n        if (uri.isEmpty()) {\n            return uri;\n        }\n        org.apache.jackrabbit.oak.api.Tree nsdata = org.apache.jackrabbit.oak.plugins.name.Namespaces.getNamespaceTree(root).getChild(org.apache.jackrabbit.oak.plugins.name.REP_NSDATA);\n        org.apache.jackrabbit.oak.api.PropertyState ps = nsdata.getProperty(org.apache.jackrabbit.oak.plugins.name.Namespaces.encodeUri(uri));\n        if (ps != null) {\n            return ps.getValue(org.apache.jackrabbit.oak.plugins.name.STRING);\n        }\n        return null;\n    }\n\n    static java.lang.String[] getNamespaceURIs(org.apache.jackrabbit.oak.api.Tree root) {\n        java.util.Set<java.lang.String> uris = org.apache.jackrabbit.oak.plugins.name.Namespaces.safeGet(org.apache.jackrabbit.oak.plugins.name.Namespaces.getNamespaceTree(root).getChild(org.apache.jackrabbit.oak.plugins.name.REP_NSDATA), org.apache.jackrabbit.oak.plugins.name.REP_URIS);\n        return uris.toArray(new java.lang.String[uris.size()]);\n    }\n\n    public static java.lang.String getNamespaceURI(org.apache.jackrabbit.oak.api.Tree root, java.lang.String prefix) {\n        if (prefix.isEmpty()) {\n            return prefix;\n        }\n        if (org.apache.jackrabbit.oak.plugins.name.Namespaces.isValidPrefix(prefix)) {\n            org.apache.jackrabbit.oak.api.PropertyState property = org.apache.jackrabbit.oak.plugins.name.Namespaces.getNamespaceTree(root).getProperty(prefix);\n            if ((property != null) && (property.getType() == STRING)) {\n                return property.getValue(org.apache.jackrabbit.oak.plugins.name.STRING);\n            }\n        }\n        return null;\n    }\n\n    public static java.lang.String encodeUri(java.lang.String uri) {\n        java.lang.String encoded = org.apache.jackrabbit.oak.plugins.name.Namespaces.ENCODED_URIS.get(uri);\n        if (encoded == null) {\n            encoded = escapeIllegalJcrChars(uri);\n            if (org.apache.jackrabbit.oak.plugins.name.Namespaces.ENCODED_URIS.size() > 1000) {\n                org.apache.jackrabbit.oak.plugins.name.Namespaces.ENCODED_URIS.clear();\n            }\n            org.apache.jackrabbit.oak.plugins.name.Namespaces.ENCODED_URIS.put(uri, encoded);\n        }\n        return encoded;\n    }\n\n    static java.util.Set<java.lang.String> safeGet(org.apache.jackrabbit.oak.api.Tree tree, java.lang.String name) {\n        org.apache.jackrabbit.oak.api.PropertyState ps = tree.getProperty(name);\n        if (ps == null) {\n            return com.google.common.collect.Sets.newHashSet();\n        }\n        return com.google.common.collect.Sets.newHashSet(ps.getValue(Type.STRINGS));\n    }\n\n    public static boolean isValidPrefix(java.lang.String prefix) {\n        return prefix.indexOf(':') == (-1);\n    }\n\n    public static boolean isValidLocalName(java.lang.String local) {\n        if ((local.isEmpty() || \".\".equals(local)) || \"..\".equals(local)) {\n            return false;\n        }\n        for (int i = 0; i < local.length(); i++) {\n            char ch = local.charAt(i);\n            boolean spaceChar = (org.apache.jackrabbit.oak.plugins.name.Namespaces.allowOtherWhitespaceChars) ? java.lang.Character.isSpaceChar(ch) : java.lang.Character.isWhitespace(ch);\n            if (spaceChar) {\n                if (i == 0) {\n                    return false;\n                } else if (i == (local.length() - 1)) {\n                    return false;\n                } else if (ch != ' ') {\n                    return false;\n                }\n            } else if (\"/:[]|*\".indexOf(ch) != (-1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "boolean spaceChar = (org.apache.jackrabbit.oak.plugins.name.Namespaces.allowOtherWhitespaceChars) ? java.lang.Character.isSpaceChar(ch) : java.lang.Character.isWhitespace(ch)",
            "src_parent": "{\n    char ch = local.charAt(i);\n    boolean spaceChar = (org.apache.jackrabbit.oak.plugins.name.Namespaces.allowOtherWhitespaceChars) ? java.lang.Character.isSpaceChar(ch) : java.lang.Character.isWhitespace(ch);\n    if (spaceChar) {\n        if (i == 0) {\n            return false;\n        } else if (i == (local.length() - 1)) {\n            return false;\n        } else if (ch != ' ') {\n            return false;\n        }\n    } else if (\"/:[]|*\".indexOf(ch) != (-1)) {\n        return false;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "spaceChar",
            "src_parent": "if (spaceChar) {\n    if (i == 0) {\n        return false;\n    } else if (i == (local.length() - 1)) {\n        return false;\n    } else if (ch != ' ') {\n        return false;\n    }\n} else if (\"/:[]|*\".indexOf(ch) != (-1)) {\n    return false;\n}",
            "src_parent_type": "If",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Character.isSpaceChar(ch)",
            "dst_parent": "(org.apache.jackrabbit.oak.plugins.name.Namespaces.allowOtherWhitespaceChars) ? java.lang.Character.isSpaceChar(ch) : java.lang.Character.isWhitespace(ch)",
            "dst_parent_type": "Conditional",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "java.lang.Character.isSpaceChar(ch)",
            "src_parent": "if (java.lang.Character.isSpaceChar(ch)) {\n    if (i == 0) {\n        return false;\n    } else if (i == (local.length() - 1)) {\n        return false;\n    } else if (ch != ' ') {\n        return false;\n    }\n} else if (\"/:[]|*\".indexOf(ch) != (-1)) {\n    return false;\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "Namespaces"
    }
  ],
  "id": "jackrabbit-oak_2f85bd78"
}