{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "protected boolean compatibleProtocols(java.lang.String p1, java.lang.String p2) {\n    if ((p1 != null) && (p2 != null)) {\n        return org.apache.wicket.util.lang.Objects.equal(p1, p2);\n    }\n    return true;\n}",
            "src_parent": "public class WebPageRenderer extends org.apache.wicket.request.handler.render.PageRenderer {\n    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.request.handler.render.WebPageRenderer.class);\n\n    public WebPageRenderer(org.apache.wicket.core.request.handler.RenderPageRequestHandler renderPageRequestHandler) {\n        super(renderPageRequestHandler);\n    }\n\n    protected boolean isAjax(org.apache.wicket.request.cycle.RequestCycle requestCycle) {\n        boolean isAjax = false;\n        org.apache.wicket.request.Request request = requestCycle.getRequest();\n        if (request instanceof org.apache.wicket.request.http.WebRequest) {\n            org.apache.wicket.request.http.WebRequest webRequest = ((org.apache.wicket.request.http.WebRequest) (request));\n            isAjax = webRequest.isAjax();\n        }\n        return isAjax;\n    }\n\n    protected void storeBufferedResponse(org.apache.wicket.request.Url url, org.apache.wicket.protocol.http.BufferedWebResponse response) {\n        org.apache.wicket.protocol.http.WebApplication.get().storeBufferedResponse(getSessionId(), url, response);\n    }\n\n    protected org.apache.wicket.protocol.http.BufferedWebResponse getAndRemoveBufferedResponse(org.apache.wicket.request.Url url) {\n        return org.apache.wicket.protocol.http.WebApplication.get().getAndRemoveBufferedResponse(getSessionId(), url);\n    }\n\n    protected org.apache.wicket.protocol.http.BufferedWebResponse renderPage(org.apache.wicket.request.Url targetUrl, org.apache.wicket.request.cycle.RequestCycle requestCycle) {\n        org.apache.wicket.request.component.IRequestablePage requestablePage = getPage();\n        org.apache.wicket.request.IRequestHandler scheduled = requestCycle.getRequestHandlerScheduledAfterCurrent();\n        if (scheduled != null) {\n            return null;\n        }\n        final org.apache.wicket.request.http.WebResponse originalResponse = ((org.apache.wicket.request.http.WebResponse) (requestCycle.getResponse()));\n        org.apache.wicket.protocol.http.BufferedWebResponse response = new org.apache.wicket.protocol.http.BufferedWebResponse(originalResponse);\n        org.apache.wicket.request.Url originalBaseUrl = requestCycle.getUrlRenderer().setBaseUrl(targetUrl);\n        try {\n            requestCycle.setResponse(response);\n            requestablePage.renderPage();\n            if ((scheduled == null) && (requestCycle.getRequestHandlerScheduledAfterCurrent() != null)) {\n                originalResponse.reset();\n                response.writeMetaData(originalResponse);\n                return null;\n            } else {\n                return response;\n            }\n        } finally {\n            requestCycle.setResponse(originalResponse);\n            requestCycle.getUrlRenderer().setBaseUrl(originalBaseUrl);\n        }\n    }\n\n    protected void redirectTo(org.apache.wicket.request.Url url, org.apache.wicket.request.cycle.RequestCycle requestCycle) {\n        bindSessionIfNeeded();\n        org.apache.wicket.request.http.WebResponse response = ((org.apache.wicket.request.http.WebResponse) (requestCycle.getResponse()));\n        java.lang.String relativeUrl = requestCycle.getUrlRenderer().renderUrl(url);\n        response.sendRedirect(relativeUrl);\n    }\n\n    private void bindSessionIfNeeded() {\n        org.apache.wicket.feedback.FeedbackCollector collector = new org.apache.wicket.feedback.FeedbackCollector();\n        java.util.List<org.apache.wicket.feedback.FeedbackMessage> feedbackMessages = collector.collect();\n        if (feedbackMessages.size() > 0) {\n            org.apache.wicket.Session.get().bind();\n        }\n    }\n\n    @java.lang.Override\n    public void respond(org.apache.wicket.request.cycle.RequestCycle requestCycle) {\n        org.apache.wicket.request.Url currentUrl = requestCycle.getUrlRenderer().getBaseUrl();\n        org.apache.wicket.request.Url targetUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());\n        org.apache.wicket.protocol.http.BufferedWebResponse bufferedResponse = getAndRemoveBufferedResponse(currentUrl);\n        if (bufferedResponse != null) {\n            org.apache.wicket.request.handler.render.WebPageRenderer.logger.warn(\"The Buffered response should be handled by BufferedResponseRequestHandler\");\n            bufferedResponse.writeTo(((org.apache.wicket.request.http.WebResponse) (requestCycle.getResponse())));\n        } else if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl)) {\n            org.apache.wicket.protocol.http.BufferedWebResponse response = renderPage(currentUrl, requestCycle);\n            if (response != null) {\n                response.writeTo(((org.apache.wicket.request.http.WebResponse) (requestCycle.getResponse())));\n            }\n        } else if (shouldRedirectToTargetUrl(requestCycle, currentUrl, targetUrl)) {\n            redirectTo(targetUrl, requestCycle);\n        } else {\n            if ((isRedirectToBuffer() == false) && org.apache.wicket.request.handler.render.WebPageRenderer.logger.isDebugEnabled()) {\n                java.lang.String details = java.lang.String.format(\"redirect strategy: '%s', isAjax: '%s', redirect policy: '%s', \" + \"current url: '%s', target url: '%s', is new: '%s', is stateless: '%s', is temporary: '%s'\", org.apache.wicket.Application.get().getRequestCycleSettings().getRenderStrategy(), isAjax(requestCycle), getRedirectPolicy(), currentUrl, targetUrl, isNewPageInstance(), isPageStateless(), isSessionTemporary());\n                org.apache.wicket.request.handler.render.WebPageRenderer.logger.debug((\"Falling back to Redirect_To_Buffer render strategy because none of the conditions \" + \"matched. Details: \") + details);\n            }\n            getPage();\n            org.apache.wicket.request.Url beforeRenderUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());\n            org.apache.wicket.protocol.http.BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);\n            if (response == null) {\n                return;\n            }\n            final org.apache.wicket.request.Url afterRenderUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());\n            if (beforeRenderUrl.getSegments().equals(afterRenderUrl.getSegments()) == false) {\n                response = renderPage(afterRenderUrl, requestCycle);\n            }\n            if (currentUrl.equals(afterRenderUrl)) {\n                response.writeTo(((org.apache.wicket.request.http.WebResponse) (requestCycle.getResponse())));\n            } else if (isPageStateless() && (!enableRedirectForStatelessPage())) {\n                response.writeTo(((org.apache.wicket.request.http.WebResponse) (requestCycle.getResponse())));\n            } else {\n                storeBufferedResponse(afterRenderUrl, response);\n                redirectTo(afterRenderUrl, requestCycle);\n            }\n        }\n    }\n\n    protected boolean isPageStateless() {\n        return getPage().isPageStateless();\n    }\n\n    protected boolean isNewPageInstance() {\n        return getPageProvider().isNewPageInstance();\n    }\n\n    protected boolean shouldPreserveClientUrl(org.apache.wicket.request.cycle.RequestCycle requestCycle) {\n        return ((org.apache.wicket.request.http.WebRequest) (requestCycle.getRequest())).shouldPreserveClientUrl();\n    }\n\n    protected boolean shouldRedirectToTargetUrl(org.apache.wicket.request.cycle.RequestCycle cycle, org.apache.wicket.request.Url currentUrl, org.apache.wicket.request.Url targetUrl) {\n        return ((org.apache.wicket.request.handler.render.WebPageRenderer.alwaysRedirect(getRedirectPolicy()) || isRedirectToRender()) || (isAjax(cycle) && targetUrl.equals(currentUrl))) || ((!targetUrl.equals(currentUrl)) && (isNewPageInstance() || (isSessionTemporary() && isPageStateless())));\n    }\n\n    protected boolean shouldRenderPageAndWriteResponse(org.apache.wicket.request.cycle.RequestCycle cycle, org.apache.wicket.request.Url currentUrl, org.apache.wicket.request.Url targetUrl) {\n        if (isAjax(cycle)) {\n            return false;\n        }\n        return compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol()) && (((org.apache.wicket.request.handler.render.WebPageRenderer.neverRedirect(getRedirectPolicy()) || ((isOnePassRender() && org.apache.wicket.request.handler.render.WebPageRenderer.notForcedRedirect(getRedirectPolicy())) || (targetUrl.equals(currentUrl) && org.apache.wicket.request.handler.render.WebPageRenderer.notNewAndNotStatelessPage(isNewPageInstance(), isPageStateless())))) || (targetUrl.equals(currentUrl) && isRedirectToRender())) || (shouldPreserveClientUrl(cycle) && org.apache.wicket.request.handler.render.WebPageRenderer.notForcedRedirect(getRedirectPolicy())));\n    }\n\n    private static boolean notNewAndNotStatelessPage(boolean newPageInstance, boolean pageStateless) {\n        return (!newPageInstance) && (!pageStateless);\n    }\n\n    private static boolean neverRedirect(org.apache.wicket.core.request.handler.RenderPageRequestHandler.RedirectPolicy redirectPolicy) {\n        return redirectPolicy == org.apache.wicket.core.request.handler.RenderPageRequestHandler.RedirectPolicy.NEVER_REDIRECT;\n    }\n\n    private static boolean alwaysRedirect(org.apache.wicket.core.request.handler.RenderPageRequestHandler.RedirectPolicy redirectPolicy) {\n        return redirectPolicy == org.apache.wicket.core.request.handler.RenderPageRequestHandler.RedirectPolicy.ALWAYS_REDIRECT;\n    }\n\n    private static boolean notForcedRedirect(org.apache.wicket.core.request.handler.RenderPageRequestHandler.RedirectPolicy redirectPolicy) {\n        return !org.apache.wicket.request.handler.render.WebPageRenderer.alwaysRedirect(redirectPolicy);\n    }\n\n    protected boolean compatibleProtocols(java.lang.String p1, java.lang.String p2) {\n        if ((p1 != null) && (p2 != null)) {\n            return org.apache.wicket.util.lang.Objects.equal(p1, p2);\n        }\n        return true;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol()) && (((org.apache.wicket.request.handler.render.WebPageRenderer.neverRedirect(getRedirectPolicy()) || ((isOnePassRender() && org.apache.wicket.request.handler.render.WebPageRenderer.notForcedRedirect(getRedirectPolicy())) || (targetUrl.equals(currentUrl) && org.apache.wicket.request.handler.render.WebPageRenderer.notNewAndNotStatelessPage(isNewPageInstance(), isPageStateless())))) || (targetUrl.equals(currentUrl) && isRedirectToRender())) || (shouldPreserveClientUrl(cycle) && org.apache.wicket.request.handler.render.WebPageRenderer.notForcedRedirect(getRedirectPolicy())))",
            "src_parent": "return compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol()) && (((org.apache.wicket.request.handler.render.WebPageRenderer.neverRedirect(getRedirectPolicy()) || ((isOnePassRender() && org.apache.wicket.request.handler.render.WebPageRenderer.notForcedRedirect(getRedirectPolicy())) || (targetUrl.equals(currentUrl) && org.apache.wicket.request.handler.render.WebPageRenderer.notNewAndNotStatelessPage(isNewPageInstance(), isPageStateless())))) || (targetUrl.equals(currentUrl) && isRedirectToRender())) || (shouldPreserveClientUrl(cycle) && org.apache.wicket.request.handler.render.WebPageRenderer.notForcedRedirect(getRedirectPolicy())))",
            "src_parent_type": "Return",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(((org.apache.wicket.request.handler.render.WebPageRenderer.neverRedirect(getRedirectPolicy()) || ((isOnePassRender() && org.apache.wicket.request.handler.render.WebPageRenderer.notForcedRedirect(getRedirectPolicy())) || (targetUrl.equals(currentUrl) && org.apache.wicket.request.handler.render.WebPageRenderer.notNewAndNotStatelessPage(isNewPageInstance(), isPageStateless())))) || (targetUrl.equals(currentUrl) && isRedirectToRender())) || (shouldPreserveClientUrl(cycle) && org.apache.wicket.request.handler.render.WebPageRenderer.notForcedRedirect(getRedirectPolicy())))",
            "dst_parent": "compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol()) && (((org.apache.wicket.request.handler.render.WebPageRenderer.neverRedirect(getRedirectPolicy()) || ((isOnePassRender() && org.apache.wicket.request.handler.render.WebPageRenderer.notForcedRedirect(getRedirectPolicy())) || (targetUrl.equals(currentUrl) && org.apache.wicket.request.handler.render.WebPageRenderer.notNewAndNotStatelessPage(isNewPageInstance(), isPageStateless())))) || (targetUrl.equals(currentUrl) && isRedirectToRender())) || (shouldPreserveClientUrl(cycle) && org.apache.wicket.request.handler.render.WebPageRenderer.notForcedRedirect(getRedirectPolicy())))",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "((org.apache.wicket.request.handler.render.WebPageRenderer.neverRedirect(getRedirectPolicy()) || ((isOnePassRender() && org.apache.wicket.request.handler.render.WebPageRenderer.notForcedRedirect(getRedirectPolicy())) || (targetUrl.equals(currentUrl) && org.apache.wicket.request.handler.render.WebPageRenderer.notNewAndNotStatelessPage(isNewPageInstance(), isPageStateless())))) || (targetUrl.equals(currentUrl) && isRedirectToRender())) || (shouldPreserveClientUrl(cycle) && org.apache.wicket.request.handler.render.WebPageRenderer.notForcedRedirect(getRedirectPolicy()))",
            "src_parent": "return ((org.apache.wicket.request.handler.render.WebPageRenderer.neverRedirect(getRedirectPolicy()) || ((isOnePassRender() && org.apache.wicket.request.handler.render.WebPageRenderer.notForcedRedirect(getRedirectPolicy())) || (targetUrl.equals(currentUrl) && org.apache.wicket.request.handler.render.WebPageRenderer.notNewAndNotStatelessPage(isNewPageInstance(), isPageStateless())))) || (targetUrl.equals(currentUrl) && isRedirectToRender())) || (shouldPreserveClientUrl(cycle) && org.apache.wicket.request.handler.render.WebPageRenderer.notForcedRedirect(getRedirectPolicy()))",
            "src_parent_type": "Return",
            "src_type": "BinaryOperator"
          }
        }
      ],
      "file_name": "WebPageRenderer"
    }
  ],
  "id": "wicket_5b730c0b"
}