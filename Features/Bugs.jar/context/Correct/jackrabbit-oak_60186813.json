{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "existingNames",
            "dst_parent": "for (java.lang.String name : existingNames) {\n    cache.load(store, pathEntryMap, name);\n}",
            "dst_parent_type": "ForEach",
            "dst_type": "FieldRead",
            "operator": "UPD",
            "src": "principalNames",
            "src_parent": "for (java.lang.String name : principalNames) {\n    cache.load(store, pathEntryMap, name);\n}",
            "src_parent_type": "ForEach",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "cnt += n",
            "src_parent": "{\n    long n = cache.getNumEntries(store, name, maxSize);\n    cnt += n;\n    if (n > 0) {\n        existingNames.add(name);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "OperatorAssignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProviderImpl.class);",
            "src_parent": "class PermissionEntryProviderImpl implements org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProvider {\n    public static final java.lang.String EAGER_CACHE_SIZE_PARAM = \"eagerCacheSize\";\n\n    private static final long DEFAULT_SIZE = 250;\n\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProviderImpl.class);\n\n    private final java.util.Set<java.lang.String> principalNames;\n\n    private final java.util.Set<java.lang.String> existingNames = new java.util.HashSet<java.lang.String>();\n\n    private final org.apache.jackrabbit.oak.security.authorization.permission.PermissionStore store;\n\n    private final org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryCache cache;\n\n    private final long maxSize;\n\n    private java.util.Map<java.lang.String, java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>> pathEntryMap;\n\n    PermissionEntryProviderImpl(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.security.authorization.permission.PermissionStore store, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryCache cache, @javax.annotation.Nonnull\n    java.util.Set<java.lang.String> principalNames, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.spi.security.ConfigurationParameters options) {\n        this.store = store;\n        this.cache = cache;\n        this.principalNames = java.util.Collections.unmodifiableSet(principalNames);\n        this.maxSize = options.getConfigValue(org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProviderImpl.EAGER_CACHE_SIZE_PARAM, org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProviderImpl.DEFAULT_SIZE);\n        init();\n    }\n\n    private void init() {\n        long cnt = 0;\n        existingNames.clear();\n        for (java.lang.String name : principalNames) {\n            long n = cache.getNumEntries(store, name, maxSize);\n            if (n > 0) {\n                existingNames.add(name);\n            }\n            if (cnt < java.lang.Long.MAX_VALUE) {\n                if (java.lang.Long.MAX_VALUE == n) {\n                    cnt = java.lang.Long.MAX_VALUE;\n                } else {\n                    try {\n                        cnt = com.google.common.math.LongMath.checkedAdd(cnt, n);\n                    } catch (java.lang.ArithmeticException ae) {\n                        org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProviderImpl.log.warn(\"Long overflow while calculate the total number of permission entries\");\n                        cnt = java.lang.Long.MAX_VALUE;\n                    }\n                }\n            }\n        }\n        if ((cnt > 0) && (cnt < maxSize)) {\n            pathEntryMap = new java.util.HashMap<java.lang.String, java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>>();\n            for (java.lang.String name : existingNames) {\n                cache.load(store, pathEntryMap, name);\n            }\n        } else {\n            pathEntryMap = null;\n        }\n    }\n\n    public void flush() {\n        cache.flush(principalNames);\n        init();\n    }\n\n    @javax.annotation.Nonnull\n    public java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> getEntryIterator(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate) {\n        if (existingNames.isEmpty()) {\n            return com.google.common.collect.Iterators.emptyIterator();\n        } else {\n            return new org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProviderImpl.EntryIterator(predicate);\n        }\n    }\n\n    @javax.annotation.Nonnull\n    public java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> getEntries(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.api.Tree accessControlledTree) {\n        if (existingNames.isEmpty()) {\n            return java.util.Collections.emptyList();\n        } else if (pathEntryMap != null) {\n            java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> entries = pathEntryMap.get(accessControlledTree.getPath());\n            return entries != null ? entries : java.util.Collections.<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>emptyList();\n        } else {\n            return accessControlledTree.hasChild(AccessControlConstants.REP_POLICY) ? loadEntries(accessControlledTree.getPath()) : java.util.Collections.<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>emptyList();\n        }\n    }\n\n    @javax.annotation.Nonnull\n    public java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> getEntries(@javax.annotation.Nonnull\n    java.lang.String path) {\n        if (existingNames.isEmpty()) {\n            return java.util.Collections.emptyList();\n        } else if (pathEntryMap != null) {\n            java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> entries = pathEntryMap.get(path);\n            return entries != null ? entries : java.util.Collections.<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>emptyList();\n        } else {\n            return loadEntries(path);\n        }\n    }\n\n    @javax.annotation.Nonnull\n    private java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> loadEntries(@javax.annotation.Nonnull\n    java.lang.String path) {\n        java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> ret = new java.util.TreeSet<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>();\n        for (java.lang.String name : existingNames) {\n            cache.load(store, ret, name, path);\n        }\n        return ret;\n    }\n\n    private final class EntryIterator extends org.apache.jackrabbit.commons.iterator.AbstractLazyIterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> {\n        private final org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate;\n\n        private java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> nextEntries = com.google.common.collect.Iterators.emptyIterator();\n\n        private java.lang.String path;\n\n        private EntryIterator(@javax.annotation.Nonnull\n        org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate) {\n            this.predicate = predicate;\n            this.path = com.google.common.base.Strings.nullToEmpty(predicate.getPath());\n        }\n\n        @java.lang.Override\n        protected org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry getNext() {\n            org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry next = null;\n            while (next == null) {\n                if (nextEntries.hasNext()) {\n                    org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry pe = nextEntries.next();\n                    if (predicate.apply(pe)) {\n                        next = pe;\n                    }\n                } else {\n                    if (path == null) {\n                        break;\n                    }\n                    nextEntries = getEntries(path).iterator();\n                    path = org.apache.jackrabbit.oak.security.authorization.permission.PermissionUtil.getParentPathOrNull(path);\n                }\n            } \n            return next;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (cnt < java.lang.Long.MAX_VALUE) {\n    if (java.lang.Long.MAX_VALUE == n) {\n        cnt = java.lang.Long.MAX_VALUE;\n    } else {\n        try {\n            cnt = com.google.common.math.LongMath.checkedAdd(cnt, n);\n        } catch (java.lang.ArithmeticException ae) {\n            org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProviderImpl.log.warn(\"Long overflow while calculate the total number of permission entries\");\n            cnt = java.lang.Long.MAX_VALUE;\n        }\n    }\n}",
            "src_parent": "{\n    long n = cache.getNumEntries(store, name, maxSize);\n    if (n > 0) {\n        existingNames.add(name);\n    }\n    if (cnt < java.lang.Long.MAX_VALUE) {\n        if (java.lang.Long.MAX_VALUE == n) {\n            cnt = java.lang.Long.MAX_VALUE;\n        } else {\n            try {\n                cnt = com.google.common.math.LongMath.checkedAdd(cnt, n);\n            } catch (java.lang.ArithmeticException ae) {\n                org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProviderImpl.log.warn(\"Long overflow while calculate the total number of permission entries\");\n                cnt = java.lang.Long.MAX_VALUE;\n            }\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "(cnt > 0) && (cnt < maxSize)",
            "src_parent": "if ((cnt > 0) && (cnt < maxSize)) {\n    pathEntryMap = new java.util.HashMap<java.lang.String, java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>>();\n    for (java.lang.String name : existingNames) {\n        cache.load(store, pathEntryMap, name);\n    }\n} else {\n    pathEntryMap = null;\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "private java.util.Map<java.lang.String, java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>> pathEntryMap;",
            "dst_parent": "class PermissionEntryProviderImpl implements org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProvider {\n    public static final java.lang.String EAGER_CACHE_SIZE_PARAM = \"eagerCacheSize\";\n\n    private static final long DEFAULT_SIZE = 250;\n\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProviderImpl.class);\n\n    private final java.util.Set<java.lang.String> principalNames;\n\n    private final java.util.Set<java.lang.String> existingNames = new java.util.HashSet<java.lang.String>();\n\n    private final org.apache.jackrabbit.oak.security.authorization.permission.PermissionStore store;\n\n    private final org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryCache cache;\n\n    private final long maxSize;\n\n    private java.util.Map<java.lang.String, java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>> pathEntryMap;\n\n    PermissionEntryProviderImpl(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.security.authorization.permission.PermissionStore store, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryCache cache, @javax.annotation.Nonnull\n    java.util.Set<java.lang.String> principalNames, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.spi.security.ConfigurationParameters options) {\n        this.store = store;\n        this.cache = cache;\n        this.principalNames = java.util.Collections.unmodifiableSet(principalNames);\n        this.maxSize = options.getConfigValue(org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProviderImpl.EAGER_CACHE_SIZE_PARAM, org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProviderImpl.DEFAULT_SIZE);\n        init();\n    }\n\n    private void init() {\n        long cnt = 0;\n        existingNames.clear();\n        for (java.lang.String name : principalNames) {\n            long n = cache.getNumEntries(store, name, maxSize);\n            if (n > 0) {\n                existingNames.add(name);\n            }\n            if (cnt < java.lang.Long.MAX_VALUE) {\n                if (java.lang.Long.MAX_VALUE == n) {\n                    cnt = java.lang.Long.MAX_VALUE;\n                } else {\n                    try {\n                        cnt = com.google.common.math.LongMath.checkedAdd(cnt, n);\n                    } catch (java.lang.ArithmeticException ae) {\n                        org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProviderImpl.log.warn(\"Long overflow while calculate the total number of permission entries\");\n                        cnt = java.lang.Long.MAX_VALUE;\n                    }\n                }\n            }\n        }\n        if ((cnt > 0) && (cnt < maxSize)) {\n            pathEntryMap = new java.util.HashMap<java.lang.String, java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>>();\n            for (java.lang.String name : existingNames) {\n                cache.load(store, pathEntryMap, name);\n            }\n        } else {\n            pathEntryMap = null;\n        }\n    }\n\n    public void flush() {\n        cache.flush(principalNames);\n        init();\n    }\n\n    @javax.annotation.Nonnull\n    public java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> getEntryIterator(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate) {\n        if (existingNames.isEmpty()) {\n            return com.google.common.collect.Iterators.emptyIterator();\n        } else {\n            return new org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProviderImpl.EntryIterator(predicate);\n        }\n    }\n\n    @javax.annotation.Nonnull\n    public java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> getEntries(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.api.Tree accessControlledTree) {\n        if (existingNames.isEmpty()) {\n            return java.util.Collections.emptyList();\n        } else if (pathEntryMap != null) {\n            java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> entries = pathEntryMap.get(accessControlledTree.getPath());\n            return entries != null ? entries : java.util.Collections.<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>emptyList();\n        } else {\n            return accessControlledTree.hasChild(AccessControlConstants.REP_POLICY) ? loadEntries(accessControlledTree.getPath()) : java.util.Collections.<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>emptyList();\n        }\n    }\n\n    @javax.annotation.Nonnull\n    public java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> getEntries(@javax.annotation.Nonnull\n    java.lang.String path) {\n        if (existingNames.isEmpty()) {\n            return java.util.Collections.emptyList();\n        } else if (pathEntryMap != null) {\n            java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> entries = pathEntryMap.get(path);\n            return entries != null ? entries : java.util.Collections.<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>emptyList();\n        } else {\n            return loadEntries(path);\n        }\n    }\n\n    @javax.annotation.Nonnull\n    private java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> loadEntries(@javax.annotation.Nonnull\n    java.lang.String path) {\n        java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> ret = new java.util.TreeSet<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>();\n        for (java.lang.String name : existingNames) {\n            cache.load(store, ret, name, path);\n        }\n        return ret;\n    }\n\n    private final class EntryIterator extends org.apache.jackrabbit.commons.iterator.AbstractLazyIterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> {\n        private final org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate;\n\n        private java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> nextEntries = com.google.common.collect.Iterators.emptyIterator();\n\n        private java.lang.String path;\n\n        private EntryIterator(@javax.annotation.Nonnull\n        org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate) {\n            this.predicate = predicate;\n            this.path = com.google.common.base.Strings.nullToEmpty(predicate.getPath());\n        }\n\n        @java.lang.Override\n        protected org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry getNext() {\n            org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry next = null;\n            while (next == null) {\n                if (nextEntries.hasNext()) {\n                    org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry pe = nextEntries.next();\n                    if (predicate.apply(pe)) {\n                        next = pe;\n                    }\n                } else {\n                    if (path == null) {\n                        break;\n                    }\n                    nextEntries = getEntries(path).iterator();\n                    path = org.apache.jackrabbit.oak.security.authorization.permission.PermissionUtil.getParentPathOrNull(path);\n                }\n            } \n            return next;\n        }\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Field",
            "operator": "MOV",
            "src": "private java.util.Map<java.lang.String, java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>> pathEntryMap;",
            "src_parent": "class PermissionEntryProviderImpl implements org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProvider {\n    public static final java.lang.String EAGER_CACHE_SIZE_PARAM = \"eagerCacheSize\";\n\n    private static final long DEFAULT_SIZE = 250;\n\n    private final java.util.Set<java.lang.String> principalNames;\n\n    private final java.util.Set<java.lang.String> existingNames = new java.util.HashSet<java.lang.String>();\n\n    private java.util.Map<java.lang.String, java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>> pathEntryMap;\n\n    private final org.apache.jackrabbit.oak.security.authorization.permission.PermissionStore store;\n\n    private final org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryCache cache;\n\n    private final long maxSize;\n\n    PermissionEntryProviderImpl(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.security.authorization.permission.PermissionStore store, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryCache cache, @javax.annotation.Nonnull\n    java.util.Set<java.lang.String> principalNames, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.spi.security.ConfigurationParameters options) {\n        this.store = store;\n        this.cache = cache;\n        this.principalNames = java.util.Collections.unmodifiableSet(principalNames);\n        this.maxSize = options.getConfigValue(org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProviderImpl.EAGER_CACHE_SIZE_PARAM, org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProviderImpl.DEFAULT_SIZE);\n        init();\n    }\n\n    private void init() {\n        long cnt = 0;\n        existingNames.clear();\n        for (java.lang.String name : principalNames) {\n            long n = cache.getNumEntries(store, name, maxSize);\n            cnt += n;\n            if (n > 0) {\n                existingNames.add(name);\n            }\n        }\n        if (cnt < maxSize) {\n            pathEntryMap = new java.util.HashMap<java.lang.String, java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>>();\n            for (java.lang.String name : principalNames) {\n                cache.load(store, pathEntryMap, name);\n            }\n        } else {\n            pathEntryMap = null;\n        }\n    }\n\n    public void flush() {\n        cache.flush(principalNames);\n        init();\n    }\n\n    @javax.annotation.Nonnull\n    public java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> getEntryIterator(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate) {\n        if (existingNames.isEmpty()) {\n            return com.google.common.collect.Iterators.emptyIterator();\n        } else {\n            return new org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntryProviderImpl.EntryIterator(predicate);\n        }\n    }\n\n    @javax.annotation.Nonnull\n    public java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> getEntries(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.api.Tree accessControlledTree) {\n        if (existingNames.isEmpty()) {\n            return java.util.Collections.emptyList();\n        } else if (pathEntryMap != null) {\n            java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> entries = pathEntryMap.get(accessControlledTree.getPath());\n            return entries != null ? entries : java.util.Collections.<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>emptyList();\n        } else {\n            return accessControlledTree.hasChild(AccessControlConstants.REP_POLICY) ? loadEntries(accessControlledTree.getPath()) : java.util.Collections.<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>emptyList();\n        }\n    }\n\n    @javax.annotation.Nonnull\n    public java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> getEntries(@javax.annotation.Nonnull\n    java.lang.String path) {\n        if (existingNames.isEmpty()) {\n            return java.util.Collections.emptyList();\n        } else if (pathEntryMap != null) {\n            java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> entries = pathEntryMap.get(path);\n            return entries != null ? entries : java.util.Collections.<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>emptyList();\n        } else {\n            return loadEntries(path);\n        }\n    }\n\n    @javax.annotation.Nonnull\n    private java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> loadEntries(@javax.annotation.Nonnull\n    java.lang.String path) {\n        java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> ret = new java.util.TreeSet<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>();\n        for (java.lang.String name : existingNames) {\n            cache.load(store, ret, name, path);\n        }\n        return ret;\n    }\n\n    private final class EntryIterator extends org.apache.jackrabbit.commons.iterator.AbstractLazyIterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> {\n        private final org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate;\n\n        private java.util.Iterator<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry> nextEntries = com.google.common.collect.Iterators.emptyIterator();\n\n        private java.lang.String path;\n\n        private EntryIterator(@javax.annotation.Nonnull\n        org.apache.jackrabbit.oak.security.authorization.permission.EntryPredicate predicate) {\n            this.predicate = predicate;\n            this.path = com.google.common.base.Strings.nullToEmpty(predicate.getPath());\n        }\n\n        @java.lang.Override\n        protected org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry getNext() {\n            org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry next = null;\n            while (next == null) {\n                if (nextEntries.hasNext()) {\n                    org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry pe = nextEntries.next();\n                    if (predicate.apply(pe)) {\n                        next = pe;\n                    }\n                } else {\n                    if (path == null) {\n                        break;\n                    }\n                    nextEntries = getEntries(path).iterator();\n                    path = org.apache.jackrabbit.oak.security.authorization.permission.PermissionUtil.getParentPathOrNull(path);\n                }\n            } \n            return next;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(cnt < maxSize)",
            "dst_parent": "(cnt > 0) && (cnt < maxSize)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "cnt < maxSize",
            "src_parent": "if (cnt < maxSize) {\n    pathEntryMap = new java.util.HashMap<java.lang.String, java.util.Collection<org.apache.jackrabbit.oak.security.authorization.permission.PermissionEntry>>();\n    for (java.lang.String name : principalNames) {\n        cache.load(store, pathEntryMap, name);\n    }\n} else {\n    pathEntryMap = null;\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        }
      ],
      "file_name": "PermissionEntryProviderImpl"
    }
  ],
  "id": "jackrabbit-oak_60186813"
}