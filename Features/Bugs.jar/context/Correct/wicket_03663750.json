{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "@java.lang.Override\nprotected void onAfterRender() {\n    super.onAfterRender();\n    renderedComponentsPerScope = null;\n    headerResponse = null;\n}",
            "dst_parent": "public class HtmlHeaderContainer extends org.apache.wicket.markup.html.TransparentWebMarkupContainer {\n    private static final long serialVersionUID = 1L;\n\n    private transient java.util.Map<java.lang.String, java.util.List<java.lang.String>> renderedComponentsPerScope;\n\n    private transient org.apache.wicket.markup.head.IHeaderResponse headerResponse = null;\n\n    public static class HeaderStreamState {\n        private final org.apache.wicket.markup.MarkupStream markupStream;\n\n        private final org.apache.wicket.markup.ComponentTag openTag;\n\n        private HeaderStreamState(org.apache.wicket.markup.MarkupStream markupStream, org.apache.wicket.markup.ComponentTag openTag) {\n            this.markupStream = markupStream;\n            this.openTag = openTag;\n        }\n\n        public org.apache.wicket.markup.MarkupStream getMarkupStream() {\n            return markupStream;\n        }\n\n        public org.apache.wicket.markup.ComponentTag getOpenTag() {\n            return openTag;\n        }\n    }\n\n    public HtmlHeaderContainer(final java.lang.String id) {\n        super(id);\n        setRenderBodyOnly(true);\n        setAuto(true);\n    }\n\n    @java.lang.Override\n    public final void onComponentTagBody(org.apache.wicket.markup.MarkupStream markupStream, org.apache.wicket.markup.ComponentTag openTag) {\n        final org.apache.wicket.request.Response webResponse = getResponse();\n        try {\n            final org.apache.wicket.response.StringResponse response = new org.apache.wicket.response.StringResponse();\n            getRequestCycle().setResponse(response);\n            org.apache.wicket.markup.head.IHeaderResponse headerResponse = getHeaderResponse();\n            if (!response.equals(headerResponse.getResponse())) {\n                getRequestCycle().setResponse(headerResponse.getResponse());\n            }\n            org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy.get().renderHeader(this, new org.apache.wicket.markup.html.internal.HtmlHeaderContainer.HeaderStreamState(markupStream, openTag), getPage());\n            headerResponse.close();\n            java.lang.CharSequence output = getCleanResponse(response);\n            if (output.length() > 0) {\n                if (renderOpenAndCloseTags()) {\n                    webResponse.write(\"<head>\");\n                }\n                webResponse.write(output);\n                if (renderOpenAndCloseTags()) {\n                    webResponse.write(\"</head>\");\n                }\n            }\n        } finally {\n            getRequestCycle().setResponse(webResponse);\n        }\n    }\n\n    public void renderHeaderTagBody(org.apache.wicket.markup.html.internal.HtmlHeaderContainer.HeaderStreamState headerStreamState) {\n        if (headerStreamState == null) {\n            return;\n        }\n        final org.apache.wicket.request.Response oldResponse = getRequestCycle().getResponse();\n        try {\n            final org.apache.wicket.response.StringResponse bodyResponse = new org.apache.wicket.response.StringResponse();\n            getRequestCycle().setResponse(bodyResponse);\n            super.onComponentTagBody(headerStreamState.getMarkupStream(), headerStreamState.getOpenTag());\n            java.lang.CharSequence bodyOutput = getCleanResponse(bodyResponse);\n            if (bodyOutput.length() > 0) {\n                getHeaderResponse().render(new org.apache.wicket.markup.head.PageHeaderItem(bodyOutput));\n            }\n        } finally {\n            getRequestCycle().setResponse(oldResponse);\n        }\n    }\n\n    private java.lang.CharSequence getCleanResponse(final org.apache.wicket.response.StringResponse response) {\n        java.lang.CharSequence output = response.getBuffer();\n        if (output.length() > 0) {\n            if (output.charAt(0) == '\\r') {\n                for (int i = 2; i < output.length(); i += 2) {\n                    char ch = output.charAt(i);\n                    if (ch != '\\r') {\n                        output = output.subSequence(i - 2, output.length());\n                        break;\n                    }\n                }\n            } else if (output.charAt(0) == '\\n') {\n                for (int i = 1; i < output.length(); i++) {\n                    char ch = output.charAt(i);\n                    if (ch != '\\n') {\n                        output = output.subSequence(i - 1, output.length());\n                        break;\n                    }\n                }\n            }\n        }\n        return output;\n    }\n\n    protected boolean renderOpenAndCloseTags() {\n        return true;\n    }\n\n    public boolean okToRenderComponent(final java.lang.String scope, final java.lang.String id) {\n        if (renderedComponentsPerScope == null) {\n            renderedComponentsPerScope = new java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>();\n        }\n        java.util.List<java.lang.String> componentScope = renderedComponentsPerScope.get(scope);\n        if (componentScope == null) {\n            componentScope = new java.util.ArrayList<java.lang.String>();\n            renderedComponentsPerScope.put(scope, componentScope);\n        }\n        if (componentScope.contains(id)) {\n            return false;\n        }\n        componentScope.add(id);\n        return true;\n    }\n\n    @java.lang.Override\n    protected void onAfterRender() {\n        super.onAfterRender();\n        renderedComponentsPerScope = null;\n        headerResponse = null;\n    }\n\n    protected org.apache.wicket.markup.head.IHeaderResponse newHeaderResponse() {\n        return new org.apache.wicket.markup.head.internal.HeaderResponse() {\n            @java.lang.Override\n            protected org.apache.wicket.request.Response getRealResponse() {\n                return HtmlHeaderContainer.this.getResponse();\n            }\n        };\n    }\n\n    public org.apache.wicket.markup.head.IHeaderResponse getHeaderResponse() {\n        if (headerResponse == null) {\n            headerResponse = getApplication().decorateHeaderResponse(newHeaderResponse());\n        }\n        return headerResponse;\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.markup.IMarkupFragment getMarkup() {\n        if (getParent() == null) {\n            throw new org.apache.wicket.WicketRuntimeException(\"Bug: The Wicket internal instance of HtmlHeaderContainer is not connected to a parent\");\n        }\n        org.apache.wicket.markup.IMarkupFragment markup = getPage().getMarkup();\n        if (markup == null) {\n            throw new org.apache.wicket.markup.MarkupException(\"Unable to get page markup: \" + getPage().toString());\n        }\n        org.apache.wicket.markup.MarkupStream stream = new org.apache.wicket.markup.MarkupStream(markup);\n        org.apache.wicket.markup.IMarkupFragment headerMarkup = null;\n        while (stream.skipUntil(org.apache.wicket.markup.ComponentTag.class)) {\n            org.apache.wicket.markup.ComponentTag tag = stream.getTag();\n            if (tag.isOpen() || tag.isOpenClose()) {\n                if (tag instanceof org.apache.wicket.markup.WicketTag) {\n                    org.apache.wicket.markup.WicketTag wtag = ((org.apache.wicket.markup.WicketTag) (tag));\n                    if (wtag.isHeadTag() || wtag.isHeaderItemsTag()) {\n                        headerMarkup = stream.getMarkupFragment();\n                        break;\n                    }\n                } else if (tag.getName().equalsIgnoreCase(\"head\") && tag.isAutoComponentTag()) {\n                    headerMarkup = stream.getMarkupFragment();\n                    break;\n                }\n            }\n            stream.next();\n        } \n        setMarkup(headerMarkup);\n        return headerMarkup;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "@java.lang.Override\nprotected void onDetach() {\n    super.onDetach();\n    renderedComponentsPerScope = null;\n    headerResponse = null;\n}",
            "src_parent": "public class HtmlHeaderContainer extends org.apache.wicket.markup.html.TransparentWebMarkupContainer {\n    private static final long serialVersionUID = 1L;\n\n    private transient java.util.Map<java.lang.String, java.util.List<java.lang.String>> renderedComponentsPerScope;\n\n    private transient org.apache.wicket.markup.head.IHeaderResponse headerResponse = null;\n\n    public static class HeaderStreamState {\n        private final org.apache.wicket.markup.MarkupStream markupStream;\n\n        private final org.apache.wicket.markup.ComponentTag openTag;\n\n        private HeaderStreamState(org.apache.wicket.markup.MarkupStream markupStream, org.apache.wicket.markup.ComponentTag openTag) {\n            this.markupStream = markupStream;\n            this.openTag = openTag;\n        }\n\n        public org.apache.wicket.markup.MarkupStream getMarkupStream() {\n            return markupStream;\n        }\n\n        public org.apache.wicket.markup.ComponentTag getOpenTag() {\n            return openTag;\n        }\n    }\n\n    public HtmlHeaderContainer(final java.lang.String id) {\n        super(id);\n        setRenderBodyOnly(true);\n        setAuto(true);\n    }\n\n    @java.lang.Override\n    public final void onComponentTagBody(org.apache.wicket.markup.MarkupStream markupStream, org.apache.wicket.markup.ComponentTag openTag) {\n        final org.apache.wicket.request.Response webResponse = getResponse();\n        try {\n            final org.apache.wicket.response.StringResponse response = new org.apache.wicket.response.StringResponse();\n            getRequestCycle().setResponse(response);\n            org.apache.wicket.markup.head.IHeaderResponse headerResponse = getHeaderResponse();\n            if (!response.equals(headerResponse.getResponse())) {\n                getRequestCycle().setResponse(headerResponse.getResponse());\n            }\n            org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy.get().renderHeader(this, new org.apache.wicket.markup.html.internal.HtmlHeaderContainer.HeaderStreamState(markupStream, openTag), getPage());\n            headerResponse.close();\n            java.lang.CharSequence output = getCleanResponse(response);\n            if (output.length() > 0) {\n                if (renderOpenAndCloseTags()) {\n                    webResponse.write(\"<head>\");\n                }\n                webResponse.write(output);\n                if (renderOpenAndCloseTags()) {\n                    webResponse.write(\"</head>\");\n                }\n            }\n        } finally {\n            getRequestCycle().setResponse(webResponse);\n        }\n    }\n\n    public void renderHeaderTagBody(org.apache.wicket.markup.html.internal.HtmlHeaderContainer.HeaderStreamState headerStreamState) {\n        if (headerStreamState == null) {\n            return;\n        }\n        final org.apache.wicket.request.Response oldResponse = getRequestCycle().getResponse();\n        try {\n            final org.apache.wicket.response.StringResponse bodyResponse = new org.apache.wicket.response.StringResponse();\n            getRequestCycle().setResponse(bodyResponse);\n            super.onComponentTagBody(headerStreamState.getMarkupStream(), headerStreamState.getOpenTag());\n            java.lang.CharSequence bodyOutput = getCleanResponse(bodyResponse);\n            if (bodyOutput.length() > 0) {\n                getHeaderResponse().render(new org.apache.wicket.markup.head.PageHeaderItem(bodyOutput));\n            }\n        } finally {\n            getRequestCycle().setResponse(oldResponse);\n        }\n    }\n\n    private java.lang.CharSequence getCleanResponse(final org.apache.wicket.response.StringResponse response) {\n        java.lang.CharSequence output = response.getBuffer();\n        if (output.length() > 0) {\n            if (output.charAt(0) == '\\r') {\n                for (int i = 2; i < output.length(); i += 2) {\n                    char ch = output.charAt(i);\n                    if (ch != '\\r') {\n                        output = output.subSequence(i - 2, output.length());\n                        break;\n                    }\n                }\n            } else if (output.charAt(0) == '\\n') {\n                for (int i = 1; i < output.length(); i++) {\n                    char ch = output.charAt(i);\n                    if (ch != '\\n') {\n                        output = output.subSequence(i - 1, output.length());\n                        break;\n                    }\n                }\n            }\n        }\n        return output;\n    }\n\n    protected boolean renderOpenAndCloseTags() {\n        return true;\n    }\n\n    public boolean okToRenderComponent(final java.lang.String scope, final java.lang.String id) {\n        if (renderedComponentsPerScope == null) {\n            renderedComponentsPerScope = new java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>();\n        }\n        java.util.List<java.lang.String> componentScope = renderedComponentsPerScope.get(scope);\n        if (componentScope == null) {\n            componentScope = new java.util.ArrayList<java.lang.String>();\n            renderedComponentsPerScope.put(scope, componentScope);\n        }\n        if (componentScope.contains(id)) {\n            return false;\n        }\n        componentScope.add(id);\n        return true;\n    }\n\n    @java.lang.Override\n    protected void onDetach() {\n        super.onDetach();\n        renderedComponentsPerScope = null;\n        headerResponse = null;\n    }\n\n    protected org.apache.wicket.markup.head.IHeaderResponse newHeaderResponse() {\n        return new org.apache.wicket.markup.head.internal.HeaderResponse() {\n            @java.lang.Override\n            protected org.apache.wicket.request.Response getRealResponse() {\n                return HtmlHeaderContainer.this.getResponse();\n            }\n        };\n    }\n\n    public org.apache.wicket.markup.head.IHeaderResponse getHeaderResponse() {\n        if (headerResponse == null) {\n            headerResponse = getApplication().decorateHeaderResponse(newHeaderResponse());\n        }\n        return headerResponse;\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.markup.IMarkupFragment getMarkup() {\n        if (getParent() == null) {\n            throw new org.apache.wicket.WicketRuntimeException(\"Bug: The Wicket internal instance of HtmlHeaderContainer is not connected to a parent\");\n        }\n        org.apache.wicket.markup.IMarkupFragment markup = getPage().getMarkup();\n        if (markup == null) {\n            throw new org.apache.wicket.markup.MarkupException(\"Unable to get page markup: \" + getPage().toString());\n        }\n        org.apache.wicket.markup.MarkupStream stream = new org.apache.wicket.markup.MarkupStream(markup);\n        org.apache.wicket.markup.IMarkupFragment headerMarkup = null;\n        while (stream.skipUntil(org.apache.wicket.markup.ComponentTag.class)) {\n            org.apache.wicket.markup.ComponentTag tag = stream.getTag();\n            if (tag.isOpen() || tag.isOpenClose()) {\n                if (tag instanceof org.apache.wicket.markup.WicketTag) {\n                    org.apache.wicket.markup.WicketTag wtag = ((org.apache.wicket.markup.WicketTag) (tag));\n                    if (wtag.isHeadTag() || wtag.isHeaderItemsTag()) {\n                        headerMarkup = stream.getMarkupFragment();\n                        break;\n                    }\n                } else if (tag.getName().equalsIgnoreCase(\"head\") && tag.isAutoComponentTag()) {\n                    headerMarkup = stream.getMarkupFragment();\n                    break;\n                }\n            }\n            stream.next();\n        } \n        setMarkup(headerMarkup);\n        return headerMarkup;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "super.onAfterRender()",
            "dst_parent": "{\n    super.onAfterRender();\n    renderedComponentsPerScope = null;\n    headerResponse = null;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "super.onDetach()",
            "src_parent": "{\n    super.onDetach();\n    renderedComponentsPerScope = null;\n    headerResponse = null;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "HtmlHeaderContainer"
    }
  ],
  "id": "wicket_03663750"
}