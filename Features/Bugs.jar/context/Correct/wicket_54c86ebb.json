{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private boolean arePageParametersSame(org.apache.wicket.request.component.IRequestablePage storedPageInstance) {\n    org.apache.wicket.request.mapper.parameter.PageParameters currentCopy = new org.apache.wicket.request.mapper.parameter.PageParameters(pageParameters);\n    org.apache.wicket.request.mapper.parameter.PageParameters storedCopy = new org.apache.wicket.request.mapper.parameter.PageParameters(storedPageInstance.getPageParameters());\n    return currentCopy.equals(storedCopy);\n}",
            "src_parent": "public class PageProvider implements org.apache.wicket.core.request.handler.IPageProvider {\n    private final java.lang.Integer renderCount;\n\n    private final java.lang.Integer pageId;\n\n    private org.apache.wicket.core.request.mapper.IPageSource pageSource;\n\n    private org.apache.wicket.request.component.IRequestablePage pageInstance;\n\n    private boolean pageInstanceIsFresh;\n\n    private java.lang.Class<? extends org.apache.wicket.request.component.IRequestablePage> pageClass;\n\n    private org.apache.wicket.request.mapper.parameter.PageParameters pageParameters;\n\n    public PageProvider(final int pageId, final java.lang.Integer renderCount) {\n        this.pageId = pageId;\n        this.renderCount = renderCount;\n    }\n\n    public PageProvider(final int pageId, final java.lang.Class<? extends org.apache.wicket.request.component.IRequestablePage> pageClass, java.lang.Integer renderCount) {\n        this(pageId, pageClass, new org.apache.wicket.request.mapper.parameter.PageParameters(), renderCount);\n    }\n\n    public PageProvider(final int pageId, final java.lang.Class<? extends org.apache.wicket.request.component.IRequestablePage> pageClass, final org.apache.wicket.request.mapper.parameter.PageParameters pageParameters, final java.lang.Integer renderCount) {\n        this.pageId = pageId;\n        setPageClass(pageClass);\n        setPageParameters(pageParameters);\n        this.renderCount = renderCount;\n    }\n\n    public PageProvider(final java.lang.Class<? extends org.apache.wicket.request.component.IRequestablePage> pageClass, final org.apache.wicket.request.mapper.parameter.PageParameters pageParameters) {\n        setPageClass(pageClass);\n        if (pageParameters != null) {\n            setPageParameters(pageParameters);\n        }\n        pageId = null;\n        renderCount = null;\n    }\n\n    public PageProvider(java.lang.Class<? extends org.apache.wicket.request.component.IRequestablePage> pageClass) {\n        this(pageClass, null);\n    }\n\n    public PageProvider(org.apache.wicket.request.component.IRequestablePage page) {\n        org.apache.wicket.util.lang.Args.notNull(page, \"page\");\n        pageInstance = page;\n        pageId = page.getPageId();\n        renderCount = page.getRenderCount();\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.component.IRequestablePage getPageInstance() {\n        if (pageInstance == null) {\n            resolvePageInstance(pageId, pageClass, pageParameters, renderCount);\n            if (pageInstance == null) {\n                throw new org.apache.wicket.protocol.http.PageExpiredException((\"Page with id '\" + pageId) + \"' has expired.\");\n            }\n        }\n        return pageInstance;\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.mapper.parameter.PageParameters getPageParameters() {\n        if (pageParameters != null) {\n            return pageParameters;\n        } else if (isNewPageInstance() == false) {\n            return pageInstance.getPageParameters();\n        } else {\n            return null;\n        }\n    }\n\n    @java.lang.Override\n    public boolean isNewPageInstance() {\n        boolean isNew = pageInstance == null;\n        if (isNew && (pageId != null)) {\n            org.apache.wicket.request.component.IRequestablePage storedPageInstance = getStoredPage(pageId);\n            if (storedPageInstance != null) {\n                pageInstance = storedPageInstance;\n                isNew = false;\n            }\n        }\n        return isNew;\n    }\n\n    @java.lang.Override\n    public java.lang.Class<? extends org.apache.wicket.request.component.IRequestablePage> getPageClass() {\n        if (pageClass != null) {\n            return pageClass;\n        } else {\n            return getPageInstance().getClass();\n        }\n    }\n\n    protected org.apache.wicket.core.request.mapper.IPageSource getPageSource() {\n        if (pageSource != null) {\n            return pageSource;\n        }\n        if (org.apache.wicket.Application.exists()) {\n            return org.apache.wicket.Application.get().getMapperContext();\n        } else {\n            throw new java.lang.IllegalStateException(\"No application is bound to current thread. Call setPageSource() to manually assign pageSource to this provider.\");\n        }\n    }\n\n    private void resolvePageInstance(java.lang.Integer pageId, java.lang.Class<? extends org.apache.wicket.request.component.IRequestablePage> pageClass, org.apache.wicket.request.mapper.parameter.PageParameters pageParameters, java.lang.Integer renderCount) {\n        org.apache.wicket.request.component.IRequestablePage page = null;\n        boolean freshCreated = false;\n        if (pageId != null) {\n            page = getStoredPage(pageId);\n        }\n        if (page == null) {\n            if (pageClass != null) {\n                page = getPageSource().newPageInstance(pageClass, pageParameters);\n                freshCreated = true;\n            }\n        }\n        if ((page != null) && (!freshCreated)) {\n            if ((renderCount != null) && (page.getRenderCount() != renderCount)) {\n                throw new org.apache.wicket.core.request.mapper.StalePageException(page);\n            }\n        }\n        pageInstanceIsFresh = freshCreated;\n        pageInstance = page;\n    }\n\n    private org.apache.wicket.request.component.IRequestablePage getStoredPage(final int pageId) {\n        org.apache.wicket.request.component.IRequestablePage storedPageInstance = getPageSource().getPageInstance(pageId);\n        if (storedPageInstance != null) {\n            if (((pageClass == null) || pageClass.equals(storedPageInstance.getClass())) && (isPageParametersEmpty(pageParameters) || arePageParametersSame(storedPageInstance))) {\n                pageInstance = storedPageInstance;\n                pageInstanceIsFresh = false;\n                if ((renderCount != null) && (pageInstance.getRenderCount() != renderCount)) {\n                    throw new org.apache.wicket.core.request.mapper.StalePageException(pageInstance);\n                }\n            } else {\n                storedPageInstance = null;\n            }\n        }\n        return storedPageInstance;\n    }\n\n    @java.lang.Override\n    public void detach() {\n        if (pageInstance != null) {\n            pageInstance.detach();\n        }\n    }\n\n    public void setPageSource(org.apache.wicket.core.request.mapper.IPageSource pageSource) {\n        this.pageSource = pageSource;\n    }\n\n    private void setPageClass(java.lang.Class<? extends org.apache.wicket.request.component.IRequestablePage> pageClass) {\n        org.apache.wicket.util.lang.Args.notNull(pageClass, \"pageClass\");\n        this.pageClass = pageClass;\n    }\n\n    protected void setPageParameters(org.apache.wicket.request.mapper.parameter.PageParameters pageParameters) {\n        this.pageParameters = pageParameters;\n    }\n\n    @java.lang.Override\n    public java.lang.Integer getPageId() {\n        return pageId;\n    }\n\n    @java.lang.Override\n    public java.lang.Integer getRenderCount() {\n        return renderCount;\n    }\n\n    @java.lang.Override\n    public final boolean hasPageInstance() {\n        if ((pageInstance == null) && (pageId != null)) {\n            getStoredPage(pageId);\n        }\n        return pageInstance != null;\n    }\n\n    @java.lang.Override\n    public final boolean isPageInstanceFresh() {\n        if (!hasPageInstance()) {\n            throw new java.lang.IllegalStateException(\"Page instance not yet resolved\");\n        }\n        return pageInstanceIsFresh;\n    }\n\n    private boolean arePageParametersSame(org.apache.wicket.request.component.IRequestablePage storedPageInstance) {\n        org.apache.wicket.request.mapper.parameter.PageParameters currentCopy = new org.apache.wicket.request.mapper.parameter.PageParameters(pageParameters);\n        org.apache.wicket.request.mapper.parameter.PageParameters storedCopy = new org.apache.wicket.request.mapper.parameter.PageParameters(storedPageInstance.getPageParameters());\n        return currentCopy.equals(storedCopy);\n    }\n\n    private boolean isPageParametersEmpty(org.apache.wicket.request.mapper.parameter.PageParameters parameters) {\n        return (parameters == null) || parameters.isEmpty();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private boolean isPageParametersEmpty(org.apache.wicket.request.mapper.parameter.PageParameters parameters) {\n    return (parameters == null) || parameters.isEmpty();\n}",
            "src_parent": "public class PageProvider implements org.apache.wicket.core.request.handler.IPageProvider {\n    private final java.lang.Integer renderCount;\n\n    private final java.lang.Integer pageId;\n\n    private org.apache.wicket.core.request.mapper.IPageSource pageSource;\n\n    private org.apache.wicket.request.component.IRequestablePage pageInstance;\n\n    private boolean pageInstanceIsFresh;\n\n    private java.lang.Class<? extends org.apache.wicket.request.component.IRequestablePage> pageClass;\n\n    private org.apache.wicket.request.mapper.parameter.PageParameters pageParameters;\n\n    public PageProvider(final int pageId, final java.lang.Integer renderCount) {\n        this.pageId = pageId;\n        this.renderCount = renderCount;\n    }\n\n    public PageProvider(final int pageId, final java.lang.Class<? extends org.apache.wicket.request.component.IRequestablePage> pageClass, java.lang.Integer renderCount) {\n        this(pageId, pageClass, new org.apache.wicket.request.mapper.parameter.PageParameters(), renderCount);\n    }\n\n    public PageProvider(final int pageId, final java.lang.Class<? extends org.apache.wicket.request.component.IRequestablePage> pageClass, final org.apache.wicket.request.mapper.parameter.PageParameters pageParameters, final java.lang.Integer renderCount) {\n        this.pageId = pageId;\n        setPageClass(pageClass);\n        setPageParameters(pageParameters);\n        this.renderCount = renderCount;\n    }\n\n    public PageProvider(final java.lang.Class<? extends org.apache.wicket.request.component.IRequestablePage> pageClass, final org.apache.wicket.request.mapper.parameter.PageParameters pageParameters) {\n        setPageClass(pageClass);\n        if (pageParameters != null) {\n            setPageParameters(pageParameters);\n        }\n        pageId = null;\n        renderCount = null;\n    }\n\n    public PageProvider(java.lang.Class<? extends org.apache.wicket.request.component.IRequestablePage> pageClass) {\n        this(pageClass, null);\n    }\n\n    public PageProvider(org.apache.wicket.request.component.IRequestablePage page) {\n        org.apache.wicket.util.lang.Args.notNull(page, \"page\");\n        pageInstance = page;\n        pageId = page.getPageId();\n        renderCount = page.getRenderCount();\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.component.IRequestablePage getPageInstance() {\n        if (pageInstance == null) {\n            resolvePageInstance(pageId, pageClass, pageParameters, renderCount);\n            if (pageInstance == null) {\n                throw new org.apache.wicket.protocol.http.PageExpiredException((\"Page with id '\" + pageId) + \"' has expired.\");\n            }\n        }\n        return pageInstance;\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.mapper.parameter.PageParameters getPageParameters() {\n        if (pageParameters != null) {\n            return pageParameters;\n        } else if (isNewPageInstance() == false) {\n            return pageInstance.getPageParameters();\n        } else {\n            return null;\n        }\n    }\n\n    @java.lang.Override\n    public boolean isNewPageInstance() {\n        boolean isNew = pageInstance == null;\n        if (isNew && (pageId != null)) {\n            org.apache.wicket.request.component.IRequestablePage storedPageInstance = getStoredPage(pageId);\n            if (storedPageInstance != null) {\n                pageInstance = storedPageInstance;\n                isNew = false;\n            }\n        }\n        return isNew;\n    }\n\n    @java.lang.Override\n    public java.lang.Class<? extends org.apache.wicket.request.component.IRequestablePage> getPageClass() {\n        if (pageClass != null) {\n            return pageClass;\n        } else {\n            return getPageInstance().getClass();\n        }\n    }\n\n    protected org.apache.wicket.core.request.mapper.IPageSource getPageSource() {\n        if (pageSource != null) {\n            return pageSource;\n        }\n        if (org.apache.wicket.Application.exists()) {\n            return org.apache.wicket.Application.get().getMapperContext();\n        } else {\n            throw new java.lang.IllegalStateException(\"No application is bound to current thread. Call setPageSource() to manually assign pageSource to this provider.\");\n        }\n    }\n\n    private void resolvePageInstance(java.lang.Integer pageId, java.lang.Class<? extends org.apache.wicket.request.component.IRequestablePage> pageClass, org.apache.wicket.request.mapper.parameter.PageParameters pageParameters, java.lang.Integer renderCount) {\n        org.apache.wicket.request.component.IRequestablePage page = null;\n        boolean freshCreated = false;\n        if (pageId != null) {\n            page = getStoredPage(pageId);\n        }\n        if (page == null) {\n            if (pageClass != null) {\n                page = getPageSource().newPageInstance(pageClass, pageParameters);\n                freshCreated = true;\n            }\n        }\n        if ((page != null) && (!freshCreated)) {\n            if ((renderCount != null) && (page.getRenderCount() != renderCount)) {\n                throw new org.apache.wicket.core.request.mapper.StalePageException(page);\n            }\n        }\n        pageInstanceIsFresh = freshCreated;\n        pageInstance = page;\n    }\n\n    private org.apache.wicket.request.component.IRequestablePage getStoredPage(final int pageId) {\n        org.apache.wicket.request.component.IRequestablePage storedPageInstance = getPageSource().getPageInstance(pageId);\n        if (storedPageInstance != null) {\n            if (((pageClass == null) || pageClass.equals(storedPageInstance.getClass())) && (isPageParametersEmpty(pageParameters) || arePageParametersSame(storedPageInstance))) {\n                pageInstance = storedPageInstance;\n                pageInstanceIsFresh = false;\n                if ((renderCount != null) && (pageInstance.getRenderCount() != renderCount)) {\n                    throw new org.apache.wicket.core.request.mapper.StalePageException(pageInstance);\n                }\n            } else {\n                storedPageInstance = null;\n            }\n        }\n        return storedPageInstance;\n    }\n\n    @java.lang.Override\n    public void detach() {\n        if (pageInstance != null) {\n            pageInstance.detach();\n        }\n    }\n\n    public void setPageSource(org.apache.wicket.core.request.mapper.IPageSource pageSource) {\n        this.pageSource = pageSource;\n    }\n\n    private void setPageClass(java.lang.Class<? extends org.apache.wicket.request.component.IRequestablePage> pageClass) {\n        org.apache.wicket.util.lang.Args.notNull(pageClass, \"pageClass\");\n        this.pageClass = pageClass;\n    }\n\n    protected void setPageParameters(org.apache.wicket.request.mapper.parameter.PageParameters pageParameters) {\n        this.pageParameters = pageParameters;\n    }\n\n    @java.lang.Override\n    public java.lang.Integer getPageId() {\n        return pageId;\n    }\n\n    @java.lang.Override\n    public java.lang.Integer getRenderCount() {\n        return renderCount;\n    }\n\n    @java.lang.Override\n    public final boolean hasPageInstance() {\n        if ((pageInstance == null) && (pageId != null)) {\n            getStoredPage(pageId);\n        }\n        return pageInstance != null;\n    }\n\n    @java.lang.Override\n    public final boolean isPageInstanceFresh() {\n        if (!hasPageInstance()) {\n            throw new java.lang.IllegalStateException(\"Page instance not yet resolved\");\n        }\n        return pageInstanceIsFresh;\n    }\n\n    private boolean arePageParametersSame(org.apache.wicket.request.component.IRequestablePage storedPageInstance) {\n        org.apache.wicket.request.mapper.parameter.PageParameters currentCopy = new org.apache.wicket.request.mapper.parameter.PageParameters(pageParameters);\n        org.apache.wicket.request.mapper.parameter.PageParameters storedCopy = new org.apache.wicket.request.mapper.parameter.PageParameters(storedPageInstance.getPageParameters());\n        return currentCopy.equals(storedCopy);\n    }\n\n    private boolean isPageParametersEmpty(org.apache.wicket.request.mapper.parameter.PageParameters parameters) {\n        return (parameters == null) || parameters.isEmpty();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "((pageClass == null) || pageClass.equals(storedPageInstance.getClass())) && (isPageParametersEmpty(pageParameters) || arePageParametersSame(storedPageInstance))",
            "src_parent": "if (((pageClass == null) || pageClass.equals(storedPageInstance.getClass())) && (isPageParametersEmpty(pageParameters) || arePageParametersSame(storedPageInstance))) {\n    pageInstance = storedPageInstance;\n    pageInstanceIsFresh = false;\n    if ((renderCount != null) && (pageInstance.getRenderCount() != renderCount)) {\n        throw new org.apache.wicket.core.request.mapper.StalePageException(pageInstance);\n    }\n} else {\n    storedPageInstance = null;\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "((pageClass == null) || pageClass.equals(storedPageInstance.getClass()))",
            "dst_parent": "((pageClass == null) || pageClass.equals(storedPageInstance.getClass())) && (isPageParametersEmpty(pageParameters) || arePageParametersSame(storedPageInstance))",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(pageClass == null) || pageClass.equals(storedPageInstance.getClass())",
            "src_parent": "if ((pageClass == null) || pageClass.equals(storedPageInstance.getClass())) {\n    pageInstance = storedPageInstance;\n    pageInstanceIsFresh = false;\n    if ((renderCount != null) && (pageInstance.getRenderCount() != renderCount)) {\n        throw new org.apache.wicket.core.request.mapper.StalePageException(pageInstance);\n    }\n} else {\n    storedPageInstance = null;\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        }
      ],
      "file_name": "PageProvider"
    }
  ],
  "id": "wicket_54c86ebb"
}