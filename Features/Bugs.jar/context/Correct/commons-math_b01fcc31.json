{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalizeConstraints(java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> constraints) {\n    java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>();\n    for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {\n        normalized.add(normalize(constraint));\n    }\n    return normalized;\n}",
            "dst_parent": "class SimplexTableau implements java.io.Serializable {\n    private static final long serialVersionUID = -1369660067587938365L;\n\n    private final org.apache.commons.math.optimization.linear.LinearObjectiveFunction f;\n\n    private final java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> constraints;\n\n    private final boolean restrictToNonNegative;\n\n    protected transient org.apache.commons.math.linear.RealMatrix tableau;\n\n    protected final int numDecisionVariables;\n\n    protected final int numSlackVariables;\n\n    protected int numArtificialVariables;\n\n    protected final double epsilon;\n\n    SimplexTableau(final org.apache.commons.math.optimization.linear.LinearObjectiveFunction f, final java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> constraints, final org.apache.commons.math.optimization.GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {\n        this.f = f;\n        this.constraints = normalizeConstraints(constraints);\n        this.restrictToNonNegative = restrictToNonNegative;\n        this.epsilon = epsilon;\n        this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1);\n        this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);\n        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);\n        this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(createTableau(goalType == org.apache.commons.math.optimization.GoalType.MAXIMIZE));\n        initialize();\n    }\n\n    protected double[][] createTableau(final boolean maximize) {\n        int width = (((numDecisionVariables + numSlackVariables) + numArtificialVariables) + getNumObjectiveFunctions()) + 1;\n        int height = constraints.size() + getNumObjectiveFunctions();\n        double[][] matrix = new double[height][width];\n        if (getNumObjectiveFunctions() == 2) {\n            matrix[0][0] = -1;\n        }\n        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;\n        matrix[zIndex][zIndex] = (maximize) ? 1 : -1;\n        org.apache.commons.math.linear.RealVector objectiveCoefficients = (maximize) ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();\n        copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());\n        matrix[zIndex][width - 1] = (maximize) ? f.getConstantTerm() : (-1) * f.getConstantTerm();\n        if (!restrictToNonNegative) {\n            matrix[zIndex][getSlackVariableOffset() - 1] = org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(objectiveCoefficients);\n        }\n        int slackVar = 0;\n        int artificialVar = 0;\n        for (int i = 0; i < constraints.size(); i++) {\n            org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i);\n            int row = getNumObjectiveFunctions() + i;\n            copyArray(constraint.getCoefficients().getData(), matrix[row], 1);\n            if (!restrictToNonNegative) {\n                matrix[row][getSlackVariableOffset() - 1] = org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(constraint.getCoefficients());\n            }\n            matrix[row][width - 1] = constraint.getValue();\n            if (constraint.getRelationship() == Relationship.LEQ) {\n                matrix[row][getSlackVariableOffset() + (slackVar++)] = 1;\n            } else if (constraint.getRelationship() == Relationship.GEQ) {\n                matrix[row][getSlackVariableOffset() + (slackVar++)] = -1;\n            }\n            if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {\n                matrix[0][getArtificialVariableOffset() + artificialVar] = 1;\n                matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;\n            }\n        }\n        return matrix;\n    }\n\n    public int getNumVariables() {\n        return f.getCoefficients().getDimension();\n    }\n\n    public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalizeConstraints(java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> constraints) {\n        java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>();\n        for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {\n            normalized.add(normalize(constraint));\n        }\n        return normalized;\n    }\n\n    private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) {\n        if (constraint.getValue() < 0) {\n            return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());\n        }\n        return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());\n    }\n\n    protected final int getNumObjectiveFunctions() {\n        return this.numArtificialVariables > 0 ? 2 : 1;\n    }\n\n    private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) {\n        int count = 0;\n        for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {\n            if (constraint.getRelationship() == relationship) {\n                ++count;\n            }\n        }\n        return count;\n    }\n\n    private void initialize() {\n        for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) {\n            int row = getBasicRow(getArtificialVariableOffset() + artificialVar);\n            subtractRow(0, row, 1.0);\n        }\n    }\n\n    protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) {\n        double sum = 0;\n        for (double coefficient : coefficients.getData()) {\n            sum -= coefficient;\n        }\n        return sum;\n    }\n\n    private java.lang.Integer getBasicRow(final int col) {\n        return getBasicRow(col, true);\n    }\n\n    private java.lang.Integer getBasicRowForSolution(final int col) {\n        return getBasicRow(col, false);\n    }\n\n    private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {\n        java.lang.Integer row = null;\n        int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0;\n        for (int i = start; i < getHeight(); i++) {\n            if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n                row = i;\n            } else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                return null;\n            }\n        }\n        return row;\n    }\n\n    protected void discardArtificialVariables() {\n        if (numArtificialVariables == 0) {\n            return;\n        }\n        int width = (getWidth() - numArtificialVariables) - 1;\n        int height = getHeight() - 1;\n        double[][] matrix = new double[height][width];\n        for (int i = 0; i < height; i++) {\n            for (int j = 0; j < (width - 1); j++) {\n                matrix[i][j] = getEntry(i + 1, j + 1);\n            }\n            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());\n        }\n        this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix);\n        this.numArtificialVariables = 0;\n    }\n\n    private void copyArray(final double[] src, final double[] dest, final int destPos) {\n        java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);\n    }\n\n    protected org.apache.commons.math.optimization.RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());\n        double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n        java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>();\n        for (int i = 0; i < coefficients.length; i++) {\n            java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);\n            if (basicRows.contains(basicRow)) {\n                coefficients[i] = 0;\n            } else {\n                basicRows.add(basicRow);\n                coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);\n            }\n        }\n        return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));\n    }\n\n    protected void divideRow(final int dividendRow, final double divisor) {\n        for (int j = 0; j < getWidth(); j++) {\n            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);\n        }\n    }\n\n    protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) {\n        for (int j = 0; j < getWidth(); j++) {\n            tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));\n        }\n    }\n\n    protected final int getWidth() {\n        return tableau.getColumnDimension();\n    }\n\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    protected final double getEntry(final int row, final int column) {\n        return tableau.getEntry(row, column);\n    }\n\n    protected final void setEntry(final int row, final int column, final double value) {\n        tableau.setEntry(row, column, value);\n    }\n\n    protected final int getSlackVariableOffset() {\n        return getNumObjectiveFunctions() + numDecisionVariables;\n    }\n\n    protected final int getArtificialVariableOffset() {\n        return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;\n    }\n\n    protected final int getRhsOffset() {\n        return getWidth() - 1;\n    }\n\n    protected final int getNegativeDecisionVariableOffset() {\n        return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();\n    }\n\n    protected final int getNumDecisionVariables() {\n        return numDecisionVariables;\n    }\n\n    protected final int getOriginalNumDecisionVariables() {\n        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;\n    }\n\n    protected final int getNumSlackVariables() {\n        return numSlackVariables;\n    }\n\n    protected final int getNumArtificialVariables() {\n        return numArtificialVariables;\n    }\n\n    protected final double[][] getData() {\n        return tableau.getData();\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (other == null) {\n            return false;\n        }\n        try {\n            org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other));\n            return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);\n        } catch (java.lang.ClassCastException ex) {\n            return false;\n        }\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();\n    }\n\n    private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException {\n        oos.defaultWriteObject();\n        org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);\n    }\n\n    private void readObject(java.io.ObjectInputStream ois) throws java.io.IOException, java.lang.ClassNotFoundException {\n        ois.defaultReadObject();\n        org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois);\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() {\n    java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>();\n    for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {\n        normalized.add(normalize(constraint));\n    }\n    return normalized;\n}",
            "src_parent": "class SimplexTableau implements java.io.Serializable {\n    private static final long serialVersionUID = -1369660067587938365L;\n\n    private final org.apache.commons.math.optimization.linear.LinearObjectiveFunction f;\n\n    private final java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> constraints;\n\n    private final boolean restrictToNonNegative;\n\n    protected transient org.apache.commons.math.linear.RealMatrix tableau;\n\n    protected final int numDecisionVariables;\n\n    protected final int numSlackVariables;\n\n    protected int numArtificialVariables;\n\n    protected final double epsilon;\n\n    SimplexTableau(final org.apache.commons.math.optimization.linear.LinearObjectiveFunction f, final java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> constraints, final org.apache.commons.math.optimization.GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {\n        this.f = f;\n        this.constraints = constraints;\n        this.restrictToNonNegative = restrictToNonNegative;\n        this.epsilon = epsilon;\n        this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1);\n        this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);\n        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);\n        this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(createTableau(goalType == org.apache.commons.math.optimization.GoalType.MAXIMIZE));\n        initialize();\n    }\n\n    protected double[][] createTableau(final boolean maximize) {\n        java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> constraints = getNormalizedConstraints();\n        int width = (((numDecisionVariables + numSlackVariables) + numArtificialVariables) + getNumObjectiveFunctions()) + 1;\n        int height = constraints.size() + getNumObjectiveFunctions();\n        double[][] matrix = new double[height][width];\n        if (getNumObjectiveFunctions() == 2) {\n            matrix[0][0] = -1;\n        }\n        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;\n        matrix[zIndex][zIndex] = (maximize) ? 1 : -1;\n        org.apache.commons.math.linear.RealVector objectiveCoefficients = (maximize) ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();\n        copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());\n        matrix[zIndex][width - 1] = (maximize) ? f.getConstantTerm() : (-1) * f.getConstantTerm();\n        if (!restrictToNonNegative) {\n            matrix[zIndex][getSlackVariableOffset() - 1] = org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(objectiveCoefficients);\n        }\n        int slackVar = 0;\n        int artificialVar = 0;\n        for (int i = 0; i < constraints.size(); i++) {\n            org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i);\n            int row = getNumObjectiveFunctions() + i;\n            copyArray(constraint.getCoefficients().getData(), matrix[row], 1);\n            if (!restrictToNonNegative) {\n                matrix[row][getSlackVariableOffset() - 1] = org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(constraint.getCoefficients());\n            }\n            matrix[row][width - 1] = constraint.getValue();\n            if (constraint.getRelationship() == Relationship.LEQ) {\n                matrix[row][getSlackVariableOffset() + (slackVar++)] = 1;\n            } else if (constraint.getRelationship() == Relationship.GEQ) {\n                matrix[row][getSlackVariableOffset() + (slackVar++)] = -1;\n            }\n            if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {\n                matrix[0][getArtificialVariableOffset() + artificialVar] = 1;\n                matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;\n            }\n        }\n        return matrix;\n    }\n\n    public int getNumVariables() {\n        return f.getCoefficients().getDimension();\n    }\n\n    public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() {\n        java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>();\n        for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {\n            normalized.add(normalize(constraint));\n        }\n        return normalized;\n    }\n\n    private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) {\n        if (constraint.getValue() < 0) {\n            return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());\n        }\n        return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());\n    }\n\n    protected final int getNumObjectiveFunctions() {\n        return this.numArtificialVariables > 0 ? 2 : 1;\n    }\n\n    private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) {\n        int count = 0;\n        for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {\n            if (constraint.getRelationship() == relationship) {\n                ++count;\n            }\n        }\n        return count;\n    }\n\n    private void initialize() {\n        for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) {\n            int row = getBasicRow(getArtificialVariableOffset() + artificialVar);\n            subtractRow(0, row, 1.0);\n        }\n    }\n\n    protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) {\n        double sum = 0;\n        for (double coefficient : coefficients.getData()) {\n            sum -= coefficient;\n        }\n        return sum;\n    }\n\n    private java.lang.Integer getBasicRow(final int col) {\n        return getBasicRow(col, true);\n    }\n\n    private java.lang.Integer getBasicRowForSolution(final int col) {\n        return getBasicRow(col, false);\n    }\n\n    private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {\n        java.lang.Integer row = null;\n        int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0;\n        for (int i = start; i < getHeight(); i++) {\n            if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n                row = i;\n            } else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                return null;\n            }\n        }\n        return row;\n    }\n\n    protected void discardArtificialVariables() {\n        if (numArtificialVariables == 0) {\n            return;\n        }\n        int width = (getWidth() - numArtificialVariables) - 1;\n        int height = getHeight() - 1;\n        double[][] matrix = new double[height][width];\n        for (int i = 0; i < height; i++) {\n            for (int j = 0; j < (width - 1); j++) {\n                matrix[i][j] = getEntry(i + 1, j + 1);\n            }\n            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());\n        }\n        this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix);\n        this.numArtificialVariables = 0;\n    }\n\n    private void copyArray(final double[] src, final double[] dest, final int destPos) {\n        java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);\n    }\n\n    protected org.apache.commons.math.optimization.RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());\n        double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n        java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>();\n        for (int i = 0; i < coefficients.length; i++) {\n            java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);\n            if (basicRows.contains(basicRow)) {\n                coefficients[i] = 0;\n            } else {\n                basicRows.add(basicRow);\n                coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);\n            }\n        }\n        return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));\n    }\n\n    protected void divideRow(final int dividendRow, final double divisor) {\n        for (int j = 0; j < getWidth(); j++) {\n            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);\n        }\n    }\n\n    protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) {\n        for (int j = 0; j < getWidth(); j++) {\n            tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));\n        }\n    }\n\n    protected final int getWidth() {\n        return tableau.getColumnDimension();\n    }\n\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    protected final double getEntry(final int row, final int column) {\n        return tableau.getEntry(row, column);\n    }\n\n    protected final void setEntry(final int row, final int column, final double value) {\n        tableau.setEntry(row, column, value);\n    }\n\n    protected final int getSlackVariableOffset() {\n        return getNumObjectiveFunctions() + numDecisionVariables;\n    }\n\n    protected final int getArtificialVariableOffset() {\n        return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;\n    }\n\n    protected final int getRhsOffset() {\n        return getWidth() - 1;\n    }\n\n    protected final int getNegativeDecisionVariableOffset() {\n        return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();\n    }\n\n    protected final int getNumDecisionVariables() {\n        return numDecisionVariables;\n    }\n\n    protected final int getOriginalNumDecisionVariables() {\n        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;\n    }\n\n    protected final int getNumSlackVariables() {\n        return numSlackVariables;\n    }\n\n    protected final int getNumArtificialVariables() {\n        return numArtificialVariables;\n    }\n\n    protected final double[][] getData() {\n        return tableau.getData();\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (other == null) {\n            return false;\n        }\n        try {\n            org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other));\n            return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);\n        } catch (java.lang.ClassCastException ex) {\n            return false;\n        }\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();\n    }\n\n    private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException {\n        oos.defaultWriteObject();\n        org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);\n    }\n\n    private void readObject(java.io.ObjectInputStream ois) throws java.io.IOException, java.lang.ClassNotFoundException {\n        ois.defaultReadObject();\n        org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Field",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint>",
            "dst_parent": "private final java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> constraints;",
            "dst_parent_type": "Field",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint>",
            "src_parent": "private final java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> constraints;",
            "src_parent_type": "Field",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "constraints",
            "src_parent": "this.constraints = constraints",
            "src_parent_type": "Assignment",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> constraints = getNormalizedConstraints()",
            "src_parent": "{\n    java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> constraints = getNormalizedConstraints();\n    int width = (((numDecisionVariables + numSlackVariables) + numArtificialVariables) + getNumObjectiveFunctions()) + 1;\n    int height = constraints.size() + getNumObjectiveFunctions();\n    double[][] matrix = new double[height][width];\n    if (getNumObjectiveFunctions() == 2) {\n        matrix[0][0] = -1;\n    }\n    int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;\n    matrix[zIndex][zIndex] = (maximize) ? 1 : -1;\n    org.apache.commons.math.linear.RealVector objectiveCoefficients = (maximize) ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();\n    copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());\n    matrix[zIndex][width - 1] = (maximize) ? f.getConstantTerm() : (-1) * f.getConstantTerm();\n    if (!restrictToNonNegative) {\n        matrix[zIndex][getSlackVariableOffset() - 1] = org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(objectiveCoefficients);\n    }\n    int slackVar = 0;\n    int artificialVar = 0;\n    for (int i = 0; i < constraints.size(); i++) {\n        org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i);\n        int row = getNumObjectiveFunctions() + i;\n        copyArray(constraint.getCoefficients().getData(), matrix[row], 1);\n        if (!restrictToNonNegative) {\n            matrix[row][getSlackVariableOffset() - 1] = org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(constraint.getCoefficients());\n        }\n        matrix[row][width - 1] = constraint.getValue();\n        if (constraint.getRelationship() == Relationship.LEQ) {\n            matrix[row][getSlackVariableOffset() + (slackVar++)] = 1;\n        } else if (constraint.getRelationship() == Relationship.GEQ) {\n            matrix[row][getSlackVariableOffset() + (slackVar++)] = -1;\n        }\n        if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {\n            matrix[0][getArtificialVariableOffset() + artificialVar] = 1;\n            matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;\n        }\n    }\n    return matrix;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "constraints",
            "src_parent": "constraints.size()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "constraints",
            "src_parent": "constraints.size()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "constraints",
            "src_parent": "constraints.get(i)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "normalizeConstraints(constraints)",
            "src_parent": "this.constraints = normalizeConstraints(constraints)",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "constraints",
            "src_parent": "for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {\n    normalized.add(normalize(constraint));\n}",
            "src_parent_type": "ForEach",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "constraints",
            "src_parent": "constraints.size()",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "constraints",
            "src_parent": "constraints.size()",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "constraints",
            "dst_parent": "constraints.get(i)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "constraints",
            "src_parent": "for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {\n    normalized.add(normalize(constraint));\n}",
            "src_parent_type": "ForEach",
            "src_type": "FieldRead"
          }
        }
      ],
      "file_name": "SimplexTableau"
    }
  ],
  "id": "commons-math_b01fcc31"
}