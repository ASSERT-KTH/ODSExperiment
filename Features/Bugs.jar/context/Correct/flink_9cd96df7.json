{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Invocation",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Literal",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "\"^((java\\\\.lang\\\\.)?(String|Integer|Byte|Short|Character|Double|Float|Long|Boolean|Void))(,|>|$)\"",
            "dst_parent": "java.util.regex.Pattern.compile(\"^((java\\\\.lang\\\\.)?(String|Integer|Byte|Short|Character|Double|Float|Long|Boolean|Void))(,|>|$)\")",
            "dst_parent_type": "Invocation",
            "dst_type": "Literal",
            "operator": "UPD",
            "src": "\"^((java\\\\.lang\\\\.)?(String|Integer|Byte|Short|Character|Double|Float|Long|Boolean))(,|>|$)\"",
            "src_parent": "java.util.regex.Pattern.compile(\"^((java\\\\.lang\\\\.)?(String|Integer|Byte|Short|Character|Double|Float|Long|Boolean))(,|>|$)\")",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Invocation",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Literal",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "\"^(int|byte|short|char|double|float|long|boolean|void)(,|>|$)\"",
            "dst_parent": "java.util.regex.Pattern.compile(\"^(int|byte|short|char|double|float|long|boolean|void)(,|>|$)\")",
            "dst_parent_type": "Invocation",
            "dst_type": "Literal",
            "operator": "UPD",
            "src": "\"^(int|byte|short|char|double|float|long|boolean)(,|>|$)\"",
            "src_parent": "java.util.regex.Pattern.compile(\"^(int|byte|short|char|double|float|long|boolean)(,|>|$)\")",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static final java.util.regex.Pattern basicTypeDatePattern = java.util.regex.Pattern.compile(\"^((java\\\\.util\\\\.)?Date)(,|>|$)\");",
            "src_parent": "public class TypeInfoParser {\n    private static final java.lang.String TUPLE_PACKAGE = \"org.apache.flink.api.java.tuple\";\n\n    private static final java.lang.String VALUE_PACKAGE = \"org.apache.flink.types\";\n\n    private static final java.lang.String WRITABLE_PACKAGE = \"org.apache.hadoop.io\";\n\n    private static final java.util.regex.Pattern tuplePattern = java.util.regex.Pattern.compile((\"^((\" + org.apache.flink.api.java.typeutils.TypeInfoParser.TUPLE_PACKAGE.replaceAll(\"\\\\.\", \"\\\\\\\\.\")) + \"\\\\.)?Tuple[0-9]+)<\");\n\n    private static final java.util.regex.Pattern writablePattern = java.util.regex.Pattern.compile((\"^((\" + org.apache.flink.api.java.typeutils.TypeInfoParser.WRITABLE_PACKAGE.replaceAll(\"\\\\.\", \"\\\\\\\\.\")) + \"\\\\.)?Writable)<([^\\\\s,>]*)(,|>|$)\");\n\n    private static final java.util.regex.Pattern enumPattern = java.util.regex.Pattern.compile(\"^((java\\\\.lang\\\\.)?Enum)<([^\\\\s,>]*)(,|>|$)\");\n\n    private static final java.util.regex.Pattern basicTypePattern = java.util.regex.Pattern.compile(\"^((java\\\\.lang\\\\.)?(String|Integer|Byte|Short|Character|Double|Float|Long|Boolean|Void))(,|>|$)\");\n\n    private static final java.util.regex.Pattern basicTypeDatePattern = java.util.regex.Pattern.compile(\"^((java\\\\.util\\\\.)?Date)(,|>|$)\");\n\n    private static final java.util.regex.Pattern basicType2Pattern = java.util.regex.Pattern.compile(\"^(int|byte|short|char|double|float|long|boolean|void)(,|>|$)\");\n\n    private static final java.util.regex.Pattern valueTypePattern = java.util.regex.Pattern.compile((\"^((\" + org.apache.flink.api.java.typeutils.TypeInfoParser.VALUE_PACKAGE.replaceAll(\"\\\\.\", \"\\\\\\\\.\")) + \"\\\\.)?(String|Int|Byte|Short|Char|Double|Float|Long|Boolean|List|Map|Null))Value(,|>|$)\");\n\n    private static final java.util.regex.Pattern basicArrayTypePattern = java.util.regex.Pattern.compile(\"^((java\\\\.lang\\\\.)?(String|Integer|Byte|Short|Character|Double|Float|Long|Boolean))\\\\[\\\\](,|>|$)\");\n\n    private static final java.util.regex.Pattern basicArrayType2Pattern = java.util.regex.Pattern.compile(\"^(int|byte|short|char|double|float|long|boolean)\\\\[\\\\](,|>|$)\");\n\n    private static final java.util.regex.Pattern pojoGenericObjectPattern = java.util.regex.Pattern.compile(\"^([^\\\\s,<>]+)(<)?\");\n\n    private static final java.util.regex.Pattern fieldPattern = java.util.regex.Pattern.compile(\"^([^\\\\s,<>]+)=\");\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public static <X> org.apache.flink.api.common.typeinfo.TypeInformation<X> parse(java.lang.String infoString) {\n        try {\n            if (infoString == null) {\n                throw new java.lang.IllegalArgumentException(\"String is null.\");\n            }\n            java.lang.String clearedString = infoString.replaceAll(\"\\\\s\", \"\");\n            if (clearedString.length() == 0) {\n                throw new java.lang.IllegalArgumentException(\"String must not be empty.\");\n            }\n            return ((org.apache.flink.api.common.typeinfo.TypeInformation<X>) (org.apache.flink.api.java.typeutils.TypeInfoParser.parse(new java.lang.StringBuilder(clearedString))));\n        } catch (java.lang.Exception e) {\n            throw new java.lang.IllegalArgumentException(\"String could not be parsed: \" + e.getMessage(), e);\n        }\n    }\n\n    @java.lang.SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    private static org.apache.flink.api.common.typeinfo.TypeInformation<?> parse(java.lang.StringBuilder sb) throws java.lang.ClassNotFoundException {\n        java.lang.String infoString = sb.toString();\n        final java.util.regex.Matcher tupleMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.tuplePattern.matcher(infoString);\n        final java.util.regex.Matcher writableMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.writablePattern.matcher(infoString);\n        final java.util.regex.Matcher enumMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.enumPattern.matcher(infoString);\n        final java.util.regex.Matcher basicTypeMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.basicTypePattern.matcher(infoString);\n        final java.util.regex.Matcher basicTypeDateMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.basicTypeDatePattern.matcher(infoString);\n        final java.util.regex.Matcher basicType2Matcher = org.apache.flink.api.java.typeutils.TypeInfoParser.basicType2Pattern.matcher(infoString);\n        final java.util.regex.Matcher valueTypeMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.valueTypePattern.matcher(infoString);\n        final java.util.regex.Matcher basicArrayTypeMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.basicArrayTypePattern.matcher(infoString);\n        final java.util.regex.Matcher basicArrayType2Matcher = org.apache.flink.api.java.typeutils.TypeInfoParser.basicArrayType2Pattern.matcher(infoString);\n        final java.util.regex.Matcher pojoGenericMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.pojoGenericObjectPattern.matcher(infoString);\n        if (infoString.length() == 0) {\n            return null;\n        }\n        org.apache.flink.api.common.typeinfo.TypeInformation<?> returnType = null;\n        if (tupleMatcher.find()) {\n            java.lang.String className = tupleMatcher.group(1);\n            sb.delete(0, className.length() + 1);\n            int arity = java.lang.Integer.parseInt(className.replaceAll(\"\\\\D\", \"\"));\n            java.lang.Class<?> clazz;\n            if (className.startsWith(org.apache.flink.api.java.typeutils.TypeInfoParser.TUPLE_PACKAGE)) {\n                clazz = java.lang.Class.forName(className);\n            } else {\n                clazz = java.lang.Class.forName((org.apache.flink.api.java.typeutils.TypeInfoParser.TUPLE_PACKAGE + \".\") + className);\n            }\n            org.apache.flink.api.common.typeinfo.TypeInformation<?>[] types = new org.apache.flink.api.common.typeinfo.TypeInformation<?>[arity];\n            for (int i = 0; i < arity; i++) {\n                types[i] = org.apache.flink.api.java.typeutils.TypeInfoParser.parse(sb);\n                if (types[i] == null) {\n                    throw new java.lang.IllegalArgumentException(\"Tuple arity does not match given parameters.\");\n                }\n            }\n            if (sb.charAt(0) != '>') {\n                throw new java.lang.IllegalArgumentException(\"Tuple arity does not match given parameters.\");\n            }\n            sb.deleteCharAt(0);\n            if (sb.length() > 0) {\n                if (((sb.length() >= 2) && (sb.charAt(0) == '[')) && (sb.charAt(1) == ']')) {\n                    java.lang.Class<?> arrayClazz;\n                    if (className.startsWith(org.apache.flink.api.java.typeutils.TypeInfoParser.TUPLE_PACKAGE)) {\n                        arrayClazz = java.lang.Class.forName((\"[L\" + className) + \";\");\n                    } else {\n                        arrayClazz = java.lang.Class.forName((((\"[L\" + org.apache.flink.api.java.typeutils.TypeInfoParser.TUPLE_PACKAGE) + \".\") + className) + \";\");\n                    }\n                    returnType = org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo.getInfoFor(arrayClazz, new org.apache.flink.api.java.typeutils.TupleTypeInfo(clazz, types));\n                } else if ((sb.length() < 1) || (sb.charAt(0) != '[')) {\n                    returnType = new org.apache.flink.api.java.typeutils.TupleTypeInfo(clazz, types);\n                }\n            } else {\n                returnType = new org.apache.flink.api.java.typeutils.TupleTypeInfo(clazz, types);\n            }\n        } else if (writableMatcher.find()) {\n            java.lang.String className = writableMatcher.group(1);\n            java.lang.String fullyQualifiedName = writableMatcher.group(3);\n            sb.delete(0, ((className.length() + 1) + fullyQualifiedName.length()) + 1);\n            java.lang.Class<?> clazz = org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass(fullyQualifiedName);\n            returnType = org.apache.flink.api.java.typeutils.WritableTypeInfo.getWritableTypeInfo(((java.lang.Class) (clazz)));\n        } else if (enumMatcher.find()) {\n            java.lang.String className = enumMatcher.group(1);\n            java.lang.String fullyQualifiedName = enumMatcher.group(3);\n            sb.delete(0, ((className.length() + 1) + fullyQualifiedName.length()) + 1);\n            java.lang.Class<?> clazz = org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass(fullyQualifiedName);\n            returnType = new org.apache.flink.api.java.typeutils.EnumTypeInfo(clazz);\n        } else if (basicTypeMatcher.find()) {\n            java.lang.String className = basicTypeMatcher.group(1);\n            sb.delete(0, className.length());\n            java.lang.Class<?> clazz;\n            if (className.startsWith(\"java.lang\")) {\n                clazz = java.lang.Class.forName(className);\n            } else {\n                clazz = java.lang.Class.forName(\"java.lang.\" + className);\n            }\n            returnType = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(clazz);\n        } else if (basicTypeDateMatcher.find()) {\n            java.lang.String className = basicTypeDateMatcher.group(1);\n            sb.delete(0, className.length());\n            java.lang.Class<?> clazz;\n            if (className.startsWith(\"java.util\")) {\n                clazz = java.lang.Class.forName(className);\n            } else {\n                clazz = java.lang.Class.forName(\"java.util.\" + className);\n            }\n            returnType = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(clazz);\n        } else if (basicType2Matcher.find()) {\n            java.lang.String className = basicType2Matcher.group(1);\n            sb.delete(0, className.length());\n            java.lang.Class<?> clazz = null;\n            if (className.equals(\"int\")) {\n                clazz = java.lang.Integer.class;\n            } else if (className.equals(\"byte\")) {\n                clazz = java.lang.Byte.class;\n            } else if (className.equals(\"short\")) {\n                clazz = java.lang.Short.class;\n            } else if (className.equals(\"char\")) {\n                clazz = java.lang.Character.class;\n            } else if (className.equals(\"double\")) {\n                clazz = java.lang.Double.class;\n            } else if (className.equals(\"float\")) {\n                clazz = java.lang.Float.class;\n            } else if (className.equals(\"long\")) {\n                clazz = java.lang.Long.class;\n            } else if (className.equals(\"boolean\")) {\n                clazz = java.lang.Boolean.class;\n            } else if (className.equals(\"void\")) {\n                clazz = java.lang.Void.class;\n            }\n            returnType = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(clazz);\n        } else if (valueTypeMatcher.find()) {\n            java.lang.String className = valueTypeMatcher.group(1);\n            sb.delete(0, className.length() + 5);\n            java.lang.Class<?> clazz;\n            if (className.startsWith(org.apache.flink.api.java.typeutils.TypeInfoParser.VALUE_PACKAGE)) {\n                clazz = java.lang.Class.forName(className + \"Value\");\n            } else {\n                clazz = java.lang.Class.forName(((org.apache.flink.api.java.typeutils.TypeInfoParser.VALUE_PACKAGE + \".\") + className) + \"Value\");\n            }\n            returnType = org.apache.flink.api.java.typeutils.ValueTypeInfo.getValueTypeInfo(((java.lang.Class<org.apache.flink.types.Value>) (clazz)));\n        } else if (basicArrayTypeMatcher.find()) {\n            java.lang.String className = basicArrayTypeMatcher.group(1);\n            sb.delete(0, className.length() + 2);\n            java.lang.Class<?> clazz;\n            if (className.startsWith(\"java.lang\")) {\n                clazz = java.lang.Class.forName((\"[L\" + className) + \";\");\n            } else {\n                clazz = java.lang.Class.forName((\"[Ljava.lang.\" + className) + \";\");\n            }\n            returnType = org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo.getInfoFor(clazz);\n        } else if (basicArrayType2Matcher.find()) {\n            java.lang.String className = basicArrayType2Matcher.group(1);\n            sb.delete(0, className.length() + 2);\n            java.lang.Class<?> clazz = null;\n            if (className.equals(\"int\")) {\n                clazz = int[].class;\n            } else if (className.equals(\"byte\")) {\n                clazz = byte[].class;\n            } else if (className.equals(\"short\")) {\n                clazz = short[].class;\n            } else if (className.equals(\"char\")) {\n                clazz = char[].class;\n            } else if (className.equals(\"double\")) {\n                clazz = double[].class;\n            } else if (className.equals(\"float\")) {\n                clazz = float[].class;\n            } else if (className.equals(\"long\")) {\n                clazz = long[].class;\n            } else if (className.equals(\"boolean\")) {\n                clazz = boolean[].class;\n            }\n            returnType = org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo.getInfoFor(clazz);\n        } else if (pojoGenericMatcher.find()) {\n            java.lang.String fullyQualifiedName = pojoGenericMatcher.group(1);\n            sb.delete(0, fullyQualifiedName.length());\n            boolean isPojo = pojoGenericMatcher.group(2) != null;\n            if (isPojo) {\n                sb.deleteCharAt(0);\n                java.lang.Class<?> clazz = org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass(fullyQualifiedName);\n                java.util.ArrayList<org.apache.flink.api.java.typeutils.PojoField> fields = new java.util.ArrayList<org.apache.flink.api.java.typeutils.PojoField>();\n                while (sb.charAt(0) != '>') {\n                    final java.util.regex.Matcher fieldMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.fieldPattern.matcher(sb);\n                    if (!fieldMatcher.find()) {\n                        throw new java.lang.IllegalArgumentException(\"Field name missing.\");\n                    }\n                    java.lang.String fieldName = fieldMatcher.group(1);\n                    sb.delete(0, fieldName.length() + 1);\n                    java.lang.reflect.Field field = null;\n                    try {\n                        field = clazz.getDeclaredField(fieldName);\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.IllegalArgumentException((\"Field '\" + fieldName) + \"'could not be accessed.\");\n                    }\n                    fields.add(new org.apache.flink.api.java.typeutils.PojoField(field, org.apache.flink.api.java.typeutils.TypeInfoParser.parse(sb)));\n                } \n                returnType = new org.apache.flink.api.java.typeutils.PojoTypeInfo(clazz, fields);\n            } else if (fullyQualifiedName.endsWith(\"[]\")) {\n                fullyQualifiedName = fullyQualifiedName.substring(0, fullyQualifiedName.length() - 2);\n                returnType = org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo.getInfoFor(org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass((\"[L\" + fullyQualifiedName) + \";\"));\n            } else {\n                returnType = new org.apache.flink.api.java.typeutils.GenericTypeInfo(org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass(fullyQualifiedName));\n            }\n        }\n        if (returnType == null) {\n            throw new java.lang.IllegalArgumentException((\"Error at '\" + infoString) + \"'\");\n        } else {\n            if ((sb.length() > 0) && (sb.charAt(0) == ',')) {\n                sb.deleteCharAt(0);\n            }\n            return returnType;\n        }\n    }\n\n    private static java.lang.Class<?> loadClass(java.lang.String fullyQualifiedName) {\n        try {\n            return java.lang.Class.forName(fullyQualifiedName);\n        } catch (java.lang.ClassNotFoundException e) {\n            throw new java.lang.IllegalArgumentException((\"Class '\" + fullyQualifiedName) + \"' could not be found. Please note that inner classes must be declared static.\");\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "VE: Modifiers_Field",
            "src_parent": "private static final java.util.regex.Pattern basicType2Pattern = java.util.regex.Pattern.compile(\"^(int|byte|short|char|double|float|long|boolean|void)(,|>|$)\");",
            "src_parent_type": "Field",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "final java.util.regex.Matcher basicTypeDateMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.basicTypeDatePattern.matcher(infoString)",
            "src_parent": "{\n    java.lang.String infoString = sb.toString();\n    final java.util.regex.Matcher tupleMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.tuplePattern.matcher(infoString);\n    final java.util.regex.Matcher writableMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.writablePattern.matcher(infoString);\n    final java.util.regex.Matcher enumMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.enumPattern.matcher(infoString);\n    final java.util.regex.Matcher basicTypeMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.basicTypePattern.matcher(infoString);\n    final java.util.regex.Matcher basicTypeDateMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.basicTypeDatePattern.matcher(infoString);\n    final java.util.regex.Matcher basicType2Matcher = org.apache.flink.api.java.typeutils.TypeInfoParser.basicType2Pattern.matcher(infoString);\n    final java.util.regex.Matcher valueTypeMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.valueTypePattern.matcher(infoString);\n    final java.util.regex.Matcher basicArrayTypeMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.basicArrayTypePattern.matcher(infoString);\n    final java.util.regex.Matcher basicArrayType2Matcher = org.apache.flink.api.java.typeutils.TypeInfoParser.basicArrayType2Pattern.matcher(infoString);\n    final java.util.regex.Matcher pojoGenericMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.pojoGenericObjectPattern.matcher(infoString);\n    if (infoString.length() == 0) {\n        return null;\n    }\n    org.apache.flink.api.common.typeinfo.TypeInformation<?> returnType = null;\n    if (tupleMatcher.find()) {\n        java.lang.String className = tupleMatcher.group(1);\n        sb.delete(0, className.length() + 1);\n        int arity = java.lang.Integer.parseInt(className.replaceAll(\"\\\\D\", \"\"));\n        java.lang.Class<?> clazz;\n        if (className.startsWith(org.apache.flink.api.java.typeutils.TypeInfoParser.TUPLE_PACKAGE)) {\n            clazz = java.lang.Class.forName(className);\n        } else {\n            clazz = java.lang.Class.forName((org.apache.flink.api.java.typeutils.TypeInfoParser.TUPLE_PACKAGE + \".\") + className);\n        }\n        org.apache.flink.api.common.typeinfo.TypeInformation<?>[] types = new org.apache.flink.api.common.typeinfo.TypeInformation<?>[arity];\n        for (int i = 0; i < arity; i++) {\n            types[i] = org.apache.flink.api.java.typeutils.TypeInfoParser.parse(sb);\n            if (types[i] == null) {\n                throw new java.lang.IllegalArgumentException(\"Tuple arity does not match given parameters.\");\n            }\n        }\n        if (sb.charAt(0) != '>') {\n            throw new java.lang.IllegalArgumentException(\"Tuple arity does not match given parameters.\");\n        }\n        sb.deleteCharAt(0);\n        if (sb.length() > 0) {\n            if (((sb.length() >= 2) && (sb.charAt(0) == '[')) && (sb.charAt(1) == ']')) {\n                java.lang.Class<?> arrayClazz;\n                if (className.startsWith(org.apache.flink.api.java.typeutils.TypeInfoParser.TUPLE_PACKAGE)) {\n                    arrayClazz = java.lang.Class.forName((\"[L\" + className) + \";\");\n                } else {\n                    arrayClazz = java.lang.Class.forName((((\"[L\" + org.apache.flink.api.java.typeutils.TypeInfoParser.TUPLE_PACKAGE) + \".\") + className) + \";\");\n                }\n                returnType = org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo.getInfoFor(arrayClazz, new org.apache.flink.api.java.typeutils.TupleTypeInfo(clazz, types));\n            } else if ((sb.length() < 1) || (sb.charAt(0) != '[')) {\n                returnType = new org.apache.flink.api.java.typeutils.TupleTypeInfo(clazz, types);\n            }\n        } else {\n            returnType = new org.apache.flink.api.java.typeutils.TupleTypeInfo(clazz, types);\n        }\n    } else if (writableMatcher.find()) {\n        java.lang.String className = writableMatcher.group(1);\n        java.lang.String fullyQualifiedName = writableMatcher.group(3);\n        sb.delete(0, ((className.length() + 1) + fullyQualifiedName.length()) + 1);\n        java.lang.Class<?> clazz = org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass(fullyQualifiedName);\n        returnType = org.apache.flink.api.java.typeutils.WritableTypeInfo.getWritableTypeInfo(((java.lang.Class) (clazz)));\n    } else if (enumMatcher.find()) {\n        java.lang.String className = enumMatcher.group(1);\n        java.lang.String fullyQualifiedName = enumMatcher.group(3);\n        sb.delete(0, ((className.length() + 1) + fullyQualifiedName.length()) + 1);\n        java.lang.Class<?> clazz = org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass(fullyQualifiedName);\n        returnType = new org.apache.flink.api.java.typeutils.EnumTypeInfo(clazz);\n    } else if (basicTypeMatcher.find()) {\n        java.lang.String className = basicTypeMatcher.group(1);\n        sb.delete(0, className.length());\n        java.lang.Class<?> clazz;\n        if (className.startsWith(\"java.lang\")) {\n            clazz = java.lang.Class.forName(className);\n        } else {\n            clazz = java.lang.Class.forName(\"java.lang.\" + className);\n        }\n        returnType = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(clazz);\n    } else if (basicTypeDateMatcher.find()) {\n        java.lang.String className = basicTypeDateMatcher.group(1);\n        sb.delete(0, className.length());\n        java.lang.Class<?> clazz;\n        if (className.startsWith(\"java.util\")) {\n            clazz = java.lang.Class.forName(className);\n        } else {\n            clazz = java.lang.Class.forName(\"java.util.\" + className);\n        }\n        returnType = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(clazz);\n    } else if (basicType2Matcher.find()) {\n        java.lang.String className = basicType2Matcher.group(1);\n        sb.delete(0, className.length());\n        java.lang.Class<?> clazz = null;\n        if (className.equals(\"int\")) {\n            clazz = java.lang.Integer.class;\n        } else if (className.equals(\"byte\")) {\n            clazz = java.lang.Byte.class;\n        } else if (className.equals(\"short\")) {\n            clazz = java.lang.Short.class;\n        } else if (className.equals(\"char\")) {\n            clazz = java.lang.Character.class;\n        } else if (className.equals(\"double\")) {\n            clazz = java.lang.Double.class;\n        } else if (className.equals(\"float\")) {\n            clazz = java.lang.Float.class;\n        } else if (className.equals(\"long\")) {\n            clazz = java.lang.Long.class;\n        } else if (className.equals(\"boolean\")) {\n            clazz = java.lang.Boolean.class;\n        } else if (className.equals(\"void\")) {\n            clazz = java.lang.Void.class;\n        }\n        returnType = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(clazz);\n    } else if (valueTypeMatcher.find()) {\n        java.lang.String className = valueTypeMatcher.group(1);\n        sb.delete(0, className.length() + 5);\n        java.lang.Class<?> clazz;\n        if (className.startsWith(org.apache.flink.api.java.typeutils.TypeInfoParser.VALUE_PACKAGE)) {\n            clazz = java.lang.Class.forName(className + \"Value\");\n        } else {\n            clazz = java.lang.Class.forName(((org.apache.flink.api.java.typeutils.TypeInfoParser.VALUE_PACKAGE + \".\") + className) + \"Value\");\n        }\n        returnType = org.apache.flink.api.java.typeutils.ValueTypeInfo.getValueTypeInfo(((java.lang.Class<org.apache.flink.types.Value>) (clazz)));\n    } else if (basicArrayTypeMatcher.find()) {\n        java.lang.String className = basicArrayTypeMatcher.group(1);\n        sb.delete(0, className.length() + 2);\n        java.lang.Class<?> clazz;\n        if (className.startsWith(\"java.lang\")) {\n            clazz = java.lang.Class.forName((\"[L\" + className) + \";\");\n        } else {\n            clazz = java.lang.Class.forName((\"[Ljava.lang.\" + className) + \";\");\n        }\n        returnType = org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo.getInfoFor(clazz);\n    } else if (basicArrayType2Matcher.find()) {\n        java.lang.String className = basicArrayType2Matcher.group(1);\n        sb.delete(0, className.length() + 2);\n        java.lang.Class<?> clazz = null;\n        if (className.equals(\"int\")) {\n            clazz = int[].class;\n        } else if (className.equals(\"byte\")) {\n            clazz = byte[].class;\n        } else if (className.equals(\"short\")) {\n            clazz = short[].class;\n        } else if (className.equals(\"char\")) {\n            clazz = char[].class;\n        } else if (className.equals(\"double\")) {\n            clazz = double[].class;\n        } else if (className.equals(\"float\")) {\n            clazz = float[].class;\n        } else if (className.equals(\"long\")) {\n            clazz = long[].class;\n        } else if (className.equals(\"boolean\")) {\n            clazz = boolean[].class;\n        }\n        returnType = org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo.getInfoFor(clazz);\n    } else if (pojoGenericMatcher.find()) {\n        java.lang.String fullyQualifiedName = pojoGenericMatcher.group(1);\n        sb.delete(0, fullyQualifiedName.length());\n        boolean isPojo = pojoGenericMatcher.group(2) != null;\n        if (isPojo) {\n            sb.deleteCharAt(0);\n            java.lang.Class<?> clazz = org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass(fullyQualifiedName);\n            java.util.ArrayList<org.apache.flink.api.java.typeutils.PojoField> fields = new java.util.ArrayList<org.apache.flink.api.java.typeutils.PojoField>();\n            while (sb.charAt(0) != '>') {\n                final java.util.regex.Matcher fieldMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.fieldPattern.matcher(sb);\n                if (!fieldMatcher.find()) {\n                    throw new java.lang.IllegalArgumentException(\"Field name missing.\");\n                }\n                java.lang.String fieldName = fieldMatcher.group(1);\n                sb.delete(0, fieldName.length() + 1);\n                java.lang.reflect.Field field = null;\n                try {\n                    field = clazz.getDeclaredField(fieldName);\n                } catch (java.lang.Exception e) {\n                    throw new java.lang.IllegalArgumentException((\"Field '\" + fieldName) + \"'could not be accessed.\");\n                }\n                fields.add(new org.apache.flink.api.java.typeutils.PojoField(field, org.apache.flink.api.java.typeutils.TypeInfoParser.parse(sb)));\n            } \n            returnType = new org.apache.flink.api.java.typeutils.PojoTypeInfo(clazz, fields);\n        } else if (fullyQualifiedName.endsWith(\"[]\")) {\n            fullyQualifiedName = fullyQualifiedName.substring(0, fullyQualifiedName.length() - 2);\n            returnType = org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo.getInfoFor(org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass((\"[L\" + fullyQualifiedName) + \";\"));\n        } else {\n            returnType = new org.apache.flink.api.java.typeutils.GenericTypeInfo(org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass(fullyQualifiedName));\n        }\n    }\n    if (returnType == null) {\n        throw new java.lang.IllegalArgumentException((\"Error at '\" + infoString) + \"'\");\n    } else {\n        if ((sb.length() > 0) && (sb.charAt(0) == ',')) {\n            sb.deleteCharAt(0);\n        }\n        return returnType;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    if (basicTypeDateMatcher.find()) {\n        java.lang.String className = basicTypeDateMatcher.group(1);\n        sb.delete(0, className.length());\n        java.lang.Class<?> clazz;\n        if (className.startsWith(\"java.util\")) {\n            clazz = java.lang.Class.forName(className);\n        } else {\n            clazz = java.lang.Class.forName(\"java.util.\" + className);\n        }\n        returnType = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(clazz);\n    } else if (basicType2Matcher.find()) {\n        java.lang.String className = basicType2Matcher.group(1);\n        sb.delete(0, className.length());\n        java.lang.Class<?> clazz = null;\n        if (className.equals(\"int\")) {\n            clazz = java.lang.Integer.class;\n        } else if (className.equals(\"byte\")) {\n            clazz = java.lang.Byte.class;\n        } else if (className.equals(\"short\")) {\n            clazz = java.lang.Short.class;\n        } else if (className.equals(\"char\")) {\n            clazz = java.lang.Character.class;\n        } else if (className.equals(\"double\")) {\n            clazz = java.lang.Double.class;\n        } else if (className.equals(\"float\")) {\n            clazz = java.lang.Float.class;\n        } else if (className.equals(\"long\")) {\n            clazz = java.lang.Long.class;\n        } else if (className.equals(\"boolean\")) {\n            clazz = java.lang.Boolean.class;\n        } else if (className.equals(\"void\")) {\n            clazz = java.lang.Void.class;\n        }\n        returnType = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(clazz);\n    } else if (valueTypeMatcher.find()) {\n        java.lang.String className = valueTypeMatcher.group(1);\n        sb.delete(0, className.length() + 5);\n        java.lang.Class<?> clazz;\n        if (className.startsWith(org.apache.flink.api.java.typeutils.TypeInfoParser.VALUE_PACKAGE)) {\n            clazz = java.lang.Class.forName(className + \"Value\");\n        } else {\n            clazz = java.lang.Class.forName(((org.apache.flink.api.java.typeutils.TypeInfoParser.VALUE_PACKAGE + \".\") + className) + \"Value\");\n        }\n        returnType = org.apache.flink.api.java.typeutils.ValueTypeInfo.getValueTypeInfo(((java.lang.Class<org.apache.flink.types.Value>) (clazz)));\n    } else if (basicArrayTypeMatcher.find()) {\n        java.lang.String className = basicArrayTypeMatcher.group(1);\n        sb.delete(0, className.length() + 2);\n        java.lang.Class<?> clazz;\n        if (className.startsWith(\"java.lang\")) {\n            clazz = java.lang.Class.forName((\"[L\" + className) + \";\");\n        } else {\n            clazz = java.lang.Class.forName((\"[Ljava.lang.\" + className) + \";\");\n        }\n        returnType = org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo.getInfoFor(clazz);\n    } else if (basicArrayType2Matcher.find()) {\n        java.lang.String className = basicArrayType2Matcher.group(1);\n        sb.delete(0, className.length() + 2);\n        java.lang.Class<?> clazz = null;\n        if (className.equals(\"int\")) {\n            clazz = int[].class;\n        } else if (className.equals(\"byte\")) {\n            clazz = byte[].class;\n        } else if (className.equals(\"short\")) {\n            clazz = short[].class;\n        } else if (className.equals(\"char\")) {\n            clazz = char[].class;\n        } else if (className.equals(\"double\")) {\n            clazz = double[].class;\n        } else if (className.equals(\"float\")) {\n            clazz = float[].class;\n        } else if (className.equals(\"long\")) {\n            clazz = long[].class;\n        } else if (className.equals(\"boolean\")) {\n            clazz = boolean[].class;\n        }\n        returnType = org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo.getInfoFor(clazz);\n    } else if (pojoGenericMatcher.find()) {\n        java.lang.String fullyQualifiedName = pojoGenericMatcher.group(1);\n        sb.delete(0, fullyQualifiedName.length());\n        boolean isPojo = pojoGenericMatcher.group(2) != null;\n        if (isPojo) {\n            sb.deleteCharAt(0);\n            java.lang.Class<?> clazz = org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass(fullyQualifiedName);\n            java.util.ArrayList<org.apache.flink.api.java.typeutils.PojoField> fields = new java.util.ArrayList<org.apache.flink.api.java.typeutils.PojoField>();\n            while (sb.charAt(0) != '>') {\n                final java.util.regex.Matcher fieldMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.fieldPattern.matcher(sb);\n                if (!fieldMatcher.find()) {\n                    throw new java.lang.IllegalArgumentException(\"Field name missing.\");\n                }\n                java.lang.String fieldName = fieldMatcher.group(1);\n                sb.delete(0, fieldName.length() + 1);\n                java.lang.reflect.Field field = null;\n                try {\n                    field = clazz.getDeclaredField(fieldName);\n                } catch (java.lang.Exception e) {\n                    throw new java.lang.IllegalArgumentException((\"Field '\" + fieldName) + \"'could not be accessed.\");\n                }\n                fields.add(new org.apache.flink.api.java.typeutils.PojoField(field, org.apache.flink.api.java.typeutils.TypeInfoParser.parse(sb)));\n            } \n            returnType = new org.apache.flink.api.java.typeutils.PojoTypeInfo(clazz, fields);\n        } else if (fullyQualifiedName.endsWith(\"[]\")) {\n            fullyQualifiedName = fullyQualifiedName.substring(0, fullyQualifiedName.length() - 2);\n            returnType = org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo.getInfoFor(org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass((\"[L\" + fullyQualifiedName) + \";\"));\n        } else {\n            returnType = new org.apache.flink.api.java.typeutils.GenericTypeInfo(org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass(fullyQualifiedName));\n        }\n    }\n}",
            "src_parent": "if (basicTypeMatcher.find()) {\n    java.lang.String className = basicTypeMatcher.group(1);\n    sb.delete(0, className.length());\n    java.lang.Class<?> clazz;\n    if (className.startsWith(\"java.lang\")) {\n        clazz = java.lang.Class.forName(className);\n    } else {\n        clazz = java.lang.Class.forName(\"java.lang.\" + className);\n    }\n    returnType = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(clazz);\n} else if (basicTypeDateMatcher.find()) {\n    java.lang.String className = basicTypeDateMatcher.group(1);\n    sb.delete(0, className.length());\n    java.lang.Class<?> clazz;\n    if (className.startsWith(\"java.util\")) {\n        clazz = java.lang.Class.forName(className);\n    } else {\n        clazz = java.lang.Class.forName(\"java.util.\" + className);\n    }\n    returnType = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(clazz);\n} else if (basicType2Matcher.find()) {\n    java.lang.String className = basicType2Matcher.group(1);\n    sb.delete(0, className.length());\n    java.lang.Class<?> clazz = null;\n    if (className.equals(\"int\")) {\n        clazz = java.lang.Integer.class;\n    } else if (className.equals(\"byte\")) {\n        clazz = java.lang.Byte.class;\n    } else if (className.equals(\"short\")) {\n        clazz = java.lang.Short.class;\n    } else if (className.equals(\"char\")) {\n        clazz = java.lang.Character.class;\n    } else if (className.equals(\"double\")) {\n        clazz = java.lang.Double.class;\n    } else if (className.equals(\"float\")) {\n        clazz = java.lang.Float.class;\n    } else if (className.equals(\"long\")) {\n        clazz = java.lang.Long.class;\n    } else if (className.equals(\"boolean\")) {\n        clazz = java.lang.Boolean.class;\n    } else if (className.equals(\"void\")) {\n        clazz = java.lang.Void.class;\n    }\n    returnType = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(clazz);\n} else if (valueTypeMatcher.find()) {\n    java.lang.String className = valueTypeMatcher.group(1);\n    sb.delete(0, className.length() + 5);\n    java.lang.Class<?> clazz;\n    if (className.startsWith(org.apache.flink.api.java.typeutils.TypeInfoParser.VALUE_PACKAGE)) {\n        clazz = java.lang.Class.forName(className + \"Value\");\n    } else {\n        clazz = java.lang.Class.forName(((org.apache.flink.api.java.typeutils.TypeInfoParser.VALUE_PACKAGE + \".\") + className) + \"Value\");\n    }\n    returnType = org.apache.flink.api.java.typeutils.ValueTypeInfo.getValueTypeInfo(((java.lang.Class<org.apache.flink.types.Value>) (clazz)));\n} else if (basicArrayTypeMatcher.find()) {\n    java.lang.String className = basicArrayTypeMatcher.group(1);\n    sb.delete(0, className.length() + 2);\n    java.lang.Class<?> clazz;\n    if (className.startsWith(\"java.lang\")) {\n        clazz = java.lang.Class.forName((\"[L\" + className) + \";\");\n    } else {\n        clazz = java.lang.Class.forName((\"[Ljava.lang.\" + className) + \";\");\n    }\n    returnType = org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo.getInfoFor(clazz);\n} else if (basicArrayType2Matcher.find()) {\n    java.lang.String className = basicArrayType2Matcher.group(1);\n    sb.delete(0, className.length() + 2);\n    java.lang.Class<?> clazz = null;\n    if (className.equals(\"int\")) {\n        clazz = int[].class;\n    } else if (className.equals(\"byte\")) {\n        clazz = byte[].class;\n    } else if (className.equals(\"short\")) {\n        clazz = short[].class;\n    } else if (className.equals(\"char\")) {\n        clazz = char[].class;\n    } else if (className.equals(\"double\")) {\n        clazz = double[].class;\n    } else if (className.equals(\"float\")) {\n        clazz = float[].class;\n    } else if (className.equals(\"long\")) {\n        clazz = long[].class;\n    } else if (className.equals(\"boolean\")) {\n        clazz = boolean[].class;\n    }\n    returnType = org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo.getInfoFor(clazz);\n} else if (pojoGenericMatcher.find()) {\n    java.lang.String fullyQualifiedName = pojoGenericMatcher.group(1);\n    sb.delete(0, fullyQualifiedName.length());\n    boolean isPojo = pojoGenericMatcher.group(2) != null;\n    if (isPojo) {\n        sb.deleteCharAt(0);\n        java.lang.Class<?> clazz = org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass(fullyQualifiedName);\n        java.util.ArrayList<org.apache.flink.api.java.typeutils.PojoField> fields = new java.util.ArrayList<org.apache.flink.api.java.typeutils.PojoField>();\n        while (sb.charAt(0) != '>') {\n            final java.util.regex.Matcher fieldMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.fieldPattern.matcher(sb);\n            if (!fieldMatcher.find()) {\n                throw new java.lang.IllegalArgumentException(\"Field name missing.\");\n            }\n            java.lang.String fieldName = fieldMatcher.group(1);\n            sb.delete(0, fieldName.length() + 1);\n            java.lang.reflect.Field field = null;\n            try {\n                field = clazz.getDeclaredField(fieldName);\n            } catch (java.lang.Exception e) {\n                throw new java.lang.IllegalArgumentException((\"Field '\" + fieldName) + \"'could not be accessed.\");\n            }\n            fields.add(new org.apache.flink.api.java.typeutils.PojoField(field, org.apache.flink.api.java.typeutils.TypeInfoParser.parse(sb)));\n        } \n        returnType = new org.apache.flink.api.java.typeutils.PojoTypeInfo(clazz, fields);\n    } else if (fullyQualifiedName.endsWith(\"[]\")) {\n        fullyQualifiedName = fullyQualifiedName.substring(0, fullyQualifiedName.length() - 2);\n        returnType = org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo.getInfoFor(org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass((\"[L\" + fullyQualifiedName) + \";\"));\n    } else {\n        returnType = new org.apache.flink.api.java.typeutils.GenericTypeInfo(org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass(fullyQualifiedName));\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    if (className.equals(\"boolean\")) {\n        clazz = java.lang.Boolean.class;\n    } else if (className.equals(\"void\")) {\n        clazz = java.lang.Void.class;\n    }\n}",
            "src_parent": "if (className.equals(\"long\")) {\n    clazz = java.lang.Long.class;\n} else if (className.equals(\"boolean\")) {\n    clazz = java.lang.Boolean.class;\n} else if (className.equals(\"void\")) {\n    clazz = java.lang.Void.class;\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "className.equals(\"void\")",
            "src_parent": "if (className.equals(\"void\")) {\n    clazz = java.lang.Void.class;\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    clazz = java.lang.Void.class;\n}",
            "src_parent": "if (className.equals(\"void\")) {\n    clazz = java.lang.Void.class;\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Field",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Field",
            "dst_parent": "private static final java.util.regex.Pattern basicTypeDatePattern = java.util.regex.Pattern.compile(\"^((java\\\\.util\\\\.)?Date)(,|>|$)\");",
            "dst_parent_type": "Field",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Field",
            "src_parent": "private static final java.util.regex.Pattern basicType2Pattern = java.util.regex.Pattern.compile(\"^(int|byte|short|char|double|float|long|boolean)(,|>|$)\");",
            "src_parent_type": "Field",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    if (basicType2Matcher.find()) {\n        java.lang.String className = basicType2Matcher.group(1);\n        sb.delete(0, className.length());\n        java.lang.Class<?> clazz = null;\n        if (className.equals(\"int\")) {\n            clazz = java.lang.Integer.class;\n        } else if (className.equals(\"byte\")) {\n            clazz = java.lang.Byte.class;\n        } else if (className.equals(\"short\")) {\n            clazz = java.lang.Short.class;\n        } else if (className.equals(\"char\")) {\n            clazz = java.lang.Character.class;\n        } else if (className.equals(\"double\")) {\n            clazz = java.lang.Double.class;\n        } else if (className.equals(\"float\")) {\n            clazz = java.lang.Float.class;\n        } else if (className.equals(\"long\")) {\n            clazz = java.lang.Long.class;\n        } else if (className.equals(\"boolean\")) {\n            clazz = java.lang.Boolean.class;\n        } else if (className.equals(\"void\")) {\n            clazz = java.lang.Void.class;\n        }\n        returnType = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(clazz);\n    } else if (valueTypeMatcher.find()) {\n        java.lang.String className = valueTypeMatcher.group(1);\n        sb.delete(0, className.length() + 5);\n        java.lang.Class<?> clazz;\n        if (className.startsWith(org.apache.flink.api.java.typeutils.TypeInfoParser.VALUE_PACKAGE)) {\n            clazz = java.lang.Class.forName(className + \"Value\");\n        } else {\n            clazz = java.lang.Class.forName(((org.apache.flink.api.java.typeutils.TypeInfoParser.VALUE_PACKAGE + \".\") + className) + \"Value\");\n        }\n        returnType = org.apache.flink.api.java.typeutils.ValueTypeInfo.getValueTypeInfo(((java.lang.Class<org.apache.flink.types.Value>) (clazz)));\n    } else if (basicArrayTypeMatcher.find()) {\n        java.lang.String className = basicArrayTypeMatcher.group(1);\n        sb.delete(0, className.length() + 2);\n        java.lang.Class<?> clazz;\n        if (className.startsWith(\"java.lang\")) {\n            clazz = java.lang.Class.forName((\"[L\" + className) + \";\");\n        } else {\n            clazz = java.lang.Class.forName((\"[Ljava.lang.\" + className) + \";\");\n        }\n        returnType = org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo.getInfoFor(clazz);\n    } else if (basicArrayType2Matcher.find()) {\n        java.lang.String className = basicArrayType2Matcher.group(1);\n        sb.delete(0, className.length() + 2);\n        java.lang.Class<?> clazz = null;\n        if (className.equals(\"int\")) {\n            clazz = int[].class;\n        } else if (className.equals(\"byte\")) {\n            clazz = byte[].class;\n        } else if (className.equals(\"short\")) {\n            clazz = short[].class;\n        } else if (className.equals(\"char\")) {\n            clazz = char[].class;\n        } else if (className.equals(\"double\")) {\n            clazz = double[].class;\n        } else if (className.equals(\"float\")) {\n            clazz = float[].class;\n        } else if (className.equals(\"long\")) {\n            clazz = long[].class;\n        } else if (className.equals(\"boolean\")) {\n            clazz = boolean[].class;\n        }\n        returnType = org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo.getInfoFor(clazz);\n    } else if (pojoGenericMatcher.find()) {\n        java.lang.String fullyQualifiedName = pojoGenericMatcher.group(1);\n        sb.delete(0, fullyQualifiedName.length());\n        boolean isPojo = pojoGenericMatcher.group(2) != null;\n        if (isPojo) {\n            sb.deleteCharAt(0);\n            java.lang.Class<?> clazz = org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass(fullyQualifiedName);\n            java.util.ArrayList<org.apache.flink.api.java.typeutils.PojoField> fields = new java.util.ArrayList<org.apache.flink.api.java.typeutils.PojoField>();\n            while (sb.charAt(0) != '>') {\n                final java.util.regex.Matcher fieldMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.fieldPattern.matcher(sb);\n                if (!fieldMatcher.find()) {\n                    throw new java.lang.IllegalArgumentException(\"Field name missing.\");\n                }\n                java.lang.String fieldName = fieldMatcher.group(1);\n                sb.delete(0, fieldName.length() + 1);\n                java.lang.reflect.Field field = null;\n                try {\n                    field = clazz.getDeclaredField(fieldName);\n                } catch (java.lang.Exception e) {\n                    throw new java.lang.IllegalArgumentException((\"Field '\" + fieldName) + \"'could not be accessed.\");\n                }\n                fields.add(new org.apache.flink.api.java.typeutils.PojoField(field, org.apache.flink.api.java.typeutils.TypeInfoParser.parse(sb)));\n            } \n            returnType = new org.apache.flink.api.java.typeutils.PojoTypeInfo(clazz, fields);\n        } else if (fullyQualifiedName.endsWith(\"[]\")) {\n            fullyQualifiedName = fullyQualifiedName.substring(0, fullyQualifiedName.length() - 2);\n            returnType = org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo.getInfoFor(org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass((\"[L\" + fullyQualifiedName) + \";\"));\n        } else {\n            returnType = new org.apache.flink.api.java.typeutils.GenericTypeInfo(org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass(fullyQualifiedName));\n        }\n    }\n}",
            "dst_parent": "if (basicTypeDateMatcher.find()) {\n    java.lang.String className = basicTypeDateMatcher.group(1);\n    sb.delete(0, className.length());\n    java.lang.Class<?> clazz;\n    if (className.startsWith(\"java.util\")) {\n        clazz = java.lang.Class.forName(className);\n    } else {\n        clazz = java.lang.Class.forName(\"java.util.\" + className);\n    }\n    returnType = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(clazz);\n} else if (basicType2Matcher.find()) {\n    java.lang.String className = basicType2Matcher.group(1);\n    sb.delete(0, className.length());\n    java.lang.Class<?> clazz = null;\n    if (className.equals(\"int\")) {\n        clazz = java.lang.Integer.class;\n    } else if (className.equals(\"byte\")) {\n        clazz = java.lang.Byte.class;\n    } else if (className.equals(\"short\")) {\n        clazz = java.lang.Short.class;\n    } else if (className.equals(\"char\")) {\n        clazz = java.lang.Character.class;\n    } else if (className.equals(\"double\")) {\n        clazz = java.lang.Double.class;\n    } else if (className.equals(\"float\")) {\n        clazz = java.lang.Float.class;\n    } else if (className.equals(\"long\")) {\n        clazz = java.lang.Long.class;\n    } else if (className.equals(\"boolean\")) {\n        clazz = java.lang.Boolean.class;\n    } else if (className.equals(\"void\")) {\n        clazz = java.lang.Void.class;\n    }\n    returnType = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(clazz);\n} else if (valueTypeMatcher.find()) {\n    java.lang.String className = valueTypeMatcher.group(1);\n    sb.delete(0, className.length() + 5);\n    java.lang.Class<?> clazz;\n    if (className.startsWith(org.apache.flink.api.java.typeutils.TypeInfoParser.VALUE_PACKAGE)) {\n        clazz = java.lang.Class.forName(className + \"Value\");\n    } else {\n        clazz = java.lang.Class.forName(((org.apache.flink.api.java.typeutils.TypeInfoParser.VALUE_PACKAGE + \".\") + className) + \"Value\");\n    }\n    returnType = org.apache.flink.api.java.typeutils.ValueTypeInfo.getValueTypeInfo(((java.lang.Class<org.apache.flink.types.Value>) (clazz)));\n} else if (basicArrayTypeMatcher.find()) {\n    java.lang.String className = basicArrayTypeMatcher.group(1);\n    sb.delete(0, className.length() + 2);\n    java.lang.Class<?> clazz;\n    if (className.startsWith(\"java.lang\")) {\n        clazz = java.lang.Class.forName((\"[L\" + className) + \";\");\n    } else {\n        clazz = java.lang.Class.forName((\"[Ljava.lang.\" + className) + \";\");\n    }\n    returnType = org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo.getInfoFor(clazz);\n} else if (basicArrayType2Matcher.find()) {\n    java.lang.String className = basicArrayType2Matcher.group(1);\n    sb.delete(0, className.length() + 2);\n    java.lang.Class<?> clazz = null;\n    if (className.equals(\"int\")) {\n        clazz = int[].class;\n    } else if (className.equals(\"byte\")) {\n        clazz = byte[].class;\n    } else if (className.equals(\"short\")) {\n        clazz = short[].class;\n    } else if (className.equals(\"char\")) {\n        clazz = char[].class;\n    } else if (className.equals(\"double\")) {\n        clazz = double[].class;\n    } else if (className.equals(\"float\")) {\n        clazz = float[].class;\n    } else if (className.equals(\"long\")) {\n        clazz = long[].class;\n    } else if (className.equals(\"boolean\")) {\n        clazz = boolean[].class;\n    }\n    returnType = org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo.getInfoFor(clazz);\n} else if (pojoGenericMatcher.find()) {\n    java.lang.String fullyQualifiedName = pojoGenericMatcher.group(1);\n    sb.delete(0, fullyQualifiedName.length());\n    boolean isPojo = pojoGenericMatcher.group(2) != null;\n    if (isPojo) {\n        sb.deleteCharAt(0);\n        java.lang.Class<?> clazz = org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass(fullyQualifiedName);\n        java.util.ArrayList<org.apache.flink.api.java.typeutils.PojoField> fields = new java.util.ArrayList<org.apache.flink.api.java.typeutils.PojoField>();\n        while (sb.charAt(0) != '>') {\n            final java.util.regex.Matcher fieldMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.fieldPattern.matcher(sb);\n            if (!fieldMatcher.find()) {\n                throw new java.lang.IllegalArgumentException(\"Field name missing.\");\n            }\n            java.lang.String fieldName = fieldMatcher.group(1);\n            sb.delete(0, fieldName.length() + 1);\n            java.lang.reflect.Field field = null;\n            try {\n                field = clazz.getDeclaredField(fieldName);\n            } catch (java.lang.Exception e) {\n                throw new java.lang.IllegalArgumentException((\"Field '\" + fieldName) + \"'could not be accessed.\");\n            }\n            fields.add(new org.apache.flink.api.java.typeutils.PojoField(field, org.apache.flink.api.java.typeutils.TypeInfoParser.parse(sb)));\n        } \n        returnType = new org.apache.flink.api.java.typeutils.PojoTypeInfo(clazz, fields);\n    } else if (fullyQualifiedName.endsWith(\"[]\")) {\n        fullyQualifiedName = fullyQualifiedName.substring(0, fullyQualifiedName.length() - 2);\n        returnType = org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo.getInfoFor(org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass((\"[L\" + fullyQualifiedName) + \";\"));\n    } else {\n        returnType = new org.apache.flink.api.java.typeutils.GenericTypeInfo(org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass(fullyQualifiedName));\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    if (basicType2Matcher.find()) {\n        java.lang.String className = basicType2Matcher.group(1);\n        sb.delete(0, className.length());\n        java.lang.Class<?> clazz = null;\n        if (className.equals(\"int\")) {\n            clazz = java.lang.Integer.class;\n        } else if (className.equals(\"byte\")) {\n            clazz = java.lang.Byte.class;\n        } else if (className.equals(\"short\")) {\n            clazz = java.lang.Short.class;\n        } else if (className.equals(\"char\")) {\n            clazz = java.lang.Character.class;\n        } else if (className.equals(\"double\")) {\n            clazz = java.lang.Double.class;\n        } else if (className.equals(\"float\")) {\n            clazz = java.lang.Float.class;\n        } else if (className.equals(\"long\")) {\n            clazz = java.lang.Long.class;\n        } else if (className.equals(\"boolean\")) {\n            clazz = java.lang.Boolean.class;\n        }\n        returnType = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(clazz);\n    } else if (valueTypeMatcher.find()) {\n        java.lang.String className = valueTypeMatcher.group(1);\n        sb.delete(0, className.length() + 5);\n        java.lang.Class<?> clazz;\n        if (className.startsWith(org.apache.flink.api.java.typeutils.TypeInfoParser.VALUE_PACKAGE)) {\n            clazz = java.lang.Class.forName(className + \"Value\");\n        } else {\n            clazz = java.lang.Class.forName(((org.apache.flink.api.java.typeutils.TypeInfoParser.VALUE_PACKAGE + \".\") + className) + \"Value\");\n        }\n        returnType = org.apache.flink.api.java.typeutils.ValueTypeInfo.getValueTypeInfo(((java.lang.Class<org.apache.flink.types.Value>) (clazz)));\n    } else if (basicArrayTypeMatcher.find()) {\n        java.lang.String className = basicArrayTypeMatcher.group(1);\n        sb.delete(0, className.length() + 2);\n        java.lang.Class<?> clazz;\n        if (className.startsWith(\"java.lang\")) {\n            clazz = java.lang.Class.forName((\"[L\" + className) + \";\");\n        } else {\n            clazz = java.lang.Class.forName((\"[Ljava.lang.\" + className) + \";\");\n        }\n        returnType = org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo.getInfoFor(clazz);\n    } else if (basicArrayType2Matcher.find()) {\n        java.lang.String className = basicArrayType2Matcher.group(1);\n        sb.delete(0, className.length() + 2);\n        java.lang.Class<?> clazz = null;\n        if (className.equals(\"int\")) {\n            clazz = int[].class;\n        } else if (className.equals(\"byte\")) {\n            clazz = byte[].class;\n        } else if (className.equals(\"short\")) {\n            clazz = short[].class;\n        } else if (className.equals(\"char\")) {\n            clazz = char[].class;\n        } else if (className.equals(\"double\")) {\n            clazz = double[].class;\n        } else if (className.equals(\"float\")) {\n            clazz = float[].class;\n        } else if (className.equals(\"long\")) {\n            clazz = long[].class;\n        } else if (className.equals(\"boolean\")) {\n            clazz = boolean[].class;\n        }\n        returnType = org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo.getInfoFor(clazz);\n    } else if (pojoGenericMatcher.find()) {\n        java.lang.String fullyQualifiedName = pojoGenericMatcher.group(1);\n        sb.delete(0, fullyQualifiedName.length());\n        boolean isPojo = pojoGenericMatcher.group(2) != null;\n        if (isPojo) {\n            sb.deleteCharAt(0);\n            java.lang.Class<?> clazz = org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass(fullyQualifiedName);\n            java.util.ArrayList<org.apache.flink.api.java.typeutils.PojoField> fields = new java.util.ArrayList<org.apache.flink.api.java.typeutils.PojoField>();\n            while (sb.charAt(0) != '>') {\n                final java.util.regex.Matcher fieldMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.fieldPattern.matcher(sb);\n                if (!fieldMatcher.find()) {\n                    throw new java.lang.IllegalArgumentException(\"Field name missing.\");\n                }\n                java.lang.String fieldName = fieldMatcher.group(1);\n                sb.delete(0, fieldName.length() + 1);\n                java.lang.reflect.Field field = null;\n                try {\n                    field = clazz.getDeclaredField(fieldName);\n                } catch (java.lang.Exception e) {\n                    throw new java.lang.IllegalArgumentException((\"Field '\" + fieldName) + \"'could not be accessed.\");\n                }\n                fields.add(new org.apache.flink.api.java.typeutils.PojoField(field, org.apache.flink.api.java.typeutils.TypeInfoParser.parse(sb)));\n            } \n            returnType = new org.apache.flink.api.java.typeutils.PojoTypeInfo(clazz, fields);\n        } else if (fullyQualifiedName.endsWith(\"[]\")) {\n            fullyQualifiedName = fullyQualifiedName.substring(0, fullyQualifiedName.length() - 2);\n            returnType = org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo.getInfoFor(org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass((\"[L\" + fullyQualifiedName) + \";\"));\n        } else {\n            returnType = new org.apache.flink.api.java.typeutils.GenericTypeInfo(org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass(fullyQualifiedName));\n        }\n    }\n}",
            "src_parent": "if (basicTypeMatcher.find()) {\n    java.lang.String className = basicTypeMatcher.group(1);\n    sb.delete(0, className.length());\n    java.lang.Class<?> clazz;\n    if (className.startsWith(\"java.lang\")) {\n        clazz = java.lang.Class.forName(className);\n    } else {\n        clazz = java.lang.Class.forName(\"java.lang.\" + className);\n    }\n    returnType = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(clazz);\n} else if (basicType2Matcher.find()) {\n    java.lang.String className = basicType2Matcher.group(1);\n    sb.delete(0, className.length());\n    java.lang.Class<?> clazz = null;\n    if (className.equals(\"int\")) {\n        clazz = java.lang.Integer.class;\n    } else if (className.equals(\"byte\")) {\n        clazz = java.lang.Byte.class;\n    } else if (className.equals(\"short\")) {\n        clazz = java.lang.Short.class;\n    } else if (className.equals(\"char\")) {\n        clazz = java.lang.Character.class;\n    } else if (className.equals(\"double\")) {\n        clazz = java.lang.Double.class;\n    } else if (className.equals(\"float\")) {\n        clazz = java.lang.Float.class;\n    } else if (className.equals(\"long\")) {\n        clazz = java.lang.Long.class;\n    } else if (className.equals(\"boolean\")) {\n        clazz = java.lang.Boolean.class;\n    }\n    returnType = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(clazz);\n} else if (valueTypeMatcher.find()) {\n    java.lang.String className = valueTypeMatcher.group(1);\n    sb.delete(0, className.length() + 5);\n    java.lang.Class<?> clazz;\n    if (className.startsWith(org.apache.flink.api.java.typeutils.TypeInfoParser.VALUE_PACKAGE)) {\n        clazz = java.lang.Class.forName(className + \"Value\");\n    } else {\n        clazz = java.lang.Class.forName(((org.apache.flink.api.java.typeutils.TypeInfoParser.VALUE_PACKAGE + \".\") + className) + \"Value\");\n    }\n    returnType = org.apache.flink.api.java.typeutils.ValueTypeInfo.getValueTypeInfo(((java.lang.Class<org.apache.flink.types.Value>) (clazz)));\n} else if (basicArrayTypeMatcher.find()) {\n    java.lang.String className = basicArrayTypeMatcher.group(1);\n    sb.delete(0, className.length() + 2);\n    java.lang.Class<?> clazz;\n    if (className.startsWith(\"java.lang\")) {\n        clazz = java.lang.Class.forName((\"[L\" + className) + \";\");\n    } else {\n        clazz = java.lang.Class.forName((\"[Ljava.lang.\" + className) + \";\");\n    }\n    returnType = org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo.getInfoFor(clazz);\n} else if (basicArrayType2Matcher.find()) {\n    java.lang.String className = basicArrayType2Matcher.group(1);\n    sb.delete(0, className.length() + 2);\n    java.lang.Class<?> clazz = null;\n    if (className.equals(\"int\")) {\n        clazz = int[].class;\n    } else if (className.equals(\"byte\")) {\n        clazz = byte[].class;\n    } else if (className.equals(\"short\")) {\n        clazz = short[].class;\n    } else if (className.equals(\"char\")) {\n        clazz = char[].class;\n    } else if (className.equals(\"double\")) {\n        clazz = double[].class;\n    } else if (className.equals(\"float\")) {\n        clazz = float[].class;\n    } else if (className.equals(\"long\")) {\n        clazz = long[].class;\n    } else if (className.equals(\"boolean\")) {\n        clazz = boolean[].class;\n    }\n    returnType = org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo.getInfoFor(clazz);\n} else if (pojoGenericMatcher.find()) {\n    java.lang.String fullyQualifiedName = pojoGenericMatcher.group(1);\n    sb.delete(0, fullyQualifiedName.length());\n    boolean isPojo = pojoGenericMatcher.group(2) != null;\n    if (isPojo) {\n        sb.deleteCharAt(0);\n        java.lang.Class<?> clazz = org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass(fullyQualifiedName);\n        java.util.ArrayList<org.apache.flink.api.java.typeutils.PojoField> fields = new java.util.ArrayList<org.apache.flink.api.java.typeutils.PojoField>();\n        while (sb.charAt(0) != '>') {\n            final java.util.regex.Matcher fieldMatcher = org.apache.flink.api.java.typeutils.TypeInfoParser.fieldPattern.matcher(sb);\n            if (!fieldMatcher.find()) {\n                throw new java.lang.IllegalArgumentException(\"Field name missing.\");\n            }\n            java.lang.String fieldName = fieldMatcher.group(1);\n            sb.delete(0, fieldName.length() + 1);\n            java.lang.reflect.Field field = null;\n            try {\n                field = clazz.getDeclaredField(fieldName);\n            } catch (java.lang.Exception e) {\n                throw new java.lang.IllegalArgumentException((\"Field '\" + fieldName) + \"'could not be accessed.\");\n            }\n            fields.add(new org.apache.flink.api.java.typeutils.PojoField(field, org.apache.flink.api.java.typeutils.TypeInfoParser.parse(sb)));\n        } \n        returnType = new org.apache.flink.api.java.typeutils.PojoTypeInfo(clazz, fields);\n    } else if (fullyQualifiedName.endsWith(\"[]\")) {\n        fullyQualifiedName = fullyQualifiedName.substring(0, fullyQualifiedName.length() - 2);\n        returnType = org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo.getInfoFor(org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass((\"[L\" + fullyQualifiedName) + \";\"));\n    } else {\n        returnType = new org.apache.flink.api.java.typeutils.GenericTypeInfo(org.apache.flink.api.java.typeutils.TypeInfoParser.loadClass(fullyQualifiedName));\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "className.equals(\"boolean\")",
            "dst_parent": "if (className.equals(\"boolean\")) {\n    clazz = java.lang.Boolean.class;\n} else if (className.equals(\"void\")) {\n    clazz = java.lang.Void.class;\n}",
            "dst_parent_type": "If",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "className.equals(\"boolean\")",
            "src_parent": "if (className.equals(\"boolean\")) {\n    clazz = java.lang.Boolean.class;\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    clazz = java.lang.Boolean.class;\n}",
            "dst_parent": "if (className.equals(\"boolean\")) {\n    clazz = java.lang.Boolean.class;\n} else if (className.equals(\"void\")) {\n    clazz = java.lang.Void.class;\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    clazz = java.lang.Boolean.class;\n}",
            "src_parent": "if (className.equals(\"boolean\")) {\n    clazz = java.lang.Boolean.class;\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    if (className.equals(\"void\")) {\n        clazz = java.lang.Void.class;\n    }\n}",
            "dst_parent": "if (className.equals(\"boolean\")) {\n    clazz = java.lang.Boolean.class;\n} else if (className.equals(\"void\")) {\n    clazz = java.lang.Void.class;\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    if (className.equals(\"boolean\")) {\n        clazz = java.lang.Boolean.class;\n    }\n}",
            "src_parent": "if (className.equals(\"long\")) {\n    clazz = java.lang.Long.class;\n} else if (className.equals(\"boolean\")) {\n    clazz = java.lang.Boolean.class;\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        }
      ],
      "file_name": "TypeInfoParser"
    }
  ],
  "id": "flink_9cd96df7"
}