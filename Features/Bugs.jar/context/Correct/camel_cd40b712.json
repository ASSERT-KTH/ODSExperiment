{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "choiceCallback.done(true)",
            "src_parent": "{\n    exchange.setException(e);\n    choiceCallback.done(true);\n    return true;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "return true",
            "src_parent": "{\n    exchange.setException(e);\n    choiceCallback.done(true);\n    return true;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.camel.processor.ChoiceProcessor.class);",
            "src_parent": "public class ChoiceProcessor extends org.apache.camel.support.ServiceSupport implements org.apache.camel.AsyncProcessor , org.apache.camel.Navigate<org.apache.camel.Processor> , org.apache.camel.Traceable {\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.camel.processor.ChoiceProcessor.class);\n\n    private final java.util.List<org.apache.camel.Processor> filters;\n\n    private final org.apache.camel.Processor otherwise;\n\n    public ChoiceProcessor(java.util.List<org.apache.camel.Processor> filters, org.apache.camel.Processor otherwise) {\n        this.filters = filters;\n        this.otherwise = otherwise;\n    }\n\n    public void process(org.apache.camel.Exchange exchange) throws java.lang.Exception {\n        org.apache.camel.util.AsyncProcessorHelper.process(this, exchange);\n    }\n\n    public boolean process(final org.apache.camel.Exchange exchange, final org.apache.camel.AsyncCallback callback) {\n        java.util.Iterator<org.apache.camel.Processor> processors = next().iterator();\n        final java.lang.Object existing = exchange.getProperty(Exchange.FILTER_MATCHED);\n        final org.apache.camel.AsyncCallback choiceCallback = new org.apache.camel.AsyncCallback() {\n            @java.lang.Override\n            public void done(boolean doneSync) {\n                if (existing != null) {\n                    exchange.setProperty(Exchange.FILTER_MATCHED, existing);\n                } else {\n                    exchange.removeProperty(Exchange.FILTER_MATCHED);\n                }\n                callback.done(doneSync);\n            }\n        };\n        while (processors.hasNext()) {\n            org.apache.camel.Processor processor = processors.next();\n            boolean matches = true;\n            if (processor instanceof org.apache.camel.processor.FilterProcessor) {\n                org.apache.camel.processor.FilterProcessor filter = ((org.apache.camel.processor.FilterProcessor) (processor));\n                try {\n                    matches = filter.getPredicate().matches(exchange);\n                    exchange.setProperty(Exchange.FILTER_MATCHED, matches);\n                    processor = filter.getProcessor();\n                } catch (java.lang.Throwable e) {\n                    exchange.setException(e);\n                }\n            }\n            if (!org.apache.camel.processor.PipelineHelper.continueProcessing(exchange, \"so breaking out of choice\", org.apache.camel.processor.ChoiceProcessor.LOG)) {\n                break;\n            }\n            if (!matches) {\n                continue;\n            }\n            org.apache.camel.AsyncProcessor async = org.apache.camel.util.AsyncProcessorConverterHelper.convert(processor);\n            return async.process(exchange, choiceCallback);\n        } \n        choiceCallback.done(true);\n        return true;\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        java.lang.StringBuilder builder = new java.lang.StringBuilder(\"choice{\");\n        boolean first = true;\n        for (org.apache.camel.Processor processor : filters) {\n            if (first) {\n                first = false;\n            } else {\n                builder.append(\", \");\n            }\n            builder.append(\"when \");\n            builder.append(processor);\n        }\n        if (otherwise != null) {\n            builder.append(\", otherwise: \");\n            builder.append(otherwise);\n        }\n        builder.append(\"}\");\n        return builder.toString();\n    }\n\n    public java.lang.String getTraceLabel() {\n        return \"choice\";\n    }\n\n    public java.util.List<org.apache.camel.Processor> getFilters() {\n        return filters;\n    }\n\n    public org.apache.camel.Processor getOtherwise() {\n        return otherwise;\n    }\n\n    public java.util.List<org.apache.camel.Processor> next() {\n        if (!hasNext()) {\n            return null;\n        }\n        java.util.List<org.apache.camel.Processor> answer = new java.util.ArrayList<org.apache.camel.Processor>();\n        if (filters != null) {\n            answer.addAll(filters);\n        }\n        if (otherwise != null) {\n            answer.add(otherwise);\n        }\n        return answer;\n    }\n\n    public boolean hasNext() {\n        return (otherwise != null) || ((filters != null) && (!filters.isEmpty()));\n    }\n\n    protected void doStart() throws java.lang.Exception {\n        org.apache.camel.util.ServiceHelper.startServices(filters, otherwise);\n    }\n\n    protected void doStop() throws java.lang.Exception {\n        org.apache.camel.util.ServiceHelper.stopServices(otherwise, filters);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (!org.apache.camel.processor.PipelineHelper.continueProcessing(exchange, \"so breaking out of choice\", org.apache.camel.processor.ChoiceProcessor.LOG)) {\n    break;\n}",
            "src_parent": "{\n    org.apache.camel.Processor processor = processors.next();\n    boolean matches = true;\n    if (processor instanceof org.apache.camel.processor.FilterProcessor) {\n        org.apache.camel.processor.FilterProcessor filter = ((org.apache.camel.processor.FilterProcessor) (processor));\n        try {\n            matches = filter.getPredicate().matches(exchange);\n            exchange.setProperty(Exchange.FILTER_MATCHED, matches);\n            processor = filter.getProcessor();\n        } catch (java.lang.Throwable e) {\n            exchange.setException(e);\n        }\n    }\n    if (!org.apache.camel.processor.PipelineHelper.continueProcessing(exchange, \"so breaking out of choice\", org.apache.camel.processor.ChoiceProcessor.LOG)) {\n        break;\n    }\n    if (!matches) {\n        continue;\n    }\n    org.apache.camel.AsyncProcessor async = org.apache.camel.util.AsyncProcessorConverterHelper.convert(processor);\n    return async.process(exchange, choiceCallback);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "processor = filter.getProcessor()",
            "dst_parent": "{\n    matches = filter.getPredicate().matches(exchange);\n    exchange.setProperty(Exchange.FILTER_MATCHED, matches);\n    processor = filter.getProcessor();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "processor = filter.getProcessor()",
            "src_parent": "{\n    org.apache.camel.processor.FilterProcessor filter = ((org.apache.camel.processor.FilterProcessor) (processor));\n    try {\n        matches = filter.getPredicate().matches(exchange);\n        exchange.setProperty(Exchange.FILTER_MATCHED, matches);\n    } catch (java.lang.Throwable e) {\n        exchange.setException(e);\n        choiceCallback.done(true);\n        return true;\n    }\n    processor = filter.getProcessor();\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        }
      ],
      "file_name": "ChoiceProcessor"
    }
  ],
  "id": "camel_cd40b712"
}