{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "case javax.jcr.PropertyType.REFERENCE :",
            "src_parent": "switch (type) {\n    case javax.jcr.PropertyType.NAME :\n        java.lang.String oakName = namePathMapper.getOakName(value);\n        if (oakName == null) {\n            throw new javax.jcr.ValueFormatException(\"Invalid name: \" + value);\n        }\n        cv = factory.createValue(oakName, type);\n        break;\n    case javax.jcr.PropertyType.PATH :\n        java.lang.String oakValue;\n        if (value.startsWith(\"[\") && value.endsWith(\"]\")) {\n            oakValue = value;\n        } else {\n            oakValue = namePathMapper.getOakPath(value);\n            if (oakValue == null) {\n                throw new javax.jcr.ValueFormatException(\"Invalid path: \" + value);\n            }\n        }\n        cv = factory.createValue(oakValue, type);\n        break;\n    case javax.jcr.PropertyType.DATE :\n        if (org.apache.jackrabbit.util.ISO8601.parse(value) == null) {\n            throw new javax.jcr.ValueFormatException(\"Invalid date \" + value);\n        }\n        cv = factory.createValue(value, type);\n        break;\n    case javax.jcr.PropertyType.REFERENCE :\n    case javax.jcr.PropertyType.WEAKREFERENCE :\n        try {\n            java.util.UUID.fromString(value);\n        } catch (java.lang.IllegalArgumentException e) {\n            throw new javax.jcr.ValueFormatException(e);\n        }\n        cv = factory.createValue(value, type);\n        break;\n    case javax.jcr.PropertyType.BINARY :\n        cv = factory.createValue(new java.io.ByteArrayInputStream(value.getBytes(\"UTF-8\")));\n        break;\n    default :\n        cv = factory.createValue(value, type);\n        break;\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "case javax.jcr.PropertyType.WEAKREFERENCE :\n    try {\n        java.util.UUID.fromString(value);\n    } catch (java.lang.IllegalArgumentException e) {\n        throw new javax.jcr.ValueFormatException(e);\n    }\n    cv = factory.createValue(value, type);\n    break;",
            "src_parent": "switch (type) {\n    case javax.jcr.PropertyType.NAME :\n        java.lang.String oakName = namePathMapper.getOakName(value);\n        if (oakName == null) {\n            throw new javax.jcr.ValueFormatException(\"Invalid name: \" + value);\n        }\n        cv = factory.createValue(oakName, type);\n        break;\n    case javax.jcr.PropertyType.PATH :\n        java.lang.String oakValue;\n        if (value.startsWith(\"[\") && value.endsWith(\"]\")) {\n            oakValue = value;\n        } else {\n            oakValue = namePathMapper.getOakPath(value);\n            if (oakValue == null) {\n                throw new javax.jcr.ValueFormatException(\"Invalid path: \" + value);\n            }\n        }\n        cv = factory.createValue(oakValue, type);\n        break;\n    case javax.jcr.PropertyType.DATE :\n        if (org.apache.jackrabbit.util.ISO8601.parse(value) == null) {\n            throw new javax.jcr.ValueFormatException(\"Invalid date \" + value);\n        }\n        cv = factory.createValue(value, type);\n        break;\n    case javax.jcr.PropertyType.REFERENCE :\n    case javax.jcr.PropertyType.WEAKREFERENCE :\n        try {\n            java.util.UUID.fromString(value);\n        } catch (java.lang.IllegalArgumentException e) {\n            throw new javax.jcr.ValueFormatException(e);\n        }\n        cv = factory.createValue(value, type);\n        break;\n    case javax.jcr.PropertyType.BINARY :\n        cv = factory.createValue(new java.io.ByteArrayInputStream(value.getBytes(\"UTF-8\")));\n        break;\n    default :\n        cv = factory.createValue(value, type);\n        break;\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        }
      ],
      "file_name": "ValueFactoryImpl"
    }
  ],
  "id": "jackrabbit-oak_24ce6788"
}