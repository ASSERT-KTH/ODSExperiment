{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "null",
            "src_parent": "result.port = null",
            "src_parent_type": "Assignment",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static java.lang.Integer getDefaultPortForProtocol(java.lang.String protocol) {\n    if (\"http\".equals(protocol)) {\n        return 80;\n    } else if (\"https\".equals(protocol)) {\n        return 443;\n    } else if (\"ftp\".equals(protocol)) {\n        return 21;\n    } else {\n        return null;\n    }\n}",
            "src_parent": "public final class Url implements java.io.Serializable {\n    private static final long serialVersionUID = 1L;\n\n    private static final java.lang.String DEFAULT_CHARSET_NAME = \"UTF-8\";\n\n    private final java.util.List<java.lang.String> segments = org.apache.wicket.util.lang.Generics.newArrayList();\n\n    private final java.util.List<org.apache.wicket.request.Url.QueryParameter> parameters = org.apache.wicket.util.lang.Generics.newArrayList();\n\n    private java.lang.String charsetName;\n\n    private transient java.nio.charset.Charset _charset;\n\n    private java.lang.String protocol;\n\n    private java.lang.Integer port;\n\n    private java.lang.String host;\n\n    private static org.apache.wicket.request.Url.QueryParameter parseQueryParameter(final java.lang.String qp, final java.nio.charset.Charset charset) {\n        if (qp.indexOf('=') == (-1)) {\n            return new org.apache.wicket.request.Url.QueryParameter(org.apache.wicket.request.Url.decodeParameter(qp, charset), \"\");\n        }\n        java.lang.String[] parts = org.apache.wicket.util.string.Strings.split(qp, '=');\n        if (parts.length == 0) {\n            return new org.apache.wicket.request.Url.QueryParameter(\"\", \"\");\n        } else if (parts.length == 1) {\n            return new org.apache.wicket.request.Url.QueryParameter(\"\", org.apache.wicket.request.Url.decodeParameter(parts[0], charset));\n        } else {\n            return new org.apache.wicket.request.Url.QueryParameter(org.apache.wicket.request.Url.decodeParameter(parts[0], charset), org.apache.wicket.request.Url.decodeParameter(parts[1], charset));\n        }\n    }\n\n    public static org.apache.wicket.request.Url parse(final java.lang.String url) {\n        return org.apache.wicket.request.Url.parse(url, null);\n    }\n\n    public static org.apache.wicket.request.Url parse(java.lang.String url, java.nio.charset.Charset charset) {\n        org.apache.wicket.util.lang.Args.notNull(url, \"url\");\n        org.apache.wicket.request.Url result = new org.apache.wicket.request.Url(charset);\n        charset = result.getCharset();\n        final java.lang.String queryString;\n        final java.lang.String absoluteUrl;\n        int queryAt = url.indexOf('?');\n        if (queryAt == (-1)) {\n            queryString = \"\";\n            absoluteUrl = url;\n        } else {\n            absoluteUrl = url.substring(0, queryAt);\n            queryString = url.substring(queryAt + 1);\n        }\n        java.lang.String relativeUrl;\n        final int protocolAt = absoluteUrl.indexOf(\"://\");\n        if (protocolAt != (-1)) {\n            result.protocol = absoluteUrl.substring(0, protocolAt).toLowerCase(java.util.Locale.US);\n            final java.lang.String afterProto = absoluteUrl.substring(protocolAt + 3);\n            final java.lang.String hostAndPort;\n            int relativeAt = afterProto.indexOf('/');\n            if (relativeAt == (-1)) {\n                relativeUrl = \"\";\n                hostAndPort = afterProto;\n            } else {\n                relativeUrl = afterProto.substring(relativeAt);\n                hostAndPort = afterProto.substring(0, relativeAt);\n            }\n            int portAt = hostAndPort.indexOf(':');\n            if (portAt == (-1)) {\n                result.host = hostAndPort;\n                result.port = org.apache.wicket.request.Url.getDefaultPortForProtocol(result.protocol);\n            } else {\n                result.host = hostAndPort.substring(0, portAt);\n                result.port = java.lang.Integer.parseInt(hostAndPort.substring(portAt + 1));\n            }\n        } else {\n            relativeUrl = absoluteUrl;\n        }\n        if (relativeUrl.length() > 0) {\n            boolean removeLast = false;\n            if (relativeUrl.endsWith(\"/\")) {\n                relativeUrl += \"/x\";\n                removeLast = true;\n            }\n            java.lang.String[] segmentArray = org.apache.wicket.util.string.Strings.split(relativeUrl, '/');\n            if (removeLast) {\n                segmentArray[segmentArray.length - 1] = null;\n            }\n            for (java.lang.String s : segmentArray) {\n                if (s != null) {\n                    result.segments.add(org.apache.wicket.request.Url.decodeSegment(s, charset));\n                }\n            }\n        }\n        if (queryString.length() > 0) {\n            java.lang.String[] queryArray = org.apache.wicket.util.string.Strings.split(queryString, '&');\n            for (java.lang.String s : queryArray) {\n                result.parameters.add(org.apache.wicket.request.Url.parseQueryParameter(s, charset));\n            }\n        }\n        return result;\n    }\n\n    private static java.lang.Integer getDefaultPortForProtocol(java.lang.String protocol) {\n        if (\"http\".equals(protocol)) {\n            return 80;\n        } else if (\"https\".equals(protocol)) {\n            return 443;\n        } else if (\"ftp\".equals(protocol)) {\n            return 21;\n        } else {\n            return null;\n        }\n    }\n\n    public Url() {\n    }\n\n    public Url(final java.nio.charset.Charset charset) {\n        setCharset(charset);\n    }\n\n    public Url(final org.apache.wicket.request.Url url) {\n        org.apache.wicket.util.lang.Args.notNull(url, \"url\");\n        segments.addAll(url.getSegments());\n        parameters.addAll(url.getQueryParameters());\n        setCharset(url.getCharset());\n    }\n\n    public Url(final java.util.List<java.lang.String> segments, final java.util.List<org.apache.wicket.request.Url.QueryParameter> parameters) {\n        this(segments, parameters, null);\n    }\n\n    public Url(final java.util.List<java.lang.String> segments, final java.nio.charset.Charset charset) {\n        this(segments, java.util.Collections.<org.apache.wicket.request.Url.QueryParameter>emptyList(), charset);\n    }\n\n    public Url(final java.util.List<java.lang.String> segments, final java.util.List<org.apache.wicket.request.Url.QueryParameter> parameters, final java.nio.charset.Charset charset) {\n        org.apache.wicket.util.lang.Args.notNull(segments, \"segments\");\n        org.apache.wicket.util.lang.Args.notNull(parameters, \"parameters\");\n        this.segments.addAll(segments);\n        this.parameters.addAll(parameters);\n        setCharset(charset);\n    }\n\n    public java.nio.charset.Charset getCharset() {\n        if (org.apache.wicket.util.string.Strings.isEmpty(charsetName)) {\n            charsetName = org.apache.wicket.request.Url.DEFAULT_CHARSET_NAME;\n        }\n        if (_charset == null) {\n            _charset = java.nio.charset.Charset.forName(charsetName);\n        }\n        return _charset;\n    }\n\n    private void setCharset(final java.nio.charset.Charset charset) {\n        if (charset == null) {\n            charsetName = \"UTF-8\";\n            _charset = null;\n        } else {\n            charsetName = charset.name();\n            _charset = charset;\n        }\n    }\n\n    public java.util.List<java.lang.String> getSegments() {\n        return segments;\n    }\n\n    public java.util.List<org.apache.wicket.request.Url.QueryParameter> getQueryParameters() {\n        return parameters;\n    }\n\n    public boolean isAbsolute() {\n        return (!getSegments().isEmpty()) && org.apache.wicket.util.string.Strings.isEmpty(getSegments().get(0));\n    }\n\n    public void removeQueryParameters(final java.lang.String name) {\n        for (java.util.Iterator<org.apache.wicket.request.Url.QueryParameter> i = getQueryParameters().iterator(); i.hasNext();) {\n            org.apache.wicket.request.Url.QueryParameter param = i.next();\n            if (org.apache.wicket.util.lang.Objects.equal(name, param.getName())) {\n                i.remove();\n            }\n        }\n    }\n\n    public void removeLeadingSegments(final int count) {\n        org.apache.wicket.util.lang.Args.withinRange(0, segments.size(), count, \"count\");\n        for (int i = 0; i < count; i++) {\n            segments.remove(0);\n        }\n    }\n\n    public void prependLeadingSegments(final java.util.List<java.lang.String> newSegments) {\n        org.apache.wicket.util.lang.Args.notNull(newSegments, \"segments\");\n        segments.addAll(0, newSegments);\n    }\n\n    public void setQueryParameter(final java.lang.String name, final java.lang.Object value) {\n        removeQueryParameters(name);\n        addQueryParameter(name, value);\n    }\n\n    public void addQueryParameter(final java.lang.String name, final java.lang.Object value) {\n        if (value != null) {\n            org.apache.wicket.request.Url.QueryParameter parameter = new org.apache.wicket.request.Url.QueryParameter(name, value.toString());\n            getQueryParameters().add(parameter);\n        }\n    }\n\n    public org.apache.wicket.request.Url.QueryParameter getQueryParameter(final java.lang.String name) {\n        for (org.apache.wicket.request.Url.QueryParameter parameter : parameters) {\n            if (org.apache.wicket.util.lang.Objects.equal(name, parameter.getName())) {\n                return parameter;\n            }\n        }\n        return null;\n    }\n\n    public org.apache.wicket.util.string.StringValue getQueryParameterValue(final java.lang.String name) {\n        org.apache.wicket.request.Url.QueryParameter parameter = getQueryParameter(name);\n        if (parameter == null) {\n            return org.apache.wicket.util.string.StringValue.valueOf(((java.lang.String) (null)));\n        } else {\n            return org.apache.wicket.util.string.StringValue.valueOf(parameter.getValue());\n        }\n    }\n\n    @java.lang.Override\n    public boolean equals(final java.lang.Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if ((obj instanceof org.apache.wicket.request.Url) == false) {\n            return false;\n        }\n        org.apache.wicket.request.Url rhs = ((org.apache.wicket.request.Url) (obj));\n        return getSegments().equals(rhs.getSegments()) && getQueryParameters().equals(rhs.getQueryParameters());\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return org.apache.wicket.util.lang.Objects.hashCode(getSegments(), getQueryParameters());\n    }\n\n    private static java.lang.String encodeSegment(final java.lang.String string, final java.nio.charset.Charset charset) {\n        return UrlEncoder.PATH_INSTANCE.encode(string, charset);\n    }\n\n    private static java.lang.String decodeSegment(final java.lang.String string, final java.nio.charset.Charset charset) {\n        return UrlDecoder.PATH_INSTANCE.decode(string, charset);\n    }\n\n    private static java.lang.String encodeParameter(final java.lang.String string, final java.nio.charset.Charset charset) {\n        return UrlEncoder.QUERY_INSTANCE.encode(string, charset);\n    }\n\n    private static java.lang.String decodeParameter(final java.lang.String string, final java.nio.charset.Charset charset) {\n        return UrlDecoder.QUERY_INSTANCE.decode(string, charset);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return toString(getCharset());\n    }\n\n    public java.lang.String toString(final java.nio.charset.Charset charset) {\n        java.lang.StringBuilder result = new java.lang.StringBuilder();\n        boolean first = true;\n        for (java.lang.String s : getSegments()) {\n            if (!first) {\n                result.append('/');\n            }\n            first = false;\n            result.append(org.apache.wicket.request.Url.encodeSegment(s, charset));\n        }\n        first = true;\n        for (org.apache.wicket.request.Url.QueryParameter p : getQueryParameters()) {\n            if (first) {\n                result.append(\"?\");\n                first = false;\n            } else {\n                result.append(\"&\");\n            }\n            result.append(p.toString(charset));\n        }\n        return result.toString();\n    }\n\n    private boolean isLastSegmentReal() {\n        if (segments.isEmpty()) {\n            return false;\n        }\n        java.lang.String last = segments.get(segments.size() - 1);\n        return ((last.length() > 0) && (!\".\".equals(last))) && (!\"..\".equals(last));\n    }\n\n    private boolean isLastSegmentEmpty(final java.util.List<java.lang.String> segments) {\n        if (segments.isEmpty()) {\n            return false;\n        }\n        java.lang.String last = segments.get(segments.size() - 1);\n        return last.length() == 0;\n    }\n\n    private boolean isLastSegmentEmpty() {\n        return isLastSegmentEmpty(segments);\n    }\n\n    private boolean isAtLeastOnSegmentReal(final java.util.List<java.lang.String> segments) {\n        for (java.lang.String s : segments) {\n            if (((s.length() > 0) && (!\".\".equals(s))) && (!\"..\".equals(s))) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public void concatSegments(java.util.List<java.lang.String> segments) {\n        boolean checkedLastSegment = false;\n        if ((!isAtLeastOnSegmentReal(segments)) && (!isLastSegmentEmpty(segments))) {\n            segments = new java.util.ArrayList<java.lang.String>(segments);\n            segments.add(\"\");\n        }\n        for (java.lang.String s : segments) {\n            if (\".\".equals(s)) {\n                continue;\n            } else if (\"..\".equals(s) && (!this.segments.isEmpty())) {\n                this.segments.remove(this.segments.size() - 1);\n            } else {\n                if (!checkedLastSegment) {\n                    if (isLastSegmentReal() || isLastSegmentEmpty()) {\n                        this.segments.remove(this.segments.size() - 1);\n                    }\n                    checkedLastSegment = true;\n                }\n                this.segments.add(s);\n            }\n        }\n        if ((this.segments.size() == 1) && (this.segments.get(0).length() == 0)) {\n            this.segments.clear();\n        }\n    }\n\n    public static final class QueryParameter implements java.io.Serializable {\n        private static final long serialVersionUID = 1L;\n\n        private final java.lang.String name;\n\n        private final java.lang.String value;\n\n        public QueryParameter(final java.lang.String name, final java.lang.String value) {\n            org.apache.wicket.util.lang.Args.notNull(name, \"name\");\n            org.apache.wicket.util.lang.Args.notNull(value, \"value\");\n            this.name = name;\n            this.value = value;\n        }\n\n        public java.lang.String getName() {\n            return name;\n        }\n\n        public java.lang.String getValue() {\n            return value;\n        }\n\n        @java.lang.Override\n        public boolean equals(final java.lang.Object obj) {\n            if (this == obj) {\n                return true;\n            }\n            if ((obj instanceof org.apache.wicket.request.Url.QueryParameter) == false) {\n                return false;\n            }\n            org.apache.wicket.request.Url.QueryParameter rhs = ((org.apache.wicket.request.Url.QueryParameter) (obj));\n            return org.apache.wicket.util.lang.Objects.equal(getName(), rhs.getName()) && org.apache.wicket.util.lang.Objects.equal(getValue(), rhs.getValue());\n        }\n\n        @java.lang.Override\n        public int hashCode() {\n            return org.apache.wicket.util.lang.Objects.hashCode(getName(), getValue());\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return toString(java.nio.charset.Charset.forName(org.apache.wicket.request.Url.DEFAULT_CHARSET_NAME));\n        }\n\n        public java.lang.String toString(final java.nio.charset.Charset charset) {\n            java.lang.StringBuilder result = new java.lang.StringBuilder();\n            result.append(org.apache.wicket.request.Url.encodeParameter(getName(), charset));\n            if (!org.apache.wicket.util.string.Strings.isEmpty(getValue())) {\n                result.append('=');\n                result.append(org.apache.wicket.request.Url.encodeParameter(getValue(), charset));\n            }\n            return result.toString();\n        }\n    }\n\n    public void resolveRelative(final org.apache.wicket.request.Url relative) {\n        getSegments().remove(getSegments().size() - 1);\n        if ((!relative.getSegments().isEmpty()) && \".\".equals(relative.getSegments().get(0))) {\n            relative.getSegments().remove(0);\n        }\n        while ((!relative.getSegments().isEmpty()) && \"..\".equals(relative.getSegments().get(0))) {\n            relative.getSegments().remove(0);\n            getSegments().remove(getSegments().size() - 1);\n        } \n        getSegments().addAll(relative.getSegments());\n        parameters.clear();\n        parameters.addAll(relative.getQueryParameters());\n    }\n\n    public java.lang.String getProtocol() {\n        return protocol;\n    }\n\n    public void setProtocol(final java.lang.String protocol) {\n        this.protocol = protocol;\n    }\n\n    public java.lang.Integer getPort() {\n        return port;\n    }\n\n    public void setPort(final java.lang.Integer port) {\n        this.port = port;\n    }\n\n    public java.lang.String getHost() {\n        return host;\n    }\n\n    public void setHost(final java.lang.String host) {\n        this.host = host;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "absoluteUrl.substring(0, protocolAt).toLowerCase(java.util.Locale.US)",
            "src_parent": "result.protocol = absoluteUrl.substring(0, protocolAt).toLowerCase(java.util.Locale.US)",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.wicket.request.Url.getDefaultPortForProtocol(result.protocol)",
            "src_parent": "result.port = org.apache.wicket.request.Url.getDefaultPortForProtocol(result.protocol)",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "absoluteUrl.substring(0, protocolAt)",
            "dst_parent": "absoluteUrl.substring(0, protocolAt).toLowerCase(java.util.Locale.US)",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "absoluteUrl.substring(0, protocolAt)",
            "src_parent": "result.protocol = absoluteUrl.substring(0, protocolAt)",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "Url"
    }
  ],
  "id": "wicket_747bccb5"
}