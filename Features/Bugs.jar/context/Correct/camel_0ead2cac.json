{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "final org.apache.camel.AsyncCallback target = new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager)",
            "src_parent": "{\n    final java.lang.String messageId = messageIdExpression.evaluate(exchange, java.lang.String.class);\n    if (messageId == null) {\n        exchange.setException(new org.apache.camel.processor.idempotent.NoMessageIdException(exchange, messageIdExpression));\n        callback.done(true);\n        return true;\n    }\n    boolean newKey;\n    if (eager) {\n        if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n            newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).add(exchange, messageId);\n        } else {\n            newKey = idempotentRepository.add(messageId);\n        }\n    } else if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n        newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).contains(exchange, messageId);\n    } else {\n        newKey = !idempotentRepository.contains(messageId);\n    }\n    if (!newKey) {\n        exchange.setProperty(Exchange.DUPLICATE_MESSAGE, java.lang.Boolean.TRUE);\n        onDuplicate(exchange, messageId);\n        if (skipDuplicate) {\n            org.apache.camel.processor.idempotent.IdempotentConsumer.LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n            callback.done(true);\n            return true;\n        }\n    }\n    final org.apache.camel.spi.Synchronization onCompletion = new org.apache.camel.processor.idempotent.IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure);\n    final org.apache.camel.AsyncCallback target = new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);\n    if (!completionEager) {\n        exchange.addOnCompletion(onCompletion);\n    }\n    return processor.process(exchange, target);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "final org.apache.camel.AsyncCallback target",
            "src_parent": "{\n    final org.apache.camel.AsyncCallback target;\n    final java.lang.String messageId;\n    try {\n        messageId = messageIdExpression.evaluate(exchange, java.lang.String.class);\n        if (messageId == null) {\n            exchange.setException(new org.apache.camel.processor.idempotent.NoMessageIdException(exchange, messageIdExpression));\n            callback.done(true);\n            return true;\n        }\n    } catch (java.lang.Exception e) {\n        exchange.setException(e);\n        callback.done(true);\n        return true;\n    }\n    try {\n        boolean newKey;\n        if (eager) {\n            if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n                newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).add(exchange, messageId);\n            } else {\n                newKey = idempotentRepository.add(messageId);\n            }\n        } else if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n            newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).contains(exchange, messageId);\n        } else {\n            newKey = !idempotentRepository.contains(messageId);\n        }\n        if (!newKey) {\n            exchange.setProperty(Exchange.DUPLICATE_MESSAGE, java.lang.Boolean.TRUE);\n            onDuplicate(exchange, messageId);\n            if (skipDuplicate) {\n                org.apache.camel.processor.idempotent.IdempotentConsumer.LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n                callback.done(true);\n                return true;\n            }\n        }\n        final org.apache.camel.spi.Synchronization onCompletion = new org.apache.camel.processor.idempotent.IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure);\n        target = new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);\n        if (!completionEager) {\n            exchange.addOnCompletion(onCompletion);\n        }\n    } catch (java.lang.Exception e) {\n        exchange.setException(e);\n        callback.done(true);\n        return true;\n    }\n    return processor.process(exchange, target);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "try {\n    messageId = messageIdExpression.evaluate(exchange, java.lang.String.class);\n    if (messageId == null) {\n        exchange.setException(new org.apache.camel.processor.idempotent.NoMessageIdException(exchange, messageIdExpression));\n        callback.done(true);\n        return true;\n    }\n} catch (java.lang.Exception e) {\n    exchange.setException(e);\n    callback.done(true);\n    return true;\n}",
            "src_parent": "{\n    final org.apache.camel.AsyncCallback target;\n    final java.lang.String messageId;\n    try {\n        messageId = messageIdExpression.evaluate(exchange, java.lang.String.class);\n        if (messageId == null) {\n            exchange.setException(new org.apache.camel.processor.idempotent.NoMessageIdException(exchange, messageIdExpression));\n            callback.done(true);\n            return true;\n        }\n    } catch (java.lang.Exception e) {\n        exchange.setException(e);\n        callback.done(true);\n        return true;\n    }\n    try {\n        boolean newKey;\n        if (eager) {\n            if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n                newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).add(exchange, messageId);\n            } else {\n                newKey = idempotentRepository.add(messageId);\n            }\n        } else if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n            newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).contains(exchange, messageId);\n        } else {\n            newKey = !idempotentRepository.contains(messageId);\n        }\n        if (!newKey) {\n            exchange.setProperty(Exchange.DUPLICATE_MESSAGE, java.lang.Boolean.TRUE);\n            onDuplicate(exchange, messageId);\n            if (skipDuplicate) {\n                org.apache.camel.processor.idempotent.IdempotentConsumer.LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n                callback.done(true);\n                return true;\n            }\n        }\n        final org.apache.camel.spi.Synchronization onCompletion = new org.apache.camel.processor.idempotent.IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure);\n        target = new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);\n        if (!completionEager) {\n            exchange.addOnCompletion(onCompletion);\n        }\n    } catch (java.lang.Exception e) {\n        exchange.setException(e);\n        callback.done(true);\n        return true;\n    }\n    return processor.process(exchange, target);\n}",
            "src_parent_type": "Block",
            "src_type": "Try"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "try {\n    boolean newKey;\n    if (eager) {\n        if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n            newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).add(exchange, messageId);\n        } else {\n            newKey = idempotentRepository.add(messageId);\n        }\n    } else if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n        newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).contains(exchange, messageId);\n    } else {\n        newKey = !idempotentRepository.contains(messageId);\n    }\n    if (!newKey) {\n        exchange.setProperty(Exchange.DUPLICATE_MESSAGE, java.lang.Boolean.TRUE);\n        onDuplicate(exchange, messageId);\n        if (skipDuplicate) {\n            org.apache.camel.processor.idempotent.IdempotentConsumer.LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n            callback.done(true);\n            return true;\n        }\n    }\n    final org.apache.camel.spi.Synchronization onCompletion = new org.apache.camel.processor.idempotent.IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure);\n    target = new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);\n    if (!completionEager) {\n        exchange.addOnCompletion(onCompletion);\n    }\n} catch (java.lang.Exception e) {\n    exchange.setException(e);\n    callback.done(true);\n    return true;\n}",
            "src_parent": "{\n    final org.apache.camel.AsyncCallback target;\n    final java.lang.String messageId;\n    try {\n        messageId = messageIdExpression.evaluate(exchange, java.lang.String.class);\n        if (messageId == null) {\n            exchange.setException(new org.apache.camel.processor.idempotent.NoMessageIdException(exchange, messageIdExpression));\n            callback.done(true);\n            return true;\n        }\n    } catch (java.lang.Exception e) {\n        exchange.setException(e);\n        callback.done(true);\n        return true;\n    }\n    try {\n        boolean newKey;\n        if (eager) {\n            if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n                newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).add(exchange, messageId);\n            } else {\n                newKey = idempotentRepository.add(messageId);\n            }\n        } else if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n            newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).contains(exchange, messageId);\n        } else {\n            newKey = !idempotentRepository.contains(messageId);\n        }\n        if (!newKey) {\n            exchange.setProperty(Exchange.DUPLICATE_MESSAGE, java.lang.Boolean.TRUE);\n            onDuplicate(exchange, messageId);\n            if (skipDuplicate) {\n                org.apache.camel.processor.idempotent.IdempotentConsumer.LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n                callback.done(true);\n                return true;\n            }\n        }\n        final org.apache.camel.spi.Synchronization onCompletion = new org.apache.camel.processor.idempotent.IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure);\n        target = new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);\n        if (!completionEager) {\n            exchange.addOnCompletion(onCompletion);\n        }\n    } catch (java.lang.Exception e) {\n        exchange.setException(e);\n        callback.done(true);\n        return true;\n    }\n    return processor.process(exchange, target);\n}",
            "src_parent_type": "Block",
            "src_type": "Try"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_LocalVariable",
            "dst_parent": "final org.apache.camel.AsyncCallback target",
            "dst_parent_type": "LocalVariable",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_LocalVariable",
            "src_parent": "final java.lang.String messageId = messageIdExpression.evaluate(exchange, java.lang.String.class)",
            "src_parent_type": "LocalVariable",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_LocalVariable",
            "dst_parent": "final java.lang.String messageId",
            "dst_parent_type": "LocalVariable",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_LocalVariable",
            "src_parent": "final org.apache.camel.AsyncCallback target = new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager)",
            "src_parent_type": "LocalVariable",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (messageId == null) {\n    exchange.setException(new org.apache.camel.processor.idempotent.NoMessageIdException(exchange, messageIdExpression));\n    callback.done(true);\n    return true;\n}",
            "dst_parent": "{\n    messageId = messageIdExpression.evaluate(exchange, java.lang.String.class);\n    if (messageId == null) {\n        exchange.setException(new org.apache.camel.processor.idempotent.NoMessageIdException(exchange, messageIdExpression));\n        callback.done(true);\n        return true;\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (messageId == null) {\n    exchange.setException(new org.apache.camel.processor.idempotent.NoMessageIdException(exchange, messageIdExpression));\n    callback.done(true);\n    return true;\n}",
            "src_parent": "{\n    final java.lang.String messageId = messageIdExpression.evaluate(exchange, java.lang.String.class);\n    if (messageId == null) {\n        exchange.setException(new org.apache.camel.processor.idempotent.NoMessageIdException(exchange, messageIdExpression));\n        callback.done(true);\n        return true;\n    }\n    boolean newKey;\n    if (eager) {\n        if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n            newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).add(exchange, messageId);\n        } else {\n            newKey = idempotentRepository.add(messageId);\n        }\n    } else if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n        newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).contains(exchange, messageId);\n    } else {\n        newKey = !idempotentRepository.contains(messageId);\n    }\n    if (!newKey) {\n        exchange.setProperty(Exchange.DUPLICATE_MESSAGE, java.lang.Boolean.TRUE);\n        onDuplicate(exchange, messageId);\n        if (skipDuplicate) {\n            org.apache.camel.processor.idempotent.IdempotentConsumer.LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n            callback.done(true);\n            return true;\n        }\n    }\n    final org.apache.camel.spi.Synchronization onCompletion = new org.apache.camel.processor.idempotent.IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure);\n    final org.apache.camel.AsyncCallback target = new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);\n    if (!completionEager) {\n        exchange.addOnCompletion(onCompletion);\n    }\n    return processor.process(exchange, target);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "boolean newKey",
            "dst_parent": "{\n    boolean newKey;\n    if (eager) {\n        if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n            newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).add(exchange, messageId);\n        } else {\n            newKey = idempotentRepository.add(messageId);\n        }\n    } else if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n        newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).contains(exchange, messageId);\n    } else {\n        newKey = !idempotentRepository.contains(messageId);\n    }\n    if (!newKey) {\n        exchange.setProperty(Exchange.DUPLICATE_MESSAGE, java.lang.Boolean.TRUE);\n        onDuplicate(exchange, messageId);\n        if (skipDuplicate) {\n            org.apache.camel.processor.idempotent.IdempotentConsumer.LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n            callback.done(true);\n            return true;\n        }\n    }\n    final org.apache.camel.spi.Synchronization onCompletion = new org.apache.camel.processor.idempotent.IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure);\n    target = new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);\n    if (!completionEager) {\n        exchange.addOnCompletion(onCompletion);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "boolean newKey",
            "src_parent": "{\n    final java.lang.String messageId = messageIdExpression.evaluate(exchange, java.lang.String.class);\n    if (messageId == null) {\n        exchange.setException(new org.apache.camel.processor.idempotent.NoMessageIdException(exchange, messageIdExpression));\n        callback.done(true);\n        return true;\n    }\n    boolean newKey;\n    if (eager) {\n        if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n            newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).add(exchange, messageId);\n        } else {\n            newKey = idempotentRepository.add(messageId);\n        }\n    } else if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n        newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).contains(exchange, messageId);\n    } else {\n        newKey = !idempotentRepository.contains(messageId);\n    }\n    if (!newKey) {\n        exchange.setProperty(Exchange.DUPLICATE_MESSAGE, java.lang.Boolean.TRUE);\n        onDuplicate(exchange, messageId);\n        if (skipDuplicate) {\n            org.apache.camel.processor.idempotent.IdempotentConsumer.LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n            callback.done(true);\n            return true;\n        }\n    }\n    final org.apache.camel.spi.Synchronization onCompletion = new org.apache.camel.processor.idempotent.IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure);\n    final org.apache.camel.AsyncCallback target = new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);\n    if (!completionEager) {\n        exchange.addOnCompletion(onCompletion);\n    }\n    return processor.process(exchange, target);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (eager) {\n    if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n        newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).add(exchange, messageId);\n    } else {\n        newKey = idempotentRepository.add(messageId);\n    }\n} else if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n    newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).contains(exchange, messageId);\n} else {\n    newKey = !idempotentRepository.contains(messageId);\n}",
            "dst_parent": "{\n    boolean newKey;\n    if (eager) {\n        if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n            newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).add(exchange, messageId);\n        } else {\n            newKey = idempotentRepository.add(messageId);\n        }\n    } else if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n        newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).contains(exchange, messageId);\n    } else {\n        newKey = !idempotentRepository.contains(messageId);\n    }\n    if (!newKey) {\n        exchange.setProperty(Exchange.DUPLICATE_MESSAGE, java.lang.Boolean.TRUE);\n        onDuplicate(exchange, messageId);\n        if (skipDuplicate) {\n            org.apache.camel.processor.idempotent.IdempotentConsumer.LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n            callback.done(true);\n            return true;\n        }\n    }\n    final org.apache.camel.spi.Synchronization onCompletion = new org.apache.camel.processor.idempotent.IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure);\n    target = new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);\n    if (!completionEager) {\n        exchange.addOnCompletion(onCompletion);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (eager) {\n    if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n        newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).add(exchange, messageId);\n    } else {\n        newKey = idempotentRepository.add(messageId);\n    }\n} else if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n    newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).contains(exchange, messageId);\n} else {\n    newKey = !idempotentRepository.contains(messageId);\n}",
            "src_parent": "{\n    final java.lang.String messageId = messageIdExpression.evaluate(exchange, java.lang.String.class);\n    if (messageId == null) {\n        exchange.setException(new org.apache.camel.processor.idempotent.NoMessageIdException(exchange, messageIdExpression));\n        callback.done(true);\n        return true;\n    }\n    boolean newKey;\n    if (eager) {\n        if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n            newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).add(exchange, messageId);\n        } else {\n            newKey = idempotentRepository.add(messageId);\n        }\n    } else if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n        newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).contains(exchange, messageId);\n    } else {\n        newKey = !idempotentRepository.contains(messageId);\n    }\n    if (!newKey) {\n        exchange.setProperty(Exchange.DUPLICATE_MESSAGE, java.lang.Boolean.TRUE);\n        onDuplicate(exchange, messageId);\n        if (skipDuplicate) {\n            org.apache.camel.processor.idempotent.IdempotentConsumer.LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n            callback.done(true);\n            return true;\n        }\n    }\n    final org.apache.camel.spi.Synchronization onCompletion = new org.apache.camel.processor.idempotent.IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure);\n    final org.apache.camel.AsyncCallback target = new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);\n    if (!completionEager) {\n        exchange.addOnCompletion(onCompletion);\n    }\n    return processor.process(exchange, target);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (!newKey) {\n    exchange.setProperty(Exchange.DUPLICATE_MESSAGE, java.lang.Boolean.TRUE);\n    onDuplicate(exchange, messageId);\n    if (skipDuplicate) {\n        org.apache.camel.processor.idempotent.IdempotentConsumer.LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n        callback.done(true);\n        return true;\n    }\n}",
            "dst_parent": "{\n    boolean newKey;\n    if (eager) {\n        if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n            newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).add(exchange, messageId);\n        } else {\n            newKey = idempotentRepository.add(messageId);\n        }\n    } else if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n        newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).contains(exchange, messageId);\n    } else {\n        newKey = !idempotentRepository.contains(messageId);\n    }\n    if (!newKey) {\n        exchange.setProperty(Exchange.DUPLICATE_MESSAGE, java.lang.Boolean.TRUE);\n        onDuplicate(exchange, messageId);\n        if (skipDuplicate) {\n            org.apache.camel.processor.idempotent.IdempotentConsumer.LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n            callback.done(true);\n            return true;\n        }\n    }\n    final org.apache.camel.spi.Synchronization onCompletion = new org.apache.camel.processor.idempotent.IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure);\n    target = new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);\n    if (!completionEager) {\n        exchange.addOnCompletion(onCompletion);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (!newKey) {\n    exchange.setProperty(Exchange.DUPLICATE_MESSAGE, java.lang.Boolean.TRUE);\n    onDuplicate(exchange, messageId);\n    if (skipDuplicate) {\n        org.apache.camel.processor.idempotent.IdempotentConsumer.LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n        callback.done(true);\n        return true;\n    }\n}",
            "src_parent": "{\n    final java.lang.String messageId = messageIdExpression.evaluate(exchange, java.lang.String.class);\n    if (messageId == null) {\n        exchange.setException(new org.apache.camel.processor.idempotent.NoMessageIdException(exchange, messageIdExpression));\n        callback.done(true);\n        return true;\n    }\n    boolean newKey;\n    if (eager) {\n        if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n            newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).add(exchange, messageId);\n        } else {\n            newKey = idempotentRepository.add(messageId);\n        }\n    } else if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n        newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).contains(exchange, messageId);\n    } else {\n        newKey = !idempotentRepository.contains(messageId);\n    }\n    if (!newKey) {\n        exchange.setProperty(Exchange.DUPLICATE_MESSAGE, java.lang.Boolean.TRUE);\n        onDuplicate(exchange, messageId);\n        if (skipDuplicate) {\n            org.apache.camel.processor.idempotent.IdempotentConsumer.LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n            callback.done(true);\n            return true;\n        }\n    }\n    final org.apache.camel.spi.Synchronization onCompletion = new org.apache.camel.processor.idempotent.IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure);\n    final org.apache.camel.AsyncCallback target = new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);\n    if (!completionEager) {\n        exchange.addOnCompletion(onCompletion);\n    }\n    return processor.process(exchange, target);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "final org.apache.camel.spi.Synchronization onCompletion = new org.apache.camel.processor.idempotent.IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure)",
            "dst_parent": "{\n    boolean newKey;\n    if (eager) {\n        if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n            newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).add(exchange, messageId);\n        } else {\n            newKey = idempotentRepository.add(messageId);\n        }\n    } else if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n        newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).contains(exchange, messageId);\n    } else {\n        newKey = !idempotentRepository.contains(messageId);\n    }\n    if (!newKey) {\n        exchange.setProperty(Exchange.DUPLICATE_MESSAGE, java.lang.Boolean.TRUE);\n        onDuplicate(exchange, messageId);\n        if (skipDuplicate) {\n            org.apache.camel.processor.idempotent.IdempotentConsumer.LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n            callback.done(true);\n            return true;\n        }\n    }\n    final org.apache.camel.spi.Synchronization onCompletion = new org.apache.camel.processor.idempotent.IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure);\n    target = new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);\n    if (!completionEager) {\n        exchange.addOnCompletion(onCompletion);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "final org.apache.camel.spi.Synchronization onCompletion = new org.apache.camel.processor.idempotent.IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure)",
            "src_parent": "{\n    final java.lang.String messageId = messageIdExpression.evaluate(exchange, java.lang.String.class);\n    if (messageId == null) {\n        exchange.setException(new org.apache.camel.processor.idempotent.NoMessageIdException(exchange, messageIdExpression));\n        callback.done(true);\n        return true;\n    }\n    boolean newKey;\n    if (eager) {\n        if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n            newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).add(exchange, messageId);\n        } else {\n            newKey = idempotentRepository.add(messageId);\n        }\n    } else if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n        newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).contains(exchange, messageId);\n    } else {\n        newKey = !idempotentRepository.contains(messageId);\n    }\n    if (!newKey) {\n        exchange.setProperty(Exchange.DUPLICATE_MESSAGE, java.lang.Boolean.TRUE);\n        onDuplicate(exchange, messageId);\n        if (skipDuplicate) {\n            org.apache.camel.processor.idempotent.IdempotentConsumer.LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n            callback.done(true);\n            return true;\n        }\n    }\n    final org.apache.camel.spi.Synchronization onCompletion = new org.apache.camel.processor.idempotent.IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure);\n    final org.apache.camel.AsyncCallback target = new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);\n    if (!completionEager) {\n        exchange.addOnCompletion(onCompletion);\n    }\n    return processor.process(exchange, target);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (!completionEager) {\n    exchange.addOnCompletion(onCompletion);\n}",
            "dst_parent": "{\n    boolean newKey;\n    if (eager) {\n        if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n            newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).add(exchange, messageId);\n        } else {\n            newKey = idempotentRepository.add(messageId);\n        }\n    } else if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n        newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).contains(exchange, messageId);\n    } else {\n        newKey = !idempotentRepository.contains(messageId);\n    }\n    if (!newKey) {\n        exchange.setProperty(Exchange.DUPLICATE_MESSAGE, java.lang.Boolean.TRUE);\n        onDuplicate(exchange, messageId);\n        if (skipDuplicate) {\n            org.apache.camel.processor.idempotent.IdempotentConsumer.LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n            callback.done(true);\n            return true;\n        }\n    }\n    final org.apache.camel.spi.Synchronization onCompletion = new org.apache.camel.processor.idempotent.IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure);\n    target = new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);\n    if (!completionEager) {\n        exchange.addOnCompletion(onCompletion);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (!completionEager) {\n    exchange.addOnCompletion(onCompletion);\n}",
            "src_parent": "{\n    final java.lang.String messageId = messageIdExpression.evaluate(exchange, java.lang.String.class);\n    if (messageId == null) {\n        exchange.setException(new org.apache.camel.processor.idempotent.NoMessageIdException(exchange, messageIdExpression));\n        callback.done(true);\n        return true;\n    }\n    boolean newKey;\n    if (eager) {\n        if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n            newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).add(exchange, messageId);\n        } else {\n            newKey = idempotentRepository.add(messageId);\n        }\n    } else if (idempotentRepository instanceof org.apache.camel.spi.ExchangeIdempotentRepository) {\n        newKey = ((org.apache.camel.spi.ExchangeIdempotentRepository<java.lang.String>) (idempotentRepository)).contains(exchange, messageId);\n    } else {\n        newKey = !idempotentRepository.contains(messageId);\n    }\n    if (!newKey) {\n        exchange.setProperty(Exchange.DUPLICATE_MESSAGE, java.lang.Boolean.TRUE);\n        onDuplicate(exchange, messageId);\n        if (skipDuplicate) {\n            org.apache.camel.processor.idempotent.IdempotentConsumer.LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n            callback.done(true);\n            return true;\n        }\n    }\n    final org.apache.camel.spi.Synchronization onCompletion = new org.apache.camel.processor.idempotent.IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure);\n    final org.apache.camel.AsyncCallback target = new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);\n    if (!completionEager) {\n        exchange.addOnCompletion(onCompletion);\n    }\n    return processor.process(exchange, target);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "messageIdExpression.evaluate(exchange, java.lang.String.class)",
            "dst_parent": "messageId = messageIdExpression.evaluate(exchange, java.lang.String.class)",
            "dst_parent_type": "Assignment",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "messageIdExpression.evaluate(exchange, java.lang.String.class)",
            "src_parent": "final java.lang.String messageId = messageIdExpression.evaluate(exchange, java.lang.String.class)",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager)",
            "dst_parent": "target = new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager)",
            "dst_parent_type": "Assignment",
            "dst_type": "ConstructorCall",
            "operator": "MOV",
            "src": "new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager)",
            "src_parent": "final org.apache.camel.AsyncCallback target = new org.apache.camel.processor.idempotent.IdempotentConsumer.IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager)",
            "src_parent_type": "LocalVariable",
            "src_type": "ConstructorCall"
          }
        }
      ],
      "file_name": "IdempotentConsumer"
    }
  ],
  "id": "camel_0ead2cac"
}