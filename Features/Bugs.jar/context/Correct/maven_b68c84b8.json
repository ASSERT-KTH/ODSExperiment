{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public static java.util.List mergeDependencyList(java.util.List child, java.util.List parent) {\n    java.util.Map depsMap = new java.util.HashMap();\n    if (parent != null) {\n        for (java.util.Iterator it = parent.iterator(); it.hasNext();) {\n            org.apache.maven.model.Dependency dependency = ((org.apache.maven.model.Dependency) (it.next()));\n            depsMap.put(dependency.getManagementKey(), dependency);\n        }\n    }\n    if (child != null) {\n        for (java.util.Iterator it = child.iterator(); it.hasNext();) {\n            org.apache.maven.model.Dependency dependency = ((org.apache.maven.model.Dependency) (it.next()));\n            depsMap.put(dependency.getManagementKey(), dependency);\n        }\n    }\n    return new java.util.ArrayList(depsMap.values());\n}",
            "src_parent": "public final class ModelUtils {\n    public static void mergePluginLists(org.apache.maven.model.PluginContainer childContainer, org.apache.maven.model.PluginContainer parentContainer, boolean handleAsInheritance) {\n        if ((childContainer == null) || (parentContainer == null)) {\n            return;\n        }\n        java.util.List mergedPlugins = new java.util.ArrayList();\n        java.util.List parentPlugins = parentContainer.getPlugins();\n        if ((parentPlugins != null) && (!parentPlugins.isEmpty())) {\n            java.util.Map assembledPlugins = new java.util.TreeMap();\n            java.util.Map childPlugins = childContainer.getPluginsAsMap();\n            for (java.util.Iterator it = parentPlugins.iterator(); it.hasNext();) {\n                org.apache.maven.model.Plugin parentPlugin = ((org.apache.maven.model.Plugin) (it.next()));\n                java.lang.String parentInherited = parentPlugin.getInherited();\n                if (((!handleAsInheritance) || (parentInherited == null)) || java.lang.Boolean.valueOf(parentInherited).booleanValue()) {\n                    org.apache.maven.model.Plugin assembledPlugin = parentPlugin;\n                    org.apache.maven.model.Plugin childPlugin = ((org.apache.maven.model.Plugin) (childPlugins.get(parentPlugin.getKey())));\n                    if (childPlugin != null) {\n                        assembledPlugin = childPlugin;\n                        org.apache.maven.project.ModelUtils.mergePluginDefinitions(childPlugin, parentPlugin, handleAsInheritance);\n                    }\n                    if (handleAsInheritance && (parentInherited == null)) {\n                        assembledPlugin.unsetInheritanceApplied();\n                    }\n                    mergedPlugins.add(assembledPlugin);\n                }\n            }\n            for (java.util.Iterator it = childPlugins.values().iterator(); it.hasNext();) {\n                org.apache.maven.model.Plugin childPlugin = ((org.apache.maven.model.Plugin) (it.next()));\n                if (!assembledPlugins.containsKey(childPlugin.getKey())) {\n                    mergedPlugins.add(childPlugin);\n                }\n            }\n            childContainer.setPlugins(mergedPlugins);\n            childContainer.flushPluginMap();\n        }\n    }\n\n    public static void mergeReportPluginLists(org.apache.maven.model.Reporting child, org.apache.maven.model.Reporting parent, boolean handleAsInheritance) {\n        if ((child == null) || (parent == null)) {\n            return;\n        }\n        java.util.List parentPlugins = parent.getPlugins();\n        if ((parentPlugins != null) && (!parentPlugins.isEmpty())) {\n            java.util.Map assembledPlugins = new java.util.TreeMap();\n            java.util.Map childPlugins = child.getReportPluginsAsMap();\n            for (java.util.Iterator it = parentPlugins.iterator(); it.hasNext();) {\n                org.apache.maven.model.ReportPlugin parentPlugin = ((org.apache.maven.model.ReportPlugin) (it.next()));\n                java.lang.String parentInherited = parentPlugin.getInherited();\n                if (((!handleAsInheritance) || (parentInherited == null)) || java.lang.Boolean.valueOf(parentInherited).booleanValue()) {\n                    org.apache.maven.model.ReportPlugin assembledPlugin = parentPlugin;\n                    org.apache.maven.model.ReportPlugin childPlugin = ((org.apache.maven.model.ReportPlugin) (childPlugins.get(parentPlugin.getKey())));\n                    if (childPlugin != null) {\n                        assembledPlugin = childPlugin;\n                        org.apache.maven.project.ModelUtils.mergeReportPluginDefinitions(childPlugin, parentPlugin, handleAsInheritance);\n                    }\n                    if (handleAsInheritance && (parentInherited == null)) {\n                        assembledPlugin.unsetInheritanceApplied();\n                    }\n                    assembledPlugins.put(assembledPlugin.getKey(), assembledPlugin);\n                }\n            }\n            for (java.util.Iterator it = childPlugins.values().iterator(); it.hasNext();) {\n                org.apache.maven.model.ReportPlugin childPlugin = ((org.apache.maven.model.ReportPlugin) (it.next()));\n                if (!assembledPlugins.containsKey(childPlugin.getKey())) {\n                    assembledPlugins.put(childPlugin.getKey(), childPlugin);\n                }\n            }\n            child.setPlugins(new java.util.ArrayList(assembledPlugins.values()));\n            child.flushReportPluginMap();\n        }\n    }\n\n    public static void mergePluginDefinitions(org.apache.maven.model.Plugin child, org.apache.maven.model.Plugin parent, boolean handleAsInheritance) {\n        if ((child == null) || (parent == null)) {\n            return;\n        }\n        if (parent.isExtensions()) {\n            child.setExtensions(true);\n        }\n        if ((child.getVersion() == null) && (parent.getVersion() != null)) {\n            child.setVersion(parent.getVersion());\n        }\n        org.codehaus.plexus.util.xml.Xpp3Dom childConfiguration = ((org.codehaus.plexus.util.xml.Xpp3Dom) (child.getConfiguration()));\n        org.codehaus.plexus.util.xml.Xpp3Dom parentConfiguration = ((org.codehaus.plexus.util.xml.Xpp3Dom) (parent.getConfiguration()));\n        childConfiguration = org.codehaus.plexus.util.xml.Xpp3Dom.mergeXpp3Dom(childConfiguration, parentConfiguration);\n        child.setConfiguration(childConfiguration);\n        child.setDependencies(org.apache.maven.project.ModelUtils.mergeDependencyList(child.getDependencies(), parent.getDependencies()));\n        java.lang.String parentInherited = parent.getInherited();\n        boolean parentIsInherited = (parentInherited == null) || java.lang.Boolean.valueOf(parentInherited).booleanValue();\n        java.util.List parentExecutions = parent.getExecutions();\n        if ((parentExecutions != null) && (!parentExecutions.isEmpty())) {\n            java.util.List mergedExecutions = new java.util.ArrayList();\n            java.util.Map assembledExecutions = new java.util.TreeMap();\n            java.util.Map childExecutions = child.getExecutionsAsMap();\n            for (java.util.Iterator it = parentExecutions.iterator(); it.hasNext();) {\n                org.apache.maven.model.PluginExecution parentExecution = ((org.apache.maven.model.PluginExecution) (it.next()));\n                if ((!handleAsInheritance) || parentIsInherited) {\n                    org.apache.maven.model.PluginExecution assembled = parentExecution;\n                    org.apache.maven.model.PluginExecution childExecution = ((org.apache.maven.model.PluginExecution) (childExecutions.get(parentExecution.getId())));\n                    if (childExecution != null) {\n                        org.apache.maven.project.ModelUtils.mergePluginExecutionDefinitions(childExecution, parentExecution);\n                        assembled = childExecution;\n                    } else if (handleAsInheritance && (parentInherited == null)) {\n                        parentExecution.unsetInheritanceApplied();\n                    }\n                    assembledExecutions.put(assembled.getId(), assembled);\n                    mergedExecutions.add(assembled);\n                }\n            }\n            for (java.util.Iterator it = child.getExecutions().iterator(); it.hasNext();) {\n                org.apache.maven.model.PluginExecution childExecution = ((org.apache.maven.model.PluginExecution) (it.next()));\n                if (!assembledExecutions.containsKey(childExecution.getId())) {\n                    mergedExecutions.add(childExecution);\n                }\n            }\n            child.setExecutions(mergedExecutions);\n            child.flushExecutionMap();\n        }\n    }\n\n    public static void mergeReportPluginDefinitions(org.apache.maven.model.ReportPlugin child, org.apache.maven.model.ReportPlugin parent, boolean handleAsInheritance) {\n        if ((child == null) || (parent == null)) {\n            return;\n        }\n        if ((child.getVersion() == null) && (parent.getVersion() != null)) {\n            child.setVersion(parent.getVersion());\n        }\n        java.lang.String parentInherited = parent.getInherited();\n        boolean parentIsInherited = (parentInherited == null) || java.lang.Boolean.valueOf(parentInherited).booleanValue();\n        java.util.List parentReportSets = parent.getReportSets();\n        if ((parentReportSets != null) && (!parentReportSets.isEmpty())) {\n            java.util.Map assembledReportSets = new java.util.TreeMap();\n            java.util.Map childReportSets = child.getReportSetsAsMap();\n            for (java.util.Iterator it = parentReportSets.iterator(); it.hasNext();) {\n                org.apache.maven.model.ReportSet parentReportSet = ((org.apache.maven.model.ReportSet) (it.next()));\n                if ((!handleAsInheritance) || parentIsInherited) {\n                    org.apache.maven.model.ReportSet assembledReportSet = parentReportSet;\n                    org.apache.maven.model.ReportSet childReportSet = ((org.apache.maven.model.ReportSet) (childReportSets.get(parentReportSet.getId())));\n                    if (childReportSet != null) {\n                        org.apache.maven.project.ModelUtils.mergeReportSetDefinitions(childReportSet, parentReportSet);\n                        assembledReportSet = childReportSet;\n                    } else if (handleAsInheritance && (parentInherited == null)) {\n                        parentReportSet.unsetInheritanceApplied();\n                    }\n                    assembledReportSets.put(assembledReportSet.getId(), assembledReportSet);\n                }\n            }\n            for (java.util.Iterator it = childReportSets.entrySet().iterator(); it.hasNext();) {\n                java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n                java.lang.String id = ((java.lang.String) (entry.getKey()));\n                if (!assembledReportSets.containsKey(id)) {\n                    assembledReportSets.put(id, entry.getValue());\n                }\n            }\n            child.setReportSets(new java.util.ArrayList(assembledReportSets.values()));\n            child.flushReportSetMap();\n        }\n    }\n\n    private static void mergePluginExecutionDefinitions(org.apache.maven.model.PluginExecution child, org.apache.maven.model.PluginExecution parent) {\n        if (child.getPhase() == null) {\n            child.setPhase(parent.getPhase());\n        }\n        java.util.List parentGoals = parent.getGoals();\n        java.util.List childGoals = child.getGoals();\n        java.util.List goals = new java.util.ArrayList();\n        if ((childGoals != null) && (!childGoals.isEmpty())) {\n            goals.addAll(childGoals);\n        }\n        if (parentGoals != null) {\n            for (java.util.Iterator goalIterator = parentGoals.iterator(); goalIterator.hasNext();) {\n                java.lang.String goal = ((java.lang.String) (goalIterator.next()));\n                if (!goals.contains(goal)) {\n                    goals.add(goal);\n                }\n            }\n        }\n        child.setGoals(goals);\n        org.codehaus.plexus.util.xml.Xpp3Dom childConfiguration = ((org.codehaus.plexus.util.xml.Xpp3Dom) (child.getConfiguration()));\n        org.codehaus.plexus.util.xml.Xpp3Dom parentConfiguration = ((org.codehaus.plexus.util.xml.Xpp3Dom) (parent.getConfiguration()));\n        childConfiguration = org.codehaus.plexus.util.xml.Xpp3Dom.mergeXpp3Dom(childConfiguration, parentConfiguration);\n        child.setConfiguration(childConfiguration);\n    }\n\n    private static void mergeReportSetDefinitions(org.apache.maven.model.ReportSet child, org.apache.maven.model.ReportSet parent) {\n        java.util.List parentReports = parent.getReports();\n        java.util.List childReports = child.getReports();\n        java.util.List reports = new java.util.ArrayList();\n        if ((childReports != null) && (!childReports.isEmpty())) {\n            reports.addAll(childReports);\n        }\n        if (parentReports != null) {\n            for (java.util.Iterator i = parentReports.iterator(); i.hasNext();) {\n                java.lang.String report = ((java.lang.String) (i.next()));\n                if (!reports.contains(report)) {\n                    reports.add(report);\n                }\n            }\n        }\n        child.setReports(reports);\n        org.codehaus.plexus.util.xml.Xpp3Dom childConfiguration = ((org.codehaus.plexus.util.xml.Xpp3Dom) (child.getConfiguration()));\n        org.codehaus.plexus.util.xml.Xpp3Dom parentConfiguration = ((org.codehaus.plexus.util.xml.Xpp3Dom) (parent.getConfiguration()));\n        childConfiguration = org.codehaus.plexus.util.xml.Xpp3Dom.mergeXpp3Dom(childConfiguration, parentConfiguration);\n        child.setConfiguration(childConfiguration);\n    }\n\n    public static org.apache.maven.model.Model cloneModel(org.apache.maven.model.Model model) {\n        org.apache.maven.model.Model newModel = new org.apache.maven.model.Model();\n        org.apache.maven.project.inheritance.ModelInheritanceAssembler assembler = new org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler();\n        newModel.setModelVersion(model.getModelVersion());\n        newModel.setName(model.getName());\n        newModel.setParent(org.apache.maven.project.ModelUtils.cloneParent(model.getParent()));\n        newModel.setVersion(model.getVersion());\n        newModel.setArtifactId(model.getArtifactId());\n        newModel.setProperties(new java.util.Properties(model.getProperties()));\n        newModel.setGroupId(model.getGroupId());\n        newModel.setPackaging(model.getPackaging());\n        newModel.setModules(org.apache.maven.project.ModelUtils.cloneModules(model.getModules()));\n        newModel.setProfiles(org.apache.maven.project.ModelUtils.cloneProfiles(model.getProfiles()));\n        assembler.copyModel(newModel, model);\n        return newModel;\n    }\n\n    private static java.util.List cloneProfiles(java.util.List profiles) {\n        if (profiles == null) {\n            return profiles;\n        }\n        java.util.List newProfiles = new java.util.ArrayList(profiles.size());\n        for (java.util.Iterator it = profiles.iterator(); it.hasNext();) {\n            org.apache.maven.model.Profile profile = ((org.apache.maven.model.Profile) (it.next()));\n            org.apache.maven.model.Profile newProfile = new org.apache.maven.model.Profile();\n            newProfile.setId(profile.getId());\n            newProfile.setActivation(org.apache.maven.project.ModelUtils.cloneProfileActivation(profile.getActivation()));\n            newProfile.setBuild(org.apache.maven.project.ModelUtils.cloneProfileBuild(profile.getBuild()));\n            newProfile.setDependencies(org.apache.maven.project.ModelUtils.cloneProfileDependencies(profile.getDependencies()));\n            org.apache.maven.model.DependencyManagement dm = profile.getDependencyManagement();\n            if (dm != null) {\n                org.apache.maven.model.DependencyManagement newDM = new org.apache.maven.model.DependencyManagement();\n                newDM.setDependencies(org.apache.maven.project.ModelUtils.cloneProfileDependencies(dm.getDependencies()));\n                newProfile.setDependencyManagement(newDM);\n            }\n            newProfile.setDistributionManagement(org.apache.maven.project.ModelUtils.cloneProfileDistributionManagement(profile.getDistributionManagement()));\n            java.util.List modules = profile.getModules();\n            if ((modules != null) && (!modules.isEmpty())) {\n                newProfile.setModules(new java.util.ArrayList(modules));\n            }\n            newProfile.setPluginRepositories(org.apache.maven.project.ModelUtils.cloneProfileRepositories(profile.getPluginRepositories()));\n            java.util.Properties props = profile.getProperties();\n            if (props != null) {\n                java.util.Properties newProps = new java.util.Properties();\n                newProps.putAll(props);\n                newProfile.setProperties(newProps);\n            }\n            newProfile.setReporting(org.apache.maven.project.ModelUtils.cloneProfileReporting(profile.getReporting()));\n            newProfile.setReports(profile.getReports());\n            newProfile.setRepositories(org.apache.maven.project.ModelUtils.cloneProfileRepositories(profile.getRepositories()));\n            newProfile.setSource(profile.getSource());\n            newProfiles.add(newProfile);\n        }\n        return newProfiles;\n    }\n\n    private static org.apache.maven.model.Reporting cloneProfileReporting(org.apache.maven.model.Reporting reporting) {\n        org.apache.maven.model.Reporting newR = null;\n        if (reporting != null) {\n            newR = new org.apache.maven.model.Reporting();\n            newR.setOutputDirectory(reporting.getOutputDirectory());\n            java.util.List plugins = reporting.getPlugins();\n            if (plugins != null) {\n                java.util.List newP = new java.util.ArrayList(plugins.size());\n                for (java.util.Iterator it = plugins.iterator(); it.hasNext();) {\n                    org.apache.maven.model.ReportPlugin plugin = ((org.apache.maven.model.ReportPlugin) (it.next()));\n                    org.apache.maven.model.ReportPlugin newPlugin = new org.apache.maven.model.ReportPlugin();\n                    newPlugin.setArtifactId(plugin.getArtifactId());\n                    newPlugin.setGroupId(plugin.getGroupId());\n                    newPlugin.setVersion(plugin.getVersion());\n                    newPlugin.setInherited(plugin.getInherited());\n                    newPlugin.setReportSets(org.apache.maven.project.ModelUtils.cloneReportSets(plugin.getReportSets()));\n                    newPlugin.setConfiguration(plugin.getConfiguration());\n                    newP.add(newPlugin);\n                }\n                newR.setPlugins(newP);\n            }\n        }\n        return newR;\n    }\n\n    private static java.util.List cloneReportSets(java.util.List sets) {\n        java.util.List newSets = null;\n        if (sets != null) {\n            newSets = new java.util.ArrayList(sets.size());\n            for (java.util.Iterator it = sets.iterator(); it.hasNext();) {\n                org.apache.maven.model.ReportSet set = ((org.apache.maven.model.ReportSet) (it.next()));\n                org.apache.maven.model.ReportSet newSet = new org.apache.maven.model.ReportSet();\n                newSet.setConfiguration(set.getConfiguration());\n                newSet.setId(set.getId());\n                newSet.setInherited(set.getInherited());\n                newSet.setReports(new java.util.ArrayList(set.getReports()));\n                newSets.add(newSet);\n            }\n        }\n        return newSets;\n    }\n\n    private static java.util.List cloneProfileRepositories(java.util.List repos) {\n        java.util.List newRepos = null;\n        if (repos != null) {\n            newRepos = new java.util.ArrayList(repos.size());\n            for (java.util.Iterator it = repos.iterator(); it.hasNext();) {\n                org.apache.maven.model.Repository repo = ((org.apache.maven.model.Repository) (it.next()));\n                org.apache.maven.model.Repository newRepo = new org.apache.maven.model.Repository();\n                newRepo.setId(repo.getId());\n                newRepo.setLayout(repo.getLayout());\n                newRepo.setName(repo.getName());\n                org.apache.maven.model.RepositoryPolicy releasePolicy = repo.getReleases();\n                if (releasePolicy != null) {\n                    org.apache.maven.model.RepositoryPolicy newPolicy = new org.apache.maven.model.RepositoryPolicy();\n                    newPolicy.setEnabled(releasePolicy.isEnabled());\n                    newPolicy.setChecksumPolicy(releasePolicy.getChecksumPolicy());\n                    newPolicy.setUpdatePolicy(releasePolicy.getUpdatePolicy());\n                    newRepo.setReleases(newPolicy);\n                }\n                org.apache.maven.model.RepositoryPolicy snapPolicy = repo.getSnapshots();\n                if (snapPolicy != null) {\n                    org.apache.maven.model.RepositoryPolicy newPolicy = new org.apache.maven.model.RepositoryPolicy();\n                    newPolicy.setEnabled(snapPolicy.isEnabled());\n                    newPolicy.setChecksumPolicy(snapPolicy.getChecksumPolicy());\n                    newPolicy.setUpdatePolicy(snapPolicy.getUpdatePolicy());\n                    newRepo.setSnapshots(newPolicy);\n                }\n                newRepo.setUrl(repo.getUrl());\n                newRepos.add(newRepo);\n            }\n        }\n        return newRepos;\n    }\n\n    private static org.apache.maven.model.DistributionManagement cloneProfileDistributionManagement(org.apache.maven.model.DistributionManagement dm) {\n        org.apache.maven.model.DistributionManagement newDM = null;\n        if (dm != null) {\n            newDM = new org.apache.maven.model.DistributionManagement();\n            newDM.setDownloadUrl(dm.getDownloadUrl());\n            newDM.setStatus(dm.getStatus());\n            org.apache.maven.model.Relocation relocation = dm.getRelocation();\n            if (relocation != null) {\n                org.apache.maven.model.Relocation newR = new org.apache.maven.model.Relocation();\n                newR.setArtifactId(relocation.getArtifactId());\n                newR.setGroupId(relocation.getGroupId());\n                newR.setMessage(relocation.getMessage());\n                newR.setVersion(relocation.getVersion());\n                newDM.setRelocation(newR);\n            }\n            org.apache.maven.model.RepositoryBase repo = dm.getRepository();\n            if (repo != null) {\n                org.apache.maven.model.DeploymentRepository newRepo = new org.apache.maven.model.DeploymentRepository();\n                newRepo.setId(repo.getId());\n                newRepo.setLayout(repo.getLayout());\n                newRepo.setName(repo.getName());\n                newRepo.setUrl(repo.getUrl());\n                newDM.setRepository(newRepo);\n            }\n            org.apache.maven.model.Site site = dm.getSite();\n            if (site != null) {\n                org.apache.maven.model.Site newSite = new org.apache.maven.model.Site();\n                newSite.setId(site.getId());\n                newSite.setName(site.getName());\n                newSite.setUrl(site.getUrl());\n                newDM.setSite(newSite);\n            }\n            org.apache.maven.model.RepositoryBase sRepo = dm.getSnapshotRepository();\n            if (sRepo != null) {\n                org.apache.maven.model.DeploymentRepository newRepo = new org.apache.maven.model.DeploymentRepository();\n                newRepo.setId(sRepo.getId());\n                newRepo.setLayout(sRepo.getLayout());\n                newRepo.setName(sRepo.getName());\n                newRepo.setUrl(sRepo.getUrl());\n                newDM.setSnapshotRepository(newRepo);\n            }\n        }\n        return newDM;\n    }\n\n    private static java.util.List cloneProfileDependencies(java.util.List dependencies) {\n        java.util.List newDependencies = null;\n        if (dependencies != null) {\n            newDependencies = new java.util.ArrayList(dependencies.size());\n            for (java.util.Iterator it = dependencies.iterator(); it.hasNext();) {\n                org.apache.maven.model.Dependency dep = ((org.apache.maven.model.Dependency) (it.next()));\n                org.apache.maven.model.Dependency newDep = new org.apache.maven.model.Dependency();\n                newDep.setArtifactId(dep.getArtifactId());\n                newDep.setClassifier(dep.getClassifier());\n                newDep.setExclusions(org.apache.maven.project.ModelUtils.cloneDependencyExclusions(dep.getExclusions()));\n                newDep.setGroupId(dep.getGroupId());\n                newDep.setScope(dep.getScope());\n                newDep.setSystemPath(dep.getSystemPath());\n                newDep.setType(dep.getType());\n                newDep.setVersion(dep.getVersion());\n                newDependencies.add(newDep);\n            }\n        }\n        return newDependencies;\n    }\n\n    private static java.util.List cloneDependencyExclusions(java.util.List ex) {\n        java.util.List newEx = null;\n        if (ex != null) {\n            newEx = new java.util.ArrayList(ex.size());\n            for (java.util.Iterator it = ex.iterator(); it.hasNext();) {\n                org.apache.maven.model.Exclusion exclusion = ((org.apache.maven.model.Exclusion) (it.next()));\n                org.apache.maven.model.Exclusion newExclusion = new org.apache.maven.model.Exclusion();\n                newExclusion.setArtifactId(exclusion.getArtifactId());\n                newExclusion.setGroupId(exclusion.getGroupId());\n                newEx.add(newExclusion);\n            }\n        }\n        return newEx;\n    }\n\n    private static org.apache.maven.model.BuildBase cloneProfileBuild(org.apache.maven.model.BuildBase build) {\n        org.apache.maven.model.BuildBase newBuild = null;\n        if (build != null) {\n            newBuild = new org.apache.maven.model.BuildBase();\n            newBuild.setDefaultGoal(build.getDefaultGoal());\n            newBuild.setDirectory(build.getDirectory());\n            newBuild.setFinalName(build.getFinalName());\n            newBuild.setPluginManagement(org.apache.maven.project.ModelUtils.cloneProfilePluginManagement(build.getPluginManagement()));\n            newBuild.setPlugins(org.apache.maven.project.ModelUtils.cloneProfilePlugins(build.getPlugins()));\n            newBuild.setResources(org.apache.maven.project.ModelUtils.cloneProfileResources(build.getResources()));\n            newBuild.setTestResources(org.apache.maven.project.ModelUtils.cloneProfileResources(build.getTestResources()));\n        }\n        return newBuild;\n    }\n\n    private static java.util.List cloneProfileResources(java.util.List resources) {\n        java.util.List newResources = null;\n        if (resources != null) {\n            newResources = new java.util.ArrayList(resources.size());\n            for (java.util.Iterator it = resources.iterator(); it.hasNext();) {\n                org.apache.maven.model.Resource resource = ((org.apache.maven.model.Resource) (it.next()));\n                org.apache.maven.model.Resource newResource = new org.apache.maven.model.Resource();\n                newResource.setDirectory(resource.getDirectory());\n                newResource.setExcludes(new java.util.ArrayList(resource.getExcludes()));\n                newResource.setFiltering(resource.isFiltering());\n                newResource.setIncludes(new java.util.ArrayList(resource.getIncludes()));\n                newResource.setTargetPath(resource.getTargetPath());\n                newResources.add(newResource);\n            }\n        }\n        return newResources;\n    }\n\n    private static org.apache.maven.model.PluginManagement cloneProfilePluginManagement(org.apache.maven.model.PluginManagement pluginManagement) {\n        org.apache.maven.model.PluginManagement newPM = null;\n        if (pluginManagement != null) {\n            newPM = new org.apache.maven.model.PluginManagement();\n            java.util.List plugins = pluginManagement.getPlugins();\n            newPM.setPlugins(org.apache.maven.project.ModelUtils.cloneProfilePlugins(plugins));\n        }\n        return newPM;\n    }\n\n    private static java.util.List cloneProfilePlugins(java.util.List plugins) {\n        java.util.List newPlugins = null;\n        if (plugins != null) {\n            newPlugins = new java.util.ArrayList(plugins.size());\n            for (java.util.Iterator it = plugins.iterator(); it.hasNext();) {\n                org.apache.maven.model.Plugin plugin = ((org.apache.maven.model.Plugin) (it.next()));\n                org.apache.maven.model.Plugin newPlugin = new org.apache.maven.model.Plugin();\n                newPlugin.setArtifactId(plugin.getArtifactId());\n                newPlugin.setExtensions(plugin.isExtensions());\n                newPlugin.setGroupId(plugin.getGroupId());\n                newPlugin.setInherited(plugin.getInherited());\n                newPlugin.setVersion(plugin.getVersion());\n                newPlugin.setConfiguration(plugin.getConfiguration());\n                newPlugin.setExecutions(org.apache.maven.project.ModelUtils.cloneExecutions(plugin.getExecutions()));\n                newPlugins.add(newPlugin);\n            }\n        }\n        return newPlugins;\n    }\n\n    private static java.util.List cloneExecutions(java.util.List executions) {\n        java.util.List newExecs = null;\n        if (executions != null) {\n            newExecs = new java.util.ArrayList(executions.size());\n            for (java.util.Iterator it = executions.iterator(); it.hasNext();) {\n                org.apache.maven.model.PluginExecution exec = ((org.apache.maven.model.PluginExecution) (it.next()));\n                org.apache.maven.model.PluginExecution newExec = new org.apache.maven.model.PluginExecution();\n                newExec.setConfiguration(exec.getConfiguration());\n                newExec.setId(exec.getId());\n                newExec.setInherited(exec.getInherited());\n                newExec.setPhase(exec.getPhase());\n                java.util.List goals = exec.getGoals();\n                if ((goals != null) && (!goals.isEmpty())) {\n                    newExec.setGoals(new java.util.ArrayList(goals));\n                }\n                newExecs.add(newExec);\n            }\n        }\n        return newExecs;\n    }\n\n    private static org.apache.maven.model.Activation cloneProfileActivation(org.apache.maven.model.Activation activation) {\n        org.apache.maven.model.Activation newActivation = null;\n        if (activation != null) {\n            newActivation = new org.apache.maven.model.Activation();\n            newActivation.setActiveByDefault(activation.isActiveByDefault());\n            org.apache.maven.model.ActivationFile af = activation.getFile();\n            if (af != null) {\n                org.apache.maven.model.ActivationFile afNew = new org.apache.maven.model.ActivationFile();\n                afNew.setExists(af.getExists());\n                afNew.setMissing(af.getMissing());\n                newActivation.setFile(afNew);\n            }\n            newActivation.setJdk(activation.getJdk());\n            org.apache.maven.model.ActivationProperty ap = activation.getProperty();\n            if (ap != null) {\n                org.apache.maven.model.ActivationProperty newAp = new org.apache.maven.model.ActivationProperty();\n                newAp.setName(ap.getName());\n                newAp.setValue(ap.getValue());\n                newActivation.setProperty(newAp);\n            }\n        }\n        return newActivation;\n    }\n\n    private static java.util.List cloneModules(java.util.List modules) {\n        if (modules == null) {\n            return modules;\n        }\n        return new java.util.ArrayList(modules);\n    }\n\n    private static org.apache.maven.model.Parent cloneParent(org.apache.maven.model.Parent parent) {\n        if (parent == null) {\n            return parent;\n        }\n        org.apache.maven.model.Parent newParent = new org.apache.maven.model.Parent();\n        newParent.setArtifactId(parent.getArtifactId());\n        newParent.setGroupId(parent.getGroupId());\n        newParent.setRelativePath(parent.getRelativePath());\n        newParent.setVersion(parent.getVersion());\n        return newParent;\n    }\n\n    public static java.util.List mergeRepositoryLists(java.util.List dominant, java.util.List recessive) {\n        java.util.List repositories = new java.util.ArrayList();\n        for (java.util.Iterator it = dominant.iterator(); it.hasNext();) {\n            org.apache.maven.model.Repository repository = ((org.apache.maven.model.Repository) (it.next()));\n            repositories.add(repository);\n        }\n        for (java.util.Iterator it = recessive.iterator(); it.hasNext();) {\n            org.apache.maven.model.Repository repository = ((org.apache.maven.model.Repository) (it.next()));\n            if (!repositories.contains(repository)) {\n                repositories.add(repository);\n            }\n        }\n        return repositories;\n    }\n\n    public static void mergeExtensionLists(org.apache.maven.model.Build childBuild, org.apache.maven.model.Build parentBuild) {\n        for (java.util.Iterator i = parentBuild.getExtensions().iterator(); i.hasNext();) {\n            org.apache.maven.model.Extension e = ((org.apache.maven.model.Extension) (i.next()));\n            if (!childBuild.getExtensions().contains(e)) {\n                childBuild.addExtension(e);\n            }\n        }\n    }\n\n    public static void mergeResourceLists(java.util.List childResources, java.util.List parentResources) {\n        for (java.util.Iterator i = parentResources.iterator(); i.hasNext();) {\n            org.apache.maven.model.Resource r = ((org.apache.maven.model.Resource) (i.next()));\n            if (!childResources.contains(r)) {\n                childResources.add(r);\n            }\n        }\n    }\n\n    public static void mergeFilterLists(java.util.List childFilters, java.util.List parentFilters) {\n        for (java.util.Iterator i = parentFilters.iterator(); i.hasNext();) {\n            java.lang.String f = ((java.lang.String) (i.next()));\n            if (!childFilters.contains(f)) {\n                childFilters.add(f);\n            }\n        }\n    }\n\n    public static java.util.List mergeDependencyList(java.util.List child, java.util.List parent) {\n        java.util.Map depsMap = new java.util.HashMap();\n        if (parent != null) {\n            for (java.util.Iterator it = parent.iterator(); it.hasNext();) {\n                org.apache.maven.model.Dependency dependency = ((org.apache.maven.model.Dependency) (it.next()));\n                depsMap.put(dependency.getManagementKey(), dependency);\n            }\n        }\n        if (child != null) {\n            for (java.util.Iterator it = child.iterator(); it.hasNext();) {\n                org.apache.maven.model.Dependency dependency = ((org.apache.maven.model.Dependency) (it.next()));\n                depsMap.put(dependency.getManagementKey(), dependency);\n            }\n        }\n        return new java.util.ArrayList(depsMap.values());\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "child.setDependencies(org.apache.maven.project.ModelUtils.mergeDependencyList(child.getDependencies(), parent.getDependencies()))",
            "src_parent": "{\n    if ((child == null) || (parent == null)) {\n        return;\n    }\n    if (parent.isExtensions()) {\n        child.setExtensions(true);\n    }\n    if ((child.getVersion() == null) && (parent.getVersion() != null)) {\n        child.setVersion(parent.getVersion());\n    }\n    org.codehaus.plexus.util.xml.Xpp3Dom childConfiguration = ((org.codehaus.plexus.util.xml.Xpp3Dom) (child.getConfiguration()));\n    org.codehaus.plexus.util.xml.Xpp3Dom parentConfiguration = ((org.codehaus.plexus.util.xml.Xpp3Dom) (parent.getConfiguration()));\n    childConfiguration = org.codehaus.plexus.util.xml.Xpp3Dom.mergeXpp3Dom(childConfiguration, parentConfiguration);\n    child.setConfiguration(childConfiguration);\n    child.setDependencies(org.apache.maven.project.ModelUtils.mergeDependencyList(child.getDependencies(), parent.getDependencies()));\n    java.lang.String parentInherited = parent.getInherited();\n    boolean parentIsInherited = (parentInherited == null) || java.lang.Boolean.valueOf(parentInherited).booleanValue();\n    java.util.List parentExecutions = parent.getExecutions();\n    if ((parentExecutions != null) && (!parentExecutions.isEmpty())) {\n        java.util.List mergedExecutions = new java.util.ArrayList();\n        java.util.Map assembledExecutions = new java.util.TreeMap();\n        java.util.Map childExecutions = child.getExecutionsAsMap();\n        for (java.util.Iterator it = parentExecutions.iterator(); it.hasNext();) {\n            org.apache.maven.model.PluginExecution parentExecution = ((org.apache.maven.model.PluginExecution) (it.next()));\n            if ((!handleAsInheritance) || parentIsInherited) {\n                org.apache.maven.model.PluginExecution assembled = parentExecution;\n                org.apache.maven.model.PluginExecution childExecution = ((org.apache.maven.model.PluginExecution) (childExecutions.get(parentExecution.getId())));\n                if (childExecution != null) {\n                    org.apache.maven.project.ModelUtils.mergePluginExecutionDefinitions(childExecution, parentExecution);\n                    assembled = childExecution;\n                } else if (handleAsInheritance && (parentInherited == null)) {\n                    parentExecution.unsetInheritanceApplied();\n                }\n                assembledExecutions.put(assembled.getId(), assembled);\n                mergedExecutions.add(assembled);\n            }\n        }\n        for (java.util.Iterator it = child.getExecutions().iterator(); it.hasNext();) {\n            org.apache.maven.model.PluginExecution childExecution = ((org.apache.maven.model.PluginExecution) (it.next()));\n            if (!assembledExecutions.containsKey(childExecution.getId())) {\n                mergedExecutions.add(childExecution);\n            }\n        }\n        child.setExecutions(mergedExecutions);\n        child.flushExecutionMap();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "ModelUtils"
    }
  ],
  "id": "maven_b68c84b8"
}