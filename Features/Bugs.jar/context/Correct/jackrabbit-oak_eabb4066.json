{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "subqueryLimit",
            "dst_parent": "left.setLimit(subqueryLimit)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "limit",
            "src_parent": "left.setLimit(limit)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "subqueryLimit",
            "dst_parent": "right.setLimit(subqueryLimit)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "limit",
            "src_parent": "right.setLimit(limit)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private void applyLimitOffset() {\n    long subqueryLimit = org.apache.jackrabbit.oak.query.QueryImpl.saturatedAdd(limit, offset);\n    left.setLimit(subqueryLimit);\n    right.setLimit(subqueryLimit);\n}",
            "src_parent": "public class UnionQueryImpl implements org.apache.jackrabbit.oak.query.Query {\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.query.QueryImpl.class);\n\n    private final boolean unionAll;\n\n    private final org.apache.jackrabbit.oak.query.Query left;\n\n    private final org.apache.jackrabbit.oak.query.Query right;\n\n    private org.apache.jackrabbit.oak.query.ast.ColumnImpl[] columns;\n\n    private org.apache.jackrabbit.oak.query.ast.OrderingImpl[] orderings;\n\n    private boolean explain;\n\n    private boolean measure;\n\n    private long limit = java.lang.Long.MAX_VALUE;\n\n    private long offset;\n\n    private long size = -1;\n\n    private final org.apache.jackrabbit.oak.query.QueryEngineSettings settings;\n\n    private boolean isInternal;\n\n    UnionQueryImpl(boolean unionAll, org.apache.jackrabbit.oak.query.Query left, org.apache.jackrabbit.oak.query.Query right, org.apache.jackrabbit.oak.query.QueryEngineSettings settings) {\n        this.unionAll = unionAll;\n        this.left = left;\n        this.right = right;\n        this.settings = settings;\n    }\n\n    @java.lang.Override\n    public void setExecutionContext(org.apache.jackrabbit.oak.query.ExecutionContext context) {\n        left.setExecutionContext(context);\n        right.setExecutionContext(context);\n    }\n\n    @java.lang.Override\n    public void setOrderings(org.apache.jackrabbit.oak.query.ast.OrderingImpl[] orderings) {\n        if (orderings == null) {\n            left.setOrderings(null);\n            right.setOrderings(null);\n            return;\n        }\n        org.apache.jackrabbit.oak.query.ast.OrderingImpl[] l = new org.apache.jackrabbit.oak.query.ast.OrderingImpl[orderings.length];\n        org.apache.jackrabbit.oak.query.ast.OrderingImpl[] r = new org.apache.jackrabbit.oak.query.ast.OrderingImpl[orderings.length];\n        for (int i = 0; i < orderings.length; i++) {\n            org.apache.jackrabbit.oak.query.ast.OrderingImpl o = orderings[i];\n            l[i] = o.createCopy();\n            r[i] = o.createCopy();\n        }\n        left.setOrderings(l);\n        right.setOrderings(r);\n        this.orderings = orderings;\n    }\n\n    @java.lang.Override\n    public void setLimit(long limit) {\n        this.limit = limit;\n        applyLimitOffset();\n    }\n\n    @java.lang.Override\n    public void setOffset(long offset) {\n        this.offset = offset;\n        applyLimitOffset();\n    }\n\n    private void applyLimitOffset() {\n        long subqueryLimit = org.apache.jackrabbit.oak.query.QueryImpl.saturatedAdd(limit, offset);\n        left.setLimit(subqueryLimit);\n        right.setLimit(subqueryLimit);\n    }\n\n    @java.lang.Override\n    public void bindValue(java.lang.String key, org.apache.jackrabbit.oak.api.PropertyValue value) {\n        left.bindValue(key, value);\n        right.bindValue(key, value);\n    }\n\n    @java.lang.Override\n    public void setTraversalEnabled(boolean traversal) {\n        left.setTraversalEnabled(traversal);\n        right.setTraversalEnabled(traversal);\n    }\n\n    @java.lang.Override\n    public void prepare() {\n        left.prepare();\n        right.prepare();\n    }\n\n    @java.lang.Override\n    public double getEstimatedCost() {\n        return left.getEstimatedCost() + right.getEstimatedCost();\n    }\n\n    @java.lang.Override\n    public java.util.List<java.lang.String> getBindVariableNames() {\n        java.util.HashSet<java.lang.String> set = new java.util.HashSet<java.lang.String>();\n        set.addAll(left.getBindVariableNames());\n        set.addAll(right.getBindVariableNames());\n        return new java.util.ArrayList<java.lang.String>(set);\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.query.ast.ColumnImpl[] getColumns() {\n        if (columns != null) {\n            return columns;\n        }\n        return left.getColumns();\n    }\n\n    @java.lang.Override\n    public java.lang.String[] getSelectorNames() {\n        return left.getSelectorNames();\n    }\n\n    @java.lang.Override\n    public int getSelectorIndex(java.lang.String selectorName) {\n        return left.getSelectorIndex(selectorName);\n    }\n\n    @java.lang.Override\n    public long getSize() {\n        return size;\n    }\n\n    @java.lang.Override\n    public long getSize(org.apache.jackrabbit.oak.api.Result.SizePrecision precision, long max) {\n        left.executeQuery().getRows().iterator().hasNext();\n        right.executeQuery().getRows().iterator().hasNext();\n        long a = left.getSize(precision, max);\n        long b = right.getSize(precision, max);\n        if ((a < 0) || (b < 0)) {\n            return -1;\n        }\n        long total = org.apache.jackrabbit.oak.query.QueryImpl.saturatedAdd(a, b);\n        return java.lang.Math.min(limit, total);\n    }\n\n    @java.lang.Override\n    public void setExplain(boolean explain) {\n        this.explain = explain;\n    }\n\n    @java.lang.Override\n    public void setMeasure(boolean measure) {\n        left.setMeasure(measure);\n        right.setMeasure(measure);\n        this.measure = measure;\n    }\n\n    @java.lang.Override\n    public void init() {\n        left.init();\n        right.init();\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        java.lang.StringBuilder buff = new java.lang.StringBuilder();\n        buff.append(left.toString());\n        buff.append(\" union \");\n        if (unionAll) {\n            buff.append(\"all \");\n        }\n        buff.append(right.toString());\n        if (orderings != null) {\n            buff.append(\" order by \");\n            int i = 0;\n            for (org.apache.jackrabbit.oak.query.ast.OrderingImpl o : orderings) {\n                if ((i++) > 0) {\n                    buff.append(\", \");\n                }\n                buff.append(o);\n            }\n        }\n        return buff.toString();\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.api.Result executeQuery() {\n        return new org.apache.jackrabbit.oak.query.ResultImpl(this);\n    }\n\n    @java.lang.Override\n    public java.lang.String getPlan() {\n        java.lang.StringBuilder buff = new java.lang.StringBuilder();\n        buff.append(left.getPlan());\n        buff.append(\" union \");\n        if (unionAll) {\n            buff.append(\"all \");\n        }\n        buff.append(right.getPlan());\n        return buff.toString();\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.api.Tree getTree(java.lang.String path) {\n        return left.getTree(path);\n    }\n\n    @java.lang.Override\n    public boolean isMeasureOrExplainEnabled() {\n        return explain || measure;\n    }\n\n    @java.lang.Override\n    public int getColumnIndex(java.lang.String columnName) {\n        if (columns == null) {\n            columns = left.getColumns();\n        }\n        return org.apache.jackrabbit.oak.query.QueryImpl.getColumnIndex(columns, columnName);\n    }\n\n    @java.lang.Override\n    public java.util.Iterator<org.apache.jackrabbit.oak.query.ResultRowImpl> getRows() {\n        prepare();\n        if (explain) {\n            java.lang.String plan = getPlan();\n            columns = new org.apache.jackrabbit.oak.query.ast.ColumnImpl[]{ new org.apache.jackrabbit.oak.query.ast.ColumnImpl(\"explain\", \"plan\", \"plan\") };\n            org.apache.jackrabbit.oak.query.ResultRowImpl r = new org.apache.jackrabbit.oak.query.ResultRowImpl(this, org.apache.jackrabbit.oak.api.Tree.EMPTY_ARRAY, new org.apache.jackrabbit.oak.api.PropertyValue[]{ org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(plan) }, null, null);\n            return java.util.Arrays.asList(r).iterator();\n        }\n        if (org.apache.jackrabbit.oak.query.UnionQueryImpl.LOG.isDebugEnabled()) {\n            if (isInternal) {\n                org.apache.jackrabbit.oak.query.UnionQueryImpl.LOG.trace(\"query union plan {}\", getPlan());\n            } else {\n                org.apache.jackrabbit.oak.query.UnionQueryImpl.LOG.debug(\"query union plan {}\", getPlan());\n            }\n        }\n        boolean distinct = !unionAll;\n        java.util.Comparator<org.apache.jackrabbit.oak.query.ResultRowImpl> orderBy = org.apache.jackrabbit.oak.query.ResultRowImpl.getComparator(orderings);\n        java.util.Iterator<org.apache.jackrabbit.oak.query.ResultRowImpl> it;\n        final java.util.Iterator<org.apache.jackrabbit.oak.query.ResultRowImpl> leftRows = left.getRows();\n        final java.util.Iterator<org.apache.jackrabbit.oak.query.ResultRowImpl> rightRows = right.getRows();\n        java.util.Iterator<org.apache.jackrabbit.oak.query.ResultRowImpl> leftIter = leftRows;\n        java.util.Iterator<org.apache.jackrabbit.oak.query.ResultRowImpl> rightIter = rightRows;\n        if (measure) {\n            leftIter = ((org.apache.jackrabbit.oak.query.QueryImpl.MeasuringIterator) (leftRows)).getDelegate();\n            rightIter = ((org.apache.jackrabbit.oak.query.QueryImpl.MeasuringIterator) (rightRows)).getDelegate();\n        }\n        if (isSortedByIndex()) {\n            it = org.apache.jackrabbit.oak.query.FilterIterators.newCombinedFilter(com.google.common.collect.Iterators.mergeSorted(com.google.common.collect.ImmutableList.of(leftIter, rightIter), orderBy), distinct, limit, offset, null, settings);\n        } else {\n            it = org.apache.jackrabbit.oak.query.FilterIterators.newCombinedFilter(com.google.common.collect.Iterators.concat(leftIter, rightIter), distinct, limit, offset, orderBy, settings);\n        }\n        if (measure) {\n            it = new org.apache.jackrabbit.oak.query.QueryImpl.MeasuringIterator(this, it) {\n                org.apache.jackrabbit.oak.query.QueryImpl.MeasuringIterator left = ((org.apache.jackrabbit.oak.query.QueryImpl.MeasuringIterator) (leftRows));\n\n                org.apache.jackrabbit.oak.query.QueryImpl.MeasuringIterator right = ((org.apache.jackrabbit.oak.query.QueryImpl.MeasuringIterator) (rightRows));\n\n                @java.lang.Override\n                protected void setColumns(org.apache.jackrabbit.oak.query.ast.ColumnImpl[] cols) {\n                    columns = cols;\n                    left.setColumns(cols);\n                    right.setColumns(cols);\n                }\n\n                @java.lang.Override\n                protected java.util.Map<java.lang.String, java.lang.Long> getSelectorScanCount() {\n                    java.util.Map<java.lang.String, java.lang.Long> leftSelectorScan = left.getSelectorScanCount();\n                    java.util.Map<java.lang.String, java.lang.Long> rightSelectorScan = right.getSelectorScanCount();\n                    java.util.Map<java.lang.String, java.lang.Long> unionScan = com.google.common.collect.Maps.newHashMap(leftSelectorScan);\n                    for (java.lang.String key : rightSelectorScan.keySet()) {\n                        if (unionScan.containsKey(key)) {\n                            unionScan.put(key, rightSelectorScan.get(key) + unionScan.get(key));\n                        } else {\n                            unionScan.put(key, rightSelectorScan.get(key));\n                        }\n                    }\n                    return unionScan;\n                }\n\n                @java.lang.Override\n                protected long getReadCount() {\n                    return left.getReadCount() + right.getReadCount();\n                }\n            };\n        }\n        return it;\n    }\n\n    @java.lang.Override\n    public void setInternal(boolean isInternal) {\n        this.isInternal = isInternal;\n    }\n\n    @java.lang.Override\n    public boolean isSortedByIndex() {\n        return left.isSortedByIndex() && right.isSortedByIndex();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "applyLimitOffset()",
            "src_parent": "{\n    this.limit = limit;\n    applyLimitOffset();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "applyLimitOffset()",
            "src_parent": "{\n    this.offset = offset;\n    applyLimitOffset();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "left.setLimit(subqueryLimit)",
            "dst_parent": "{\n    long subqueryLimit = org.apache.jackrabbit.oak.query.QueryImpl.saturatedAdd(limit, offset);\n    left.setLimit(subqueryLimit);\n    right.setLimit(subqueryLimit);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "left.setLimit(limit)",
            "src_parent": "{\n    this.limit = limit;\n    left.setLimit(limit);\n    right.setLimit(limit);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "right.setLimit(subqueryLimit)",
            "dst_parent": "{\n    long subqueryLimit = org.apache.jackrabbit.oak.query.QueryImpl.saturatedAdd(limit, offset);\n    left.setLimit(subqueryLimit);\n    right.setLimit(subqueryLimit);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "right.setLimit(limit)",
            "src_parent": "{\n    this.limit = limit;\n    left.setLimit(limit);\n    right.setLimit(limit);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "UnionQueryImpl"
    }
  ],
  "id": "jackrabbit-oak_eabb4066"
}