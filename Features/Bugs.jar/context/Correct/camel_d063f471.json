{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "@java.lang.Override\npublic synchronized void failedExchange(org.apache.camel.Exchange exchange) {\n    org.apache.camel.management.mbean.ManagedRoute.InFlightKey key = exchangesInFlightKeys.remove(exchange.getExchangeId());\n    if (key != null) {\n        exchangesInFlightStartTimestamps.remove(key);\n    }\n    super.failedExchange(exchange);\n}",
            "src_parent": "@org.apache.camel.api.management.ManagedResource(description = \"Managed Route\")\npublic class ManagedRoute extends org.apache.camel.management.mbean.ManagedPerformanceCounter implements org.apache.camel.TimerListener , org.apache.camel.api.management.mbean.ManagedRouteMBean {\n    public static final java.lang.String VALUE_UNKNOWN = \"Unknown\";\n\n    protected final org.apache.camel.Route route;\n\n    protected final java.lang.String description;\n\n    protected final org.apache.camel.model.ModelCamelContext context;\n\n    private final org.apache.camel.management.mbean.LoadTriplet load = new org.apache.camel.management.mbean.LoadTriplet();\n\n    private final java.util.concurrent.ConcurrentSkipListMap<org.apache.camel.management.mbean.ManagedRoute.InFlightKey, java.lang.Long> exchangesInFlightStartTimestamps = new java.util.concurrent.ConcurrentSkipListMap<org.apache.camel.management.mbean.ManagedRoute.InFlightKey, java.lang.Long>();\n\n    private final java.util.concurrent.ConcurrentHashMap<java.lang.String, org.apache.camel.management.mbean.ManagedRoute.InFlightKey> exchangesInFlightKeys = new java.util.concurrent.ConcurrentHashMap<java.lang.String, org.apache.camel.management.mbean.ManagedRoute.InFlightKey>();\n\n    public ManagedRoute(org.apache.camel.model.ModelCamelContext context, org.apache.camel.Route route) {\n        this.route = route;\n        this.context = context;\n        this.description = route.getDescription();\n        boolean enabled = context.getManagementStrategy().getStatisticsLevel() != org.apache.camel.ManagementStatisticsLevel.Off;\n        setStatisticsEnabled(enabled);\n    }\n\n    public org.apache.camel.Route getRoute() {\n        return route;\n    }\n\n    public org.apache.camel.CamelContext getContext() {\n        return context;\n    }\n\n    public java.lang.String getRouteId() {\n        java.lang.String id = route.getId();\n        if (id == null) {\n            id = org.apache.camel.management.mbean.ManagedRoute.VALUE_UNKNOWN;\n        }\n        return id;\n    }\n\n    public java.lang.String getDescription() {\n        return description;\n    }\n\n    @java.lang.Override\n    public java.lang.String getEndpointUri() {\n        if (route.getEndpoint() != null) {\n            return route.getEndpoint().getEndpointUri();\n        }\n        return org.apache.camel.management.mbean.ManagedRoute.VALUE_UNKNOWN;\n    }\n\n    public java.lang.String getState() {\n        org.apache.camel.ServiceStatus status = context.getRouteStatus(route.getId());\n        if (status == null) {\n            status = org.apache.camel.ServiceStatus.Stopped;\n        }\n        return status.name();\n    }\n\n    public java.lang.Integer getInflightExchanges() {\n        return ((int) (super.getExchangesInflight()));\n    }\n\n    public java.lang.String getCamelId() {\n        return context.getName();\n    }\n\n    public java.lang.String getCamelManagementName() {\n        return context.getManagementName();\n    }\n\n    public java.lang.Boolean getTracing() {\n        return route.getRouteContext().isTracing();\n    }\n\n    public void setTracing(java.lang.Boolean tracing) {\n        route.getRouteContext().setTracing(tracing);\n    }\n\n    public java.lang.Boolean getMessageHistory() {\n        return route.getRouteContext().isMessageHistory();\n    }\n\n    public java.lang.String getRoutePolicyList() {\n        java.util.List<org.apache.camel.spi.RoutePolicy> policyList = route.getRouteContext().getRoutePolicyList();\n        if ((policyList == null) || policyList.isEmpty()) {\n            return \"\";\n        }\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        for (int i = 0; i < policyList.size(); i++) {\n            org.apache.camel.spi.RoutePolicy policy = policyList.get(i);\n            sb.append(policy.getClass().getSimpleName());\n            sb.append(\"(\").append(org.apache.camel.util.ObjectHelper.getIdentityHashCode(policy)).append(\")\");\n            if (i < (policyList.size() - 1)) {\n                sb.append(\", \");\n            }\n        }\n        return sb.toString();\n    }\n\n    public java.lang.String getLoad01() {\n        double load1 = load.getLoad1();\n        if (java.lang.Double.isNaN(load1)) {\n            return \"\";\n        } else {\n            return java.lang.String.format(\"%.2f\", load1);\n        }\n    }\n\n    public java.lang.String getLoad05() {\n        double load5 = load.getLoad5();\n        if (java.lang.Double.isNaN(load5)) {\n            return \"\";\n        } else {\n            return java.lang.String.format(\"%.2f\", load5);\n        }\n    }\n\n    public java.lang.String getLoad15() {\n        double load15 = load.getLoad15();\n        if (java.lang.Double.isNaN(load15)) {\n            return \"\";\n        } else {\n            return java.lang.String.format(\"%.2f\", load15);\n        }\n    }\n\n    @java.lang.Override\n    public void onTimer() {\n        load.update(getInflightExchanges());\n    }\n\n    public void start() throws java.lang.Exception {\n        if (!context.getStatus().isStarted()) {\n            throw new java.lang.IllegalArgumentException(\"CamelContext is not started\");\n        }\n        context.startRoute(getRouteId());\n    }\n\n    public void stop() throws java.lang.Exception {\n        if (!context.getStatus().isStarted()) {\n            throw new java.lang.IllegalArgumentException(\"CamelContext is not started\");\n        }\n        context.stopRoute(getRouteId());\n    }\n\n    public void stop(long timeout) throws java.lang.Exception {\n        if (!context.getStatus().isStarted()) {\n            throw new java.lang.IllegalArgumentException(\"CamelContext is not started\");\n        }\n        context.stopRoute(getRouteId(), timeout, java.util.concurrent.TimeUnit.SECONDS);\n    }\n\n    public boolean stop(java.lang.Long timeout, java.lang.Boolean abortAfterTimeout) throws java.lang.Exception {\n        if (!context.getStatus().isStarted()) {\n            throw new java.lang.IllegalArgumentException(\"CamelContext is not started\");\n        }\n        return context.stopRoute(getRouteId(), timeout, java.util.concurrent.TimeUnit.SECONDS, abortAfterTimeout);\n    }\n\n    public void shutdown() throws java.lang.Exception {\n        if (!context.getStatus().isStarted()) {\n            throw new java.lang.IllegalArgumentException(\"CamelContext is not started\");\n        }\n        java.lang.String routeId = getRouteId();\n        context.stopRoute(routeId);\n        context.removeRoute(routeId);\n    }\n\n    public void shutdown(long timeout) throws java.lang.Exception {\n        if (!context.getStatus().isStarted()) {\n            throw new java.lang.IllegalArgumentException(\"CamelContext is not started\");\n        }\n        java.lang.String routeId = getRouteId();\n        context.stopRoute(routeId, timeout, java.util.concurrent.TimeUnit.SECONDS);\n        context.removeRoute(routeId);\n    }\n\n    public boolean remove() throws java.lang.Exception {\n        if (!context.getStatus().isStarted()) {\n            throw new java.lang.IllegalArgumentException(\"CamelContext is not started\");\n        }\n        return context.removeRoute(getRouteId());\n    }\n\n    public java.lang.String dumpRouteAsXml() throws java.lang.Exception {\n        java.lang.String id = route.getId();\n        org.apache.camel.model.RouteDefinition def = context.getRouteDefinition(id);\n        if (def != null) {\n            return org.apache.camel.model.ModelHelper.dumpModelAsXml(context, def);\n        }\n        return null;\n    }\n\n    public void updateRouteFromXml(java.lang.String xml) throws java.lang.Exception {\n        org.apache.camel.model.RouteDefinition def = org.apache.camel.model.ModelHelper.createModelFromXml(context, xml, org.apache.camel.model.RouteDefinition.class);\n        if (def == null) {\n            return;\n        }\n        if (org.apache.camel.util.ObjectHelper.isEmpty(def.getId())) {\n            def.setId(getRouteId());\n        } else if (!def.getId().equals(getRouteId())) {\n            throw new java.lang.IllegalArgumentException(((\"Cannot update route from XML as routeIds does not match. routeId: \" + getRouteId()) + \", routeId from XML: \") + def.getId());\n        }\n        context.addRouteDefinition(def);\n    }\n\n    public java.lang.String dumpRouteStatsAsXml(boolean fullStats, boolean includeProcessors) throws java.lang.Exception {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        java.lang.Long processorAccumulatedTime = 0L;\n        if (includeProcessors) {\n            sb.append(\"  <processorStats>\\n\");\n            javax.management.MBeanServer server = getContext().getManagementStrategy().getManagementAgent().getMBeanServer();\n            if (server != null) {\n                java.lang.String prefix = (getContext().getManagementStrategy().getManagementAgent().getIncludeHostName()) ? \"*/\" : \"\";\n                javax.management.ObjectName query = javax.management.ObjectName.getInstance(((\"org.apache.camel:context=\" + prefix) + getContext().getManagementName()) + \",type=processors,*\");\n                java.util.Set<javax.management.ObjectName> names = server.queryNames(query, null);\n                java.util.List<org.apache.camel.api.management.mbean.ManagedProcessorMBean> mps = new java.util.ArrayList<org.apache.camel.api.management.mbean.ManagedProcessorMBean>();\n                for (javax.management.ObjectName on : names) {\n                    org.apache.camel.api.management.mbean.ManagedProcessorMBean processor = context.getManagementStrategy().getManagementAgent().newProxyClient(on, org.apache.camel.api.management.mbean.ManagedProcessorMBean.class);\n                    if (getRouteId().equals(processor.getRouteId())) {\n                        mps.add(processor);\n                    }\n                }\n                java.util.Collections.sort(mps, new org.apache.camel.management.mbean.ManagedRoute.OrderProcessorMBeans());\n                java.util.Map<java.lang.String, java.lang.Long> accumulatedTimes = new java.util.HashMap<java.lang.String, java.lang.Long>();\n                java.util.Collections.reverse(mps);\n                for (org.apache.camel.api.management.mbean.ManagedProcessorMBean processor : mps) {\n                    processorAccumulatedTime += processor.getTotalProcessingTime();\n                    accumulatedTimes.put(processor.getProcessorId(), processorAccumulatedTime);\n                }\n                java.util.Collections.reverse(mps);\n                for (org.apache.camel.api.management.mbean.ManagedProcessorMBean processor : mps) {\n                    sb.append(\"    <processorStat\").append(java.lang.String.format(\" id=\\\"%s\\\" index=\\\"%s\\\" state=\\\"%s\\\"\", processor.getProcessorId(), processor.getIndex(), processor.getState()));\n                    java.lang.Long accTime = accumulatedTimes.get(processor.getProcessorId());\n                    if (accTime != null) {\n                        sb.append(\" accumulatedProcessingTime=\\\"\").append(accTime).append(\"\\\"\");\n                    }\n                    sb.append(\" \").append(processor.dumpStatsAsXml(fullStats).substring(7)).append(\"\\n\");\n                }\n            }\n            sb.append(\"  </processorStats>\\n\");\n        }\n        long routeSelfTime = getTotalProcessingTime() - processorAccumulatedTime;\n        if (routeSelfTime < 0) {\n            routeSelfTime = 0;\n        }\n        java.lang.StringBuilder answer = new java.lang.StringBuilder();\n        answer.append(\"<routeStat\").append(java.lang.String.format(\" id=\\\"%s\\\"\", route.getId())).append(java.lang.String.format(\" state=\\\"%s\\\"\", getState()));\n        java.lang.String stat = dumpStatsAsXml(fullStats);\n        answer.append(\" exchangesInflight=\\\"\").append(getInflightExchanges()).append(\"\\\"\");\n        answer.append(\" selfProcessingTime=\\\"\").append(routeSelfTime).append(\"\\\"\");\n        org.apache.camel.management.mbean.ManagedRoute.InFlightKey oldestInflightEntry = getOldestInflightEntry();\n        if (oldestInflightEntry == null) {\n            answer.append(\" oldestInflightExchangeId=\\\"\\\"\");\n            answer.append(\" oldestInflightDuration=\\\"\\\"\");\n        } else {\n            answer.append(\" oldestInflightExchangeId=\\\"\").append(oldestInflightEntry.exchangeId).append(\"\\\"\");\n            answer.append(\" oldestInflightDuration=\\\"\").append(java.lang.System.currentTimeMillis() - oldestInflightEntry.timeStamp).append(\"\\\"\");\n        }\n        answer.append(\" \").append(stat.substring(7, stat.length() - 2)).append(\">\\n\");\n        if (includeProcessors) {\n            answer.append(sb);\n        }\n        answer.append(\"</routeStat>\");\n        return answer.toString();\n    }\n\n    public void reset(boolean includeProcessors) throws java.lang.Exception {\n        reset();\n        if (includeProcessors) {\n            javax.management.MBeanServer server = getContext().getManagementStrategy().getManagementAgent().getMBeanServer();\n            if (server != null) {\n                java.lang.String prefix = (getContext().getManagementStrategy().getManagementAgent().getIncludeHostName()) ? \"*/\" : \"\";\n                javax.management.ObjectName query = javax.management.ObjectName.getInstance(((\"org.apache.camel:context=\" + prefix) + getContext().getManagementName()) + \",type=processors,*\");\n                javax.management.QueryExp queryExp = javax.management.Query.match(new javax.management.AttributeValueExp(\"RouteId\"), new javax.management.StringValueExp(getRouteId()));\n                java.util.Set<javax.management.ObjectName> names = server.queryNames(query, queryExp);\n                for (javax.management.ObjectName name : names) {\n                    server.invoke(name, \"reset\", null, null);\n                }\n            }\n        }\n    }\n\n    public java.lang.String createRouteStaticEndpointJson() {\n        return getContext().createRouteStaticEndpointJson(getRouteId());\n    }\n\n    @java.lang.Override\n    public java.lang.String createRouteStaticEndpointJson(boolean includeDynamic) {\n        return getContext().createRouteStaticEndpointJson(getRouteId(), includeDynamic);\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        return (this == o) || (((o != null) && (getClass() == o.getClass())) && route.equals(((org.apache.camel.management.mbean.ManagedRoute) (o)).route));\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return route.hashCode();\n    }\n\n    private org.apache.camel.management.mbean.ManagedRoute.InFlightKey getOldestInflightEntry() {\n        java.util.Map.Entry<org.apache.camel.management.mbean.ManagedRoute.InFlightKey, java.lang.Long> entry = exchangesInFlightStartTimestamps.firstEntry();\n        if (entry != null) {\n            return entry.getKey();\n        }\n        return null;\n    }\n\n    public java.lang.Long getOldestInflightDuration() {\n        org.apache.camel.management.mbean.ManagedRoute.InFlightKey oldest = getOldestInflightEntry();\n        if (oldest == null) {\n            return null;\n        }\n        return java.lang.System.currentTimeMillis() - oldest.timeStamp;\n    }\n\n    public java.lang.String getOldestInflightExchangeId() {\n        org.apache.camel.management.mbean.ManagedRoute.InFlightKey oldest = getOldestInflightEntry();\n        if (oldest == null) {\n            return null;\n        }\n        return oldest.exchangeId;\n    }\n\n    @java.lang.Override\n    public void init(org.apache.camel.spi.ManagementStrategy strategy) {\n        exchangesInFlightStartTimestamps.clear();\n        super.init(strategy);\n    }\n\n    @java.lang.Override\n    public synchronized void processExchange(org.apache.camel.Exchange exchange) {\n        org.apache.camel.management.mbean.ManagedRoute.InFlightKey key = new org.apache.camel.management.mbean.ManagedRoute.InFlightKey(java.lang.System.currentTimeMillis(), exchange.getExchangeId());\n        exchangesInFlightKeys.put(exchange.getExchangeId(), key);\n        exchangesInFlightStartTimestamps.put(key, key.timeStamp);\n        super.processExchange(exchange);\n    }\n\n    @java.lang.Override\n    public synchronized void completedExchange(org.apache.camel.Exchange exchange, long time) {\n        org.apache.camel.management.mbean.ManagedRoute.InFlightKey key = exchangesInFlightKeys.remove(exchange.getExchangeId());\n        if (key != null) {\n            exchangesInFlightStartTimestamps.remove(key);\n        }\n        super.completedExchange(exchange, time);\n    }\n\n    @java.lang.Override\n    public synchronized void failedExchange(org.apache.camel.Exchange exchange) {\n        org.apache.camel.management.mbean.ManagedRoute.InFlightKey key = exchangesInFlightKeys.remove(exchange.getExchangeId());\n        if (key != null) {\n            exchangesInFlightStartTimestamps.remove(key);\n        }\n        super.failedExchange(exchange);\n    }\n\n    private static class InFlightKey implements java.lang.Comparable<org.apache.camel.management.mbean.ManagedRoute.InFlightKey> {\n        private final java.lang.Long timeStamp;\n\n        private final java.lang.String exchangeId;\n\n        InFlightKey(java.lang.Long timeStamp, java.lang.String exchangeId) {\n            this.timeStamp = timeStamp;\n            this.exchangeId = exchangeId;\n        }\n\n        @java.lang.Override\n        public int compareTo(org.apache.camel.management.mbean.ManagedRoute.InFlightKey o) {\n            int compare = java.lang.Long.compare(timeStamp, o.timeStamp);\n            if (compare == 0) {\n                return exchangeId.compareTo(o.exchangeId);\n            }\n            return compare;\n        }\n\n        @java.lang.Override\n        public boolean equals(java.lang.Object o) {\n            if (this == o) {\n                return true;\n            }\n            if ((o == null) || (getClass() != o.getClass())) {\n                return false;\n            }\n            org.apache.camel.management.mbean.ManagedRoute.InFlightKey that = ((org.apache.camel.management.mbean.ManagedRoute.InFlightKey) (o));\n            if (!exchangeId.equals(that.exchangeId)) {\n                return false;\n            }\n            if (!timeStamp.equals(that.timeStamp)) {\n                return false;\n            }\n            return true;\n        }\n\n        @java.lang.Override\n        public int hashCode() {\n            int result = timeStamp.hashCode();\n            result = (31 * result) + exchangeId.hashCode();\n            return result;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return exchangeId;\n        }\n    }\n\n    private static final class OrderProcessorMBeans implements java.util.Comparator<org.apache.camel.api.management.mbean.ManagedProcessorMBean> {\n        @java.lang.Override\n        public int compare(org.apache.camel.api.management.mbean.ManagedProcessorMBean o1, org.apache.camel.api.management.mbean.ManagedProcessorMBean o2) {\n            return o1.getIndex().compareTo(o2.getIndex());\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "super.init(strategy)",
            "dst_parent": "{\n    exchangesInFlightStartTimestamps.clear();\n    super.init(strategy);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "super.init(strategy)",
            "src_parent": "{\n    super.init(strategy);\n    exchangesInFlightStartTimestamps.clear();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "this.exchangeId = exchangeId",
            "dst_parent": "{\n    this.timeStamp = timeStamp;\n    this.exchangeId = exchangeId;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "this.exchangeId = exchangeId",
            "src_parent": "{\n    this.exchangeId = exchangeId;\n    this.timeStamp = timeStamp;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        }
      ],
      "file_name": "ManagedRoute"
    }
  ],
  "id": "camel_d063f471"
}