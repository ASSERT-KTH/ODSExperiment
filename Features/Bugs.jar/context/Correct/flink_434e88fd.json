{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && (clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)).isAssignableFrom(((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass()))",
            "dst_parent": "!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && (clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)).isAssignableFrom(((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass()))",
            "dst_parent_type": "UnaryOperator",
            "dst_type": "BinaryOperator",
            "operator": "UPD",
            "src": "(((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass() == (clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)))",
            "src_parent": "(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && (((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass() == (clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type))))",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Throw",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "\"' or a subclass of it expected but was '\"",
            "dst_parent": "((\"Generic type '\" + ((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass().getCanonicalName()) + \"' or a subclass of it expected but was '\")",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Literal",
            "operator": "UPD",
            "src": "\"' expected but was '\"",
            "src_parent": "((\"Generic object type '\" + ((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass().getCanonicalName()) + \"' expected but was '\")",
            "src_parent_type": "BinaryOperator",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Throw",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "\"Generic type '\"",
            "dst_parent": "(\"Generic type '\" + ((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass().getCanonicalName())",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Literal",
            "operator": "UPD",
            "src": "\"Generic object type '\"",
            "src_parent": "(\"Generic object type '\" + ((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass().getCanonicalName())",
            "src_parent_type": "BinaryOperator",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "typeInfo.isBasicType()",
            "src_parent": "if (typeInfo.isBasicType()) {\n    org.apache.flink.api.common.typeinfo.TypeInformation<?> actual;\n    if ((!(type instanceof java.lang.Class<?>)) || ((actual = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(((java.lang.Class<?>) (type)))) == null)) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Basic type expected.\");\n    }\n    if (!typeInfo.equals(actual)) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Basic type '\" + typeInfo) + \"' expected but was '\") + actual) + \"'.\");\n    }\n} else if (typeInfo.isTupleType()) {\n    if (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && org.apache.flink.api.java.tuple.Tuple.class.isAssignableFrom(org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Tuple type expected.\");\n    }\n    if (org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).equals(org.apache.flink.api.java.tuple.Tuple.class)) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Concrete subclass of Tuple expected.\");\n    }\n    while (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).getSuperclass().equals(org.apache.flink.api.java.tuple.Tuple.class))) {\n        typeHierarchy.add(type);\n        type = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).getGenericSuperclass();\n    } \n    if (type == org.apache.flink.api.java.tuple.Tuple0.class) {\n        return;\n    }\n    if (type instanceof java.lang.Class<?>) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Parameterized Tuple type expected.\");\n    }\n    org.apache.flink.api.java.typeutils.TupleTypeInfo<?> tti = ((org.apache.flink.api.java.typeutils.TupleTypeInfo<?>) (typeInfo));\n    java.lang.reflect.Type[] subTypes = ((java.lang.reflect.ParameterizedType) (type)).getActualTypeArguments();\n    if (subTypes.length != tti.getArity()) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Tuple arity '\" + tti.getArity()) + \"' expected but was '\") + subTypes.length) + \"'.\");\n    }\n    for (int i = 0; i < subTypes.length; i++) {\n        org.apache.flink.api.java.typeutils.TypeExtractor.validateInfo(new java.util.ArrayList<java.lang.reflect.Type>(typeHierarchy), subTypes[i], tti.getTypeAt(i));\n    }\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.EitherTypeInfo) {\n    if (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && org.apache.flink.types.Either.class.isAssignableFrom(org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Either type expected.\");\n    }\n    while (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).equals(org.apache.flink.types.Either.class))) {\n        typeHierarchy.add(type);\n        type = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).getGenericSuperclass();\n    } \n    if (type instanceof java.lang.Class<?>) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Parameterized Either type expected.\");\n    }\n    org.apache.flink.api.java.typeutils.EitherTypeInfo<?, ?> eti = ((org.apache.flink.api.java.typeutils.EitherTypeInfo<?, ?>) (typeInfo));\n    java.lang.reflect.Type[] subTypes = ((java.lang.reflect.ParameterizedType) (type)).getActualTypeArguments();\n    org.apache.flink.api.java.typeutils.TypeExtractor.validateInfo(new java.util.ArrayList<java.lang.reflect.Type>(typeHierarchy), subTypes[0], eti.getLeftType());\n    org.apache.flink.api.java.typeutils.TypeExtractor.validateInfo(new java.util.ArrayList<java.lang.reflect.Type>(typeHierarchy), subTypes[1], eti.getRightType());\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.WritableTypeInfo<?>) {\n    if (!((type instanceof java.lang.Class<?>) && org.apache.hadoop.io.Writable.class.isAssignableFrom(((java.lang.Class<?>) (type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Writable type expected.\");\n    }\n    java.lang.Class<?> clazz;\n    if (((org.apache.flink.api.java.typeutils.WritableTypeInfo<?>) (typeInfo)).getTypeClass() != (clazz = ((java.lang.Class<?>) (type)))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Writable type '\" + ((org.apache.flink.api.java.typeutils.WritableTypeInfo<?>) (typeInfo)).getTypeClass().getCanonicalName()) + \"' expected but was '\") + clazz.getCanonicalName()) + \"'.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo) {\n    java.lang.reflect.Type component;\n    if ((!(((type instanceof java.lang.Class<?>) && ((java.lang.Class<?>) (type)).isArray()) && ((component = ((java.lang.Class<?>) (type)).getComponentType()) != null))) && (!((type instanceof java.lang.reflect.GenericArrayType) && ((component = ((java.lang.reflect.GenericArrayType) (type)).getGenericComponentType()) != null)))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Array type expected.\");\n    }\n    if (component instanceof java.lang.reflect.TypeVariable<?>) {\n        component = org.apache.flink.api.java.typeutils.TypeExtractor.materializeTypeVariable(typeHierarchy, ((java.lang.reflect.TypeVariable<?>) (component)));\n        if (component instanceof java.lang.reflect.TypeVariable) {\n            return;\n        }\n    }\n    if (!((component instanceof java.lang.Class<?>) && ((java.lang.Class<?>) (component)).isPrimitive())) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Primitive component expected.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo<?, ?>) {\n    java.lang.reflect.Type component;\n    if ((!(((type instanceof java.lang.Class<?>) && ((java.lang.Class<?>) (type)).isArray()) && ((component = ((java.lang.Class<?>) (type)).getComponentType()) != null))) && (!((type instanceof java.lang.reflect.GenericArrayType) && ((component = ((java.lang.reflect.GenericArrayType) (type)).getGenericComponentType()) != null)))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Array type expected.\");\n    }\n    if (component instanceof java.lang.reflect.TypeVariable<?>) {\n        component = org.apache.flink.api.java.typeutils.TypeExtractor.materializeTypeVariable(typeHierarchy, ((java.lang.reflect.TypeVariable<?>) (component)));\n        if (component instanceof java.lang.reflect.TypeVariable) {\n            return;\n        }\n    }\n    org.apache.flink.api.java.typeutils.TypeExtractor.validateInfo(typeHierarchy, component, ((org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo<?, ?>) (typeInfo)).getComponentInfo());\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo<?, ?>) {\n    if ((!((type instanceof java.lang.Class<?>) && ((java.lang.Class<?>) (type)).isArray())) && (!(type instanceof java.lang.reflect.GenericArrayType))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Object array type expected.\");\n    }\n    java.lang.reflect.Type component;\n    if (type instanceof java.lang.Class<?>) {\n        component = ((java.lang.Class<?>) (type)).getComponentType();\n    } else {\n        component = ((java.lang.reflect.GenericArrayType) (type)).getGenericComponentType();\n    }\n    if (component instanceof java.lang.reflect.TypeVariable<?>) {\n        component = org.apache.flink.api.java.typeutils.TypeExtractor.materializeTypeVariable(typeHierarchy, ((java.lang.reflect.TypeVariable<?>) (component)));\n        if (component instanceof java.lang.reflect.TypeVariable) {\n            return;\n        }\n    }\n    org.apache.flink.api.java.typeutils.TypeExtractor.validateInfo(typeHierarchy, component, ((org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo<?, ?>) (typeInfo)).getComponentInfo());\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.ValueTypeInfo<?>) {\n    if (!((type instanceof java.lang.Class<?>) && org.apache.flink.types.Value.class.isAssignableFrom(((java.lang.Class<?>) (type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Value type expected.\");\n    }\n    org.apache.flink.api.common.typeinfo.TypeInformation<?> actual;\n    if (!((org.apache.flink.api.java.typeutils.ValueTypeInfo<?>) (typeInfo)).equals(actual = org.apache.flink.api.java.typeutils.ValueTypeInfo.getValueTypeInfo(((java.lang.Class<? extends org.apache.flink.types.Value>) (type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Value type '\" + typeInfo) + \"' expected but was '\") + actual) + \"'.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo) {\n    java.lang.Class<?> clazz = null;\n    if (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && (((org.apache.flink.api.java.typeutils.PojoTypeInfo<?>) (typeInfo)).getTypeClass() == (clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"POJO type '\" + ((org.apache.flink.api.java.typeutils.PojoTypeInfo<?>) (typeInfo)).getTypeClass().getCanonicalName()) + \"' expected but was '\") + clazz.getCanonicalName()) + \"'.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.EnumTypeInfo) {\n    if (!((type instanceof java.lang.Class<?>) && java.lang.Enum.class.isAssignableFrom(((java.lang.Class<?>) (type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Enum type expected.\");\n    }\n    if (!(typeInfo.getTypeClass() == type)) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Enum type '\" + typeInfo.getTypeClass().getCanonicalName()) + \"' expected but was '\") + org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).getCanonicalName()) + \"'.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) {\n    java.lang.Class<?> clazz = null;\n    if (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && (((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass() == (clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Generic object type '\" + ((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass().getCanonicalName()) + \"' expected but was '\") + clazz.getCanonicalName()) + \"'.\");\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "typeInfo.isTupleType()",
            "src_parent": "if (typeInfo.isTupleType()) {\n    if (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && org.apache.flink.api.java.tuple.Tuple.class.isAssignableFrom(org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Tuple type expected.\");\n    }\n    if (org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).equals(org.apache.flink.api.java.tuple.Tuple.class)) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Concrete subclass of Tuple expected.\");\n    }\n    while (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).getSuperclass().equals(org.apache.flink.api.java.tuple.Tuple.class))) {\n        typeHierarchy.add(type);\n        type = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).getGenericSuperclass();\n    } \n    if (type == org.apache.flink.api.java.tuple.Tuple0.class) {\n        return;\n    }\n    if (type instanceof java.lang.Class<?>) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Parameterized Tuple type expected.\");\n    }\n    org.apache.flink.api.java.typeutils.TupleTypeInfo<?> tti = ((org.apache.flink.api.java.typeutils.TupleTypeInfo<?>) (typeInfo));\n    java.lang.reflect.Type[] subTypes = ((java.lang.reflect.ParameterizedType) (type)).getActualTypeArguments();\n    if (subTypes.length != tti.getArity()) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Tuple arity '\" + tti.getArity()) + \"' expected but was '\") + subTypes.length) + \"'.\");\n    }\n    for (int i = 0; i < subTypes.length; i++) {\n        org.apache.flink.api.java.typeutils.TypeExtractor.validateInfo(new java.util.ArrayList<java.lang.reflect.Type>(typeHierarchy), subTypes[i], tti.getTypeAt(i));\n    }\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.EitherTypeInfo) {\n    if (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && org.apache.flink.types.Either.class.isAssignableFrom(org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Either type expected.\");\n    }\n    while (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).equals(org.apache.flink.types.Either.class))) {\n        typeHierarchy.add(type);\n        type = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).getGenericSuperclass();\n    } \n    if (type instanceof java.lang.Class<?>) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Parameterized Either type expected.\");\n    }\n    org.apache.flink.api.java.typeutils.EitherTypeInfo<?, ?> eti = ((org.apache.flink.api.java.typeutils.EitherTypeInfo<?, ?>) (typeInfo));\n    java.lang.reflect.Type[] subTypes = ((java.lang.reflect.ParameterizedType) (type)).getActualTypeArguments();\n    org.apache.flink.api.java.typeutils.TypeExtractor.validateInfo(new java.util.ArrayList<java.lang.reflect.Type>(typeHierarchy), subTypes[0], eti.getLeftType());\n    org.apache.flink.api.java.typeutils.TypeExtractor.validateInfo(new java.util.ArrayList<java.lang.reflect.Type>(typeHierarchy), subTypes[1], eti.getRightType());\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.WritableTypeInfo<?>) {\n    if (!((type instanceof java.lang.Class<?>) && org.apache.hadoop.io.Writable.class.isAssignableFrom(((java.lang.Class<?>) (type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Writable type expected.\");\n    }\n    java.lang.Class<?> clazz;\n    if (((org.apache.flink.api.java.typeutils.WritableTypeInfo<?>) (typeInfo)).getTypeClass() != (clazz = ((java.lang.Class<?>) (type)))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Writable type '\" + ((org.apache.flink.api.java.typeutils.WritableTypeInfo<?>) (typeInfo)).getTypeClass().getCanonicalName()) + \"' expected but was '\") + clazz.getCanonicalName()) + \"'.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo) {\n    java.lang.reflect.Type component;\n    if ((!(((type instanceof java.lang.Class<?>) && ((java.lang.Class<?>) (type)).isArray()) && ((component = ((java.lang.Class<?>) (type)).getComponentType()) != null))) && (!((type instanceof java.lang.reflect.GenericArrayType) && ((component = ((java.lang.reflect.GenericArrayType) (type)).getGenericComponentType()) != null)))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Array type expected.\");\n    }\n    if (component instanceof java.lang.reflect.TypeVariable<?>) {\n        component = org.apache.flink.api.java.typeutils.TypeExtractor.materializeTypeVariable(typeHierarchy, ((java.lang.reflect.TypeVariable<?>) (component)));\n        if (component instanceof java.lang.reflect.TypeVariable) {\n            return;\n        }\n    }\n    if (!((component instanceof java.lang.Class<?>) && ((java.lang.Class<?>) (component)).isPrimitive())) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Primitive component expected.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo<?, ?>) {\n    java.lang.reflect.Type component;\n    if ((!(((type instanceof java.lang.Class<?>) && ((java.lang.Class<?>) (type)).isArray()) && ((component = ((java.lang.Class<?>) (type)).getComponentType()) != null))) && (!((type instanceof java.lang.reflect.GenericArrayType) && ((component = ((java.lang.reflect.GenericArrayType) (type)).getGenericComponentType()) != null)))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Array type expected.\");\n    }\n    if (component instanceof java.lang.reflect.TypeVariable<?>) {\n        component = org.apache.flink.api.java.typeutils.TypeExtractor.materializeTypeVariable(typeHierarchy, ((java.lang.reflect.TypeVariable<?>) (component)));\n        if (component instanceof java.lang.reflect.TypeVariable) {\n            return;\n        }\n    }\n    org.apache.flink.api.java.typeutils.TypeExtractor.validateInfo(typeHierarchy, component, ((org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo<?, ?>) (typeInfo)).getComponentInfo());\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo<?, ?>) {\n    if ((!((type instanceof java.lang.Class<?>) && ((java.lang.Class<?>) (type)).isArray())) && (!(type instanceof java.lang.reflect.GenericArrayType))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Object array type expected.\");\n    }\n    java.lang.reflect.Type component;\n    if (type instanceof java.lang.Class<?>) {\n        component = ((java.lang.Class<?>) (type)).getComponentType();\n    } else {\n        component = ((java.lang.reflect.GenericArrayType) (type)).getGenericComponentType();\n    }\n    if (component instanceof java.lang.reflect.TypeVariable<?>) {\n        component = org.apache.flink.api.java.typeutils.TypeExtractor.materializeTypeVariable(typeHierarchy, ((java.lang.reflect.TypeVariable<?>) (component)));\n        if (component instanceof java.lang.reflect.TypeVariable) {\n            return;\n        }\n    }\n    org.apache.flink.api.java.typeutils.TypeExtractor.validateInfo(typeHierarchy, component, ((org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo<?, ?>) (typeInfo)).getComponentInfo());\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.ValueTypeInfo<?>) {\n    if (!((type instanceof java.lang.Class<?>) && org.apache.flink.types.Value.class.isAssignableFrom(((java.lang.Class<?>) (type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Value type expected.\");\n    }\n    org.apache.flink.api.common.typeinfo.TypeInformation<?> actual;\n    if (!((org.apache.flink.api.java.typeutils.ValueTypeInfo<?>) (typeInfo)).equals(actual = org.apache.flink.api.java.typeutils.ValueTypeInfo.getValueTypeInfo(((java.lang.Class<? extends org.apache.flink.types.Value>) (type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Value type '\" + typeInfo) + \"' expected but was '\") + actual) + \"'.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo) {\n    java.lang.Class<?> clazz = null;\n    if (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && (((org.apache.flink.api.java.typeutils.PojoTypeInfo<?>) (typeInfo)).getTypeClass() == (clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"POJO type '\" + ((org.apache.flink.api.java.typeutils.PojoTypeInfo<?>) (typeInfo)).getTypeClass().getCanonicalName()) + \"' expected but was '\") + clazz.getCanonicalName()) + \"'.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.EnumTypeInfo) {\n    if (!((type instanceof java.lang.Class<?>) && java.lang.Enum.class.isAssignableFrom(((java.lang.Class<?>) (type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Enum type expected.\");\n    }\n    if (!(typeInfo.getTypeClass() == type)) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Enum type '\" + typeInfo.getTypeClass().getCanonicalName()) + \"' expected but was '\") + org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).getCanonicalName()) + \"'.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) {\n    java.lang.Class<?> clazz = null;\n    if (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && (((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass() == (clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Generic object type '\" + ((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass().getCanonicalName()) + \"' expected but was '\") + clazz.getCanonicalName()) + \"'.\");\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && (((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass() == (clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type))))",
            "src_parent": "!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && (((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass() == (clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type))))",
            "src_parent_type": "UnaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "typeInfo instanceof org.apache.flink.api.common.typeinfo.BasicTypeInfo",
            "src_parent": "if (typeInfo instanceof org.apache.flink.api.common.typeinfo.BasicTypeInfo) {\n    org.apache.flink.api.common.typeinfo.TypeInformation<?> actual;\n    if ((!(type instanceof java.lang.Class<?>)) || ((actual = org.apache.flink.api.common.typeinfo.BasicTypeInfo.getInfoFor(((java.lang.Class<?>) (type)))) == null)) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Basic type expected.\");\n    }\n    if (!typeInfo.equals(actual)) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Basic type '\" + typeInfo) + \"' expected but was '\") + actual) + \"'.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo) {\n    if (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && org.apache.flink.api.java.tuple.Tuple.class.isAssignableFrom(org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Tuple type expected.\");\n    }\n    if (org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).equals(org.apache.flink.api.java.tuple.Tuple.class)) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Concrete subclass of Tuple expected.\");\n    }\n    while (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).getSuperclass().equals(org.apache.flink.api.java.tuple.Tuple.class))) {\n        typeHierarchy.add(type);\n        type = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).getGenericSuperclass();\n    } \n    if (type == org.apache.flink.api.java.tuple.Tuple0.class) {\n        return;\n    }\n    if (type instanceof java.lang.Class<?>) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Parameterized Tuple type expected.\");\n    }\n    org.apache.flink.api.java.typeutils.TupleTypeInfo<?> tti = ((org.apache.flink.api.java.typeutils.TupleTypeInfo<?>) (typeInfo));\n    java.lang.reflect.Type[] subTypes = ((java.lang.reflect.ParameterizedType) (type)).getActualTypeArguments();\n    if (subTypes.length != tti.getArity()) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Tuple arity '\" + tti.getArity()) + \"' expected but was '\") + subTypes.length) + \"'.\");\n    }\n    for (int i = 0; i < subTypes.length; i++) {\n        org.apache.flink.api.java.typeutils.TypeExtractor.validateInfo(new java.util.ArrayList<java.lang.reflect.Type>(typeHierarchy), subTypes[i], tti.getTypeAt(i));\n    }\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.EitherTypeInfo) {\n    if (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && org.apache.flink.types.Either.class.isAssignableFrom(org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Either type expected.\");\n    }\n    while (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).equals(org.apache.flink.types.Either.class))) {\n        typeHierarchy.add(type);\n        type = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).getGenericSuperclass();\n    } \n    if (type instanceof java.lang.Class<?>) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Parameterized Either type expected.\");\n    }\n    org.apache.flink.api.java.typeutils.EitherTypeInfo<?, ?> eti = ((org.apache.flink.api.java.typeutils.EitherTypeInfo<?, ?>) (typeInfo));\n    java.lang.reflect.Type[] subTypes = ((java.lang.reflect.ParameterizedType) (type)).getActualTypeArguments();\n    org.apache.flink.api.java.typeutils.TypeExtractor.validateInfo(new java.util.ArrayList<java.lang.reflect.Type>(typeHierarchy), subTypes[0], eti.getLeftType());\n    org.apache.flink.api.java.typeutils.TypeExtractor.validateInfo(new java.util.ArrayList<java.lang.reflect.Type>(typeHierarchy), subTypes[1], eti.getRightType());\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.WritableTypeInfo<?>) {\n    if (!((type instanceof java.lang.Class<?>) && org.apache.hadoop.io.Writable.class.isAssignableFrom(((java.lang.Class<?>) (type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Writable type expected.\");\n    }\n    java.lang.Class<?> clazz;\n    if (((org.apache.flink.api.java.typeutils.WritableTypeInfo<?>) (typeInfo)).getTypeClass() != (clazz = ((java.lang.Class<?>) (type)))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Writable type '\" + ((org.apache.flink.api.java.typeutils.WritableTypeInfo<?>) (typeInfo)).getTypeClass().getCanonicalName()) + \"' expected but was '\") + clazz.getCanonicalName()) + \"'.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo) {\n    java.lang.reflect.Type component;\n    if ((!(((type instanceof java.lang.Class<?>) && ((java.lang.Class<?>) (type)).isArray()) && ((component = ((java.lang.Class<?>) (type)).getComponentType()) != null))) && (!((type instanceof java.lang.reflect.GenericArrayType) && ((component = ((java.lang.reflect.GenericArrayType) (type)).getGenericComponentType()) != null)))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Array type expected.\");\n    }\n    if (component instanceof java.lang.reflect.TypeVariable<?>) {\n        component = org.apache.flink.api.java.typeutils.TypeExtractor.materializeTypeVariable(typeHierarchy, ((java.lang.reflect.TypeVariable<?>) (component)));\n        if (component instanceof java.lang.reflect.TypeVariable) {\n            return;\n        }\n    }\n    if (!((component instanceof java.lang.Class<?>) && ((java.lang.Class<?>) (component)).isPrimitive())) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Primitive component expected.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo<?, ?>) {\n    java.lang.reflect.Type component;\n    if ((!(((type instanceof java.lang.Class<?>) && ((java.lang.Class<?>) (type)).isArray()) && ((component = ((java.lang.Class<?>) (type)).getComponentType()) != null))) && (!((type instanceof java.lang.reflect.GenericArrayType) && ((component = ((java.lang.reflect.GenericArrayType) (type)).getGenericComponentType()) != null)))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Array type expected.\");\n    }\n    if (component instanceof java.lang.reflect.TypeVariable<?>) {\n        component = org.apache.flink.api.java.typeutils.TypeExtractor.materializeTypeVariable(typeHierarchy, ((java.lang.reflect.TypeVariable<?>) (component)));\n        if (component instanceof java.lang.reflect.TypeVariable) {\n            return;\n        }\n    }\n    org.apache.flink.api.java.typeutils.TypeExtractor.validateInfo(typeHierarchy, component, ((org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo<?, ?>) (typeInfo)).getComponentInfo());\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo<?, ?>) {\n    if ((!((type instanceof java.lang.Class<?>) && ((java.lang.Class<?>) (type)).isArray())) && (!(type instanceof java.lang.reflect.GenericArrayType))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Object array type expected.\");\n    }\n    java.lang.reflect.Type component;\n    if (type instanceof java.lang.Class<?>) {\n        component = ((java.lang.Class<?>) (type)).getComponentType();\n    } else {\n        component = ((java.lang.reflect.GenericArrayType) (type)).getGenericComponentType();\n    }\n    if (component instanceof java.lang.reflect.TypeVariable<?>) {\n        component = org.apache.flink.api.java.typeutils.TypeExtractor.materializeTypeVariable(typeHierarchy, ((java.lang.reflect.TypeVariable<?>) (component)));\n        if (component instanceof java.lang.reflect.TypeVariable) {\n            return;\n        }\n    }\n    org.apache.flink.api.java.typeutils.TypeExtractor.validateInfo(typeHierarchy, component, ((org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo<?, ?>) (typeInfo)).getComponentInfo());\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.ValueTypeInfo<?>) {\n    if (!((type instanceof java.lang.Class<?>) && org.apache.flink.types.Value.class.isAssignableFrom(((java.lang.Class<?>) (type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Value type expected.\");\n    }\n    org.apache.flink.api.common.typeinfo.TypeInformation<?> actual;\n    if (!((org.apache.flink.api.java.typeutils.ValueTypeInfo<?>) (typeInfo)).equals(actual = org.apache.flink.api.java.typeutils.ValueTypeInfo.getValueTypeInfo(((java.lang.Class<? extends org.apache.flink.types.Value>) (type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Value type '\" + typeInfo) + \"' expected but was '\") + actual) + \"'.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo) {\n    java.lang.Class<?> clazz = null;\n    if (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && (((org.apache.flink.api.java.typeutils.PojoTypeInfo<?>) (typeInfo)).getTypeClass() == (clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"POJO type '\" + ((org.apache.flink.api.java.typeutils.PojoTypeInfo<?>) (typeInfo)).getTypeClass().getCanonicalName()) + \"' expected but was '\") + clazz.getCanonicalName()) + \"'.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.EnumTypeInfo) {\n    if (!((type instanceof java.lang.Class<?>) && java.lang.Enum.class.isAssignableFrom(((java.lang.Class<?>) (type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Enum type expected.\");\n    }\n    if (!(typeInfo.getTypeClass() == type)) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Enum type '\" + typeInfo.getTypeClass().getCanonicalName()) + \"' expected but was '\") + org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).getCanonicalName()) + \"'.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) {\n    java.lang.Class<?> clazz = null;\n    if (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && (clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)).isAssignableFrom(((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass()))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Generic type '\" + ((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass().getCanonicalName()) + \"' or a subclass of it expected but was '\") + clazz.getCanonicalName()) + \"'.\");\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "typeInfo instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo",
            "src_parent": "if (typeInfo instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo) {\n    if (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && org.apache.flink.api.java.tuple.Tuple.class.isAssignableFrom(org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Tuple type expected.\");\n    }\n    if (org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).equals(org.apache.flink.api.java.tuple.Tuple.class)) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Concrete subclass of Tuple expected.\");\n    }\n    while (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).getSuperclass().equals(org.apache.flink.api.java.tuple.Tuple.class))) {\n        typeHierarchy.add(type);\n        type = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).getGenericSuperclass();\n    } \n    if (type == org.apache.flink.api.java.tuple.Tuple0.class) {\n        return;\n    }\n    if (type instanceof java.lang.Class<?>) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Parameterized Tuple type expected.\");\n    }\n    org.apache.flink.api.java.typeutils.TupleTypeInfo<?> tti = ((org.apache.flink.api.java.typeutils.TupleTypeInfo<?>) (typeInfo));\n    java.lang.reflect.Type[] subTypes = ((java.lang.reflect.ParameterizedType) (type)).getActualTypeArguments();\n    if (subTypes.length != tti.getArity()) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Tuple arity '\" + tti.getArity()) + \"' expected but was '\") + subTypes.length) + \"'.\");\n    }\n    for (int i = 0; i < subTypes.length; i++) {\n        org.apache.flink.api.java.typeutils.TypeExtractor.validateInfo(new java.util.ArrayList<java.lang.reflect.Type>(typeHierarchy), subTypes[i], tti.getTypeAt(i));\n    }\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.EitherTypeInfo) {\n    if (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && org.apache.flink.types.Either.class.isAssignableFrom(org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Either type expected.\");\n    }\n    while (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).equals(org.apache.flink.types.Either.class))) {\n        typeHierarchy.add(type);\n        type = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).getGenericSuperclass();\n    } \n    if (type instanceof java.lang.Class<?>) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Parameterized Either type expected.\");\n    }\n    org.apache.flink.api.java.typeutils.EitherTypeInfo<?, ?> eti = ((org.apache.flink.api.java.typeutils.EitherTypeInfo<?, ?>) (typeInfo));\n    java.lang.reflect.Type[] subTypes = ((java.lang.reflect.ParameterizedType) (type)).getActualTypeArguments();\n    org.apache.flink.api.java.typeutils.TypeExtractor.validateInfo(new java.util.ArrayList<java.lang.reflect.Type>(typeHierarchy), subTypes[0], eti.getLeftType());\n    org.apache.flink.api.java.typeutils.TypeExtractor.validateInfo(new java.util.ArrayList<java.lang.reflect.Type>(typeHierarchy), subTypes[1], eti.getRightType());\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.WritableTypeInfo<?>) {\n    if (!((type instanceof java.lang.Class<?>) && org.apache.hadoop.io.Writable.class.isAssignableFrom(((java.lang.Class<?>) (type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Writable type expected.\");\n    }\n    java.lang.Class<?> clazz;\n    if (((org.apache.flink.api.java.typeutils.WritableTypeInfo<?>) (typeInfo)).getTypeClass() != (clazz = ((java.lang.Class<?>) (type)))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Writable type '\" + ((org.apache.flink.api.java.typeutils.WritableTypeInfo<?>) (typeInfo)).getTypeClass().getCanonicalName()) + \"' expected but was '\") + clazz.getCanonicalName()) + \"'.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo) {\n    java.lang.reflect.Type component;\n    if ((!(((type instanceof java.lang.Class<?>) && ((java.lang.Class<?>) (type)).isArray()) && ((component = ((java.lang.Class<?>) (type)).getComponentType()) != null))) && (!((type instanceof java.lang.reflect.GenericArrayType) && ((component = ((java.lang.reflect.GenericArrayType) (type)).getGenericComponentType()) != null)))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Array type expected.\");\n    }\n    if (component instanceof java.lang.reflect.TypeVariable<?>) {\n        component = org.apache.flink.api.java.typeutils.TypeExtractor.materializeTypeVariable(typeHierarchy, ((java.lang.reflect.TypeVariable<?>) (component)));\n        if (component instanceof java.lang.reflect.TypeVariable) {\n            return;\n        }\n    }\n    if (!((component instanceof java.lang.Class<?>) && ((java.lang.Class<?>) (component)).isPrimitive())) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Primitive component expected.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo<?, ?>) {\n    java.lang.reflect.Type component;\n    if ((!(((type instanceof java.lang.Class<?>) && ((java.lang.Class<?>) (type)).isArray()) && ((component = ((java.lang.Class<?>) (type)).getComponentType()) != null))) && (!((type instanceof java.lang.reflect.GenericArrayType) && ((component = ((java.lang.reflect.GenericArrayType) (type)).getGenericComponentType()) != null)))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Array type expected.\");\n    }\n    if (component instanceof java.lang.reflect.TypeVariable<?>) {\n        component = org.apache.flink.api.java.typeutils.TypeExtractor.materializeTypeVariable(typeHierarchy, ((java.lang.reflect.TypeVariable<?>) (component)));\n        if (component instanceof java.lang.reflect.TypeVariable) {\n            return;\n        }\n    }\n    org.apache.flink.api.java.typeutils.TypeExtractor.validateInfo(typeHierarchy, component, ((org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo<?, ?>) (typeInfo)).getComponentInfo());\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo<?, ?>) {\n    if ((!((type instanceof java.lang.Class<?>) && ((java.lang.Class<?>) (type)).isArray())) && (!(type instanceof java.lang.reflect.GenericArrayType))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Object array type expected.\");\n    }\n    java.lang.reflect.Type component;\n    if (type instanceof java.lang.Class<?>) {\n        component = ((java.lang.Class<?>) (type)).getComponentType();\n    } else {\n        component = ((java.lang.reflect.GenericArrayType) (type)).getGenericComponentType();\n    }\n    if (component instanceof java.lang.reflect.TypeVariable<?>) {\n        component = org.apache.flink.api.java.typeutils.TypeExtractor.materializeTypeVariable(typeHierarchy, ((java.lang.reflect.TypeVariable<?>) (component)));\n        if (component instanceof java.lang.reflect.TypeVariable) {\n            return;\n        }\n    }\n    org.apache.flink.api.java.typeutils.TypeExtractor.validateInfo(typeHierarchy, component, ((org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo<?, ?>) (typeInfo)).getComponentInfo());\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.ValueTypeInfo<?>) {\n    if (!((type instanceof java.lang.Class<?>) && org.apache.flink.types.Value.class.isAssignableFrom(((java.lang.Class<?>) (type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Value type expected.\");\n    }\n    org.apache.flink.api.common.typeinfo.TypeInformation<?> actual;\n    if (!((org.apache.flink.api.java.typeutils.ValueTypeInfo<?>) (typeInfo)).equals(actual = org.apache.flink.api.java.typeutils.ValueTypeInfo.getValueTypeInfo(((java.lang.Class<? extends org.apache.flink.types.Value>) (type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Value type '\" + typeInfo) + \"' expected but was '\") + actual) + \"'.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo) {\n    java.lang.Class<?> clazz = null;\n    if (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && (((org.apache.flink.api.java.typeutils.PojoTypeInfo<?>) (typeInfo)).getTypeClass() == (clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"POJO type '\" + ((org.apache.flink.api.java.typeutils.PojoTypeInfo<?>) (typeInfo)).getTypeClass().getCanonicalName()) + \"' expected but was '\") + clazz.getCanonicalName()) + \"'.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.EnumTypeInfo) {\n    if (!((type instanceof java.lang.Class<?>) && java.lang.Enum.class.isAssignableFrom(((java.lang.Class<?>) (type))))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException(\"Enum type expected.\");\n    }\n    if (!(typeInfo.getTypeClass() == type)) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Enum type '\" + typeInfo.getTypeClass().getCanonicalName()) + \"' expected but was '\") + org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type).getCanonicalName()) + \"'.\");\n    }\n} else if (typeInfo instanceof org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) {\n    java.lang.Class<?> clazz = null;\n    if (!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && (clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)).isAssignableFrom(((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass()))) {\n        throw new org.apache.flink.api.common.functions.InvalidTypesException((((\"Generic type '\" + ((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass().getCanonicalName()) + \"' or a subclass of it expected but was '\") + clazz.getCanonicalName()) + \"'.\");\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && (clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)).isAssignableFrom(((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass()))",
            "dst_parent": "!(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && (clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)).isAssignableFrom(((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass()))",
            "dst_parent_type": "UnaryOperator",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass() == (clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)))",
            "src_parent": "(org.apache.flink.api.java.typeutils.TypeExtractor.isClassType(type) && (((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass() == (clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type))))",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)",
            "dst_parent": "(clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)).isAssignableFrom(((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass())",
            "dst_parent_type": "Invocation",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "(clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type))",
            "src_parent": "(((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass() == (clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)))",
            "src_parent_type": "BinaryOperator",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass()",
            "dst_parent": "(clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)).isAssignableFrom(((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass())",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass()",
            "src_parent": "(((org.apache.flink.api.java.typeutils.GenericTypeInfo<?>) (typeInfo)).getTypeClass() == (clazz = org.apache.flink.api.java.typeutils.TypeExtractor.typeToClass(type)))",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "TypeExtractor"
    }
  ],
  "id": "flink_434e88fd"
}