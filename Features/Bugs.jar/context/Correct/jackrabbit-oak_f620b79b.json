{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "user",
            "dst_parent": "getTokenParent(user)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "userId",
            "src_parent": "getTokenParent(userId)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "id",
            "dst_parent": "new org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TokenInfoImpl(tokenNode, token, id)",
            "dst_parent_type": "ConstructorCall",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "userId",
            "src_parent": "new org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TokenInfoImpl(tokenNode, token, userId)",
            "src_parent_type": "ConstructorCall",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "javax.jcr.RepositoryException",
            "dst_parent": "javax.jcr.RepositoryException e",
            "dst_parent_type": "CatchVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "javax.jcr.AccessDeniedException",
            "src_parent": "javax.jcr.AccessDeniedException e",
            "src_parent_type": "CatchVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "id",
            "dst_parent": "org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.getKeyValue(key, id)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "userId",
            "src_parent": "org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.getKeyValue(key, userId)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if ((user != null) && (!user.isGroup())) {\n    java.lang.String userPath = user.getPath();\n    org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath));\n    tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME);\n    if (tokenParent == null) {\n        tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n        parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n        root.commit();\n    }\n} else {\n    org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Cannot create login token: No corresponding node for User \" + userId) + '.');\n}",
            "src_parent": "{\n    org.apache.jackrabbit.api.security.user.Authorizable user = userManager.getAuthorizable(userId);\n    if ((user != null) && (!user.isGroup())) {\n        java.lang.String userPath = user.getPath();\n        org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath));\n        tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME);\n        if (tokenParent == null) {\n            tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n            parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n            root.commit();\n        }\n    } else {\n        org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Cannot create login token: No corresponding node for User \" + userId) + '.');\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "@javax.annotation.CheckForNull\nprivate org.apache.jackrabbit.api.security.user.User getUser(java.lang.String userId) {\n    try {\n        org.apache.jackrabbit.api.security.user.Authorizable user = userManager.getAuthorizable(userId);\n        if ((user != null) && (!user.isGroup())) {\n            return ((org.apache.jackrabbit.api.security.user.User) (user));\n        } else {\n            org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Cannot create login token: No corresponding node for User \" + userId) + '.');\n        }\n    } catch (javax.jcr.RepositoryException e) {\n        org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Error while accessing user \" + userId) + '.', e);\n    }\n    return null;\n}",
            "src_parent": "class TokenProviderImpl implements org.apache.jackrabbit.oak.spi.security.authentication.token.TokenProvider {\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.class);\n\n    private static final java.lang.String TOKEN_ATTRIBUTE = \".token\";\n\n    private static final java.lang.String TOKEN_ATTRIBUTE_EXPIRY = \"rep:token.exp\";\n\n    private static final java.lang.String TOKEN_ATTRIBUTE_KEY = \"rep:token.key\";\n\n    private static final java.lang.String TOKENS_NODE_NAME = \".tokens\";\n\n    private static final java.lang.String TOKENS_NT_NAME = org.apache.jackrabbit.oak.plugins.nodetype.NodeTypeConstants.NT_REP_UNSTRUCTURED;\n\n    private static final java.lang.String TOKEN_NT_NAME = \"rep:Token\";\n\n    private static final long DEFAULT_TOKEN_EXPIRATION = (2 * 3600) * 1000;\n\n    private static final int DEFAULT_KEY_SIZE = 8;\n\n    private static final char DELIM = '_';\n\n    private static final java.util.Set<java.lang.String> RESERVED_ATTRIBUTES = new java.util.HashSet(3);\n\n    static {\n        RESERVED_ATTRIBUTES.add(TOKEN_ATTRIBUTE);\n        RESERVED_ATTRIBUTES.add(TOKEN_ATTRIBUTE_EXPIRY);\n        RESERVED_ATTRIBUTES.add(TOKEN_ATTRIBUTE_KEY);\n    }\n\n    private final org.apache.jackrabbit.oak.api.Root root;\n\n    private final org.apache.jackrabbit.oak.spi.security.ConfigurationParameters options;\n\n    private final long tokenExpiration;\n\n    private final org.apache.jackrabbit.api.security.user.UserManager userManager;\n\n    private final org.apache.jackrabbit.oak.plugins.identifier.IdentifierManager identifierManager;\n\n    TokenProviderImpl(org.apache.jackrabbit.oak.api.Root root, org.apache.jackrabbit.oak.spi.security.ConfigurationParameters options, org.apache.jackrabbit.oak.spi.security.user.UserConfiguration userConfiguration) {\n        this.root = root;\n        this.options = options;\n        this.tokenExpiration = options.getConfigValue(org.apache.jackrabbit.oak.security.authentication.token.PARAM_TOKEN_EXPIRATION, java.lang.Long.valueOf(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.DEFAULT_TOKEN_EXPIRATION));\n        this.userManager = userConfiguration.getUserManager(root, NamePathMapper.DEFAULT);\n        this.identifierManager = new org.apache.jackrabbit.oak.plugins.identifier.IdentifierManager(root);\n    }\n\n    @java.lang.Override\n    public boolean doCreateToken(javax.jcr.Credentials credentials) {\n        javax.jcr.SimpleCredentials sc = org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.extractSimpleCredentials(credentials);\n        if (sc == null) {\n            return false;\n        } else {\n            java.lang.Object attr = sc.getAttribute(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKEN_ATTRIBUTE);\n            return (attr != null) && \"\".equals(attr.toString());\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.security.authentication.token.TokenInfo createToken(javax.jcr.Credentials credentials) {\n        javax.jcr.SimpleCredentials sc = org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.extractSimpleCredentials(credentials);\n        org.apache.jackrabbit.oak.spi.security.authentication.token.TokenInfo tokenInfo = null;\n        if (sc != null) {\n            java.lang.String[] attrNames = sc.getAttributeNames();\n            java.util.Map<java.lang.String, java.lang.String> attributes = new java.util.HashMap<java.lang.String, java.lang.String>(attrNames.length);\n            for (java.lang.String attrName : sc.getAttributeNames()) {\n                attributes.put(attrName, sc.getAttribute(attrName).toString());\n            }\n            tokenInfo = createToken(sc.getUserID(), attributes);\n            if (tokenInfo != null) {\n                sc.setAttribute(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKEN_ATTRIBUTE, tokenInfo.getToken());\n            }\n        }\n        return tokenInfo;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.security.authentication.token.TokenInfo createToken(java.lang.String userId, java.util.Map<java.lang.String, ?> attributes) {\n        java.lang.String error = \"Failed to create login token. \";\n        org.apache.jackrabbit.api.security.user.User user = getUser(userId);\n        org.apache.jackrabbit.oak.util.NodeUtil tokenParent = getTokenParent(user);\n        if (tokenParent != null) {\n            try {\n                java.lang.String id = user.getID();\n                long creationTime = new java.util.Date().getTime();\n                org.apache.jackrabbit.oak.util.NodeUtil tokenNode = createTokenNode(tokenParent, creationTime);\n                tokenNode.setString(JcrConstants.JCR_UUID, org.apache.jackrabbit.oak.plugins.identifier.IdentifierManager.generateUUID());\n                java.lang.String key = org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.generateKey(options.getConfigValue(org.apache.jackrabbit.oak.security.authentication.token.PARAM_TOKEN_LENGTH, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.DEFAULT_KEY_SIZE));\n                java.lang.String nodeId = getIdentifier(tokenNode.getTree());\n                java.lang.String token = new java.lang.StringBuilder(nodeId).append(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.DELIM).append(key).toString();\n                java.lang.String keyHash = org.apache.jackrabbit.oak.spi.security.user.util.PasswordUtil.buildPasswordHash(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.getKeyValue(key, id), options);\n                tokenNode.setString(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKEN_ATTRIBUTE_KEY, keyHash);\n                long exp;\n                if (attributes.containsKey(org.apache.jackrabbit.oak.security.authentication.token.PARAM_TOKEN_EXPIRATION)) {\n                    exp = java.lang.Long.parseLong(attributes.get(org.apache.jackrabbit.oak.security.authentication.token.PARAM_TOKEN_EXPIRATION).toString());\n                } else {\n                    exp = tokenExpiration;\n                }\n                long expTime = org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.createExpirationTime(creationTime, exp);\n                tokenNode.setDate(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKEN_ATTRIBUTE_EXPIRY, expTime);\n                for (java.lang.String name : attributes.keySet()) {\n                    if (!org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.RESERVED_ATTRIBUTES.contains(name)) {\n                        java.lang.String attr = attributes.get(name).toString();\n                        tokenNode.setString(name, attr);\n                    }\n                }\n                root.commit();\n                return new org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TokenInfoImpl(tokenNode, token, id);\n            } catch (java.security.NoSuchAlgorithmException e) {\n                org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.error(error, e.getMessage());\n            } catch (java.io.UnsupportedEncodingException e) {\n                org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.error(error, e.getMessage());\n            } catch (org.apache.jackrabbit.oak.api.CommitFailedException e) {\n                org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.warn(error, e.getMessage());\n            } catch (javax.jcr.RepositoryException e) {\n                org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.warn(error, e.getMessage());\n            }\n        } else {\n            org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.warn(\"Unable to get/create token store for user \" + userId);\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.security.authentication.token.TokenInfo getTokenInfo(java.lang.String token) {\n        int pos = token.indexOf(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.DELIM);\n        java.lang.String nodeId = (pos == (-1)) ? token : token.substring(0, pos);\n        org.apache.jackrabbit.oak.api.Tree tokenTree = identifierManager.getTree(nodeId);\n        java.lang.String userId = getUserId(tokenTree);\n        if ((userId == null) || (!org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.isValidTokenTree(tokenTree))) {\n            return null;\n        } else {\n            return new org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TokenInfoImpl(new org.apache.jackrabbit.oak.util.NodeUtil(tokenTree), token, userId);\n        }\n    }\n\n    private static long createExpirationTime(long creationTime, long tokenExpiration) {\n        return creationTime + tokenExpiration;\n    }\n\n    private static long getExpirationTime(org.apache.jackrabbit.oak.util.NodeUtil tokenNode, long defaultValue) {\n        return tokenNode.getLong(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKEN_ATTRIBUTE_EXPIRY, defaultValue);\n    }\n\n    @javax.annotation.CheckForNull\n    private static javax.jcr.SimpleCredentials extractSimpleCredentials(javax.jcr.Credentials credentials) {\n        if (credentials instanceof javax.jcr.SimpleCredentials) {\n            return ((javax.jcr.SimpleCredentials) (credentials));\n        }\n        if (credentials instanceof org.apache.jackrabbit.oak.spi.security.authentication.ImpersonationCredentials) {\n            javax.jcr.Credentials base = ((org.apache.jackrabbit.oak.spi.security.authentication.ImpersonationCredentials) (credentials)).getBaseCredentials();\n            if (base instanceof javax.jcr.SimpleCredentials) {\n                return ((javax.jcr.SimpleCredentials) (base));\n            }\n        }\n        return null;\n    }\n\n    @javax.annotation.Nonnull\n    private static java.lang.String generateKey(int size) {\n        java.security.SecureRandom random = new java.security.SecureRandom();\n        byte[] key = new byte[size];\n        random.nextBytes(key);\n        java.lang.StringBuilder res = new java.lang.StringBuilder(key.length * 2);\n        for (byte b : key) {\n            res.append(org.apache.jackrabbit.util.Text.hexTable[(b >> 4) & 15]);\n            res.append(org.apache.jackrabbit.util.Text.hexTable[b & 15]);\n        }\n        return res.toString();\n    }\n\n    @javax.annotation.Nonnull\n    private static java.lang.String getKeyValue(@javax.annotation.Nonnull\n    java.lang.String key, @javax.annotation.Nonnull\n    java.lang.String userId) {\n        return key + userId;\n    }\n\n    private static boolean isValidTokenTree(org.apache.jackrabbit.oak.api.Tree tokenTree) {\n        if ((tokenTree == null) || (!tokenTree.exists())) {\n            return false;\n        } else {\n            return org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME.equals(tokenTree.getParent().getName()) && org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKEN_NT_NAME.equals(org.apache.jackrabbit.oak.util.TreeUtil.getPrimaryTypeName(tokenTree));\n        }\n    }\n\n    @javax.annotation.CheckForNull\n    private org.apache.jackrabbit.oak.api.Tree getTokenTree(org.apache.jackrabbit.oak.spi.security.authentication.token.TokenInfo tokenInfo) {\n        if (tokenInfo instanceof org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TokenInfoImpl) {\n            return root.getTree(((org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TokenInfoImpl) (tokenInfo)).tokenPath);\n        } else {\n            return null;\n        }\n    }\n\n    @javax.annotation.CheckForNull\n    private java.lang.String getUserId(org.apache.jackrabbit.oak.api.Tree tokenTree) {\n        if ((tokenTree != null) && tokenTree.exists()) {\n            try {\n                java.lang.String userPath = org.apache.jackrabbit.util.Text.getRelativeParent(tokenTree.getPath(), 2);\n                org.apache.jackrabbit.api.security.user.Authorizable authorizable = userManager.getAuthorizableByPath(userPath);\n                if (((authorizable != null) && (!authorizable.isGroup())) && (!((org.apache.jackrabbit.api.security.user.User) (authorizable)).isDisabled())) {\n                    return authorizable.getID();\n                }\n            } catch (javax.jcr.RepositoryException e) {\n                org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug(\"Cannot determine userID from token: \", e.getMessage());\n            }\n        }\n        return null;\n    }\n\n    @javax.annotation.CheckForNull\n    private org.apache.jackrabbit.api.security.user.User getUser(java.lang.String userId) {\n        try {\n            org.apache.jackrabbit.api.security.user.Authorizable user = userManager.getAuthorizable(userId);\n            if ((user != null) && (!user.isGroup())) {\n                return ((org.apache.jackrabbit.api.security.user.User) (user));\n            } else {\n                org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Cannot create login token: No corresponding node for User \" + userId) + '.');\n            }\n        } catch (javax.jcr.RepositoryException e) {\n            org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Error while accessing user \" + userId) + '.', e);\n        }\n        return null;\n    }\n\n    @javax.annotation.CheckForNull\n    private org.apache.jackrabbit.oak.util.NodeUtil getTokenParent(@javax.annotation.CheckForNull\n    org.apache.jackrabbit.api.security.user.User user) {\n        if (user == null) {\n            return null;\n        }\n        org.apache.jackrabbit.oak.util.NodeUtil tokenParent = null;\n        java.lang.String parentPath = null;\n        try {\n            java.lang.String userPath = user.getPath();\n            org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath));\n            tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME);\n            if (tokenParent == null) {\n                tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n                parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n                root.commit();\n            }\n        } catch (javax.jcr.RepositoryException e) {\n            org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug(\"Error while creating token node \", e.getMessage());\n        } catch (org.apache.jackrabbit.oak.api.CommitFailedException e) {\n            org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug(\"Conflict while creating token store -> retrying\", e.getMessage());\n            root.refresh();\n            if (parentPath != null) {\n                org.apache.jackrabbit.oak.api.Tree parentTree = root.getTree(parentPath);\n                if (parentTree.exists()) {\n                    tokenParent = new org.apache.jackrabbit.oak.util.NodeUtil(parentTree);\n                }\n            }\n        }\n        return tokenParent;\n    }\n\n    private org.apache.jackrabbit.oak.util.NodeUtil createTokenNode(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.util.NodeUtil parent, @javax.annotation.Nonnull\n    long creationTime) throws javax.jcr.AccessDeniedException {\n        java.util.Calendar creation = java.util.GregorianCalendar.getInstance();\n        creation.setTimeInMillis(creationTime);\n        java.lang.String tokenName = org.apache.jackrabbit.util.Text.replace(org.apache.jackrabbit.util.ISO8601.format(creation), \":\", \".\");\n        org.apache.jackrabbit.oak.util.NodeUtil tokenNode;\n        try {\n            tokenNode = parent.addChild(tokenName, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKEN_NT_NAME);\n            root.commit();\n        } catch (org.apache.jackrabbit.oak.api.CommitFailedException e) {\n            org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Failed to create token node \" + tokenName) + \". Using random name as fallback.\");\n            root.refresh();\n            tokenNode = parent.addChild(java.util.UUID.randomUUID().toString(), org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKEN_NT_NAME);\n        }\n        return tokenNode;\n    }\n\n    private final class TokenInfoImpl implements org.apache.jackrabbit.oak.spi.security.authentication.token.TokenInfo {\n        private final java.lang.String token;\n\n        private final java.lang.String tokenPath;\n\n        private final java.lang.String userId;\n\n        private final long expirationTime;\n\n        private final java.lang.String key;\n\n        private final java.util.Map<java.lang.String, java.lang.String> mandatoryAttributes;\n\n        private final java.util.Map<java.lang.String, java.lang.String> publicAttributes;\n\n        private TokenInfoImpl(org.apache.jackrabbit.oak.util.NodeUtil tokenNode, java.lang.String token, java.lang.String userId) {\n            this.token = token;\n            this.tokenPath = tokenNode.getTree().getPath();\n            this.userId = userId;\n            expirationTime = org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.getExpirationTime(tokenNode, java.lang.Long.MIN_VALUE);\n            key = tokenNode.getString(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKEN_ATTRIBUTE_KEY, null);\n            mandatoryAttributes = new java.util.HashMap<java.lang.String, java.lang.String>();\n            publicAttributes = new java.util.HashMap<java.lang.String, java.lang.String>();\n            for (org.apache.jackrabbit.oak.api.PropertyState propertyState : tokenNode.getTree().getProperties()) {\n                java.lang.String name = propertyState.getName();\n                java.lang.String value = propertyState.getValue(org.apache.jackrabbit.oak.security.authentication.token.STRING);\n                if (org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.RESERVED_ATTRIBUTES.contains(name)) {\n                    continue;\n                }\n                if (isMandatoryAttribute(name)) {\n                    mandatoryAttributes.put(name, value);\n                } else if (isInfoAttribute(name)) {\n                    publicAttributes.put(name, value);\n                }\n            }\n        }\n\n        @java.lang.Override\n        public java.lang.String getUserId() {\n            return userId;\n        }\n\n        @java.lang.Override\n        public java.lang.String getToken() {\n            return token;\n        }\n\n        @java.lang.Override\n        public boolean isExpired(long loginTime) {\n            return expirationTime < loginTime;\n        }\n\n        @java.lang.Override\n        public boolean resetExpiration(long loginTime) {\n            org.apache.jackrabbit.oak.api.Tree tokenTree = getTokenTree(this);\n            if ((tokenTree != null) && tokenTree.exists()) {\n                org.apache.jackrabbit.oak.util.NodeUtil tokenNode = new org.apache.jackrabbit.oak.util.NodeUtil(tokenTree);\n                if (isExpired(loginTime)) {\n                    org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug(\"Attempt to reset an expired token.\");\n                    return false;\n                }\n                if ((expirationTime - loginTime) <= (tokenExpiration / 2)) {\n                    try {\n                        long expTime = org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.createExpirationTime(loginTime, tokenExpiration);\n                        tokenNode.setDate(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKEN_ATTRIBUTE_EXPIRY, expTime);\n                        root.commit();\n                        org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug(\"Successfully reset token expiration time.\");\n                        return true;\n                    } catch (org.apache.jackrabbit.oak.api.CommitFailedException e) {\n                        org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug(\"Failed to reset token expiration\", e.getMessage());\n                        root.refresh();\n                    }\n                }\n            }\n            return false;\n        }\n\n        @java.lang.Override\n        public boolean remove() {\n            org.apache.jackrabbit.oak.api.Tree tokenTree = getTokenTree(this);\n            if ((tokenTree != null) && tokenTree.exists()) {\n                try {\n                    if (tokenTree.remove()) {\n                        root.commit();\n                        return true;\n                    }\n                } catch (org.apache.jackrabbit.oak.api.CommitFailedException e) {\n                    org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug(\"Error while removing expired token\", e.getMessage());\n                }\n            }\n            return false;\n        }\n\n        @java.lang.Override\n        public boolean matches(org.apache.jackrabbit.api.security.authentication.token.TokenCredentials tokenCredentials) {\n            java.lang.String tk = tokenCredentials.getToken();\n            int pos = tk.lastIndexOf(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.DELIM);\n            if (pos > (-1)) {\n                tk = tk.substring(pos + 1);\n            }\n            if ((key == null) || (!org.apache.jackrabbit.oak.spi.security.user.util.PasswordUtil.isSame(key, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.getKeyValue(tk, userId)))) {\n                return false;\n            }\n            for (java.lang.String name : mandatoryAttributes.keySet()) {\n                java.lang.String expectedValue = mandatoryAttributes.get(name);\n                if (!expectedValue.equals(tokenCredentials.getAttribute(name))) {\n                    return false;\n                }\n            }\n            java.util.Collection<java.lang.String> attrNames = java.util.Arrays.asList(tokenCredentials.getAttributeNames());\n            for (java.lang.String name : publicAttributes.keySet()) {\n                if (!attrNames.contains(name)) {\n                    tokenCredentials.setAttribute(name, publicAttributes.get(name).toString());\n                }\n            }\n            return true;\n        }\n\n        @java.lang.Override\n        public java.util.Map<java.lang.String, java.lang.String> getPrivateAttributes() {\n            return java.util.Collections.unmodifiableMap(mandatoryAttributes);\n        }\n\n        @java.lang.Override\n        public java.util.Map<java.lang.String, java.lang.String> getPublicAttributes() {\n            return java.util.Collections.unmodifiableMap(publicAttributes);\n        }\n\n        private boolean isMandatoryAttribute(java.lang.String attributeName) {\n            return (attributeName != null) && attributeName.startsWith(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKEN_ATTRIBUTE);\n        }\n\n        private boolean isInfoAttribute(java.lang.String attributeName) {\n            java.lang.String prefix = org.apache.jackrabbit.util.Text.getNamespacePrefix(attributeName);\n            return !NamespaceConstants.RESERVED_PREFIXES.contains(prefix);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.api.security.user.User user = getUser(userId)",
            "src_parent": "{\n    java.lang.String error = \"Failed to create login token. \";\n    org.apache.jackrabbit.api.security.user.User user = getUser(userId);\n    org.apache.jackrabbit.oak.util.NodeUtil tokenParent = getTokenParent(user);\n    if (tokenParent != null) {\n        try {\n            java.lang.String id = user.getID();\n            long creationTime = new java.util.Date().getTime();\n            org.apache.jackrabbit.oak.util.NodeUtil tokenNode = createTokenNode(tokenParent, creationTime);\n            tokenNode.setString(JcrConstants.JCR_UUID, org.apache.jackrabbit.oak.plugins.identifier.IdentifierManager.generateUUID());\n            java.lang.String key = org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.generateKey(options.getConfigValue(org.apache.jackrabbit.oak.security.authentication.token.PARAM_TOKEN_LENGTH, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.DEFAULT_KEY_SIZE));\n            java.lang.String nodeId = getIdentifier(tokenNode.getTree());\n            java.lang.String token = new java.lang.StringBuilder(nodeId).append(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.DELIM).append(key).toString();\n            java.lang.String keyHash = org.apache.jackrabbit.oak.spi.security.user.util.PasswordUtil.buildPasswordHash(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.getKeyValue(key, id), options);\n            tokenNode.setString(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKEN_ATTRIBUTE_KEY, keyHash);\n            long exp;\n            if (attributes.containsKey(org.apache.jackrabbit.oak.security.authentication.token.PARAM_TOKEN_EXPIRATION)) {\n                exp = java.lang.Long.parseLong(attributes.get(org.apache.jackrabbit.oak.security.authentication.token.PARAM_TOKEN_EXPIRATION).toString());\n            } else {\n                exp = tokenExpiration;\n            }\n            long expTime = org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.createExpirationTime(creationTime, exp);\n            tokenNode.setDate(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKEN_ATTRIBUTE_EXPIRY, expTime);\n            for (java.lang.String name : attributes.keySet()) {\n                if (!org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.RESERVED_ATTRIBUTES.contains(name)) {\n                    java.lang.String attr = attributes.get(name).toString();\n                    tokenNode.setString(name, attr);\n                }\n            }\n            root.commit();\n            return new org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TokenInfoImpl(tokenNode, token, id);\n        } catch (java.security.NoSuchAlgorithmException e) {\n            org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.error(error, e.getMessage());\n        } catch (java.io.UnsupportedEncodingException e) {\n            org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.error(error, e.getMessage());\n        } catch (org.apache.jackrabbit.oak.api.CommitFailedException e) {\n            org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.warn(error, e.getMessage());\n        } catch (javax.jcr.RepositoryException e) {\n            org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.warn(error, e.getMessage());\n        }\n    } else {\n        org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.warn(\"Unable to get/create token store for user \" + userId);\n    }\n    return null;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "@javax.annotation.CheckForNull\norg.apache.jackrabbit.api.security.user.User user",
            "src_parent": "@javax.annotation.CheckForNull\nprivate org.apache.jackrabbit.oak.util.NodeUtil getTokenParent(@javax.annotation.CheckForNull\norg.apache.jackrabbit.api.security.user.User user) {\n    if (user == null) {\n        return null;\n    }\n    org.apache.jackrabbit.oak.util.NodeUtil tokenParent = null;\n    java.lang.String parentPath = null;\n    try {\n        java.lang.String userPath = user.getPath();\n        org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath));\n        tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME);\n        if (tokenParent == null) {\n            tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n            parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n            root.commit();\n        }\n    } catch (javax.jcr.RepositoryException e) {\n        org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug(\"Error while creating token node \", e.getMessage());\n    } catch (org.apache.jackrabbit.oak.api.CommitFailedException e) {\n        org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug(\"Conflict while creating token store -> retrying\", e.getMessage());\n        root.refresh();\n        if (parentPath != null) {\n            org.apache.jackrabbit.oak.api.Tree parentTree = root.getTree(parentPath);\n            if (parentTree.exists()) {\n                tokenParent = new org.apache.jackrabbit.oak.util.NodeUtil(parentTree);\n            }\n        }\n    }\n    return tokenParent;\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (user == null) {\n    return null;\n}",
            "src_parent": "{\n    if (user == null) {\n        return null;\n    }\n    org.apache.jackrabbit.oak.util.NodeUtil tokenParent = null;\n    java.lang.String parentPath = null;\n    try {\n        java.lang.String userPath = user.getPath();\n        org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath));\n        tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME);\n        if (tokenParent == null) {\n            tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n            parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n            root.commit();\n        }\n    } catch (javax.jcr.RepositoryException e) {\n        org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug(\"Error while creating token node \", e.getMessage());\n    } catch (org.apache.jackrabbit.oak.api.CommitFailedException e) {\n        org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug(\"Conflict while creating token store -> retrying\", e.getMessage());\n        root.refresh();\n        if (parentPath != null) {\n            org.apache.jackrabbit.oak.api.Tree parentTree = root.getTree(parentPath);\n            if (parentTree.exists()) {\n                tokenParent = new org.apache.jackrabbit.oak.util.NodeUtil(parentTree);\n            }\n        }\n    }\n    return tokenParent;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "@javax.annotation.Nonnull",
            "src_parent": "@javax.annotation.Nonnull\njava.lang.String key",
            "src_parent_type": "Parameter",
            "src_type": "Annotation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "@javax.annotation.Nonnull",
            "src_parent": "@javax.annotation.Nonnull\njava.lang.String userId",
            "src_parent_type": "Parameter",
            "src_type": "Annotation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "catch (javax.jcr.RepositoryException e) {\n    org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug(\"Error while creating token node \", e.getMessage());\n}",
            "src_parent": "try {\n    java.lang.String userPath = user.getPath();\n    org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath));\n    tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME);\n    if (tokenParent == null) {\n        tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n        parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n        root.commit();\n    }\n} catch (javax.jcr.RepositoryException e) {\n    org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug(\"Error while creating token node \", e.getMessage());\n} catch (org.apache.jackrabbit.oak.api.CommitFailedException e) {\n    org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug(\"Conflict while creating token store -> retrying\", e.getMessage());\n    root.refresh();\n    if (parentPath != null) {\n        org.apache.jackrabbit.oak.api.Tree parentTree = root.getTree(parentPath);\n        if (parentTree.exists()) {\n            tokenParent = new org.apache.jackrabbit.oak.util.NodeUtil(parentTree);\n        }\n    }\n}",
            "src_parent_type": "Try",
            "src_type": "Catch"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.lang.String id = user.getID()",
            "src_parent": "{\n    java.lang.String id = user.getID();\n    long creationTime = new java.util.Date().getTime();\n    org.apache.jackrabbit.oak.util.NodeUtil tokenNode = createTokenNode(tokenParent, creationTime);\n    tokenNode.setString(JcrConstants.JCR_UUID, org.apache.jackrabbit.oak.plugins.identifier.IdentifierManager.generateUUID());\n    java.lang.String key = org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.generateKey(options.getConfigValue(org.apache.jackrabbit.oak.security.authentication.token.PARAM_TOKEN_LENGTH, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.DEFAULT_KEY_SIZE));\n    java.lang.String nodeId = getIdentifier(tokenNode.getTree());\n    java.lang.String token = new java.lang.StringBuilder(nodeId).append(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.DELIM).append(key).toString();\n    java.lang.String keyHash = org.apache.jackrabbit.oak.spi.security.user.util.PasswordUtil.buildPasswordHash(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.getKeyValue(key, id), options);\n    tokenNode.setString(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKEN_ATTRIBUTE_KEY, keyHash);\n    long exp;\n    if (attributes.containsKey(org.apache.jackrabbit.oak.security.authentication.token.PARAM_TOKEN_EXPIRATION)) {\n        exp = java.lang.Long.parseLong(attributes.get(org.apache.jackrabbit.oak.security.authentication.token.PARAM_TOKEN_EXPIRATION).toString());\n    } else {\n        exp = tokenExpiration;\n    }\n    long expTime = org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.createExpirationTime(creationTime, exp);\n    tokenNode.setDate(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKEN_ATTRIBUTE_EXPIRY, expTime);\n    for (java.lang.String name : attributes.keySet()) {\n        if (!org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.RESERVED_ATTRIBUTES.contains(name)) {\n            java.lang.String attr = attributes.get(name).toString();\n            tokenNode.setString(name, attr);\n        }\n    }\n    root.commit();\n    return new org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TokenInfoImpl(tokenNode, token, id);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String userId",
            "dst_parent": "@javax.annotation.CheckForNull\nprivate org.apache.jackrabbit.api.security.user.User getUser(java.lang.String userId) {\n    try {\n        org.apache.jackrabbit.api.security.user.Authorizable user = userManager.getAuthorizable(userId);\n        if ((user != null) && (!user.isGroup())) {\n            return ((org.apache.jackrabbit.api.security.user.User) (user));\n        } else {\n            org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Cannot create login token: No corresponding node for User \" + userId) + '.');\n        }\n    } catch (javax.jcr.RepositoryException e) {\n        org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Error while accessing user \" + userId) + '.', e);\n    }\n    return null;\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "java.lang.String userId",
            "src_parent": "@javax.annotation.CheckForNull\nprivate org.apache.jackrabbit.oak.util.NodeUtil getTokenParent(java.lang.String userId) {\n    org.apache.jackrabbit.oak.util.NodeUtil tokenParent = null;\n    java.lang.String parentPath = null;\n    try {\n        org.apache.jackrabbit.api.security.user.Authorizable user = userManager.getAuthorizable(userId);\n        if ((user != null) && (!user.isGroup())) {\n            java.lang.String userPath = user.getPath();\n            org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath));\n            tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME);\n            if (tokenParent == null) {\n                tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n                parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n                root.commit();\n            }\n        } else {\n            org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Cannot create login token: No corresponding node for User \" + userId) + '.');\n        }\n    } catch (javax.jcr.RepositoryException e) {\n        org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Error while accessing user \" + userId) + '.', e);\n    } catch (org.apache.jackrabbit.oak.api.CommitFailedException e) {\n        org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug(\"Conflict while creating token store -> retrying\", e.getMessage());\n        root.refresh();\n        if (parentPath != null) {\n            org.apache.jackrabbit.oak.api.Tree parentTree = root.getTree(parentPath);\n            if (parentTree.exists()) {\n                tokenParent = new org.apache.jackrabbit.oak.util.NodeUtil(parentTree);\n            }\n        }\n    }\n    return tokenParent;\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.api.security.user.Authorizable user = userManager.getAuthorizable(userId)",
            "dst_parent": "{\n    org.apache.jackrabbit.api.security.user.Authorizable user = userManager.getAuthorizable(userId);\n    if ((user != null) && (!user.isGroup())) {\n        return ((org.apache.jackrabbit.api.security.user.User) (user));\n    } else {\n        org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Cannot create login token: No corresponding node for User \" + userId) + '.');\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "org.apache.jackrabbit.api.security.user.Authorizable user = userManager.getAuthorizable(userId)",
            "src_parent": "{\n    org.apache.jackrabbit.api.security.user.Authorizable user = userManager.getAuthorizable(userId);\n    if ((user != null) && (!user.isGroup())) {\n        java.lang.String userPath = user.getPath();\n        org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath));\n        tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME);\n        if (tokenParent == null) {\n            tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n            parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n            root.commit();\n        }\n    } else {\n        org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Cannot create login token: No corresponding node for User \" + userId) + '.');\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "catch (javax.jcr.RepositoryException e) {\n    org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Error while accessing user \" + userId) + '.', e);\n}",
            "dst_parent": "try {\n    org.apache.jackrabbit.api.security.user.Authorizable user = userManager.getAuthorizable(userId);\n    if ((user != null) && (!user.isGroup())) {\n        return ((org.apache.jackrabbit.api.security.user.User) (user));\n    } else {\n        org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Cannot create login token: No corresponding node for User \" + userId) + '.');\n    }\n} catch (javax.jcr.RepositoryException e) {\n    org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Error while accessing user \" + userId) + '.', e);\n}",
            "dst_parent_type": "Try",
            "dst_type": "Catch",
            "operator": "MOV",
            "src": "catch (javax.jcr.RepositoryException e) {\n    org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Error while accessing user \" + userId) + '.', e);\n}",
            "src_parent": "try {\n    org.apache.jackrabbit.api.security.user.Authorizable user = userManager.getAuthorizable(userId);\n    if ((user != null) && (!user.isGroup())) {\n        java.lang.String userPath = user.getPath();\n        org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath));\n        tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME);\n        if (tokenParent == null) {\n            tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n            parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n            root.commit();\n        }\n    } else {\n        org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Cannot create login token: No corresponding node for User \" + userId) + '.');\n    }\n} catch (javax.jcr.RepositoryException e) {\n    org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Error while accessing user \" + userId) + '.', e);\n} catch (org.apache.jackrabbit.oak.api.CommitFailedException e) {\n    org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug(\"Conflict while creating token store -> retrying\", e.getMessage());\n    root.refresh();\n    if (parentPath != null) {\n        org.apache.jackrabbit.oak.api.Tree parentTree = root.getTree(parentPath);\n        if (parentTree.exists()) {\n            tokenParent = new org.apache.jackrabbit.oak.util.NodeUtil(parentTree);\n        }\n    }\n}",
            "src_parent_type": "Try",
            "src_type": "Catch"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String userPath = user.getPath()",
            "dst_parent": "{\n    java.lang.String userPath = user.getPath();\n    org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath));\n    tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME);\n    if (tokenParent == null) {\n        tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n        parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n        root.commit();\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.lang.String userPath = user.getPath()",
            "src_parent": "{\n    java.lang.String userPath = user.getPath();\n    org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath));\n    tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME);\n    if (tokenParent == null) {\n        tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n        parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n        root.commit();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath))",
            "dst_parent": "{\n    java.lang.String userPath = user.getPath();\n    org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath));\n    tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME);\n    if (tokenParent == null) {\n        tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n        parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n        root.commit();\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath))",
            "src_parent": "{\n    java.lang.String userPath = user.getPath();\n    org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath));\n    tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME);\n    if (tokenParent == null) {\n        tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n        parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n        root.commit();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME)",
            "dst_parent": "{\n    java.lang.String userPath = user.getPath();\n    org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath));\n    tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME);\n    if (tokenParent == null) {\n        tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n        parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n        root.commit();\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME)",
            "src_parent": "{\n    java.lang.String userPath = user.getPath();\n    org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath));\n    tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME);\n    if (tokenParent == null) {\n        tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n        parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n        root.commit();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (tokenParent == null) {\n    tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n    parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n    root.commit();\n}",
            "dst_parent": "{\n    java.lang.String userPath = user.getPath();\n    org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath));\n    tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME);\n    if (tokenParent == null) {\n        tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n        parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n        root.commit();\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (tokenParent == null) {\n    tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n    parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n    root.commit();\n}",
            "src_parent": "{\n    java.lang.String userPath = user.getPath();\n    org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath));\n    tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME);\n    if (tokenParent == null) {\n        tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n        parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n        root.commit();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(user != null) && (!user.isGroup())",
            "dst_parent": "if ((user != null) && (!user.isGroup())) {\n    return ((org.apache.jackrabbit.api.security.user.User) (user));\n} else {\n    org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Cannot create login token: No corresponding node for User \" + userId) + '.');\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(user != null) && (!user.isGroup())",
            "src_parent": "if ((user != null) && (!user.isGroup())) {\n    java.lang.String userPath = user.getPath();\n    org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath));\n    tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME);\n    if (tokenParent == null) {\n        tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n        parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n        root.commit();\n    }\n} else {\n    org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Cannot create login token: No corresponding node for User \" + userId) + '.');\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Cannot create login token: No corresponding node for User \" + userId) + '.');\n}",
            "dst_parent": "if ((user != null) && (!user.isGroup())) {\n    return ((org.apache.jackrabbit.api.security.user.User) (user));\n} else {\n    org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Cannot create login token: No corresponding node for User \" + userId) + '.');\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Cannot create login token: No corresponding node for User \" + userId) + '.');\n}",
            "src_parent": "if ((user != null) && (!user.isGroup())) {\n    java.lang.String userPath = user.getPath();\n    org.apache.jackrabbit.oak.util.NodeUtil userNode = new org.apache.jackrabbit.oak.util.NodeUtil(root.getTree(userPath));\n    tokenParent = userNode.getChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME);\n    if (tokenParent == null) {\n        tokenParent = userNode.addChild(org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME, org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NT_NAME);\n        parentPath = (userPath + '/') + org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.TOKENS_NODE_NAME;\n        root.commit();\n    }\n} else {\n    org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImpl.log.debug((\"Cannot create login token: No corresponding node for User \" + userId) + '.');\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        }
      ],
      "file_name": "TokenProviderImpl"
    }
  ],
  "id": "jackrabbit-oak_f620b79b"
}