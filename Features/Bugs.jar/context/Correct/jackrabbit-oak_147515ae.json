{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "i",
            "src_parent": "property.getValue(Type.LONG, i)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "i",
            "src_parent": "property.getValue(Type.DATE, i)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "i",
            "src_parent": "property.getValue(Type.DOUBLE, i)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "i",
            "src_parent": "property.getValue(Type.BOOLEAN, i)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "i",
            "src_parent": "property.getValue(Type.STRING, i)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "for (int i = 0; i < property.count(); i++) {\n    org.apache.lucene.document.Field f = null;\n    try {\n        if (tag == Type.LONG.tag()) {\n            f = new org.apache.lucene.document.NumericDocValuesField(name, property.getValue(Type.LONG, i));\n        } else if (tag == Type.DATE.tag()) {\n            java.lang.String date = property.getValue(Type.DATE, i);\n            f = new org.apache.lucene.document.NumericDocValuesField(name, org.apache.jackrabbit.oak.plugins.index.lucene.FieldFactory.dateToLong(date));\n        } else if (tag == Type.DOUBLE.tag()) {\n            f = new org.apache.lucene.document.DoubleDocValuesField(name, property.getValue(Type.DOUBLE, i));\n        } else if (tag == Type.BOOLEAN.tag()) {\n            f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.BOOLEAN, i).toString()));\n        } else if (tag == Type.STRING.tag()) {\n            f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.STRING, i)));\n        }\n        if (f != null) {\n            fields.add(f);\n            fieldAdded = true;\n        }\n    } catch (java.lang.Exception e) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditor.log.warn(\"Ignoring ordered property. Could not convert property {} of type {} to type \" + \"{} for path {}\", pname, org.apache.jackrabbit.oak.api.Type.fromTag(property.getType().tag(), false), org.apache.jackrabbit.oak.api.Type.fromTag(tag, false), getPath(), e);\n    }\n}",
            "src_parent": "{\n    int tag = property.getType().tag();\n    int idxDefinedTag = pd.getType();\n    if (tag != idxDefinedTag) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditor.log.debug(\"Ordered property defined with type {} differs from property {} with type {} in \" + \"path {}\", org.apache.jackrabbit.oak.api.Type.fromTag(idxDefinedTag, false), property.toString(), org.apache.jackrabbit.oak.api.Type.fromTag(tag, false), getPath());\n        tag = idxDefinedTag;\n    }\n    java.lang.String name = org.apache.jackrabbit.oak.plugins.index.lucene.FieldNames.createDocValFieldName(pname);\n    boolean fieldAdded = false;\n    for (int i = 0; i < property.count(); i++) {\n        org.apache.lucene.document.Field f = null;\n        try {\n            if (tag == Type.LONG.tag()) {\n                f = new org.apache.lucene.document.NumericDocValuesField(name, property.getValue(Type.LONG, i));\n            } else if (tag == Type.DATE.tag()) {\n                java.lang.String date = property.getValue(Type.DATE, i);\n                f = new org.apache.lucene.document.NumericDocValuesField(name, org.apache.jackrabbit.oak.plugins.index.lucene.FieldFactory.dateToLong(date));\n            } else if (tag == Type.DOUBLE.tag()) {\n                f = new org.apache.lucene.document.DoubleDocValuesField(name, property.getValue(Type.DOUBLE, i));\n            } else if (tag == Type.BOOLEAN.tag()) {\n                f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.BOOLEAN, i).toString()));\n            } else if (tag == Type.STRING.tag()) {\n                f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.STRING, i)));\n            }\n            if (f != null) {\n                fields.add(f);\n                fieldAdded = true;\n            }\n        } catch (java.lang.Exception e) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditor.log.warn(\"Ignoring ordered property. Could not convert property {} of type {} to type \" + \"{} for path {}\", pname, org.apache.jackrabbit.oak.api.Type.fromTag(property.getType().tag(), false), org.apache.jackrabbit.oak.api.Type.fromTag(tag, false), getPath(), e);\n        }\n    }\n    return fieldAdded;\n}",
            "src_parent_type": "Block",
            "src_type": "For"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (property.getType().isArray()) {\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditor.log.warn(\"Ignoring ordered property {} of type {} for path {} as multivalued ordered property not supported\", pname, org.apache.jackrabbit.oak.api.Type.fromTag(property.getType().tag(), true), getPath());\n    return false;\n}",
            "src_parent": "{\n    if (property.getType().isArray()) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditor.log.warn(\"Ignoring ordered property {} of type {} for path {} as multivalued ordered property not supported\", pname, org.apache.jackrabbit.oak.api.Type.fromTag(property.getType().tag(), true), getPath());\n        return false;\n    }\n    int tag = property.getType().tag();\n    int idxDefinedTag = pd.getType();\n    if (tag != idxDefinedTag) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditor.log.debug(\"Ordered property defined with type {} differs from property {} with type {} in \" + \"path {}\", org.apache.jackrabbit.oak.api.Type.fromTag(idxDefinedTag, false), property.toString(), org.apache.jackrabbit.oak.api.Type.fromTag(tag, false), getPath());\n        tag = idxDefinedTag;\n    }\n    java.lang.String name = org.apache.jackrabbit.oak.plugins.index.lucene.FieldNames.createDocValFieldName(pname);\n    boolean fieldAdded = false;\n    org.apache.lucene.document.Field f = null;\n    try {\n        if (tag == Type.LONG.tag()) {\n            f = new org.apache.lucene.document.NumericDocValuesField(name, property.getValue(Type.LONG));\n        } else if (tag == Type.DATE.tag()) {\n            java.lang.String date = property.getValue(Type.DATE);\n            f = new org.apache.lucene.document.NumericDocValuesField(name, org.apache.jackrabbit.oak.plugins.index.lucene.FieldFactory.dateToLong(date));\n        } else if (tag == Type.DOUBLE.tag()) {\n            f = new org.apache.lucene.document.DoubleDocValuesField(name, property.getValue(Type.DOUBLE));\n        } else if (tag == Type.BOOLEAN.tag()) {\n            f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.BOOLEAN).toString()));\n        } else if (tag == Type.STRING.tag()) {\n            f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.STRING)));\n        }\n        if (f != null) {\n            fields.add(f);\n            fieldAdded = true;\n        }\n    } catch (java.lang.Exception e) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditor.log.warn(\"Ignoring ordered property. Could not convert property {} of type {} to type \" + \"{} for path {}\", pname, org.apache.jackrabbit.oak.api.Type.fromTag(property.getType().tag(), false), org.apache.jackrabbit.oak.api.Type.fromTag(tag, false), getPath(), e);\n    }\n    return fieldAdded;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "try {\n    if (tag == Type.LONG.tag()) {\n        f = new org.apache.lucene.document.NumericDocValuesField(name, property.getValue(Type.LONG));\n    } else if (tag == Type.DATE.tag()) {\n        java.lang.String date = property.getValue(Type.DATE);\n        f = new org.apache.lucene.document.NumericDocValuesField(name, org.apache.jackrabbit.oak.plugins.index.lucene.FieldFactory.dateToLong(date));\n    } else if (tag == Type.DOUBLE.tag()) {\n        f = new org.apache.lucene.document.DoubleDocValuesField(name, property.getValue(Type.DOUBLE));\n    } else if (tag == Type.BOOLEAN.tag()) {\n        f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.BOOLEAN).toString()));\n    } else if (tag == Type.STRING.tag()) {\n        f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.STRING)));\n    }\n    if (f != null) {\n        fields.add(f);\n        fieldAdded = true;\n    }\n} catch (java.lang.Exception e) {\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditor.log.warn(\"Ignoring ordered property. Could not convert property {} of type {} to type \" + \"{} for path {}\", pname, org.apache.jackrabbit.oak.api.Type.fromTag(property.getType().tag(), false), org.apache.jackrabbit.oak.api.Type.fromTag(tag, false), getPath(), e);\n}",
            "src_parent": "{\n    if (property.getType().isArray()) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditor.log.warn(\"Ignoring ordered property {} of type {} for path {} as multivalued ordered property not supported\", pname, org.apache.jackrabbit.oak.api.Type.fromTag(property.getType().tag(), true), getPath());\n        return false;\n    }\n    int tag = property.getType().tag();\n    int idxDefinedTag = pd.getType();\n    if (tag != idxDefinedTag) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditor.log.debug(\"Ordered property defined with type {} differs from property {} with type {} in \" + \"path {}\", org.apache.jackrabbit.oak.api.Type.fromTag(idxDefinedTag, false), property.toString(), org.apache.jackrabbit.oak.api.Type.fromTag(tag, false), getPath());\n        tag = idxDefinedTag;\n    }\n    java.lang.String name = org.apache.jackrabbit.oak.plugins.index.lucene.FieldNames.createDocValFieldName(pname);\n    boolean fieldAdded = false;\n    org.apache.lucene.document.Field f = null;\n    try {\n        if (tag == Type.LONG.tag()) {\n            f = new org.apache.lucene.document.NumericDocValuesField(name, property.getValue(Type.LONG));\n        } else if (tag == Type.DATE.tag()) {\n            java.lang.String date = property.getValue(Type.DATE);\n            f = new org.apache.lucene.document.NumericDocValuesField(name, org.apache.jackrabbit.oak.plugins.index.lucene.FieldFactory.dateToLong(date));\n        } else if (tag == Type.DOUBLE.tag()) {\n            f = new org.apache.lucene.document.DoubleDocValuesField(name, property.getValue(Type.DOUBLE));\n        } else if (tag == Type.BOOLEAN.tag()) {\n            f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.BOOLEAN).toString()));\n        } else if (tag == Type.STRING.tag()) {\n            f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.STRING)));\n        }\n        if (f != null) {\n            fields.add(f);\n            fieldAdded = true;\n        }\n    } catch (java.lang.Exception e) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditor.log.warn(\"Ignoring ordered property. Could not convert property {} of type {} to type \" + \"{} for path {}\", pname, org.apache.jackrabbit.oak.api.Type.fromTag(property.getType().tag(), false), org.apache.jackrabbit.oak.api.Type.fromTag(tag, false), getPath(), e);\n    }\n    return fieldAdded;\n}",
            "src_parent_type": "Block",
            "src_type": "Try"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.lucene.document.Field f = null",
            "dst_parent": "{\n    if (property.getType().isArray()) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditor.log.warn(\"Ignoring ordered property {} of type {} for path {} as multivalued ordered property not supported\", pname, org.apache.jackrabbit.oak.api.Type.fromTag(property.getType().tag(), true), getPath());\n        return false;\n    }\n    int tag = property.getType().tag();\n    int idxDefinedTag = pd.getType();\n    if (tag != idxDefinedTag) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditor.log.debug(\"Ordered property defined with type {} differs from property {} with type {} in \" + \"path {}\", org.apache.jackrabbit.oak.api.Type.fromTag(idxDefinedTag, false), property.toString(), org.apache.jackrabbit.oak.api.Type.fromTag(tag, false), getPath());\n        tag = idxDefinedTag;\n    }\n    java.lang.String name = org.apache.jackrabbit.oak.plugins.index.lucene.FieldNames.createDocValFieldName(pname);\n    boolean fieldAdded = false;\n    org.apache.lucene.document.Field f = null;\n    try {\n        if (tag == Type.LONG.tag()) {\n            f = new org.apache.lucene.document.NumericDocValuesField(name, property.getValue(Type.LONG));\n        } else if (tag == Type.DATE.tag()) {\n            java.lang.String date = property.getValue(Type.DATE);\n            f = new org.apache.lucene.document.NumericDocValuesField(name, org.apache.jackrabbit.oak.plugins.index.lucene.FieldFactory.dateToLong(date));\n        } else if (tag == Type.DOUBLE.tag()) {\n            f = new org.apache.lucene.document.DoubleDocValuesField(name, property.getValue(Type.DOUBLE));\n        } else if (tag == Type.BOOLEAN.tag()) {\n            f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.BOOLEAN).toString()));\n        } else if (tag == Type.STRING.tag()) {\n            f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.STRING)));\n        }\n        if (f != null) {\n            fields.add(f);\n            fieldAdded = true;\n        }\n    } catch (java.lang.Exception e) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditor.log.warn(\"Ignoring ordered property. Could not convert property {} of type {} to type \" + \"{} for path {}\", pname, org.apache.jackrabbit.oak.api.Type.fromTag(property.getType().tag(), false), org.apache.jackrabbit.oak.api.Type.fromTag(tag, false), getPath(), e);\n    }\n    return fieldAdded;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "org.apache.lucene.document.Field f = null",
            "src_parent": "{\n    org.apache.lucene.document.Field f = null;\n    try {\n        if (tag == Type.LONG.tag()) {\n            f = new org.apache.lucene.document.NumericDocValuesField(name, property.getValue(Type.LONG, i));\n        } else if (tag == Type.DATE.tag()) {\n            java.lang.String date = property.getValue(Type.DATE, i);\n            f = new org.apache.lucene.document.NumericDocValuesField(name, org.apache.jackrabbit.oak.plugins.index.lucene.FieldFactory.dateToLong(date));\n        } else if (tag == Type.DOUBLE.tag()) {\n            f = new org.apache.lucene.document.DoubleDocValuesField(name, property.getValue(Type.DOUBLE, i));\n        } else if (tag == Type.BOOLEAN.tag()) {\n            f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.BOOLEAN, i).toString()));\n        } else if (tag == Type.STRING.tag()) {\n            f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.STRING, i)));\n        }\n        if (f != null) {\n            fields.add(f);\n            fieldAdded = true;\n        }\n    } catch (java.lang.Exception e) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditor.log.warn(\"Ignoring ordered property. Could not convert property {} of type {} to type \" + \"{} for path {}\", pname, org.apache.jackrabbit.oak.api.Type.fromTag(property.getType().tag(), false), org.apache.jackrabbit.oak.api.Type.fromTag(tag, false), getPath(), e);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (tag == Type.LONG.tag()) {\n    f = new org.apache.lucene.document.NumericDocValuesField(name, property.getValue(Type.LONG));\n} else if (tag == Type.DATE.tag()) {\n    java.lang.String date = property.getValue(Type.DATE);\n    f = new org.apache.lucene.document.NumericDocValuesField(name, org.apache.jackrabbit.oak.plugins.index.lucene.FieldFactory.dateToLong(date));\n} else if (tag == Type.DOUBLE.tag()) {\n    f = new org.apache.lucene.document.DoubleDocValuesField(name, property.getValue(Type.DOUBLE));\n} else if (tag == Type.BOOLEAN.tag()) {\n    f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.BOOLEAN).toString()));\n} else if (tag == Type.STRING.tag()) {\n    f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.STRING)));\n}",
            "dst_parent": "{\n    if (tag == Type.LONG.tag()) {\n        f = new org.apache.lucene.document.NumericDocValuesField(name, property.getValue(Type.LONG));\n    } else if (tag == Type.DATE.tag()) {\n        java.lang.String date = property.getValue(Type.DATE);\n        f = new org.apache.lucene.document.NumericDocValuesField(name, org.apache.jackrabbit.oak.plugins.index.lucene.FieldFactory.dateToLong(date));\n    } else if (tag == Type.DOUBLE.tag()) {\n        f = new org.apache.lucene.document.DoubleDocValuesField(name, property.getValue(Type.DOUBLE));\n    } else if (tag == Type.BOOLEAN.tag()) {\n        f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.BOOLEAN).toString()));\n    } else if (tag == Type.STRING.tag()) {\n        f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.STRING)));\n    }\n    if (f != null) {\n        fields.add(f);\n        fieldAdded = true;\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (tag == Type.LONG.tag()) {\n    f = new org.apache.lucene.document.NumericDocValuesField(name, property.getValue(Type.LONG, i));\n} else if (tag == Type.DATE.tag()) {\n    java.lang.String date = property.getValue(Type.DATE, i);\n    f = new org.apache.lucene.document.NumericDocValuesField(name, org.apache.jackrabbit.oak.plugins.index.lucene.FieldFactory.dateToLong(date));\n} else if (tag == Type.DOUBLE.tag()) {\n    f = new org.apache.lucene.document.DoubleDocValuesField(name, property.getValue(Type.DOUBLE, i));\n} else if (tag == Type.BOOLEAN.tag()) {\n    f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.BOOLEAN, i).toString()));\n} else if (tag == Type.STRING.tag()) {\n    f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.STRING, i)));\n}",
            "src_parent": "{\n    if (tag == Type.LONG.tag()) {\n        f = new org.apache.lucene.document.NumericDocValuesField(name, property.getValue(Type.LONG, i));\n    } else if (tag == Type.DATE.tag()) {\n        java.lang.String date = property.getValue(Type.DATE, i);\n        f = new org.apache.lucene.document.NumericDocValuesField(name, org.apache.jackrabbit.oak.plugins.index.lucene.FieldFactory.dateToLong(date));\n    } else if (tag == Type.DOUBLE.tag()) {\n        f = new org.apache.lucene.document.DoubleDocValuesField(name, property.getValue(Type.DOUBLE, i));\n    } else if (tag == Type.BOOLEAN.tag()) {\n        f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.BOOLEAN, i).toString()));\n    } else if (tag == Type.STRING.tag()) {\n        f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.STRING, i)));\n    }\n    if (f != null) {\n        fields.add(f);\n        fieldAdded = true;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (f != null) {\n    fields.add(f);\n    fieldAdded = true;\n}",
            "dst_parent": "{\n    if (tag == Type.LONG.tag()) {\n        f = new org.apache.lucene.document.NumericDocValuesField(name, property.getValue(Type.LONG));\n    } else if (tag == Type.DATE.tag()) {\n        java.lang.String date = property.getValue(Type.DATE);\n        f = new org.apache.lucene.document.NumericDocValuesField(name, org.apache.jackrabbit.oak.plugins.index.lucene.FieldFactory.dateToLong(date));\n    } else if (tag == Type.DOUBLE.tag()) {\n        f = new org.apache.lucene.document.DoubleDocValuesField(name, property.getValue(Type.DOUBLE));\n    } else if (tag == Type.BOOLEAN.tag()) {\n        f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.BOOLEAN).toString()));\n    } else if (tag == Type.STRING.tag()) {\n        f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.STRING)));\n    }\n    if (f != null) {\n        fields.add(f);\n        fieldAdded = true;\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (f != null) {\n    fields.add(f);\n    fieldAdded = true;\n}",
            "src_parent": "{\n    if (tag == Type.LONG.tag()) {\n        f = new org.apache.lucene.document.NumericDocValuesField(name, property.getValue(Type.LONG, i));\n    } else if (tag == Type.DATE.tag()) {\n        java.lang.String date = property.getValue(Type.DATE, i);\n        f = new org.apache.lucene.document.NumericDocValuesField(name, org.apache.jackrabbit.oak.plugins.index.lucene.FieldFactory.dateToLong(date));\n    } else if (tag == Type.DOUBLE.tag()) {\n        f = new org.apache.lucene.document.DoubleDocValuesField(name, property.getValue(Type.DOUBLE, i));\n    } else if (tag == Type.BOOLEAN.tag()) {\n        f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.BOOLEAN, i).toString()));\n    } else if (tag == Type.STRING.tag()) {\n        f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.STRING, i)));\n    }\n    if (f != null) {\n        fields.add(f);\n        fieldAdded = true;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "catch (java.lang.Exception e) {\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditor.log.warn(\"Ignoring ordered property. Could not convert property {} of type {} to type \" + \"{} for path {}\", pname, org.apache.jackrabbit.oak.api.Type.fromTag(property.getType().tag(), false), org.apache.jackrabbit.oak.api.Type.fromTag(tag, false), getPath(), e);\n}",
            "dst_parent": "try {\n    if (tag == Type.LONG.tag()) {\n        f = new org.apache.lucene.document.NumericDocValuesField(name, property.getValue(Type.LONG));\n    } else if (tag == Type.DATE.tag()) {\n        java.lang.String date = property.getValue(Type.DATE);\n        f = new org.apache.lucene.document.NumericDocValuesField(name, org.apache.jackrabbit.oak.plugins.index.lucene.FieldFactory.dateToLong(date));\n    } else if (tag == Type.DOUBLE.tag()) {\n        f = new org.apache.lucene.document.DoubleDocValuesField(name, property.getValue(Type.DOUBLE));\n    } else if (tag == Type.BOOLEAN.tag()) {\n        f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.BOOLEAN).toString()));\n    } else if (tag == Type.STRING.tag()) {\n        f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.STRING)));\n    }\n    if (f != null) {\n        fields.add(f);\n        fieldAdded = true;\n    }\n} catch (java.lang.Exception e) {\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditor.log.warn(\"Ignoring ordered property. Could not convert property {} of type {} to type \" + \"{} for path {}\", pname, org.apache.jackrabbit.oak.api.Type.fromTag(property.getType().tag(), false), org.apache.jackrabbit.oak.api.Type.fromTag(tag, false), getPath(), e);\n}",
            "dst_parent_type": "Try",
            "dst_type": "Catch",
            "operator": "MOV",
            "src": "catch (java.lang.Exception e) {\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditor.log.warn(\"Ignoring ordered property. Could not convert property {} of type {} to type \" + \"{} for path {}\", pname, org.apache.jackrabbit.oak.api.Type.fromTag(property.getType().tag(), false), org.apache.jackrabbit.oak.api.Type.fromTag(tag, false), getPath(), e);\n}",
            "src_parent": "try {\n    if (tag == Type.LONG.tag()) {\n        f = new org.apache.lucene.document.NumericDocValuesField(name, property.getValue(Type.LONG, i));\n    } else if (tag == Type.DATE.tag()) {\n        java.lang.String date = property.getValue(Type.DATE, i);\n        f = new org.apache.lucene.document.NumericDocValuesField(name, org.apache.jackrabbit.oak.plugins.index.lucene.FieldFactory.dateToLong(date));\n    } else if (tag == Type.DOUBLE.tag()) {\n        f = new org.apache.lucene.document.DoubleDocValuesField(name, property.getValue(Type.DOUBLE, i));\n    } else if (tag == Type.BOOLEAN.tag()) {\n        f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.BOOLEAN, i).toString()));\n    } else if (tag == Type.STRING.tag()) {\n        f = new org.apache.lucene.document.SortedDocValuesField(name, new org.apache.lucene.util.BytesRef(property.getValue(Type.STRING, i)));\n    }\n    if (f != null) {\n        fields.add(f);\n        fieldAdded = true;\n    }\n} catch (java.lang.Exception e) {\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditor.log.warn(\"Ignoring ordered property. Could not convert property {} of type {} to type \" + \"{} for path {}\", pname, org.apache.jackrabbit.oak.api.Type.fromTag(property.getType().tag(), false), org.apache.jackrabbit.oak.api.Type.fromTag(tag, false), getPath(), e);\n}",
            "src_parent_type": "Try",
            "src_type": "Catch"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "property",
            "dst_parent": "property.getType()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "property",
            "src_parent": "property.count()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        }
      ],
      "file_name": "LuceneIndexEditor"
    }
  ],
  "id": "jackrabbit-oak_147515ae"
}