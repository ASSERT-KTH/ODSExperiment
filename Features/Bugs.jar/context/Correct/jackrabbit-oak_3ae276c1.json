{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "definition.getBoolean(org.apache.jackrabbit.oak.plugins.index.IndexConstants.REINDEX_PROPERTY_NAME)",
            "src_parent": "if (definition.getBoolean(org.apache.jackrabbit.oak.plugins.index.IndexConstants.REINDEX_PROPERTY_NAME)) {\n    if (definition.getBoolean(org.apache.jackrabbit.oak.plugins.index.IndexConstants.REINDEX_ASYNC_PROPERTY_NAME) && (definition.getString(org.apache.jackrabbit.oak.plugins.index.IndexConstants.ASYNC_PROPERTY_NAME) == null)) {\n        definition.setProperty(org.apache.jackrabbit.oak.plugins.index.IndexConstants.ASYNC_PROPERTY_NAME, org.apache.jackrabbit.oak.plugins.index.IndexConstants.ASYNC_REINDEX_VALUE);\n    } else {\n        definition.setProperty(org.apache.jackrabbit.oak.plugins.index.IndexConstants.REINDEX_PROPERTY_NAME, false);\n        for (java.lang.String rm : definition.getChildNodeNames()) {\n            definition.getChildNode(rm).remove();\n        }\n        reindex.put(concat(getPath(), org.apache.jackrabbit.oak.plugins.index.IndexConstants.INDEX_DEFINITIONS_NAME, name), wrap(editor));\n    }\n} else {\n    editors.add(wrap(editor));\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private boolean shouldReindex(org.apache.jackrabbit.oak.spi.state.NodeBuilder definition, org.apache.jackrabbit.oak.spi.state.NodeState before, java.lang.String name) {\n    org.apache.jackrabbit.oak.api.PropertyState ps = definition.getProperty(org.apache.jackrabbit.oak.plugins.index.IndexConstants.REINDEX_PROPERTY_NAME);\n    if ((ps != null) && ps.getValue(org.apache.jackrabbit.oak.plugins.index.BOOLEAN)) {\n        return true;\n    }\n    return !before.getChildNode(org.apache.jackrabbit.oak.plugins.index.IndexConstants.INDEX_DEFINITIONS_NAME).hasChildNode(name);\n}",
            "src_parent": "public class IndexUpdate implements org.apache.jackrabbit.oak.spi.commit.Editor {\n    private final org.apache.jackrabbit.oak.plugins.index.IndexEditorProvider provider;\n\n    private final java.lang.String async;\n\n    private final org.apache.jackrabbit.oak.spi.state.NodeState root;\n\n    private final org.apache.jackrabbit.oak.spi.state.NodeBuilder builder;\n\n    private final org.apache.jackrabbit.oak.plugins.index.IndexUpdate parent;\n\n    private final java.lang.String name;\n\n    private java.lang.String path;\n\n    private final java.util.List<org.apache.jackrabbit.oak.spi.commit.Editor> editors = com.google.common.collect.Lists.newArrayList();\n\n    private final java.util.Map<java.lang.String, org.apache.jackrabbit.oak.spi.commit.Editor> reindex = new java.util.HashMap<java.lang.String, org.apache.jackrabbit.oak.spi.commit.Editor>();\n\n    private final org.apache.jackrabbit.oak.plugins.index.IndexUpdateCallback updateCallback;\n\n    public IndexUpdate(org.apache.jackrabbit.oak.plugins.index.IndexEditorProvider provider, java.lang.String async, org.apache.jackrabbit.oak.spi.state.NodeState root, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder, org.apache.jackrabbit.oak.plugins.index.IndexUpdateCallback updateCallback) {\n        this.parent = null;\n        this.name = null;\n        this.path = \"/\";\n        this.provider = com.google.common.base.Preconditions.checkNotNull(provider);\n        this.async = async;\n        this.root = com.google.common.base.Preconditions.checkNotNull(root);\n        this.builder = com.google.common.base.Preconditions.checkNotNull(builder);\n        this.updateCallback = com.google.common.base.Preconditions.checkNotNull(updateCallback);\n    }\n\n    private IndexUpdate(org.apache.jackrabbit.oak.plugins.index.IndexUpdate parent, java.lang.String name) {\n        this.parent = com.google.common.base.Preconditions.checkNotNull(parent);\n        this.name = name;\n        this.provider = parent.provider;\n        this.async = parent.async;\n        this.root = parent.root;\n        this.builder = parent.builder.child(com.google.common.base.Preconditions.checkNotNull(name));\n        this.updateCallback = parent.updateCallback;\n    }\n\n    @java.lang.Override\n    public void enter(org.apache.jackrabbit.oak.spi.state.NodeState before, org.apache.jackrabbit.oak.spi.state.NodeState after) throws org.apache.jackrabbit.oak.api.CommitFailedException {\n        collectIndexEditors(builder.getChildNode(org.apache.jackrabbit.oak.plugins.index.IndexConstants.INDEX_DEFINITIONS_NAME), before);\n        org.apache.jackrabbit.oak.api.CommitFailedException exception = org.apache.jackrabbit.oak.spi.commit.EditorDiff.process(org.apache.jackrabbit.oak.spi.commit.CompositeEditor.compose(reindex.values()), org.apache.jackrabbit.oak.plugins.index.MISSING_NODE, after);\n        if (exception != null) {\n            throw exception;\n        }\n        for (org.apache.jackrabbit.oak.spi.commit.Editor editor : editors) {\n            editor.enter(before, after);\n        }\n    }\n\n    private boolean shouldReindex(org.apache.jackrabbit.oak.spi.state.NodeBuilder definition, org.apache.jackrabbit.oak.spi.state.NodeState before, java.lang.String name) {\n        org.apache.jackrabbit.oak.api.PropertyState ps = definition.getProperty(org.apache.jackrabbit.oak.plugins.index.IndexConstants.REINDEX_PROPERTY_NAME);\n        if ((ps != null) && ps.getValue(org.apache.jackrabbit.oak.plugins.index.BOOLEAN)) {\n            return true;\n        }\n        return !before.getChildNode(org.apache.jackrabbit.oak.plugins.index.IndexConstants.INDEX_DEFINITIONS_NAME).hasChildNode(name);\n    }\n\n    private void collectIndexEditors(org.apache.jackrabbit.oak.spi.state.NodeBuilder definitions, org.apache.jackrabbit.oak.spi.state.NodeState before) throws org.apache.jackrabbit.oak.api.CommitFailedException {\n        for (java.lang.String name : definitions.getChildNodeNames()) {\n            org.apache.jackrabbit.oak.spi.state.NodeBuilder definition = definitions.getChildNode(name);\n            if (com.google.common.base.Objects.equal(async, definition.getString(org.apache.jackrabbit.oak.plugins.index.IndexConstants.ASYNC_PROPERTY_NAME))) {\n                java.lang.String type = definition.getString(org.apache.jackrabbit.oak.plugins.index.IndexConstants.TYPE_PROPERTY_NAME);\n                boolean shouldReindex = shouldReindex(definition, before, name);\n                org.apache.jackrabbit.oak.spi.commit.Editor editor = provider.getIndexEditor(type, definition, root, updateCallback);\n                if (editor == null) {\n                    definition.setProperty(org.apache.jackrabbit.oak.plugins.index.IndexConstants.REINDEX_PROPERTY_NAME, true);\n                } else if (shouldReindex) {\n                    if (definition.getBoolean(org.apache.jackrabbit.oak.plugins.index.IndexConstants.REINDEX_ASYNC_PROPERTY_NAME) && (definition.getString(org.apache.jackrabbit.oak.plugins.index.IndexConstants.ASYNC_PROPERTY_NAME) == null)) {\n                        definition.setProperty(org.apache.jackrabbit.oak.plugins.index.IndexConstants.ASYNC_PROPERTY_NAME, org.apache.jackrabbit.oak.plugins.index.IndexConstants.ASYNC_REINDEX_VALUE);\n                    } else {\n                        definition.setProperty(org.apache.jackrabbit.oak.plugins.index.IndexConstants.REINDEX_PROPERTY_NAME, false);\n                        for (java.lang.String rm : definition.getChildNodeNames()) {\n                            definition.getChildNode(rm).remove();\n                        }\n                        reindex.put(concat(getPath(), org.apache.jackrabbit.oak.plugins.index.IndexConstants.INDEX_DEFINITIONS_NAME, name), wrap(editor));\n                    }\n                } else {\n                    editors.add(wrap(editor));\n                }\n            }\n        }\n    }\n\n    private java.lang.String getPath() {\n        if (path == null) {\n            path = concat(parent.getPath(), name);\n        }\n        return path;\n    }\n\n    @java.lang.Override\n    public void leave(org.apache.jackrabbit.oak.spi.state.NodeState before, org.apache.jackrabbit.oak.spi.state.NodeState after) throws org.apache.jackrabbit.oak.api.CommitFailedException {\n        for (org.apache.jackrabbit.oak.spi.commit.Editor editor : editors) {\n            editor.leave(before, after);\n        }\n    }\n\n    @java.lang.Override\n    public void propertyAdded(org.apache.jackrabbit.oak.api.PropertyState after) throws org.apache.jackrabbit.oak.api.CommitFailedException {\n        for (org.apache.jackrabbit.oak.spi.commit.Editor editor : editors) {\n            editor.propertyAdded(after);\n        }\n    }\n\n    @java.lang.Override\n    public void propertyChanged(org.apache.jackrabbit.oak.api.PropertyState before, org.apache.jackrabbit.oak.api.PropertyState after) throws org.apache.jackrabbit.oak.api.CommitFailedException {\n        for (org.apache.jackrabbit.oak.spi.commit.Editor editor : editors) {\n            editor.propertyChanged(before, after);\n        }\n    }\n\n    @java.lang.Override\n    public void propertyDeleted(org.apache.jackrabbit.oak.api.PropertyState before) throws org.apache.jackrabbit.oak.api.CommitFailedException {\n        for (org.apache.jackrabbit.oak.spi.commit.Editor editor : editors) {\n            editor.propertyDeleted(before);\n        }\n    }\n\n    @java.lang.Override\n    @javax.annotation.Nonnull\n    public org.apache.jackrabbit.oak.spi.commit.Editor childNodeAdded(java.lang.String name, org.apache.jackrabbit.oak.spi.state.NodeState after) throws org.apache.jackrabbit.oak.api.CommitFailedException {\n        java.util.List<org.apache.jackrabbit.oak.spi.commit.Editor> children = com.google.common.collect.Lists.newArrayListWithCapacity(1 + editors.size());\n        children.add(new org.apache.jackrabbit.oak.plugins.index.IndexUpdate(this, name));\n        for (org.apache.jackrabbit.oak.spi.commit.Editor editor : editors) {\n            org.apache.jackrabbit.oak.spi.commit.Editor child = editor.childNodeAdded(name, after);\n            if (child != null) {\n                children.add(child);\n            }\n        }\n        return org.apache.jackrabbit.oak.spi.commit.CompositeEditor.compose(children);\n    }\n\n    @java.lang.Override\n    @javax.annotation.Nonnull\n    public org.apache.jackrabbit.oak.spi.commit.Editor childNodeChanged(java.lang.String name, org.apache.jackrabbit.oak.spi.state.NodeState before, org.apache.jackrabbit.oak.spi.state.NodeState after) throws org.apache.jackrabbit.oak.api.CommitFailedException {\n        java.util.List<org.apache.jackrabbit.oak.spi.commit.Editor> children = com.google.common.collect.Lists.newArrayListWithCapacity(1 + editors.size());\n        children.add(new org.apache.jackrabbit.oak.plugins.index.IndexUpdate(this, name));\n        for (org.apache.jackrabbit.oak.spi.commit.Editor editor : editors) {\n            org.apache.jackrabbit.oak.spi.commit.Editor child = editor.childNodeChanged(name, before, after);\n            if (child != null) {\n                children.add(child);\n            }\n        }\n        return org.apache.jackrabbit.oak.spi.commit.CompositeEditor.compose(children);\n    }\n\n    @java.lang.Override\n    @javax.annotation.CheckForNull\n    public org.apache.jackrabbit.oak.spi.commit.Editor childNodeDeleted(java.lang.String name, org.apache.jackrabbit.oak.spi.state.NodeState before) throws org.apache.jackrabbit.oak.api.CommitFailedException {\n        java.util.List<org.apache.jackrabbit.oak.spi.commit.Editor> children = com.google.common.collect.Lists.newArrayListWithCapacity(editors.size());\n        for (org.apache.jackrabbit.oak.spi.commit.Editor editor : editors) {\n            org.apache.jackrabbit.oak.spi.commit.Editor child = editor.childNodeDeleted(name, before);\n            if (child != null) {\n                children.add(child);\n            }\n        }\n        return org.apache.jackrabbit.oak.spi.commit.CompositeEditor.compose(children);\n    }\n\n    protected java.util.Set<java.lang.String> getReindexedDefinitions() {\n        return reindex.keySet();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.spi.state.NodeState before",
            "src_parent": "private void collectIndexEditors(org.apache.jackrabbit.oak.spi.state.NodeBuilder definitions, org.apache.jackrabbit.oak.spi.state.NodeState before) throws org.apache.jackrabbit.oak.api.CommitFailedException {\n    for (java.lang.String name : definitions.getChildNodeNames()) {\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder definition = definitions.getChildNode(name);\n        if (com.google.common.base.Objects.equal(async, definition.getString(org.apache.jackrabbit.oak.plugins.index.IndexConstants.ASYNC_PROPERTY_NAME))) {\n            java.lang.String type = definition.getString(org.apache.jackrabbit.oak.plugins.index.IndexConstants.TYPE_PROPERTY_NAME);\n            boolean shouldReindex = shouldReindex(definition, before, name);\n            org.apache.jackrabbit.oak.spi.commit.Editor editor = provider.getIndexEditor(type, definition, root, updateCallback);\n            if (editor == null) {\n                definition.setProperty(org.apache.jackrabbit.oak.plugins.index.IndexConstants.REINDEX_PROPERTY_NAME, true);\n            } else if (shouldReindex) {\n                if (definition.getBoolean(org.apache.jackrabbit.oak.plugins.index.IndexConstants.REINDEX_ASYNC_PROPERTY_NAME) && (definition.getString(org.apache.jackrabbit.oak.plugins.index.IndexConstants.ASYNC_PROPERTY_NAME) == null)) {\n                    definition.setProperty(org.apache.jackrabbit.oak.plugins.index.IndexConstants.ASYNC_PROPERTY_NAME, org.apache.jackrabbit.oak.plugins.index.IndexConstants.ASYNC_REINDEX_VALUE);\n                } else {\n                    definition.setProperty(org.apache.jackrabbit.oak.plugins.index.IndexConstants.REINDEX_PROPERTY_NAME, false);\n                    for (java.lang.String rm : definition.getChildNodeNames()) {\n                        definition.getChildNode(rm).remove();\n                    }\n                    reindex.put(concat(getPath(), org.apache.jackrabbit.oak.plugins.index.IndexConstants.INDEX_DEFINITIONS_NAME, name), wrap(editor));\n                }\n            } else {\n                editors.add(wrap(editor));\n            }\n        }\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "before",
            "src_parent": "collectIndexEditors(builder.getChildNode(org.apache.jackrabbit.oak.plugins.index.IndexConstants.INDEX_DEFINITIONS_NAME), before)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "boolean shouldReindex = shouldReindex(definition, before, name)",
            "src_parent": "{\n    java.lang.String type = definition.getString(org.apache.jackrabbit.oak.plugins.index.IndexConstants.TYPE_PROPERTY_NAME);\n    boolean shouldReindex = shouldReindex(definition, before, name);\n    org.apache.jackrabbit.oak.spi.commit.Editor editor = provider.getIndexEditor(type, definition, root, updateCallback);\n    if (editor == null) {\n        definition.setProperty(org.apache.jackrabbit.oak.plugins.index.IndexConstants.REINDEX_PROPERTY_NAME, true);\n    } else if (shouldReindex) {\n        if (definition.getBoolean(org.apache.jackrabbit.oak.plugins.index.IndexConstants.REINDEX_ASYNC_PROPERTY_NAME) && (definition.getString(org.apache.jackrabbit.oak.plugins.index.IndexConstants.ASYNC_PROPERTY_NAME) == null)) {\n            definition.setProperty(org.apache.jackrabbit.oak.plugins.index.IndexConstants.ASYNC_PROPERTY_NAME, org.apache.jackrabbit.oak.plugins.index.IndexConstants.ASYNC_REINDEX_VALUE);\n        } else {\n            definition.setProperty(org.apache.jackrabbit.oak.plugins.index.IndexConstants.REINDEX_PROPERTY_NAME, false);\n            for (java.lang.String rm : definition.getChildNodeNames()) {\n                definition.getChildNode(rm).remove();\n            }\n            reindex.put(concat(getPath(), org.apache.jackrabbit.oak.plugins.index.IndexConstants.INDEX_DEFINITIONS_NAME, name), wrap(editor));\n        }\n    } else {\n        editors.add(wrap(editor));\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "shouldReindex",
            "src_parent": "if (shouldReindex) {\n    if (definition.getBoolean(org.apache.jackrabbit.oak.plugins.index.IndexConstants.REINDEX_ASYNC_PROPERTY_NAME) && (definition.getString(org.apache.jackrabbit.oak.plugins.index.IndexConstants.ASYNC_PROPERTY_NAME) == null)) {\n        definition.setProperty(org.apache.jackrabbit.oak.plugins.index.IndexConstants.ASYNC_PROPERTY_NAME, org.apache.jackrabbit.oak.plugins.index.IndexConstants.ASYNC_REINDEX_VALUE);\n    } else {\n        definition.setProperty(org.apache.jackrabbit.oak.plugins.index.IndexConstants.REINDEX_PROPERTY_NAME, false);\n        for (java.lang.String rm : definition.getChildNodeNames()) {\n            definition.getChildNode(rm).remove();\n        }\n        reindex.put(concat(getPath(), org.apache.jackrabbit.oak.plugins.index.IndexConstants.INDEX_DEFINITIONS_NAME, name), wrap(editor));\n    }\n} else {\n    editors.add(wrap(editor));\n}",
            "src_parent_type": "If",
            "src_type": "VariableRead"
          }
        }
      ],
      "file_name": "IndexUpdate"
    }
  ],
  "id": "jackrabbit-oak_3ae276c1"
}