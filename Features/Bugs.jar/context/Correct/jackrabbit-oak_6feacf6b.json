{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "private boolean exists() {\n    return (isRoot() || (parent.writeState == null)) || parent.writeState.hasChildNode(name);\n}",
            "dst_parent": "public class MemoryNodeBuilder implements org.apache.jackrabbit.oak.spi.state.NodeBuilder {\n    private final org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder parent;\n\n    private final java.lang.String name;\n\n    private final org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder root;\n\n    private long revision;\n\n    private org.apache.jackrabbit.oak.spi.state.NodeState baseState;\n\n    private org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState writeState;\n\n    protected MemoryNodeBuilder(org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder parent, java.lang.String name) {\n        this.parent = com.google.common.base.Preconditions.checkNotNull(parent);\n        this.name = com.google.common.base.Preconditions.checkNotNull(name);\n        this.root = parent.root;\n        this.revision = -1;\n        this.baseState = null;\n        this.writeState = null;\n    }\n\n    public MemoryNodeBuilder(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.spi.state.NodeState base) {\n        this.parent = null;\n        this.name = null;\n        this.root = this;\n        this.revision = 0;\n        this.baseState = com.google.common.base.Preconditions.checkNotNull(base);\n        this.writeState = new org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState(baseState);\n    }\n\n    private boolean classInvariants() {\n        boolean rootHasNoParent = isRoot() == (parent == null);\n        boolean rootHasWriteState = root.writeState != null;\n        boolean baseStateOrWriteStateNotNull = (baseState != null) || (writeState != null);\n        return (rootHasNoParent && rootHasWriteState) && baseStateOrWriteStateNotNull;\n    }\n\n    private boolean isRoot() {\n        return this == root;\n    }\n\n    private org.apache.jackrabbit.oak.spi.state.NodeState getBaseState(java.lang.String name) {\n        if (baseState != null) {\n            return baseState.getChildNode(name);\n        } else {\n            return null;\n        }\n    }\n\n    private boolean hasBaseState(java.lang.String name) {\n        return (baseState != null) && baseState.hasChildNode(name);\n    }\n\n    private org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState getWriteState(java.lang.String name) {\n        if (writeState != null) {\n            return writeState.nodes.get(name);\n        } else {\n            return null;\n        }\n    }\n\n    private boolean exists() {\n        return (isRoot() || (parent.writeState == null)) || parent.writeState.hasChildNode(name);\n    }\n\n    @javax.annotation.Nonnull\n    private org.apache.jackrabbit.oak.spi.state.NodeState read() {\n        if (revision != root.revision) {\n            assert !isRoot();\n            com.google.common.base.Preconditions.checkState(exists(), \"This node has already been removed\");\n            parent.read();\n            baseState = parent.getBaseState(name);\n            writeState = parent.getWriteState(name);\n            revision = root.revision;\n        }\n        assert classInvariants();\n        if (writeState != null) {\n            return writeState;\n        } else {\n            return baseState;\n        }\n    }\n\n    @javax.annotation.Nonnull\n    private org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState write() {\n        return write(root.revision + 1, false);\n    }\n\n    @javax.annotation.Nonnull\n    private org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState write(long newRevision, boolean skipRemovedCheck) {\n        if (!isRoot()) {\n            com.google.common.base.Preconditions.checkState(skipRemovedCheck || exists());\n            parent.write(newRevision, skipRemovedCheck);\n        }\n        if ((writeState == null) || (revision != root.revision)) {\n            assert !isRoot();\n            baseState = parent.getBaseState(name);\n            writeState = parent.getWriteState(name);\n            if (writeState == null) {\n                if (!exists()) {\n                    writeState = new org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState(null);\n                } else {\n                    writeState = new org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState(baseState);\n                }\n                assert parent.writeState != null;\n                parent.writeState.nodes.put(name, writeState);\n            }\n        }\n        revision = newRevision;\n        assert classInvariants();\n        assert writeState != null;\n        return writeState;\n    }\n\n    protected org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder createChildBuilder(java.lang.String name) {\n        return new org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder(this, name);\n    }\n\n    protected void updated() {\n    }\n\n    protected void compareAgainstBaseState(org.apache.jackrabbit.oak.spi.state.NodeStateDiff diff) {\n        org.apache.jackrabbit.oak.spi.state.NodeState state = read();\n        if (writeState != null) {\n            writeState.compareAgainstBaseState(state, diff);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isNew() {\n        return (!isRoot()) && parent.isNew(name);\n    }\n\n    private boolean isNew(java.lang.String name) {\n        read();\n        return (!hasBaseState(name)) && hasChildNode(name);\n    }\n\n    @java.lang.Override\n    public boolean isRemoved() {\n        return (!isRoot()) && (parent.isRemoved() || parent.isRemoved(name));\n    }\n\n    private boolean isRemoved(java.lang.String name) {\n        read();\n        return hasBaseState(name) && (!hasChildNode(name));\n    }\n\n    @java.lang.Override\n    public boolean isModified() {\n        read();\n        if (writeState == null) {\n            return false;\n        } else {\n            for (java.util.Map.Entry<java.lang.String, org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState> n : writeState.nodes.entrySet()) {\n                if (n.getValue() == null) {\n                    return true;\n                }\n                if (!hasBaseState(n.getKey())) {\n                    return true;\n                }\n            }\n            for (java.util.Map.Entry<java.lang.String, org.apache.jackrabbit.oak.api.PropertyState> p : writeState.properties.entrySet()) {\n                org.apache.jackrabbit.oak.api.PropertyState pState = p.getValue();\n                if (pState == null) {\n                    return true;\n                }\n                if ((baseState == null) || (!pState.equals(baseState.getProperty(p.getKey())))) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.state.NodeState getNodeState() {\n        read();\n        if (writeState != null) {\n            return writeState.snapshot();\n        } else {\n            assert baseState != null;\n            return baseState;\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.state.NodeState getBaseState() {\n        read();\n        return baseState;\n    }\n\n    @java.lang.Override\n    public void reset(org.apache.jackrabbit.oak.spi.state.NodeState newBase) {\n        com.google.common.base.Preconditions.checkState(isRoot(), \"Cannot reset a non-root builder\");\n        baseState = com.google.common.base.Preconditions.checkNotNull(newBase);\n        writeState = new org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState(baseState);\n        revision++;\n    }\n\n    @java.lang.Override\n    public long getChildNodeCount() {\n        return read().getChildNodeCount();\n    }\n\n    @java.lang.Override\n    public boolean hasChildNode(java.lang.String name) {\n        return read().hasChildNode(name);\n    }\n\n    @java.lang.Override\n    public java.lang.Iterable<java.lang.String> getChildNodeNames() {\n        return read().getChildNodeNames();\n    }\n\n    @java.lang.Override\n    @javax.annotation.Nonnull\n    public org.apache.jackrabbit.oak.spi.state.NodeBuilder setNode(java.lang.String name, org.apache.jackrabbit.oak.spi.state.NodeState state) {\n        write();\n        org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState childState = getWriteState(name);\n        if (childState == null) {\n            writeState.nodes.remove(name);\n            childState = createChildBuilder(name).write(root.revision + 1, true);\n        }\n        childState.reset(state);\n        updated();\n        return this;\n    }\n\n    @java.lang.Override\n    @javax.annotation.Nonnull\n    public org.apache.jackrabbit.oak.spi.state.NodeBuilder removeNode(java.lang.String name) {\n        write();\n        if (writeState.base.getChildNode(name) != null) {\n            writeState.nodes.put(name, null);\n        } else {\n            writeState.nodes.remove(name);\n        }\n        updated();\n        return this;\n    }\n\n    @java.lang.Override\n    public long getPropertyCount() {\n        return read().getPropertyCount();\n    }\n\n    @java.lang.Override\n    public java.lang.Iterable<? extends org.apache.jackrabbit.oak.api.PropertyState> getProperties() {\n        return read().getProperties();\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.api.PropertyState getProperty(java.lang.String name) {\n        return read().getProperty(name);\n    }\n\n    @java.lang.Override\n    @javax.annotation.Nonnull\n    public org.apache.jackrabbit.oak.spi.state.NodeBuilder removeProperty(java.lang.String name) {\n        write();\n        if (writeState.base.getProperty(name) != null) {\n            writeState.properties.put(name, null);\n        } else {\n            writeState.properties.remove(name);\n        }\n        updated();\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(org.apache.jackrabbit.oak.api.PropertyState property) {\n        write();\n        writeState.properties.put(property.getName(), property);\n        updated();\n        return this;\n    }\n\n    @java.lang.Override\n    public <T> org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(java.lang.String name, T value) {\n        setProperty(org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, value));\n        return this;\n    }\n\n    @java.lang.Override\n    public <T> org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(java.lang.String name, T value, org.apache.jackrabbit.oak.api.Type<T> type) {\n        setProperty(org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, value, type));\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.state.NodeBuilder child(java.lang.String name) {\n        read();\n        org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder builder = createChildBuilder(name);\n        boolean modified = (writeState != null) && ((writeState.base != baseState) || writeState.nodes.containsKey(name));\n        if ((!hasBaseState(name)) || modified) {\n            builder.write(root.revision + 1, true);\n        }\n        return builder;\n    }\n\n    private class MutableNodeState extends org.apache.jackrabbit.oak.spi.state.AbstractNodeState {\n        private org.apache.jackrabbit.oak.spi.state.NodeState base;\n\n        private final java.util.Map<java.lang.String, org.apache.jackrabbit.oak.api.PropertyState> properties = com.google.common.collect.Maps.newHashMap();\n\n        private final java.util.Map<java.lang.String, org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState> nodes = com.google.common.collect.Maps.newHashMap();\n\n        private boolean isRemoved(java.lang.String name) {\n            return nodes.containsKey(name) && (nodes.get(name) == null);\n        }\n\n        public MutableNodeState(org.apache.jackrabbit.oak.spi.state.NodeState base) {\n            if (base != null) {\n                this.base = base;\n            } else {\n                this.base = MemoryNodeState.EMPTY_NODE;\n            }\n        }\n\n        public org.apache.jackrabbit.oak.spi.state.NodeState snapshot() {\n            java.util.Map<java.lang.String, org.apache.jackrabbit.oak.spi.state.NodeState> nodes = com.google.common.collect.Maps.newHashMap();\n            for (java.util.Map.Entry<java.lang.String, org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState> entry : this.nodes.entrySet()) {\n                java.lang.String name = entry.getKey();\n                org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState node = entry.getValue();\n                org.apache.jackrabbit.oak.spi.state.NodeState before = base.getChildNode(name);\n                if (node == null) {\n                    if (before != null) {\n                        nodes.put(name, null);\n                    }\n                } else {\n                    org.apache.jackrabbit.oak.spi.state.NodeState after = node.snapshot();\n                    if (after != before) {\n                        nodes.put(name, after);\n                    }\n                }\n            }\n            return org.apache.jackrabbit.oak.plugins.memory.ModifiedNodeState.with(base, com.google.common.collect.Maps.newHashMap(this.properties), nodes);\n        }\n\n        void reset(org.apache.jackrabbit.oak.spi.state.NodeState newBase) {\n            base = newBase;\n            properties.clear();\n            java.util.Iterator<java.util.Map.Entry<java.lang.String, org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState>> iterator = nodes.entrySet().iterator();\n            while (iterator.hasNext()) {\n                java.util.Map.Entry<java.lang.String, org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState> entry = iterator.next();\n                org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState cstate = entry.getValue();\n                org.apache.jackrabbit.oak.spi.state.NodeState cbase = newBase.getChildNode(entry.getKey());\n                if ((cbase == null) || (cstate == null)) {\n                    iterator.remove();\n                } else {\n                    cstate.reset(cbase);\n                }\n            } \n        }\n\n        @java.lang.Override\n        public long getPropertyCount() {\n            return org.apache.jackrabbit.oak.plugins.memory.ModifiedNodeState.withProperties(base, properties).getPropertyCount();\n        }\n\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.api.PropertyState getProperty(java.lang.String name) {\n            return org.apache.jackrabbit.oak.plugins.memory.ModifiedNodeState.withProperties(base, properties).getProperty(name);\n        }\n\n        @java.lang.Override\n        @javax.annotation.Nonnull\n        public java.lang.Iterable<? extends org.apache.jackrabbit.oak.api.PropertyState> getProperties() {\n            java.util.Map<java.lang.String, org.apache.jackrabbit.oak.api.PropertyState> copy = com.google.common.collect.Maps.newHashMap(properties);\n            return org.apache.jackrabbit.oak.plugins.memory.ModifiedNodeState.withProperties(base, copy).getProperties();\n        }\n\n        @java.lang.Override\n        public long getChildNodeCount() {\n            return org.apache.jackrabbit.oak.plugins.memory.ModifiedNodeState.withNodes(base, nodes).getChildNodeCount();\n        }\n\n        @java.lang.Override\n        public boolean hasChildNode(java.lang.String name) {\n            return org.apache.jackrabbit.oak.plugins.memory.ModifiedNodeState.withNodes(base, nodes).hasChildNode(name);\n        }\n\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String name) {\n            return org.apache.jackrabbit.oak.plugins.memory.ModifiedNodeState.withNodes(base, nodes).getChildNode(name);\n        }\n\n        @java.lang.Override\n        @javax.annotation.Nonnull\n        public java.lang.Iterable<java.lang.String> getChildNodeNames() {\n            java.util.Map<java.lang.String, org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState> copy = com.google.common.collect.Maps.newHashMap(nodes);\n            return org.apache.jackrabbit.oak.plugins.memory.ModifiedNodeState.withNodes(base, copy).getChildNodeNames();\n        }\n\n        @java.lang.Override\n        public void compareAgainstBaseState(org.apache.jackrabbit.oak.spi.state.NodeState base, org.apache.jackrabbit.oak.spi.state.NodeStateDiff diff) {\n            org.apache.jackrabbit.oak.plugins.memory.ModifiedNodeState.with(this.base, properties, nodes).compareAgainstBaseState(base, diff);\n        }\n\n        @java.lang.Override\n        @javax.annotation.Nonnull\n        public org.apache.jackrabbit.oak.spi.state.NodeBuilder builder() {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "private boolean removed() {\n    return (((!isRoot()) && (parent.writeState != null)) && parent.hasBaseState(name)) && (!parent.writeState.hasChildNode(name));\n}",
            "src_parent": "public class MemoryNodeBuilder implements org.apache.jackrabbit.oak.spi.state.NodeBuilder {\n    private final org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder parent;\n\n    private final java.lang.String name;\n\n    private final org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder root;\n\n    private long revision;\n\n    private org.apache.jackrabbit.oak.spi.state.NodeState baseState;\n\n    private org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState writeState;\n\n    protected MemoryNodeBuilder(org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder parent, java.lang.String name) {\n        this.parent = com.google.common.base.Preconditions.checkNotNull(parent);\n        this.name = com.google.common.base.Preconditions.checkNotNull(name);\n        this.root = parent.root;\n        this.revision = -1;\n        this.baseState = null;\n        this.writeState = null;\n    }\n\n    public MemoryNodeBuilder(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.spi.state.NodeState base) {\n        this.parent = null;\n        this.name = null;\n        this.root = this;\n        this.revision = 0;\n        this.baseState = com.google.common.base.Preconditions.checkNotNull(base);\n        this.writeState = new org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState(baseState);\n    }\n\n    private boolean classInvariants() {\n        boolean rootHasNoParent = isRoot() == (parent == null);\n        boolean rootHasWriteState = root.writeState != null;\n        boolean baseStateOrWriteStateNotNull = (baseState != null) || (writeState != null);\n        return (rootHasNoParent && rootHasWriteState) && baseStateOrWriteStateNotNull;\n    }\n\n    private boolean isRoot() {\n        return this == root;\n    }\n\n    private org.apache.jackrabbit.oak.spi.state.NodeState getBaseState(java.lang.String name) {\n        if (baseState != null) {\n            return baseState.getChildNode(name);\n        } else {\n            return null;\n        }\n    }\n\n    private boolean hasBaseState(java.lang.String name) {\n        return (baseState != null) && baseState.hasChildNode(name);\n    }\n\n    private org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState getWriteState(java.lang.String name) {\n        if (writeState != null) {\n            return writeState.nodes.get(name);\n        } else {\n            return null;\n        }\n    }\n\n    private boolean removed() {\n        return (((!isRoot()) && (parent.writeState != null)) && parent.hasBaseState(name)) && (!parent.writeState.hasChildNode(name));\n    }\n\n    @javax.annotation.Nonnull\n    private org.apache.jackrabbit.oak.spi.state.NodeState read() {\n        if (revision != root.revision) {\n            assert !isRoot();\n            com.google.common.base.Preconditions.checkState(!removed(), \"This node has already been removed\");\n            parent.read();\n            baseState = parent.getBaseState(name);\n            writeState = parent.getWriteState(name);\n            revision = root.revision;\n        }\n        assert classInvariants();\n        if (writeState != null) {\n            return writeState;\n        } else {\n            return baseState;\n        }\n    }\n\n    @javax.annotation.Nonnull\n    private org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState write() {\n        return write(root.revision + 1, false);\n    }\n\n    @javax.annotation.Nonnull\n    private org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState write(long newRevision, boolean skipRemovedCheck) {\n        if (!isRoot()) {\n            com.google.common.base.Preconditions.checkState(skipRemovedCheck || (!removed()));\n            parent.write(newRevision, skipRemovedCheck);\n        }\n        if ((writeState == null) || (revision != root.revision)) {\n            assert !isRoot();\n            baseState = parent.getBaseState(name);\n            writeState = parent.getWriteState(name);\n            if (writeState == null) {\n                if (removed()) {\n                    writeState = new org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState(null);\n                } else {\n                    writeState = new org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState(baseState);\n                }\n                assert parent.writeState != null;\n                parent.writeState.nodes.put(name, writeState);\n            }\n        }\n        revision = newRevision;\n        assert classInvariants();\n        assert writeState != null;\n        return writeState;\n    }\n\n    protected org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder createChildBuilder(java.lang.String name) {\n        return new org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder(this, name);\n    }\n\n    protected void updated() {\n    }\n\n    protected void compareAgainstBaseState(org.apache.jackrabbit.oak.spi.state.NodeStateDiff diff) {\n        org.apache.jackrabbit.oak.spi.state.NodeState state = read();\n        if (writeState != null) {\n            writeState.compareAgainstBaseState(state, diff);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isNew() {\n        return (!isRoot()) && parent.isNew(name);\n    }\n\n    private boolean isNew(java.lang.String name) {\n        read();\n        return (!hasBaseState(name)) && hasChildNode(name);\n    }\n\n    @java.lang.Override\n    public boolean isRemoved() {\n        return (!isRoot()) && (parent.isRemoved() || parent.isRemoved(name));\n    }\n\n    private boolean isRemoved(java.lang.String name) {\n        read();\n        return hasBaseState(name) && (!hasChildNode(name));\n    }\n\n    @java.lang.Override\n    public boolean isModified() {\n        read();\n        if (writeState == null) {\n            return false;\n        } else {\n            for (java.util.Map.Entry<java.lang.String, org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState> n : writeState.nodes.entrySet()) {\n                if (n.getValue() == null) {\n                    return true;\n                }\n                if (!hasBaseState(n.getKey())) {\n                    return true;\n                }\n            }\n            for (java.util.Map.Entry<java.lang.String, org.apache.jackrabbit.oak.api.PropertyState> p : writeState.properties.entrySet()) {\n                org.apache.jackrabbit.oak.api.PropertyState pState = p.getValue();\n                if (pState == null) {\n                    return true;\n                }\n                if ((baseState == null) || (!pState.equals(baseState.getProperty(p.getKey())))) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.state.NodeState getNodeState() {\n        read();\n        if (writeState != null) {\n            return writeState.snapshot();\n        } else {\n            assert baseState != null;\n            return baseState;\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.state.NodeState getBaseState() {\n        read();\n        return baseState;\n    }\n\n    @java.lang.Override\n    public void reset(org.apache.jackrabbit.oak.spi.state.NodeState newBase) {\n        com.google.common.base.Preconditions.checkState(isRoot(), \"Cannot reset a non-root builder\");\n        baseState = com.google.common.base.Preconditions.checkNotNull(newBase);\n        writeState = new org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState(baseState);\n        revision++;\n    }\n\n    @java.lang.Override\n    public long getChildNodeCount() {\n        return read().getChildNodeCount();\n    }\n\n    @java.lang.Override\n    public boolean hasChildNode(java.lang.String name) {\n        return read().hasChildNode(name);\n    }\n\n    @java.lang.Override\n    public java.lang.Iterable<java.lang.String> getChildNodeNames() {\n        return read().getChildNodeNames();\n    }\n\n    @java.lang.Override\n    @javax.annotation.Nonnull\n    public org.apache.jackrabbit.oak.spi.state.NodeBuilder setNode(java.lang.String name, org.apache.jackrabbit.oak.spi.state.NodeState state) {\n        write();\n        org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState childState = getWriteState(name);\n        if (childState == null) {\n            writeState.nodes.remove(name);\n            childState = createChildBuilder(name).write();\n        }\n        childState.reset(state);\n        updated();\n        return this;\n    }\n\n    @java.lang.Override\n    @javax.annotation.Nonnull\n    public org.apache.jackrabbit.oak.spi.state.NodeBuilder removeNode(java.lang.String name) {\n        write();\n        if (writeState.base.getChildNode(name) != null) {\n            writeState.nodes.put(name, null);\n        } else {\n            writeState.nodes.remove(name);\n        }\n        updated();\n        return this;\n    }\n\n    @java.lang.Override\n    public long getPropertyCount() {\n        return read().getPropertyCount();\n    }\n\n    @java.lang.Override\n    public java.lang.Iterable<? extends org.apache.jackrabbit.oak.api.PropertyState> getProperties() {\n        return read().getProperties();\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.api.PropertyState getProperty(java.lang.String name) {\n        return read().getProperty(name);\n    }\n\n    @java.lang.Override\n    @javax.annotation.Nonnull\n    public org.apache.jackrabbit.oak.spi.state.NodeBuilder removeProperty(java.lang.String name) {\n        write();\n        if (writeState.base.getProperty(name) != null) {\n            writeState.properties.put(name, null);\n        } else {\n            writeState.properties.remove(name);\n        }\n        updated();\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(org.apache.jackrabbit.oak.api.PropertyState property) {\n        write();\n        writeState.properties.put(property.getName(), property);\n        updated();\n        return this;\n    }\n\n    @java.lang.Override\n    public <T> org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(java.lang.String name, T value) {\n        setProperty(org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, value));\n        return this;\n    }\n\n    @java.lang.Override\n    public <T> org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(java.lang.String name, T value, org.apache.jackrabbit.oak.api.Type<T> type) {\n        setProperty(org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, value, type));\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.state.NodeBuilder child(java.lang.String name) {\n        read();\n        org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder builder = createChildBuilder(name);\n        boolean modified = (writeState != null) && ((writeState.base != baseState) || writeState.nodes.containsKey(name));\n        if ((!hasBaseState(name)) || modified) {\n            builder.write(root.revision + 1, true);\n        }\n        return builder;\n    }\n\n    private class MutableNodeState extends org.apache.jackrabbit.oak.spi.state.AbstractNodeState {\n        private org.apache.jackrabbit.oak.spi.state.NodeState base;\n\n        private final java.util.Map<java.lang.String, org.apache.jackrabbit.oak.api.PropertyState> properties = com.google.common.collect.Maps.newHashMap();\n\n        private final java.util.Map<java.lang.String, org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState> nodes = com.google.common.collect.Maps.newHashMap();\n\n        private boolean isRemoved(java.lang.String name) {\n            return nodes.containsKey(name) && (nodes.get(name) == null);\n        }\n\n        public MutableNodeState(org.apache.jackrabbit.oak.spi.state.NodeState base) {\n            if (base != null) {\n                this.base = base;\n            } else {\n                this.base = MemoryNodeState.EMPTY_NODE;\n            }\n        }\n\n        public org.apache.jackrabbit.oak.spi.state.NodeState snapshot() {\n            java.util.Map<java.lang.String, org.apache.jackrabbit.oak.spi.state.NodeState> nodes = com.google.common.collect.Maps.newHashMap();\n            for (java.util.Map.Entry<java.lang.String, org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState> entry : this.nodes.entrySet()) {\n                java.lang.String name = entry.getKey();\n                org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState node = entry.getValue();\n                org.apache.jackrabbit.oak.spi.state.NodeState before = base.getChildNode(name);\n                if (node == null) {\n                    if (before != null) {\n                        nodes.put(name, null);\n                    }\n                } else {\n                    org.apache.jackrabbit.oak.spi.state.NodeState after = node.snapshot();\n                    if (after != before) {\n                        nodes.put(name, after);\n                    }\n                }\n            }\n            return org.apache.jackrabbit.oak.plugins.memory.ModifiedNodeState.with(base, com.google.common.collect.Maps.newHashMap(this.properties), nodes);\n        }\n\n        void reset(org.apache.jackrabbit.oak.spi.state.NodeState newBase) {\n            base = newBase;\n            properties.clear();\n            java.util.Iterator<java.util.Map.Entry<java.lang.String, org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState>> iterator = nodes.entrySet().iterator();\n            while (iterator.hasNext()) {\n                java.util.Map.Entry<java.lang.String, org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState> entry = iterator.next();\n                org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState cstate = entry.getValue();\n                org.apache.jackrabbit.oak.spi.state.NodeState cbase = newBase.getChildNode(entry.getKey());\n                if ((cbase == null) || (cstate == null)) {\n                    iterator.remove();\n                } else {\n                    cstate.reset(cbase);\n                }\n            } \n        }\n\n        @java.lang.Override\n        public long getPropertyCount() {\n            return org.apache.jackrabbit.oak.plugins.memory.ModifiedNodeState.withProperties(base, properties).getPropertyCount();\n        }\n\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.api.PropertyState getProperty(java.lang.String name) {\n            return org.apache.jackrabbit.oak.plugins.memory.ModifiedNodeState.withProperties(base, properties).getProperty(name);\n        }\n\n        @java.lang.Override\n        @javax.annotation.Nonnull\n        public java.lang.Iterable<? extends org.apache.jackrabbit.oak.api.PropertyState> getProperties() {\n            java.util.Map<java.lang.String, org.apache.jackrabbit.oak.api.PropertyState> copy = com.google.common.collect.Maps.newHashMap(properties);\n            return org.apache.jackrabbit.oak.plugins.memory.ModifiedNodeState.withProperties(base, copy).getProperties();\n        }\n\n        @java.lang.Override\n        public long getChildNodeCount() {\n            return org.apache.jackrabbit.oak.plugins.memory.ModifiedNodeState.withNodes(base, nodes).getChildNodeCount();\n        }\n\n        @java.lang.Override\n        public boolean hasChildNode(java.lang.String name) {\n            return org.apache.jackrabbit.oak.plugins.memory.ModifiedNodeState.withNodes(base, nodes).hasChildNode(name);\n        }\n\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String name) {\n            return org.apache.jackrabbit.oak.plugins.memory.ModifiedNodeState.withNodes(base, nodes).getChildNode(name);\n        }\n\n        @java.lang.Override\n        @javax.annotation.Nonnull\n        public java.lang.Iterable<java.lang.String> getChildNodeNames() {\n            java.util.Map<java.lang.String, org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState> copy = com.google.common.collect.Maps.newHashMap(nodes);\n            return org.apache.jackrabbit.oak.plugins.memory.ModifiedNodeState.withNodes(base, copy).getChildNodeNames();\n        }\n\n        @java.lang.Override\n        public void compareAgainstBaseState(org.apache.jackrabbit.oak.spi.state.NodeState base, org.apache.jackrabbit.oak.spi.state.NodeStateDiff diff) {\n            org.apache.jackrabbit.oak.plugins.memory.ModifiedNodeState.with(this.base, properties, nodes).compareAgainstBaseState(base, diff);\n        }\n\n        @java.lang.Override\n        @javax.annotation.Nonnull\n        public org.apache.jackrabbit.oak.spi.state.NodeBuilder builder() {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(isRoot() || (parent.writeState == null)) || parent.writeState.hasChildNode(name)",
            "dst_parent": "return (isRoot() || (parent.writeState == null)) || parent.writeState.hasChildNode(name)",
            "dst_parent_type": "Return",
            "dst_type": "BinaryOperator",
            "operator": "UPD",
            "src": "(((!isRoot()) && (parent.writeState != null)) && parent.hasBaseState(name)) && (!parent.writeState.hasChildNode(name))",
            "src_parent": "return (((!isRoot()) && (parent.writeState != null)) && parent.hasBaseState(name)) && (!parent.writeState.hasChildNode(name))",
            "src_parent_type": "Return",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(isRoot() || (parent.writeState == null))",
            "dst_parent": "(isRoot() || (parent.writeState == null)) || parent.writeState.hasChildNode(name)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "BinaryOperator",
            "operator": "UPD",
            "src": "((!isRoot()) && (parent.writeState != null))",
            "src_parent": "(((!isRoot()) && (parent.writeState != null)) && parent.hasBaseState(name))",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(parent.writeState == null)",
            "dst_parent": "(isRoot() || (parent.writeState == null))",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "BinaryOperator",
            "operator": "UPD",
            "src": "(parent.writeState != null)",
            "src_parent": "((!isRoot()) && (parent.writeState != null))",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assert",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "!removed()",
            "src_parent": "com.google.common.base.Preconditions.checkState(!removed(), \"This node has already been removed\")",
            "src_parent_type": "Invocation",
            "src_type": "UnaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(!removed())",
            "src_parent": "skipRemovedCheck || (!removed())",
            "src_parent_type": "BinaryOperator",
            "src_type": "UnaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assert",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "removed()",
            "src_parent": "if (removed()) {\n    writeState = new org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState(null);\n} else {\n    writeState = new org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState(baseState);\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assert",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "exists()",
            "src_parent": "com.google.common.base.Preconditions.checkState(exists(), \"This node has already been removed\")",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "exists()",
            "src_parent": "skipRemovedCheck || exists()",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "root.revision + 1",
            "src_parent": "createChildBuilder(name).write(root.revision + 1, true)",
            "src_parent_type": "Invocation",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "true",
            "src_parent": "createChildBuilder(name).write(root.revision + 1, true)",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assert",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "!exists()",
            "src_parent": "if (!exists()) {\n    writeState = new org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState(null);\n} else {\n    writeState = new org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder.MutableNodeState(baseState);\n}",
            "src_parent_type": "If",
            "src_type": "UnaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(isRoot() || (parent.writeState == null))",
            "dst_parent": "(isRoot() || (parent.writeState == null)) || parent.writeState.hasChildNode(name)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "((!isRoot()) && (parent.writeState != null))",
            "src_parent": "(((!isRoot()) && (parent.writeState != null)) && parent.hasBaseState(name))",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "parent.writeState.hasChildNode(name)",
            "dst_parent": "(isRoot() || (parent.writeState == null)) || parent.writeState.hasChildNode(name)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "parent.writeState.hasChildNode(name)",
            "src_parent": "(!parent.writeState.hasChildNode(name))",
            "src_parent_type": "UnaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder",
            "dst_parent": "",
            "dst_parent_type": "ThisAccess",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assert",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder",
            "dst_parent": "",
            "dst_parent_type": "ThisAccess",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder",
            "dst_parent": "",
            "dst_parent_type": "ThisAccess",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assert",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder",
            "dst_parent": "",
            "dst_parent_type": "ThisAccess",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        }
      ],
      "file_name": "MemoryNodeBuilder"
    }
  ],
  "id": "jackrabbit-oak_6feacf6b"
}