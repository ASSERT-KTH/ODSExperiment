{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private java.lang.String enclosureMarkupAsString;",
            "src_parent": "public class InlineEnclosure extends org.apache.wicket.markup.html.internal.Enclosure {\n    private static final long serialVersionUID = 1L;\n\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.markup.html.internal.InlineEnclosure.class);\n\n    private java.lang.String enclosureMarkupAsString;\n\n    public InlineEnclosure(final java.lang.String id, final java.lang.String childId) {\n        super(id, childId);\n        enclosureMarkupAsString = null;\n        setOutputMarkupPlaceholderTag(true);\n        setMarkupId(getId());\n    }\n\n    @java.lang.Override\n    protected void onComponentTag(final org.apache.wicket.markup.ComponentTag tag) {\n        tag.remove(InlineEnclosureHandler.INLINE_ENCLOSURE_ATTRIBUTE_NAME);\n        super.onComponentTag(tag);\n    }\n\n    public boolean updateVisibility() {\n        boolean visible = getChild().determineVisibility();\n        setVisible(visible);\n        return visible;\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.markup.IMarkupFragment getMarkup() {\n        org.apache.wicket.markup.IMarkupFragment enclosureMarkup = null;\n        if (enclosureMarkupAsString == null) {\n            org.apache.wicket.markup.IMarkupFragment markup = super.getMarkup();\n            if ((markup != null) && (markup != org.apache.wicket.markup.Markup.NO_MARKUP)) {\n                enclosureMarkup = markup;\n                enclosureMarkupAsString = markup.toString(true);\n            }\n        } else {\n            enclosureMarkup = org.apache.wicket.markup.Markup.of(enclosureMarkupAsString, getWicketNamespace());\n        }\n        return enclosureMarkup;\n    }\n\n    private java.lang.String getWicketNamespace() {\n        java.lang.String markupNamespace = org.apache.wicket.markup.MarkupParser.WICKET;\n        org.apache.wicket.Page page = findPage();\n        if (page != null) {\n            org.apache.wicket.markup.IMarkupFragment markup = page.getMarkup();\n            org.apache.wicket.markup.MarkupResourceStream markupResourceStream = markup.getMarkupResourceStream();\n            java.lang.String namespace = markupResourceStream.getWicketNamespace();\n            if (org.apache.wicket.util.string.Strings.isEmpty(namespace) == false) {\n                markupNamespace = namespace;\n            }\n        }\n        return markupNamespace;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "enclosureMarkupAsString = null",
            "src_parent": "{\n    super(id, childId);\n    enclosureMarkupAsString = null;\n    setOutputMarkupPlaceholderTag(true);\n    setMarkupId(getId());\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "@java.lang.Override\npublic org.apache.wicket.markup.IMarkupFragment getMarkup() {\n    org.apache.wicket.markup.IMarkupFragment enclosureMarkup = null;\n    if (enclosureMarkupAsString == null) {\n        org.apache.wicket.markup.IMarkupFragment markup = super.getMarkup();\n        if ((markup != null) && (markup != org.apache.wicket.markup.Markup.NO_MARKUP)) {\n            enclosureMarkup = markup;\n            enclosureMarkupAsString = markup.toString(true);\n        }\n    } else {\n        enclosureMarkup = org.apache.wicket.markup.Markup.of(enclosureMarkupAsString, getWicketNamespace());\n    }\n    return enclosureMarkup;\n}",
            "src_parent": "public class InlineEnclosure extends org.apache.wicket.markup.html.internal.Enclosure {\n    private static final long serialVersionUID = 1L;\n\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.markup.html.internal.InlineEnclosure.class);\n\n    private java.lang.String enclosureMarkupAsString;\n\n    public InlineEnclosure(final java.lang.String id, final java.lang.String childId) {\n        super(id, childId);\n        enclosureMarkupAsString = null;\n        setOutputMarkupPlaceholderTag(true);\n        setMarkupId(getId());\n    }\n\n    @java.lang.Override\n    protected void onComponentTag(final org.apache.wicket.markup.ComponentTag tag) {\n        tag.remove(InlineEnclosureHandler.INLINE_ENCLOSURE_ATTRIBUTE_NAME);\n        super.onComponentTag(tag);\n    }\n\n    public boolean updateVisibility() {\n        boolean visible = getChild().determineVisibility();\n        setVisible(visible);\n        return visible;\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.markup.IMarkupFragment getMarkup() {\n        org.apache.wicket.markup.IMarkupFragment enclosureMarkup = null;\n        if (enclosureMarkupAsString == null) {\n            org.apache.wicket.markup.IMarkupFragment markup = super.getMarkup();\n            if ((markup != null) && (markup != org.apache.wicket.markup.Markup.NO_MARKUP)) {\n                enclosureMarkup = markup;\n                enclosureMarkupAsString = markup.toString(true);\n            }\n        } else {\n            enclosureMarkup = org.apache.wicket.markup.Markup.of(enclosureMarkupAsString, getWicketNamespace());\n        }\n        return enclosureMarkup;\n    }\n\n    private java.lang.String getWicketNamespace() {\n        java.lang.String markupNamespace = org.apache.wicket.markup.MarkupParser.WICKET;\n        org.apache.wicket.Page page = findPage();\n        if (page != null) {\n            org.apache.wicket.markup.IMarkupFragment markup = page.getMarkup();\n            org.apache.wicket.markup.MarkupResourceStream markupResourceStream = markup.getMarkupResourceStream();\n            java.lang.String namespace = markupResourceStream.getWicketNamespace();\n            if (org.apache.wicket.util.string.Strings.isEmpty(namespace) == false) {\n                markupNamespace = namespace;\n            }\n        }\n        return markupNamespace;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "InlineEnclosure"
    }
  ],
  "id": "wicket_581c7306"
}