{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "configLocation.toString()",
            "dst_parent": "configLocation.toString().endsWith(type)",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "configLocation.getPath()",
            "src_parent": "configLocation.getPath().endsWith(type)",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "scheme.equals(\"classloader\")",
            "src_parent": "(scheme == null) || scheme.equals(\"classloader\")",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static final java.lang.String CLASS_LOADER_SCHEME = \"classloader\";",
            "src_parent": "public abstract class ConfigurationFactory {\n    public static final java.lang.String CONFIGURATION_FACTORY_PROPERTY = \"log4j.configurationFactory\";\n\n    public static final java.lang.String CONFIGURATION_FILE_PROPERTY = \"log4j.configurationFile\";\n\n    protected static final org.apache.logging.log4j.Logger LOGGER = org.apache.logging.log4j.status.StatusLogger.getLogger();\n\n    protected static final java.lang.String TEST_PREFIX = \"log4j2-test\";\n\n    protected static final java.lang.String DEFAULT_PREFIX = \"log4j2\";\n\n    private static final java.lang.String CLASS_LOADER_SCHEME = \"classloader\";\n\n    private static final int CLASS_LOADER_SCHEME_LENGTH = org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME.length() + 1;\n\n    private static final java.lang.String CLASS_PATH_SCHEME = \"classpath\";\n\n    private static final int CLASS_PATH_SCHEME_LENGTH = org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME.length() + 1;\n\n    private static volatile java.util.List<org.apache.logging.log4j.core.config.ConfigurationFactory> factories = null;\n\n    private static org.apache.logging.log4j.core.config.ConfigurationFactory configFactory = new org.apache.logging.log4j.core.config.ConfigurationFactory.Factory();\n\n    public static org.apache.logging.log4j.core.config.ConfigurationFactory getInstance() {\n        if (org.apache.logging.log4j.core.config.ConfigurationFactory.factories == null) {\n            synchronized(org.apache.logging.log4j.core.config.ConfigurationFactory.TEST_PREFIX) {\n                if (org.apache.logging.log4j.core.config.ConfigurationFactory.factories == null) {\n                    final java.util.List<org.apache.logging.log4j.core.config.ConfigurationFactory> list = new java.util.ArrayList<org.apache.logging.log4j.core.config.ConfigurationFactory>();\n                    final java.lang.String factoryClass = org.apache.logging.log4j.util.PropertiesUtil.getProperties().getStringProperty(org.apache.logging.log4j.core.config.ConfigurationFactory.CONFIGURATION_FACTORY_PROPERTY);\n                    if (factoryClass != null) {\n                        org.apache.logging.log4j.core.config.ConfigurationFactory.addFactory(list, factoryClass);\n                    }\n                    final org.apache.logging.log4j.core.config.plugins.PluginManager manager = new org.apache.logging.log4j.core.config.plugins.PluginManager(\"ConfigurationFactory\");\n                    manager.collectPlugins();\n                    final java.util.Map<java.lang.String, org.apache.logging.log4j.core.config.plugins.PluginType<?>> plugins = manager.getPlugins();\n                    final java.util.Set<org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory> ordered = new java.util.TreeSet<org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory>();\n                    for (final org.apache.logging.log4j.core.config.plugins.PluginType<?> type : plugins.values()) {\n                        try {\n                            @java.lang.SuppressWarnings(\"unchecked\")\n                            final java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory> clazz = ((java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory>) (type.getPluginClass()));\n                            final org.apache.logging.log4j.core.config.Order order = clazz.getAnnotation(org.apache.logging.log4j.core.config.Order.class);\n                            if (order != null) {\n                                final int weight = order.value();\n                                ordered.add(new org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory(weight, clazz));\n                            }\n                        } catch (final java.lang.Exception ex) {\n                            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.warn(\"Unable to add class \" + type.getPluginClass());\n                        }\n                    }\n                    for (final org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory wf : ordered) {\n                        org.apache.logging.log4j.core.config.ConfigurationFactory.addFactory(list, wf.factoryClass);\n                    }\n                    org.apache.logging.log4j.core.config.ConfigurationFactory.factories = java.util.Collections.unmodifiableList(list);\n                }\n            }\n        }\n        return org.apache.logging.log4j.core.config.ConfigurationFactory.configFactory;\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    private static void addFactory(final java.util.List<org.apache.logging.log4j.core.config.ConfigurationFactory> list, final java.lang.String factoryClass) {\n        try {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.addFactory(list, ((java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory>) (java.lang.Class.forName(factoryClass))));\n        } catch (final java.lang.ClassNotFoundException ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to load class \" + factoryClass, ex);\n        } catch (final java.lang.Exception ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to load class \" + factoryClass, ex);\n        }\n    }\n\n    private static void addFactory(final java.util.List<org.apache.logging.log4j.core.config.ConfigurationFactory> list, final java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory> factoryClass) {\n        try {\n            list.add(factoryClass.newInstance());\n        } catch (final java.lang.Exception ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to create instance of \" + factoryClass.getName(), ex);\n        }\n    }\n\n    public static void setConfigurationFactory(final org.apache.logging.log4j.core.config.ConfigurationFactory factory) {\n        org.apache.logging.log4j.core.config.ConfigurationFactory.configFactory = factory;\n    }\n\n    public static void resetConfigurationFactory() {\n        org.apache.logging.log4j.core.config.ConfigurationFactory.configFactory = new org.apache.logging.log4j.core.config.ConfigurationFactory.Factory();\n    }\n\n    public static void removeConfigurationFactory(final org.apache.logging.log4j.core.config.ConfigurationFactory factory) {\n        if (org.apache.logging.log4j.core.config.ConfigurationFactory.configFactory == factory) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.configFactory = new org.apache.logging.log4j.core.config.ConfigurationFactory.Factory();\n        }\n    }\n\n    protected abstract java.lang.String[] getSupportedTypes();\n\n    protected boolean isActive() {\n        return true;\n    }\n\n    public abstract org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source);\n\n    public org.apache.logging.log4j.core.config.Configuration getConfiguration(final java.lang.String name, final java.net.URI configLocation) {\n        if (!isActive()) {\n            return null;\n        }\n        if (configLocation != null) {\n            final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromURI(configLocation);\n            if (source != null) {\n                return getConfiguration(source);\n            }\n        }\n        return null;\n    }\n\n    protected org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource getInputFromURI(final java.net.URI configLocation) {\n        final java.io.File configFile = org.apache.logging.log4j.core.helpers.FileUtils.fileFromURI(configLocation);\n        if (((configFile != null) && configFile.exists()) && configFile.canRead()) {\n            try {\n                return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(new java.io.FileInputStream(configFile), configFile);\n            } catch (final java.io.FileNotFoundException ex) {\n                org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Cannot locate file \" + configLocation.getPath(), ex);\n            }\n        }\n        final java.lang.String scheme = configLocation.getScheme();\n        final boolean isClassLoaderScheme = (scheme != null) && scheme.equals(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME);\n        final boolean isClassPathScheme = ((scheme != null) && (!isClassLoaderScheme)) && scheme.equals(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME);\n        if (((scheme == null) || isClassLoaderScheme) || isClassPathScheme) {\n            final java.lang.ClassLoader loader = this.getClass().getClassLoader();\n            java.lang.String path;\n            if (isClassLoaderScheme) {\n                path = configLocation.toString().substring(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME_LENGTH);\n            } else if (isClassPathScheme) {\n                path = configLocation.toString().substring(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME_LENGTH);\n            } else {\n                path = configLocation.getPath();\n            }\n            final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromResource(path, loader);\n            if (source != null) {\n                return source;\n            }\n        }\n        try {\n            return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(configLocation.toURL().openStream(), configLocation.getPath());\n        } catch (final java.net.MalformedURLException ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Invalid URL \" + configLocation.toString(), ex);\n        } catch (final java.io.IOException ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to access \" + configLocation.toString(), ex);\n        } catch (final java.lang.Exception ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to access \" + configLocation.toString(), ex);\n        }\n        return null;\n    }\n\n    protected org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource getInputFromString(final java.lang.String config, final java.lang.ClassLoader loader) {\n        try {\n            final java.net.URL url = new java.net.URL(config);\n            return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(url.openStream(), org.apache.logging.log4j.core.helpers.FileUtils.fileFromURI(url.toURI()));\n        } catch (final java.lang.Exception ex) {\n            final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromResource(config, loader);\n            if (source == null) {\n                try {\n                    final java.io.File file = new java.io.File(config);\n                    return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(new java.io.FileInputStream(file), file);\n                } catch (final java.io.FileNotFoundException fnfe) {\n                }\n            }\n            return source;\n        }\n    }\n\n    protected org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource getInputFromResource(final java.lang.String resource, final java.lang.ClassLoader loader) {\n        final java.net.URL url = org.apache.logging.log4j.core.helpers.Loader.getResource(resource, loader);\n        if (url == null) {\n            return null;\n        }\n        java.io.InputStream is = null;\n        try {\n            is = url.openStream();\n        } catch (final java.io.IOException ioe) {\n            return null;\n        }\n        if (is == null) {\n            return null;\n        }\n        if (org.apache.logging.log4j.core.helpers.FileUtils.isFile(url)) {\n            try {\n                return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(is, org.apache.logging.log4j.core.helpers.FileUtils.fileFromURI(url.toURI()));\n            } catch (final java.net.URISyntaxException ex) {\n            }\n        }\n        return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(is, resource);\n    }\n\n    private static class WeightedFactory implements java.lang.Comparable<org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory> {\n        private final int weight;\n\n        private final java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory> factoryClass;\n\n        public WeightedFactory(final int weight, final java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory> clazz) {\n            this.weight = weight;\n            this.factoryClass = clazz;\n        }\n\n        @java.lang.Override\n        public int compareTo(final org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory wf) {\n            final int w = wf.weight;\n            if (weight == w) {\n                return 0;\n            } else if (weight > w) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n    }\n\n    private static class Factory extends org.apache.logging.log4j.core.config.ConfigurationFactory {\n        @java.lang.Override\n        public org.apache.logging.log4j.core.config.Configuration getConfiguration(final java.lang.String name, final java.net.URI configLocation) {\n            if (configLocation == null) {\n                final java.lang.String config = org.apache.logging.log4j.util.PropertiesUtil.getProperties().getStringProperty(org.apache.logging.log4j.core.config.ConfigurationFactory.CONFIGURATION_FILE_PROPERTY);\n                if (config != null) {\n                    final java.lang.ClassLoader loader = this.getClass().getClassLoader();\n                    final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromString(config, loader);\n                    if (source != null) {\n                        for (final org.apache.logging.log4j.core.config.ConfigurationFactory factory : org.apache.logging.log4j.core.config.ConfigurationFactory.factories) {\n                            final java.lang.String[] types = factory.getSupportedTypes();\n                            if (types != null) {\n                                for (final java.lang.String type : types) {\n                                    if (type.equals(\"*\") || config.endsWith(type)) {\n                                        final org.apache.logging.log4j.core.config.Configuration c = factory.getConfiguration(source);\n                                        if (c != null) {\n                                            return c;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                for (final org.apache.logging.log4j.core.config.ConfigurationFactory factory : org.apache.logging.log4j.core.config.ConfigurationFactory.factories) {\n                    final java.lang.String[] types = factory.getSupportedTypes();\n                    if (types != null) {\n                        for (final java.lang.String type : types) {\n                            if (type.equals(\"*\") || configLocation.toString().endsWith(type)) {\n                                final org.apache.logging.log4j.core.config.Configuration config = factory.getConfiguration(name, configLocation);\n                                if (config != null) {\n                                    return config;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            org.apache.logging.log4j.core.config.Configuration config = getConfiguration(true, name);\n            if (config == null) {\n                config = getConfiguration(true, null);\n                if (config == null) {\n                    config = getConfiguration(false, name);\n                    if (config == null) {\n                        config = getConfiguration(false, null);\n                    }\n                }\n            }\n            return config != null ? config : new org.apache.logging.log4j.core.config.DefaultConfiguration();\n        }\n\n        private org.apache.logging.log4j.core.config.Configuration getConfiguration(final boolean isTest, final java.lang.String name) {\n            final boolean named = (name != null) && (name.length() > 0);\n            final java.lang.ClassLoader loader = this.getClass().getClassLoader();\n            for (final org.apache.logging.log4j.core.config.ConfigurationFactory factory : org.apache.logging.log4j.core.config.ConfigurationFactory.factories) {\n                java.lang.String configName;\n                final java.lang.String prefix = (isTest) ? org.apache.logging.log4j.core.config.ConfigurationFactory.TEST_PREFIX : org.apache.logging.log4j.core.config.ConfigurationFactory.DEFAULT_PREFIX;\n                final java.lang.String[] types = factory.getSupportedTypes();\n                if (types == null) {\n                    continue;\n                }\n                for (final java.lang.String suffix : types) {\n                    if (suffix.equals(\"*\")) {\n                        continue;\n                    }\n                    configName = (named) ? (prefix + name) + suffix : prefix + suffix;\n                    final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromResource(configName, loader);\n                    if (source != null) {\n                        return factory.getConfiguration(source);\n                    }\n                }\n            }\n            return null;\n        }\n\n        @java.lang.Override\n        public java.lang.String[] getSupportedTypes() {\n            return null;\n        }\n\n        @java.lang.Override\n        public org.apache.logging.log4j.core.config.Configuration getConfiguration(final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source) {\n            if (source != null) {\n                final java.lang.String config = source.getLocation();\n                for (final org.apache.logging.log4j.core.config.ConfigurationFactory factory : org.apache.logging.log4j.core.config.ConfigurationFactory.factories) {\n                    final java.lang.String[] types = factory.getSupportedTypes();\n                    if (types != null) {\n                        for (final java.lang.String type : types) {\n                            if (type.equals(\"*\") || ((config != null) && config.endsWith(type))) {\n                                final org.apache.logging.log4j.core.config.Configuration c = factory.getConfiguration(source);\n                                if (c != null) {\n                                    return c;\n                                }\n                                org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Cannot determine the ConfigurationFactory to use for {}\", config);\n                                return null;\n                            }\n                        }\n                    }\n                }\n            }\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Cannot process configuration, input source is null\");\n            return null;\n        }\n    }\n\n    public static class ConfigurationSource {\n        private java.io.File file;\n\n        private java.lang.String location;\n\n        private java.io.InputStream stream;\n\n        public ConfigurationSource() {\n        }\n\n        public ConfigurationSource(final java.io.InputStream stream) {\n            this.stream = stream;\n            this.file = null;\n            this.location = null;\n        }\n\n        public ConfigurationSource(final java.io.InputStream stream, final java.io.File file) {\n            this.stream = stream;\n            this.file = file;\n            this.location = file.getAbsolutePath();\n        }\n\n        public ConfigurationSource(final java.io.InputStream stream, final java.lang.String location) {\n            this.stream = stream;\n            this.location = location;\n            this.file = null;\n        }\n\n        public java.io.File getFile() {\n            return file;\n        }\n\n        public void setFile(final java.io.File file) {\n            this.file = file;\n        }\n\n        public java.lang.String getLocation() {\n            return location;\n        }\n\n        public void setLocation(final java.lang.String location) {\n            this.location = location;\n        }\n\n        public java.io.InputStream getInputStream() {\n            return stream;\n        }\n\n        public void setInputStream(final java.io.InputStream stream) {\n            this.stream = stream;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static final int CLASS_LOADER_SCHEME_LENGTH = org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME.length() + 1;",
            "src_parent": "public abstract class ConfigurationFactory {\n    public static final java.lang.String CONFIGURATION_FACTORY_PROPERTY = \"log4j.configurationFactory\";\n\n    public static final java.lang.String CONFIGURATION_FILE_PROPERTY = \"log4j.configurationFile\";\n\n    protected static final org.apache.logging.log4j.Logger LOGGER = org.apache.logging.log4j.status.StatusLogger.getLogger();\n\n    protected static final java.lang.String TEST_PREFIX = \"log4j2-test\";\n\n    protected static final java.lang.String DEFAULT_PREFIX = \"log4j2\";\n\n    private static final java.lang.String CLASS_LOADER_SCHEME = \"classloader\";\n\n    private static final int CLASS_LOADER_SCHEME_LENGTH = org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME.length() + 1;\n\n    private static final java.lang.String CLASS_PATH_SCHEME = \"classpath\";\n\n    private static final int CLASS_PATH_SCHEME_LENGTH = org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME.length() + 1;\n\n    private static volatile java.util.List<org.apache.logging.log4j.core.config.ConfigurationFactory> factories = null;\n\n    private static org.apache.logging.log4j.core.config.ConfigurationFactory configFactory = new org.apache.logging.log4j.core.config.ConfigurationFactory.Factory();\n\n    public static org.apache.logging.log4j.core.config.ConfigurationFactory getInstance() {\n        if (org.apache.logging.log4j.core.config.ConfigurationFactory.factories == null) {\n            synchronized(org.apache.logging.log4j.core.config.ConfigurationFactory.TEST_PREFIX) {\n                if (org.apache.logging.log4j.core.config.ConfigurationFactory.factories == null) {\n                    final java.util.List<org.apache.logging.log4j.core.config.ConfigurationFactory> list = new java.util.ArrayList<org.apache.logging.log4j.core.config.ConfigurationFactory>();\n                    final java.lang.String factoryClass = org.apache.logging.log4j.util.PropertiesUtil.getProperties().getStringProperty(org.apache.logging.log4j.core.config.ConfigurationFactory.CONFIGURATION_FACTORY_PROPERTY);\n                    if (factoryClass != null) {\n                        org.apache.logging.log4j.core.config.ConfigurationFactory.addFactory(list, factoryClass);\n                    }\n                    final org.apache.logging.log4j.core.config.plugins.PluginManager manager = new org.apache.logging.log4j.core.config.plugins.PluginManager(\"ConfigurationFactory\");\n                    manager.collectPlugins();\n                    final java.util.Map<java.lang.String, org.apache.logging.log4j.core.config.plugins.PluginType<?>> plugins = manager.getPlugins();\n                    final java.util.Set<org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory> ordered = new java.util.TreeSet<org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory>();\n                    for (final org.apache.logging.log4j.core.config.plugins.PluginType<?> type : plugins.values()) {\n                        try {\n                            @java.lang.SuppressWarnings(\"unchecked\")\n                            final java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory> clazz = ((java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory>) (type.getPluginClass()));\n                            final org.apache.logging.log4j.core.config.Order order = clazz.getAnnotation(org.apache.logging.log4j.core.config.Order.class);\n                            if (order != null) {\n                                final int weight = order.value();\n                                ordered.add(new org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory(weight, clazz));\n                            }\n                        } catch (final java.lang.Exception ex) {\n                            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.warn(\"Unable to add class \" + type.getPluginClass());\n                        }\n                    }\n                    for (final org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory wf : ordered) {\n                        org.apache.logging.log4j.core.config.ConfigurationFactory.addFactory(list, wf.factoryClass);\n                    }\n                    org.apache.logging.log4j.core.config.ConfigurationFactory.factories = java.util.Collections.unmodifiableList(list);\n                }\n            }\n        }\n        return org.apache.logging.log4j.core.config.ConfigurationFactory.configFactory;\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    private static void addFactory(final java.util.List<org.apache.logging.log4j.core.config.ConfigurationFactory> list, final java.lang.String factoryClass) {\n        try {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.addFactory(list, ((java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory>) (java.lang.Class.forName(factoryClass))));\n        } catch (final java.lang.ClassNotFoundException ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to load class \" + factoryClass, ex);\n        } catch (final java.lang.Exception ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to load class \" + factoryClass, ex);\n        }\n    }\n\n    private static void addFactory(final java.util.List<org.apache.logging.log4j.core.config.ConfigurationFactory> list, final java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory> factoryClass) {\n        try {\n            list.add(factoryClass.newInstance());\n        } catch (final java.lang.Exception ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to create instance of \" + factoryClass.getName(), ex);\n        }\n    }\n\n    public static void setConfigurationFactory(final org.apache.logging.log4j.core.config.ConfigurationFactory factory) {\n        org.apache.logging.log4j.core.config.ConfigurationFactory.configFactory = factory;\n    }\n\n    public static void resetConfigurationFactory() {\n        org.apache.logging.log4j.core.config.ConfigurationFactory.configFactory = new org.apache.logging.log4j.core.config.ConfigurationFactory.Factory();\n    }\n\n    public static void removeConfigurationFactory(final org.apache.logging.log4j.core.config.ConfigurationFactory factory) {\n        if (org.apache.logging.log4j.core.config.ConfigurationFactory.configFactory == factory) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.configFactory = new org.apache.logging.log4j.core.config.ConfigurationFactory.Factory();\n        }\n    }\n\n    protected abstract java.lang.String[] getSupportedTypes();\n\n    protected boolean isActive() {\n        return true;\n    }\n\n    public abstract org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source);\n\n    public org.apache.logging.log4j.core.config.Configuration getConfiguration(final java.lang.String name, final java.net.URI configLocation) {\n        if (!isActive()) {\n            return null;\n        }\n        if (configLocation != null) {\n            final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromURI(configLocation);\n            if (source != null) {\n                return getConfiguration(source);\n            }\n        }\n        return null;\n    }\n\n    protected org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource getInputFromURI(final java.net.URI configLocation) {\n        final java.io.File configFile = org.apache.logging.log4j.core.helpers.FileUtils.fileFromURI(configLocation);\n        if (((configFile != null) && configFile.exists()) && configFile.canRead()) {\n            try {\n                return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(new java.io.FileInputStream(configFile), configFile);\n            } catch (final java.io.FileNotFoundException ex) {\n                org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Cannot locate file \" + configLocation.getPath(), ex);\n            }\n        }\n        final java.lang.String scheme = configLocation.getScheme();\n        final boolean isClassLoaderScheme = (scheme != null) && scheme.equals(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME);\n        final boolean isClassPathScheme = ((scheme != null) && (!isClassLoaderScheme)) && scheme.equals(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME);\n        if (((scheme == null) || isClassLoaderScheme) || isClassPathScheme) {\n            final java.lang.ClassLoader loader = this.getClass().getClassLoader();\n            java.lang.String path;\n            if (isClassLoaderScheme) {\n                path = configLocation.toString().substring(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME_LENGTH);\n            } else if (isClassPathScheme) {\n                path = configLocation.toString().substring(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME_LENGTH);\n            } else {\n                path = configLocation.getPath();\n            }\n            final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromResource(path, loader);\n            if (source != null) {\n                return source;\n            }\n        }\n        try {\n            return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(configLocation.toURL().openStream(), configLocation.getPath());\n        } catch (final java.net.MalformedURLException ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Invalid URL \" + configLocation.toString(), ex);\n        } catch (final java.io.IOException ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to access \" + configLocation.toString(), ex);\n        } catch (final java.lang.Exception ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to access \" + configLocation.toString(), ex);\n        }\n        return null;\n    }\n\n    protected org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource getInputFromString(final java.lang.String config, final java.lang.ClassLoader loader) {\n        try {\n            final java.net.URL url = new java.net.URL(config);\n            return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(url.openStream(), org.apache.logging.log4j.core.helpers.FileUtils.fileFromURI(url.toURI()));\n        } catch (final java.lang.Exception ex) {\n            final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromResource(config, loader);\n            if (source == null) {\n                try {\n                    final java.io.File file = new java.io.File(config);\n                    return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(new java.io.FileInputStream(file), file);\n                } catch (final java.io.FileNotFoundException fnfe) {\n                }\n            }\n            return source;\n        }\n    }\n\n    protected org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource getInputFromResource(final java.lang.String resource, final java.lang.ClassLoader loader) {\n        final java.net.URL url = org.apache.logging.log4j.core.helpers.Loader.getResource(resource, loader);\n        if (url == null) {\n            return null;\n        }\n        java.io.InputStream is = null;\n        try {\n            is = url.openStream();\n        } catch (final java.io.IOException ioe) {\n            return null;\n        }\n        if (is == null) {\n            return null;\n        }\n        if (org.apache.logging.log4j.core.helpers.FileUtils.isFile(url)) {\n            try {\n                return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(is, org.apache.logging.log4j.core.helpers.FileUtils.fileFromURI(url.toURI()));\n            } catch (final java.net.URISyntaxException ex) {\n            }\n        }\n        return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(is, resource);\n    }\n\n    private static class WeightedFactory implements java.lang.Comparable<org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory> {\n        private final int weight;\n\n        private final java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory> factoryClass;\n\n        public WeightedFactory(final int weight, final java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory> clazz) {\n            this.weight = weight;\n            this.factoryClass = clazz;\n        }\n\n        @java.lang.Override\n        public int compareTo(final org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory wf) {\n            final int w = wf.weight;\n            if (weight == w) {\n                return 0;\n            } else if (weight > w) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n    }\n\n    private static class Factory extends org.apache.logging.log4j.core.config.ConfigurationFactory {\n        @java.lang.Override\n        public org.apache.logging.log4j.core.config.Configuration getConfiguration(final java.lang.String name, final java.net.URI configLocation) {\n            if (configLocation == null) {\n                final java.lang.String config = org.apache.logging.log4j.util.PropertiesUtil.getProperties().getStringProperty(org.apache.logging.log4j.core.config.ConfigurationFactory.CONFIGURATION_FILE_PROPERTY);\n                if (config != null) {\n                    final java.lang.ClassLoader loader = this.getClass().getClassLoader();\n                    final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromString(config, loader);\n                    if (source != null) {\n                        for (final org.apache.logging.log4j.core.config.ConfigurationFactory factory : org.apache.logging.log4j.core.config.ConfigurationFactory.factories) {\n                            final java.lang.String[] types = factory.getSupportedTypes();\n                            if (types != null) {\n                                for (final java.lang.String type : types) {\n                                    if (type.equals(\"*\") || config.endsWith(type)) {\n                                        final org.apache.logging.log4j.core.config.Configuration c = factory.getConfiguration(source);\n                                        if (c != null) {\n                                            return c;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                for (final org.apache.logging.log4j.core.config.ConfigurationFactory factory : org.apache.logging.log4j.core.config.ConfigurationFactory.factories) {\n                    final java.lang.String[] types = factory.getSupportedTypes();\n                    if (types != null) {\n                        for (final java.lang.String type : types) {\n                            if (type.equals(\"*\") || configLocation.toString().endsWith(type)) {\n                                final org.apache.logging.log4j.core.config.Configuration config = factory.getConfiguration(name, configLocation);\n                                if (config != null) {\n                                    return config;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            org.apache.logging.log4j.core.config.Configuration config = getConfiguration(true, name);\n            if (config == null) {\n                config = getConfiguration(true, null);\n                if (config == null) {\n                    config = getConfiguration(false, name);\n                    if (config == null) {\n                        config = getConfiguration(false, null);\n                    }\n                }\n            }\n            return config != null ? config : new org.apache.logging.log4j.core.config.DefaultConfiguration();\n        }\n\n        private org.apache.logging.log4j.core.config.Configuration getConfiguration(final boolean isTest, final java.lang.String name) {\n            final boolean named = (name != null) && (name.length() > 0);\n            final java.lang.ClassLoader loader = this.getClass().getClassLoader();\n            for (final org.apache.logging.log4j.core.config.ConfigurationFactory factory : org.apache.logging.log4j.core.config.ConfigurationFactory.factories) {\n                java.lang.String configName;\n                final java.lang.String prefix = (isTest) ? org.apache.logging.log4j.core.config.ConfigurationFactory.TEST_PREFIX : org.apache.logging.log4j.core.config.ConfigurationFactory.DEFAULT_PREFIX;\n                final java.lang.String[] types = factory.getSupportedTypes();\n                if (types == null) {\n                    continue;\n                }\n                for (final java.lang.String suffix : types) {\n                    if (suffix.equals(\"*\")) {\n                        continue;\n                    }\n                    configName = (named) ? (prefix + name) + suffix : prefix + suffix;\n                    final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromResource(configName, loader);\n                    if (source != null) {\n                        return factory.getConfiguration(source);\n                    }\n                }\n            }\n            return null;\n        }\n\n        @java.lang.Override\n        public java.lang.String[] getSupportedTypes() {\n            return null;\n        }\n\n        @java.lang.Override\n        public org.apache.logging.log4j.core.config.Configuration getConfiguration(final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source) {\n            if (source != null) {\n                final java.lang.String config = source.getLocation();\n                for (final org.apache.logging.log4j.core.config.ConfigurationFactory factory : org.apache.logging.log4j.core.config.ConfigurationFactory.factories) {\n                    final java.lang.String[] types = factory.getSupportedTypes();\n                    if (types != null) {\n                        for (final java.lang.String type : types) {\n                            if (type.equals(\"*\") || ((config != null) && config.endsWith(type))) {\n                                final org.apache.logging.log4j.core.config.Configuration c = factory.getConfiguration(source);\n                                if (c != null) {\n                                    return c;\n                                }\n                                org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Cannot determine the ConfigurationFactory to use for {}\", config);\n                                return null;\n                            }\n                        }\n                    }\n                }\n            }\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Cannot process configuration, input source is null\");\n            return null;\n        }\n    }\n\n    public static class ConfigurationSource {\n        private java.io.File file;\n\n        private java.lang.String location;\n\n        private java.io.InputStream stream;\n\n        public ConfigurationSource() {\n        }\n\n        public ConfigurationSource(final java.io.InputStream stream) {\n            this.stream = stream;\n            this.file = null;\n            this.location = null;\n        }\n\n        public ConfigurationSource(final java.io.InputStream stream, final java.io.File file) {\n            this.stream = stream;\n            this.file = file;\n            this.location = file.getAbsolutePath();\n        }\n\n        public ConfigurationSource(final java.io.InputStream stream, final java.lang.String location) {\n            this.stream = stream;\n            this.location = location;\n            this.file = null;\n        }\n\n        public java.io.File getFile() {\n            return file;\n        }\n\n        public void setFile(final java.io.File file) {\n            this.file = file;\n        }\n\n        public java.lang.String getLocation() {\n            return location;\n        }\n\n        public void setLocation(final java.lang.String location) {\n            this.location = location;\n        }\n\n        public java.io.InputStream getInputStream() {\n            return stream;\n        }\n\n        public void setInputStream(final java.io.InputStream stream) {\n            this.stream = stream;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static final java.lang.String CLASS_PATH_SCHEME = \"classpath\";",
            "src_parent": "public abstract class ConfigurationFactory {\n    public static final java.lang.String CONFIGURATION_FACTORY_PROPERTY = \"log4j.configurationFactory\";\n\n    public static final java.lang.String CONFIGURATION_FILE_PROPERTY = \"log4j.configurationFile\";\n\n    protected static final org.apache.logging.log4j.Logger LOGGER = org.apache.logging.log4j.status.StatusLogger.getLogger();\n\n    protected static final java.lang.String TEST_PREFIX = \"log4j2-test\";\n\n    protected static final java.lang.String DEFAULT_PREFIX = \"log4j2\";\n\n    private static final java.lang.String CLASS_LOADER_SCHEME = \"classloader\";\n\n    private static final int CLASS_LOADER_SCHEME_LENGTH = org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME.length() + 1;\n\n    private static final java.lang.String CLASS_PATH_SCHEME = \"classpath\";\n\n    private static final int CLASS_PATH_SCHEME_LENGTH = org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME.length() + 1;\n\n    private static volatile java.util.List<org.apache.logging.log4j.core.config.ConfigurationFactory> factories = null;\n\n    private static org.apache.logging.log4j.core.config.ConfigurationFactory configFactory = new org.apache.logging.log4j.core.config.ConfigurationFactory.Factory();\n\n    public static org.apache.logging.log4j.core.config.ConfigurationFactory getInstance() {\n        if (org.apache.logging.log4j.core.config.ConfigurationFactory.factories == null) {\n            synchronized(org.apache.logging.log4j.core.config.ConfigurationFactory.TEST_PREFIX) {\n                if (org.apache.logging.log4j.core.config.ConfigurationFactory.factories == null) {\n                    final java.util.List<org.apache.logging.log4j.core.config.ConfigurationFactory> list = new java.util.ArrayList<org.apache.logging.log4j.core.config.ConfigurationFactory>();\n                    final java.lang.String factoryClass = org.apache.logging.log4j.util.PropertiesUtil.getProperties().getStringProperty(org.apache.logging.log4j.core.config.ConfigurationFactory.CONFIGURATION_FACTORY_PROPERTY);\n                    if (factoryClass != null) {\n                        org.apache.logging.log4j.core.config.ConfigurationFactory.addFactory(list, factoryClass);\n                    }\n                    final org.apache.logging.log4j.core.config.plugins.PluginManager manager = new org.apache.logging.log4j.core.config.plugins.PluginManager(\"ConfigurationFactory\");\n                    manager.collectPlugins();\n                    final java.util.Map<java.lang.String, org.apache.logging.log4j.core.config.plugins.PluginType<?>> plugins = manager.getPlugins();\n                    final java.util.Set<org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory> ordered = new java.util.TreeSet<org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory>();\n                    for (final org.apache.logging.log4j.core.config.plugins.PluginType<?> type : plugins.values()) {\n                        try {\n                            @java.lang.SuppressWarnings(\"unchecked\")\n                            final java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory> clazz = ((java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory>) (type.getPluginClass()));\n                            final org.apache.logging.log4j.core.config.Order order = clazz.getAnnotation(org.apache.logging.log4j.core.config.Order.class);\n                            if (order != null) {\n                                final int weight = order.value();\n                                ordered.add(new org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory(weight, clazz));\n                            }\n                        } catch (final java.lang.Exception ex) {\n                            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.warn(\"Unable to add class \" + type.getPluginClass());\n                        }\n                    }\n                    for (final org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory wf : ordered) {\n                        org.apache.logging.log4j.core.config.ConfigurationFactory.addFactory(list, wf.factoryClass);\n                    }\n                    org.apache.logging.log4j.core.config.ConfigurationFactory.factories = java.util.Collections.unmodifiableList(list);\n                }\n            }\n        }\n        return org.apache.logging.log4j.core.config.ConfigurationFactory.configFactory;\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    private static void addFactory(final java.util.List<org.apache.logging.log4j.core.config.ConfigurationFactory> list, final java.lang.String factoryClass) {\n        try {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.addFactory(list, ((java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory>) (java.lang.Class.forName(factoryClass))));\n        } catch (final java.lang.ClassNotFoundException ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to load class \" + factoryClass, ex);\n        } catch (final java.lang.Exception ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to load class \" + factoryClass, ex);\n        }\n    }\n\n    private static void addFactory(final java.util.List<org.apache.logging.log4j.core.config.ConfigurationFactory> list, final java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory> factoryClass) {\n        try {\n            list.add(factoryClass.newInstance());\n        } catch (final java.lang.Exception ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to create instance of \" + factoryClass.getName(), ex);\n        }\n    }\n\n    public static void setConfigurationFactory(final org.apache.logging.log4j.core.config.ConfigurationFactory factory) {\n        org.apache.logging.log4j.core.config.ConfigurationFactory.configFactory = factory;\n    }\n\n    public static void resetConfigurationFactory() {\n        org.apache.logging.log4j.core.config.ConfigurationFactory.configFactory = new org.apache.logging.log4j.core.config.ConfigurationFactory.Factory();\n    }\n\n    public static void removeConfigurationFactory(final org.apache.logging.log4j.core.config.ConfigurationFactory factory) {\n        if (org.apache.logging.log4j.core.config.ConfigurationFactory.configFactory == factory) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.configFactory = new org.apache.logging.log4j.core.config.ConfigurationFactory.Factory();\n        }\n    }\n\n    protected abstract java.lang.String[] getSupportedTypes();\n\n    protected boolean isActive() {\n        return true;\n    }\n\n    public abstract org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source);\n\n    public org.apache.logging.log4j.core.config.Configuration getConfiguration(final java.lang.String name, final java.net.URI configLocation) {\n        if (!isActive()) {\n            return null;\n        }\n        if (configLocation != null) {\n            final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromURI(configLocation);\n            if (source != null) {\n                return getConfiguration(source);\n            }\n        }\n        return null;\n    }\n\n    protected org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource getInputFromURI(final java.net.URI configLocation) {\n        final java.io.File configFile = org.apache.logging.log4j.core.helpers.FileUtils.fileFromURI(configLocation);\n        if (((configFile != null) && configFile.exists()) && configFile.canRead()) {\n            try {\n                return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(new java.io.FileInputStream(configFile), configFile);\n            } catch (final java.io.FileNotFoundException ex) {\n                org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Cannot locate file \" + configLocation.getPath(), ex);\n            }\n        }\n        final java.lang.String scheme = configLocation.getScheme();\n        final boolean isClassLoaderScheme = (scheme != null) && scheme.equals(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME);\n        final boolean isClassPathScheme = ((scheme != null) && (!isClassLoaderScheme)) && scheme.equals(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME);\n        if (((scheme == null) || isClassLoaderScheme) || isClassPathScheme) {\n            final java.lang.ClassLoader loader = this.getClass().getClassLoader();\n            java.lang.String path;\n            if (isClassLoaderScheme) {\n                path = configLocation.toString().substring(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME_LENGTH);\n            } else if (isClassPathScheme) {\n                path = configLocation.toString().substring(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME_LENGTH);\n            } else {\n                path = configLocation.getPath();\n            }\n            final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromResource(path, loader);\n            if (source != null) {\n                return source;\n            }\n        }\n        try {\n            return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(configLocation.toURL().openStream(), configLocation.getPath());\n        } catch (final java.net.MalformedURLException ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Invalid URL \" + configLocation.toString(), ex);\n        } catch (final java.io.IOException ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to access \" + configLocation.toString(), ex);\n        } catch (final java.lang.Exception ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to access \" + configLocation.toString(), ex);\n        }\n        return null;\n    }\n\n    protected org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource getInputFromString(final java.lang.String config, final java.lang.ClassLoader loader) {\n        try {\n            final java.net.URL url = new java.net.URL(config);\n            return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(url.openStream(), org.apache.logging.log4j.core.helpers.FileUtils.fileFromURI(url.toURI()));\n        } catch (final java.lang.Exception ex) {\n            final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromResource(config, loader);\n            if (source == null) {\n                try {\n                    final java.io.File file = new java.io.File(config);\n                    return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(new java.io.FileInputStream(file), file);\n                } catch (final java.io.FileNotFoundException fnfe) {\n                }\n            }\n            return source;\n        }\n    }\n\n    protected org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource getInputFromResource(final java.lang.String resource, final java.lang.ClassLoader loader) {\n        final java.net.URL url = org.apache.logging.log4j.core.helpers.Loader.getResource(resource, loader);\n        if (url == null) {\n            return null;\n        }\n        java.io.InputStream is = null;\n        try {\n            is = url.openStream();\n        } catch (final java.io.IOException ioe) {\n            return null;\n        }\n        if (is == null) {\n            return null;\n        }\n        if (org.apache.logging.log4j.core.helpers.FileUtils.isFile(url)) {\n            try {\n                return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(is, org.apache.logging.log4j.core.helpers.FileUtils.fileFromURI(url.toURI()));\n            } catch (final java.net.URISyntaxException ex) {\n            }\n        }\n        return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(is, resource);\n    }\n\n    private static class WeightedFactory implements java.lang.Comparable<org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory> {\n        private final int weight;\n\n        private final java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory> factoryClass;\n\n        public WeightedFactory(final int weight, final java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory> clazz) {\n            this.weight = weight;\n            this.factoryClass = clazz;\n        }\n\n        @java.lang.Override\n        public int compareTo(final org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory wf) {\n            final int w = wf.weight;\n            if (weight == w) {\n                return 0;\n            } else if (weight > w) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n    }\n\n    private static class Factory extends org.apache.logging.log4j.core.config.ConfigurationFactory {\n        @java.lang.Override\n        public org.apache.logging.log4j.core.config.Configuration getConfiguration(final java.lang.String name, final java.net.URI configLocation) {\n            if (configLocation == null) {\n                final java.lang.String config = org.apache.logging.log4j.util.PropertiesUtil.getProperties().getStringProperty(org.apache.logging.log4j.core.config.ConfigurationFactory.CONFIGURATION_FILE_PROPERTY);\n                if (config != null) {\n                    final java.lang.ClassLoader loader = this.getClass().getClassLoader();\n                    final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromString(config, loader);\n                    if (source != null) {\n                        for (final org.apache.logging.log4j.core.config.ConfigurationFactory factory : org.apache.logging.log4j.core.config.ConfigurationFactory.factories) {\n                            final java.lang.String[] types = factory.getSupportedTypes();\n                            if (types != null) {\n                                for (final java.lang.String type : types) {\n                                    if (type.equals(\"*\") || config.endsWith(type)) {\n                                        final org.apache.logging.log4j.core.config.Configuration c = factory.getConfiguration(source);\n                                        if (c != null) {\n                                            return c;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                for (final org.apache.logging.log4j.core.config.ConfigurationFactory factory : org.apache.logging.log4j.core.config.ConfigurationFactory.factories) {\n                    final java.lang.String[] types = factory.getSupportedTypes();\n                    if (types != null) {\n                        for (final java.lang.String type : types) {\n                            if (type.equals(\"*\") || configLocation.toString().endsWith(type)) {\n                                final org.apache.logging.log4j.core.config.Configuration config = factory.getConfiguration(name, configLocation);\n                                if (config != null) {\n                                    return config;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            org.apache.logging.log4j.core.config.Configuration config = getConfiguration(true, name);\n            if (config == null) {\n                config = getConfiguration(true, null);\n                if (config == null) {\n                    config = getConfiguration(false, name);\n                    if (config == null) {\n                        config = getConfiguration(false, null);\n                    }\n                }\n            }\n            return config != null ? config : new org.apache.logging.log4j.core.config.DefaultConfiguration();\n        }\n\n        private org.apache.logging.log4j.core.config.Configuration getConfiguration(final boolean isTest, final java.lang.String name) {\n            final boolean named = (name != null) && (name.length() > 0);\n            final java.lang.ClassLoader loader = this.getClass().getClassLoader();\n            for (final org.apache.logging.log4j.core.config.ConfigurationFactory factory : org.apache.logging.log4j.core.config.ConfigurationFactory.factories) {\n                java.lang.String configName;\n                final java.lang.String prefix = (isTest) ? org.apache.logging.log4j.core.config.ConfigurationFactory.TEST_PREFIX : org.apache.logging.log4j.core.config.ConfigurationFactory.DEFAULT_PREFIX;\n                final java.lang.String[] types = factory.getSupportedTypes();\n                if (types == null) {\n                    continue;\n                }\n                for (final java.lang.String suffix : types) {\n                    if (suffix.equals(\"*\")) {\n                        continue;\n                    }\n                    configName = (named) ? (prefix + name) + suffix : prefix + suffix;\n                    final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromResource(configName, loader);\n                    if (source != null) {\n                        return factory.getConfiguration(source);\n                    }\n                }\n            }\n            return null;\n        }\n\n        @java.lang.Override\n        public java.lang.String[] getSupportedTypes() {\n            return null;\n        }\n\n        @java.lang.Override\n        public org.apache.logging.log4j.core.config.Configuration getConfiguration(final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source) {\n            if (source != null) {\n                final java.lang.String config = source.getLocation();\n                for (final org.apache.logging.log4j.core.config.ConfigurationFactory factory : org.apache.logging.log4j.core.config.ConfigurationFactory.factories) {\n                    final java.lang.String[] types = factory.getSupportedTypes();\n                    if (types != null) {\n                        for (final java.lang.String type : types) {\n                            if (type.equals(\"*\") || ((config != null) && config.endsWith(type))) {\n                                final org.apache.logging.log4j.core.config.Configuration c = factory.getConfiguration(source);\n                                if (c != null) {\n                                    return c;\n                                }\n                                org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Cannot determine the ConfigurationFactory to use for {}\", config);\n                                return null;\n                            }\n                        }\n                    }\n                }\n            }\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Cannot process configuration, input source is null\");\n            return null;\n        }\n    }\n\n    public static class ConfigurationSource {\n        private java.io.File file;\n\n        private java.lang.String location;\n\n        private java.io.InputStream stream;\n\n        public ConfigurationSource() {\n        }\n\n        public ConfigurationSource(final java.io.InputStream stream) {\n            this.stream = stream;\n            this.file = null;\n            this.location = null;\n        }\n\n        public ConfigurationSource(final java.io.InputStream stream, final java.io.File file) {\n            this.stream = stream;\n            this.file = file;\n            this.location = file.getAbsolutePath();\n        }\n\n        public ConfigurationSource(final java.io.InputStream stream, final java.lang.String location) {\n            this.stream = stream;\n            this.location = location;\n            this.file = null;\n        }\n\n        public java.io.File getFile() {\n            return file;\n        }\n\n        public void setFile(final java.io.File file) {\n            this.file = file;\n        }\n\n        public java.lang.String getLocation() {\n            return location;\n        }\n\n        public void setLocation(final java.lang.String location) {\n            this.location = location;\n        }\n\n        public java.io.InputStream getInputStream() {\n            return stream;\n        }\n\n        public void setInputStream(final java.io.InputStream stream) {\n            this.stream = stream;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static final int CLASS_PATH_SCHEME_LENGTH = org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME.length() + 1;",
            "src_parent": "public abstract class ConfigurationFactory {\n    public static final java.lang.String CONFIGURATION_FACTORY_PROPERTY = \"log4j.configurationFactory\";\n\n    public static final java.lang.String CONFIGURATION_FILE_PROPERTY = \"log4j.configurationFile\";\n\n    protected static final org.apache.logging.log4j.Logger LOGGER = org.apache.logging.log4j.status.StatusLogger.getLogger();\n\n    protected static final java.lang.String TEST_PREFIX = \"log4j2-test\";\n\n    protected static final java.lang.String DEFAULT_PREFIX = \"log4j2\";\n\n    private static final java.lang.String CLASS_LOADER_SCHEME = \"classloader\";\n\n    private static final int CLASS_LOADER_SCHEME_LENGTH = org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME.length() + 1;\n\n    private static final java.lang.String CLASS_PATH_SCHEME = \"classpath\";\n\n    private static final int CLASS_PATH_SCHEME_LENGTH = org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME.length() + 1;\n\n    private static volatile java.util.List<org.apache.logging.log4j.core.config.ConfigurationFactory> factories = null;\n\n    private static org.apache.logging.log4j.core.config.ConfigurationFactory configFactory = new org.apache.logging.log4j.core.config.ConfigurationFactory.Factory();\n\n    public static org.apache.logging.log4j.core.config.ConfigurationFactory getInstance() {\n        if (org.apache.logging.log4j.core.config.ConfigurationFactory.factories == null) {\n            synchronized(org.apache.logging.log4j.core.config.ConfigurationFactory.TEST_PREFIX) {\n                if (org.apache.logging.log4j.core.config.ConfigurationFactory.factories == null) {\n                    final java.util.List<org.apache.logging.log4j.core.config.ConfigurationFactory> list = new java.util.ArrayList<org.apache.logging.log4j.core.config.ConfigurationFactory>();\n                    final java.lang.String factoryClass = org.apache.logging.log4j.util.PropertiesUtil.getProperties().getStringProperty(org.apache.logging.log4j.core.config.ConfigurationFactory.CONFIGURATION_FACTORY_PROPERTY);\n                    if (factoryClass != null) {\n                        org.apache.logging.log4j.core.config.ConfigurationFactory.addFactory(list, factoryClass);\n                    }\n                    final org.apache.logging.log4j.core.config.plugins.PluginManager manager = new org.apache.logging.log4j.core.config.plugins.PluginManager(\"ConfigurationFactory\");\n                    manager.collectPlugins();\n                    final java.util.Map<java.lang.String, org.apache.logging.log4j.core.config.plugins.PluginType<?>> plugins = manager.getPlugins();\n                    final java.util.Set<org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory> ordered = new java.util.TreeSet<org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory>();\n                    for (final org.apache.logging.log4j.core.config.plugins.PluginType<?> type : plugins.values()) {\n                        try {\n                            @java.lang.SuppressWarnings(\"unchecked\")\n                            final java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory> clazz = ((java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory>) (type.getPluginClass()));\n                            final org.apache.logging.log4j.core.config.Order order = clazz.getAnnotation(org.apache.logging.log4j.core.config.Order.class);\n                            if (order != null) {\n                                final int weight = order.value();\n                                ordered.add(new org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory(weight, clazz));\n                            }\n                        } catch (final java.lang.Exception ex) {\n                            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.warn(\"Unable to add class \" + type.getPluginClass());\n                        }\n                    }\n                    for (final org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory wf : ordered) {\n                        org.apache.logging.log4j.core.config.ConfigurationFactory.addFactory(list, wf.factoryClass);\n                    }\n                    org.apache.logging.log4j.core.config.ConfigurationFactory.factories = java.util.Collections.unmodifiableList(list);\n                }\n            }\n        }\n        return org.apache.logging.log4j.core.config.ConfigurationFactory.configFactory;\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    private static void addFactory(final java.util.List<org.apache.logging.log4j.core.config.ConfigurationFactory> list, final java.lang.String factoryClass) {\n        try {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.addFactory(list, ((java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory>) (java.lang.Class.forName(factoryClass))));\n        } catch (final java.lang.ClassNotFoundException ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to load class \" + factoryClass, ex);\n        } catch (final java.lang.Exception ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to load class \" + factoryClass, ex);\n        }\n    }\n\n    private static void addFactory(final java.util.List<org.apache.logging.log4j.core.config.ConfigurationFactory> list, final java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory> factoryClass) {\n        try {\n            list.add(factoryClass.newInstance());\n        } catch (final java.lang.Exception ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to create instance of \" + factoryClass.getName(), ex);\n        }\n    }\n\n    public static void setConfigurationFactory(final org.apache.logging.log4j.core.config.ConfigurationFactory factory) {\n        org.apache.logging.log4j.core.config.ConfigurationFactory.configFactory = factory;\n    }\n\n    public static void resetConfigurationFactory() {\n        org.apache.logging.log4j.core.config.ConfigurationFactory.configFactory = new org.apache.logging.log4j.core.config.ConfigurationFactory.Factory();\n    }\n\n    public static void removeConfigurationFactory(final org.apache.logging.log4j.core.config.ConfigurationFactory factory) {\n        if (org.apache.logging.log4j.core.config.ConfigurationFactory.configFactory == factory) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.configFactory = new org.apache.logging.log4j.core.config.ConfigurationFactory.Factory();\n        }\n    }\n\n    protected abstract java.lang.String[] getSupportedTypes();\n\n    protected boolean isActive() {\n        return true;\n    }\n\n    public abstract org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source);\n\n    public org.apache.logging.log4j.core.config.Configuration getConfiguration(final java.lang.String name, final java.net.URI configLocation) {\n        if (!isActive()) {\n            return null;\n        }\n        if (configLocation != null) {\n            final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromURI(configLocation);\n            if (source != null) {\n                return getConfiguration(source);\n            }\n        }\n        return null;\n    }\n\n    protected org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource getInputFromURI(final java.net.URI configLocation) {\n        final java.io.File configFile = org.apache.logging.log4j.core.helpers.FileUtils.fileFromURI(configLocation);\n        if (((configFile != null) && configFile.exists()) && configFile.canRead()) {\n            try {\n                return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(new java.io.FileInputStream(configFile), configFile);\n            } catch (final java.io.FileNotFoundException ex) {\n                org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Cannot locate file \" + configLocation.getPath(), ex);\n            }\n        }\n        final java.lang.String scheme = configLocation.getScheme();\n        final boolean isClassLoaderScheme = (scheme != null) && scheme.equals(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME);\n        final boolean isClassPathScheme = ((scheme != null) && (!isClassLoaderScheme)) && scheme.equals(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME);\n        if (((scheme == null) || isClassLoaderScheme) || isClassPathScheme) {\n            final java.lang.ClassLoader loader = this.getClass().getClassLoader();\n            java.lang.String path;\n            if (isClassLoaderScheme) {\n                path = configLocation.toString().substring(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME_LENGTH);\n            } else if (isClassPathScheme) {\n                path = configLocation.toString().substring(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME_LENGTH);\n            } else {\n                path = configLocation.getPath();\n            }\n            final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromResource(path, loader);\n            if (source != null) {\n                return source;\n            }\n        }\n        try {\n            return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(configLocation.toURL().openStream(), configLocation.getPath());\n        } catch (final java.net.MalformedURLException ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Invalid URL \" + configLocation.toString(), ex);\n        } catch (final java.io.IOException ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to access \" + configLocation.toString(), ex);\n        } catch (final java.lang.Exception ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to access \" + configLocation.toString(), ex);\n        }\n        return null;\n    }\n\n    protected org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource getInputFromString(final java.lang.String config, final java.lang.ClassLoader loader) {\n        try {\n            final java.net.URL url = new java.net.URL(config);\n            return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(url.openStream(), org.apache.logging.log4j.core.helpers.FileUtils.fileFromURI(url.toURI()));\n        } catch (final java.lang.Exception ex) {\n            final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromResource(config, loader);\n            if (source == null) {\n                try {\n                    final java.io.File file = new java.io.File(config);\n                    return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(new java.io.FileInputStream(file), file);\n                } catch (final java.io.FileNotFoundException fnfe) {\n                }\n            }\n            return source;\n        }\n    }\n\n    protected org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource getInputFromResource(final java.lang.String resource, final java.lang.ClassLoader loader) {\n        final java.net.URL url = org.apache.logging.log4j.core.helpers.Loader.getResource(resource, loader);\n        if (url == null) {\n            return null;\n        }\n        java.io.InputStream is = null;\n        try {\n            is = url.openStream();\n        } catch (final java.io.IOException ioe) {\n            return null;\n        }\n        if (is == null) {\n            return null;\n        }\n        if (org.apache.logging.log4j.core.helpers.FileUtils.isFile(url)) {\n            try {\n                return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(is, org.apache.logging.log4j.core.helpers.FileUtils.fileFromURI(url.toURI()));\n            } catch (final java.net.URISyntaxException ex) {\n            }\n        }\n        return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(is, resource);\n    }\n\n    private static class WeightedFactory implements java.lang.Comparable<org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory> {\n        private final int weight;\n\n        private final java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory> factoryClass;\n\n        public WeightedFactory(final int weight, final java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory> clazz) {\n            this.weight = weight;\n            this.factoryClass = clazz;\n        }\n\n        @java.lang.Override\n        public int compareTo(final org.apache.logging.log4j.core.config.ConfigurationFactory.WeightedFactory wf) {\n            final int w = wf.weight;\n            if (weight == w) {\n                return 0;\n            } else if (weight > w) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n    }\n\n    private static class Factory extends org.apache.logging.log4j.core.config.ConfigurationFactory {\n        @java.lang.Override\n        public org.apache.logging.log4j.core.config.Configuration getConfiguration(final java.lang.String name, final java.net.URI configLocation) {\n            if (configLocation == null) {\n                final java.lang.String config = org.apache.logging.log4j.util.PropertiesUtil.getProperties().getStringProperty(org.apache.logging.log4j.core.config.ConfigurationFactory.CONFIGURATION_FILE_PROPERTY);\n                if (config != null) {\n                    final java.lang.ClassLoader loader = this.getClass().getClassLoader();\n                    final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromString(config, loader);\n                    if (source != null) {\n                        for (final org.apache.logging.log4j.core.config.ConfigurationFactory factory : org.apache.logging.log4j.core.config.ConfigurationFactory.factories) {\n                            final java.lang.String[] types = factory.getSupportedTypes();\n                            if (types != null) {\n                                for (final java.lang.String type : types) {\n                                    if (type.equals(\"*\") || config.endsWith(type)) {\n                                        final org.apache.logging.log4j.core.config.Configuration c = factory.getConfiguration(source);\n                                        if (c != null) {\n                                            return c;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                for (final org.apache.logging.log4j.core.config.ConfigurationFactory factory : org.apache.logging.log4j.core.config.ConfigurationFactory.factories) {\n                    final java.lang.String[] types = factory.getSupportedTypes();\n                    if (types != null) {\n                        for (final java.lang.String type : types) {\n                            if (type.equals(\"*\") || configLocation.toString().endsWith(type)) {\n                                final org.apache.logging.log4j.core.config.Configuration config = factory.getConfiguration(name, configLocation);\n                                if (config != null) {\n                                    return config;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            org.apache.logging.log4j.core.config.Configuration config = getConfiguration(true, name);\n            if (config == null) {\n                config = getConfiguration(true, null);\n                if (config == null) {\n                    config = getConfiguration(false, name);\n                    if (config == null) {\n                        config = getConfiguration(false, null);\n                    }\n                }\n            }\n            return config != null ? config : new org.apache.logging.log4j.core.config.DefaultConfiguration();\n        }\n\n        private org.apache.logging.log4j.core.config.Configuration getConfiguration(final boolean isTest, final java.lang.String name) {\n            final boolean named = (name != null) && (name.length() > 0);\n            final java.lang.ClassLoader loader = this.getClass().getClassLoader();\n            for (final org.apache.logging.log4j.core.config.ConfigurationFactory factory : org.apache.logging.log4j.core.config.ConfigurationFactory.factories) {\n                java.lang.String configName;\n                final java.lang.String prefix = (isTest) ? org.apache.logging.log4j.core.config.ConfigurationFactory.TEST_PREFIX : org.apache.logging.log4j.core.config.ConfigurationFactory.DEFAULT_PREFIX;\n                final java.lang.String[] types = factory.getSupportedTypes();\n                if (types == null) {\n                    continue;\n                }\n                for (final java.lang.String suffix : types) {\n                    if (suffix.equals(\"*\")) {\n                        continue;\n                    }\n                    configName = (named) ? (prefix + name) + suffix : prefix + suffix;\n                    final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromResource(configName, loader);\n                    if (source != null) {\n                        return factory.getConfiguration(source);\n                    }\n                }\n            }\n            return null;\n        }\n\n        @java.lang.Override\n        public java.lang.String[] getSupportedTypes() {\n            return null;\n        }\n\n        @java.lang.Override\n        public org.apache.logging.log4j.core.config.Configuration getConfiguration(final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source) {\n            if (source != null) {\n                final java.lang.String config = source.getLocation();\n                for (final org.apache.logging.log4j.core.config.ConfigurationFactory factory : org.apache.logging.log4j.core.config.ConfigurationFactory.factories) {\n                    final java.lang.String[] types = factory.getSupportedTypes();\n                    if (types != null) {\n                        for (final java.lang.String type : types) {\n                            if (type.equals(\"*\") || ((config != null) && config.endsWith(type))) {\n                                final org.apache.logging.log4j.core.config.Configuration c = factory.getConfiguration(source);\n                                if (c != null) {\n                                    return c;\n                                }\n                                org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Cannot determine the ConfigurationFactory to use for {}\", config);\n                                return null;\n                            }\n                        }\n                    }\n                }\n            }\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Cannot process configuration, input source is null\");\n            return null;\n        }\n    }\n\n    public static class ConfigurationSource {\n        private java.io.File file;\n\n        private java.lang.String location;\n\n        private java.io.InputStream stream;\n\n        public ConfigurationSource() {\n        }\n\n        public ConfigurationSource(final java.io.InputStream stream) {\n            this.stream = stream;\n            this.file = null;\n            this.location = null;\n        }\n\n        public ConfigurationSource(final java.io.InputStream stream, final java.io.File file) {\n            this.stream = stream;\n            this.file = file;\n            this.location = file.getAbsolutePath();\n        }\n\n        public ConfigurationSource(final java.io.InputStream stream, final java.lang.String location) {\n            this.stream = stream;\n            this.location = location;\n            this.file = null;\n        }\n\n        public java.io.File getFile() {\n            return file;\n        }\n\n        public void setFile(final java.io.File file) {\n            this.file = file;\n        }\n\n        public java.lang.String getLocation() {\n            return location;\n        }\n\n        public void setLocation(final java.lang.String location) {\n            this.location = location;\n        }\n\n        public java.io.InputStream getInputStream() {\n            return stream;\n        }\n\n        public void setInputStream(final java.io.InputStream stream) {\n            this.stream = stream;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "final boolean isClassLoaderScheme = (scheme != null) && scheme.equals(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME)",
            "src_parent": "{\n    final java.io.File configFile = org.apache.logging.log4j.core.helpers.FileUtils.fileFromURI(configLocation);\n    if (((configFile != null) && configFile.exists()) && configFile.canRead()) {\n        try {\n            return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(new java.io.FileInputStream(configFile), configFile);\n        } catch (final java.io.FileNotFoundException ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Cannot locate file \" + configLocation.getPath(), ex);\n        }\n    }\n    final java.lang.String scheme = configLocation.getScheme();\n    final boolean isClassLoaderScheme = (scheme != null) && scheme.equals(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME);\n    final boolean isClassPathScheme = ((scheme != null) && (!isClassLoaderScheme)) && scheme.equals(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME);\n    if (((scheme == null) || isClassLoaderScheme) || isClassPathScheme) {\n        final java.lang.ClassLoader loader = this.getClass().getClassLoader();\n        java.lang.String path;\n        if (isClassLoaderScheme) {\n            path = configLocation.toString().substring(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME_LENGTH);\n        } else if (isClassPathScheme) {\n            path = configLocation.toString().substring(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME_LENGTH);\n        } else {\n            path = configLocation.getPath();\n        }\n        final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromResource(path, loader);\n        if (source != null) {\n            return source;\n        }\n    }\n    try {\n        return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(configLocation.toURL().openStream(), configLocation.getPath());\n    } catch (final java.net.MalformedURLException ex) {\n        org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Invalid URL \" + configLocation.toString(), ex);\n    } catch (final java.io.IOException ex) {\n        org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to access \" + configLocation.toString(), ex);\n    } catch (final java.lang.Exception ex) {\n        org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to access \" + configLocation.toString(), ex);\n    }\n    return null;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "final boolean isClassPathScheme = ((scheme != null) && (!isClassLoaderScheme)) && scheme.equals(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME)",
            "src_parent": "{\n    final java.io.File configFile = org.apache.logging.log4j.core.helpers.FileUtils.fileFromURI(configLocation);\n    if (((configFile != null) && configFile.exists()) && configFile.canRead()) {\n        try {\n            return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(new java.io.FileInputStream(configFile), configFile);\n        } catch (final java.io.FileNotFoundException ex) {\n            org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Cannot locate file \" + configLocation.getPath(), ex);\n        }\n    }\n    final java.lang.String scheme = configLocation.getScheme();\n    final boolean isClassLoaderScheme = (scheme != null) && scheme.equals(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME);\n    final boolean isClassPathScheme = ((scheme != null) && (!isClassLoaderScheme)) && scheme.equals(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME);\n    if (((scheme == null) || isClassLoaderScheme) || isClassPathScheme) {\n        final java.lang.ClassLoader loader = this.getClass().getClassLoader();\n        java.lang.String path;\n        if (isClassLoaderScheme) {\n            path = configLocation.toString().substring(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME_LENGTH);\n        } else if (isClassPathScheme) {\n            path = configLocation.toString().substring(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME_LENGTH);\n        } else {\n            path = configLocation.getPath();\n        }\n        final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromResource(path, loader);\n        if (source != null) {\n            return source;\n        }\n    }\n    try {\n        return new org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource(configLocation.toURL().openStream(), configLocation.getPath());\n    } catch (final java.net.MalformedURLException ex) {\n        org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Invalid URL \" + configLocation.toString(), ex);\n    } catch (final java.io.IOException ex) {\n        org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to access \" + configLocation.toString(), ex);\n    } catch (final java.lang.Exception ex) {\n        org.apache.logging.log4j.core.config.ConfigurationFactory.LOGGER.error(\"Unable to access \" + configLocation.toString(), ex);\n    }\n    return null;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "((scheme == null) || isClassLoaderScheme)",
            "src_parent": "((scheme == null) || isClassLoaderScheme) || isClassPathScheme",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "isClassPathScheme",
            "src_parent": "((scheme == null) || isClassLoaderScheme) || isClassPathScheme",
            "src_parent_type": "BinaryOperator",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.lang.String path",
            "src_parent": "{\n    final java.lang.ClassLoader loader = this.getClass().getClassLoader();\n    java.lang.String path;\n    if (isClassLoaderScheme) {\n        path = configLocation.toString().substring(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME_LENGTH);\n    } else if (isClassPathScheme) {\n        path = configLocation.toString().substring(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME_LENGTH);\n    } else {\n        path = configLocation.getPath();\n    }\n    final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromResource(path, loader);\n    if (source != null) {\n        return source;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (isClassLoaderScheme) {\n    path = configLocation.toString().substring(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME_LENGTH);\n} else if (isClassPathScheme) {\n    path = configLocation.toString().substring(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME_LENGTH);\n} else {\n    path = configLocation.getPath();\n}",
            "src_parent": "{\n    final java.lang.ClassLoader loader = this.getClass().getClassLoader();\n    java.lang.String path;\n    if (isClassLoaderScheme) {\n        path = configLocation.toString().substring(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME_LENGTH);\n    } else if (isClassPathScheme) {\n        path = configLocation.toString().substring(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_PATH_SCHEME_LENGTH);\n    } else {\n        path = configLocation.getPath();\n    }\n    final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromResource(path, loader);\n    if (source != null) {\n        return source;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "VE: Modifiers_LocalVariable",
            "src_parent": "final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromResource(path, loader)",
            "src_parent_type": "LocalVariable",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "path",
            "src_parent": "getInputFromResource(path, loader)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_LocalVariable",
            "dst_parent": "final boolean isClassLoaderScheme = (scheme != null) && scheme.equals(org.apache.logging.log4j.core.config.ConfigurationFactory.CLASS_LOADER_SCHEME)",
            "dst_parent_type": "LocalVariable",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_LocalVariable",
            "src_parent": "final org.apache.logging.log4j.core.config.ConfigurationFactory.ConfigurationSource source = getInputFromResource(configLocation.getPath(), loader)",
            "src_parent_type": "LocalVariable",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(scheme == null)",
            "dst_parent": "((scheme == null) || isClassLoaderScheme)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(scheme == null)",
            "src_parent": "(scheme == null) || scheme.equals(\"classloader\")",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "configLocation.getPath()",
            "dst_parent": "path = configLocation.getPath()",
            "dst_parent_type": "Assignment",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "configLocation.getPath()",
            "src_parent": "getInputFromResource(configLocation.getPath(), loader)",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "ConfigurationFactory"
    }
  ],
  "id": "logging-log4j2_25cb587a"
}