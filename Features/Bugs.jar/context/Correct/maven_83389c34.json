{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "private void validateEffectiveDependency(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.Dependency d, boolean management, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n    validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey());\n    validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey());\n    if (!management) {\n        validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n        validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n    }\n    if (\"system\".equals(d.getScope())) {\n        java.lang.String systemPath = d.getSystemPath();\n        if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n        } else {\n            java.io.File sysFile = new java.io.File(systemPath);\n            if (!sysFile.isAbsolute()) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n            } else if (!sysFile.isFile()) {\n                java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n                systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n                java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n                if (systemPath.startsWith(jdkHome)) {\n                    msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n                }\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n            }\n        }\n    } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n    }\n}",
            "dst_parent": "@org.codehaus.plexus.component.annotations.Component(role = org.apache.maven.model.validation.ModelValidator.class)\npublic class DefaultModelValidator implements org.apache.maven.model.validation.ModelValidator {\n    private static final java.lang.String ID_REGEX = \"[A-Za-z0-9_\\\\-.]+\";\n\n    public void validateRawModel(org.apache.maven.model.Model model, org.apache.maven.model.building.ModelBuildingRequest request, org.apache.maven.model.building.ModelProblemCollector problems) {\n        org.apache.maven.model.Parent parent = model.getParent();\n        if (parent != null) {\n            validateStringNotEmpty(\"parent.groupId\", problems, Severity.FATAL, parent.getGroupId());\n            validateStringNotEmpty(\"parent.artifactId\", problems, Severity.FATAL, parent.getArtifactId());\n            validateStringNotEmpty(\"parent.version\", problems, Severity.FATAL, parent.getVersion());\n            if (org.apache.maven.model.validation.DefaultModelValidator.equals(parent.getGroupId(), model.getGroupId()) && org.apache.maven.model.validation.DefaultModelValidator.equals(parent.getArtifactId(), model.getArtifactId())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.FATAL, \"parent.artifactId\", null, \"must be changed\" + \", the parent element cannot have the same groupId:artifactId as the project.\");\n            }\n        }\n        if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n            org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n            validateEnum(\"modelVersion\", problems, Severity.ERROR, model.getModelVersion(), null, \"4.0.0\");\n            validateStringNoExpression(\"groupId\", problems, Severity.WARNING, model.getGroupId());\n            validateStringNoExpression(\"artifactId\", problems, Severity.WARNING, model.getArtifactId());\n            validateStringNoExpression(\"version\", problems, Severity.WARNING, model.getVersion());\n            validateRawDependencies(problems, model.getDependencies(), \"dependencies.dependency\", request);\n            if (model.getDependencyManagement() != null) {\n                validateRawDependencies(problems, model.getDependencyManagement().getDependencies(), \"dependencyManagement.dependencies.dependency\", request);\n            }\n            validateRepositories(problems, model.getRepositories(), \"repositories.repository\", request);\n            validateRepositories(problems, model.getPluginRepositories(), \"pluginRepositories.pluginRepository\", request);\n            org.apache.maven.model.Build build = model.getBuild();\n            if (build != null) {\n                validateRawPlugins(problems, build.getPlugins(), false, request);\n                org.apache.maven.model.PluginManagement mngt = build.getPluginManagement();\n                if (mngt != null) {\n                    validateRawPlugins(problems, mngt.getPlugins(), true, request);\n                }\n            }\n            java.util.Set<java.lang.String> profileIds = new java.util.HashSet<java.lang.String>();\n            for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n                if (!profileIds.add(profile.getId())) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn30, \"profiles.profile.id\", null, \"must be unique but found duplicate profile with id \" + profile.getId());\n                }\n                validateRawDependencies(problems, profile.getDependencies(), (\"profiles.profile[\" + profile.getId()) + \"].dependencies.dependency\", request);\n                if (profile.getDependencyManagement() != null) {\n                    validateRawDependencies(problems, profile.getDependencyManagement().getDependencies(), (\"profiles.profile[\" + profile.getId()) + \"].dependencyManagement.dependencies.dependency\", request);\n                }\n                validateRepositories(problems, profile.getRepositories(), (\"profiles.profile[\" + profile.getId()) + \"].repositories.repository\", request);\n                validateRepositories(problems, profile.getPluginRepositories(), (\"profiles.profile[\" + profile.getId()) + \"].pluginRepositories.pluginRepository\", request);\n            }\n        }\n    }\n\n    private void validateRawPlugins(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Plugin> plugins, boolean managed, org.apache.maven.model.building.ModelBuildingRequest request) {\n        org.apache.maven.model.building.ModelProblem.Severity errOn31 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);\n        java.lang.String prefix = (managed ? \"build.pluginManagement.\" : \"build.\") + \"plugins.plugin.\";\n        java.util.Map<java.lang.String, org.apache.maven.model.Plugin> index = new java.util.HashMap<java.lang.String, org.apache.maven.model.Plugin>();\n        for (org.apache.maven.model.Plugin plugin : plugins) {\n            java.lang.String key = plugin.getKey();\n            org.apache.maven.model.Plugin existing = index.get(key);\n            if (existing != null) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn31, prefix + \"(groupId:artifactId)\", null, \"must be unique but found duplicate declaration of plugin \" + key);\n            } else {\n                index.put(key, plugin);\n            }\n            java.util.Set<java.lang.String> executionIds = new java.util.HashSet<java.lang.String>();\n            for (org.apache.maven.model.PluginExecution exec : plugin.getExecutions()) {\n                if (!executionIds.add(exec.getId())) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, (\"build.plugins.plugin[\" + plugin.getKey()) + \"].executions.execution.id\", null, \"must be unique but found duplicate execution with id \" + exec.getId());\n                }\n            }\n        }\n    }\n\n    public void validateEffectiveModel(org.apache.maven.model.Model model, org.apache.maven.model.building.ModelBuildingRequest request, org.apache.maven.model.building.ModelProblemCollector problems) {\n        validateStringNotEmpty(\"modelVersion\", problems, Severity.ERROR, model.getModelVersion());\n        validateId(\"groupId\", problems, model.getGroupId());\n        validateId(\"artifactId\", problems, model.getArtifactId());\n        validateStringNotEmpty(\"packaging\", problems, Severity.ERROR, model.getPackaging());\n        if (!model.getModules().isEmpty()) {\n            if (!\"pom\".equals(model.getPackaging())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, \"packaging\", null, ((\"with value '\" + model.getPackaging()) + \"' is invalid. Aggregator projects \") + \"require 'pom' as packaging.\");\n            }\n            for (int i = 0, n = model.getModules().size(); i < n; i++) {\n                java.lang.String module = model.getModules().get(i);\n                if (org.codehaus.plexus.util.StringUtils.isBlank(module)) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, (\"modules.module[\" + i) + \"]\", null, \"has been specified without a path to the project directory.\");\n                }\n            }\n        }\n        validateStringNotEmpty(\"version\", problems, Severity.ERROR, model.getVersion());\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        validateEffectiveDependencies(problems, model.getDependencies(), false, request);\n        org.apache.maven.model.DependencyManagement mgmt = model.getDependencyManagement();\n        if (mgmt != null) {\n            validateEffectiveDependencies(problems, mgmt.getDependencies(), true, request);\n        }\n        if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n            java.util.Set<java.lang.String> modules = new java.util.HashSet<java.lang.String>();\n            for (int i = 0, n = model.getModules().size(); i < n; i++) {\n                java.lang.String module = model.getModules().get(i);\n                if (!modules.add(module)) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, (\"modules.module[\" + i) + \"]\", null, \"specifies duplicate child module \" + module);\n                }\n            }\n            org.apache.maven.model.building.ModelProblem.Severity errOn31 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);\n            org.apache.maven.model.Build build = model.getBuild();\n            if (build != null) {\n                for (org.apache.maven.model.Plugin p : build.getPlugins()) {\n                    validateStringNotEmpty(\"build.plugins.plugin.artifactId\", problems, Severity.ERROR, p.getArtifactId());\n                    validateStringNotEmpty(\"build.plugins.plugin.groupId\", problems, Severity.ERROR, p.getGroupId());\n                    validatePluginVersion(\"build.plugins.plugin.version\", problems, p.getVersion(), p.getKey(), request);\n                    validateBoolean(\"build.plugins.plugin.inherited\", problems, errOn30, p.getInherited(), p.getKey());\n                    validateBoolean(\"build.plugins.plugin.extensions\", problems, errOn30, p.getExtensions(), p.getKey());\n                    validateEffectivePluginDependencies(problems, p, request);\n                }\n                validateResources(problems, build.getResources(), \"build.resources.resource\", request);\n                validateResources(problems, build.getTestResources(), \"build.testResources.testResource\", request);\n            }\n            org.apache.maven.model.Reporting reporting = model.getReporting();\n            if (reporting != null) {\n                for (org.apache.maven.model.ReportPlugin p : reporting.getPlugins()) {\n                    validateStringNotEmpty(\"reporting.plugins.plugin.artifactId\", problems, Severity.ERROR, p.getArtifactId());\n                    validateStringNotEmpty(\"reporting.plugins.plugin.groupId\", problems, Severity.ERROR, p.getGroupId());\n                    validateStringNotEmpty(\"reporting.plugins.plugin.version\", problems, errOn31, p.getVersion(), p.getKey());\n                }\n            }\n            for (org.apache.maven.model.Repository repository : model.getRepositories()) {\n                validateRepository(problems, repository, \"repositories.repository\", request);\n            }\n            for (org.apache.maven.model.Repository repository : model.getPluginRepositories()) {\n                validateRepository(problems, repository, \"pluginRepositories.pluginRepository\", request);\n            }\n            org.apache.maven.model.DistributionManagement distMgmt = model.getDistributionManagement();\n            if (distMgmt != null) {\n                if (distMgmt.getStatus() != null) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, \"distributionManagement.status\", null, \"must not be specified.\");\n                }\n                validateRepository(problems, distMgmt.getRepository(), \"distributionManagement.repository\", request);\n                validateRepository(problems, distMgmt.getSnapshotRepository(), \"distributionManagement.snapshotRepository\", request);\n            }\n        }\n    }\n\n    private void validateRawDependencies(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Dependency> dependencies, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        org.apache.maven.model.building.ModelProblem.Severity errOn31 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);\n        java.util.Map<java.lang.String, org.apache.maven.model.Dependency> index = new java.util.HashMap<java.lang.String, org.apache.maven.model.Dependency>();\n        for (org.apache.maven.model.Dependency dependency : dependencies) {\n            java.lang.String key = dependency.getManagementKey();\n            if ((\"pom\".equals(dependency.getType()) && \"import\".equals(dependency.getScope())) && org.codehaus.plexus.util.StringUtils.isNotEmpty(dependency.getClassifier())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn30, prefix + \".classifier\", key, \"must be empty, imported POM cannot have a classifier.\");\n            } else if (\"system\".equals(dependency.getScope())) {\n                java.lang.String sysPath = dependency.getSystemPath();\n                if (org.codehaus.plexus.util.StringUtils.isNotEmpty(sysPath) && (!hasExpression(sysPath))) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \".systemPath\", key, \"should use a variable instead of a hard-coded path \" + sysPath);\n                }\n            }\n            org.apache.maven.model.Dependency existing = index.get(key);\n            if (existing != null) {\n                java.lang.String msg;\n                if (org.apache.maven.model.validation.DefaultModelValidator.equals(existing.getVersion(), dependency.getVersion())) {\n                    msg = \"duplicate declaration of version \" + org.codehaus.plexus.util.StringUtils.defaultString(dependency.getVersion(), \"(?)\");\n                } else {\n                    msg = ((\"version \" + org.codehaus.plexus.util.StringUtils.defaultString(existing.getVersion(), \"(?)\")) + \" vs \") + org.codehaus.plexus.util.StringUtils.defaultString(dependency.getVersion(), \"(?)\");\n                }\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn31, prefix + \".(groupId:artifactId:type:classifier)\", null, ((\"must be unique: \" + key) + \" -> \") + msg);\n            } else {\n                index.put(key, dependency);\n            }\n        }\n    }\n\n    private void validateEffectiveDependencies(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Dependency> dependencies, boolean management, org.apache.maven.model.building.ModelBuildingRequest request) {\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        java.lang.String prefix = (management) ? \"dependencyManagement.dependencies.dependency.\" : \"dependencies.dependency.\";\n        for (org.apache.maven.model.Dependency d : dependencies) {\n            validateEffectiveDependency(problems, d, management, prefix, request);\n            if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n                validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n                if (!management) {\n                    validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n                    validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n                }\n            }\n        }\n    }\n\n    private void validateEffectivePluginDependencies(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.Plugin plugin, org.apache.maven.model.building.ModelBuildingRequest request) {\n        java.util.List<org.apache.maven.model.Dependency> dependencies = plugin.getDependencies();\n        if (!dependencies.isEmpty()) {\n            java.lang.String prefix = (\"build.plugins.plugin[\" + plugin.getKey()) + \"].dependencies.dependency.\";\n            org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n            for (org.apache.maven.model.Dependency d : dependencies) {\n                validateEffectiveDependency(problems, d, false, prefix, request);\n                validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n                validateEnum(prefix + \"scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\");\n            }\n        }\n    }\n\n    private void validateEffectiveDependency(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.Dependency d, boolean management, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey());\n        validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey());\n        if (!management) {\n            validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n            validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n        }\n        if (\"system\".equals(d.getScope())) {\n            java.lang.String systemPath = d.getSystemPath();\n            if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n            } else {\n                java.io.File sysFile = new java.io.File(systemPath);\n                if (!sysFile.isAbsolute()) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n                } else if (!sysFile.isFile()) {\n                    java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n                    systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n                    java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n                    if (systemPath.startsWith(jdkHome)) {\n                        msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n                    }\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n                }\n            }\n        } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n        }\n    }\n\n    private void validateRepositories(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Repository> repositories, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        java.util.Map<java.lang.String, org.apache.maven.model.Repository> index = new java.util.HashMap<java.lang.String, org.apache.maven.model.Repository>();\n        for (org.apache.maven.model.Repository repository : repositories) {\n            validateStringNotEmpty(prefix + \".id\", problems, Severity.ERROR, repository.getId());\n            validateStringNotEmpty(((prefix + \"[\") + repository.getId()) + \"].url\", problems, Severity.ERROR, repository.getUrl());\n            java.lang.String key = repository.getId();\n            org.apache.maven.model.Repository existing = index.get(key);\n            if (existing != null) {\n                org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn30, prefix + \".id\", null, ((((\"must be unique: \" + repository.getId()) + \" -> \") + existing.getUrl()) + \" vs \") + repository.getUrl());\n            } else {\n                index.put(key, repository);\n            }\n        }\n    }\n\n    private void validateRepository(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.Repository repository, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        if (repository != null) {\n            if (\"local\".equals(repository.getId())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \".id\", null, \"must not be 'local', this identifier is reserved.\");\n            }\n            if (\"legacy\".equals(repository.getLayout())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \".layout\", repository.getId(), \"uses the deprecated value 'legacy'.\");\n            }\n        }\n    }\n\n    private void validateResources(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Resource> resources, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        for (org.apache.maven.model.Resource resource : resources) {\n            validateStringNotEmpty(prefix + \".directory\", problems, Severity.ERROR, resource.getDirectory());\n            validateBoolean(prefix + \".filtering\", problems, errOn30, resource.getFiltering(), resource.getDirectory());\n        }\n    }\n\n    private boolean validateId(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, java.lang.String id) {\n        return validateId(fieldName, problems, id, null);\n    }\n\n    private boolean validateId(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, java.lang.String id, java.lang.String sourceHint) {\n        if (!validateStringNotEmpty(fieldName, problems, Severity.ERROR, id, sourceHint)) {\n            return false;\n        } else {\n            boolean match = id.matches(org.apache.maven.model.validation.DefaultModelValidator.ID_REGEX);\n            if (!match) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, fieldName, sourceHint, (\"with value '\" + id) + \"' does not match a valid id pattern.\");\n            }\n            return match;\n        }\n    }\n\n    private boolean validateStringNoExpression(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string) {\n        if (!hasExpression(string)) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, null, \"contains an expression but should be a constant.\");\n        return false;\n    }\n\n    private boolean hasExpression(java.lang.String value) {\n        return (value != null) && (value.indexOf(\"${\") >= 0);\n    }\n\n    private boolean validateStringNotEmpty(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string) {\n        return validateStringNotEmpty(fieldName, problems, severity, string, null);\n    }\n\n    private boolean validateStringNotEmpty(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string, java.lang.String sourceHint) {\n        if (!validateNotNull(fieldName, problems, severity, string, sourceHint)) {\n            return false;\n        }\n        if (string.length() > 0) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, sourceHint, \"is missing.\");\n        return false;\n    }\n\n    private boolean validateNotNull(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.Object object, java.lang.String sourceHint) {\n        if (object != null) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, sourceHint, \"is missing.\");\n        return false;\n    }\n\n    private boolean validateBoolean(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string, java.lang.String sourceHint) {\n        if ((string == null) || (string.length() <= 0)) {\n            return true;\n        }\n        if (\"true\".equalsIgnoreCase(string) || \"false\".equalsIgnoreCase(string)) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, sourceHint, (\"must be 'true' or 'false' but is '\" + string) + \"'.\");\n        return false;\n    }\n\n    private boolean validateEnum(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string, java.lang.String sourceHint, java.lang.String... validValues) {\n        if ((string == null) || (string.length() <= 0)) {\n            return true;\n        }\n        java.util.List<java.lang.String> values = java.util.Arrays.asList(validValues);\n        if (values.contains(string)) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, sourceHint, (((\"must be one of \" + values) + \" but is '\") + string) + \"'.\");\n        return false;\n    }\n\n    private boolean validateVersion(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string, java.lang.String sourceHint) {\n        if ((string == null) || (string.length() <= 0)) {\n            return true;\n        }\n        if (!hasExpression(string)) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, sourceHint, (\"must be a valid version but is '\" + string) + \"'.\");\n        return false;\n    }\n\n    private boolean validatePluginVersion(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, java.lang.String string, java.lang.String sourceHint, org.apache.maven.model.building.ModelBuildingRequest request) {\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        if (string == null) {\n            return true;\n        }\n        if ((((string.length() > 0) && (!hasExpression(string))) && (!\"RELEASE\".equals(string))) && (!\"LATEST\".equals(string))) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn30, fieldName, sourceHint, (\"must be a valid version but is '\" + string) + \"'.\");\n        return false;\n    }\n\n    private static void addViolation(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String fieldName, java.lang.String sourceHint, java.lang.String message) {\n        java.lang.StringBuilder buffer = new java.lang.StringBuilder(256);\n        buffer.append('\\'').append(fieldName).append('\\'');\n        if (sourceHint != null) {\n            buffer.append(\" for \").append(sourceHint);\n        }\n        buffer.append(' ').append(message);\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, buffer.toString());\n    }\n\n    private static void addViolation(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String message) {\n        problems.add(severity, message, null);\n    }\n\n    private static boolean equals(java.lang.String s1, java.lang.String s2) {\n        return org.codehaus.plexus.util.StringUtils.clean(s1).equals(org.codehaus.plexus.util.StringUtils.clean(s2));\n    }\n\n    private static org.apache.maven.model.building.ModelProblem.Severity getSeverity(org.apache.maven.model.building.ModelBuildingRequest request, int errorThreshold) {\n        return org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request.getValidationLevel(), errorThreshold);\n    }\n\n    private static org.apache.maven.model.building.ModelProblem.Severity getSeverity(int validationLevel, int errorThreshold) {\n        if (validationLevel < errorThreshold) {\n            return org.apache.maven.model.building.ModelProblem.Severity.WARNING;\n        } else {\n            return org.apache.maven.model.building.ModelProblem.Severity.ERROR;\n        }\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "private void validateEffectiveDependencies(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Dependency> dependencies, boolean managed, org.apache.maven.model.building.ModelBuildingRequest request) {\n    org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n    java.lang.String prefix = (managed) ? \"dependencyManagement.dependencies.dependency.\" : \"dependencies.dependency.\";\n    for (org.apache.maven.model.Dependency d : dependencies) {\n        validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey());\n        validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey());\n        if (!managed) {\n            validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n            validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n        }\n        if (\"system\".equals(d.getScope())) {\n            java.lang.String systemPath = d.getSystemPath();\n            if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n            } else {\n                java.io.File sysFile = new java.io.File(systemPath);\n                if (!sysFile.isAbsolute()) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n                } else if (!sysFile.isFile()) {\n                    java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n                    systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n                    java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n                    if (systemPath.startsWith(jdkHome)) {\n                        msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n                    }\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n                }\n            }\n        } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n        }\n        if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n            validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n            if (!managed) {\n                validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n                validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n            }\n        }\n    }\n}",
            "src_parent": "@org.codehaus.plexus.component.annotations.Component(role = org.apache.maven.model.validation.ModelValidator.class)\npublic class DefaultModelValidator implements org.apache.maven.model.validation.ModelValidator {\n    private static final java.lang.String ID_REGEX = \"[A-Za-z0-9_\\\\-.]+\";\n\n    public void validateRawModel(org.apache.maven.model.Model model, org.apache.maven.model.building.ModelBuildingRequest request, org.apache.maven.model.building.ModelProblemCollector problems) {\n        org.apache.maven.model.Parent parent = model.getParent();\n        if (parent != null) {\n            validateStringNotEmpty(\"parent.groupId\", problems, Severity.FATAL, parent.getGroupId());\n            validateStringNotEmpty(\"parent.artifactId\", problems, Severity.FATAL, parent.getArtifactId());\n            validateStringNotEmpty(\"parent.version\", problems, Severity.FATAL, parent.getVersion());\n            if (org.apache.maven.model.validation.DefaultModelValidator.equals(parent.getGroupId(), model.getGroupId()) && org.apache.maven.model.validation.DefaultModelValidator.equals(parent.getArtifactId(), model.getArtifactId())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.FATAL, \"parent.artifactId\", null, \"must be changed\" + \", the parent element cannot have the same groupId:artifactId as the project.\");\n            }\n        }\n        if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n            org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n            validateEnum(\"modelVersion\", problems, Severity.ERROR, model.getModelVersion(), null, \"4.0.0\");\n            validateStringNoExpression(\"groupId\", problems, Severity.WARNING, model.getGroupId());\n            validateStringNoExpression(\"artifactId\", problems, Severity.WARNING, model.getArtifactId());\n            validateStringNoExpression(\"version\", problems, Severity.WARNING, model.getVersion());\n            validateRawDependencies(problems, model.getDependencies(), \"dependencies.dependency\", request);\n            if (model.getDependencyManagement() != null) {\n                validateRawDependencies(problems, model.getDependencyManagement().getDependencies(), \"dependencyManagement.dependencies.dependency\", request);\n            }\n            validateRepositories(problems, model.getRepositories(), \"repositories.repository\", request);\n            validateRepositories(problems, model.getPluginRepositories(), \"pluginRepositories.pluginRepository\", request);\n            org.apache.maven.model.Build build = model.getBuild();\n            if (build != null) {\n                validateRawPlugins(problems, build.getPlugins(), false, request);\n                org.apache.maven.model.PluginManagement mngt = build.getPluginManagement();\n                if (mngt != null) {\n                    validateRawPlugins(problems, mngt.getPlugins(), true, request);\n                }\n            }\n            java.util.Set<java.lang.String> profileIds = new java.util.HashSet<java.lang.String>();\n            for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n                if (!profileIds.add(profile.getId())) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn30, \"profiles.profile.id\", null, \"must be unique but found duplicate profile with id \" + profile.getId());\n                }\n                validateRawDependencies(problems, profile.getDependencies(), (\"profiles.profile[\" + profile.getId()) + \"].dependencies.dependency\", request);\n                if (profile.getDependencyManagement() != null) {\n                    validateRawDependencies(problems, profile.getDependencyManagement().getDependencies(), (\"profiles.profile[\" + profile.getId()) + \"].dependencyManagement.dependencies.dependency\", request);\n                }\n                validateRepositories(problems, profile.getRepositories(), (\"profiles.profile[\" + profile.getId()) + \"].repositories.repository\", request);\n                validateRepositories(problems, profile.getPluginRepositories(), (\"profiles.profile[\" + profile.getId()) + \"].pluginRepositories.pluginRepository\", request);\n            }\n        }\n    }\n\n    private void validateRawPlugins(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Plugin> plugins, boolean managed, org.apache.maven.model.building.ModelBuildingRequest request) {\n        org.apache.maven.model.building.ModelProblem.Severity errOn31 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);\n        java.lang.String prefix = (managed ? \"build.pluginManagement.\" : \"build.\") + \"plugins.plugin.\";\n        java.util.Map<java.lang.String, org.apache.maven.model.Plugin> index = new java.util.HashMap<java.lang.String, org.apache.maven.model.Plugin>();\n        for (org.apache.maven.model.Plugin plugin : plugins) {\n            java.lang.String key = plugin.getKey();\n            org.apache.maven.model.Plugin existing = index.get(key);\n            if (existing != null) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn31, prefix + \"(groupId:artifactId)\", null, \"must be unique but found duplicate declaration of plugin \" + key);\n            } else {\n                index.put(key, plugin);\n            }\n            java.util.Set<java.lang.String> executionIds = new java.util.HashSet<java.lang.String>();\n            for (org.apache.maven.model.PluginExecution exec : plugin.getExecutions()) {\n                if (!executionIds.add(exec.getId())) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, (\"build.plugins.plugin[\" + plugin.getKey()) + \"].executions.execution.id\", null, \"must be unique but found duplicate execution with id \" + exec.getId());\n                }\n            }\n        }\n    }\n\n    public void validateEffectiveModel(org.apache.maven.model.Model model, org.apache.maven.model.building.ModelBuildingRequest request, org.apache.maven.model.building.ModelProblemCollector problems) {\n        validateStringNotEmpty(\"modelVersion\", problems, Severity.ERROR, model.getModelVersion());\n        validateId(\"groupId\", problems, model.getGroupId());\n        validateId(\"artifactId\", problems, model.getArtifactId());\n        validateStringNotEmpty(\"packaging\", problems, Severity.ERROR, model.getPackaging());\n        if (!model.getModules().isEmpty()) {\n            if (!\"pom\".equals(model.getPackaging())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, \"packaging\", null, ((\"with value '\" + model.getPackaging()) + \"' is invalid. Aggregator projects \") + \"require 'pom' as packaging.\");\n            }\n            for (int i = 0, n = model.getModules().size(); i < n; i++) {\n                java.lang.String module = model.getModules().get(i);\n                if (org.codehaus.plexus.util.StringUtils.isBlank(module)) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, (\"modules.module[\" + i) + \"]\", null, \"has been specified without a path to the project directory.\");\n                }\n            }\n        }\n        validateStringNotEmpty(\"version\", problems, Severity.ERROR, model.getVersion());\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        validateEffectiveDependencies(problems, model.getDependencies(), false, request);\n        org.apache.maven.model.DependencyManagement mgmt = model.getDependencyManagement();\n        if (mgmt != null) {\n            validateEffectiveDependencies(problems, mgmt.getDependencies(), true, request);\n        }\n        if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n            java.util.Set<java.lang.String> modules = new java.util.HashSet<java.lang.String>();\n            for (int i = 0, n = model.getModules().size(); i < n; i++) {\n                java.lang.String module = model.getModules().get(i);\n                if (!modules.add(module)) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, (\"modules.module[\" + i) + \"]\", null, \"specifies duplicate child module \" + module);\n                }\n            }\n            org.apache.maven.model.building.ModelProblem.Severity errOn31 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);\n            org.apache.maven.model.Build build = model.getBuild();\n            if (build != null) {\n                for (org.apache.maven.model.Plugin p : build.getPlugins()) {\n                    validateStringNotEmpty(\"build.plugins.plugin.artifactId\", problems, Severity.ERROR, p.getArtifactId());\n                    validateStringNotEmpty(\"build.plugins.plugin.groupId\", problems, Severity.ERROR, p.getGroupId());\n                    validatePluginVersion(\"build.plugins.plugin.version\", problems, p.getVersion(), p.getKey(), request);\n                    validateBoolean(\"build.plugins.plugin.inherited\", problems, errOn30, p.getInherited(), p.getKey());\n                    validateBoolean(\"build.plugins.plugin.extensions\", problems, errOn30, p.getExtensions(), p.getKey());\n                    for (org.apache.maven.model.Dependency d : p.getDependencies()) {\n                        validateEnum((\"build.plugins.plugin[\" + p.getKey()) + \"].dependencies.dependency.scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\");\n                    }\n                }\n                validateResources(problems, build.getResources(), \"build.resources.resource\", request);\n                validateResources(problems, build.getTestResources(), \"build.testResources.testResource\", request);\n            }\n            org.apache.maven.model.Reporting reporting = model.getReporting();\n            if (reporting != null) {\n                for (org.apache.maven.model.ReportPlugin p : reporting.getPlugins()) {\n                    validateStringNotEmpty(\"reporting.plugins.plugin.artifactId\", problems, Severity.ERROR, p.getArtifactId());\n                    validateStringNotEmpty(\"reporting.plugins.plugin.groupId\", problems, Severity.ERROR, p.getGroupId());\n                    validateStringNotEmpty(\"reporting.plugins.plugin.version\", problems, errOn31, p.getVersion(), p.getKey());\n                }\n            }\n            for (org.apache.maven.model.Repository repository : model.getRepositories()) {\n                validateRepository(problems, repository, \"repositories.repository\", request);\n            }\n            for (org.apache.maven.model.Repository repository : model.getPluginRepositories()) {\n                validateRepository(problems, repository, \"pluginRepositories.pluginRepository\", request);\n            }\n            org.apache.maven.model.DistributionManagement distMgmt = model.getDistributionManagement();\n            if (distMgmt != null) {\n                if (distMgmt.getStatus() != null) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, \"distributionManagement.status\", null, \"must not be specified.\");\n                }\n                validateRepository(problems, distMgmt.getRepository(), \"distributionManagement.repository\", request);\n                validateRepository(problems, distMgmt.getSnapshotRepository(), \"distributionManagement.snapshotRepository\", request);\n            }\n        }\n    }\n\n    private void validateRawDependencies(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Dependency> dependencies, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        org.apache.maven.model.building.ModelProblem.Severity errOn31 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);\n        java.util.Map<java.lang.String, org.apache.maven.model.Dependency> index = new java.util.HashMap<java.lang.String, org.apache.maven.model.Dependency>();\n        for (org.apache.maven.model.Dependency dependency : dependencies) {\n            java.lang.String key = dependency.getManagementKey();\n            if ((\"pom\".equals(dependency.getType()) && \"import\".equals(dependency.getScope())) && org.codehaus.plexus.util.StringUtils.isNotEmpty(dependency.getClassifier())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn30, prefix + \".classifier\", key, \"must be empty, imported POM cannot have a classifier.\");\n            } else if (\"system\".equals(dependency.getScope())) {\n                java.lang.String sysPath = dependency.getSystemPath();\n                if (org.codehaus.plexus.util.StringUtils.isNotEmpty(sysPath) && (!hasExpression(sysPath))) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \".systemPath\", key, \"should use a variable instead of a hard-coded path \" + sysPath);\n                }\n            }\n            org.apache.maven.model.Dependency existing = index.get(key);\n            if (existing != null) {\n                java.lang.String msg;\n                if (org.apache.maven.model.validation.DefaultModelValidator.equals(existing.getVersion(), dependency.getVersion())) {\n                    msg = \"duplicate declaration of version \" + org.codehaus.plexus.util.StringUtils.defaultString(dependency.getVersion(), \"(?)\");\n                } else {\n                    msg = ((\"version \" + org.codehaus.plexus.util.StringUtils.defaultString(existing.getVersion(), \"(?)\")) + \" vs \") + org.codehaus.plexus.util.StringUtils.defaultString(dependency.getVersion(), \"(?)\");\n                }\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn31, prefix + \".(groupId:artifactId:type:classifier)\", null, ((\"must be unique: \" + key) + \" -> \") + msg);\n            } else {\n                index.put(key, dependency);\n            }\n        }\n    }\n\n    private void validateEffectiveDependencies(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Dependency> dependencies, boolean managed, org.apache.maven.model.building.ModelBuildingRequest request) {\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        java.lang.String prefix = (managed) ? \"dependencyManagement.dependencies.dependency.\" : \"dependencies.dependency.\";\n        for (org.apache.maven.model.Dependency d : dependencies) {\n            validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey());\n            validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey());\n            if (!managed) {\n                validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n                validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n            }\n            if (\"system\".equals(d.getScope())) {\n                java.lang.String systemPath = d.getSystemPath();\n                if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n                } else {\n                    java.io.File sysFile = new java.io.File(systemPath);\n                    if (!sysFile.isAbsolute()) {\n                        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n                    } else if (!sysFile.isFile()) {\n                        java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n                        systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n                        java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n                        if (systemPath.startsWith(jdkHome)) {\n                            msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n                        }\n                        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n                    }\n                }\n            } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n            }\n            if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n                validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n                if (!managed) {\n                    validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n                    validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n                }\n            }\n        }\n    }\n\n    private void validateRepositories(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Repository> repositories, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        java.util.Map<java.lang.String, org.apache.maven.model.Repository> index = new java.util.HashMap<java.lang.String, org.apache.maven.model.Repository>();\n        for (org.apache.maven.model.Repository repository : repositories) {\n            validateStringNotEmpty(prefix + \".id\", problems, Severity.ERROR, repository.getId());\n            validateStringNotEmpty(((prefix + \"[\") + repository.getId()) + \"].url\", problems, Severity.ERROR, repository.getUrl());\n            java.lang.String key = repository.getId();\n            org.apache.maven.model.Repository existing = index.get(key);\n            if (existing != null) {\n                org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn30, prefix + \".id\", null, ((((\"must be unique: \" + repository.getId()) + \" -> \") + existing.getUrl()) + \" vs \") + repository.getUrl());\n            } else {\n                index.put(key, repository);\n            }\n        }\n    }\n\n    private void validateRepository(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.Repository repository, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        if (repository != null) {\n            if (\"local\".equals(repository.getId())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \".id\", null, \"must not be 'local', this identifier is reserved.\");\n            }\n            if (\"legacy\".equals(repository.getLayout())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \".layout\", repository.getId(), \"uses the deprecated value 'legacy'.\");\n            }\n        }\n    }\n\n    private void validateResources(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Resource> resources, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        for (org.apache.maven.model.Resource resource : resources) {\n            validateStringNotEmpty(prefix + \".directory\", problems, Severity.ERROR, resource.getDirectory());\n            validateBoolean(prefix + \".filtering\", problems, errOn30, resource.getFiltering(), resource.getDirectory());\n        }\n    }\n\n    private boolean validateId(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, java.lang.String id) {\n        return validateId(fieldName, problems, id, null);\n    }\n\n    private boolean validateId(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, java.lang.String id, java.lang.String sourceHint) {\n        if (!validateStringNotEmpty(fieldName, problems, Severity.ERROR, id, sourceHint)) {\n            return false;\n        } else {\n            boolean match = id.matches(org.apache.maven.model.validation.DefaultModelValidator.ID_REGEX);\n            if (!match) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, fieldName, sourceHint, (\"with value '\" + id) + \"' does not match a valid id pattern.\");\n            }\n            return match;\n        }\n    }\n\n    private boolean validateStringNoExpression(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string) {\n        if (!hasExpression(string)) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, null, \"contains an expression but should be a constant.\");\n        return false;\n    }\n\n    private boolean hasExpression(java.lang.String value) {\n        return (value != null) && (value.indexOf(\"${\") >= 0);\n    }\n\n    private boolean validateStringNotEmpty(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string) {\n        return validateStringNotEmpty(fieldName, problems, severity, string, null);\n    }\n\n    private boolean validateStringNotEmpty(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string, java.lang.String sourceHint) {\n        if (!validateNotNull(fieldName, problems, severity, string, sourceHint)) {\n            return false;\n        }\n        if (string.length() > 0) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, sourceHint, \"is missing.\");\n        return false;\n    }\n\n    private boolean validateNotNull(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.Object object, java.lang.String sourceHint) {\n        if (object != null) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, sourceHint, \"is missing.\");\n        return false;\n    }\n\n    private boolean validateBoolean(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string, java.lang.String sourceHint) {\n        if ((string == null) || (string.length() <= 0)) {\n            return true;\n        }\n        if (\"true\".equalsIgnoreCase(string) || \"false\".equalsIgnoreCase(string)) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, sourceHint, (\"must be 'true' or 'false' but is '\" + string) + \"'.\");\n        return false;\n    }\n\n    private boolean validateEnum(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string, java.lang.String sourceHint, java.lang.String... validValues) {\n        if ((string == null) || (string.length() <= 0)) {\n            return true;\n        }\n        java.util.List<java.lang.String> values = java.util.Arrays.asList(validValues);\n        if (values.contains(string)) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, sourceHint, (((\"must be one of \" + values) + \" but is '\") + string) + \"'.\");\n        return false;\n    }\n\n    private boolean validateVersion(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string, java.lang.String sourceHint) {\n        if ((string == null) || (string.length() <= 0)) {\n            return true;\n        }\n        if (!hasExpression(string)) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, sourceHint, (\"must be a valid version but is '\" + string) + \"'.\");\n        return false;\n    }\n\n    private boolean validatePluginVersion(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, java.lang.String string, java.lang.String sourceHint, org.apache.maven.model.building.ModelBuildingRequest request) {\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        if (string == null) {\n            return true;\n        }\n        if ((((string.length() > 0) && (!hasExpression(string))) && (!\"RELEASE\".equals(string))) && (!\"LATEST\".equals(string))) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn30, fieldName, sourceHint, (\"must be a valid version but is '\" + string) + \"'.\");\n        return false;\n    }\n\n    private static void addViolation(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String fieldName, java.lang.String sourceHint, java.lang.String message) {\n        java.lang.StringBuilder buffer = new java.lang.StringBuilder(256);\n        buffer.append('\\'').append(fieldName).append('\\'');\n        if (sourceHint != null) {\n            buffer.append(\" for \").append(sourceHint);\n        }\n        buffer.append(' ').append(message);\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, buffer.toString());\n    }\n\n    private static void addViolation(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String message) {\n        problems.add(severity, message, null);\n    }\n\n    private static boolean equals(java.lang.String s1, java.lang.String s2) {\n        return org.codehaus.plexus.util.StringUtils.clean(s1).equals(org.codehaus.plexus.util.StringUtils.clean(s2));\n    }\n\n    private static org.apache.maven.model.building.ModelProblem.Severity getSeverity(org.apache.maven.model.building.ModelBuildingRequest request, int errorThreshold) {\n        return org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request.getValidationLevel(), errorThreshold);\n    }\n\n    private static org.apache.maven.model.building.ModelProblem.Severity getSeverity(int validationLevel, int errorThreshold) {\n        if (validationLevel < errorThreshold) {\n            return org.apache.maven.model.building.ModelProblem.Severity.WARNING;\n        } else {\n            return org.apache.maven.model.building.ModelProblem.Severity.ERROR;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "boolean management",
            "dst_parent": "private void validateEffectiveDependency(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.Dependency d, boolean management, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n    validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey());\n    validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey());\n    if (!management) {\n        validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n        validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n    }\n    if (\"system\".equals(d.getScope())) {\n        java.lang.String systemPath = d.getSystemPath();\n        if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n        } else {\n            java.io.File sysFile = new java.io.File(systemPath);\n            if (!sysFile.isAbsolute()) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n            } else if (!sysFile.isFile()) {\n                java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n                systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n                java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n                if (systemPath.startsWith(jdkHome)) {\n                    msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n                }\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n            }\n        }\n    } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n    }\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "UPD",
            "src": "boolean managed",
            "src_parent": "private void validateEffectiveDependencies(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Dependency> dependencies, boolean managed, org.apache.maven.model.building.ModelBuildingRequest request) {\n    org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n    java.lang.String prefix = (managed) ? \"dependencyManagement.dependencies.dependency.\" : \"dependencies.dependency.\";\n    for (org.apache.maven.model.Dependency d : dependencies) {\n        validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey());\n        validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey());\n        if (!managed) {\n            validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n            validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n        }\n        if (\"system\".equals(d.getScope())) {\n            java.lang.String systemPath = d.getSystemPath();\n            if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n            } else {\n                java.io.File sysFile = new java.io.File(systemPath);\n                if (!sysFile.isAbsolute()) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n                } else if (!sysFile.isFile()) {\n                    java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n                    systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n                    java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n                    if (systemPath.startsWith(jdkHome)) {\n                        msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n                    }\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n                }\n            }\n        } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n        }\n        if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n            validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n            if (!managed) {\n                validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n                validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n            }\n        }\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "management",
            "dst_parent": "!management",
            "dst_parent_type": "UnaryOperator",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "managed",
            "src_parent": "!managed",
            "src_parent_type": "UnaryOperator",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "validateEffectivePluginDependencies(problems, p, request)",
            "dst_parent": "{\n    validateStringNotEmpty(\"build.plugins.plugin.artifactId\", problems, Severity.ERROR, p.getArtifactId());\n    validateStringNotEmpty(\"build.plugins.plugin.groupId\", problems, Severity.ERROR, p.getGroupId());\n    validatePluginVersion(\"build.plugins.plugin.version\", problems, p.getVersion(), p.getKey(), request);\n    validateBoolean(\"build.plugins.plugin.inherited\", problems, errOn30, p.getInherited(), p.getKey());\n    validateBoolean(\"build.plugins.plugin.extensions\", problems, errOn30, p.getExtensions(), p.getKey());\n    validateEffectivePluginDependencies(problems, p, request);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "validateEnum((\"build.plugins.plugin[\" + p.getKey()) + \"].dependencies.dependency.scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\")",
            "src_parent": "{\n    validateEnum((\"build.plugins.plugin[\" + p.getKey()) + \"].dependencies.dependency.scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\");\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "management",
            "dst_parent": "!management",
            "dst_parent_type": "UnaryOperator",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "managed",
            "src_parent": "!managed",
            "src_parent_type": "UnaryOperator",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "problems",
            "dst_parent": "validateEffectivePluginDependencies(problems, p, request)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "p",
            "src_parent": "p.getKey()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "p",
            "dst_parent": "validateEffectivePluginDependencies(problems, p, request)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "problems",
            "src_parent": "validateEnum((\"build.plugins.plugin[\" + p.getKey()) + \"].dependencies.dependency.scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\")",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "request",
            "dst_parent": "validateEffectivePluginDependencies(problems, p, request)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "errOn30",
            "src_parent": "validateEnum((\"build.plugins.plugin[\" + p.getKey()) + \"].dependencies.dependency.scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\")",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "for (org.apache.maven.model.Dependency d : p.getDependencies()) {\n    validateEnum((\"build.plugins.plugin[\" + p.getKey()) + \"].dependencies.dependency.scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\");\n}",
            "src_parent": "{\n    validateStringNotEmpty(\"build.plugins.plugin.artifactId\", problems, Severity.ERROR, p.getArtifactId());\n    validateStringNotEmpty(\"build.plugins.plugin.groupId\", problems, Severity.ERROR, p.getGroupId());\n    validatePluginVersion(\"build.plugins.plugin.version\", problems, p.getVersion(), p.getKey(), request);\n    validateBoolean(\"build.plugins.plugin.inherited\", problems, errOn30, p.getInherited(), p.getKey());\n    validateBoolean(\"build.plugins.plugin.extensions\", problems, errOn30, p.getExtensions(), p.getKey());\n    for (org.apache.maven.model.Dependency d : p.getDependencies()) {\n        validateEnum((\"build.plugins.plugin[\" + p.getKey()) + \"].dependencies.dependency.scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\");\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "ForEach"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private void validateEffectiveDependencies(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Dependency> dependencies, boolean management, org.apache.maven.model.building.ModelBuildingRequest request) {\n    org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n    java.lang.String prefix = (management) ? \"dependencyManagement.dependencies.dependency.\" : \"dependencies.dependency.\";\n    for (org.apache.maven.model.Dependency d : dependencies) {\n        validateEffectiveDependency(problems, d, management, prefix, request);\n        if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n            validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n            if (!management) {\n                validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n                validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n            }\n        }\n    }\n}",
            "src_parent": "@org.codehaus.plexus.component.annotations.Component(role = org.apache.maven.model.validation.ModelValidator.class)\npublic class DefaultModelValidator implements org.apache.maven.model.validation.ModelValidator {\n    private static final java.lang.String ID_REGEX = \"[A-Za-z0-9_\\\\-.]+\";\n\n    public void validateRawModel(org.apache.maven.model.Model model, org.apache.maven.model.building.ModelBuildingRequest request, org.apache.maven.model.building.ModelProblemCollector problems) {\n        org.apache.maven.model.Parent parent = model.getParent();\n        if (parent != null) {\n            validateStringNotEmpty(\"parent.groupId\", problems, Severity.FATAL, parent.getGroupId());\n            validateStringNotEmpty(\"parent.artifactId\", problems, Severity.FATAL, parent.getArtifactId());\n            validateStringNotEmpty(\"parent.version\", problems, Severity.FATAL, parent.getVersion());\n            if (org.apache.maven.model.validation.DefaultModelValidator.equals(parent.getGroupId(), model.getGroupId()) && org.apache.maven.model.validation.DefaultModelValidator.equals(parent.getArtifactId(), model.getArtifactId())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.FATAL, \"parent.artifactId\", null, \"must be changed\" + \", the parent element cannot have the same groupId:artifactId as the project.\");\n            }\n        }\n        if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n            org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n            validateEnum(\"modelVersion\", problems, Severity.ERROR, model.getModelVersion(), null, \"4.0.0\");\n            validateStringNoExpression(\"groupId\", problems, Severity.WARNING, model.getGroupId());\n            validateStringNoExpression(\"artifactId\", problems, Severity.WARNING, model.getArtifactId());\n            validateStringNoExpression(\"version\", problems, Severity.WARNING, model.getVersion());\n            validateRawDependencies(problems, model.getDependencies(), \"dependencies.dependency\", request);\n            if (model.getDependencyManagement() != null) {\n                validateRawDependencies(problems, model.getDependencyManagement().getDependencies(), \"dependencyManagement.dependencies.dependency\", request);\n            }\n            validateRepositories(problems, model.getRepositories(), \"repositories.repository\", request);\n            validateRepositories(problems, model.getPluginRepositories(), \"pluginRepositories.pluginRepository\", request);\n            org.apache.maven.model.Build build = model.getBuild();\n            if (build != null) {\n                validateRawPlugins(problems, build.getPlugins(), false, request);\n                org.apache.maven.model.PluginManagement mngt = build.getPluginManagement();\n                if (mngt != null) {\n                    validateRawPlugins(problems, mngt.getPlugins(), true, request);\n                }\n            }\n            java.util.Set<java.lang.String> profileIds = new java.util.HashSet<java.lang.String>();\n            for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n                if (!profileIds.add(profile.getId())) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn30, \"profiles.profile.id\", null, \"must be unique but found duplicate profile with id \" + profile.getId());\n                }\n                validateRawDependencies(problems, profile.getDependencies(), (\"profiles.profile[\" + profile.getId()) + \"].dependencies.dependency\", request);\n                if (profile.getDependencyManagement() != null) {\n                    validateRawDependencies(problems, profile.getDependencyManagement().getDependencies(), (\"profiles.profile[\" + profile.getId()) + \"].dependencyManagement.dependencies.dependency\", request);\n                }\n                validateRepositories(problems, profile.getRepositories(), (\"profiles.profile[\" + profile.getId()) + \"].repositories.repository\", request);\n                validateRepositories(problems, profile.getPluginRepositories(), (\"profiles.profile[\" + profile.getId()) + \"].pluginRepositories.pluginRepository\", request);\n            }\n        }\n    }\n\n    private void validateRawPlugins(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Plugin> plugins, boolean managed, org.apache.maven.model.building.ModelBuildingRequest request) {\n        org.apache.maven.model.building.ModelProblem.Severity errOn31 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);\n        java.lang.String prefix = (managed ? \"build.pluginManagement.\" : \"build.\") + \"plugins.plugin.\";\n        java.util.Map<java.lang.String, org.apache.maven.model.Plugin> index = new java.util.HashMap<java.lang.String, org.apache.maven.model.Plugin>();\n        for (org.apache.maven.model.Plugin plugin : plugins) {\n            java.lang.String key = plugin.getKey();\n            org.apache.maven.model.Plugin existing = index.get(key);\n            if (existing != null) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn31, prefix + \"(groupId:artifactId)\", null, \"must be unique but found duplicate declaration of plugin \" + key);\n            } else {\n                index.put(key, plugin);\n            }\n            java.util.Set<java.lang.String> executionIds = new java.util.HashSet<java.lang.String>();\n            for (org.apache.maven.model.PluginExecution exec : plugin.getExecutions()) {\n                if (!executionIds.add(exec.getId())) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, (\"build.plugins.plugin[\" + plugin.getKey()) + \"].executions.execution.id\", null, \"must be unique but found duplicate execution with id \" + exec.getId());\n                }\n            }\n        }\n    }\n\n    public void validateEffectiveModel(org.apache.maven.model.Model model, org.apache.maven.model.building.ModelBuildingRequest request, org.apache.maven.model.building.ModelProblemCollector problems) {\n        validateStringNotEmpty(\"modelVersion\", problems, Severity.ERROR, model.getModelVersion());\n        validateId(\"groupId\", problems, model.getGroupId());\n        validateId(\"artifactId\", problems, model.getArtifactId());\n        validateStringNotEmpty(\"packaging\", problems, Severity.ERROR, model.getPackaging());\n        if (!model.getModules().isEmpty()) {\n            if (!\"pom\".equals(model.getPackaging())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, \"packaging\", null, ((\"with value '\" + model.getPackaging()) + \"' is invalid. Aggregator projects \") + \"require 'pom' as packaging.\");\n            }\n            for (int i = 0, n = model.getModules().size(); i < n; i++) {\n                java.lang.String module = model.getModules().get(i);\n                if (org.codehaus.plexus.util.StringUtils.isBlank(module)) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, (\"modules.module[\" + i) + \"]\", null, \"has been specified without a path to the project directory.\");\n                }\n            }\n        }\n        validateStringNotEmpty(\"version\", problems, Severity.ERROR, model.getVersion());\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        validateEffectiveDependencies(problems, model.getDependencies(), false, request);\n        org.apache.maven.model.DependencyManagement mgmt = model.getDependencyManagement();\n        if (mgmt != null) {\n            validateEffectiveDependencies(problems, mgmt.getDependencies(), true, request);\n        }\n        if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n            java.util.Set<java.lang.String> modules = new java.util.HashSet<java.lang.String>();\n            for (int i = 0, n = model.getModules().size(); i < n; i++) {\n                java.lang.String module = model.getModules().get(i);\n                if (!modules.add(module)) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, (\"modules.module[\" + i) + \"]\", null, \"specifies duplicate child module \" + module);\n                }\n            }\n            org.apache.maven.model.building.ModelProblem.Severity errOn31 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);\n            org.apache.maven.model.Build build = model.getBuild();\n            if (build != null) {\n                for (org.apache.maven.model.Plugin p : build.getPlugins()) {\n                    validateStringNotEmpty(\"build.plugins.plugin.artifactId\", problems, Severity.ERROR, p.getArtifactId());\n                    validateStringNotEmpty(\"build.plugins.plugin.groupId\", problems, Severity.ERROR, p.getGroupId());\n                    validatePluginVersion(\"build.plugins.plugin.version\", problems, p.getVersion(), p.getKey(), request);\n                    validateBoolean(\"build.plugins.plugin.inherited\", problems, errOn30, p.getInherited(), p.getKey());\n                    validateBoolean(\"build.plugins.plugin.extensions\", problems, errOn30, p.getExtensions(), p.getKey());\n                    validateEffectivePluginDependencies(problems, p, request);\n                }\n                validateResources(problems, build.getResources(), \"build.resources.resource\", request);\n                validateResources(problems, build.getTestResources(), \"build.testResources.testResource\", request);\n            }\n            org.apache.maven.model.Reporting reporting = model.getReporting();\n            if (reporting != null) {\n                for (org.apache.maven.model.ReportPlugin p : reporting.getPlugins()) {\n                    validateStringNotEmpty(\"reporting.plugins.plugin.artifactId\", problems, Severity.ERROR, p.getArtifactId());\n                    validateStringNotEmpty(\"reporting.plugins.plugin.groupId\", problems, Severity.ERROR, p.getGroupId());\n                    validateStringNotEmpty(\"reporting.plugins.plugin.version\", problems, errOn31, p.getVersion(), p.getKey());\n                }\n            }\n            for (org.apache.maven.model.Repository repository : model.getRepositories()) {\n                validateRepository(problems, repository, \"repositories.repository\", request);\n            }\n            for (org.apache.maven.model.Repository repository : model.getPluginRepositories()) {\n                validateRepository(problems, repository, \"pluginRepositories.pluginRepository\", request);\n            }\n            org.apache.maven.model.DistributionManagement distMgmt = model.getDistributionManagement();\n            if (distMgmt != null) {\n                if (distMgmt.getStatus() != null) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, \"distributionManagement.status\", null, \"must not be specified.\");\n                }\n                validateRepository(problems, distMgmt.getRepository(), \"distributionManagement.repository\", request);\n                validateRepository(problems, distMgmt.getSnapshotRepository(), \"distributionManagement.snapshotRepository\", request);\n            }\n        }\n    }\n\n    private void validateRawDependencies(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Dependency> dependencies, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        org.apache.maven.model.building.ModelProblem.Severity errOn31 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);\n        java.util.Map<java.lang.String, org.apache.maven.model.Dependency> index = new java.util.HashMap<java.lang.String, org.apache.maven.model.Dependency>();\n        for (org.apache.maven.model.Dependency dependency : dependencies) {\n            java.lang.String key = dependency.getManagementKey();\n            if ((\"pom\".equals(dependency.getType()) && \"import\".equals(dependency.getScope())) && org.codehaus.plexus.util.StringUtils.isNotEmpty(dependency.getClassifier())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn30, prefix + \".classifier\", key, \"must be empty, imported POM cannot have a classifier.\");\n            } else if (\"system\".equals(dependency.getScope())) {\n                java.lang.String sysPath = dependency.getSystemPath();\n                if (org.codehaus.plexus.util.StringUtils.isNotEmpty(sysPath) && (!hasExpression(sysPath))) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \".systemPath\", key, \"should use a variable instead of a hard-coded path \" + sysPath);\n                }\n            }\n            org.apache.maven.model.Dependency existing = index.get(key);\n            if (existing != null) {\n                java.lang.String msg;\n                if (org.apache.maven.model.validation.DefaultModelValidator.equals(existing.getVersion(), dependency.getVersion())) {\n                    msg = \"duplicate declaration of version \" + org.codehaus.plexus.util.StringUtils.defaultString(dependency.getVersion(), \"(?)\");\n                } else {\n                    msg = ((\"version \" + org.codehaus.plexus.util.StringUtils.defaultString(existing.getVersion(), \"(?)\")) + \" vs \") + org.codehaus.plexus.util.StringUtils.defaultString(dependency.getVersion(), \"(?)\");\n                }\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn31, prefix + \".(groupId:artifactId:type:classifier)\", null, ((\"must be unique: \" + key) + \" -> \") + msg);\n            } else {\n                index.put(key, dependency);\n            }\n        }\n    }\n\n    private void validateEffectiveDependencies(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Dependency> dependencies, boolean management, org.apache.maven.model.building.ModelBuildingRequest request) {\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        java.lang.String prefix = (management) ? \"dependencyManagement.dependencies.dependency.\" : \"dependencies.dependency.\";\n        for (org.apache.maven.model.Dependency d : dependencies) {\n            validateEffectiveDependency(problems, d, management, prefix, request);\n            if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n                validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n                if (!management) {\n                    validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n                    validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n                }\n            }\n        }\n    }\n\n    private void validateEffectivePluginDependencies(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.Plugin plugin, org.apache.maven.model.building.ModelBuildingRequest request) {\n        java.util.List<org.apache.maven.model.Dependency> dependencies = plugin.getDependencies();\n        if (!dependencies.isEmpty()) {\n            java.lang.String prefix = (\"build.plugins.plugin[\" + plugin.getKey()) + \"].dependencies.dependency.\";\n            org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n            for (org.apache.maven.model.Dependency d : dependencies) {\n                validateEffectiveDependency(problems, d, false, prefix, request);\n                validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n                validateEnum(prefix + \"scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\");\n            }\n        }\n    }\n\n    private void validateEffectiveDependency(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.Dependency d, boolean management, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey());\n        validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey());\n        if (!management) {\n            validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n            validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n        }\n        if (\"system\".equals(d.getScope())) {\n            java.lang.String systemPath = d.getSystemPath();\n            if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n            } else {\n                java.io.File sysFile = new java.io.File(systemPath);\n                if (!sysFile.isAbsolute()) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n                } else if (!sysFile.isFile()) {\n                    java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n                    systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n                    java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n                    if (systemPath.startsWith(jdkHome)) {\n                        msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n                    }\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n                }\n            }\n        } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n        }\n    }\n\n    private void validateRepositories(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Repository> repositories, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        java.util.Map<java.lang.String, org.apache.maven.model.Repository> index = new java.util.HashMap<java.lang.String, org.apache.maven.model.Repository>();\n        for (org.apache.maven.model.Repository repository : repositories) {\n            validateStringNotEmpty(prefix + \".id\", problems, Severity.ERROR, repository.getId());\n            validateStringNotEmpty(((prefix + \"[\") + repository.getId()) + \"].url\", problems, Severity.ERROR, repository.getUrl());\n            java.lang.String key = repository.getId();\n            org.apache.maven.model.Repository existing = index.get(key);\n            if (existing != null) {\n                org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn30, prefix + \".id\", null, ((((\"must be unique: \" + repository.getId()) + \" -> \") + existing.getUrl()) + \" vs \") + repository.getUrl());\n            } else {\n                index.put(key, repository);\n            }\n        }\n    }\n\n    private void validateRepository(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.Repository repository, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        if (repository != null) {\n            if (\"local\".equals(repository.getId())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \".id\", null, \"must not be 'local', this identifier is reserved.\");\n            }\n            if (\"legacy\".equals(repository.getLayout())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \".layout\", repository.getId(), \"uses the deprecated value 'legacy'.\");\n            }\n        }\n    }\n\n    private void validateResources(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Resource> resources, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        for (org.apache.maven.model.Resource resource : resources) {\n            validateStringNotEmpty(prefix + \".directory\", problems, Severity.ERROR, resource.getDirectory());\n            validateBoolean(prefix + \".filtering\", problems, errOn30, resource.getFiltering(), resource.getDirectory());\n        }\n    }\n\n    private boolean validateId(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, java.lang.String id) {\n        return validateId(fieldName, problems, id, null);\n    }\n\n    private boolean validateId(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, java.lang.String id, java.lang.String sourceHint) {\n        if (!validateStringNotEmpty(fieldName, problems, Severity.ERROR, id, sourceHint)) {\n            return false;\n        } else {\n            boolean match = id.matches(org.apache.maven.model.validation.DefaultModelValidator.ID_REGEX);\n            if (!match) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, fieldName, sourceHint, (\"with value '\" + id) + \"' does not match a valid id pattern.\");\n            }\n            return match;\n        }\n    }\n\n    private boolean validateStringNoExpression(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string) {\n        if (!hasExpression(string)) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, null, \"contains an expression but should be a constant.\");\n        return false;\n    }\n\n    private boolean hasExpression(java.lang.String value) {\n        return (value != null) && (value.indexOf(\"${\") >= 0);\n    }\n\n    private boolean validateStringNotEmpty(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string) {\n        return validateStringNotEmpty(fieldName, problems, severity, string, null);\n    }\n\n    private boolean validateStringNotEmpty(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string, java.lang.String sourceHint) {\n        if (!validateNotNull(fieldName, problems, severity, string, sourceHint)) {\n            return false;\n        }\n        if (string.length() > 0) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, sourceHint, \"is missing.\");\n        return false;\n    }\n\n    private boolean validateNotNull(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.Object object, java.lang.String sourceHint) {\n        if (object != null) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, sourceHint, \"is missing.\");\n        return false;\n    }\n\n    private boolean validateBoolean(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string, java.lang.String sourceHint) {\n        if ((string == null) || (string.length() <= 0)) {\n            return true;\n        }\n        if (\"true\".equalsIgnoreCase(string) || \"false\".equalsIgnoreCase(string)) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, sourceHint, (\"must be 'true' or 'false' but is '\" + string) + \"'.\");\n        return false;\n    }\n\n    private boolean validateEnum(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string, java.lang.String sourceHint, java.lang.String... validValues) {\n        if ((string == null) || (string.length() <= 0)) {\n            return true;\n        }\n        java.util.List<java.lang.String> values = java.util.Arrays.asList(validValues);\n        if (values.contains(string)) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, sourceHint, (((\"must be one of \" + values) + \" but is '\") + string) + \"'.\");\n        return false;\n    }\n\n    private boolean validateVersion(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string, java.lang.String sourceHint) {\n        if ((string == null) || (string.length() <= 0)) {\n            return true;\n        }\n        if (!hasExpression(string)) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, sourceHint, (\"must be a valid version but is '\" + string) + \"'.\");\n        return false;\n    }\n\n    private boolean validatePluginVersion(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, java.lang.String string, java.lang.String sourceHint, org.apache.maven.model.building.ModelBuildingRequest request) {\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        if (string == null) {\n            return true;\n        }\n        if ((((string.length() > 0) && (!hasExpression(string))) && (!\"RELEASE\".equals(string))) && (!\"LATEST\".equals(string))) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn30, fieldName, sourceHint, (\"must be a valid version but is '\" + string) + \"'.\");\n        return false;\n    }\n\n    private static void addViolation(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String fieldName, java.lang.String sourceHint, java.lang.String message) {\n        java.lang.StringBuilder buffer = new java.lang.StringBuilder(256);\n        buffer.append('\\'').append(fieldName).append('\\'');\n        if (sourceHint != null) {\n            buffer.append(\" for \").append(sourceHint);\n        }\n        buffer.append(' ').append(message);\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, buffer.toString());\n    }\n\n    private static void addViolation(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String message) {\n        problems.add(severity, message, null);\n    }\n\n    private static boolean equals(java.lang.String s1, java.lang.String s2) {\n        return org.codehaus.plexus.util.StringUtils.clean(s1).equals(org.codehaus.plexus.util.StringUtils.clean(s2));\n    }\n\n    private static org.apache.maven.model.building.ModelProblem.Severity getSeverity(org.apache.maven.model.building.ModelBuildingRequest request, int errorThreshold) {\n        return org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request.getValidationLevel(), errorThreshold);\n    }\n\n    private static org.apache.maven.model.building.ModelProblem.Severity getSeverity(int validationLevel, int errorThreshold) {\n        if (validationLevel < errorThreshold) {\n            return org.apache.maven.model.building.ModelProblem.Severity.WARNING;\n        } else {\n            return org.apache.maven.model.building.ModelProblem.Severity.ERROR;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private void validateEffectivePluginDependencies(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.Plugin plugin, org.apache.maven.model.building.ModelBuildingRequest request) {\n    java.util.List<org.apache.maven.model.Dependency> dependencies = plugin.getDependencies();\n    if (!dependencies.isEmpty()) {\n        java.lang.String prefix = (\"build.plugins.plugin[\" + plugin.getKey()) + \"].dependencies.dependency.\";\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        for (org.apache.maven.model.Dependency d : dependencies) {\n            validateEffectiveDependency(problems, d, false, prefix, request);\n            validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n            validateEnum(prefix + \"scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\");\n        }\n    }\n}",
            "src_parent": "@org.codehaus.plexus.component.annotations.Component(role = org.apache.maven.model.validation.ModelValidator.class)\npublic class DefaultModelValidator implements org.apache.maven.model.validation.ModelValidator {\n    private static final java.lang.String ID_REGEX = \"[A-Za-z0-9_\\\\-.]+\";\n\n    public void validateRawModel(org.apache.maven.model.Model model, org.apache.maven.model.building.ModelBuildingRequest request, org.apache.maven.model.building.ModelProblemCollector problems) {\n        org.apache.maven.model.Parent parent = model.getParent();\n        if (parent != null) {\n            validateStringNotEmpty(\"parent.groupId\", problems, Severity.FATAL, parent.getGroupId());\n            validateStringNotEmpty(\"parent.artifactId\", problems, Severity.FATAL, parent.getArtifactId());\n            validateStringNotEmpty(\"parent.version\", problems, Severity.FATAL, parent.getVersion());\n            if (org.apache.maven.model.validation.DefaultModelValidator.equals(parent.getGroupId(), model.getGroupId()) && org.apache.maven.model.validation.DefaultModelValidator.equals(parent.getArtifactId(), model.getArtifactId())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.FATAL, \"parent.artifactId\", null, \"must be changed\" + \", the parent element cannot have the same groupId:artifactId as the project.\");\n            }\n        }\n        if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n            org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n            validateEnum(\"modelVersion\", problems, Severity.ERROR, model.getModelVersion(), null, \"4.0.0\");\n            validateStringNoExpression(\"groupId\", problems, Severity.WARNING, model.getGroupId());\n            validateStringNoExpression(\"artifactId\", problems, Severity.WARNING, model.getArtifactId());\n            validateStringNoExpression(\"version\", problems, Severity.WARNING, model.getVersion());\n            validateRawDependencies(problems, model.getDependencies(), \"dependencies.dependency\", request);\n            if (model.getDependencyManagement() != null) {\n                validateRawDependencies(problems, model.getDependencyManagement().getDependencies(), \"dependencyManagement.dependencies.dependency\", request);\n            }\n            validateRepositories(problems, model.getRepositories(), \"repositories.repository\", request);\n            validateRepositories(problems, model.getPluginRepositories(), \"pluginRepositories.pluginRepository\", request);\n            org.apache.maven.model.Build build = model.getBuild();\n            if (build != null) {\n                validateRawPlugins(problems, build.getPlugins(), false, request);\n                org.apache.maven.model.PluginManagement mngt = build.getPluginManagement();\n                if (mngt != null) {\n                    validateRawPlugins(problems, mngt.getPlugins(), true, request);\n                }\n            }\n            java.util.Set<java.lang.String> profileIds = new java.util.HashSet<java.lang.String>();\n            for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n                if (!profileIds.add(profile.getId())) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn30, \"profiles.profile.id\", null, \"must be unique but found duplicate profile with id \" + profile.getId());\n                }\n                validateRawDependencies(problems, profile.getDependencies(), (\"profiles.profile[\" + profile.getId()) + \"].dependencies.dependency\", request);\n                if (profile.getDependencyManagement() != null) {\n                    validateRawDependencies(problems, profile.getDependencyManagement().getDependencies(), (\"profiles.profile[\" + profile.getId()) + \"].dependencyManagement.dependencies.dependency\", request);\n                }\n                validateRepositories(problems, profile.getRepositories(), (\"profiles.profile[\" + profile.getId()) + \"].repositories.repository\", request);\n                validateRepositories(problems, profile.getPluginRepositories(), (\"profiles.profile[\" + profile.getId()) + \"].pluginRepositories.pluginRepository\", request);\n            }\n        }\n    }\n\n    private void validateRawPlugins(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Plugin> plugins, boolean managed, org.apache.maven.model.building.ModelBuildingRequest request) {\n        org.apache.maven.model.building.ModelProblem.Severity errOn31 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);\n        java.lang.String prefix = (managed ? \"build.pluginManagement.\" : \"build.\") + \"plugins.plugin.\";\n        java.util.Map<java.lang.String, org.apache.maven.model.Plugin> index = new java.util.HashMap<java.lang.String, org.apache.maven.model.Plugin>();\n        for (org.apache.maven.model.Plugin plugin : plugins) {\n            java.lang.String key = plugin.getKey();\n            org.apache.maven.model.Plugin existing = index.get(key);\n            if (existing != null) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn31, prefix + \"(groupId:artifactId)\", null, \"must be unique but found duplicate declaration of plugin \" + key);\n            } else {\n                index.put(key, plugin);\n            }\n            java.util.Set<java.lang.String> executionIds = new java.util.HashSet<java.lang.String>();\n            for (org.apache.maven.model.PluginExecution exec : plugin.getExecutions()) {\n                if (!executionIds.add(exec.getId())) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, (\"build.plugins.plugin[\" + plugin.getKey()) + \"].executions.execution.id\", null, \"must be unique but found duplicate execution with id \" + exec.getId());\n                }\n            }\n        }\n    }\n\n    public void validateEffectiveModel(org.apache.maven.model.Model model, org.apache.maven.model.building.ModelBuildingRequest request, org.apache.maven.model.building.ModelProblemCollector problems) {\n        validateStringNotEmpty(\"modelVersion\", problems, Severity.ERROR, model.getModelVersion());\n        validateId(\"groupId\", problems, model.getGroupId());\n        validateId(\"artifactId\", problems, model.getArtifactId());\n        validateStringNotEmpty(\"packaging\", problems, Severity.ERROR, model.getPackaging());\n        if (!model.getModules().isEmpty()) {\n            if (!\"pom\".equals(model.getPackaging())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, \"packaging\", null, ((\"with value '\" + model.getPackaging()) + \"' is invalid. Aggregator projects \") + \"require 'pom' as packaging.\");\n            }\n            for (int i = 0, n = model.getModules().size(); i < n; i++) {\n                java.lang.String module = model.getModules().get(i);\n                if (org.codehaus.plexus.util.StringUtils.isBlank(module)) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, (\"modules.module[\" + i) + \"]\", null, \"has been specified without a path to the project directory.\");\n                }\n            }\n        }\n        validateStringNotEmpty(\"version\", problems, Severity.ERROR, model.getVersion());\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        validateEffectiveDependencies(problems, model.getDependencies(), false, request);\n        org.apache.maven.model.DependencyManagement mgmt = model.getDependencyManagement();\n        if (mgmt != null) {\n            validateEffectiveDependencies(problems, mgmt.getDependencies(), true, request);\n        }\n        if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n            java.util.Set<java.lang.String> modules = new java.util.HashSet<java.lang.String>();\n            for (int i = 0, n = model.getModules().size(); i < n; i++) {\n                java.lang.String module = model.getModules().get(i);\n                if (!modules.add(module)) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, (\"modules.module[\" + i) + \"]\", null, \"specifies duplicate child module \" + module);\n                }\n            }\n            org.apache.maven.model.building.ModelProblem.Severity errOn31 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);\n            org.apache.maven.model.Build build = model.getBuild();\n            if (build != null) {\n                for (org.apache.maven.model.Plugin p : build.getPlugins()) {\n                    validateStringNotEmpty(\"build.plugins.plugin.artifactId\", problems, Severity.ERROR, p.getArtifactId());\n                    validateStringNotEmpty(\"build.plugins.plugin.groupId\", problems, Severity.ERROR, p.getGroupId());\n                    validatePluginVersion(\"build.plugins.plugin.version\", problems, p.getVersion(), p.getKey(), request);\n                    validateBoolean(\"build.plugins.plugin.inherited\", problems, errOn30, p.getInherited(), p.getKey());\n                    validateBoolean(\"build.plugins.plugin.extensions\", problems, errOn30, p.getExtensions(), p.getKey());\n                    validateEffectivePluginDependencies(problems, p, request);\n                }\n                validateResources(problems, build.getResources(), \"build.resources.resource\", request);\n                validateResources(problems, build.getTestResources(), \"build.testResources.testResource\", request);\n            }\n            org.apache.maven.model.Reporting reporting = model.getReporting();\n            if (reporting != null) {\n                for (org.apache.maven.model.ReportPlugin p : reporting.getPlugins()) {\n                    validateStringNotEmpty(\"reporting.plugins.plugin.artifactId\", problems, Severity.ERROR, p.getArtifactId());\n                    validateStringNotEmpty(\"reporting.plugins.plugin.groupId\", problems, Severity.ERROR, p.getGroupId());\n                    validateStringNotEmpty(\"reporting.plugins.plugin.version\", problems, errOn31, p.getVersion(), p.getKey());\n                }\n            }\n            for (org.apache.maven.model.Repository repository : model.getRepositories()) {\n                validateRepository(problems, repository, \"repositories.repository\", request);\n            }\n            for (org.apache.maven.model.Repository repository : model.getPluginRepositories()) {\n                validateRepository(problems, repository, \"pluginRepositories.pluginRepository\", request);\n            }\n            org.apache.maven.model.DistributionManagement distMgmt = model.getDistributionManagement();\n            if (distMgmt != null) {\n                if (distMgmt.getStatus() != null) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, \"distributionManagement.status\", null, \"must not be specified.\");\n                }\n                validateRepository(problems, distMgmt.getRepository(), \"distributionManagement.repository\", request);\n                validateRepository(problems, distMgmt.getSnapshotRepository(), \"distributionManagement.snapshotRepository\", request);\n            }\n        }\n    }\n\n    private void validateRawDependencies(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Dependency> dependencies, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        org.apache.maven.model.building.ModelProblem.Severity errOn31 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);\n        java.util.Map<java.lang.String, org.apache.maven.model.Dependency> index = new java.util.HashMap<java.lang.String, org.apache.maven.model.Dependency>();\n        for (org.apache.maven.model.Dependency dependency : dependencies) {\n            java.lang.String key = dependency.getManagementKey();\n            if ((\"pom\".equals(dependency.getType()) && \"import\".equals(dependency.getScope())) && org.codehaus.plexus.util.StringUtils.isNotEmpty(dependency.getClassifier())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn30, prefix + \".classifier\", key, \"must be empty, imported POM cannot have a classifier.\");\n            } else if (\"system\".equals(dependency.getScope())) {\n                java.lang.String sysPath = dependency.getSystemPath();\n                if (org.codehaus.plexus.util.StringUtils.isNotEmpty(sysPath) && (!hasExpression(sysPath))) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \".systemPath\", key, \"should use a variable instead of a hard-coded path \" + sysPath);\n                }\n            }\n            org.apache.maven.model.Dependency existing = index.get(key);\n            if (existing != null) {\n                java.lang.String msg;\n                if (org.apache.maven.model.validation.DefaultModelValidator.equals(existing.getVersion(), dependency.getVersion())) {\n                    msg = \"duplicate declaration of version \" + org.codehaus.plexus.util.StringUtils.defaultString(dependency.getVersion(), \"(?)\");\n                } else {\n                    msg = ((\"version \" + org.codehaus.plexus.util.StringUtils.defaultString(existing.getVersion(), \"(?)\")) + \" vs \") + org.codehaus.plexus.util.StringUtils.defaultString(dependency.getVersion(), \"(?)\");\n                }\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn31, prefix + \".(groupId:artifactId:type:classifier)\", null, ((\"must be unique: \" + key) + \" -> \") + msg);\n            } else {\n                index.put(key, dependency);\n            }\n        }\n    }\n\n    private void validateEffectiveDependencies(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Dependency> dependencies, boolean management, org.apache.maven.model.building.ModelBuildingRequest request) {\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        java.lang.String prefix = (management) ? \"dependencyManagement.dependencies.dependency.\" : \"dependencies.dependency.\";\n        for (org.apache.maven.model.Dependency d : dependencies) {\n            validateEffectiveDependency(problems, d, management, prefix, request);\n            if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n                validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n                if (!management) {\n                    validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n                    validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n                }\n            }\n        }\n    }\n\n    private void validateEffectivePluginDependencies(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.Plugin plugin, org.apache.maven.model.building.ModelBuildingRequest request) {\n        java.util.List<org.apache.maven.model.Dependency> dependencies = plugin.getDependencies();\n        if (!dependencies.isEmpty()) {\n            java.lang.String prefix = (\"build.plugins.plugin[\" + plugin.getKey()) + \"].dependencies.dependency.\";\n            org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n            for (org.apache.maven.model.Dependency d : dependencies) {\n                validateEffectiveDependency(problems, d, false, prefix, request);\n                validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n                validateEnum(prefix + \"scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\");\n            }\n        }\n    }\n\n    private void validateEffectiveDependency(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.Dependency d, boolean management, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey());\n        validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey());\n        if (!management) {\n            validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n            validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n        }\n        if (\"system\".equals(d.getScope())) {\n            java.lang.String systemPath = d.getSystemPath();\n            if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n            } else {\n                java.io.File sysFile = new java.io.File(systemPath);\n                if (!sysFile.isAbsolute()) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n                } else if (!sysFile.isFile()) {\n                    java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n                    systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n                    java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n                    if (systemPath.startsWith(jdkHome)) {\n                        msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n                    }\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n                }\n            }\n        } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n        }\n    }\n\n    private void validateRepositories(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Repository> repositories, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        java.util.Map<java.lang.String, org.apache.maven.model.Repository> index = new java.util.HashMap<java.lang.String, org.apache.maven.model.Repository>();\n        for (org.apache.maven.model.Repository repository : repositories) {\n            validateStringNotEmpty(prefix + \".id\", problems, Severity.ERROR, repository.getId());\n            validateStringNotEmpty(((prefix + \"[\") + repository.getId()) + \"].url\", problems, Severity.ERROR, repository.getUrl());\n            java.lang.String key = repository.getId();\n            org.apache.maven.model.Repository existing = index.get(key);\n            if (existing != null) {\n                org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn30, prefix + \".id\", null, ((((\"must be unique: \" + repository.getId()) + \" -> \") + existing.getUrl()) + \" vs \") + repository.getUrl());\n            } else {\n                index.put(key, repository);\n            }\n        }\n    }\n\n    private void validateRepository(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.Repository repository, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        if (repository != null) {\n            if (\"local\".equals(repository.getId())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \".id\", null, \"must not be 'local', this identifier is reserved.\");\n            }\n            if (\"legacy\".equals(repository.getLayout())) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \".layout\", repository.getId(), \"uses the deprecated value 'legacy'.\");\n            }\n        }\n    }\n\n    private void validateResources(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Resource> resources, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        for (org.apache.maven.model.Resource resource : resources) {\n            validateStringNotEmpty(prefix + \".directory\", problems, Severity.ERROR, resource.getDirectory());\n            validateBoolean(prefix + \".filtering\", problems, errOn30, resource.getFiltering(), resource.getDirectory());\n        }\n    }\n\n    private boolean validateId(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, java.lang.String id) {\n        return validateId(fieldName, problems, id, null);\n    }\n\n    private boolean validateId(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, java.lang.String id, java.lang.String sourceHint) {\n        if (!validateStringNotEmpty(fieldName, problems, Severity.ERROR, id, sourceHint)) {\n            return false;\n        } else {\n            boolean match = id.matches(org.apache.maven.model.validation.DefaultModelValidator.ID_REGEX);\n            if (!match) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, fieldName, sourceHint, (\"with value '\" + id) + \"' does not match a valid id pattern.\");\n            }\n            return match;\n        }\n    }\n\n    private boolean validateStringNoExpression(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string) {\n        if (!hasExpression(string)) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, null, \"contains an expression but should be a constant.\");\n        return false;\n    }\n\n    private boolean hasExpression(java.lang.String value) {\n        return (value != null) && (value.indexOf(\"${\") >= 0);\n    }\n\n    private boolean validateStringNotEmpty(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string) {\n        return validateStringNotEmpty(fieldName, problems, severity, string, null);\n    }\n\n    private boolean validateStringNotEmpty(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string, java.lang.String sourceHint) {\n        if (!validateNotNull(fieldName, problems, severity, string, sourceHint)) {\n            return false;\n        }\n        if (string.length() > 0) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, sourceHint, \"is missing.\");\n        return false;\n    }\n\n    private boolean validateNotNull(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.Object object, java.lang.String sourceHint) {\n        if (object != null) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, sourceHint, \"is missing.\");\n        return false;\n    }\n\n    private boolean validateBoolean(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string, java.lang.String sourceHint) {\n        if ((string == null) || (string.length() <= 0)) {\n            return true;\n        }\n        if (\"true\".equalsIgnoreCase(string) || \"false\".equalsIgnoreCase(string)) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, sourceHint, (\"must be 'true' or 'false' but is '\" + string) + \"'.\");\n        return false;\n    }\n\n    private boolean validateEnum(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string, java.lang.String sourceHint, java.lang.String... validValues) {\n        if ((string == null) || (string.length() <= 0)) {\n            return true;\n        }\n        java.util.List<java.lang.String> values = java.util.Arrays.asList(validValues);\n        if (values.contains(string)) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, sourceHint, (((\"must be one of \" + values) + \" but is '\") + string) + \"'.\");\n        return false;\n    }\n\n    private boolean validateVersion(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String string, java.lang.String sourceHint) {\n        if ((string == null) || (string.length() <= 0)) {\n            return true;\n        }\n        if (!hasExpression(string)) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, fieldName, sourceHint, (\"must be a valid version but is '\" + string) + \"'.\");\n        return false;\n    }\n\n    private boolean validatePluginVersion(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, java.lang.String string, java.lang.String sourceHint, org.apache.maven.model.building.ModelBuildingRequest request) {\n        org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n        if (string == null) {\n            return true;\n        }\n        if ((((string.length() > 0) && (!hasExpression(string))) && (!\"RELEASE\".equals(string))) && (!\"LATEST\".equals(string))) {\n            return true;\n        }\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, errOn30, fieldName, sourceHint, (\"must be a valid version but is '\" + string) + \"'.\");\n        return false;\n    }\n\n    private static void addViolation(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String fieldName, java.lang.String sourceHint, java.lang.String message) {\n        java.lang.StringBuilder buffer = new java.lang.StringBuilder(256);\n        buffer.append('\\'').append(fieldName).append('\\'');\n        if (sourceHint != null) {\n            buffer.append(\" for \").append(sourceHint);\n        }\n        buffer.append(' ').append(message);\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, severity, buffer.toString());\n    }\n\n    private static void addViolation(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.building.ModelProblem.Severity severity, java.lang.String message) {\n        problems.add(severity, message, null);\n    }\n\n    private static boolean equals(java.lang.String s1, java.lang.String s2) {\n        return org.codehaus.plexus.util.StringUtils.clean(s1).equals(org.codehaus.plexus.util.StringUtils.clean(s2));\n    }\n\n    private static org.apache.maven.model.building.ModelProblem.Severity getSeverity(org.apache.maven.model.building.ModelBuildingRequest request, int errorThreshold) {\n        return org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request.getValidationLevel(), errorThreshold);\n    }\n\n    private static org.apache.maven.model.building.ModelProblem.Severity getSeverity(int validationLevel, int errorThreshold) {\n        if (validationLevel < errorThreshold) {\n            return org.apache.maven.model.building.ModelProblem.Severity.WARNING;\n        } else {\n            return org.apache.maven.model.building.ModelProblem.Severity.ERROR;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.List<org.apache.maven.model.Dependency> dependencies",
            "dst_parent": "private void validateEffectiveDependencies(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Dependency> dependencies, boolean management, org.apache.maven.model.building.ModelBuildingRequest request) {\n    org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n    java.lang.String prefix = (management) ? \"dependencyManagement.dependencies.dependency.\" : \"dependencies.dependency.\";\n    for (org.apache.maven.model.Dependency d : dependencies) {\n        validateEffectiveDependency(problems, d, management, prefix, request);\n        if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n            validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n            if (!management) {\n                validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n                validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n            }\n        }\n    }\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "java.util.List<org.apache.maven.model.Dependency> dependencies",
            "src_parent": "private void validateEffectiveDependencies(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Dependency> dependencies, boolean managed, org.apache.maven.model.building.ModelBuildingRequest request) {\n    org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n    java.lang.String prefix = (managed) ? \"dependencyManagement.dependencies.dependency.\" : \"dependencies.dependency.\";\n    for (org.apache.maven.model.Dependency d : dependencies) {\n        validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey());\n        validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey());\n        if (!managed) {\n            validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n            validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n        }\n        if (\"system\".equals(d.getScope())) {\n            java.lang.String systemPath = d.getSystemPath();\n            if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n            } else {\n                java.io.File sysFile = new java.io.File(systemPath);\n                if (!sysFile.isAbsolute()) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n                } else if (!sysFile.isFile()) {\n                    java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n                    systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n                    java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n                    if (systemPath.startsWith(jdkHome)) {\n                        msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n                    }\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n                }\n            }\n        } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n        }\n        if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n            validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n            if (!managed) {\n                validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n                validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n            }\n        }\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0)",
            "dst_parent": "{\n    org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n    java.lang.String prefix = (management) ? \"dependencyManagement.dependencies.dependency.\" : \"dependencies.dependency.\";\n    for (org.apache.maven.model.Dependency d : dependencies) {\n        validateEffectiveDependency(problems, d, management, prefix, request);\n        if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n            validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n            if (!management) {\n                validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n                validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n            }\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0)",
            "src_parent": "{\n    org.apache.maven.model.building.ModelProblem.Severity errOn30 = org.apache.maven.model.validation.DefaultModelValidator.getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);\n    java.lang.String prefix = (managed) ? \"dependencyManagement.dependencies.dependency.\" : \"dependencies.dependency.\";\n    for (org.apache.maven.model.Dependency d : dependencies) {\n        validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey());\n        validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey());\n        if (!managed) {\n            validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n            validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n        }\n        if (\"system\".equals(d.getScope())) {\n            java.lang.String systemPath = d.getSystemPath();\n            if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n            } else {\n                java.io.File sysFile = new java.io.File(systemPath);\n                if (!sysFile.isAbsolute()) {\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n                } else if (!sysFile.isFile()) {\n                    java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n                    systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n                    java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n                    if (systemPath.startsWith(jdkHome)) {\n                        msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n                    }\n                    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n                }\n            }\n        } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n        }\n        if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n            validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n            if (!managed) {\n                validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n                validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n            }\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey())",
            "dst_parent": "{\n    validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey());\n    validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey());\n    if (!management) {\n        validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n        validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n    }\n    if (\"system\".equals(d.getScope())) {\n        java.lang.String systemPath = d.getSystemPath();\n        if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n        } else {\n            java.io.File sysFile = new java.io.File(systemPath);\n            if (!sysFile.isAbsolute()) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n            } else if (!sysFile.isFile()) {\n                java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n                systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n                java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n                if (systemPath.startsWith(jdkHome)) {\n                    msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n                }\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n            }\n        }\n    } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey())",
            "src_parent": "{\n    validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey());\n    validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey());\n    if (!managed) {\n        validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n        validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n    }\n    if (\"system\".equals(d.getScope())) {\n        java.lang.String systemPath = d.getSystemPath();\n        if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n        } else {\n            java.io.File sysFile = new java.io.File(systemPath);\n            if (!sysFile.isAbsolute()) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n            } else if (!sysFile.isFile()) {\n                java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n                systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n                java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n                if (systemPath.startsWith(jdkHome)) {\n                    msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n                }\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n            }\n        }\n    } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n    }\n    if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n        validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n        if (!managed) {\n            validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n            validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey())",
            "dst_parent": "{\n    validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey());\n    validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey());\n    if (!management) {\n        validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n        validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n    }\n    if (\"system\".equals(d.getScope())) {\n        java.lang.String systemPath = d.getSystemPath();\n        if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n        } else {\n            java.io.File sysFile = new java.io.File(systemPath);\n            if (!sysFile.isAbsolute()) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n            } else if (!sysFile.isFile()) {\n                java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n                systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n                java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n                if (systemPath.startsWith(jdkHome)) {\n                    msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n                }\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n            }\n        }\n    } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey())",
            "src_parent": "{\n    validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey());\n    validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey());\n    if (!managed) {\n        validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n        validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n    }\n    if (\"system\".equals(d.getScope())) {\n        java.lang.String systemPath = d.getSystemPath();\n        if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n        } else {\n            java.io.File sysFile = new java.io.File(systemPath);\n            if (!sysFile.isAbsolute()) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n            } else if (!sysFile.isFile()) {\n                java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n                systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n                java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n                if (systemPath.startsWith(jdkHome)) {\n                    msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n                }\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n            }\n        }\n    } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n    }\n    if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n        validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n        if (!managed) {\n            validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n            validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (!management) {\n    validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n    validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n}",
            "dst_parent": "{\n    validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey());\n    validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey());\n    if (!management) {\n        validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n        validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n    }\n    if (\"system\".equals(d.getScope())) {\n        java.lang.String systemPath = d.getSystemPath();\n        if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n        } else {\n            java.io.File sysFile = new java.io.File(systemPath);\n            if (!sysFile.isAbsolute()) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n            } else if (!sysFile.isFile()) {\n                java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n                systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n                java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n                if (systemPath.startsWith(jdkHome)) {\n                    msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n                }\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n            }\n        }\n    } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (!managed) {\n    validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n    validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n}",
            "src_parent": "{\n    validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey());\n    validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey());\n    if (!managed) {\n        validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n        validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n    }\n    if (\"system\".equals(d.getScope())) {\n        java.lang.String systemPath = d.getSystemPath();\n        if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n        } else {\n            java.io.File sysFile = new java.io.File(systemPath);\n            if (!sysFile.isAbsolute()) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n            } else if (!sysFile.isFile()) {\n                java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n                systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n                java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n                if (systemPath.startsWith(jdkHome)) {\n                    msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n                }\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n            }\n        }\n    } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n    }\n    if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n        validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n        if (!managed) {\n            validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n            validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (\"system\".equals(d.getScope())) {\n    java.lang.String systemPath = d.getSystemPath();\n    if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n    } else {\n        java.io.File sysFile = new java.io.File(systemPath);\n        if (!sysFile.isAbsolute()) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n        } else if (!sysFile.isFile()) {\n            java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n            systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n            java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n            if (systemPath.startsWith(jdkHome)) {\n                msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n            }\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n        }\n    }\n} else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n}",
            "dst_parent": "{\n    validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey());\n    validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey());\n    if (!management) {\n        validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n        validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n    }\n    if (\"system\".equals(d.getScope())) {\n        java.lang.String systemPath = d.getSystemPath();\n        if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n        } else {\n            java.io.File sysFile = new java.io.File(systemPath);\n            if (!sysFile.isAbsolute()) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n            } else if (!sysFile.isFile()) {\n                java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n                systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n                java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n                if (systemPath.startsWith(jdkHome)) {\n                    msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n                }\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n            }\n        }\n    } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (\"system\".equals(d.getScope())) {\n    java.lang.String systemPath = d.getSystemPath();\n    if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n    } else {\n        java.io.File sysFile = new java.io.File(systemPath);\n        if (!sysFile.isAbsolute()) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n        } else if (!sysFile.isFile()) {\n            java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n            systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n            java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n            if (systemPath.startsWith(jdkHome)) {\n                msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n            }\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n        }\n    }\n} else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n    org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n}",
            "src_parent": "{\n    validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey());\n    validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey());\n    if (!managed) {\n        validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n        validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n    }\n    if (\"system\".equals(d.getScope())) {\n        java.lang.String systemPath = d.getSystemPath();\n        if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n        } else {\n            java.io.File sysFile = new java.io.File(systemPath);\n            if (!sysFile.isAbsolute()) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n            } else if (!sysFile.isFile()) {\n                java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n                systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n                java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n                if (systemPath.startsWith(jdkHome)) {\n                    msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n                }\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n            }\n        }\n    } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n    }\n    if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n        validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n        if (!managed) {\n            validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n            validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.maven.model.Dependency d",
            "dst_parent": "for (org.apache.maven.model.Dependency d : dependencies) {\n    validateEffectiveDependency(problems, d, management, prefix, request);\n    if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n        validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n        if (!management) {\n            validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n            validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n        }\n    }\n}",
            "dst_parent_type": "ForEach",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "org.apache.maven.model.Dependency d",
            "src_parent": "for (org.apache.maven.model.Dependency d : dependencies) {\n    validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey());\n    validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey());\n    if (!managed) {\n        validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n        validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n    }\n    if (\"system\".equals(d.getScope())) {\n        java.lang.String systemPath = d.getSystemPath();\n        if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n        } else {\n            java.io.File sysFile = new java.io.File(systemPath);\n            if (!sysFile.isAbsolute()) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n            } else if (!sysFile.isFile()) {\n                java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n                systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n                java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n                if (systemPath.startsWith(jdkHome)) {\n                    msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n                }\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n            }\n        }\n    } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n    }\n    if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n        validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n        if (!managed) {\n            validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n            validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n        }\n    }\n}",
            "src_parent_type": "ForEach",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n    validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n    if (!management) {\n        validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n        validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n    }\n}",
            "dst_parent": "{\n    validateEffectiveDependency(problems, d, management, prefix, request);\n    if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n        validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n        if (!management) {\n            validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n            validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n    validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n    if (!managed) {\n        validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n        validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n    }\n}",
            "src_parent": "{\n    validateId(prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey());\n    validateId(prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey());\n    if (!managed) {\n        validateStringNotEmpty(prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey());\n        validateStringNotEmpty(prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey());\n    }\n    if (\"system\".equals(d.getScope())) {\n        java.lang.String systemPath = d.getSystemPath();\n        if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n            org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\");\n        } else {\n            java.io.File sysFile = new java.io.File(systemPath);\n            if (!sysFile.isAbsolute()) {\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must specify an absolute path but is \" + systemPath);\n            } else if (!sysFile.isFile()) {\n                java.lang.String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n                systemPath = systemPath.replace('/', java.io.File.separatorChar).replace('\\\\', java.io.File.separatorChar);\n                java.lang.String jdkHome = (request.getSystemProperties().getProperty(\"java.home\", \"\") + java.io.File.separator) + \"..\";\n                if (systemPath.startsWith(jdkHome)) {\n                    msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n                }\n                org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg);\n            }\n        }\n    } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n        org.apache.maven.model.validation.DefaultModelValidator.addViolation(problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\" + \" This field may only be specified for a dependency with system scope.\");\n    }\n    if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n        validateBoolean(prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey());\n        if (!managed) {\n            validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n            validateEnum(prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.maven.model.Dependency d",
            "dst_parent": "for (org.apache.maven.model.Dependency d : dependencies) {\n    validateEffectiveDependency(problems, d, false, prefix, request);\n    validateVersion(prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey());\n    validateEnum(prefix + \"scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\");\n}",
            "dst_parent_type": "ForEach",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "org.apache.maven.model.Dependency d",
            "src_parent": "for (org.apache.maven.model.Dependency d : p.getDependencies()) {\n    validateEnum((\"build.plugins.plugin[\" + p.getKey()) + \"].dependencies.dependency.scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\");\n}",
            "src_parent_type": "ForEach",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "d.getScope()",
            "dst_parent": "validateEnum(prefix + \"scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\")",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "d.getScope()",
            "src_parent": "validateEnum((\"build.plugins.plugin[\" + p.getKey()) + \"].dependencies.dependency.scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\")",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "d.getManagementKey()",
            "dst_parent": "validateEnum(prefix + \"scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\")",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "d.getManagementKey()",
            "src_parent": "validateEnum((\"build.plugins.plugin[\" + p.getKey()) + \"].dependencies.dependency.scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\")",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "validateEffectivePluginDependencies(problems, p, request)",
            "dst_parent": "{\n    validateStringNotEmpty(\"build.plugins.plugin.artifactId\", problems, Severity.ERROR, p.getArtifactId());\n    validateStringNotEmpty(\"build.plugins.plugin.groupId\", problems, Severity.ERROR, p.getGroupId());\n    validatePluginVersion(\"build.plugins.plugin.version\", problems, p.getVersion(), p.getKey(), request);\n    validateBoolean(\"build.plugins.plugin.inherited\", problems, errOn30, p.getInherited(), p.getKey());\n    validateBoolean(\"build.plugins.plugin.extensions\", problems, errOn30, p.getExtensions(), p.getKey());\n    validateEffectivePluginDependencies(problems, p, request);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "validateEnum((\"build.plugins.plugin[\" + p.getKey()) + \"].dependencies.dependency.scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\")",
            "src_parent": "{\n    validateEnum((\"build.plugins.plugin[\" + p.getKey()) + \"].dependencies.dependency.scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\");\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "DefaultModelValidator"
    }
  ],
  "id": "maven_83389c34"
}