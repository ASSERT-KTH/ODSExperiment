{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "cheapest.cost",
            "dst_parent": "return cheapest.cost",
            "dst_parent_type": "Return",
            "dst_type": "FieldRead",
            "operator": "UPD",
            "src": "java.lang.Double.POSITIVE_INFINITY",
            "src_parent": "return java.lang.Double.POSITIVE_INFINITY",
            "src_parent_type": "Return",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "OperatorAssignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "propertyCost",
            "dst_parent": "propertyCost += lookup.getCost(filter, propertyName, p)",
            "dst_parent_type": "OperatorAssignment",
            "dst_type": "VariableWrite",
            "operator": "UPD",
            "src": "cost",
            "src_parent": "cost += lookup.getCost(filter, propertyName, p)",
            "src_parent_type": "OperatorAssignment",
            "src_type": "VariableWrite"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "return lookup.getCost(filter, propertyName, pr.first)",
            "src_parent": "{\n    return lookup.getCost(filter, propertyName, pr.first);\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "double cost = 0",
            "src_parent": "{\n    double cost = 0;\n    for (org.apache.jackrabbit.oak.api.PropertyValue p : pr.list) {\n        cost += lookup.getCost(filter, propertyName, p);\n    }\n    return cost;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "return lookup.getCost(filter, propertyName, null)",
            "src_parent": "{\n    return lookup.getCost(filter, propertyName, null);\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "break",
            "src_parent": "{\n    paths = lookup.query(filter, propertyName, pr.first);\n    break;\n}",
            "src_parent_type": "Block",
            "src_type": "Break"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "break",
            "src_parent": "{\n    for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n        java.lang.Iterable<java.lang.String> p = lookup.query(filter, propertyName, pv);\n        if (paths == null) {\n            paths = p;\n        } else {\n            paths = com.google.common.collect.Iterables.concat(paths, p);\n        }\n    }\n    break;\n}",
            "src_parent_type": "Block",
            "src_type": "Break"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "break",
            "src_parent": "{\n    paths = lookup.query(filter, propertyName, null);\n    break;\n}",
            "src_parent_type": "Block",
            "src_type": "Break"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "for (org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr : filter.getPropertyRestrictions()) {\n    java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n    depth = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(pr.propertyName);\n    if (lookup.isIndexed(propertyName, \"/\", filter)) {\n        if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n            paths = lookup.query(filter, propertyName, pr.first);\n            break;\n        } else if (pr.list != null) {\n            for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                java.lang.Iterable<java.lang.String> p = lookup.query(filter, propertyName, pv);\n                if (paths == null) {\n                    paths = p;\n                } else {\n                    paths = com.google.common.collect.Iterables.concat(paths, p);\n                }\n            }\n            break;\n        } else {\n            paths = lookup.query(filter, propertyName, null);\n            break;\n        }\n    }\n}",
            "src_parent": "{\n    java.lang.Iterable<java.lang.String> paths = null;\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup = getLookup(root);\n    int depth = 1;\n    for (org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr : filter.getPropertyRestrictions()) {\n        java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n        depth = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(pr.propertyName);\n        if (lookup.isIndexed(propertyName, \"/\", filter)) {\n            if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                paths = lookup.query(filter, propertyName, pr.first);\n                break;\n            } else if (pr.list != null) {\n                for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                    java.lang.Iterable<java.lang.String> p = lookup.query(filter, propertyName, pv);\n                    if (paths == null) {\n                        paths = p;\n                    } else {\n                        paths = com.google.common.collect.Iterables.concat(paths, p);\n                    }\n                }\n                break;\n            } else {\n                paths = lookup.query(filter, propertyName, null);\n                break;\n            }\n        }\n    }\n    if (paths == null) {\n        throw new java.lang.IllegalStateException(\"Property index is used even when no index is available for filter \" + filter);\n    }\n    org.apache.jackrabbit.oak.spi.query.Cursor c = org.apache.jackrabbit.oak.spi.query.Cursors.newPathCursor(paths, filter.getQueryEngineSettings());\n    if (depth > 1) {\n        c = org.apache.jackrabbit.oak.spi.query.Cursors.newAncestorCursor(c, depth - 1, filter.getQueryEngineSettings());\n    }\n    return c;\n}",
            "src_parent_type": "Block",
            "src_type": "ForEach"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "for (org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr : filter.getPropertyRestrictions()) {\n    java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n    if (lookup.isIndexed(propertyName, \"/\", filter)) {\n        if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n            buff.append(' ').append(propertyName).append('=').append(pr.first);\n        } else {\n            buff.append(' ').append(propertyName);\n        }\n    } else if (pr.list != null) {\n        buff.append(' ').append(propertyName).append(\" IN(\");\n        int i = 0;\n        for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n            if ((i++) > 0) {\n                buff.append(\", \");\n            }\n            buff.append(pv);\n        }\n        buff.append(')');\n    } else {\n        notIndexed.append(' ').append(propertyName);\n        if (!pr.toString().isEmpty()) {\n            notIndexed.append(':').append(pr);\n        }\n    }\n}",
            "src_parent": "{\n    java.lang.StringBuilder buff = new java.lang.StringBuilder(\"property\");\n    java.lang.StringBuilder notIndexed = new java.lang.StringBuilder();\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup = getLookup(root);\n    for (org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr : filter.getPropertyRestrictions()) {\n        java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n        if (lookup.isIndexed(propertyName, \"/\", filter)) {\n            if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                buff.append(' ').append(propertyName).append('=').append(pr.first);\n            } else {\n                buff.append(' ').append(propertyName);\n            }\n        } else if (pr.list != null) {\n            buff.append(' ').append(propertyName).append(\" IN(\");\n            int i = 0;\n            for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                if ((i++) > 0) {\n                    buff.append(\", \");\n                }\n                buff.append(pv);\n            }\n            buff.append(')');\n        } else {\n            notIndexed.append(' ').append(propertyName);\n            if (!pr.toString().isEmpty()) {\n                notIndexed.append(':').append(pr);\n            }\n        }\n    }\n    if (notIndexed.length() > 0) {\n        buff.append(\" (\").append(notIndexed.toString().trim()).append(\")\");\n    }\n    return buff.toString();\n}",
            "src_parent_type": "Block",
            "src_type": "ForEach"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.class);",
            "src_parent": "class PropertyIndex implements org.apache.jackrabbit.oak.spi.query.QueryIndex {\n    private static final int MAX_STRING_LENGTH = 100;\n\n    private static final java.lang.String EMPTY_TOKEN = \":\";\n\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.class);\n\n    static java.util.Set<java.lang.String> encode(org.apache.jackrabbit.oak.api.PropertyValue value) {\n        if (value == null) {\n            return null;\n        }\n        java.util.Set<java.lang.String> values = new java.util.HashSet<java.lang.String>();\n        for (java.lang.String v : value.getValue(Type.STRINGS)) {\n            try {\n                if (v.length() > org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.MAX_STRING_LENGTH) {\n                    v = v.substring(0, org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.MAX_STRING_LENGTH);\n                }\n                if (v.isEmpty()) {\n                    v = org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.EMPTY_TOKEN;\n                } else {\n                    v = java.net.URLEncoder.encode(v, com.google.common.base.Charsets.UTF_8.name());\n                }\n                values.add(v);\n            } catch (java.io.UnsupportedEncodingException e) {\n                throw new java.lang.IllegalStateException(\"UTF-8 is unsupported\", e);\n            }\n        }\n        return values;\n    }\n\n    private org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest findCheapestProperty(org.apache.jackrabbit.oak.spi.query.Filter filter, org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup) {\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cost = new org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest();\n        for (org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr : filter.getPropertyRestrictions()) {\n            java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n            double propertyCost = java.lang.Double.POSITIVE_INFINITY;\n            if (lookup.isIndexed(propertyName, \"/\", filter)) {\n                if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                    propertyCost = lookup.getCost(filter, propertyName, pr.first);\n                } else if (pr.list != null) {\n                    propertyCost = 0;\n                    for (org.apache.jackrabbit.oak.api.PropertyValue p : pr.list) {\n                        propertyCost += lookup.getCost(filter, propertyName, p);\n                    }\n                } else {\n                    propertyCost = lookup.getCost(filter, propertyName, null);\n                }\n            }\n            org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.LOG.debug(\"property cost for {} is {}\", propertyName, propertyCost);\n            if (propertyCost < cost.cost) {\n                cost.cost = propertyCost;\n                cost.propertyRestriction = pr;\n            }\n        }\n        return cost;\n    }\n\n    @java.lang.Override\n    public java.lang.String getIndexName() {\n        return \"property\";\n    }\n\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup getLookup(org.apache.jackrabbit.oak.spi.state.NodeState root) {\n        return new org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup(root);\n    }\n\n    @java.lang.Override\n    public double getCost(org.apache.jackrabbit.oak.spi.query.Filter filter, org.apache.jackrabbit.oak.spi.state.NodeState root) {\n        if (filter.getFullTextConstraint() != null) {\n            return java.lang.Double.POSITIVE_INFINITY;\n        }\n        if (filter.containsNativeConstraint()) {\n            return java.lang.Double.POSITIVE_INFINITY;\n        }\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup = getLookup(root);\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cheapest = findCheapestProperty(filter, lookup);\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.LOG.debug(\"Cheapest property cost is {} for property {}\", cheapest.cost, cheapest.propertyRestriction != null ? cheapest.propertyRestriction.propertyName : null);\n        return cheapest.cost;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.query.Cursor query(org.apache.jackrabbit.oak.spi.query.Filter filter, org.apache.jackrabbit.oak.spi.state.NodeState root) {\n        java.lang.Iterable<java.lang.String> paths = null;\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup = getLookup(root);\n        int depth = 1;\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cheapest = findCheapestProperty(filter, lookup);\n        org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr = cheapest.propertyRestriction;\n        if (pr != null) {\n            java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n            depth = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(pr.propertyName);\n            if (lookup.isIndexed(propertyName, \"/\", filter)) {\n                if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                    paths = lookup.query(filter, propertyName, pr.first);\n                } else if (pr.list != null) {\n                    for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                        java.lang.Iterable<java.lang.String> p = lookup.query(filter, propertyName, pv);\n                        if (paths == null) {\n                            paths = p;\n                        } else {\n                            paths = com.google.common.collect.Iterables.concat(paths, p);\n                        }\n                    }\n                } else {\n                    paths = lookup.query(filter, propertyName, null);\n                }\n            }\n        }\n        if (paths == null) {\n            throw new java.lang.IllegalStateException(\"Property index is used even when no index is available for filter \" + filter);\n        }\n        org.apache.jackrabbit.oak.spi.query.Cursor c = org.apache.jackrabbit.oak.spi.query.Cursors.newPathCursor(paths, filter.getQueryEngineSettings());\n        if (depth > 1) {\n            c = org.apache.jackrabbit.oak.spi.query.Cursors.newAncestorCursor(c, depth - 1, filter.getQueryEngineSettings());\n        }\n        return c;\n    }\n\n    @java.lang.Override\n    public java.lang.String getPlan(org.apache.jackrabbit.oak.spi.query.Filter filter, org.apache.jackrabbit.oak.spi.state.NodeState root) {\n        java.lang.StringBuilder buff = new java.lang.StringBuilder(\"property\");\n        java.lang.StringBuilder notIndexed = new java.lang.StringBuilder();\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup = getLookup(root);\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cheapest = findCheapestProperty(filter, lookup);\n        org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr = cheapest.propertyRestriction;\n        if (pr != null) {\n            java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n            if (lookup.isIndexed(propertyName, \"/\", filter)) {\n                if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                    buff.append(' ').append(propertyName).append('=').append(pr.first);\n                } else {\n                    buff.append(' ').append(propertyName);\n                }\n            } else if (pr.list != null) {\n                buff.append(' ').append(propertyName).append(\" IN(\");\n                int i = 0;\n                for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                    if ((i++) > 0) {\n                        buff.append(\", \");\n                    }\n                    buff.append(pv);\n                }\n                buff.append(')');\n            } else {\n                notIndexed.append(' ').append(propertyName);\n                if (!pr.toString().isEmpty()) {\n                    notIndexed.append(':').append(pr);\n                }\n            }\n        }\n        if (notIndexed.length() > 0) {\n            buff.append(\" (\").append(notIndexed.toString().trim()).append(\")\");\n        }\n        return buff.toString();\n    }\n\n    private static class Cheapest {\n        private double cost = java.lang.Double.POSITIVE_INFINITY;\n\n        private org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction propertyRestriction;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest findCheapestProperty(org.apache.jackrabbit.oak.spi.query.Filter filter, org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup) {\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cost = new org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest();\n    for (org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr : filter.getPropertyRestrictions()) {\n        java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n        double propertyCost = java.lang.Double.POSITIVE_INFINITY;\n        if (lookup.isIndexed(propertyName, \"/\", filter)) {\n            if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                propertyCost = lookup.getCost(filter, propertyName, pr.first);\n            } else if (pr.list != null) {\n                propertyCost = 0;\n                for (org.apache.jackrabbit.oak.api.PropertyValue p : pr.list) {\n                    propertyCost += lookup.getCost(filter, propertyName, p);\n                }\n            } else {\n                propertyCost = lookup.getCost(filter, propertyName, null);\n            }\n        }\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.LOG.debug(\"property cost for {} is {}\", propertyName, propertyCost);\n        if (propertyCost < cost.cost) {\n            cost.cost = propertyCost;\n            cost.propertyRestriction = pr;\n        }\n    }\n    return cost;\n}",
            "src_parent": "class PropertyIndex implements org.apache.jackrabbit.oak.spi.query.QueryIndex {\n    private static final int MAX_STRING_LENGTH = 100;\n\n    private static final java.lang.String EMPTY_TOKEN = \":\";\n\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.class);\n\n    static java.util.Set<java.lang.String> encode(org.apache.jackrabbit.oak.api.PropertyValue value) {\n        if (value == null) {\n            return null;\n        }\n        java.util.Set<java.lang.String> values = new java.util.HashSet<java.lang.String>();\n        for (java.lang.String v : value.getValue(Type.STRINGS)) {\n            try {\n                if (v.length() > org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.MAX_STRING_LENGTH) {\n                    v = v.substring(0, org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.MAX_STRING_LENGTH);\n                }\n                if (v.isEmpty()) {\n                    v = org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.EMPTY_TOKEN;\n                } else {\n                    v = java.net.URLEncoder.encode(v, com.google.common.base.Charsets.UTF_8.name());\n                }\n                values.add(v);\n            } catch (java.io.UnsupportedEncodingException e) {\n                throw new java.lang.IllegalStateException(\"UTF-8 is unsupported\", e);\n            }\n        }\n        return values;\n    }\n\n    private org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest findCheapestProperty(org.apache.jackrabbit.oak.spi.query.Filter filter, org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup) {\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cost = new org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest();\n        for (org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr : filter.getPropertyRestrictions()) {\n            java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n            double propertyCost = java.lang.Double.POSITIVE_INFINITY;\n            if (lookup.isIndexed(propertyName, \"/\", filter)) {\n                if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                    propertyCost = lookup.getCost(filter, propertyName, pr.first);\n                } else if (pr.list != null) {\n                    propertyCost = 0;\n                    for (org.apache.jackrabbit.oak.api.PropertyValue p : pr.list) {\n                        propertyCost += lookup.getCost(filter, propertyName, p);\n                    }\n                } else {\n                    propertyCost = lookup.getCost(filter, propertyName, null);\n                }\n            }\n            org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.LOG.debug(\"property cost for {} is {}\", propertyName, propertyCost);\n            if (propertyCost < cost.cost) {\n                cost.cost = propertyCost;\n                cost.propertyRestriction = pr;\n            }\n        }\n        return cost;\n    }\n\n    @java.lang.Override\n    public java.lang.String getIndexName() {\n        return \"property\";\n    }\n\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup getLookup(org.apache.jackrabbit.oak.spi.state.NodeState root) {\n        return new org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup(root);\n    }\n\n    @java.lang.Override\n    public double getCost(org.apache.jackrabbit.oak.spi.query.Filter filter, org.apache.jackrabbit.oak.spi.state.NodeState root) {\n        if (filter.getFullTextConstraint() != null) {\n            return java.lang.Double.POSITIVE_INFINITY;\n        }\n        if (filter.containsNativeConstraint()) {\n            return java.lang.Double.POSITIVE_INFINITY;\n        }\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup = getLookup(root);\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cheapest = findCheapestProperty(filter, lookup);\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.LOG.debug(\"Cheapest property cost is {} for property {}\", cheapest.cost, cheapest.propertyRestriction != null ? cheapest.propertyRestriction.propertyName : null);\n        return cheapest.cost;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.query.Cursor query(org.apache.jackrabbit.oak.spi.query.Filter filter, org.apache.jackrabbit.oak.spi.state.NodeState root) {\n        java.lang.Iterable<java.lang.String> paths = null;\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup = getLookup(root);\n        int depth = 1;\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cheapest = findCheapestProperty(filter, lookup);\n        org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr = cheapest.propertyRestriction;\n        if (pr != null) {\n            java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n            depth = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(pr.propertyName);\n            if (lookup.isIndexed(propertyName, \"/\", filter)) {\n                if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                    paths = lookup.query(filter, propertyName, pr.first);\n                } else if (pr.list != null) {\n                    for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                        java.lang.Iterable<java.lang.String> p = lookup.query(filter, propertyName, pv);\n                        if (paths == null) {\n                            paths = p;\n                        } else {\n                            paths = com.google.common.collect.Iterables.concat(paths, p);\n                        }\n                    }\n                } else {\n                    paths = lookup.query(filter, propertyName, null);\n                }\n            }\n        }\n        if (paths == null) {\n            throw new java.lang.IllegalStateException(\"Property index is used even when no index is available for filter \" + filter);\n        }\n        org.apache.jackrabbit.oak.spi.query.Cursor c = org.apache.jackrabbit.oak.spi.query.Cursors.newPathCursor(paths, filter.getQueryEngineSettings());\n        if (depth > 1) {\n            c = org.apache.jackrabbit.oak.spi.query.Cursors.newAncestorCursor(c, depth - 1, filter.getQueryEngineSettings());\n        }\n        return c;\n    }\n\n    @java.lang.Override\n    public java.lang.String getPlan(org.apache.jackrabbit.oak.spi.query.Filter filter, org.apache.jackrabbit.oak.spi.state.NodeState root) {\n        java.lang.StringBuilder buff = new java.lang.StringBuilder(\"property\");\n        java.lang.StringBuilder notIndexed = new java.lang.StringBuilder();\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup = getLookup(root);\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cheapest = findCheapestProperty(filter, lookup);\n        org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr = cheapest.propertyRestriction;\n        if (pr != null) {\n            java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n            if (lookup.isIndexed(propertyName, \"/\", filter)) {\n                if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                    buff.append(' ').append(propertyName).append('=').append(pr.first);\n                } else {\n                    buff.append(' ').append(propertyName);\n                }\n            } else if (pr.list != null) {\n                buff.append(' ').append(propertyName).append(\" IN(\");\n                int i = 0;\n                for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                    if ((i++) > 0) {\n                        buff.append(\", \");\n                    }\n                    buff.append(pv);\n                }\n                buff.append(')');\n            } else {\n                notIndexed.append(' ').append(propertyName);\n                if (!pr.toString().isEmpty()) {\n                    notIndexed.append(':').append(pr);\n                }\n            }\n        }\n        if (notIndexed.length() > 0) {\n            buff.append(\" (\").append(notIndexed.toString().trim()).append(\")\");\n        }\n        return buff.toString();\n    }\n\n    private static class Cheapest {\n        private double cost = java.lang.Double.POSITIVE_INFINITY;\n\n        private org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction propertyRestriction;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static class Cheapest {\n    private double cost = java.lang.Double.POSITIVE_INFINITY;\n\n    private org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction propertyRestriction;\n}",
            "src_parent": "class PropertyIndex implements org.apache.jackrabbit.oak.spi.query.QueryIndex {\n    private static final int MAX_STRING_LENGTH = 100;\n\n    private static final java.lang.String EMPTY_TOKEN = \":\";\n\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.class);\n\n    static java.util.Set<java.lang.String> encode(org.apache.jackrabbit.oak.api.PropertyValue value) {\n        if (value == null) {\n            return null;\n        }\n        java.util.Set<java.lang.String> values = new java.util.HashSet<java.lang.String>();\n        for (java.lang.String v : value.getValue(Type.STRINGS)) {\n            try {\n                if (v.length() > org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.MAX_STRING_LENGTH) {\n                    v = v.substring(0, org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.MAX_STRING_LENGTH);\n                }\n                if (v.isEmpty()) {\n                    v = org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.EMPTY_TOKEN;\n                } else {\n                    v = java.net.URLEncoder.encode(v, com.google.common.base.Charsets.UTF_8.name());\n                }\n                values.add(v);\n            } catch (java.io.UnsupportedEncodingException e) {\n                throw new java.lang.IllegalStateException(\"UTF-8 is unsupported\", e);\n            }\n        }\n        return values;\n    }\n\n    private org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest findCheapestProperty(org.apache.jackrabbit.oak.spi.query.Filter filter, org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup) {\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cost = new org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest();\n        for (org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr : filter.getPropertyRestrictions()) {\n            java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n            double propertyCost = java.lang.Double.POSITIVE_INFINITY;\n            if (lookup.isIndexed(propertyName, \"/\", filter)) {\n                if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                    propertyCost = lookup.getCost(filter, propertyName, pr.first);\n                } else if (pr.list != null) {\n                    propertyCost = 0;\n                    for (org.apache.jackrabbit.oak.api.PropertyValue p : pr.list) {\n                        propertyCost += lookup.getCost(filter, propertyName, p);\n                    }\n                } else {\n                    propertyCost = lookup.getCost(filter, propertyName, null);\n                }\n            }\n            org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.LOG.debug(\"property cost for {} is {}\", propertyName, propertyCost);\n            if (propertyCost < cost.cost) {\n                cost.cost = propertyCost;\n                cost.propertyRestriction = pr;\n            }\n        }\n        return cost;\n    }\n\n    @java.lang.Override\n    public java.lang.String getIndexName() {\n        return \"property\";\n    }\n\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup getLookup(org.apache.jackrabbit.oak.spi.state.NodeState root) {\n        return new org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup(root);\n    }\n\n    @java.lang.Override\n    public double getCost(org.apache.jackrabbit.oak.spi.query.Filter filter, org.apache.jackrabbit.oak.spi.state.NodeState root) {\n        if (filter.getFullTextConstraint() != null) {\n            return java.lang.Double.POSITIVE_INFINITY;\n        }\n        if (filter.containsNativeConstraint()) {\n            return java.lang.Double.POSITIVE_INFINITY;\n        }\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup = getLookup(root);\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cheapest = findCheapestProperty(filter, lookup);\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.LOG.debug(\"Cheapest property cost is {} for property {}\", cheapest.cost, cheapest.propertyRestriction != null ? cheapest.propertyRestriction.propertyName : null);\n        return cheapest.cost;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.query.Cursor query(org.apache.jackrabbit.oak.spi.query.Filter filter, org.apache.jackrabbit.oak.spi.state.NodeState root) {\n        java.lang.Iterable<java.lang.String> paths = null;\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup = getLookup(root);\n        int depth = 1;\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cheapest = findCheapestProperty(filter, lookup);\n        org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr = cheapest.propertyRestriction;\n        if (pr != null) {\n            java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n            depth = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(pr.propertyName);\n            if (lookup.isIndexed(propertyName, \"/\", filter)) {\n                if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                    paths = lookup.query(filter, propertyName, pr.first);\n                } else if (pr.list != null) {\n                    for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                        java.lang.Iterable<java.lang.String> p = lookup.query(filter, propertyName, pv);\n                        if (paths == null) {\n                            paths = p;\n                        } else {\n                            paths = com.google.common.collect.Iterables.concat(paths, p);\n                        }\n                    }\n                } else {\n                    paths = lookup.query(filter, propertyName, null);\n                }\n            }\n        }\n        if (paths == null) {\n            throw new java.lang.IllegalStateException(\"Property index is used even when no index is available for filter \" + filter);\n        }\n        org.apache.jackrabbit.oak.spi.query.Cursor c = org.apache.jackrabbit.oak.spi.query.Cursors.newPathCursor(paths, filter.getQueryEngineSettings());\n        if (depth > 1) {\n            c = org.apache.jackrabbit.oak.spi.query.Cursors.newAncestorCursor(c, depth - 1, filter.getQueryEngineSettings());\n        }\n        return c;\n    }\n\n    @java.lang.Override\n    public java.lang.String getPlan(org.apache.jackrabbit.oak.spi.query.Filter filter, org.apache.jackrabbit.oak.spi.state.NodeState root) {\n        java.lang.StringBuilder buff = new java.lang.StringBuilder(\"property\");\n        java.lang.StringBuilder notIndexed = new java.lang.StringBuilder();\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup = getLookup(root);\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cheapest = findCheapestProperty(filter, lookup);\n        org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr = cheapest.propertyRestriction;\n        if (pr != null) {\n            java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n            if (lookup.isIndexed(propertyName, \"/\", filter)) {\n                if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                    buff.append(' ').append(propertyName).append('=').append(pr.first);\n                } else {\n                    buff.append(' ').append(propertyName);\n                }\n            } else if (pr.list != null) {\n                buff.append(' ').append(propertyName).append(\" IN(\");\n                int i = 0;\n                for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                    if ((i++) > 0) {\n                        buff.append(\", \");\n                    }\n                    buff.append(pv);\n                }\n                buff.append(')');\n            } else {\n                notIndexed.append(' ').append(propertyName);\n                if (!pr.toString().isEmpty()) {\n                    notIndexed.append(':').append(pr);\n                }\n            }\n        }\n        if (notIndexed.length() > 0) {\n            buff.append(\" (\").append(notIndexed.toString().trim()).append(\")\");\n        }\n        return buff.toString();\n    }\n\n    private static class Cheapest {\n        private double cost = java.lang.Double.POSITIVE_INFINITY;\n\n        private org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction propertyRestriction;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Class"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cheapest = findCheapestProperty(filter, lookup)",
            "src_parent": "{\n    if (filter.getFullTextConstraint() != null) {\n        return java.lang.Double.POSITIVE_INFINITY;\n    }\n    if (filter.containsNativeConstraint()) {\n        return java.lang.Double.POSITIVE_INFINITY;\n    }\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup = getLookup(root);\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cheapest = findCheapestProperty(filter, lookup);\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.LOG.debug(\"Cheapest property cost is {} for property {}\", cheapest.cost, cheapest.propertyRestriction != null ? cheapest.propertyRestriction.propertyName : null);\n    return cheapest.cost;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.LOG.debug(\"Cheapest property cost is {} for property {}\", cheapest.cost, cheapest.propertyRestriction != null ? cheapest.propertyRestriction.propertyName : null)",
            "src_parent": "{\n    if (filter.getFullTextConstraint() != null) {\n        return java.lang.Double.POSITIVE_INFINITY;\n    }\n    if (filter.containsNativeConstraint()) {\n        return java.lang.Double.POSITIVE_INFINITY;\n    }\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup = getLookup(root);\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cheapest = findCheapestProperty(filter, lookup);\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.LOG.debug(\"Cheapest property cost is {} for property {}\", cheapest.cost, cheapest.propertyRestriction != null ? cheapest.propertyRestriction.propertyName : null);\n    return cheapest.cost;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cheapest = findCheapestProperty(filter, lookup)",
            "src_parent": "{\n    java.lang.Iterable<java.lang.String> paths = null;\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup = getLookup(root);\n    int depth = 1;\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cheapest = findCheapestProperty(filter, lookup);\n    org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr = cheapest.propertyRestriction;\n    if (pr != null) {\n        java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n        depth = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(pr.propertyName);\n        if (lookup.isIndexed(propertyName, \"/\", filter)) {\n            if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                paths = lookup.query(filter, propertyName, pr.first);\n            } else if (pr.list != null) {\n                for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                    java.lang.Iterable<java.lang.String> p = lookup.query(filter, propertyName, pv);\n                    if (paths == null) {\n                        paths = p;\n                    } else {\n                        paths = com.google.common.collect.Iterables.concat(paths, p);\n                    }\n                }\n            } else {\n                paths = lookup.query(filter, propertyName, null);\n            }\n        }\n    }\n    if (paths == null) {\n        throw new java.lang.IllegalStateException(\"Property index is used even when no index is available for filter \" + filter);\n    }\n    org.apache.jackrabbit.oak.spi.query.Cursor c = org.apache.jackrabbit.oak.spi.query.Cursors.newPathCursor(paths, filter.getQueryEngineSettings());\n    if (depth > 1) {\n        c = org.apache.jackrabbit.oak.spi.query.Cursors.newAncestorCursor(c, depth - 1, filter.getQueryEngineSettings());\n    }\n    return c;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr = cheapest.propertyRestriction",
            "src_parent": "{\n    java.lang.Iterable<java.lang.String> paths = null;\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup = getLookup(root);\n    int depth = 1;\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cheapest = findCheapestProperty(filter, lookup);\n    org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr = cheapest.propertyRestriction;\n    if (pr != null) {\n        java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n        depth = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(pr.propertyName);\n        if (lookup.isIndexed(propertyName, \"/\", filter)) {\n            if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                paths = lookup.query(filter, propertyName, pr.first);\n            } else if (pr.list != null) {\n                for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                    java.lang.Iterable<java.lang.String> p = lookup.query(filter, propertyName, pv);\n                    if (paths == null) {\n                        paths = p;\n                    } else {\n                        paths = com.google.common.collect.Iterables.concat(paths, p);\n                    }\n                }\n            } else {\n                paths = lookup.query(filter, propertyName, null);\n            }\n        }\n    }\n    if (paths == null) {\n        throw new java.lang.IllegalStateException(\"Property index is used even when no index is available for filter \" + filter);\n    }\n    org.apache.jackrabbit.oak.spi.query.Cursor c = org.apache.jackrabbit.oak.spi.query.Cursors.newPathCursor(paths, filter.getQueryEngineSettings());\n    if (depth > 1) {\n        c = org.apache.jackrabbit.oak.spi.query.Cursors.newAncestorCursor(c, depth - 1, filter.getQueryEngineSettings());\n    }\n    return c;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (pr != null) {\n    java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n    depth = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(pr.propertyName);\n    if (lookup.isIndexed(propertyName, \"/\", filter)) {\n        if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n            paths = lookup.query(filter, propertyName, pr.first);\n        } else if (pr.list != null) {\n            for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                java.lang.Iterable<java.lang.String> p = lookup.query(filter, propertyName, pv);\n                if (paths == null) {\n                    paths = p;\n                } else {\n                    paths = com.google.common.collect.Iterables.concat(paths, p);\n                }\n            }\n        } else {\n            paths = lookup.query(filter, propertyName, null);\n        }\n    }\n}",
            "src_parent": "{\n    java.lang.Iterable<java.lang.String> paths = null;\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup = getLookup(root);\n    int depth = 1;\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cheapest = findCheapestProperty(filter, lookup);\n    org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr = cheapest.propertyRestriction;\n    if (pr != null) {\n        java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n        depth = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(pr.propertyName);\n        if (lookup.isIndexed(propertyName, \"/\", filter)) {\n            if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                paths = lookup.query(filter, propertyName, pr.first);\n            } else if (pr.list != null) {\n                for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                    java.lang.Iterable<java.lang.String> p = lookup.query(filter, propertyName, pv);\n                    if (paths == null) {\n                        paths = p;\n                    } else {\n                        paths = com.google.common.collect.Iterables.concat(paths, p);\n                    }\n                }\n            } else {\n                paths = lookup.query(filter, propertyName, null);\n            }\n        }\n    }\n    if (paths == null) {\n        throw new java.lang.IllegalStateException(\"Property index is used even when no index is available for filter \" + filter);\n    }\n    org.apache.jackrabbit.oak.spi.query.Cursor c = org.apache.jackrabbit.oak.spi.query.Cursors.newPathCursor(paths, filter.getQueryEngineSettings());\n    if (depth > 1) {\n        c = org.apache.jackrabbit.oak.spi.query.Cursors.newAncestorCursor(c, depth - 1, filter.getQueryEngineSettings());\n    }\n    return c;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cheapest = findCheapestProperty(filter, lookup)",
            "src_parent": "{\n    java.lang.StringBuilder buff = new java.lang.StringBuilder(\"property\");\n    java.lang.StringBuilder notIndexed = new java.lang.StringBuilder();\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup = getLookup(root);\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cheapest = findCheapestProperty(filter, lookup);\n    org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr = cheapest.propertyRestriction;\n    if (pr != null) {\n        java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n        if (lookup.isIndexed(propertyName, \"/\", filter)) {\n            if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                buff.append(' ').append(propertyName).append('=').append(pr.first);\n            } else {\n                buff.append(' ').append(propertyName);\n            }\n        } else if (pr.list != null) {\n            buff.append(' ').append(propertyName).append(\" IN(\");\n            int i = 0;\n            for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                if ((i++) > 0) {\n                    buff.append(\", \");\n                }\n                buff.append(pv);\n            }\n            buff.append(')');\n        } else {\n            notIndexed.append(' ').append(propertyName);\n            if (!pr.toString().isEmpty()) {\n                notIndexed.append(':').append(pr);\n            }\n        }\n    }\n    if (notIndexed.length() > 0) {\n        buff.append(\" (\").append(notIndexed.toString().trim()).append(\")\");\n    }\n    return buff.toString();\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr = cheapest.propertyRestriction",
            "src_parent": "{\n    java.lang.StringBuilder buff = new java.lang.StringBuilder(\"property\");\n    java.lang.StringBuilder notIndexed = new java.lang.StringBuilder();\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup = getLookup(root);\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cheapest = findCheapestProperty(filter, lookup);\n    org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr = cheapest.propertyRestriction;\n    if (pr != null) {\n        java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n        if (lookup.isIndexed(propertyName, \"/\", filter)) {\n            if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                buff.append(' ').append(propertyName).append('=').append(pr.first);\n            } else {\n                buff.append(' ').append(propertyName);\n            }\n        } else if (pr.list != null) {\n            buff.append(' ').append(propertyName).append(\" IN(\");\n            int i = 0;\n            for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                if ((i++) > 0) {\n                    buff.append(\", \");\n                }\n                buff.append(pv);\n            }\n            buff.append(')');\n        } else {\n            notIndexed.append(' ').append(propertyName);\n            if (!pr.toString().isEmpty()) {\n                notIndexed.append(':').append(pr);\n            }\n        }\n    }\n    if (notIndexed.length() > 0) {\n        buff.append(\" (\").append(notIndexed.toString().trim()).append(\")\");\n    }\n    return buff.toString();\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (pr != null) {\n    java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n    if (lookup.isIndexed(propertyName, \"/\", filter)) {\n        if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n            buff.append(' ').append(propertyName).append('=').append(pr.first);\n        } else {\n            buff.append(' ').append(propertyName);\n        }\n    } else if (pr.list != null) {\n        buff.append(' ').append(propertyName).append(\" IN(\");\n        int i = 0;\n        for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n            if ((i++) > 0) {\n                buff.append(\", \");\n            }\n            buff.append(pv);\n        }\n        buff.append(')');\n    } else {\n        notIndexed.append(' ').append(propertyName);\n        if (!pr.toString().isEmpty()) {\n            notIndexed.append(':').append(pr);\n        }\n    }\n}",
            "src_parent": "{\n    java.lang.StringBuilder buff = new java.lang.StringBuilder(\"property\");\n    java.lang.StringBuilder notIndexed = new java.lang.StringBuilder();\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup = getLookup(root);\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cheapest = findCheapestProperty(filter, lookup);\n    org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr = cheapest.propertyRestriction;\n    if (pr != null) {\n        java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n        if (lookup.isIndexed(propertyName, \"/\", filter)) {\n            if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                buff.append(' ').append(propertyName).append('=').append(pr.first);\n            } else {\n                buff.append(' ').append(propertyName);\n            }\n        } else if (pr.list != null) {\n            buff.append(' ').append(propertyName).append(\" IN(\");\n            int i = 0;\n            for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                if ((i++) > 0) {\n                    buff.append(\", \");\n                }\n                buff.append(pv);\n            }\n            buff.append(')');\n        } else {\n            notIndexed.append(' ').append(propertyName);\n            if (!pr.toString().isEmpty()) {\n                notIndexed.append(':').append(pr);\n            }\n        }\n    }\n    if (notIndexed.length() > 0) {\n        buff.append(\" (\").append(notIndexed.toString().trim()).append(\")\");\n    }\n    return buff.toString();\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "double propertyCost = java.lang.Double.POSITIVE_INFINITY",
            "src_parent": "{\n    java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n    double propertyCost = java.lang.Double.POSITIVE_INFINITY;\n    if (lookup.isIndexed(propertyName, \"/\", filter)) {\n        if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n            propertyCost = lookup.getCost(filter, propertyName, pr.first);\n        } else if (pr.list != null) {\n            propertyCost = 0;\n            for (org.apache.jackrabbit.oak.api.PropertyValue p : pr.list) {\n                propertyCost += lookup.getCost(filter, propertyName, p);\n            }\n        } else {\n            propertyCost = lookup.getCost(filter, propertyName, null);\n        }\n    }\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.LOG.debug(\"property cost for {} is {}\", propertyName, propertyCost);\n    if (propertyCost < cost.cost) {\n        cost.cost = propertyCost;\n        cost.propertyRestriction = pr;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.LOG.debug(\"property cost for {} is {}\", propertyName, propertyCost)",
            "src_parent": "{\n    java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n    double propertyCost = java.lang.Double.POSITIVE_INFINITY;\n    if (lookup.isIndexed(propertyName, \"/\", filter)) {\n        if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n            propertyCost = lookup.getCost(filter, propertyName, pr.first);\n        } else if (pr.list != null) {\n            propertyCost = 0;\n            for (org.apache.jackrabbit.oak.api.PropertyValue p : pr.list) {\n                propertyCost += lookup.getCost(filter, propertyName, p);\n            }\n        } else {\n            propertyCost = lookup.getCost(filter, propertyName, null);\n        }\n    }\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.LOG.debug(\"property cost for {} is {}\", propertyName, propertyCost);\n    if (propertyCost < cost.cost) {\n        cost.cost = propertyCost;\n        cost.propertyRestriction = pr;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (propertyCost < cost.cost) {\n    cost.cost = propertyCost;\n    cost.propertyRestriction = pr;\n}",
            "src_parent": "{\n    java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n    double propertyCost = java.lang.Double.POSITIVE_INFINITY;\n    if (lookup.isIndexed(propertyName, \"/\", filter)) {\n        if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n            propertyCost = lookup.getCost(filter, propertyName, pr.first);\n        } else if (pr.list != null) {\n            propertyCost = 0;\n            for (org.apache.jackrabbit.oak.api.PropertyValue p : pr.list) {\n                propertyCost += lookup.getCost(filter, propertyName, p);\n            }\n        } else {\n            propertyCost = lookup.getCost(filter, propertyName, null);\n        }\n    }\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.LOG.debug(\"property cost for {} is {}\", propertyName, propertyCost);\n    if (propertyCost < cost.cost) {\n        cost.cost = propertyCost;\n        cost.propertyRestriction = pr;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "propertyCost = lookup.getCost(filter, propertyName, pr.first)",
            "src_parent": "{\n    propertyCost = lookup.getCost(filter, propertyName, pr.first);\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "propertyCost = 0",
            "src_parent": "{\n    propertyCost = 0;\n    for (org.apache.jackrabbit.oak.api.PropertyValue p : pr.list) {\n        propertyCost += lookup.getCost(filter, propertyName, p);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "propertyCost = lookup.getCost(filter, propertyName, null)",
            "src_parent": "{\n    propertyCost = lookup.getCost(filter, propertyName, null);\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "for (org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr : filter.getPropertyRestrictions()) {\n    java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n    double propertyCost = java.lang.Double.POSITIVE_INFINITY;\n    if (lookup.isIndexed(propertyName, \"/\", filter)) {\n        if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n            propertyCost = lookup.getCost(filter, propertyName, pr.first);\n        } else if (pr.list != null) {\n            propertyCost = 0;\n            for (org.apache.jackrabbit.oak.api.PropertyValue p : pr.list) {\n                propertyCost += lookup.getCost(filter, propertyName, p);\n            }\n        } else {\n            propertyCost = lookup.getCost(filter, propertyName, null);\n        }\n    }\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.LOG.debug(\"property cost for {} is {}\", propertyName, propertyCost);\n    if (propertyCost < cost.cost) {\n        cost.cost = propertyCost;\n        cost.propertyRestriction = pr;\n    }\n}",
            "dst_parent": "{\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cost = new org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest();\n    for (org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr : filter.getPropertyRestrictions()) {\n        java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n        double propertyCost = java.lang.Double.POSITIVE_INFINITY;\n        if (lookup.isIndexed(propertyName, \"/\", filter)) {\n            if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                propertyCost = lookup.getCost(filter, propertyName, pr.first);\n            } else if (pr.list != null) {\n                propertyCost = 0;\n                for (org.apache.jackrabbit.oak.api.PropertyValue p : pr.list) {\n                    propertyCost += lookup.getCost(filter, propertyName, p);\n                }\n            } else {\n                propertyCost = lookup.getCost(filter, propertyName, null);\n            }\n        }\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.LOG.debug(\"property cost for {} is {}\", propertyName, propertyCost);\n        if (propertyCost < cost.cost) {\n            cost.cost = propertyCost;\n            cost.propertyRestriction = pr;\n        }\n    }\n    return cost;\n}",
            "dst_parent_type": "Block",
            "dst_type": "ForEach",
            "operator": "MOV",
            "src": "for (org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr : filter.getPropertyRestrictions()) {\n    java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n    if (lookup.isIndexed(propertyName, \"/\", filter)) {\n        if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n            return lookup.getCost(filter, propertyName, pr.first);\n        } else if (pr.list != null) {\n            double cost = 0;\n            for (org.apache.jackrabbit.oak.api.PropertyValue p : pr.list) {\n                cost += lookup.getCost(filter, propertyName, p);\n            }\n            return cost;\n        } else {\n            return lookup.getCost(filter, propertyName, null);\n        }\n    }\n}",
            "src_parent": "{\n    if (filter.getFullTextConstraint() != null) {\n        return java.lang.Double.POSITIVE_INFINITY;\n    }\n    if (filter.containsNativeConstraint()) {\n        return java.lang.Double.POSITIVE_INFINITY;\n    }\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexLookup lookup = getLookup(root);\n    for (org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr : filter.getPropertyRestrictions()) {\n        java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n        if (lookup.isIndexed(propertyName, \"/\", filter)) {\n            if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                return lookup.getCost(filter, propertyName, pr.first);\n            } else if (pr.list != null) {\n                double cost = 0;\n                for (org.apache.jackrabbit.oak.api.PropertyValue p : pr.list) {\n                    cost += lookup.getCost(filter, propertyName, p);\n                }\n                return cost;\n            } else {\n                return lookup.getCost(filter, propertyName, null);\n            }\n        }\n    }\n    return java.lang.Double.POSITIVE_INFINITY;\n}",
            "src_parent_type": "Block",
            "src_type": "ForEach"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return cost",
            "dst_parent": "{\n    org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest cost = new org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.Cheapest();\n    for (org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr : filter.getPropertyRestrictions()) {\n        java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n        double propertyCost = java.lang.Double.POSITIVE_INFINITY;\n        if (lookup.isIndexed(propertyName, \"/\", filter)) {\n            if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n                propertyCost = lookup.getCost(filter, propertyName, pr.first);\n            } else if (pr.list != null) {\n                propertyCost = 0;\n                for (org.apache.jackrabbit.oak.api.PropertyValue p : pr.list) {\n                    propertyCost += lookup.getCost(filter, propertyName, p);\n                }\n            } else {\n                propertyCost = lookup.getCost(filter, propertyName, null);\n            }\n        }\n        org.apache.jackrabbit.oak.plugins.index.property.PropertyIndex.LOG.debug(\"property cost for {} is {}\", propertyName, propertyCost);\n        if (propertyCost < cost.cost) {\n            cost.cost = propertyCost;\n            cost.propertyRestriction = pr;\n        }\n    }\n    return cost;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return cost",
            "src_parent": "{\n    double cost = 0;\n    for (org.apache.jackrabbit.oak.api.PropertyValue p : pr.list) {\n        cost += lookup.getCost(filter, propertyName, p);\n    }\n    return cost;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction",
            "dst_parent": "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr = cheapest.propertyRestriction",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction",
            "src_parent": "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction",
            "dst_parent": "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr = cheapest.propertyRestriction",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction",
            "src_parent": "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction pr",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName)",
            "dst_parent": "{\n    java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n    depth = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(pr.propertyName);\n    if (lookup.isIndexed(propertyName, \"/\", filter)) {\n        if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n            paths = lookup.query(filter, propertyName, pr.first);\n        } else if (pr.list != null) {\n            for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                java.lang.Iterable<java.lang.String> p = lookup.query(filter, propertyName, pv);\n                if (paths == null) {\n                    paths = p;\n                } else {\n                    paths = com.google.common.collect.Iterables.concat(paths, p);\n                }\n            }\n        } else {\n            paths = lookup.query(filter, propertyName, null);\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName)",
            "src_parent": "{\n    java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n    depth = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(pr.propertyName);\n    if (lookup.isIndexed(propertyName, \"/\", filter)) {\n        if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n            paths = lookup.query(filter, propertyName, pr.first);\n            break;\n        } else if (pr.list != null) {\n            for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                java.lang.Iterable<java.lang.String> p = lookup.query(filter, propertyName, pv);\n                if (paths == null) {\n                    paths = p;\n                } else {\n                    paths = com.google.common.collect.Iterables.concat(paths, p);\n                }\n            }\n            break;\n        } else {\n            paths = lookup.query(filter, propertyName, null);\n            break;\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "depth = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(pr.propertyName)",
            "dst_parent": "{\n    java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n    depth = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(pr.propertyName);\n    if (lookup.isIndexed(propertyName, \"/\", filter)) {\n        if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n            paths = lookup.query(filter, propertyName, pr.first);\n        } else if (pr.list != null) {\n            for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                java.lang.Iterable<java.lang.String> p = lookup.query(filter, propertyName, pv);\n                if (paths == null) {\n                    paths = p;\n                } else {\n                    paths = com.google.common.collect.Iterables.concat(paths, p);\n                }\n            }\n        } else {\n            paths = lookup.query(filter, propertyName, null);\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "depth = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(pr.propertyName)",
            "src_parent": "{\n    java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n    depth = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(pr.propertyName);\n    if (lookup.isIndexed(propertyName, \"/\", filter)) {\n        if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n            paths = lookup.query(filter, propertyName, pr.first);\n            break;\n        } else if (pr.list != null) {\n            for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                java.lang.Iterable<java.lang.String> p = lookup.query(filter, propertyName, pv);\n                if (paths == null) {\n                    paths = p;\n                } else {\n                    paths = com.google.common.collect.Iterables.concat(paths, p);\n                }\n            }\n            break;\n        } else {\n            paths = lookup.query(filter, propertyName, null);\n            break;\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (lookup.isIndexed(propertyName, \"/\", filter)) {\n    if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n        paths = lookup.query(filter, propertyName, pr.first);\n    } else if (pr.list != null) {\n        for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n            java.lang.Iterable<java.lang.String> p = lookup.query(filter, propertyName, pv);\n            if (paths == null) {\n                paths = p;\n            } else {\n                paths = com.google.common.collect.Iterables.concat(paths, p);\n            }\n        }\n    } else {\n        paths = lookup.query(filter, propertyName, null);\n    }\n}",
            "dst_parent": "{\n    java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n    depth = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(pr.propertyName);\n    if (lookup.isIndexed(propertyName, \"/\", filter)) {\n        if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n            paths = lookup.query(filter, propertyName, pr.first);\n        } else if (pr.list != null) {\n            for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                java.lang.Iterable<java.lang.String> p = lookup.query(filter, propertyName, pv);\n                if (paths == null) {\n                    paths = p;\n                } else {\n                    paths = com.google.common.collect.Iterables.concat(paths, p);\n                }\n            }\n        } else {\n            paths = lookup.query(filter, propertyName, null);\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (lookup.isIndexed(propertyName, \"/\", filter)) {\n    if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n        paths = lookup.query(filter, propertyName, pr.first);\n        break;\n    } else if (pr.list != null) {\n        for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n            java.lang.Iterable<java.lang.String> p = lookup.query(filter, propertyName, pv);\n            if (paths == null) {\n                paths = p;\n            } else {\n                paths = com.google.common.collect.Iterables.concat(paths, p);\n            }\n        }\n        break;\n    } else {\n        paths = lookup.query(filter, propertyName, null);\n        break;\n    }\n}",
            "src_parent": "{\n    java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n    depth = org.apache.jackrabbit.oak.commons.PathUtils.getDepth(pr.propertyName);\n    if (lookup.isIndexed(propertyName, \"/\", filter)) {\n        if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n            paths = lookup.query(filter, propertyName, pr.first);\n            break;\n        } else if (pr.list != null) {\n            for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n                java.lang.Iterable<java.lang.String> p = lookup.query(filter, propertyName, pv);\n                if (paths == null) {\n                    paths = p;\n                } else {\n                    paths = com.google.common.collect.Iterables.concat(paths, p);\n                }\n            }\n            break;\n        } else {\n            paths = lookup.query(filter, propertyName, null);\n            break;\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName)",
            "dst_parent": "{\n    java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n    if (lookup.isIndexed(propertyName, \"/\", filter)) {\n        if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n            buff.append(' ').append(propertyName).append('=').append(pr.first);\n        } else {\n            buff.append(' ').append(propertyName);\n        }\n    } else if (pr.list != null) {\n        buff.append(' ').append(propertyName).append(\" IN(\");\n        int i = 0;\n        for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n            if ((i++) > 0) {\n                buff.append(\", \");\n            }\n            buff.append(pv);\n        }\n        buff.append(')');\n    } else {\n        notIndexed.append(' ').append(propertyName);\n        if (!pr.toString().isEmpty()) {\n            notIndexed.append(':').append(pr);\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName)",
            "src_parent": "{\n    java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n    if (lookup.isIndexed(propertyName, \"/\", filter)) {\n        if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n            buff.append(' ').append(propertyName).append('=').append(pr.first);\n        } else {\n            buff.append(' ').append(propertyName);\n        }\n    } else if (pr.list != null) {\n        buff.append(' ').append(propertyName).append(\" IN(\");\n        int i = 0;\n        for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n            if ((i++) > 0) {\n                buff.append(\", \");\n            }\n            buff.append(pv);\n        }\n        buff.append(')');\n    } else {\n        notIndexed.append(' ').append(propertyName);\n        if (!pr.toString().isEmpty()) {\n            notIndexed.append(':').append(pr);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (lookup.isIndexed(propertyName, \"/\", filter)) {\n    if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n        buff.append(' ').append(propertyName).append('=').append(pr.first);\n    } else {\n        buff.append(' ').append(propertyName);\n    }\n} else if (pr.list != null) {\n    buff.append(' ').append(propertyName).append(\" IN(\");\n    int i = 0;\n    for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n        if ((i++) > 0) {\n            buff.append(\", \");\n        }\n        buff.append(pv);\n    }\n    buff.append(')');\n} else {\n    notIndexed.append(' ').append(propertyName);\n    if (!pr.toString().isEmpty()) {\n        notIndexed.append(':').append(pr);\n    }\n}",
            "dst_parent": "{\n    java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n    if (lookup.isIndexed(propertyName, \"/\", filter)) {\n        if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n            buff.append(' ').append(propertyName).append('=').append(pr.first);\n        } else {\n            buff.append(' ').append(propertyName);\n        }\n    } else if (pr.list != null) {\n        buff.append(' ').append(propertyName).append(\" IN(\");\n        int i = 0;\n        for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n            if ((i++) > 0) {\n                buff.append(\", \");\n            }\n            buff.append(pv);\n        }\n        buff.append(')');\n    } else {\n        notIndexed.append(' ').append(propertyName);\n        if (!pr.toString().isEmpty()) {\n            notIndexed.append(':').append(pr);\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (lookup.isIndexed(propertyName, \"/\", filter)) {\n    if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n        buff.append(' ').append(propertyName).append('=').append(pr.first);\n    } else {\n        buff.append(' ').append(propertyName);\n    }\n} else if (pr.list != null) {\n    buff.append(' ').append(propertyName).append(\" IN(\");\n    int i = 0;\n    for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n        if ((i++) > 0) {\n            buff.append(\", \");\n        }\n        buff.append(pv);\n    }\n    buff.append(')');\n} else {\n    notIndexed.append(' ').append(propertyName);\n    if (!pr.toString().isEmpty()) {\n        notIndexed.append(':').append(pr);\n    }\n}",
            "src_parent": "{\n    java.lang.String propertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(pr.propertyName);\n    if (lookup.isIndexed(propertyName, \"/\", filter)) {\n        if (((pr.firstIncluding && pr.lastIncluding) && (pr.first != null)) && pr.first.equals(pr.last)) {\n            buff.append(' ').append(propertyName).append('=').append(pr.first);\n        } else {\n            buff.append(' ').append(propertyName);\n        }\n    } else if (pr.list != null) {\n        buff.append(' ').append(propertyName).append(\" IN(\");\n        int i = 0;\n        for (org.apache.jackrabbit.oak.api.PropertyValue pv : pr.list) {\n            if ((i++) > 0) {\n                buff.append(\", \");\n            }\n            buff.append(pv);\n        }\n        buff.append(')');\n    } else {\n        notIndexed.append(' ').append(propertyName);\n        if (!pr.toString().isEmpty()) {\n            notIndexed.append(':').append(pr);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Double",
            "dst_parent": "java.lang.Double.POSITIVE_INFINITY",
            "dst_parent_type": "FieldRead",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "java.lang.Double",
            "src_parent": "java.lang.Double.POSITIVE_INFINITY",
            "src_parent_type": "FieldRead",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "lookup.getCost(filter, propertyName, pr.first)",
            "dst_parent": "propertyCost = lookup.getCost(filter, propertyName, pr.first)",
            "dst_parent_type": "Assignment",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "lookup.getCost(filter, propertyName, pr.first)",
            "src_parent": "return lookup.getCost(filter, propertyName, pr.first)",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "lookup.getCost(filter, propertyName, null)",
            "dst_parent": "propertyCost = lookup.getCost(filter, propertyName, null)",
            "dst_parent_type": "Assignment",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "lookup.getCost(filter, propertyName, null)",
            "src_parent": "return lookup.getCost(filter, propertyName, null)",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "PropertyIndex"
    }
  ],
  "id": "jackrabbit-oak_35562cce"
}