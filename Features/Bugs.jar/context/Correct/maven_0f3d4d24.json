{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "boolean warnOnly = request.getValidationLevel() < org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0",
            "dst_parent": "{\n    validateStringNotEmpty(\"modelVersion\", problems, false, model.getModelVersion());\n    validateId(\"groupId\", problems, model.getGroupId());\n    validateId(\"artifactId\", problems, model.getArtifactId());\n    validateStringNotEmpty(\"packaging\", problems, false, model.getPackaging());\n    if ((!model.getModules().isEmpty()) && (!\"pom\".equals(model.getPackaging()))) {\n        addViolation(problems, false, ((\"Packaging '\" + model.getPackaging()) + \"' is invalid. Aggregator projects \") + \"require 'pom' as packaging.\");\n    }\n    org.apache.maven.model.Parent parent = model.getParent();\n    if (parent != null) {\n        if (parent.getGroupId().equals(model.getGroupId()) && parent.getArtifactId().equals(model.getArtifactId())) {\n            addViolation(problems, false, \"The parent element cannot have the same ID as the project.\");\n        }\n    }\n    validateStringNotEmpty(\"version\", problems, false, model.getVersion());\n    boolean warnOnly = request.getValidationLevel() < org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;\n    for (org.apache.maven.model.Dependency d : model.getDependencies()) {\n        validateId(\"dependencies.dependency.artifactId\", problems, d.getArtifactId());\n        validateId(\"dependencies.dependency.groupId\", problems, d.getGroupId());\n        validateStringNotEmpty(\"dependencies.dependency.type\", problems, false, d.getType(), d.getManagementKey());\n        validateStringNotEmpty(\"dependencies.dependency.version\", problems, false, d.getVersion(), d.getManagementKey());\n        if (\"system\".equals(d.getScope())) {\n            java.lang.String systemPath = d.getSystemPath();\n            if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n                addViolation(problems, false, (\"For dependency \" + d) + \": system-scoped dependency must specify systemPath.\");\n            } else if (!new java.io.File(systemPath).isAbsolute()) {\n                addViolation(problems, false, ((\"For dependency \" + d) + \": system-scoped dependency must \") + \"specify an absolute path systemPath.\");\n            }\n        } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n            addViolation(problems, false, (\"For dependency \" + d) + \": only dependency with system scope can specify systemPath.\");\n        }\n        if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n            validateVersion(\"dependencies.dependency.version\", problems, warnOnly, d.getVersion(), d.getManagementKey());\n            validateBoolean(\"dependencies.dependency.optional\", problems, warnOnly, d.getOptional(), d.getManagementKey());\n            validateEnum(\"dependencies.dependency.scope\", problems, true, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n        }\n    }\n    org.apache.maven.model.DependencyManagement mgmt = model.getDependencyManagement();\n    if (mgmt != null) {\n        for (org.apache.maven.model.Dependency d : mgmt.getDependencies()) {\n            validateSubElementStringNotEmpty(d, \"dependencyManagement.dependencies.dependency.artifactId\", problems, d.getArtifactId());\n            validateSubElementStringNotEmpty(d, \"dependencyManagement.dependencies.dependency.groupId\", problems, d.getGroupId());\n            if (\"system\".equals(d.getScope())) {\n                java.lang.String systemPath = d.getSystemPath();\n                if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n                    addViolation(problems, false, (\"For managed dependency \" + d) + \": system-scoped dependency must specify systemPath.\");\n                } else if (!new java.io.File(systemPath).isAbsolute()) {\n                    addViolation(problems, false, ((\"For managed dependency \" + d) + \": system-scoped dependency must \") + \"specify an absolute path systemPath.\");\n                }\n            } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n                addViolation(problems, false, (\"For managed dependency \" + d) + \": only dependency with system scope can specify systemPath.\");\n            }\n            if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n                validateBoolean(\"dependencyManagement.dependencies.dependency.optional\", problems, warnOnly, d.getOptional(), d.getManagementKey());\n            }\n        }\n    }\n    if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n        boolean warnOnMissingPluginVersion = request.getValidationLevel() < org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1;\n        org.apache.maven.model.Build build = model.getBuild();\n        if (build != null) {\n            for (org.apache.maven.model.Plugin p : build.getPlugins()) {\n                validateStringNotEmpty(\"build.plugins.plugin.artifactId\", problems, false, p.getArtifactId());\n                validateStringNotEmpty(\"build.plugins.plugin.groupId\", problems, false, p.getGroupId());\n                validateStringNotEmpty(\"build.plugins.plugin.version\", problems, warnOnMissingPluginVersion, p.getVersion(), p.getKey());\n                validateBoolean(\"build.plugins.plugin.inherited\", problems, warnOnly, p.getInherited(), p.getKey());\n                validateBoolean(\"build.plugins.plugin.extensions\", problems, warnOnly, p.getExtensions(), p.getKey());\n                for (org.apache.maven.model.Dependency d : p.getDependencies()) {\n                    validateEnum((\"build.plugins.plugin[\" + p.getKey()) + \"].dependencies.dependency.scope\", problems, warnOnly, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\");\n                }\n            }\n            validateResources(problems, build.getResources(), \"build.resources.resource\", request);\n            validateResources(problems, build.getTestResources(), \"build.testResources.testResource\", request);\n        }\n        org.apache.maven.model.Reporting reporting = model.getReporting();\n        if (reporting != null) {\n            for (org.apache.maven.model.ReportPlugin p : reporting.getPlugins()) {\n                validateStringNotEmpty(\"reporting.plugins.plugin.artifactId\", problems, false, p.getArtifactId());\n                validateStringNotEmpty(\"reporting.plugins.plugin.groupId\", problems, false, p.getGroupId());\n                validateStringNotEmpty(\"reporting.plugins.plugin.version\", problems, warnOnMissingPluginVersion, p.getVersion(), p.getKey());\n            }\n        }\n        forcePluginExecutionIdCollision(model, problems);\n        for (org.apache.maven.model.Repository repository : model.getRepositories()) {\n            validateRepositoryLayout(problems, repository, \"repositories.repository\", request);\n        }\n        for (org.apache.maven.model.Repository repository : model.getPluginRepositories()) {\n            validateRepositoryLayout(problems, repository, \"pluginRepositories.pluginRepository\", request);\n        }\n        org.apache.maven.model.DistributionManagement distMgmt = model.getDistributionManagement();\n        if (distMgmt != null) {\n            validateRepositoryLayout(problems, distMgmt.getRepository(), \"distributionManagement.repository\", request);\n            validateRepositoryLayout(problems, distMgmt.getSnapshotRepository(), \"distributionManagement.snapshotRepository\", request);\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "UPD",
            "src": "boolean warnOnBadBoolean = request.getValidationLevel() < org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0",
            "src_parent": "{\n    validateStringNotEmpty(\"modelVersion\", problems, false, model.getModelVersion());\n    validateId(\"groupId\", problems, model.getGroupId());\n    validateId(\"artifactId\", problems, model.getArtifactId());\n    validateStringNotEmpty(\"packaging\", problems, false, model.getPackaging());\n    if ((!model.getModules().isEmpty()) && (!\"pom\".equals(model.getPackaging()))) {\n        addViolation(problems, false, ((\"Packaging '\" + model.getPackaging()) + \"' is invalid. Aggregator projects \") + \"require 'pom' as packaging.\");\n    }\n    org.apache.maven.model.Parent parent = model.getParent();\n    if (parent != null) {\n        if (parent.getGroupId().equals(model.getGroupId()) && parent.getArtifactId().equals(model.getArtifactId())) {\n            addViolation(problems, false, \"The parent element cannot have the same ID as the project.\");\n        }\n    }\n    validateStringNotEmpty(\"version\", problems, false, model.getVersion());\n    boolean warnOnBadBoolean = request.getValidationLevel() < org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;\n    boolean warnOnBadDependencyScope = request.getValidationLevel() < org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;\n    for (org.apache.maven.model.Dependency d : model.getDependencies()) {\n        validateId(\"dependencies.dependency.artifactId\", problems, d.getArtifactId());\n        validateId(\"dependencies.dependency.groupId\", problems, d.getGroupId());\n        validateStringNotEmpty(\"dependencies.dependency.type\", problems, false, d.getType(), d.getManagementKey());\n        validateStringNotEmpty(\"dependencies.dependency.version\", problems, false, d.getVersion(), d.getManagementKey());\n        if (\"system\".equals(d.getScope())) {\n            java.lang.String systemPath = d.getSystemPath();\n            if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n                addViolation(problems, false, (\"For dependency \" + d) + \": system-scoped dependency must specify systemPath.\");\n            } else if (!new java.io.File(systemPath).isAbsolute()) {\n                addViolation(problems, false, ((\"For dependency \" + d) + \": system-scoped dependency must \") + \"specify an absolute path systemPath.\");\n            }\n        } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n            addViolation(problems, false, (\"For dependency \" + d) + \": only dependency with system scope can specify systemPath.\");\n        }\n        if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n            validateBoolean(\"dependencies.dependency.optional\", problems, warnOnBadBoolean, d.getOptional(), d.getManagementKey());\n            validateEnum(\"dependencies.dependency.scope\", problems, true, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n        }\n    }\n    org.apache.maven.model.DependencyManagement mgmt = model.getDependencyManagement();\n    if (mgmt != null) {\n        for (org.apache.maven.model.Dependency d : mgmt.getDependencies()) {\n            validateSubElementStringNotEmpty(d, \"dependencyManagement.dependencies.dependency.artifactId\", problems, d.getArtifactId());\n            validateSubElementStringNotEmpty(d, \"dependencyManagement.dependencies.dependency.groupId\", problems, d.getGroupId());\n            if (\"system\".equals(d.getScope())) {\n                java.lang.String systemPath = d.getSystemPath();\n                if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n                    addViolation(problems, false, (\"For managed dependency \" + d) + \": system-scoped dependency must specify systemPath.\");\n                } else if (!new java.io.File(systemPath).isAbsolute()) {\n                    addViolation(problems, false, ((\"For managed dependency \" + d) + \": system-scoped dependency must \") + \"specify an absolute path systemPath.\");\n                }\n            } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n                addViolation(problems, false, (\"For managed dependency \" + d) + \": only dependency with system scope can specify systemPath.\");\n            }\n            if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n                validateBoolean(\"dependencyManagement.dependencies.dependency.optional\", problems, warnOnBadBoolean, d.getOptional(), d.getManagementKey());\n            }\n        }\n    }\n    if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n        boolean warnOnMissingPluginVersion = request.getValidationLevel() < org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1;\n        org.apache.maven.model.Build build = model.getBuild();\n        if (build != null) {\n            for (org.apache.maven.model.Plugin p : build.getPlugins()) {\n                validateStringNotEmpty(\"build.plugins.plugin.artifactId\", problems, false, p.getArtifactId());\n                validateStringNotEmpty(\"build.plugins.plugin.groupId\", problems, false, p.getGroupId());\n                validateStringNotEmpty(\"build.plugins.plugin.version\", problems, warnOnMissingPluginVersion, p.getVersion(), p.getKey());\n                validateBoolean(\"build.plugins.plugin.inherited\", problems, warnOnBadBoolean, p.getInherited(), p.getKey());\n                validateBoolean(\"build.plugins.plugin.extensions\", problems, warnOnBadBoolean, p.getExtensions(), p.getKey());\n                for (org.apache.maven.model.Dependency d : p.getDependencies()) {\n                    validateEnum((\"build.plugins.plugin[\" + p.getKey()) + \"].dependencies.dependency.scope\", problems, warnOnBadDependencyScope, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\");\n                }\n            }\n            validateResources(problems, build.getResources(), \"build.resources.resource\", request);\n            validateResources(problems, build.getTestResources(), \"build.testResources.testResource\", request);\n        }\n        org.apache.maven.model.Reporting reporting = model.getReporting();\n        if (reporting != null) {\n            for (org.apache.maven.model.ReportPlugin p : reporting.getPlugins()) {\n                validateStringNotEmpty(\"reporting.plugins.plugin.artifactId\", problems, false, p.getArtifactId());\n                validateStringNotEmpty(\"reporting.plugins.plugin.groupId\", problems, false, p.getGroupId());\n                validateStringNotEmpty(\"reporting.plugins.plugin.version\", problems, warnOnMissingPluginVersion, p.getVersion(), p.getKey());\n            }\n        }\n        forcePluginExecutionIdCollision(model, problems);\n        for (org.apache.maven.model.Repository repository : model.getRepositories()) {\n            validateRepositoryLayout(problems, repository, \"repositories.repository\", request);\n        }\n        for (org.apache.maven.model.Repository repository : model.getPluginRepositories()) {\n            validateRepositoryLayout(problems, repository, \"pluginRepositories.pluginRepository\", request);\n        }\n        org.apache.maven.model.DistributionManagement distMgmt = model.getDistributionManagement();\n        if (distMgmt != null) {\n            validateRepositoryLayout(problems, distMgmt.getRepository(), \"distributionManagement.repository\", request);\n            validateRepositoryLayout(problems, distMgmt.getSnapshotRepository(), \"distributionManagement.snapshotRepository\", request);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "warnOnly",
            "dst_parent": "validateBoolean(\"dependencies.dependency.optional\", problems, warnOnly, d.getOptional(), d.getManagementKey())",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "warnOnBadBoolean",
            "src_parent": "validateBoolean(\"dependencies.dependency.optional\", problems, warnOnBadBoolean, d.getOptional(), d.getManagementKey())",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "warnOnly",
            "dst_parent": "validateBoolean(\"dependencyManagement.dependencies.dependency.optional\", problems, warnOnly, d.getOptional(), d.getManagementKey())",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "warnOnBadBoolean",
            "src_parent": "validateBoolean(\"dependencyManagement.dependencies.dependency.optional\", problems, warnOnBadBoolean, d.getOptional(), d.getManagementKey())",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "warnOnly",
            "dst_parent": "validateBoolean(\"build.plugins.plugin.inherited\", problems, warnOnly, p.getInherited(), p.getKey())",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "warnOnBadBoolean",
            "src_parent": "validateBoolean(\"build.plugins.plugin.inherited\", problems, warnOnBadBoolean, p.getInherited(), p.getKey())",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "warnOnly",
            "dst_parent": "validateBoolean(\"build.plugins.plugin.extensions\", problems, warnOnly, p.getExtensions(), p.getKey())",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "warnOnBadBoolean",
            "src_parent": "validateBoolean(\"build.plugins.plugin.extensions\", problems, warnOnBadBoolean, p.getExtensions(), p.getKey())",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "\"' must be 'true' or 'false' but is '\"",
            "dst_parent": "((\"'\" + fieldName) + \"' must be 'true' or 'false' but is '\")",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Literal",
            "operator": "UPD",
            "src": "\"' must be 'true' or 'false'.\"",
            "src_parent": "(\"'\" + fieldName) + \"' must be 'true' or 'false'.\"",
            "src_parent_type": "BinaryOperator",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "warnOnly",
            "dst_parent": "validateEnum((\"build.plugins.plugin[\" + p.getKey()) + \"].dependencies.dependency.scope\", problems, warnOnly, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\")",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "warnOnBadDependencyScope",
            "src_parent": "validateEnum((\"build.plugins.plugin[\" + p.getKey()) + \"].dependencies.dependency.scope\", problems, warnOnBadDependencyScope, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\")",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "boolean warnOnBadDependencyScope = request.getValidationLevel() < org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0",
            "src_parent": "{\n    validateStringNotEmpty(\"modelVersion\", problems, false, model.getModelVersion());\n    validateId(\"groupId\", problems, model.getGroupId());\n    validateId(\"artifactId\", problems, model.getArtifactId());\n    validateStringNotEmpty(\"packaging\", problems, false, model.getPackaging());\n    if ((!model.getModules().isEmpty()) && (!\"pom\".equals(model.getPackaging()))) {\n        addViolation(problems, false, ((\"Packaging '\" + model.getPackaging()) + \"' is invalid. Aggregator projects \") + \"require 'pom' as packaging.\");\n    }\n    org.apache.maven.model.Parent parent = model.getParent();\n    if (parent != null) {\n        if (parent.getGroupId().equals(model.getGroupId()) && parent.getArtifactId().equals(model.getArtifactId())) {\n            addViolation(problems, false, \"The parent element cannot have the same ID as the project.\");\n        }\n    }\n    validateStringNotEmpty(\"version\", problems, false, model.getVersion());\n    boolean warnOnBadBoolean = request.getValidationLevel() < org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;\n    boolean warnOnBadDependencyScope = request.getValidationLevel() < org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;\n    for (org.apache.maven.model.Dependency d : model.getDependencies()) {\n        validateId(\"dependencies.dependency.artifactId\", problems, d.getArtifactId());\n        validateId(\"dependencies.dependency.groupId\", problems, d.getGroupId());\n        validateStringNotEmpty(\"dependencies.dependency.type\", problems, false, d.getType(), d.getManagementKey());\n        validateStringNotEmpty(\"dependencies.dependency.version\", problems, false, d.getVersion(), d.getManagementKey());\n        if (\"system\".equals(d.getScope())) {\n            java.lang.String systemPath = d.getSystemPath();\n            if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n                addViolation(problems, false, (\"For dependency \" + d) + \": system-scoped dependency must specify systemPath.\");\n            } else if (!new java.io.File(systemPath).isAbsolute()) {\n                addViolation(problems, false, ((\"For dependency \" + d) + \": system-scoped dependency must \") + \"specify an absolute path systemPath.\");\n            }\n        } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n            addViolation(problems, false, (\"For dependency \" + d) + \": only dependency with system scope can specify systemPath.\");\n        }\n        if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n            validateBoolean(\"dependencies.dependency.optional\", problems, warnOnBadBoolean, d.getOptional(), d.getManagementKey());\n            validateEnum(\"dependencies.dependency.scope\", problems, true, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n        }\n    }\n    org.apache.maven.model.DependencyManagement mgmt = model.getDependencyManagement();\n    if (mgmt != null) {\n        for (org.apache.maven.model.Dependency d : mgmt.getDependencies()) {\n            validateSubElementStringNotEmpty(d, \"dependencyManagement.dependencies.dependency.artifactId\", problems, d.getArtifactId());\n            validateSubElementStringNotEmpty(d, \"dependencyManagement.dependencies.dependency.groupId\", problems, d.getGroupId());\n            if (\"system\".equals(d.getScope())) {\n                java.lang.String systemPath = d.getSystemPath();\n                if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n                    addViolation(problems, false, (\"For managed dependency \" + d) + \": system-scoped dependency must specify systemPath.\");\n                } else if (!new java.io.File(systemPath).isAbsolute()) {\n                    addViolation(problems, false, ((\"For managed dependency \" + d) + \": system-scoped dependency must \") + \"specify an absolute path systemPath.\");\n                }\n            } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n                addViolation(problems, false, (\"For managed dependency \" + d) + \": only dependency with system scope can specify systemPath.\");\n            }\n            if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n                validateBoolean(\"dependencyManagement.dependencies.dependency.optional\", problems, warnOnBadBoolean, d.getOptional(), d.getManagementKey());\n            }\n        }\n    }\n    if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n        boolean warnOnMissingPluginVersion = request.getValidationLevel() < org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1;\n        org.apache.maven.model.Build build = model.getBuild();\n        if (build != null) {\n            for (org.apache.maven.model.Plugin p : build.getPlugins()) {\n                validateStringNotEmpty(\"build.plugins.plugin.artifactId\", problems, false, p.getArtifactId());\n                validateStringNotEmpty(\"build.plugins.plugin.groupId\", problems, false, p.getGroupId());\n                validateStringNotEmpty(\"build.plugins.plugin.version\", problems, warnOnMissingPluginVersion, p.getVersion(), p.getKey());\n                validateBoolean(\"build.plugins.plugin.inherited\", problems, warnOnBadBoolean, p.getInherited(), p.getKey());\n                validateBoolean(\"build.plugins.plugin.extensions\", problems, warnOnBadBoolean, p.getExtensions(), p.getKey());\n                for (org.apache.maven.model.Dependency d : p.getDependencies()) {\n                    validateEnum((\"build.plugins.plugin[\" + p.getKey()) + \"].dependencies.dependency.scope\", problems, warnOnBadDependencyScope, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\");\n                }\n            }\n            validateResources(problems, build.getResources(), \"build.resources.resource\", request);\n            validateResources(problems, build.getTestResources(), \"build.testResources.testResource\", request);\n        }\n        org.apache.maven.model.Reporting reporting = model.getReporting();\n        if (reporting != null) {\n            for (org.apache.maven.model.ReportPlugin p : reporting.getPlugins()) {\n                validateStringNotEmpty(\"reporting.plugins.plugin.artifactId\", problems, false, p.getArtifactId());\n                validateStringNotEmpty(\"reporting.plugins.plugin.groupId\", problems, false, p.getGroupId());\n                validateStringNotEmpty(\"reporting.plugins.plugin.version\", problems, warnOnMissingPluginVersion, p.getVersion(), p.getKey());\n            }\n        }\n        forcePluginExecutionIdCollision(model, problems);\n        for (org.apache.maven.model.Repository repository : model.getRepositories()) {\n            validateRepositoryLayout(problems, repository, \"repositories.repository\", request);\n        }\n        for (org.apache.maven.model.Repository repository : model.getPluginRepositories()) {\n            validateRepositoryLayout(problems, repository, \"pluginRepositories.pluginRepository\", request);\n        }\n        org.apache.maven.model.DistributionManagement distMgmt = model.getDistributionManagement();\n        if (distMgmt != null) {\n            validateRepositoryLayout(problems, distMgmt.getRepository(), \"distributionManagement.repository\", request);\n            validateRepositoryLayout(problems, distMgmt.getSnapshotRepository(), \"distributionManagement.snapshotRepository\", request);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private boolean validateVersion(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, boolean warning, java.lang.String string, java.lang.String sourceHint) {\n    if ((string == null) || (string.length() <= 0)) {\n        return true;\n    }\n    if (!hasExpression(string)) {\n        return true;\n    }\n    if (sourceHint != null) {\n        addViolation(problems, warning, (((((\"'\" + fieldName) + \"' must be a valid version for \") + sourceHint) + \" but is '\") + string) + \"'.\");\n    } else {\n        addViolation(problems, warning, (((\"'\" + fieldName) + \"' must be a valid version but is '\") + string) + \"'.\");\n    }\n    return false;\n}",
            "src_parent": "@org.codehaus.plexus.component.annotations.Component(role = org.apache.maven.model.validation.ModelValidator.class)\npublic class DefaultModelValidator implements org.apache.maven.model.validation.ModelValidator {\n    private static final java.lang.String ID_REGEX = \"[A-Za-z0-9_\\\\-.]+\";\n\n    public void validateRawModel(org.apache.maven.model.Model model, org.apache.maven.model.building.ModelBuildingRequest request, org.apache.maven.model.building.ModelProblemCollector problems) {\n        org.apache.maven.model.Parent parent = model.getParent();\n        if (parent != null) {\n            validateStringNotEmpty(\"parent.groupId\", problems, false, parent.getGroupId());\n            validateStringNotEmpty(\"parent.artifactId\", problems, false, parent.getArtifactId());\n            validateStringNotEmpty(\"parent.version\", problems, false, parent.getVersion());\n            if (parent.getGroupId().equals(model.getGroupId()) && parent.getArtifactId().equals(model.getArtifactId())) {\n                addViolation(problems, false, \"The parent element cannot have the same ID as the project.\");\n            }\n        }\n        if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n            validateEnum(\"modelVersion\", problems, false, model.getModelVersion(), null, \"4.0.0\");\n            validateStringNoExpression(\"groupId\", problems, true, model.getGroupId());\n            validateStringNoExpression(\"artifactId\", problems, true, model.getArtifactId());\n            validateStringNoExpression(\"version\", problems, true, model.getVersion());\n            validateDependencies(problems, model.getDependencies(), \"dependencies.dependency\", request);\n            if (model.getDependencyManagement() != null) {\n                validateDependencies(problems, model.getDependencyManagement().getDependencies(), \"dependencyManagement.dependencies.dependency\", request);\n            }\n            validateRepositories(problems, model.getRepositories(), \"repositories.repository\", request);\n            validateRepositories(problems, model.getPluginRepositories(), \"pluginRepositories.pluginRepository\", request);\n            for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n                validateDependencies(problems, profile.getDependencies(), (\"profiles.profile[\" + profile.getId()) + \"].dependencies.dependency\", request);\n                if (profile.getDependencyManagement() != null) {\n                    validateDependencies(problems, profile.getDependencyManagement().getDependencies(), (\"profiles.profile[\" + profile.getId()) + \"].dependencyManagement.dependencies.dependency\", request);\n                }\n                validateRepositories(problems, profile.getRepositories(), (\"profiles.profile[\" + profile.getId()) + \"].repositories.repository\", request);\n                validateRepositories(problems, profile.getPluginRepositories(), (\"profiles.profile[\" + profile.getId()) + \"].pluginRepositories.pluginRepository\", request);\n            }\n        }\n    }\n\n    public void validateEffectiveModel(org.apache.maven.model.Model model, org.apache.maven.model.building.ModelBuildingRequest request, org.apache.maven.model.building.ModelProblemCollector problems) {\n        validateStringNotEmpty(\"modelVersion\", problems, false, model.getModelVersion());\n        validateId(\"groupId\", problems, model.getGroupId());\n        validateId(\"artifactId\", problems, model.getArtifactId());\n        validateStringNotEmpty(\"packaging\", problems, false, model.getPackaging());\n        if ((!model.getModules().isEmpty()) && (!\"pom\".equals(model.getPackaging()))) {\n            addViolation(problems, false, ((\"Packaging '\" + model.getPackaging()) + \"' is invalid. Aggregator projects \") + \"require 'pom' as packaging.\");\n        }\n        org.apache.maven.model.Parent parent = model.getParent();\n        if (parent != null) {\n            if (parent.getGroupId().equals(model.getGroupId()) && parent.getArtifactId().equals(model.getArtifactId())) {\n                addViolation(problems, false, \"The parent element cannot have the same ID as the project.\");\n            }\n        }\n        validateStringNotEmpty(\"version\", problems, false, model.getVersion());\n        boolean warnOnly = request.getValidationLevel() < org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;\n        for (org.apache.maven.model.Dependency d : model.getDependencies()) {\n            validateId(\"dependencies.dependency.artifactId\", problems, d.getArtifactId());\n            validateId(\"dependencies.dependency.groupId\", problems, d.getGroupId());\n            validateStringNotEmpty(\"dependencies.dependency.type\", problems, false, d.getType(), d.getManagementKey());\n            validateStringNotEmpty(\"dependencies.dependency.version\", problems, false, d.getVersion(), d.getManagementKey());\n            if (\"system\".equals(d.getScope())) {\n                java.lang.String systemPath = d.getSystemPath();\n                if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n                    addViolation(problems, false, (\"For dependency \" + d) + \": system-scoped dependency must specify systemPath.\");\n                } else if (!new java.io.File(systemPath).isAbsolute()) {\n                    addViolation(problems, false, ((\"For dependency \" + d) + \": system-scoped dependency must \") + \"specify an absolute path systemPath.\");\n                }\n            } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n                addViolation(problems, false, (\"For dependency \" + d) + \": only dependency with system scope can specify systemPath.\");\n            }\n            if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n                validateVersion(\"dependencies.dependency.version\", problems, warnOnly, d.getVersion(), d.getManagementKey());\n                validateBoolean(\"dependencies.dependency.optional\", problems, warnOnly, d.getOptional(), d.getManagementKey());\n                validateEnum(\"dependencies.dependency.scope\", problems, true, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n            }\n        }\n        org.apache.maven.model.DependencyManagement mgmt = model.getDependencyManagement();\n        if (mgmt != null) {\n            for (org.apache.maven.model.Dependency d : mgmt.getDependencies()) {\n                validateSubElementStringNotEmpty(d, \"dependencyManagement.dependencies.dependency.artifactId\", problems, d.getArtifactId());\n                validateSubElementStringNotEmpty(d, \"dependencyManagement.dependencies.dependency.groupId\", problems, d.getGroupId());\n                if (\"system\".equals(d.getScope())) {\n                    java.lang.String systemPath = d.getSystemPath();\n                    if (org.codehaus.plexus.util.StringUtils.isEmpty(systemPath)) {\n                        addViolation(problems, false, (\"For managed dependency \" + d) + \": system-scoped dependency must specify systemPath.\");\n                    } else if (!new java.io.File(systemPath).isAbsolute()) {\n                        addViolation(problems, false, ((\"For managed dependency \" + d) + \": system-scoped dependency must \") + \"specify an absolute path systemPath.\");\n                    }\n                } else if (org.codehaus.plexus.util.StringUtils.isNotEmpty(d.getSystemPath())) {\n                    addViolation(problems, false, (\"For managed dependency \" + d) + \": only dependency with system scope can specify systemPath.\");\n                }\n                if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n                    validateBoolean(\"dependencyManagement.dependencies.dependency.optional\", problems, warnOnly, d.getOptional(), d.getManagementKey());\n                }\n            }\n        }\n        if (request.getValidationLevel() >= org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {\n            boolean warnOnMissingPluginVersion = request.getValidationLevel() < org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1;\n            org.apache.maven.model.Build build = model.getBuild();\n            if (build != null) {\n                for (org.apache.maven.model.Plugin p : build.getPlugins()) {\n                    validateStringNotEmpty(\"build.plugins.plugin.artifactId\", problems, false, p.getArtifactId());\n                    validateStringNotEmpty(\"build.plugins.plugin.groupId\", problems, false, p.getGroupId());\n                    validateStringNotEmpty(\"build.plugins.plugin.version\", problems, warnOnMissingPluginVersion, p.getVersion(), p.getKey());\n                    validateBoolean(\"build.plugins.plugin.inherited\", problems, warnOnly, p.getInherited(), p.getKey());\n                    validateBoolean(\"build.plugins.plugin.extensions\", problems, warnOnly, p.getExtensions(), p.getKey());\n                    for (org.apache.maven.model.Dependency d : p.getDependencies()) {\n                        validateEnum((\"build.plugins.plugin[\" + p.getKey()) + \"].dependencies.dependency.scope\", problems, warnOnly, d.getScope(), d.getManagementKey(), \"compile\", \"runtime\", \"system\");\n                    }\n                }\n                validateResources(problems, build.getResources(), \"build.resources.resource\", request);\n                validateResources(problems, build.getTestResources(), \"build.testResources.testResource\", request);\n            }\n            org.apache.maven.model.Reporting reporting = model.getReporting();\n            if (reporting != null) {\n                for (org.apache.maven.model.ReportPlugin p : reporting.getPlugins()) {\n                    validateStringNotEmpty(\"reporting.plugins.plugin.artifactId\", problems, false, p.getArtifactId());\n                    validateStringNotEmpty(\"reporting.plugins.plugin.groupId\", problems, false, p.getGroupId());\n                    validateStringNotEmpty(\"reporting.plugins.plugin.version\", problems, warnOnMissingPluginVersion, p.getVersion(), p.getKey());\n                }\n            }\n            forcePluginExecutionIdCollision(model, problems);\n            for (org.apache.maven.model.Repository repository : model.getRepositories()) {\n                validateRepositoryLayout(problems, repository, \"repositories.repository\", request);\n            }\n            for (org.apache.maven.model.Repository repository : model.getPluginRepositories()) {\n                validateRepositoryLayout(problems, repository, \"pluginRepositories.pluginRepository\", request);\n            }\n            org.apache.maven.model.DistributionManagement distMgmt = model.getDistributionManagement();\n            if (distMgmt != null) {\n                validateRepositoryLayout(problems, distMgmt.getRepository(), \"distributionManagement.repository\", request);\n                validateRepositoryLayout(problems, distMgmt.getSnapshotRepository(), \"distributionManagement.snapshotRepository\", request);\n            }\n        }\n    }\n\n    private boolean validateId(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, java.lang.String id) {\n        if (!validateStringNotEmpty(fieldName, problems, false, id)) {\n            return false;\n        } else {\n            boolean match = id.matches(org.apache.maven.model.validation.DefaultModelValidator.ID_REGEX);\n            if (!match) {\n                addViolation(problems, false, (((\"'\" + fieldName) + \"' with value '\") + id) + \"' does not match a valid id pattern.\");\n            }\n            return match;\n        }\n    }\n\n    private void validateDependencies(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Dependency> dependencies, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        java.util.Map<java.lang.String, org.apache.maven.model.Dependency> index = new java.util.HashMap<java.lang.String, org.apache.maven.model.Dependency>();\n        for (org.apache.maven.model.Dependency dependency : dependencies) {\n            java.lang.String key = dependency.getManagementKey();\n            if ((\"pom\".equals(dependency.getType()) && \"import\".equals(dependency.getScope())) && org.codehaus.plexus.util.StringUtils.isNotEmpty(dependency.getClassifier())) {\n                addViolation(problems, false, ((\"'\" + prefix) + \".classifier' must be empty for imported POM: \") + key);\n            }\n            org.apache.maven.model.Dependency existing = index.get(key);\n            if (existing != null) {\n                boolean warning = request.getValidationLevel() < org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;\n                addViolation(problems, warning, ((((((\"'\" + prefix) + \".(groupId:artifactId:type:classifier)' must be unique: \") + key) + \" -> \") + existing.getVersion()) + \" vs \") + dependency.getVersion());\n            } else {\n                index.put(key, dependency);\n            }\n        }\n    }\n\n    private void validateRepositories(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Repository> repositories, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        java.util.Map<java.lang.String, org.apache.maven.model.Repository> index = new java.util.HashMap<java.lang.String, org.apache.maven.model.Repository>();\n        for (org.apache.maven.model.Repository repository : repositories) {\n            validateStringNotEmpty(prefix + \".id\", problems, false, repository.getId());\n            validateStringNotEmpty(((prefix + \"[\") + repository.getId()) + \"].url\", problems, false, repository.getUrl());\n            java.lang.String key = repository.getId();\n            org.apache.maven.model.Repository existing = index.get(key);\n            if (existing != null) {\n                boolean warning = request.getValidationLevel() < org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;\n                addViolation(problems, warning, ((((((\"'\" + prefix) + \".id' must be unique: \") + repository.getId()) + \" -> \") + existing.getUrl()) + \" vs \") + repository.getUrl());\n            } else {\n                index.put(key, repository);\n            }\n        }\n    }\n\n    private void validateRepositoryLayout(org.apache.maven.model.building.ModelProblemCollector problems, org.apache.maven.model.Repository repository, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        if ((repository != null) && \"legacy\".equals(repository.getLayout())) {\n            addViolation(problems, true, ((\"'\" + prefix) + \".layout = legacy' is deprecated: \") + repository.getId());\n        }\n    }\n\n    private void validateResources(org.apache.maven.model.building.ModelProblemCollector problems, java.util.List<org.apache.maven.model.Resource> resources, java.lang.String prefix, org.apache.maven.model.building.ModelBuildingRequest request) {\n        boolean warnOnBadBoolean = request.getValidationLevel() < org.apache.maven.model.building.ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;\n        for (org.apache.maven.model.Resource resource : resources) {\n            validateStringNotEmpty(prefix + \".directory\", problems, false, resource.getDirectory());\n            validateBoolean(prefix + \".filtering\", problems, warnOnBadBoolean, resource.getFiltering(), resource.getDirectory());\n        }\n    }\n\n    private void forcePluginExecutionIdCollision(org.apache.maven.model.Model model, org.apache.maven.model.building.ModelProblemCollector problems) {\n        org.apache.maven.model.Build build = model.getBuild();\n        if (build != null) {\n            java.util.List<org.apache.maven.model.Plugin> plugins = build.getPlugins();\n            if (plugins != null) {\n                for (org.apache.maven.model.Plugin plugin : plugins) {\n                    try {\n                        plugin.getExecutionsAsMap();\n                    } catch (java.lang.IllegalStateException collisionException) {\n                        addViolation(problems, false, collisionException.getMessage());\n                    }\n                }\n            }\n        }\n    }\n\n    private boolean validateStringNoExpression(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, boolean warning, java.lang.String string) {\n        if (!hasExpression(string)) {\n            return true;\n        }\n        addViolation(problems, warning, (\"'\" + fieldName) + \"' contains an expression but should be a constant.\");\n        return false;\n    }\n\n    private boolean hasExpression(java.lang.String value) {\n        return (value != null) && (value.indexOf(\"${\") >= 0);\n    }\n\n    private boolean validateStringNotEmpty(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, boolean warning, java.lang.String string) {\n        return validateStringNotEmpty(fieldName, problems, warning, string, null);\n    }\n\n    private boolean validateStringNotEmpty(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, boolean warning, java.lang.String string, java.lang.String sourceHint) {\n        if (!validateNotNull(fieldName, problems, warning, string, sourceHint)) {\n            return false;\n        }\n        if (string.length() > 0) {\n            return true;\n        }\n        if (sourceHint != null) {\n            addViolation(problems, warning, ((\"'\" + fieldName) + \"' is missing for \") + sourceHint);\n        } else {\n            addViolation(problems, warning, (\"'\" + fieldName) + \"' is missing.\");\n        }\n        return false;\n    }\n\n    private boolean validateSubElementStringNotEmpty(java.lang.Object subElementInstance, java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, java.lang.String string) {\n        if (!validateSubElementNotNull(subElementInstance, fieldName, problems, string)) {\n            return false;\n        }\n        if (string.length() > 0) {\n            return true;\n        }\n        addViolation(problems, false, (((\"In \" + subElementInstance) + \":\\n\\n       -> \\'\") + fieldName) + \"' is missing.\");\n        return false;\n    }\n\n    private boolean validateNotNull(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, boolean warning, java.lang.Object object, java.lang.String sourceHint) {\n        if (object != null) {\n            return true;\n        }\n        if (sourceHint != null) {\n            addViolation(problems, warning, ((\"'\" + fieldName) + \"' is missing for \") + sourceHint);\n        } else {\n            addViolation(problems, warning, (\"'\" + fieldName) + \"' is missing.\");\n        }\n        return false;\n    }\n\n    private boolean validateSubElementNotNull(java.lang.Object subElementInstance, java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, java.lang.Object object) {\n        if (object != null) {\n            return true;\n        }\n        addViolation(problems, false, (((\"In \" + subElementInstance) + \":\\n\\n       -> \\'\") + fieldName) + \"' is missing.\");\n        return false;\n    }\n\n    private boolean validateBoolean(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, boolean warning, java.lang.String string, java.lang.String sourceHint) {\n        if ((string == null) || (string.length() <= 0)) {\n            return true;\n        }\n        if (\"true\".equalsIgnoreCase(string) || \"false\".equalsIgnoreCase(string)) {\n            return true;\n        }\n        if (sourceHint != null) {\n            addViolation(problems, warning, (((((\"'\" + fieldName) + \"' must be 'true' or 'false' for \") + sourceHint) + \" but is '\") + string) + \"'.\");\n        } else {\n            addViolation(problems, warning, (((\"'\" + fieldName) + \"' must be 'true' or 'false' but is '\") + string) + \"'.\");\n        }\n        return false;\n    }\n\n    private boolean validateEnum(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, boolean warning, java.lang.String string, java.lang.String sourceHint, java.lang.String... validValues) {\n        if ((string == null) || (string.length() <= 0)) {\n            return true;\n        }\n        java.util.List<java.lang.String> values = java.util.Arrays.asList(validValues);\n        if (values.contains(string)) {\n            return true;\n        }\n        if (sourceHint != null) {\n            addViolation(problems, warning, (((((((\"'\" + fieldName) + \"' must be one of \") + values) + \" for \") + sourceHint) + \" but is '\") + string) + \"'.\");\n        } else {\n            addViolation(problems, warning, (((((\"'\" + fieldName) + \"' must be one of \") + values) + \" but is '\") + string) + \"'.\");\n        }\n        return false;\n    }\n\n    private boolean validateVersion(java.lang.String fieldName, org.apache.maven.model.building.ModelProblemCollector problems, boolean warning, java.lang.String string, java.lang.String sourceHint) {\n        if ((string == null) || (string.length() <= 0)) {\n            return true;\n        }\n        if (!hasExpression(string)) {\n            return true;\n        }\n        if (sourceHint != null) {\n            addViolation(problems, warning, (((((\"'\" + fieldName) + \"' must be a valid version for \") + sourceHint) + \" but is '\") + string) + \"'.\");\n        } else {\n            addViolation(problems, warning, (((\"'\" + fieldName) + \"' must be a valid version but is '\") + string) + \"'.\");\n        }\n        return false;\n    }\n\n    private void addViolation(org.apache.maven.model.building.ModelProblemCollector problems, boolean warning, java.lang.String message) {\n        if (warning) {\n            problems.addWarning(message);\n        } else {\n            problems.addError(message);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "validateVersion(\"dependencies.dependency.version\", problems, warnOnly, d.getVersion(), d.getManagementKey())",
            "src_parent": "{\n    validateVersion(\"dependencies.dependency.version\", problems, warnOnly, d.getVersion(), d.getManagementKey());\n    validateBoolean(\"dependencies.dependency.optional\", problems, warnOnly, d.getOptional(), d.getManagementKey());\n    validateEnum(\"dependencies.dependency.scope\", problems, true, d.getScope(), d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\");\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "(((((\"'\" + fieldName) + \"' must be 'true' or 'false' for \") + sourceHint) + \" but is '\") + string) + \"'.\"",
            "src_parent": "addViolation(problems, warning, (((((\"'\" + fieldName) + \"' must be 'true' or 'false' for \") + sourceHint) + \" but is '\") + string) + \"'.\")",
            "src_parent_type": "Invocation",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "(((\"'\" + fieldName) + \"' must be 'true' or 'false' but is '\") + string) + \"'.\"",
            "src_parent": "addViolation(problems, warning, (((\"'\" + fieldName) + \"' must be 'true' or 'false' but is '\") + string) + \"'.\")",
            "src_parent_type": "Invocation",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "(((((((\"'\" + fieldName) + \"' must be one of \") + values) + \" for \") + sourceHint) + \" but is '\") + string) + \"'.\"",
            "src_parent": "addViolation(problems, warning, (((((((\"'\" + fieldName) + \"' must be one of \") + values) + \" for \") + sourceHint) + \" but is '\") + string) + \"'.\")",
            "src_parent_type": "Invocation",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "(((((\"'\" + fieldName) + \"' must be one of \") + values) + \" but is '\") + string) + \"'.\"",
            "src_parent": "addViolation(problems, warning, (((((\"'\" + fieldName) + \"' must be one of \") + values) + \" but is '\") + string) + \"'.\")",
            "src_parent_type": "Invocation",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "((\"'\" + fieldName) + \"' must be 'true' or 'false' but is '\")",
            "dst_parent": "(((\"'\" + fieldName) + \"' must be 'true' or 'false' but is '\") + string)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(\"'\" + fieldName) + \"' must be 'true' or 'false'.\"",
            "src_parent": "addViolation(problems, warning, (\"'\" + fieldName) + \"' must be 'true' or 'false'.\")",
            "src_parent_type": "Invocation",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(((\"'\" + fieldName) + \"' must be 'true' or 'false' for \") + sourceHint)",
            "dst_parent": "((((\"'\" + fieldName) + \"' must be 'true' or 'false' for \") + sourceHint) + \" but is '\")",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "((\"'\" + fieldName) + \"' must be 'true' or 'false' for \") + sourceHint",
            "src_parent": "addViolation(problems, warning, ((\"'\" + fieldName) + \"' must be 'true' or 'false' for \") + sourceHint)",
            "src_parent_type": "Invocation",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(((((\"'\" + fieldName) + \"' must be one of \") + values) + \" for \") + sourceHint)",
            "dst_parent": "((((((\"'\" + fieldName) + \"' must be one of \") + values) + \" for \") + sourceHint) + \" but is '\")",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "((((\"'\" + fieldName) + \"' must be one of \") + values) + \" for \") + sourceHint",
            "src_parent": "addViolation(problems, warning, ((((\"'\" + fieldName) + \"' must be one of \") + values) + \" for \") + sourceHint)",
            "src_parent_type": "Invocation",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(((\"'\" + fieldName) + \"' must be one of \") + values)",
            "dst_parent": "((((\"'\" + fieldName) + \"' must be one of \") + values) + \" but is '\")",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "((\"'\" + fieldName) + \"' must be one of \") + values",
            "src_parent": "addViolation(problems, warning, ((\"'\" + fieldName) + \"' must be one of \") + values)",
            "src_parent_type": "Invocation",
            "src_type": "BinaryOperator"
          }
        }
      ],
      "file_name": "DefaultModelValidator"
    }
  ],
  "id": "maven_0f3d4d24"
}