{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || (x == y)",
            "src_parent": "return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || (x == y)",
            "src_parent_type": "Return",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "@java.lang.Deprecated\npublic static double nextAfter(double d, double direction) {\n    return org.apache.commons.math.util.FastMath.nextAfter(d, direction);\n}",
            "src_parent": "public final class MathUtils {\n    public static final double EPSILON = 0x1.0p-53;\n\n    public static final double SAFE_MIN = 0x1.0p-1022;\n\n    public static final double TWO_PI = 2 * FastMath.PI;\n\n    private static final byte NB = ((byte) (-1));\n\n    private static final short NS = ((short) (-1));\n\n    private static final byte PB = ((byte) (1));\n\n    private static final short PS = ((short) (1));\n\n    private static final byte ZB = ((byte) (0));\n\n    private static final short ZS = ((short) (0));\n\n    private static final int NAN_GAP = (4 * 1024) * 1024;\n\n    private static final long SGN_MASK = 0x8000000000000000L;\n\n    private static final long[] FACTORIALS = new long[]{ 1L, 1L, 2L, 6L, 24L, 120L, 720L, 5040L, 40320L, 362880L, 3628800L, 39916800L, 479001600L, 6227020800L, 87178291200L, 1307674368000L, 20922789888000L, 355687428096000L, 6402373705728000L, 121645100408832000L, 2432902008176640000L };\n\n    private MathUtils() {\n        super();\n    }\n\n    public static int addAndCheck(int x, int y) {\n        long s = ((long) (x)) + ((long) (y));\n        if ((s < java.lang.Integer.MIN_VALUE) || (s > java.lang.Integer.MAX_VALUE)) {\n            throw org.apache.commons.math.MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);\n        }\n        return ((int) (s));\n    }\n\n    public static long addAndCheck(long a, long b) {\n        return org.apache.commons.math.util.MathUtils.addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);\n    }\n\n    private static long addAndCheck(long a, long b, org.apache.commons.math.exception.util.Localizable pattern) {\n        long ret;\n        if (a > b) {\n            ret = org.apache.commons.math.util.MathUtils.addAndCheck(b, a, pattern);\n        } else if (a < 0) {\n            if (b < 0) {\n                if ((java.lang.Long.MIN_VALUE - b) <= a) {\n                    ret = a + b;\n                } else {\n                    throw org.apache.commons.math.MathRuntimeException.createArithmeticException(pattern, a, b);\n                }\n            } else {\n                ret = a + b;\n            }\n        } else if (a <= (java.lang.Long.MAX_VALUE - b)) {\n            ret = a + b;\n        } else {\n            throw org.apache.commons.math.MathRuntimeException.createArithmeticException(pattern, a, b);\n        }\n        return ret;\n    }\n\n    public static long binomialCoefficient(final int n, final int k) {\n        org.apache.commons.math.util.MathUtils.checkBinomial(n, k);\n        if ((n == k) || (k == 0)) {\n            return 1;\n        }\n        if ((k == 1) || (k == (n - 1))) {\n            return n;\n        }\n        if (k > (n / 2)) {\n            return org.apache.commons.math.util.MathUtils.binomialCoefficient(n, n - k);\n        }\n        long result = 1;\n        if (n <= 61) {\n            int i = (n - k) + 1;\n            for (int j = 1; j <= k; j++) {\n                result = (result * i) / j;\n                i++;\n            }\n        } else if (n <= 66) {\n            int i = (n - k) + 1;\n            for (int j = 1; j <= k; j++) {\n                final long d = org.apache.commons.math.util.MathUtils.gcd(i, j);\n                result = (result / (j / d)) * (i / d);\n                i++;\n            }\n        } else {\n            int i = (n - k) + 1;\n            for (int j = 1; j <= k; j++) {\n                final long d = org.apache.commons.math.util.MathUtils.gcd(i, j);\n                result = org.apache.commons.math.util.MathUtils.mulAndCheck(result / (j / d), i / d);\n                i++;\n            }\n        }\n        return result;\n    }\n\n    public static double binomialCoefficientDouble(final int n, final int k) {\n        org.apache.commons.math.util.MathUtils.checkBinomial(n, k);\n        if ((n == k) || (k == 0)) {\n            return 1.0;\n        }\n        if ((k == 1) || (k == (n - 1))) {\n            return n;\n        }\n        if (k > (n / 2)) {\n            return org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(n, n - k);\n        }\n        if (n < 67) {\n            return org.apache.commons.math.util.MathUtils.binomialCoefficient(n, k);\n        }\n        double result = 1.0;\n        for (int i = 1; i <= k; i++) {\n            result *= ((double) ((n - k) + i)) / ((double) (i));\n        }\n        return org.apache.commons.math.util.FastMath.floor(result + 0.5);\n    }\n\n    public static double binomialCoefficientLog(final int n, final int k) {\n        org.apache.commons.math.util.MathUtils.checkBinomial(n, k);\n        if ((n == k) || (k == 0)) {\n            return 0;\n        }\n        if ((k == 1) || (k == (n - 1))) {\n            return org.apache.commons.math.util.FastMath.log(n);\n        }\n        if (n < 67) {\n            return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.binomialCoefficient(n, k));\n        }\n        if (n < 1030) {\n            return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(n, k));\n        }\n        if (k > (n / 2)) {\n            return org.apache.commons.math.util.MathUtils.binomialCoefficientLog(n, n - k);\n        }\n        double logSum = 0;\n        for (int i = (n - k) + 1; i <= n; i++) {\n            logSum += org.apache.commons.math.util.FastMath.log(i);\n        }\n        for (int i = 2; i <= k; i++) {\n            logSum -= org.apache.commons.math.util.FastMath.log(i);\n        }\n        return logSum;\n    }\n\n    private static void checkBinomial(final int n, final int k) throws java.lang.IllegalArgumentException {\n        if (n < k) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER, n, k);\n        }\n        if (n < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);\n        }\n    }\n\n    public static int compareTo(double x, double y, double eps) {\n        if (org.apache.commons.math.util.MathUtils.equals(x, y, eps)) {\n            return 0;\n        } else if (x < y) {\n            return -1;\n        }\n        return 1;\n    }\n\n    public static double cosh(double x) {\n        return (org.apache.commons.math.util.FastMath.exp(x) + org.apache.commons.math.util.FastMath.exp(-x)) / 2.0;\n    }\n\n    public static boolean equals(double x, double y) {\n        return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || (x == y);\n    }\n\n    public static boolean equalsIncludingNaN(double x, double y) {\n        return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || org.apache.commons.math.util.MathUtils.equals(x, y, 1);\n    }\n\n    public static boolean equals(double x, double y, double eps) {\n        return org.apache.commons.math.util.MathUtils.equals(x, y, 1) || (org.apache.commons.math.util.FastMath.abs(y - x) <= eps);\n    }\n\n    public static boolean equalsIncludingNaN(double x, double y, double eps) {\n        return org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y) || (org.apache.commons.math.util.FastMath.abs(y - x) <= eps);\n    }\n\n    public static boolean equals(double x, double y, int maxUlps) {\n        assert (maxUlps > 0) && (maxUlps < org.apache.commons.math.util.MathUtils.NAN_GAP);\n        long xInt = java.lang.Double.doubleToLongBits(x);\n        long yInt = java.lang.Double.doubleToLongBits(y);\n        if (xInt < 0) {\n            xInt = org.apache.commons.math.util.MathUtils.SGN_MASK - xInt;\n        }\n        if (yInt < 0) {\n            yInt = org.apache.commons.math.util.MathUtils.SGN_MASK - yInt;\n        }\n        final boolean isEqual = org.apache.commons.math.util.FastMath.abs(xInt - yInt) <= maxUlps;\n        return (isEqual && (!java.lang.Double.isNaN(x))) && (!java.lang.Double.isNaN(y));\n    }\n\n    public static boolean equalsIncludingNaN(double x, double y, int maxUlps) {\n        return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps);\n    }\n\n    public static boolean equals(double[] x, double[] y) {\n        if ((x == null) || (y == null)) {\n            return !((x == null) ^ (y == null));\n        }\n        if (x.length != y.length) {\n            return false;\n        }\n        for (int i = 0; i < x.length; ++i) {\n            if (!org.apache.commons.math.util.MathUtils.equals(x[i], y[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static boolean equalsIncludingNaN(double[] x, double[] y) {\n        if ((x == null) || (y == null)) {\n            return !((x == null) ^ (y == null));\n        }\n        if (x.length != y.length) {\n            return false;\n        }\n        for (int i = 0; i < x.length; ++i) {\n            if (!org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x[i], y[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static long factorial(final int n) {\n        if (n < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);\n        }\n        if (n > 20) {\n            throw new java.lang.ArithmeticException(\"factorial value is too large to fit in a long\");\n        }\n        return org.apache.commons.math.util.MathUtils.FACTORIALS[n];\n    }\n\n    public static double factorialDouble(final int n) {\n        if (n < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);\n        }\n        if (n < 21) {\n            return org.apache.commons.math.util.MathUtils.factorial(n);\n        }\n        return org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n)) + 0.5);\n    }\n\n    public static double factorialLog(final int n) {\n        if (n < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);\n        }\n        if (n < 21) {\n            return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));\n        }\n        double logSum = 0;\n        for (int i = 2; i <= n; i++) {\n            logSum += org.apache.commons.math.util.FastMath.log(i);\n        }\n        return logSum;\n    }\n\n    public static int gcd(final int p, final int q) {\n        int u = p;\n        int v = q;\n        if ((u == 0) || (v == 0)) {\n            if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) {\n                throw org.apache.commons.math.MathRuntimeException.createArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);\n            }\n            return org.apache.commons.math.util.FastMath.abs(u) + org.apache.commons.math.util.FastMath.abs(v);\n        }\n        if (u > 0) {\n            u = -u;\n        }\n        if (v > 0) {\n            v = -v;\n        }\n        int k = 0;\n        while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {\n            u /= 2;\n            v /= 2;\n            k++;\n        } \n        if (k == 31) {\n            throw org.apache.commons.math.MathRuntimeException.createArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);\n        }\n        int t = ((u & 1) == 1) ? v : -(u / 2);\n        do {\n            while ((t & 1) == 0) {\n                t /= 2;\n            } \n            if (t > 0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            t = (v - u) / 2;\n        } while (t != 0 );\n        return (-u) * (1 << k);\n    }\n\n    public static long gcd(final long p, final long q) {\n        long u = p;\n        long v = q;\n        if ((u == 0) || (v == 0)) {\n            if ((u == java.lang.Long.MIN_VALUE) || (v == java.lang.Long.MIN_VALUE)) {\n                throw org.apache.commons.math.MathRuntimeException.createArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);\n            }\n            return org.apache.commons.math.util.FastMath.abs(u) + org.apache.commons.math.util.FastMath.abs(v);\n        }\n        if (u > 0) {\n            u = -u;\n        }\n        if (v > 0) {\n            v = -v;\n        }\n        int k = 0;\n        while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) {\n            u /= 2;\n            v /= 2;\n            k++;\n        } \n        if (k == 63) {\n            throw org.apache.commons.math.MathRuntimeException.createArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);\n        }\n        long t = ((u & 1) == 1) ? v : -(u / 2);\n        do {\n            while ((t & 1) == 0) {\n                t /= 2;\n            } \n            if (t > 0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            t = (v - u) / 2;\n        } while (t != 0 );\n        return (-u) * (1L << k);\n    }\n\n    public static int hash(double value) {\n        return new java.lang.Double(value).hashCode();\n    }\n\n    public static int hash(double[] value) {\n        return java.util.Arrays.hashCode(value);\n    }\n\n    public static byte indicator(final byte x) {\n        return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;\n    }\n\n    public static double indicator(final double x) {\n        if (java.lang.Double.isNaN(x)) {\n            return java.lang.Double.NaN;\n        }\n        return x >= 0.0 ? 1.0 : -1.0;\n    }\n\n    public static float indicator(final float x) {\n        if (java.lang.Float.isNaN(x)) {\n            return java.lang.Float.NaN;\n        }\n        return x >= 0.0F ? 1.0F : -1.0F;\n    }\n\n    public static int indicator(final int x) {\n        return x >= 0 ? 1 : -1;\n    }\n\n    public static long indicator(final long x) {\n        return x >= 0L ? 1L : -1L;\n    }\n\n    public static short indicator(final short x) {\n        return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;\n    }\n\n    public static int lcm(int a, int b) {\n        if ((a == 0) || (b == 0)) {\n            return 0;\n        }\n        int lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b));\n        if (lcm == java.lang.Integer.MIN_VALUE) {\n            throw org.apache.commons.math.MathRuntimeException.createArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS, a, b);\n        }\n        return lcm;\n    }\n\n    public static long lcm(long a, long b) {\n        if ((a == 0) || (b == 0)) {\n            return 0;\n        }\n        long lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b));\n        if (lcm == java.lang.Long.MIN_VALUE) {\n            throw org.apache.commons.math.MathRuntimeException.createArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS, a, b);\n        }\n        return lcm;\n    }\n\n    public static double log(double base, double x) {\n        return org.apache.commons.math.util.FastMath.log(x) / org.apache.commons.math.util.FastMath.log(base);\n    }\n\n    public static int mulAndCheck(int x, int y) {\n        long m = ((long) (x)) * ((long) (y));\n        if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) {\n            throw new java.lang.ArithmeticException(\"overflow: mul\");\n        }\n        return ((int) (m));\n    }\n\n    public static long mulAndCheck(long a, long b) {\n        long ret;\n        java.lang.String msg = \"overflow: multiply\";\n        if (a > b) {\n            ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);\n        } else if (a < 0) {\n            if (b < 0) {\n                if (a >= (java.lang.Long.MAX_VALUE / b)) {\n                    ret = a * b;\n                } else {\n                    throw new java.lang.ArithmeticException(msg);\n                }\n            } else if (b > 0) {\n                if ((java.lang.Long.MIN_VALUE / b) <= a) {\n                    ret = a * b;\n                } else {\n                    throw new java.lang.ArithmeticException(msg);\n                }\n            } else {\n                ret = 0;\n            }\n        } else if (a > 0) {\n            if (a <= (java.lang.Long.MAX_VALUE / b)) {\n                ret = a * b;\n            } else {\n                throw new java.lang.ArithmeticException(msg);\n            }\n        } else {\n            ret = 0;\n        }\n        return ret;\n    }\n\n    @java.lang.Deprecated\n    public static double nextAfter(double d, double direction) {\n        return org.apache.commons.math.util.FastMath.nextAfter(d, direction);\n    }\n\n    public static double scalb(final double d, final int scaleFactor) {\n        if (((d == 0) || java.lang.Double.isNaN(d)) || java.lang.Double.isInfinite(d)) {\n            return d;\n        }\n        final long bits = java.lang.Double.doubleToLongBits(d);\n        final long exponent = bits & 0x7ff0000000000000L;\n        final long rest = bits & 0x800fffffffffffffL;\n        final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52));\n        return java.lang.Double.longBitsToDouble(newBits);\n    }\n\n    public static double normalizeAngle(double a, double center) {\n        return a - (org.apache.commons.math.util.MathUtils.TWO_PI * org.apache.commons.math.util.FastMath.floor(((a + FastMath.PI) - center) / org.apache.commons.math.util.MathUtils.TWO_PI));\n    }\n\n    public static double[] normalizeArray(double[] values, double normalizedSum) throws java.lang.ArithmeticException, java.lang.IllegalArgumentException {\n        if (java.lang.Double.isInfinite(normalizedSum)) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n        }\n        if (java.lang.Double.isNaN(normalizedSum)) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n        }\n        double sum = 0.0;\n        final int len = values.length;\n        double[] out = new double[len];\n        for (int i = 0; i < len; i++) {\n            if (java.lang.Double.isInfinite(values[i])) {\n                throw org.apache.commons.math.MathRuntimeException.createArithmeticException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n            }\n            if (!java.lang.Double.isNaN(values[i])) {\n                sum += values[i];\n            }\n        }\n        if (sum == 0) {\n            throw org.apache.commons.math.MathRuntimeException.createArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n        }\n        for (int i = 0; i < len; i++) {\n            if (java.lang.Double.isNaN(values[i])) {\n                out[i] = java.lang.Double.NaN;\n            } else {\n                out[i] = (values[i] * normalizedSum) / sum;\n            }\n        }\n        return out;\n    }\n\n    public static double round(double x, int scale) {\n        return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);\n    }\n\n    public static double round(double x, int scale, int roundingMethod) {\n        try {\n            return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();\n        } catch (java.lang.NumberFormatException ex) {\n            if (java.lang.Double.isInfinite(x)) {\n                return x;\n            } else {\n                return java.lang.Double.NaN;\n            }\n        }\n    }\n\n    public static float round(float x, int scale) {\n        return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);\n    }\n\n    public static float round(float x, int scale, int roundingMethod) {\n        float sign = org.apache.commons.math.util.MathUtils.indicator(x);\n        float factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign;\n        return ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled(x * factor, sign, roundingMethod))) / factor;\n    }\n\n    private static double roundUnscaled(double unscaled, double sign, int roundingMethod) {\n        switch (roundingMethod) {\n            case java.math.BigDecimal.ROUND_CEILING :\n                if (sign == (-1)) {\n                    unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\n                } else {\n                    unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\n                }\n                break;\n            case java.math.BigDecimal.ROUND_DOWN :\n                unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\n                break;\n            case java.math.BigDecimal.ROUND_FLOOR :\n                if (sign == (-1)) {\n                    unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\n                } else {\n                    unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\n                }\n                break;\n            case java.math.BigDecimal.ROUND_HALF_DOWN :\n                {\n                    unscaled = org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY);\n                    double fraction = unscaled - org.apache.commons.math.util.FastMath.floor(unscaled);\n                    if (fraction > 0.5) {\n                        unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\n                    } else {\n                        unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\n                    }\n                    break;\n                }\n            case java.math.BigDecimal.ROUND_HALF_EVEN :\n                {\n                    double fraction = unscaled - org.apache.commons.math.util.FastMath.floor(unscaled);\n                    if (fraction > 0.5) {\n                        unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\n                    } else if (fraction < 0.5) {\n                        unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\n                    } else if ((org.apache.commons.math.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(unscaled) / 2.0)) {\n                        unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\n                    } else {\n                        unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\n                    }\n                    break;\n                }\n            case java.math.BigDecimal.ROUND_HALF_UP :\n                {\n                    unscaled = org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY);\n                    double fraction = unscaled - org.apache.commons.math.util.FastMath.floor(unscaled);\n                    if (fraction >= 0.5) {\n                        unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\n                    } else {\n                        unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\n                    }\n                    break;\n                }\n            case java.math.BigDecimal.ROUND_UNNECESSARY :\n                if (unscaled != org.apache.commons.math.util.FastMath.floor(unscaled)) {\n                    throw new java.lang.ArithmeticException(\"Inexact result from rounding\");\n                }\n                break;\n            case java.math.BigDecimal.ROUND_UP :\n                unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\n                break;\n            default :\n                throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD, roundingMethod, \"ROUND_CEILING\", java.math.BigDecimal.ROUND_CEILING, \"ROUND_DOWN\", java.math.BigDecimal.ROUND_DOWN, \"ROUND_FLOOR\", java.math.BigDecimal.ROUND_FLOOR, \"ROUND_HALF_DOWN\", java.math.BigDecimal.ROUND_HALF_DOWN, \"ROUND_HALF_EVEN\", java.math.BigDecimal.ROUND_HALF_EVEN, \"ROUND_HALF_UP\", java.math.BigDecimal.ROUND_HALF_UP, \"ROUND_UNNECESSARY\", java.math.BigDecimal.ROUND_UNNECESSARY, \"ROUND_UP\", java.math.BigDecimal.ROUND_UP);\n        }\n        return unscaled;\n    }\n\n    public static byte sign(final byte x) {\n        return x == org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.ZB : x > org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;\n    }\n\n    public static double sign(final double x) {\n        if (java.lang.Double.isNaN(x)) {\n            return java.lang.Double.NaN;\n        }\n        return x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0;\n    }\n\n    public static float sign(final float x) {\n        if (java.lang.Float.isNaN(x)) {\n            return java.lang.Float.NaN;\n        }\n        return x == 0.0F ? 0.0F : x > 0.0F ? 1.0F : -1.0F;\n    }\n\n    public static int sign(final int x) {\n        return x == 0 ? 0 : x > 0 ? 1 : -1;\n    }\n\n    public static long sign(final long x) {\n        return x == 0L ? 0L : x > 0L ? 1L : -1L;\n    }\n\n    public static short sign(final short x) {\n        return x == org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.ZS : x > org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;\n    }\n\n    public static double sinh(double x) {\n        return (org.apache.commons.math.util.FastMath.exp(x) - org.apache.commons.math.util.FastMath.exp(-x)) / 2.0;\n    }\n\n    public static int subAndCheck(int x, int y) {\n        long s = ((long) (x)) - ((long) (y));\n        if ((s < java.lang.Integer.MIN_VALUE) || (s > java.lang.Integer.MAX_VALUE)) {\n            throw org.apache.commons.math.MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);\n        }\n        return ((int) (s));\n    }\n\n    public static long subAndCheck(long a, long b) {\n        long ret;\n        java.lang.String msg = \"overflow: subtract\";\n        if (b == java.lang.Long.MIN_VALUE) {\n            if (a < 0) {\n                ret = a - b;\n            } else {\n                throw new java.lang.ArithmeticException(msg);\n            }\n        } else {\n            ret = org.apache.commons.math.util.MathUtils.addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);\n        }\n        return ret;\n    }\n\n    public static int pow(final int k, int e) throws java.lang.IllegalArgumentException {\n        if (e < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);\n        }\n        int result = 1;\n        int k2p = k;\n        while (e != 0) {\n            if ((e & 0x1) != 0) {\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        } \n        return result;\n    }\n\n    public static int pow(final int k, long e) throws java.lang.IllegalArgumentException {\n        if (e < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);\n        }\n        int result = 1;\n        int k2p = k;\n        while (e != 0) {\n            if ((e & 0x1) != 0) {\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        } \n        return result;\n    }\n\n    public static long pow(final long k, int e) throws java.lang.IllegalArgumentException {\n        if (e < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);\n        }\n        long result = 1L;\n        long k2p = k;\n        while (e != 0) {\n            if ((e & 0x1) != 0) {\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        } \n        return result;\n    }\n\n    public static long pow(final long k, long e) throws java.lang.IllegalArgumentException {\n        if (e < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);\n        }\n        long result = 1L;\n        long k2p = k;\n        while (e != 0) {\n            if ((e & 0x1) != 0) {\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        } \n        return result;\n    }\n\n    public static java.math.BigInteger pow(final java.math.BigInteger k, int e) throws java.lang.IllegalArgumentException {\n        if (e < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);\n        }\n        return k.pow(e);\n    }\n\n    public static java.math.BigInteger pow(final java.math.BigInteger k, long e) throws java.lang.IllegalArgumentException {\n        if (e < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);\n        }\n        java.math.BigInteger result = java.math.BigInteger.ONE;\n        java.math.BigInteger k2p = k;\n        while (e != 0) {\n            if ((e & 0x1) != 0) {\n                result = result.multiply(k2p);\n            }\n            k2p = k2p.multiply(k2p);\n            e = e >> 1;\n        } \n        return result;\n    }\n\n    public static java.math.BigInteger pow(final java.math.BigInteger k, java.math.BigInteger e) throws java.lang.IllegalArgumentException {\n        if (e.compareTo(java.math.BigInteger.ZERO) < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);\n        }\n        java.math.BigInteger result = java.math.BigInteger.ONE;\n        java.math.BigInteger k2p = k;\n        while (!java.math.BigInteger.ZERO.equals(e)) {\n            if (e.testBit(0)) {\n                result = result.multiply(k2p);\n            }\n            k2p = k2p.multiply(k2p);\n            e = e.shiftRight(1);\n        } \n        return result;\n    }\n\n    public static double distance1(double[] p1, double[] p2) {\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += org.apache.commons.math.util.FastMath.abs(p1[i] - p2[i]);\n        }\n        return sum;\n    }\n\n    public static int distance1(int[] p1, int[] p2) {\n        int sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += org.apache.commons.math.util.FastMath.abs(p1[i] - p2[i]);\n        }\n        return sum;\n    }\n\n    public static double distance(double[] p1, double[] p2) {\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            final double dp = p1[i] - p2[i];\n            sum += dp * dp;\n        }\n        return org.apache.commons.math.util.FastMath.sqrt(sum);\n    }\n\n    public static double distance(int[] p1, int[] p2) {\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            final double dp = p1[i] - p2[i];\n            sum += dp * dp;\n        }\n        return org.apache.commons.math.util.FastMath.sqrt(sum);\n    }\n\n    public static double distanceInf(double[] p1, double[] p2) {\n        double max = 0;\n        for (int i = 0; i < p1.length; i++) {\n            max = org.apache.commons.math.util.FastMath.max(max, org.apache.commons.math.util.FastMath.abs(p1[i] - p2[i]));\n        }\n        return max;\n    }\n\n    public static int distanceInf(int[] p1, int[] p2) {\n        int max = 0;\n        for (int i = 0; i < p1.length; i++) {\n            max = org.apache.commons.math.util.FastMath.max(max, org.apache.commons.math.util.FastMath.abs(p1[i] - p2[i]));\n        }\n        return max;\n    }\n\n    public static enum OrderDirection {\n\n        INCREASING,\n        DECREASING;}\n\n    public static void checkOrder(double[] val, org.apache.commons.math.util.MathUtils.OrderDirection dir, boolean strict) {\n        double previous = val[0];\n        boolean ok = true;\n        int max = val.length;\n        for (int i = 1; i < max; i++) {\n            switch (dir) {\n                case INCREASING :\n                    if (strict) {\n                        if (val[i] <= previous) {\n                            ok = false;\n                        }\n                    } else if (val[i] < previous) {\n                        ok = false;\n                    }\n                    break;\n                case DECREASING :\n                    if (strict) {\n                        if (val[i] >= previous) {\n                            ok = false;\n                        }\n                    } else if (val[i] > previous) {\n                        ok = false;\n                    }\n                    break;\n                default :\n                    throw new java.lang.IllegalArgumentException();\n            }\n            if (!ok) {\n                throw new org.apache.commons.math.exception.NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n            }\n            previous = val[i];\n        }\n    }\n\n    public static void checkOrder(double[] val) {\n        org.apache.commons.math.util.MathUtils.checkOrder(val, org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING, true);\n    }\n\n    public static void checkOrder(double[] val, int dir, boolean strict) {\n        if (dir > 0) {\n            org.apache.commons.math.util.MathUtils.checkOrder(val, org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING, strict);\n        } else {\n            org.apache.commons.math.util.MathUtils.checkOrder(val, org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING, strict);\n        }\n    }\n\n    public static double safeNorm(double[] v) {\n        double rdwarf = 3.834E-20;\n        double rgiant = 1.304E19;\n        double s1 = 0.0;\n        double s2 = 0.0;\n        double s3 = 0.0;\n        double x1max = 0.0;\n        double x3max = 0.0;\n        double floatn = ((double) (v.length));\n        double agiant = rgiant / floatn;\n        for (int i = 0; i < v.length; i++) {\n            double xabs = java.lang.Math.abs(v[i]);\n            if ((xabs < rdwarf) || (xabs > agiant)) {\n                if (xabs > rdwarf) {\n                    if (xabs > x1max) {\n                        double r = x1max / xabs;\n                        s1 = 1.0 + ((s1 * r) * r);\n                        x1max = xabs;\n                    } else {\n                        double r = xabs / x1max;\n                        s1 += r * r;\n                    }\n                } else if (xabs > x3max) {\n                    double r = x3max / xabs;\n                    s3 = 1.0 + ((s3 * r) * r);\n                    x3max = xabs;\n                } else if (xabs != 0.0) {\n                    double r = xabs / x3max;\n                    s3 += r * r;\n                }\n            } else {\n                s2 += xabs * xabs;\n            }\n        }\n        double norm;\n        if (s1 != 0.0) {\n            norm = x1max * java.lang.Math.sqrt(s1 + ((s2 / x1max) / x1max));\n        } else if (s2 == 0.0) {\n            norm = x3max * java.lang.Math.sqrt(s3);\n        } else if (s2 >= x3max) {\n            norm = java.lang.Math.sqrt(s2 * (1.0 + ((x3max / s2) * (x3max * s3))));\n        } else {\n            norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));\n        }\n        return norm;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public static void checkOrder(double[] val, int dir, boolean strict) {\n    if (dir > 0) {\n        org.apache.commons.math.util.MathUtils.checkOrder(val, org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING, strict);\n    } else {\n        org.apache.commons.math.util.MathUtils.checkOrder(val, org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING, strict);\n    }\n}",
            "src_parent": "public final class MathUtils {\n    public static final double EPSILON = 0x1.0p-53;\n\n    public static final double SAFE_MIN = 0x1.0p-1022;\n\n    public static final double TWO_PI = 2 * FastMath.PI;\n\n    private static final byte NB = ((byte) (-1));\n\n    private static final short NS = ((short) (-1));\n\n    private static final byte PB = ((byte) (1));\n\n    private static final short PS = ((short) (1));\n\n    private static final byte ZB = ((byte) (0));\n\n    private static final short ZS = ((short) (0));\n\n    private static final int NAN_GAP = (4 * 1024) * 1024;\n\n    private static final long SGN_MASK = 0x8000000000000000L;\n\n    private static final long[] FACTORIALS = new long[]{ 1L, 1L, 2L, 6L, 24L, 120L, 720L, 5040L, 40320L, 362880L, 3628800L, 39916800L, 479001600L, 6227020800L, 87178291200L, 1307674368000L, 20922789888000L, 355687428096000L, 6402373705728000L, 121645100408832000L, 2432902008176640000L };\n\n    private MathUtils() {\n        super();\n    }\n\n    public static int addAndCheck(int x, int y) {\n        long s = ((long) (x)) + ((long) (y));\n        if ((s < java.lang.Integer.MIN_VALUE) || (s > java.lang.Integer.MAX_VALUE)) {\n            throw org.apache.commons.math.MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);\n        }\n        return ((int) (s));\n    }\n\n    public static long addAndCheck(long a, long b) {\n        return org.apache.commons.math.util.MathUtils.addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);\n    }\n\n    private static long addAndCheck(long a, long b, org.apache.commons.math.exception.util.Localizable pattern) {\n        long ret;\n        if (a > b) {\n            ret = org.apache.commons.math.util.MathUtils.addAndCheck(b, a, pattern);\n        } else if (a < 0) {\n            if (b < 0) {\n                if ((java.lang.Long.MIN_VALUE - b) <= a) {\n                    ret = a + b;\n                } else {\n                    throw org.apache.commons.math.MathRuntimeException.createArithmeticException(pattern, a, b);\n                }\n            } else {\n                ret = a + b;\n            }\n        } else if (a <= (java.lang.Long.MAX_VALUE - b)) {\n            ret = a + b;\n        } else {\n            throw org.apache.commons.math.MathRuntimeException.createArithmeticException(pattern, a, b);\n        }\n        return ret;\n    }\n\n    public static long binomialCoefficient(final int n, final int k) {\n        org.apache.commons.math.util.MathUtils.checkBinomial(n, k);\n        if ((n == k) || (k == 0)) {\n            return 1;\n        }\n        if ((k == 1) || (k == (n - 1))) {\n            return n;\n        }\n        if (k > (n / 2)) {\n            return org.apache.commons.math.util.MathUtils.binomialCoefficient(n, n - k);\n        }\n        long result = 1;\n        if (n <= 61) {\n            int i = (n - k) + 1;\n            for (int j = 1; j <= k; j++) {\n                result = (result * i) / j;\n                i++;\n            }\n        } else if (n <= 66) {\n            int i = (n - k) + 1;\n            for (int j = 1; j <= k; j++) {\n                final long d = org.apache.commons.math.util.MathUtils.gcd(i, j);\n                result = (result / (j / d)) * (i / d);\n                i++;\n            }\n        } else {\n            int i = (n - k) + 1;\n            for (int j = 1; j <= k; j++) {\n                final long d = org.apache.commons.math.util.MathUtils.gcd(i, j);\n                result = org.apache.commons.math.util.MathUtils.mulAndCheck(result / (j / d), i / d);\n                i++;\n            }\n        }\n        return result;\n    }\n\n    public static double binomialCoefficientDouble(final int n, final int k) {\n        org.apache.commons.math.util.MathUtils.checkBinomial(n, k);\n        if ((n == k) || (k == 0)) {\n            return 1.0;\n        }\n        if ((k == 1) || (k == (n - 1))) {\n            return n;\n        }\n        if (k > (n / 2)) {\n            return org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(n, n - k);\n        }\n        if (n < 67) {\n            return org.apache.commons.math.util.MathUtils.binomialCoefficient(n, k);\n        }\n        double result = 1.0;\n        for (int i = 1; i <= k; i++) {\n            result *= ((double) ((n - k) + i)) / ((double) (i));\n        }\n        return org.apache.commons.math.util.FastMath.floor(result + 0.5);\n    }\n\n    public static double binomialCoefficientLog(final int n, final int k) {\n        org.apache.commons.math.util.MathUtils.checkBinomial(n, k);\n        if ((n == k) || (k == 0)) {\n            return 0;\n        }\n        if ((k == 1) || (k == (n - 1))) {\n            return org.apache.commons.math.util.FastMath.log(n);\n        }\n        if (n < 67) {\n            return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.binomialCoefficient(n, k));\n        }\n        if (n < 1030) {\n            return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(n, k));\n        }\n        if (k > (n / 2)) {\n            return org.apache.commons.math.util.MathUtils.binomialCoefficientLog(n, n - k);\n        }\n        double logSum = 0;\n        for (int i = (n - k) + 1; i <= n; i++) {\n            logSum += org.apache.commons.math.util.FastMath.log(i);\n        }\n        for (int i = 2; i <= k; i++) {\n            logSum -= org.apache.commons.math.util.FastMath.log(i);\n        }\n        return logSum;\n    }\n\n    private static void checkBinomial(final int n, final int k) throws java.lang.IllegalArgumentException {\n        if (n < k) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER, n, k);\n        }\n        if (n < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);\n        }\n    }\n\n    public static int compareTo(double x, double y, double eps) {\n        if (org.apache.commons.math.util.MathUtils.equals(x, y, eps)) {\n            return 0;\n        } else if (x < y) {\n            return -1;\n        }\n        return 1;\n    }\n\n    public static double cosh(double x) {\n        return (org.apache.commons.math.util.FastMath.exp(x) + org.apache.commons.math.util.FastMath.exp(-x)) / 2.0;\n    }\n\n    public static boolean equals(double x, double y) {\n        return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || (x == y);\n    }\n\n    public static boolean equalsIncludingNaN(double x, double y) {\n        return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || org.apache.commons.math.util.MathUtils.equals(x, y, 1);\n    }\n\n    public static boolean equals(double x, double y, double eps) {\n        return org.apache.commons.math.util.MathUtils.equals(x, y, 1) || (org.apache.commons.math.util.FastMath.abs(y - x) <= eps);\n    }\n\n    public static boolean equalsIncludingNaN(double x, double y, double eps) {\n        return org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y) || (org.apache.commons.math.util.FastMath.abs(y - x) <= eps);\n    }\n\n    public static boolean equals(double x, double y, int maxUlps) {\n        assert (maxUlps > 0) && (maxUlps < org.apache.commons.math.util.MathUtils.NAN_GAP);\n        long xInt = java.lang.Double.doubleToLongBits(x);\n        long yInt = java.lang.Double.doubleToLongBits(y);\n        if (xInt < 0) {\n            xInt = org.apache.commons.math.util.MathUtils.SGN_MASK - xInt;\n        }\n        if (yInt < 0) {\n            yInt = org.apache.commons.math.util.MathUtils.SGN_MASK - yInt;\n        }\n        final boolean isEqual = org.apache.commons.math.util.FastMath.abs(xInt - yInt) <= maxUlps;\n        return (isEqual && (!java.lang.Double.isNaN(x))) && (!java.lang.Double.isNaN(y));\n    }\n\n    public static boolean equalsIncludingNaN(double x, double y, int maxUlps) {\n        return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps);\n    }\n\n    public static boolean equals(double[] x, double[] y) {\n        if ((x == null) || (y == null)) {\n            return !((x == null) ^ (y == null));\n        }\n        if (x.length != y.length) {\n            return false;\n        }\n        for (int i = 0; i < x.length; ++i) {\n            if (!org.apache.commons.math.util.MathUtils.equals(x[i], y[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static boolean equalsIncludingNaN(double[] x, double[] y) {\n        if ((x == null) || (y == null)) {\n            return !((x == null) ^ (y == null));\n        }\n        if (x.length != y.length) {\n            return false;\n        }\n        for (int i = 0; i < x.length; ++i) {\n            if (!org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x[i], y[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static long factorial(final int n) {\n        if (n < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);\n        }\n        if (n > 20) {\n            throw new java.lang.ArithmeticException(\"factorial value is too large to fit in a long\");\n        }\n        return org.apache.commons.math.util.MathUtils.FACTORIALS[n];\n    }\n\n    public static double factorialDouble(final int n) {\n        if (n < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);\n        }\n        if (n < 21) {\n            return org.apache.commons.math.util.MathUtils.factorial(n);\n        }\n        return org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n)) + 0.5);\n    }\n\n    public static double factorialLog(final int n) {\n        if (n < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);\n        }\n        if (n < 21) {\n            return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));\n        }\n        double logSum = 0;\n        for (int i = 2; i <= n; i++) {\n            logSum += org.apache.commons.math.util.FastMath.log(i);\n        }\n        return logSum;\n    }\n\n    public static int gcd(final int p, final int q) {\n        int u = p;\n        int v = q;\n        if ((u == 0) || (v == 0)) {\n            if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) {\n                throw org.apache.commons.math.MathRuntimeException.createArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);\n            }\n            return org.apache.commons.math.util.FastMath.abs(u) + org.apache.commons.math.util.FastMath.abs(v);\n        }\n        if (u > 0) {\n            u = -u;\n        }\n        if (v > 0) {\n            v = -v;\n        }\n        int k = 0;\n        while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {\n            u /= 2;\n            v /= 2;\n            k++;\n        } \n        if (k == 31) {\n            throw org.apache.commons.math.MathRuntimeException.createArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);\n        }\n        int t = ((u & 1) == 1) ? v : -(u / 2);\n        do {\n            while ((t & 1) == 0) {\n                t /= 2;\n            } \n            if (t > 0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            t = (v - u) / 2;\n        } while (t != 0 );\n        return (-u) * (1 << k);\n    }\n\n    public static long gcd(final long p, final long q) {\n        long u = p;\n        long v = q;\n        if ((u == 0) || (v == 0)) {\n            if ((u == java.lang.Long.MIN_VALUE) || (v == java.lang.Long.MIN_VALUE)) {\n                throw org.apache.commons.math.MathRuntimeException.createArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);\n            }\n            return org.apache.commons.math.util.FastMath.abs(u) + org.apache.commons.math.util.FastMath.abs(v);\n        }\n        if (u > 0) {\n            u = -u;\n        }\n        if (v > 0) {\n            v = -v;\n        }\n        int k = 0;\n        while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) {\n            u /= 2;\n            v /= 2;\n            k++;\n        } \n        if (k == 63) {\n            throw org.apache.commons.math.MathRuntimeException.createArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);\n        }\n        long t = ((u & 1) == 1) ? v : -(u / 2);\n        do {\n            while ((t & 1) == 0) {\n                t /= 2;\n            } \n            if (t > 0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            t = (v - u) / 2;\n        } while (t != 0 );\n        return (-u) * (1L << k);\n    }\n\n    public static int hash(double value) {\n        return new java.lang.Double(value).hashCode();\n    }\n\n    public static int hash(double[] value) {\n        return java.util.Arrays.hashCode(value);\n    }\n\n    public static byte indicator(final byte x) {\n        return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;\n    }\n\n    public static double indicator(final double x) {\n        if (java.lang.Double.isNaN(x)) {\n            return java.lang.Double.NaN;\n        }\n        return x >= 0.0 ? 1.0 : -1.0;\n    }\n\n    public static float indicator(final float x) {\n        if (java.lang.Float.isNaN(x)) {\n            return java.lang.Float.NaN;\n        }\n        return x >= 0.0F ? 1.0F : -1.0F;\n    }\n\n    public static int indicator(final int x) {\n        return x >= 0 ? 1 : -1;\n    }\n\n    public static long indicator(final long x) {\n        return x >= 0L ? 1L : -1L;\n    }\n\n    public static short indicator(final short x) {\n        return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;\n    }\n\n    public static int lcm(int a, int b) {\n        if ((a == 0) || (b == 0)) {\n            return 0;\n        }\n        int lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b));\n        if (lcm == java.lang.Integer.MIN_VALUE) {\n            throw org.apache.commons.math.MathRuntimeException.createArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS, a, b);\n        }\n        return lcm;\n    }\n\n    public static long lcm(long a, long b) {\n        if ((a == 0) || (b == 0)) {\n            return 0;\n        }\n        long lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b));\n        if (lcm == java.lang.Long.MIN_VALUE) {\n            throw org.apache.commons.math.MathRuntimeException.createArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS, a, b);\n        }\n        return lcm;\n    }\n\n    public static double log(double base, double x) {\n        return org.apache.commons.math.util.FastMath.log(x) / org.apache.commons.math.util.FastMath.log(base);\n    }\n\n    public static int mulAndCheck(int x, int y) {\n        long m = ((long) (x)) * ((long) (y));\n        if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) {\n            throw new java.lang.ArithmeticException(\"overflow: mul\");\n        }\n        return ((int) (m));\n    }\n\n    public static long mulAndCheck(long a, long b) {\n        long ret;\n        java.lang.String msg = \"overflow: multiply\";\n        if (a > b) {\n            ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);\n        } else if (a < 0) {\n            if (b < 0) {\n                if (a >= (java.lang.Long.MAX_VALUE / b)) {\n                    ret = a * b;\n                } else {\n                    throw new java.lang.ArithmeticException(msg);\n                }\n            } else if (b > 0) {\n                if ((java.lang.Long.MIN_VALUE / b) <= a) {\n                    ret = a * b;\n                } else {\n                    throw new java.lang.ArithmeticException(msg);\n                }\n            } else {\n                ret = 0;\n            }\n        } else if (a > 0) {\n            if (a <= (java.lang.Long.MAX_VALUE / b)) {\n                ret = a * b;\n            } else {\n                throw new java.lang.ArithmeticException(msg);\n            }\n        } else {\n            ret = 0;\n        }\n        return ret;\n    }\n\n    @java.lang.Deprecated\n    public static double nextAfter(double d, double direction) {\n        return org.apache.commons.math.util.FastMath.nextAfter(d, direction);\n    }\n\n    public static double scalb(final double d, final int scaleFactor) {\n        if (((d == 0) || java.lang.Double.isNaN(d)) || java.lang.Double.isInfinite(d)) {\n            return d;\n        }\n        final long bits = java.lang.Double.doubleToLongBits(d);\n        final long exponent = bits & 0x7ff0000000000000L;\n        final long rest = bits & 0x800fffffffffffffL;\n        final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52));\n        return java.lang.Double.longBitsToDouble(newBits);\n    }\n\n    public static double normalizeAngle(double a, double center) {\n        return a - (org.apache.commons.math.util.MathUtils.TWO_PI * org.apache.commons.math.util.FastMath.floor(((a + FastMath.PI) - center) / org.apache.commons.math.util.MathUtils.TWO_PI));\n    }\n\n    public static double[] normalizeArray(double[] values, double normalizedSum) throws java.lang.ArithmeticException, java.lang.IllegalArgumentException {\n        if (java.lang.Double.isInfinite(normalizedSum)) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n        }\n        if (java.lang.Double.isNaN(normalizedSum)) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n        }\n        double sum = 0.0;\n        final int len = values.length;\n        double[] out = new double[len];\n        for (int i = 0; i < len; i++) {\n            if (java.lang.Double.isInfinite(values[i])) {\n                throw org.apache.commons.math.MathRuntimeException.createArithmeticException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n            }\n            if (!java.lang.Double.isNaN(values[i])) {\n                sum += values[i];\n            }\n        }\n        if (sum == 0) {\n            throw org.apache.commons.math.MathRuntimeException.createArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n        }\n        for (int i = 0; i < len; i++) {\n            if (java.lang.Double.isNaN(values[i])) {\n                out[i] = java.lang.Double.NaN;\n            } else {\n                out[i] = (values[i] * normalizedSum) / sum;\n            }\n        }\n        return out;\n    }\n\n    public static double round(double x, int scale) {\n        return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);\n    }\n\n    public static double round(double x, int scale, int roundingMethod) {\n        try {\n            return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();\n        } catch (java.lang.NumberFormatException ex) {\n            if (java.lang.Double.isInfinite(x)) {\n                return x;\n            } else {\n                return java.lang.Double.NaN;\n            }\n        }\n    }\n\n    public static float round(float x, int scale) {\n        return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);\n    }\n\n    public static float round(float x, int scale, int roundingMethod) {\n        float sign = org.apache.commons.math.util.MathUtils.indicator(x);\n        float factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign;\n        return ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled(x * factor, sign, roundingMethod))) / factor;\n    }\n\n    private static double roundUnscaled(double unscaled, double sign, int roundingMethod) {\n        switch (roundingMethod) {\n            case java.math.BigDecimal.ROUND_CEILING :\n                if (sign == (-1)) {\n                    unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\n                } else {\n                    unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\n                }\n                break;\n            case java.math.BigDecimal.ROUND_DOWN :\n                unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\n                break;\n            case java.math.BigDecimal.ROUND_FLOOR :\n                if (sign == (-1)) {\n                    unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\n                } else {\n                    unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\n                }\n                break;\n            case java.math.BigDecimal.ROUND_HALF_DOWN :\n                {\n                    unscaled = org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY);\n                    double fraction = unscaled - org.apache.commons.math.util.FastMath.floor(unscaled);\n                    if (fraction > 0.5) {\n                        unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\n                    } else {\n                        unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\n                    }\n                    break;\n                }\n            case java.math.BigDecimal.ROUND_HALF_EVEN :\n                {\n                    double fraction = unscaled - org.apache.commons.math.util.FastMath.floor(unscaled);\n                    if (fraction > 0.5) {\n                        unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\n                    } else if (fraction < 0.5) {\n                        unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\n                    } else if ((org.apache.commons.math.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(unscaled) / 2.0)) {\n                        unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\n                    } else {\n                        unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\n                    }\n                    break;\n                }\n            case java.math.BigDecimal.ROUND_HALF_UP :\n                {\n                    unscaled = org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY);\n                    double fraction = unscaled - org.apache.commons.math.util.FastMath.floor(unscaled);\n                    if (fraction >= 0.5) {\n                        unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\n                    } else {\n                        unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\n                    }\n                    break;\n                }\n            case java.math.BigDecimal.ROUND_UNNECESSARY :\n                if (unscaled != org.apache.commons.math.util.FastMath.floor(unscaled)) {\n                    throw new java.lang.ArithmeticException(\"Inexact result from rounding\");\n                }\n                break;\n            case java.math.BigDecimal.ROUND_UP :\n                unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\n                break;\n            default :\n                throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD, roundingMethod, \"ROUND_CEILING\", java.math.BigDecimal.ROUND_CEILING, \"ROUND_DOWN\", java.math.BigDecimal.ROUND_DOWN, \"ROUND_FLOOR\", java.math.BigDecimal.ROUND_FLOOR, \"ROUND_HALF_DOWN\", java.math.BigDecimal.ROUND_HALF_DOWN, \"ROUND_HALF_EVEN\", java.math.BigDecimal.ROUND_HALF_EVEN, \"ROUND_HALF_UP\", java.math.BigDecimal.ROUND_HALF_UP, \"ROUND_UNNECESSARY\", java.math.BigDecimal.ROUND_UNNECESSARY, \"ROUND_UP\", java.math.BigDecimal.ROUND_UP);\n        }\n        return unscaled;\n    }\n\n    public static byte sign(final byte x) {\n        return x == org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.ZB : x > org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;\n    }\n\n    public static double sign(final double x) {\n        if (java.lang.Double.isNaN(x)) {\n            return java.lang.Double.NaN;\n        }\n        return x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0;\n    }\n\n    public static float sign(final float x) {\n        if (java.lang.Float.isNaN(x)) {\n            return java.lang.Float.NaN;\n        }\n        return x == 0.0F ? 0.0F : x > 0.0F ? 1.0F : -1.0F;\n    }\n\n    public static int sign(final int x) {\n        return x == 0 ? 0 : x > 0 ? 1 : -1;\n    }\n\n    public static long sign(final long x) {\n        return x == 0L ? 0L : x > 0L ? 1L : -1L;\n    }\n\n    public static short sign(final short x) {\n        return x == org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.ZS : x > org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;\n    }\n\n    public static double sinh(double x) {\n        return (org.apache.commons.math.util.FastMath.exp(x) - org.apache.commons.math.util.FastMath.exp(-x)) / 2.0;\n    }\n\n    public static int subAndCheck(int x, int y) {\n        long s = ((long) (x)) - ((long) (y));\n        if ((s < java.lang.Integer.MIN_VALUE) || (s > java.lang.Integer.MAX_VALUE)) {\n            throw org.apache.commons.math.MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);\n        }\n        return ((int) (s));\n    }\n\n    public static long subAndCheck(long a, long b) {\n        long ret;\n        java.lang.String msg = \"overflow: subtract\";\n        if (b == java.lang.Long.MIN_VALUE) {\n            if (a < 0) {\n                ret = a - b;\n            } else {\n                throw new java.lang.ArithmeticException(msg);\n            }\n        } else {\n            ret = org.apache.commons.math.util.MathUtils.addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);\n        }\n        return ret;\n    }\n\n    public static int pow(final int k, int e) throws java.lang.IllegalArgumentException {\n        if (e < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);\n        }\n        int result = 1;\n        int k2p = k;\n        while (e != 0) {\n            if ((e & 0x1) != 0) {\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        } \n        return result;\n    }\n\n    public static int pow(final int k, long e) throws java.lang.IllegalArgumentException {\n        if (e < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);\n        }\n        int result = 1;\n        int k2p = k;\n        while (e != 0) {\n            if ((e & 0x1) != 0) {\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        } \n        return result;\n    }\n\n    public static long pow(final long k, int e) throws java.lang.IllegalArgumentException {\n        if (e < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);\n        }\n        long result = 1L;\n        long k2p = k;\n        while (e != 0) {\n            if ((e & 0x1) != 0) {\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        } \n        return result;\n    }\n\n    public static long pow(final long k, long e) throws java.lang.IllegalArgumentException {\n        if (e < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);\n        }\n        long result = 1L;\n        long k2p = k;\n        while (e != 0) {\n            if ((e & 0x1) != 0) {\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        } \n        return result;\n    }\n\n    public static java.math.BigInteger pow(final java.math.BigInteger k, int e) throws java.lang.IllegalArgumentException {\n        if (e < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);\n        }\n        return k.pow(e);\n    }\n\n    public static java.math.BigInteger pow(final java.math.BigInteger k, long e) throws java.lang.IllegalArgumentException {\n        if (e < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);\n        }\n        java.math.BigInteger result = java.math.BigInteger.ONE;\n        java.math.BigInteger k2p = k;\n        while (e != 0) {\n            if ((e & 0x1) != 0) {\n                result = result.multiply(k2p);\n            }\n            k2p = k2p.multiply(k2p);\n            e = e >> 1;\n        } \n        return result;\n    }\n\n    public static java.math.BigInteger pow(final java.math.BigInteger k, java.math.BigInteger e) throws java.lang.IllegalArgumentException {\n        if (e.compareTo(java.math.BigInteger.ZERO) < 0) {\n            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);\n        }\n        java.math.BigInteger result = java.math.BigInteger.ONE;\n        java.math.BigInteger k2p = k;\n        while (!java.math.BigInteger.ZERO.equals(e)) {\n            if (e.testBit(0)) {\n                result = result.multiply(k2p);\n            }\n            k2p = k2p.multiply(k2p);\n            e = e.shiftRight(1);\n        } \n        return result;\n    }\n\n    public static double distance1(double[] p1, double[] p2) {\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += org.apache.commons.math.util.FastMath.abs(p1[i] - p2[i]);\n        }\n        return sum;\n    }\n\n    public static int distance1(int[] p1, int[] p2) {\n        int sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += org.apache.commons.math.util.FastMath.abs(p1[i] - p2[i]);\n        }\n        return sum;\n    }\n\n    public static double distance(double[] p1, double[] p2) {\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            final double dp = p1[i] - p2[i];\n            sum += dp * dp;\n        }\n        return org.apache.commons.math.util.FastMath.sqrt(sum);\n    }\n\n    public static double distance(int[] p1, int[] p2) {\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            final double dp = p1[i] - p2[i];\n            sum += dp * dp;\n        }\n        return org.apache.commons.math.util.FastMath.sqrt(sum);\n    }\n\n    public static double distanceInf(double[] p1, double[] p2) {\n        double max = 0;\n        for (int i = 0; i < p1.length; i++) {\n            max = org.apache.commons.math.util.FastMath.max(max, org.apache.commons.math.util.FastMath.abs(p1[i] - p2[i]));\n        }\n        return max;\n    }\n\n    public static int distanceInf(int[] p1, int[] p2) {\n        int max = 0;\n        for (int i = 0; i < p1.length; i++) {\n            max = org.apache.commons.math.util.FastMath.max(max, org.apache.commons.math.util.FastMath.abs(p1[i] - p2[i]));\n        }\n        return max;\n    }\n\n    public static enum OrderDirection {\n\n        INCREASING,\n        DECREASING;}\n\n    public static void checkOrder(double[] val, org.apache.commons.math.util.MathUtils.OrderDirection dir, boolean strict) {\n        double previous = val[0];\n        boolean ok = true;\n        int max = val.length;\n        for (int i = 1; i < max; i++) {\n            switch (dir) {\n                case INCREASING :\n                    if (strict) {\n                        if (val[i] <= previous) {\n                            ok = false;\n                        }\n                    } else if (val[i] < previous) {\n                        ok = false;\n                    }\n                    break;\n                case DECREASING :\n                    if (strict) {\n                        if (val[i] >= previous) {\n                            ok = false;\n                        }\n                    } else if (val[i] > previous) {\n                        ok = false;\n                    }\n                    break;\n                default :\n                    throw new java.lang.IllegalArgumentException();\n            }\n            if (!ok) {\n                throw new org.apache.commons.math.exception.NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n            }\n            previous = val[i];\n        }\n    }\n\n    public static void checkOrder(double[] val) {\n        org.apache.commons.math.util.MathUtils.checkOrder(val, org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING, true);\n    }\n\n    public static void checkOrder(double[] val, int dir, boolean strict) {\n        if (dir > 0) {\n            org.apache.commons.math.util.MathUtils.checkOrder(val, org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING, strict);\n        } else {\n            org.apache.commons.math.util.MathUtils.checkOrder(val, org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING, strict);\n        }\n    }\n\n    public static double safeNorm(double[] v) {\n        double rdwarf = 3.834E-20;\n        double rgiant = 1.304E19;\n        double s1 = 0.0;\n        double s2 = 0.0;\n        double s3 = 0.0;\n        double x1max = 0.0;\n        double x3max = 0.0;\n        double floatn = ((double) (v.length));\n        double agiant = rgiant / floatn;\n        for (int i = 0; i < v.length; i++) {\n            double xabs = java.lang.Math.abs(v[i]);\n            if ((xabs < rdwarf) || (xabs > agiant)) {\n                if (xabs > rdwarf) {\n                    if (xabs > x1max) {\n                        double r = x1max / xabs;\n                        s1 = 1.0 + ((s1 * r) * r);\n                        x1max = xabs;\n                    } else {\n                        double r = xabs / x1max;\n                        s1 += r * r;\n                    }\n                } else if (xabs > x3max) {\n                    double r = x3max / xabs;\n                    s3 = 1.0 + ((s3 * r) * r);\n                    x3max = xabs;\n                } else if (xabs != 0.0) {\n                    double r = xabs / x3max;\n                    s3 += r * r;\n                }\n            } else {\n                s2 += xabs * xabs;\n            }\n        }\n        double norm;\n        if (s1 != 0.0) {\n            norm = x1max * java.lang.Math.sqrt(s1 + ((s2 / x1max) / x1max));\n        } else if (s2 == 0.0) {\n            norm = x3max * java.lang.Math.sqrt(s3);\n        } else if (s2 >= x3max) {\n            norm = java.lang.Math.sqrt(s2 * (1.0 + ((x3max / s2) * (x3max * s3))));\n        } else {\n            norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));\n        }\n        return norm;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.commons.math.util.MathUtils.equals(x, y, 1)",
            "src_parent": "return org.apache.commons.math.util.MathUtils.equals(x, y, 1)",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Break",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.commons.math.util.FastMath",
            "src_parent": "org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Break",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.commons.math.util.FastMath",
            "src_parent": "org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY)",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Break",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.commons.math.util.FastMath",
            "src_parent": "org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Break",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.commons.math.util.FastMath",
            "src_parent": "org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY)",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.commons.math.util.FastMath",
            "src_parent": "org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.commons.math.util.FastMath",
            "src_parent": "org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY)",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.commons.math.util.FastMath",
            "src_parent": "org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY)",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.commons.math.util.FastMath",
            "src_parent": "org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "x",
            "dst_parent": "org.apache.commons.math.util.MathUtils.equals(x, y, 1)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "x",
            "src_parent": "java.lang.Double.isNaN(x)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "y",
            "dst_parent": "org.apache.commons.math.util.MathUtils.equals(x, y, 1)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "y",
            "src_parent": "java.lang.Double.isNaN(y)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Double.NEGATIVE_INFINITY",
            "dst_parent": "org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "java.lang.Double.NEGATIVE_INFINITY",
            "src_parent": "org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Double.NEGATIVE_INFINITY",
            "dst_parent": "org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "java.lang.Double.NEGATIVE_INFINITY",
            "src_parent": "org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Break",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Double.NEGATIVE_INFINITY",
            "dst_parent": "org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "java.lang.Double.NEGATIVE_INFINITY",
            "src_parent": "org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Double.POSITIVE_INFINITY",
            "dst_parent": "org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "java.lang.Double.POSITIVE_INFINITY",
            "src_parent": "org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Double.POSITIVE_INFINITY",
            "dst_parent": "org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "java.lang.Double.POSITIVE_INFINITY",
            "src_parent": "org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Break",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Double.NEGATIVE_INFINITY",
            "dst_parent": "org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "java.lang.Double.NEGATIVE_INFINITY",
            "src_parent": "org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        }
      ],
      "file_name": "MathUtils"
    }
  ],
  "id": "commons-math_495f04bc"
}