{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "!getBase().exists()",
            "src_parent": "return !getBase().exists()",
            "src_parent_type": "Return",
            "src_type": "UnaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private org.apache.jackrabbit.oak.spi.state.NodeState getBase() {\n    if (parent == null) {\n        return root.getBaseState();\n    } else {\n        return parent.getBase().getChildNode(name);\n    }\n}",
            "src_parent": "public class MutableTree extends org.apache.jackrabbit.oak.core.AbstractTree {\n    private final org.apache.jackrabbit.oak.core.AbstractRoot root;\n\n    private org.apache.jackrabbit.oak.core.MutableTree parent;\n\n    private org.apache.jackrabbit.oak.core.AbstractRoot.Move pendingMoves;\n\n    MutableTree(org.apache.jackrabbit.oak.core.AbstractRoot root, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder, org.apache.jackrabbit.oak.core.AbstractRoot.Move pendingMoves) {\n        super(\"\", builder);\n        this.root = com.google.common.base.Preconditions.checkNotNull(root);\n        this.pendingMoves = com.google.common.base.Preconditions.checkNotNull(pendingMoves);\n    }\n\n    private MutableTree(org.apache.jackrabbit.oak.core.AbstractRoot root, org.apache.jackrabbit.oak.core.MutableTree parent, java.lang.String name, org.apache.jackrabbit.oak.core.AbstractRoot.Move pendingMoves) {\n        super(name, parent.nodeBuilder.getChildNode(name));\n        this.root = com.google.common.base.Preconditions.checkNotNull(root);\n        this.parent = com.google.common.base.Preconditions.checkNotNull(parent);\n        this.pendingMoves = com.google.common.base.Preconditions.checkNotNull(pendingMoves);\n    }\n\n    @java.lang.Override\n    protected org.apache.jackrabbit.oak.core.MutableTree createChild(java.lang.String name) {\n        return new org.apache.jackrabbit.oak.core.MutableTree(root, this, name, pendingMoves);\n    }\n\n    @java.lang.Override\n    protected boolean isNew() {\n        return !getBase().exists();\n    }\n\n    @java.lang.Override\n    protected boolean isModified() {\n        return nodeBuilder.isModified();\n    }\n\n    @java.lang.Override\n    public java.lang.String getName() {\n        beforeRead();\n        return name;\n    }\n\n    @java.lang.Override\n    public java.lang.String getPath() {\n        beforeRead();\n        return super.getPath();\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.core.Status getStatus() {\n        beforeRead();\n        return super.getStatus();\n    }\n\n    @java.lang.Override\n    public boolean exists() {\n        beforeRead();\n        return isVisible();\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.core.MutableTree getParent() {\n        beforeRead();\n        com.google.common.base.Preconditions.checkState(parent != null, \"root tree does not have a parent\");\n        return parent;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.api.PropertyState getProperty(java.lang.String name) {\n        beforeRead();\n        return super.getProperty(name);\n    }\n\n    @java.lang.Override\n    public boolean hasProperty(java.lang.String name) {\n        beforeRead();\n        return super.hasProperty(name);\n    }\n\n    @java.lang.Override\n    public long getPropertyCount() {\n        beforeRead();\n        return super.getPropertyCount();\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.core.Status getPropertyStatus(java.lang.String name) {\n        beforeRead();\n        if (!hasProperty(name)) {\n            return null;\n        }\n        org.apache.jackrabbit.oak.core.Status nodeStatus = super.getStatus();\n        if (nodeStatus == NEW) {\n            return super.hasProperty(name) ? NEW : null;\n        }\n        org.apache.jackrabbit.oak.api.PropertyState head = super.getProperty(name);\n        if (head == null) {\n            return null;\n        }\n        org.apache.jackrabbit.oak.api.PropertyState base = getSecureBase().getProperty(name);\n        if (base == null) {\n            return NEW;\n        } else if (head.equals(base)) {\n            return EXISTING;\n        } else {\n            return MODIFIED;\n        }\n    }\n\n    @java.lang.Override\n    public java.lang.Iterable<? extends org.apache.jackrabbit.oak.api.PropertyState> getProperties() {\n        beforeRead();\n        return super.getProperties();\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.api.Tree getChild(java.lang.String name) {\n        beforeRead();\n        return createChild(name);\n    }\n\n    @java.lang.Override\n    public boolean hasChild(java.lang.String name) {\n        beforeRead();\n        return super.hasChild(name);\n    }\n\n    @java.lang.Override\n    public long getChildrenCount(long max) {\n        beforeRead();\n        return super.getChildrenCount(max);\n    }\n\n    @java.lang.Override\n    public java.lang.Iterable<org.apache.jackrabbit.oak.api.Tree> getChildren() {\n        beforeRead();\n        return super.getChildren();\n    }\n\n    @java.lang.Override\n    public boolean remove() {\n        beforeWrite();\n        if ((parent != null) && parent.hasChild(name)) {\n            nodeBuilder.remove();\n            if (parent.hasOrderableChildren()) {\n                parent.nodeBuilder.setProperty(org.apache.jackrabbit.oak.plugins.memory.MemoryPropertyBuilder.copy(org.apache.jackrabbit.oak.core.STRING, parent.nodeBuilder.getProperty(org.apache.jackrabbit.oak.core.OAK_CHILD_ORDER)).removeValue(name).getPropertyState());\n            }\n            root.updated();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.api.Tree addChild(java.lang.String name) {\n        beforeWrite();\n        if (!super.hasChild(name)) {\n            nodeBuilder.setChildNode(name);\n            if (hasOrderableChildren()) {\n                nodeBuilder.setProperty(org.apache.jackrabbit.oak.plugins.memory.MemoryPropertyBuilder.copy(org.apache.jackrabbit.oak.core.STRING, nodeBuilder.getProperty(org.apache.jackrabbit.oak.core.OAK_CHILD_ORDER)).addValue(name).getPropertyState());\n            }\n            root.updated();\n        }\n        return createChild(name);\n    }\n\n    @java.lang.Override\n    public void setOrderableChildren(boolean enable) {\n        beforeWrite();\n        if (enable) {\n            ensureChildOrderProperty();\n        } else {\n            nodeBuilder.removeProperty(org.apache.jackrabbit.oak.core.OAK_CHILD_ORDER);\n        }\n    }\n\n    @java.lang.Override\n    public boolean orderBefore(final java.lang.String name) {\n        beforeWrite();\n        if (parent == null) {\n            return false;\n        }\n        if (name != null) {\n            if (name.equals(this.name) || (!parent.hasChild(name))) {\n                return false;\n            }\n        }\n        parent.ensureChildOrderProperty();\n        java.lang.Iterable<java.lang.String> siblings = com.google.common.collect.Iterables.filter(parent.getChildNames(), new com.google.common.base.Predicate<java.lang.String>() {\n            @java.lang.Override\n            public boolean apply(java.lang.String name) {\n                return !MutableTree.this.name.equals(name);\n            }\n        });\n        java.lang.Iterable<java.lang.String> head;\n        java.lang.Iterable<java.lang.String> tail;\n        if (name == null) {\n            head = siblings;\n            tail = java.util.Collections.emptyList();\n        } else {\n            int idx = com.google.common.collect.Iterables.indexOf(siblings, new com.google.common.base.Predicate<java.lang.String>() {\n                @java.lang.Override\n                public boolean apply(java.lang.String sibling) {\n                    return name.equals(sibling);\n                }\n            });\n            head = com.google.common.collect.Iterables.limit(siblings, idx);\n            tail = com.google.common.collect.Iterables.skip(siblings, idx);\n        }\n        parent.nodeBuilder.setProperty(org.apache.jackrabbit.oak.plugins.memory.MultiStringPropertyState.stringProperty(org.apache.jackrabbit.oak.core.OAK_CHILD_ORDER, com.google.common.collect.Iterables.concat(head, java.util.Collections.singleton(getName()), tail)));\n        root.updated();\n        return true;\n    }\n\n    @java.lang.Override\n    public void setProperty(org.apache.jackrabbit.oak.api.PropertyState property) {\n        beforeWrite();\n        nodeBuilder.setProperty(property);\n        root.updated();\n    }\n\n    @java.lang.Override\n    public <T> void setProperty(java.lang.String name, T value) {\n        beforeWrite();\n        nodeBuilder.setProperty(name, value);\n        root.updated();\n    }\n\n    @java.lang.Override\n    public <T> void setProperty(java.lang.String name, T value, org.apache.jackrabbit.oak.api.Type<T> type) {\n        beforeWrite();\n        nodeBuilder.setProperty(name, value, type);\n        root.updated();\n    }\n\n    @java.lang.Override\n    public void removeProperty(java.lang.String name) {\n        beforeWrite();\n        nodeBuilder.removeProperty(name);\n        root.updated();\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return (getPathInternal() + \": \") + getNodeState();\n    }\n\n    private org.apache.jackrabbit.oak.spi.state.NodeState getBase() {\n        if (parent == null) {\n            return root.getBaseState();\n        } else {\n            return parent.getBase().getChildNode(name);\n        }\n    }\n\n    void setParentAndName(org.apache.jackrabbit.oak.core.MutableTree parent, java.lang.String name) {\n        this.name = name;\n        this.parent = parent;\n    }\n\n    boolean moveTo(org.apache.jackrabbit.oak.core.MutableTree newParent, java.lang.String newName) {\n        name = newName;\n        parent = newParent;\n        return nodeBuilder.moveTo(newParent.nodeBuilder, newName);\n    }\n\n    boolean copyTo(org.apache.jackrabbit.oak.core.MutableTree newParent, java.lang.String newName) {\n        return nodeBuilder.copyTo(newParent.nodeBuilder, newName);\n    }\n\n    @javax.annotation.CheckForNull\n    org.apache.jackrabbit.oak.core.MutableTree getTree(@javax.annotation.Nonnull\n    java.lang.String path) {\n        com.google.common.base.Preconditions.checkArgument(isAbsolute(com.google.common.base.Preconditions.checkNotNull(path)));\n        beforeRead();\n        org.apache.jackrabbit.oak.core.MutableTree child = this;\n        for (java.lang.String name : elements(path)) {\n            child = new org.apache.jackrabbit.oak.core.MutableTree(root, child, name, pendingMoves);\n        }\n        return child;\n    }\n\n    void updateChildOrder() {\n        if (!hasOrderableChildren()) {\n            return;\n        }\n        java.util.Set<java.lang.String> names = com.google.common.collect.Sets.newLinkedHashSet();\n        for (java.lang.String name : getChildNames()) {\n            if (nodeBuilder.hasChildNode(name)) {\n                names.add(name);\n            }\n        }\n        for (java.lang.String name : nodeBuilder.getChildNodeNames()) {\n            names.add(name);\n        }\n        org.apache.jackrabbit.oak.spi.state.PropertyBuilder<java.lang.String> builder = org.apache.jackrabbit.oak.plugins.memory.MemoryPropertyBuilder.array(org.apache.jackrabbit.oak.core.STRING, org.apache.jackrabbit.oak.core.OAK_CHILD_ORDER);\n        builder.setValues(names);\n        nodeBuilder.setProperty(builder.getPropertyState());\n    }\n\n    java.lang.String getPathInternal() {\n        if (parent == null) {\n            return \"/\";\n        } else {\n            java.lang.StringBuilder sb = new java.lang.StringBuilder();\n            buildPath(sb);\n            return sb.toString();\n        }\n    }\n\n    private void buildPath(java.lang.StringBuilder sb) {\n        if (parent != null) {\n            parent.buildPath(sb);\n            sb.append('/').append(name);\n        }\n    }\n\n    private void reconnect() {\n        if (parent != null) {\n            parent.reconnect();\n            nodeBuilder = parent.nodeBuilder.getChildNode(name);\n        }\n    }\n\n    private void beforeRead() throws java.lang.IllegalStateException {\n        root.checkLive();\n        if (applyPendingMoves()) {\n            reconnect();\n        }\n    }\n\n    private void beforeWrite() throws java.lang.IllegalStateException {\n        beforeRead();\n        if (!isVisible()) {\n            throw new java.lang.IllegalStateException(\"This tree does not exist\");\n        }\n    }\n\n    private boolean isVisible() {\n        return (!isHidden(name)) && nodeBuilder.exists();\n    }\n\n    @javax.annotation.Nonnull\n    private org.apache.jackrabbit.oak.spi.state.NodeState getSecureBase() {\n        if (parent == null) {\n            return root.getSecureBase();\n        } else {\n            return parent.getSecureBase().getChildNode(name);\n        }\n    }\n\n    private boolean applyPendingMoves() {\n        boolean movesApplied = false;\n        if (parent != null) {\n            movesApplied = parent.applyPendingMoves();\n        }\n        org.apache.jackrabbit.oak.core.AbstractRoot.Move old = pendingMoves;\n        pendingMoves = pendingMoves.apply(this);\n        if (pendingMoves != old) {\n            movesApplied = true;\n        }\n        return movesApplied;\n    }\n\n    private void ensureChildOrderProperty() {\n        if (!nodeBuilder.hasProperty(org.apache.jackrabbit.oak.core.OAK_CHILD_ORDER)) {\n            nodeBuilder.setProperty(org.apache.jackrabbit.oak.plugins.memory.MultiStringPropertyState.stringProperty(org.apache.jackrabbit.oak.core.OAK_CHILD_ORDER, nodeBuilder.getChildNodeNames()));\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "nodeBuilder.isNew()",
            "src_parent": "return nodeBuilder.isNew()",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "MutableTree"
    }
  ],
  "id": "jackrabbit-oak_f2bb1a17"
}