{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "private void readOpenDotClose(boolean readOpenBracket) throws java.text.ParseException {\n    if (readOpenBracket) {\n        read(\"(\");\n    }\n    readIf(\".\");\n    read(\")\");\n}",
            "dst_parent": "public class XPathToSQL2Converter {\n    public static final boolean NODETYPE_OPTIMIZATION = java.lang.Boolean.parseBoolean(java.lang.System.getProperty(\"oak.xpathNodeTypeOptimization\", \"true\"));\n\n    public static final boolean NODETYPE_UNION = java.lang.Boolean.parseBoolean(java.lang.System.getProperty(\"oak.xpathNodeTypeUnion\", \"true\"));\n\n    static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.class);\n\n    private static final int CHAR_END = -1;\n\n    private static final int CHAR_VALUE = 2;\n\n    private static final int CHAR_NAME = 4;\n\n    private static final int CHAR_SPECIAL_1 = 5;\n\n    private static final int CHAR_SPECIAL_2 = 6;\n\n    private static final int CHAR_STRING = 7;\n\n    private static final int CHAR_DECIMAL = 8;\n\n    private static final int KEYWORD = 1;\n\n    private static final int IDENTIFIER = 2;\n\n    private static final int END = 4;\n\n    private static final int VALUE_STRING = 5;\n\n    private static final int VALUE_NUMBER = 6;\n\n    private static final int MINUS = 12;\n\n    private static final int PLUS = 13;\n\n    private static final int OPEN = 14;\n\n    private static final int CLOSE = 15;\n\n    private java.lang.String statement;\n\n    private char[] statementChars;\n\n    private int[] characterTypes;\n\n    private int parseIndex;\n\n    private int currentTokenType;\n\n    private java.lang.String currentToken;\n\n    private boolean currentTokenQuoted;\n\n    private java.util.ArrayList<java.lang.String> expected;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector currentSelector = new org.apache.jackrabbit.oak.query.xpath.Selector();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector>();\n\n    public java.lang.String convert(java.lang.String query) throws java.text.ParseException {\n        org.apache.jackrabbit.oak.query.xpath.Statement statement = convertToStatement(query);\n        statement = statement.optimize();\n        return statement.toString();\n    }\n\n    private org.apache.jackrabbit.oak.query.xpath.Statement convertToStatement(java.lang.String query) throws java.text.ParseException {\n        query = query.trim();\n        org.apache.jackrabbit.oak.query.xpath.Statement statement = new org.apache.jackrabbit.oak.query.xpath.Statement();\n        if (query.startsWith(\"explain \")) {\n            query = query.substring(\"explain\".length()).trim();\n            statement.setExplain(true);\n        }\n        if (query.startsWith(\"measure\")) {\n            query = query.substring(\"measure\".length()).trim();\n            statement.setMeasure(true);\n        }\n        if (query.isEmpty()) {\n            query = \"//jcr:root\";\n        }\n        statement.setOriginalQuery(query);\n        initialize(query);\n        expected = new java.util.ArrayList<java.lang.String>();\n        read();\n        if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.END) {\n            throw getSyntaxError(\"the query may not be empty\");\n        }\n        currentSelector.name = \"a\";\n        java.lang.String pathPattern = \"\";\n        boolean startOfQuery = true;\n        while (true) {\n            boolean shortcut = false;\n            boolean slash = readIf(\"/\");\n            if (!slash) {\n                if (startOfQuery) {\n                    currentSelector.path = \"/\";\n                    pathPattern = \"/\";\n                    currentSelector.isChild = true;\n                } else {\n                    break;\n                }\n            } else if (readIf(\"jcr:root\")) {\n                if (!pathPattern.isEmpty()) {\n                    throw getSyntaxError(\"jcr:root needs to be at the beginning\");\n                }\n                if (readIf(\"/\")) {\n                    currentSelector.path = \"/\";\n                    pathPattern = \"/\";\n                    if (readIf(\"/\")) {\n                        pathPattern = \"//\";\n                        currentSelector.isDescendant = true;\n                    } else {\n                        currentSelector.isChild = true;\n                    }\n                } else {\n                    pathPattern = \"/%\";\n                    currentSelector.path = \"/\";\n                    shortcut = true;\n                }\n            } else if (readIf(\"/\")) {\n                pathPattern += \"%\";\n                if (currentSelector.isDescendant) {\n                    nextSelector(true);\n                }\n                currentSelector.isDescendant = true;\n            } else {\n                pathPattern += \"/\";\n                if (startOfQuery) {\n                    currentSelector.path = \"/\";\n                } else {\n                    if (currentSelector.isDescendant) {\n                        nextSelector(true);\n                    }\n                    currentSelector.isChild = true;\n                }\n            }\n            int startParseIndex = parseIndex;\n            if (shortcut) {\n            } else if (readIf(\"*\")) {\n                pathPattern += \"%\";\n                if (!currentSelector.isDescendant) {\n                    if ((selectors.size() == 0) && currentSelector.path.equals(\"\")) {\n                        currentSelector.path = \"/\";\n                    }\n                }\n            } else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n                java.lang.String identifier = readIdentifier();\n                if (readIf(\"(\")) {\n                    if (\"text\".equals(identifier)) {\n                        currentSelector.isChild = false;\n                        pathPattern += \"jcr:xmltext\";\n                        read(\")\");\n                        if (currentSelector.isDescendant) {\n                            currentSelector.nodeName = \"jcr:xmltext\";\n                        } else {\n                            currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n                        }\n                    } else if (\"element\".equals(identifier)) {\n                        if (readIf(\")\")) {\n                            pathPattern += \"%\";\n                        } else {\n                            if (readIf(\"*\")) {\n                                pathPattern += \"%\";\n                            } else {\n                                java.lang.String name = readPathSegment();\n                                pathPattern += name;\n                                appendNodeName(name);\n                            }\n                            if (readIf(\",\")) {\n                                currentSelector.nodeType = readIdentifier();\n                            }\n                            read(\")\");\n                        }\n                    } else if (\"rep:excerpt\".equals(identifier)) {\n                        readOpenDotClose(false);\n                        rewindSelector();\n                        org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n                        statement.addSelectColumn(p);\n                    } else {\n                        throw getSyntaxError();\n                    }\n                } else {\n                    java.lang.String name = org.apache.jackrabbit.util.ISO9075.decode(identifier);\n                    pathPattern += name;\n                    appendNodeName(name);\n                }\n            } else if (readIf(\"@\")) {\n                rewindSelector();\n                org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n                statement.addSelectColumn(p);\n            } else if (readIf(\"(\")) {\n                rewindSelector();\n                do {\n                    if (readIf(\"@\")) {\n                        org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n                        statement.addSelectColumn(p);\n                    } else if (readIf(\"rep:excerpt\")) {\n                        readOpenDotClose(true);\n                        org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n                        statement.addSelectColumn(p);\n                    } else if (readIf(\"rep:spellcheck\")) {\n                        read(\"(\");\n                        read(\")\");\n                        org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n                        statement.addSelectColumn(p);\n                    } else if (readIf(\"rep:suggest\")) {\n                        readOpenDotClose(true);\n                        org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n                        statement.addSelectColumn(p);\n                    }\n                } while (readIf(\"|\") );\n                if (!readIf(\")\")) {\n                    return convertToUnion(query, statement, startParseIndex - 1);\n                }\n            } else if (readIf(\".\")) {\n                if (readIf(\".\")) {\n                    java.lang.String name = \"..\";\n                    pathPattern += name;\n                    if (!currentSelector.isChild) {\n                        currentSelector.nodeName = name;\n                    } else if (currentSelector.isChild) {\n                        currentSelector.isChild = false;\n                        currentSelector.isParent = true;\n                    }\n                } else if (selectors.size() > 0) {\n                    currentSelector = selectors.remove(selectors.size() - 1);\n                    currentSelector.condition = null;\n                    currentSelector.joinCondition = null;\n                }\n            } else {\n                throw getSyntaxError();\n            }\n            if (readIf(\"[\")) {\n                org.apache.jackrabbit.oak.query.xpath.Expression c = parseConstraint();\n                currentSelector.condition = org.apache.jackrabbit.oak.query.xpath.Expression.and(currentSelector.condition, c);\n                read(\"]\");\n            }\n            startOfQuery = false;\n            nextSelector(false);\n        } \n        if (selectors.size() == 0) {\n            nextSelector(true);\n        }\n        currentSelector = selectors.get(selectors.size() - 1);\n        if (selectors.size() == 1) {\n            currentSelector.onlySelector = true;\n        }\n        if (readIf(\"order\")) {\n            read(\"by\");\n            do {\n                org.apache.jackrabbit.oak.query.xpath.Order order = new org.apache.jackrabbit.oak.query.xpath.Order();\n                order.expr = parseExpression();\n                if (readIf(\"descending\")) {\n                    order.descending = true;\n                } else {\n                    readIf(\"ascending\");\n                }\n                statement.addOrderBy(order);\n            } while (readIf(\",\") );\n        }\n        if (!currentToken.isEmpty()) {\n            throw getSyntaxError(\"<end>\");\n        }\n        statement.setColumnSelector(currentSelector);\n        statement.setSelectors(selectors);\n        org.apache.jackrabbit.oak.query.xpath.Expression where = null;\n        for (org.apache.jackrabbit.oak.query.xpath.Selector s : selectors) {\n            where = org.apache.jackrabbit.oak.query.xpath.Expression.and(where, s.condition);\n        }\n        statement.setWhere(where);\n        return statement;\n    }\n\n    private void appendNodeName(java.lang.String name) {\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (selectors.size() > 0) {\n            currentSelector.isChild = true;\n            currentSelector.nodeName = name;\n        } else {\n            currentSelector.isChild = false;\n            java.lang.String oldPath = currentSelector.path;\n            currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(oldPath, name);\n        }\n    }\n\n    private void rewindSelector() {\n        if (selectors.size() > 0) {\n            currentSelector = selectors.remove(selectors.size() - 1);\n            currentSelector.isChild = false;\n            currentSelector.isDescendant = false;\n            currentSelector.path = \"\";\n            currentSelector.nodeName = null;\n        }\n    }\n\n    private void nextSelector(boolean force) throws java.text.ParseException {\n        boolean isFirstSelector = selectors.size() == 0;\n        java.lang.String path = currentSelector.path;\n        org.apache.jackrabbit.oak.query.xpath.Expression condition = currentSelector.condition;\n        org.apache.jackrabbit.oak.query.xpath.Expression joinCondition = null;\n        if (currentSelector.nodeName != null) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Function f = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"name\");\n            f.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(currentSelector));\n            java.lang.String n = currentSelector.nodeName;\n            n = org.apache.jackrabbit.util.ISO9075.encode(n);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Condition c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(f, \"=\", Expression.Literal.newString(n), Expression.PRECEDENCE_CONDITION);\n            condition = org.apache.jackrabbit.oak.query.xpath.Expression.and(condition, c);\n        }\n        if (currentSelector.isDescendant) {\n            if (isFirstSelector) {\n                if (!path.isEmpty()) {\n                    if (!org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) {\n                        path = org.apache.jackrabbit.oak.commons.PathUtils.concat(\"/\", path);\n                    }\n                    org.apache.jackrabbit.oak.query.xpath.Expression.Function c = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"isdescendantnode\");\n                    c.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(currentSelector));\n                    c.params.add(Expression.Literal.newString(path));\n                    condition = org.apache.jackrabbit.oak.query.xpath.Expression.and(condition, c);\n                }\n            } else {\n                org.apache.jackrabbit.oak.query.xpath.Expression.Function c = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"isdescendantnode\");\n                c.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(currentSelector));\n                c.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(selectors.get(selectors.size() - 1)));\n                joinCondition = c;\n            }\n        } else if (currentSelector.isParent) {\n            if (isFirstSelector) {\n                throw getSyntaxError();\n            } else {\n                org.apache.jackrabbit.oak.query.xpath.Expression.Function c = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"ischildnode\");\n                c.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(selectors.get(selectors.size() - 1)));\n                c.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(currentSelector));\n                joinCondition = c;\n            }\n        } else if (currentSelector.isChild) {\n            if (isFirstSelector) {\n                if (!path.isEmpty()) {\n                    if (!org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) {\n                        path = org.apache.jackrabbit.oak.commons.PathUtils.concat(\"/\", path);\n                    }\n                    org.apache.jackrabbit.oak.query.xpath.Expression.Function c = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"ischildnode\");\n                    c.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(currentSelector));\n                    c.params.add(Expression.Literal.newString(path));\n                    condition = org.apache.jackrabbit.oak.query.xpath.Expression.and(condition, c);\n                }\n            } else {\n                org.apache.jackrabbit.oak.query.xpath.Expression.Function c = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"ischildnode\");\n                c.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(currentSelector));\n                c.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(selectors.get(selectors.size() - 1)));\n                joinCondition = c;\n            }\n        } else if (((!force) && (condition == null)) && (joinCondition == null)) {\n        } else if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Function c = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"issamenode\");\n            c.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(currentSelector));\n            c.params.add(Expression.Literal.newString(path));\n            condition = org.apache.jackrabbit.oak.query.xpath.Expression.and(condition, c);\n        }\n        if ((force || (condition != null)) || (joinCondition != null)) {\n            java.lang.String nextSelectorName = \"\" + ((char) (currentSelector.name.charAt(0) + 1));\n            if (nextSelectorName.compareTo(\"x\") > 0) {\n                throw getSyntaxError(\"too many joins\");\n            }\n            org.apache.jackrabbit.oak.query.xpath.Selector nextSelector = new org.apache.jackrabbit.oak.query.xpath.Selector();\n            nextSelector.name = nextSelectorName;\n            currentSelector.condition = condition;\n            currentSelector.joinCondition = org.apache.jackrabbit.oak.query.xpath.Expression.and(currentSelector.joinCondition, joinCondition);\n            selectors.add(currentSelector);\n            currentSelector = nextSelector;\n        }\n    }\n\n    private org.apache.jackrabbit.oak.query.xpath.Expression parseConstraint() throws java.text.ParseException {\n        org.apache.jackrabbit.oak.query.xpath.Expression a = parseAnd();\n        int i = 0;\n        while (readIf(\"or\")) {\n            a = new org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition(a, parseAnd());\n            if (((++i) % 100) == 0) {\n                a = a.optimize();\n            }\n        } \n        return a.optimize();\n    }\n\n    private org.apache.jackrabbit.oak.query.xpath.Expression parseAnd() throws java.text.ParseException {\n        org.apache.jackrabbit.oak.query.xpath.Expression a = parseCondition();\n        while (readIf(\"and\")) {\n            a = new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(a, parseCondition());\n        } \n        return a.optimize();\n    }\n\n    private org.apache.jackrabbit.oak.query.xpath.Expression parseCondition() throws java.text.ParseException {\n        org.apache.jackrabbit.oak.query.xpath.Expression a;\n        if (readIf(\"fn:not\") || readIf(\"not\")) {\n            read(\"(\");\n            a = parseConstraint();\n            if ((a instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Condition) && ((org.apache.jackrabbit.oak.query.xpath.Expression.Condition) (a)).operator.equals(\"is not null\")) {\n                org.apache.jackrabbit.oak.query.xpath.Expression.Condition c = ((org.apache.jackrabbit.oak.query.xpath.Expression.Condition) (a));\n                c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(c.left, \"is null\", null, Expression.PRECEDENCE_CONDITION);\n                a = c;\n            } else {\n                org.apache.jackrabbit.oak.query.xpath.Expression.Function f = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"not\");\n                f.params.add(a);\n                a = f;\n            }\n            read(\")\");\n        } else if (readIf(\"(\")) {\n            a = parseConstraint();\n            read(\")\");\n        } else {\n            org.apache.jackrabbit.oak.query.xpath.Expression e = parseExpression();\n            if (e.isCondition()) {\n                return e;\n            }\n            a = parseCondition(e);\n        }\n        return a.optimize();\n    }\n\n    private Expression.Condition parseCondition(org.apache.jackrabbit.oak.query.xpath.Expression left) throws java.text.ParseException {\n        org.apache.jackrabbit.oak.query.xpath.Expression.Condition c;\n        if (readIf(\"=\")) {\n            c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(left, \"=\", parseExpression(), Expression.PRECEDENCE_CONDITION);\n        } else if (readIf(\"<>\")) {\n            c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(left, \"<>\", parseExpression(), Expression.PRECEDENCE_CONDITION);\n        } else if (readIf(\"!=\")) {\n            c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(left, \"<>\", parseExpression(), Expression.PRECEDENCE_CONDITION);\n        } else if (readIf(\"<\")) {\n            c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(left, \"<\", parseExpression(), Expression.PRECEDENCE_CONDITION);\n        } else if (readIf(\">\")) {\n            c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(left, \">\", parseExpression(), Expression.PRECEDENCE_CONDITION);\n        } else if (readIf(\"<=\")) {\n            c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(left, \"<=\", parseExpression(), Expression.PRECEDENCE_CONDITION);\n        } else if (readIf(\">=\")) {\n            c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(left, \">=\", parseExpression(), Expression.PRECEDENCE_CONDITION);\n        } else {\n            c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(left, \"is not null\", null, Expression.PRECEDENCE_CONDITION);\n        }\n        return c;\n    }\n\n    private org.apache.jackrabbit.oak.query.xpath.Expression parseExpression() throws java.text.ParseException {\n        if (readIf(\"@\")) {\n            return readProperty();\n        } else if (readIf(\"true\")) {\n            if (readIf(\"(\")) {\n                read(\")\");\n            }\n            return Expression.Literal.newBoolean(true);\n        } else if (readIf(\"false\")) {\n            if (readIf(\"(\")) {\n                read(\")\");\n            }\n            return Expression.Literal.newBoolean(false);\n        } else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.VALUE_NUMBER) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Literal l = Expression.Literal.newNumber(currentToken);\n            read();\n            return l;\n        } else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.VALUE_STRING) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Literal l = Expression.Literal.newString(currentToken);\n            read();\n            return l;\n        } else if (readIf(\"-\")) {\n            if (currentTokenType != org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.VALUE_NUMBER) {\n                throw getSyntaxError();\n            }\n            org.apache.jackrabbit.oak.query.xpath.Expression.Literal l = Expression.Literal.newNumber('-' + currentToken);\n            read();\n            return l;\n        } else if (readIf(\"+\")) {\n            if (currentTokenType != org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.VALUE_NUMBER) {\n                throw getSyntaxError();\n            }\n            return parseExpression();\n        } else {\n            return parsePropertyOrFunction();\n        }\n    }\n\n    private org.apache.jackrabbit.oak.query.xpath.Expression parsePropertyOrFunction() throws java.text.ParseException {\n        java.lang.StringBuilder buff = new java.lang.StringBuilder();\n        boolean isPath = false;\n        while (true) {\n            if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n                java.lang.String name = readPathSegment();\n                buff.append(name);\n            } else if (readIf(\"*\")) {\n                buff.append('*');\n                isPath = true;\n            } else if (readIf(\".\")) {\n                buff.append('.');\n                if (readIf(\".\")) {\n                    buff.append('.');\n                }\n                isPath = true;\n            } else if (readIf(\"@\")) {\n                if (readIf(\"*\")) {\n                    buff.append('*');\n                } else {\n                    buff.append(readPathSegment());\n                }\n                return new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, buff.toString(), false);\n            } else {\n                break;\n            }\n            if (readIf(\"/\")) {\n                isPath = true;\n                buff.append('/');\n            } else {\n                break;\n            }\n        } \n        if ((!isPath) && readIf(\"(\")) {\n            return parseFunction(buff.toString());\n        } else if (buff.length() > 0) {\n            if (buff.toString().equals(\".\")) {\n                return new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"*\", false);\n            }\n            return new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, buff.toString(), true);\n        }\n        throw getSyntaxError();\n    }\n\n    private org.apache.jackrabbit.oak.query.xpath.Expression parseFunction(java.lang.String functionName) throws java.text.ParseException {\n        if (\"jcr:like\".equals(functionName)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Condition c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(parseExpression(), \"like\", null, Expression.PRECEDENCE_CONDITION);\n            read(\",\");\n            c.right = parseExpression();\n            read(\")\");\n            return c;\n        } else if (\"jcr:contains\".equals(functionName)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression left = parseExpression();\n            read(\",\");\n            org.apache.jackrabbit.oak.query.xpath.Expression right = parseExpression();\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Contains f = new org.apache.jackrabbit.oak.query.xpath.Expression.Contains(left, right);\n            return f;\n        } else if (\"jcr:score\".equals(functionName)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Function f = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"score\");\n            f.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(currentSelector));\n            read(\")\");\n            return f;\n        } else if (\"xs:dateTime\".equals(functionName)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression expr = parseExpression();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Cast c = new org.apache.jackrabbit.oak.query.xpath.Expression.Cast(expr, \"date\");\n            read(\")\");\n            return c;\n        } else if (\"fn:lower-case\".equals(functionName)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Function f = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"lower\");\n            f.params.add(parseExpression());\n            read(\")\");\n            return f;\n        } else if (\"fn:upper-case\".equals(functionName)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Function f = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"upper\");\n            f.params.add(parseExpression());\n            read(\")\");\n            return f;\n        } else if (\"fn:name\".equals(functionName)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Function f = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"name\");\n            if (!readIf(\")\")) {\n                read(\".\");\n                read(\")\");\n            }\n            f.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(currentSelector));\n            return f;\n        } else if (\"jcr:deref\".equals(functionName)) {\n            throw getSyntaxError(\"jcr:deref is not supported\");\n        } else if (\"rep:native\".equals(functionName)) {\n            java.lang.String selectorName = currentSelector.name;\n            org.apache.jackrabbit.oak.query.xpath.Expression language = parseExpression();\n            read(\",\");\n            org.apache.jackrabbit.oak.query.xpath.Expression expr = parseExpression();\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.NativeFunction f = new org.apache.jackrabbit.oak.query.xpath.Expression.NativeFunction(selectorName, language, expr);\n            return f;\n        } else if (\"rep:similar\".equals(functionName)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression property = parseExpression();\n            read(\",\");\n            org.apache.jackrabbit.oak.query.xpath.Expression path = parseExpression();\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Similar f = new org.apache.jackrabbit.oak.query.xpath.Expression.Similar(property, path);\n            return f;\n        } else if (\"rep:spellcheck\".equals(functionName)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression term = parseExpression();\n            read(\")\");\n            return new org.apache.jackrabbit.oak.query.xpath.Expression.Spellcheck(term);\n        } else if (\"rep:suggest\".equals(functionName)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression term = parseExpression();\n            read(\")\");\n            return new org.apache.jackrabbit.oak.query.xpath.Expression.Suggest(term);\n        } else {\n            throw getSyntaxError(\"jcr:like | jcr:contains | jcr:score | xs:dateTime | \" + \"fn:lower-case | fn:upper-case | fn:name | rep:similar | rep:spellcheck | rep:suggest\");\n        }\n    }\n\n    private boolean readIf(java.lang.String token) throws java.text.ParseException {\n        if (isToken(token)) {\n            read();\n            return true;\n        }\n        return false;\n    }\n\n    private boolean isToken(java.lang.String token) {\n        boolean result = token.equals(currentToken) && (!currentTokenQuoted);\n        if (result) {\n            return true;\n        }\n        addExpected(token);\n        return false;\n    }\n\n    private void read(java.lang.String expected) throws java.text.ParseException {\n        if ((!expected.equals(currentToken)) || currentTokenQuoted) {\n            throw getSyntaxError(expected);\n        }\n        read();\n    }\n\n    private Expression.Property readProperty() throws java.text.ParseException {\n        if (readIf(\"*\")) {\n            return new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"*\", false);\n        }\n        return new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, readPathSegment(), false);\n    }\n\n    private void readOpenDotClose(boolean readOpenBracket) throws java.text.ParseException {\n        if (readOpenBracket) {\n            read(\"(\");\n        }\n        readIf(\".\");\n        read(\")\");\n    }\n\n    private java.lang.String readPathSegment() throws java.text.ParseException {\n        java.lang.String raw = readIdentifier();\n        return org.apache.jackrabbit.util.ISO9075.decode(raw);\n    }\n\n    private java.lang.String readIdentifier() throws java.text.ParseException {\n        if (currentTokenType != org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n            throw getSyntaxError(\"identifier\");\n        }\n        java.lang.String s = currentToken;\n        read();\n        return s;\n    }\n\n    private void addExpected(java.lang.String token) {\n        if (expected != null) {\n            expected.add(token);\n        }\n    }\n\n    private void initialize(java.lang.String query) throws java.text.ParseException {\n        if (query == null) {\n            query = \"\";\n        }\n        statement = query;\n        int len = query.length() + 1;\n        char[] command = new char[len];\n        int[] types = new int[len];\n        len--;\n        query.getChars(0, len, command, 0);\n        command[len] = ' ';\n        int startLoop = 0;\n        for (int i = 0; i < len; i++) {\n            char c = command[i];\n            int type = 0;\n            switch (c) {\n                case '@' :\n                case '|' :\n                case '/' :\n                case '-' :\n                case '(' :\n                case ')' :\n                case '{' :\n                case '}' :\n                case '*' :\n                case ',' :\n                case ';' :\n                case '+' :\n                case '%' :\n                case '?' :\n                case '$' :\n                case '[' :\n                case ']' :\n                    type = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_SPECIAL_1;\n                    break;\n                case '!' :\n                case '<' :\n                case '>' :\n                case '=' :\n                    type = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_SPECIAL_2;\n                    break;\n                case '.' :\n                    type = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_DECIMAL;\n                    break;\n                case '\\'' :\n                    type = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_STRING;\n                    types[i] = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_STRING;\n                    startLoop = i;\n                    while (command[++i] != '\\'') {\n                        checkRunOver(i, len, startLoop);\n                    } \n                    break;\n                case '\\\"' :\n                    type = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_STRING;\n                    types[i] = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_STRING;\n                    startLoop = i;\n                    while (command[++i] != '\\\"') {\n                        checkRunOver(i, len, startLoop);\n                    } \n                    break;\n                case ':' :\n                case '_' :\n                    type = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_NAME;\n                    break;\n                default :\n                    if ((c >= 'a') && (c <= 'z')) {\n                        type = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_NAME;\n                    } else if ((c >= 'A') && (c <= 'Z')) {\n                        type = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_NAME;\n                    } else if ((c >= '0') && (c <= '9')) {\n                        type = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_VALUE;\n                    } else if (java.lang.Character.isJavaIdentifierPart(c)) {\n                        type = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_NAME;\n                    }\n            }\n            types[i] = ((byte) (type));\n        }\n        statementChars = command;\n        types[len] = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_END;\n        characterTypes = types;\n        parseIndex = 0;\n    }\n\n    private void checkRunOver(int i, int len, int startLoop) throws java.text.ParseException {\n        if (i >= len) {\n            parseIndex = startLoop;\n            throw getSyntaxError();\n        }\n    }\n\n    private void read() throws java.text.ParseException {\n        currentTokenQuoted = false;\n        if (expected != null) {\n            expected.clear();\n        }\n        int[] types = characterTypes;\n        int i = parseIndex;\n        int type = types[i];\n        while (type == 0) {\n            type = types[++i];\n        } \n        int start = i;\n        char[] chars = statementChars;\n        char c = chars[i++];\n        currentToken = \"\";\n        switch (type) {\n            case org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_NAME :\n                while (true) {\n                    type = types[i];\n                    if ((((type != org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_NAME) && (type != org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_VALUE)) && (chars[i] != '-')) && (chars[i] != '.')) {\n                        break;\n                    }\n                    i++;\n                } \n                currentToken = statement.substring(start, i);\n                if (currentToken.isEmpty()) {\n                    throw getSyntaxError();\n                }\n                currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER;\n                parseIndex = i;\n                return;\n            case org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_SPECIAL_2 :\n                if (types[i] == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_SPECIAL_2) {\n                    i++;\n                }\n                currentToken = statement.substring(start, i);\n                currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.KEYWORD;\n                parseIndex = i;\n                break;\n            case org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_SPECIAL_1 :\n                currentToken = statement.substring(start, i);\n                switch (c) {\n                    case '+' :\n                        currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.PLUS;\n                        break;\n                    case '-' :\n                        currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.MINUS;\n                        break;\n                    case '(' :\n                        currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.OPEN;\n                        break;\n                    case ')' :\n                        currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CLOSE;\n                        break;\n                    default :\n                        currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.KEYWORD;\n                }\n                parseIndex = i;\n                return;\n            case org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_VALUE :\n                long number = c - '0';\n                while (true) {\n                    c = chars[i];\n                    if ((c < '0') || (c > '9')) {\n                        if (c == '.') {\n                            readDecimal(start, i);\n                            break;\n                        }\n                        if ((c == 'E') || (c == 'e')) {\n                            readDecimal(start, i);\n                            break;\n                        }\n                        currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.VALUE_NUMBER;\n                        currentToken = java.lang.String.valueOf(number);\n                        parseIndex = i;\n                        break;\n                    }\n                    number = (number * 10) + (c - '0');\n                    if (number > java.lang.Integer.MAX_VALUE) {\n                        readDecimal(start, i);\n                        break;\n                    }\n                    i++;\n                } \n                return;\n            case org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_DECIMAL :\n                if (types[i] != org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_VALUE) {\n                    currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.KEYWORD;\n                    currentToken = \".\";\n                    parseIndex = i;\n                    return;\n                }\n                readDecimal(i - 1, i);\n                return;\n            case org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_STRING :\n                if (chars[i - 1] == '\\'') {\n                    readString(i, '\\'');\n                } else {\n                    readString(i, '\\\"');\n                }\n                return;\n            case org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_END :\n                currentToken = \"\";\n                currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.END;\n                parseIndex = i;\n                return;\n            default :\n                throw getSyntaxError();\n        }\n    }\n\n    private void readString(int i, char end) throws java.text.ParseException {\n        char[] chars = statementChars;\n        java.lang.String result = null;\n        while (true) {\n            for (int begin = i; ; i++) {\n                if (chars[i] == end) {\n                    if (result == null) {\n                        result = statement.substring(begin, i);\n                    } else {\n                        result += statement.substring(begin - 1, i);\n                    }\n                    break;\n                }\n            }\n            if (chars[++i] != end) {\n                break;\n            }\n            i++;\n        } \n        currentToken = result;\n        parseIndex = i;\n        currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.VALUE_STRING;\n    }\n\n    private void readDecimal(int start, int i) throws java.text.ParseException {\n        char[] chars = statementChars;\n        int[] types = characterTypes;\n        while (true) {\n            int t = types[i];\n            if ((t != org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_DECIMAL) && (t != org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_VALUE)) {\n                break;\n            }\n            i++;\n        } \n        if ((chars[i] == 'E') || (chars[i] == 'e')) {\n            i++;\n            if ((chars[i] == '+') || (chars[i] == '-')) {\n                i++;\n            }\n            if (types[i] != org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_VALUE) {\n                throw getSyntaxError();\n            }\n            while (types[++i] == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_VALUE) {\n            } \n        }\n        parseIndex = i;\n        java.lang.String sub = statement.substring(start, i);\n        try {\n            new java.math.BigDecimal(sub);\n        } catch (java.lang.NumberFormatException e) {\n            throw new java.text.ParseException(((\"Data conversion error converting \" + sub) + \" to BigDecimal: \") + e, i);\n        }\n        currentToken = sub;\n        currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.VALUE_NUMBER;\n    }\n\n    private java.text.ParseException getSyntaxError() {\n        if ((expected == null) || expected.isEmpty()) {\n            return getSyntaxError(null);\n        } else {\n            java.lang.StringBuilder buff = new java.lang.StringBuilder();\n            for (java.lang.String exp : expected) {\n                if (buff.length() > 0) {\n                    buff.append(\", \");\n                }\n                buff.append(exp);\n            }\n            return getSyntaxError(buff.toString());\n        }\n    }\n\n    private java.text.ParseException getSyntaxError(java.lang.String expected) {\n        int index = java.lang.Math.max(0, java.lang.Math.min(parseIndex, statement.length() - 1));\n        java.lang.String query = (statement.substring(0, index) + \"(*)\") + statement.substring(index).trim();\n        if (expected != null) {\n            query += \"; expected: \" + expected;\n        }\n        return new java.text.ParseException(\"Query:\\n\" + query, index);\n    }\n\n    private org.apache.jackrabbit.oak.query.xpath.Statement convertToUnion(java.lang.String query, org.apache.jackrabbit.oak.query.xpath.Statement statement, int startParseIndex) throws java.text.ParseException {\n        int start = query.indexOf(\"(\", startParseIndex);\n        java.lang.String begin = query.substring(0, start);\n        org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter converter = new org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter();\n        java.lang.String partList = query.substring(start);\n        converter.initialize(partList);\n        converter.read();\n        int lastParseIndex = converter.parseIndex;\n        int lastOrIndex = lastParseIndex;\n        converter.read(\"(\");\n        int level = 0;\n        java.util.ArrayList<java.lang.String> parts = new java.util.ArrayList<java.lang.String>();\n        while (true) {\n            int parseIndex = converter.parseIndex;\n            if (converter.readIf(\"(\")) {\n                level++;\n            } else if (converter.readIf(\")\") && ((level--) <= 0)) {\n                break;\n            } else if (converter.readIf(\"|\") && (level == 0)) {\n                java.lang.String or = partList.substring(lastOrIndex, lastParseIndex);\n                parts.add(or);\n                lastOrIndex = parseIndex;\n            } else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.END) {\n                throw getSyntaxError(\"the query may not be empty\");\n            } else {\n                converter.read();\n            }\n            lastParseIndex = parseIndex;\n        } \n        java.lang.String or = partList.substring(lastOrIndex, lastParseIndex);\n        parts.add(or);\n        java.lang.String end = partList.substring(lastParseIndex + 1);\n        org.apache.jackrabbit.oak.query.xpath.Statement result = null;\n        for (java.lang.String p : parts) {\n            java.lang.String q = (begin + p) + end;\n            converter = new org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter();\n            org.apache.jackrabbit.oak.query.xpath.Statement stat = converter.convertToStatement(q);\n            if (result == null) {\n                result = stat;\n            } else {\n                org.apache.jackrabbit.oak.query.xpath.Statement.UnionStatement union = new org.apache.jackrabbit.oak.query.xpath.Statement.UnionStatement(result, stat);\n                union.orderList = stat.orderList;\n                result = union;\n            }\n            stat.orderList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order>();\n        }\n        return result;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "private void readExcerpt() throws java.text.ParseException {\n    read(\"(\");\n    if (!readIf(\")\")) {\n        read(\".\");\n        read(\")\");\n    }\n}",
            "src_parent": "public class XPathToSQL2Converter {\n    public static final boolean NODETYPE_OPTIMIZATION = java.lang.Boolean.parseBoolean(java.lang.System.getProperty(\"oak.xpathNodeTypeOptimization\", \"true\"));\n\n    public static final boolean NODETYPE_UNION = java.lang.Boolean.parseBoolean(java.lang.System.getProperty(\"oak.xpathNodeTypeUnion\", \"true\"));\n\n    static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.class);\n\n    private static final int CHAR_END = -1;\n\n    private static final int CHAR_VALUE = 2;\n\n    private static final int CHAR_NAME = 4;\n\n    private static final int CHAR_SPECIAL_1 = 5;\n\n    private static final int CHAR_SPECIAL_2 = 6;\n\n    private static final int CHAR_STRING = 7;\n\n    private static final int CHAR_DECIMAL = 8;\n\n    private static final int KEYWORD = 1;\n\n    private static final int IDENTIFIER = 2;\n\n    private static final int END = 4;\n\n    private static final int VALUE_STRING = 5;\n\n    private static final int VALUE_NUMBER = 6;\n\n    private static final int MINUS = 12;\n\n    private static final int PLUS = 13;\n\n    private static final int OPEN = 14;\n\n    private static final int CLOSE = 15;\n\n    private java.lang.String statement;\n\n    private char[] statementChars;\n\n    private int[] characterTypes;\n\n    private int parseIndex;\n\n    private int currentTokenType;\n\n    private java.lang.String currentToken;\n\n    private boolean currentTokenQuoted;\n\n    private java.util.ArrayList<java.lang.String> expected;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector currentSelector = new org.apache.jackrabbit.oak.query.xpath.Selector();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector>();\n\n    public java.lang.String convert(java.lang.String query) throws java.text.ParseException {\n        org.apache.jackrabbit.oak.query.xpath.Statement statement = convertToStatement(query);\n        statement = statement.optimize();\n        return statement.toString();\n    }\n\n    private org.apache.jackrabbit.oak.query.xpath.Statement convertToStatement(java.lang.String query) throws java.text.ParseException {\n        query = query.trim();\n        org.apache.jackrabbit.oak.query.xpath.Statement statement = new org.apache.jackrabbit.oak.query.xpath.Statement();\n        if (query.startsWith(\"explain \")) {\n            query = query.substring(\"explain\".length()).trim();\n            statement.setExplain(true);\n        }\n        if (query.startsWith(\"measure\")) {\n            query = query.substring(\"measure\".length()).trim();\n            statement.setMeasure(true);\n        }\n        if (query.isEmpty()) {\n            query = \"//jcr:root\";\n        }\n        statement.setOriginalQuery(query);\n        initialize(query);\n        expected = new java.util.ArrayList<java.lang.String>();\n        read();\n        if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.END) {\n            throw getSyntaxError(\"the query may not be empty\");\n        }\n        currentSelector.name = \"a\";\n        java.lang.String pathPattern = \"\";\n        boolean startOfQuery = true;\n        while (true) {\n            boolean shortcut = false;\n            boolean slash = readIf(\"/\");\n            if (!slash) {\n                if (startOfQuery) {\n                    currentSelector.path = \"/\";\n                    pathPattern = \"/\";\n                    currentSelector.isChild = true;\n                } else {\n                    break;\n                }\n            } else if (readIf(\"jcr:root\")) {\n                if (!pathPattern.isEmpty()) {\n                    throw getSyntaxError(\"jcr:root needs to be at the beginning\");\n                }\n                if (readIf(\"/\")) {\n                    currentSelector.path = \"/\";\n                    pathPattern = \"/\";\n                    if (readIf(\"/\")) {\n                        pathPattern = \"//\";\n                        currentSelector.isDescendant = true;\n                    } else {\n                        currentSelector.isChild = true;\n                    }\n                } else {\n                    pathPattern = \"/%\";\n                    currentSelector.path = \"/\";\n                    shortcut = true;\n                }\n            } else if (readIf(\"/\")) {\n                pathPattern += \"%\";\n                if (currentSelector.isDescendant) {\n                    nextSelector(true);\n                }\n                currentSelector.isDescendant = true;\n            } else {\n                pathPattern += \"/\";\n                if (startOfQuery) {\n                    currentSelector.path = \"/\";\n                } else {\n                    if (currentSelector.isDescendant) {\n                        nextSelector(true);\n                    }\n                    currentSelector.isChild = true;\n                }\n            }\n            int startParseIndex = parseIndex;\n            if (shortcut) {\n            } else if (readIf(\"*\")) {\n                pathPattern += \"%\";\n                if (!currentSelector.isDescendant) {\n                    if ((selectors.size() == 0) && currentSelector.path.equals(\"\")) {\n                        currentSelector.path = \"/\";\n                    }\n                }\n            } else if (readIf(\"text\")) {\n                currentSelector.isChild = false;\n                pathPattern += \"jcr:xmltext\";\n                read(\"(\");\n                read(\")\");\n                if (currentSelector.isDescendant) {\n                    currentSelector.nodeName = \"jcr:xmltext\";\n                } else {\n                    currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n                }\n            } else if (readIf(\"element\")) {\n                read(\"(\");\n                if (readIf(\")\")) {\n                    pathPattern += \"%\";\n                } else {\n                    if (readIf(\"*\")) {\n                        pathPattern += \"%\";\n                    } else {\n                        java.lang.String name = readPathSegment();\n                        pathPattern += name;\n                        appendNodeName(name);\n                    }\n                    if (readIf(\",\")) {\n                        currentSelector.nodeType = readIdentifier();\n                    }\n                    read(\")\");\n                }\n            } else if (readIf(\"@\")) {\n                rewindSelector();\n                org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n                statement.addSelectColumn(p);\n            } else if (readIf(\"rep:excerpt\")) {\n                rewindSelector();\n                readExcerpt();\n                org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n                statement.addSelectColumn(p);\n            } else if (readIf(\"(\")) {\n                rewindSelector();\n                do {\n                    if (readIf(\"@\")) {\n                        org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n                        statement.addSelectColumn(p);\n                    } else if (readIf(\"rep:excerpt\")) {\n                        readExcerpt();\n                        org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n                        statement.addSelectColumn(p);\n                    } else if (readIf(\"rep:spellcheck\")) {\n                        read(\"(\");\n                        read(\")\");\n                        org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n                        statement.addSelectColumn(p);\n                    } else if (readIf(\"rep:suggest\")) {\n                        readExcerpt();\n                        org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n                        statement.addSelectColumn(p);\n                    }\n                } while (readIf(\"|\") );\n                if (!readIf(\")\")) {\n                    return convertToUnion(query, statement, startParseIndex - 1);\n                }\n            } else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n                java.lang.String name = readPathSegment();\n                pathPattern += name;\n                appendNodeName(name);\n            } else if (readIf(\".\")) {\n                if (readIf(\".\")) {\n                    java.lang.String name = \"..\";\n                    pathPattern += name;\n                    if (!currentSelector.isChild) {\n                        currentSelector.nodeName = name;\n                    } else if (currentSelector.isChild) {\n                        currentSelector.isChild = false;\n                        currentSelector.isParent = true;\n                    }\n                } else if (selectors.size() > 0) {\n                    currentSelector = selectors.remove(selectors.size() - 1);\n                    currentSelector.condition = null;\n                    currentSelector.joinCondition = null;\n                }\n            } else {\n                throw getSyntaxError();\n            }\n            if (readIf(\"[\")) {\n                org.apache.jackrabbit.oak.query.xpath.Expression c = parseConstraint();\n                currentSelector.condition = org.apache.jackrabbit.oak.query.xpath.Expression.and(currentSelector.condition, c);\n                read(\"]\");\n            }\n            startOfQuery = false;\n            nextSelector(false);\n        } \n        if (selectors.size() == 0) {\n            nextSelector(true);\n        }\n        currentSelector = selectors.get(selectors.size() - 1);\n        if (selectors.size() == 1) {\n            currentSelector.onlySelector = true;\n        }\n        if (readIf(\"order\")) {\n            read(\"by\");\n            do {\n                org.apache.jackrabbit.oak.query.xpath.Order order = new org.apache.jackrabbit.oak.query.xpath.Order();\n                order.expr = parseExpression();\n                if (readIf(\"descending\")) {\n                    order.descending = true;\n                } else {\n                    readIf(\"ascending\");\n                }\n                statement.addOrderBy(order);\n            } while (readIf(\",\") );\n        }\n        if (!currentToken.isEmpty()) {\n            throw getSyntaxError(\"<end>\");\n        }\n        statement.setColumnSelector(currentSelector);\n        statement.setSelectors(selectors);\n        org.apache.jackrabbit.oak.query.xpath.Expression where = null;\n        for (org.apache.jackrabbit.oak.query.xpath.Selector s : selectors) {\n            where = org.apache.jackrabbit.oak.query.xpath.Expression.and(where, s.condition);\n        }\n        statement.setWhere(where);\n        return statement;\n    }\n\n    private void appendNodeName(java.lang.String name) {\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (selectors.size() > 0) {\n            currentSelector.isChild = true;\n            currentSelector.nodeName = name;\n        } else {\n            currentSelector.isChild = false;\n            java.lang.String oldPath = currentSelector.path;\n            currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(oldPath, name);\n        }\n    }\n\n    private void rewindSelector() {\n        if (selectors.size() > 0) {\n            currentSelector = selectors.remove(selectors.size() - 1);\n            currentSelector.isChild = false;\n            currentSelector.isDescendant = false;\n            currentSelector.path = \"\";\n            currentSelector.nodeName = null;\n        }\n    }\n\n    private void nextSelector(boolean force) throws java.text.ParseException {\n        boolean isFirstSelector = selectors.size() == 0;\n        java.lang.String path = currentSelector.path;\n        org.apache.jackrabbit.oak.query.xpath.Expression condition = currentSelector.condition;\n        org.apache.jackrabbit.oak.query.xpath.Expression joinCondition = null;\n        if (currentSelector.nodeName != null) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Function f = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"name\");\n            f.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(currentSelector));\n            java.lang.String n = currentSelector.nodeName;\n            n = org.apache.jackrabbit.util.ISO9075.encode(n);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Condition c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(f, \"=\", Expression.Literal.newString(n), Expression.PRECEDENCE_CONDITION);\n            condition = org.apache.jackrabbit.oak.query.xpath.Expression.and(condition, c);\n        }\n        if (currentSelector.isDescendant) {\n            if (isFirstSelector) {\n                if (!path.isEmpty()) {\n                    if (!org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) {\n                        path = org.apache.jackrabbit.oak.commons.PathUtils.concat(\"/\", path);\n                    }\n                    org.apache.jackrabbit.oak.query.xpath.Expression.Function c = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"isdescendantnode\");\n                    c.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(currentSelector));\n                    c.params.add(Expression.Literal.newString(path));\n                    condition = org.apache.jackrabbit.oak.query.xpath.Expression.and(condition, c);\n                }\n            } else {\n                org.apache.jackrabbit.oak.query.xpath.Expression.Function c = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"isdescendantnode\");\n                c.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(currentSelector));\n                c.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(selectors.get(selectors.size() - 1)));\n                joinCondition = c;\n            }\n        } else if (currentSelector.isParent) {\n            if (isFirstSelector) {\n                throw getSyntaxError();\n            } else {\n                org.apache.jackrabbit.oak.query.xpath.Expression.Function c = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"ischildnode\");\n                c.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(selectors.get(selectors.size() - 1)));\n                c.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(currentSelector));\n                joinCondition = c;\n            }\n        } else if (currentSelector.isChild) {\n            if (isFirstSelector) {\n                if (!path.isEmpty()) {\n                    if (!org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) {\n                        path = org.apache.jackrabbit.oak.commons.PathUtils.concat(\"/\", path);\n                    }\n                    org.apache.jackrabbit.oak.query.xpath.Expression.Function c = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"ischildnode\");\n                    c.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(currentSelector));\n                    c.params.add(Expression.Literal.newString(path));\n                    condition = org.apache.jackrabbit.oak.query.xpath.Expression.and(condition, c);\n                }\n            } else {\n                org.apache.jackrabbit.oak.query.xpath.Expression.Function c = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"ischildnode\");\n                c.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(currentSelector));\n                c.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(selectors.get(selectors.size() - 1)));\n                joinCondition = c;\n            }\n        } else if (((!force) && (condition == null)) && (joinCondition == null)) {\n        } else if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Function c = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"issamenode\");\n            c.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(currentSelector));\n            c.params.add(Expression.Literal.newString(path));\n            condition = org.apache.jackrabbit.oak.query.xpath.Expression.and(condition, c);\n        }\n        if ((force || (condition != null)) || (joinCondition != null)) {\n            java.lang.String nextSelectorName = \"\" + ((char) (currentSelector.name.charAt(0) + 1));\n            if (nextSelectorName.compareTo(\"x\") > 0) {\n                throw getSyntaxError(\"too many joins\");\n            }\n            org.apache.jackrabbit.oak.query.xpath.Selector nextSelector = new org.apache.jackrabbit.oak.query.xpath.Selector();\n            nextSelector.name = nextSelectorName;\n            currentSelector.condition = condition;\n            currentSelector.joinCondition = org.apache.jackrabbit.oak.query.xpath.Expression.and(currentSelector.joinCondition, joinCondition);\n            selectors.add(currentSelector);\n            currentSelector = nextSelector;\n        }\n    }\n\n    private org.apache.jackrabbit.oak.query.xpath.Expression parseConstraint() throws java.text.ParseException {\n        org.apache.jackrabbit.oak.query.xpath.Expression a = parseAnd();\n        int i = 0;\n        while (readIf(\"or\")) {\n            a = new org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition(a, parseAnd());\n            if (((++i) % 100) == 0) {\n                a = a.optimize();\n            }\n        } \n        return a.optimize();\n    }\n\n    private org.apache.jackrabbit.oak.query.xpath.Expression parseAnd() throws java.text.ParseException {\n        org.apache.jackrabbit.oak.query.xpath.Expression a = parseCondition();\n        while (readIf(\"and\")) {\n            a = new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(a, parseCondition());\n        } \n        return a.optimize();\n    }\n\n    private org.apache.jackrabbit.oak.query.xpath.Expression parseCondition() throws java.text.ParseException {\n        org.apache.jackrabbit.oak.query.xpath.Expression a;\n        if (readIf(\"fn:not\") || readIf(\"not\")) {\n            read(\"(\");\n            a = parseConstraint();\n            if ((a instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Condition) && ((org.apache.jackrabbit.oak.query.xpath.Expression.Condition) (a)).operator.equals(\"is not null\")) {\n                org.apache.jackrabbit.oak.query.xpath.Expression.Condition c = ((org.apache.jackrabbit.oak.query.xpath.Expression.Condition) (a));\n                c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(c.left, \"is null\", null, Expression.PRECEDENCE_CONDITION);\n                a = c;\n            } else {\n                org.apache.jackrabbit.oak.query.xpath.Expression.Function f = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"not\");\n                f.params.add(a);\n                a = f;\n            }\n            read(\")\");\n        } else if (readIf(\"(\")) {\n            a = parseConstraint();\n            read(\")\");\n        } else {\n            org.apache.jackrabbit.oak.query.xpath.Expression e = parseExpression();\n            if (e.isCondition()) {\n                return e;\n            }\n            a = parseCondition(e);\n        }\n        return a.optimize();\n    }\n\n    private Expression.Condition parseCondition(org.apache.jackrabbit.oak.query.xpath.Expression left) throws java.text.ParseException {\n        org.apache.jackrabbit.oak.query.xpath.Expression.Condition c;\n        if (readIf(\"=\")) {\n            c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(left, \"=\", parseExpression(), Expression.PRECEDENCE_CONDITION);\n        } else if (readIf(\"<>\")) {\n            c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(left, \"<>\", parseExpression(), Expression.PRECEDENCE_CONDITION);\n        } else if (readIf(\"!=\")) {\n            c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(left, \"<>\", parseExpression(), Expression.PRECEDENCE_CONDITION);\n        } else if (readIf(\"<\")) {\n            c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(left, \"<\", parseExpression(), Expression.PRECEDENCE_CONDITION);\n        } else if (readIf(\">\")) {\n            c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(left, \">\", parseExpression(), Expression.PRECEDENCE_CONDITION);\n        } else if (readIf(\"<=\")) {\n            c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(left, \"<=\", parseExpression(), Expression.PRECEDENCE_CONDITION);\n        } else if (readIf(\">=\")) {\n            c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(left, \">=\", parseExpression(), Expression.PRECEDENCE_CONDITION);\n        } else {\n            c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(left, \"is not null\", null, Expression.PRECEDENCE_CONDITION);\n        }\n        return c;\n    }\n\n    private org.apache.jackrabbit.oak.query.xpath.Expression parseExpression() throws java.text.ParseException {\n        if (readIf(\"@\")) {\n            return readProperty();\n        } else if (readIf(\"true\")) {\n            if (readIf(\"(\")) {\n                read(\")\");\n            }\n            return Expression.Literal.newBoolean(true);\n        } else if (readIf(\"false\")) {\n            if (readIf(\"(\")) {\n                read(\")\");\n            }\n            return Expression.Literal.newBoolean(false);\n        } else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.VALUE_NUMBER) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Literal l = Expression.Literal.newNumber(currentToken);\n            read();\n            return l;\n        } else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.VALUE_STRING) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Literal l = Expression.Literal.newString(currentToken);\n            read();\n            return l;\n        } else if (readIf(\"-\")) {\n            if (currentTokenType != org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.VALUE_NUMBER) {\n                throw getSyntaxError();\n            }\n            org.apache.jackrabbit.oak.query.xpath.Expression.Literal l = Expression.Literal.newNumber('-' + currentToken);\n            read();\n            return l;\n        } else if (readIf(\"+\")) {\n            if (currentTokenType != org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.VALUE_NUMBER) {\n                throw getSyntaxError();\n            }\n            return parseExpression();\n        } else {\n            return parsePropertyOrFunction();\n        }\n    }\n\n    private org.apache.jackrabbit.oak.query.xpath.Expression parsePropertyOrFunction() throws java.text.ParseException {\n        java.lang.StringBuilder buff = new java.lang.StringBuilder();\n        boolean isPath = false;\n        while (true) {\n            if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n                java.lang.String name = readPathSegment();\n                buff.append(name);\n            } else if (readIf(\"*\")) {\n                buff.append('*');\n                isPath = true;\n            } else if (readIf(\".\")) {\n                buff.append('.');\n                if (readIf(\".\")) {\n                    buff.append('.');\n                }\n                isPath = true;\n            } else if (readIf(\"@\")) {\n                if (readIf(\"*\")) {\n                    buff.append('*');\n                } else {\n                    buff.append(readPathSegment());\n                }\n                return new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, buff.toString(), false);\n            } else {\n                break;\n            }\n            if (readIf(\"/\")) {\n                isPath = true;\n                buff.append('/');\n            } else {\n                break;\n            }\n        } \n        if ((!isPath) && readIf(\"(\")) {\n            return parseFunction(buff.toString());\n        } else if (buff.length() > 0) {\n            if (buff.toString().equals(\".\")) {\n                return new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"*\", false);\n            }\n            return new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, buff.toString(), true);\n        }\n        throw getSyntaxError();\n    }\n\n    private org.apache.jackrabbit.oak.query.xpath.Expression parseFunction(java.lang.String functionName) throws java.text.ParseException {\n        if (\"jcr:like\".equals(functionName)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Condition c = new org.apache.jackrabbit.oak.query.xpath.Expression.Condition(parseExpression(), \"like\", null, Expression.PRECEDENCE_CONDITION);\n            read(\",\");\n            c.right = parseExpression();\n            read(\")\");\n            return c;\n        } else if (\"jcr:contains\".equals(functionName)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression left = parseExpression();\n            read(\",\");\n            org.apache.jackrabbit.oak.query.xpath.Expression right = parseExpression();\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Contains f = new org.apache.jackrabbit.oak.query.xpath.Expression.Contains(left, right);\n            return f;\n        } else if (\"jcr:score\".equals(functionName)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Function f = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"score\");\n            f.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(currentSelector));\n            read(\")\");\n            return f;\n        } else if (\"xs:dateTime\".equals(functionName)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression expr = parseExpression();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Cast c = new org.apache.jackrabbit.oak.query.xpath.Expression.Cast(expr, \"date\");\n            read(\")\");\n            return c;\n        } else if (\"fn:lower-case\".equals(functionName)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Function f = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"lower\");\n            f.params.add(parseExpression());\n            read(\")\");\n            return f;\n        } else if (\"fn:upper-case\".equals(functionName)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Function f = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"upper\");\n            f.params.add(parseExpression());\n            read(\")\");\n            return f;\n        } else if (\"fn:name\".equals(functionName)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Function f = new org.apache.jackrabbit.oak.query.xpath.Expression.Function(\"name\");\n            if (!readIf(\")\")) {\n                read(\".\");\n                read(\")\");\n            }\n            f.params.add(new org.apache.jackrabbit.oak.query.xpath.Expression.SelectorExpr(currentSelector));\n            return f;\n        } else if (\"jcr:deref\".equals(functionName)) {\n            throw getSyntaxError(\"jcr:deref is not supported\");\n        } else if (\"rep:native\".equals(functionName)) {\n            java.lang.String selectorName = currentSelector.name;\n            org.apache.jackrabbit.oak.query.xpath.Expression language = parseExpression();\n            read(\",\");\n            org.apache.jackrabbit.oak.query.xpath.Expression expr = parseExpression();\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.NativeFunction f = new org.apache.jackrabbit.oak.query.xpath.Expression.NativeFunction(selectorName, language, expr);\n            return f;\n        } else if (\"rep:similar\".equals(functionName)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression property = parseExpression();\n            read(\",\");\n            org.apache.jackrabbit.oak.query.xpath.Expression path = parseExpression();\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Similar f = new org.apache.jackrabbit.oak.query.xpath.Expression.Similar(property, path);\n            return f;\n        } else if (\"rep:spellcheck\".equals(functionName)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression term = parseExpression();\n            read(\")\");\n            return new org.apache.jackrabbit.oak.query.xpath.Expression.Spellcheck(term);\n        } else if (\"rep:suggest\".equals(functionName)) {\n            org.apache.jackrabbit.oak.query.xpath.Expression term = parseExpression();\n            read(\")\");\n            return new org.apache.jackrabbit.oak.query.xpath.Expression.Suggest(term);\n        } else {\n            throw getSyntaxError(\"jcr:like | jcr:contains | jcr:score | xs:dateTime | \" + \"fn:lower-case | fn:upper-case | fn:name | rep:similar | rep:spellcheck | rep:suggest\");\n        }\n    }\n\n    private boolean readIf(java.lang.String token) throws java.text.ParseException {\n        if (isToken(token)) {\n            read();\n            return true;\n        }\n        return false;\n    }\n\n    private boolean isToken(java.lang.String token) {\n        boolean result = token.equals(currentToken) && (!currentTokenQuoted);\n        if (result) {\n            return true;\n        }\n        addExpected(token);\n        return false;\n    }\n\n    private void read(java.lang.String expected) throws java.text.ParseException {\n        if ((!expected.equals(currentToken)) || currentTokenQuoted) {\n            throw getSyntaxError(expected);\n        }\n        read();\n    }\n\n    private Expression.Property readProperty() throws java.text.ParseException {\n        if (readIf(\"*\")) {\n            return new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"*\", false);\n        }\n        return new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, readPathSegment(), false);\n    }\n\n    private void readExcerpt() throws java.text.ParseException {\n        read(\"(\");\n        if (!readIf(\")\")) {\n            read(\".\");\n            read(\")\");\n        }\n    }\n\n    private java.lang.String readPathSegment() throws java.text.ParseException {\n        java.lang.String raw = readIdentifier();\n        return org.apache.jackrabbit.util.ISO9075.decode(raw);\n    }\n\n    private java.lang.String readIdentifier() throws java.text.ParseException {\n        if (currentTokenType != org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n            throw getSyntaxError(\"identifier\");\n        }\n        java.lang.String s = currentToken;\n        read();\n        return s;\n    }\n\n    private void addExpected(java.lang.String token) {\n        if (expected != null) {\n            expected.add(token);\n        }\n    }\n\n    private void initialize(java.lang.String query) throws java.text.ParseException {\n        if (query == null) {\n            query = \"\";\n        }\n        statement = query;\n        int len = query.length() + 1;\n        char[] command = new char[len];\n        int[] types = new int[len];\n        len--;\n        query.getChars(0, len, command, 0);\n        command[len] = ' ';\n        int startLoop = 0;\n        for (int i = 0; i < len; i++) {\n            char c = command[i];\n            int type = 0;\n            switch (c) {\n                case '@' :\n                case '|' :\n                case '/' :\n                case '-' :\n                case '(' :\n                case ')' :\n                case '{' :\n                case '}' :\n                case '*' :\n                case ',' :\n                case ';' :\n                case '+' :\n                case '%' :\n                case '?' :\n                case '$' :\n                case '[' :\n                case ']' :\n                    type = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_SPECIAL_1;\n                    break;\n                case '!' :\n                case '<' :\n                case '>' :\n                case '=' :\n                    type = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_SPECIAL_2;\n                    break;\n                case '.' :\n                    type = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_DECIMAL;\n                    break;\n                case '\\'' :\n                    type = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_STRING;\n                    types[i] = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_STRING;\n                    startLoop = i;\n                    while (command[++i] != '\\'') {\n                        checkRunOver(i, len, startLoop);\n                    } \n                    break;\n                case '\\\"' :\n                    type = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_STRING;\n                    types[i] = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_STRING;\n                    startLoop = i;\n                    while (command[++i] != '\\\"') {\n                        checkRunOver(i, len, startLoop);\n                    } \n                    break;\n                case ':' :\n                case '_' :\n                    type = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_NAME;\n                    break;\n                default :\n                    if ((c >= 'a') && (c <= 'z')) {\n                        type = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_NAME;\n                    } else if ((c >= 'A') && (c <= 'Z')) {\n                        type = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_NAME;\n                    } else if ((c >= '0') && (c <= '9')) {\n                        type = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_VALUE;\n                    } else if (java.lang.Character.isJavaIdentifierPart(c)) {\n                        type = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_NAME;\n                    }\n            }\n            types[i] = ((byte) (type));\n        }\n        statementChars = command;\n        types[len] = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_END;\n        characterTypes = types;\n        parseIndex = 0;\n    }\n\n    private void checkRunOver(int i, int len, int startLoop) throws java.text.ParseException {\n        if (i >= len) {\n            parseIndex = startLoop;\n            throw getSyntaxError();\n        }\n    }\n\n    private void read() throws java.text.ParseException {\n        currentTokenQuoted = false;\n        if (expected != null) {\n            expected.clear();\n        }\n        int[] types = characterTypes;\n        int i = parseIndex;\n        int type = types[i];\n        while (type == 0) {\n            type = types[++i];\n        } \n        int start = i;\n        char[] chars = statementChars;\n        char c = chars[i++];\n        currentToken = \"\";\n        switch (type) {\n            case org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_NAME :\n                while (true) {\n                    type = types[i];\n                    if ((((type != org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_NAME) && (type != org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_VALUE)) && (chars[i] != '-')) && (chars[i] != '.')) {\n                        break;\n                    }\n                    i++;\n                } \n                currentToken = statement.substring(start, i);\n                if (currentToken.isEmpty()) {\n                    throw getSyntaxError();\n                }\n                currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER;\n                parseIndex = i;\n                return;\n            case org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_SPECIAL_2 :\n                if (types[i] == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_SPECIAL_2) {\n                    i++;\n                }\n                currentToken = statement.substring(start, i);\n                currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.KEYWORD;\n                parseIndex = i;\n                break;\n            case org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_SPECIAL_1 :\n                currentToken = statement.substring(start, i);\n                switch (c) {\n                    case '+' :\n                        currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.PLUS;\n                        break;\n                    case '-' :\n                        currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.MINUS;\n                        break;\n                    case '(' :\n                        currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.OPEN;\n                        break;\n                    case ')' :\n                        currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CLOSE;\n                        break;\n                    default :\n                        currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.KEYWORD;\n                }\n                parseIndex = i;\n                return;\n            case org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_VALUE :\n                long number = c - '0';\n                while (true) {\n                    c = chars[i];\n                    if ((c < '0') || (c > '9')) {\n                        if (c == '.') {\n                            readDecimal(start, i);\n                            break;\n                        }\n                        if ((c == 'E') || (c == 'e')) {\n                            readDecimal(start, i);\n                            break;\n                        }\n                        currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.VALUE_NUMBER;\n                        currentToken = java.lang.String.valueOf(number);\n                        parseIndex = i;\n                        break;\n                    }\n                    number = (number * 10) + (c - '0');\n                    if (number > java.lang.Integer.MAX_VALUE) {\n                        readDecimal(start, i);\n                        break;\n                    }\n                    i++;\n                } \n                return;\n            case org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_DECIMAL :\n                if (types[i] != org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_VALUE) {\n                    currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.KEYWORD;\n                    currentToken = \".\";\n                    parseIndex = i;\n                    return;\n                }\n                readDecimal(i - 1, i);\n                return;\n            case org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_STRING :\n                if (chars[i - 1] == '\\'') {\n                    readString(i, '\\'');\n                } else {\n                    readString(i, '\\\"');\n                }\n                return;\n            case org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_END :\n                currentToken = \"\";\n                currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.END;\n                parseIndex = i;\n                return;\n            default :\n                throw getSyntaxError();\n        }\n    }\n\n    private void readString(int i, char end) throws java.text.ParseException {\n        char[] chars = statementChars;\n        java.lang.String result = null;\n        while (true) {\n            for (int begin = i; ; i++) {\n                if (chars[i] == end) {\n                    if (result == null) {\n                        result = statement.substring(begin, i);\n                    } else {\n                        result += statement.substring(begin - 1, i);\n                    }\n                    break;\n                }\n            }\n            if (chars[++i] != end) {\n                break;\n            }\n            i++;\n        } \n        currentToken = result;\n        parseIndex = i;\n        currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.VALUE_STRING;\n    }\n\n    private void readDecimal(int start, int i) throws java.text.ParseException {\n        char[] chars = statementChars;\n        int[] types = characterTypes;\n        while (true) {\n            int t = types[i];\n            if ((t != org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_DECIMAL) && (t != org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_VALUE)) {\n                break;\n            }\n            i++;\n        } \n        if ((chars[i] == 'E') || (chars[i] == 'e')) {\n            i++;\n            if ((chars[i] == '+') || (chars[i] == '-')) {\n                i++;\n            }\n            if (types[i] != org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_VALUE) {\n                throw getSyntaxError();\n            }\n            while (types[++i] == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.CHAR_VALUE) {\n            } \n        }\n        parseIndex = i;\n        java.lang.String sub = statement.substring(start, i);\n        try {\n            new java.math.BigDecimal(sub);\n        } catch (java.lang.NumberFormatException e) {\n            throw new java.text.ParseException(((\"Data conversion error converting \" + sub) + \" to BigDecimal: \") + e, i);\n        }\n        currentToken = sub;\n        currentTokenType = org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.VALUE_NUMBER;\n    }\n\n    private java.text.ParseException getSyntaxError() {\n        if ((expected == null) || expected.isEmpty()) {\n            return getSyntaxError(null);\n        } else {\n            java.lang.StringBuilder buff = new java.lang.StringBuilder();\n            for (java.lang.String exp : expected) {\n                if (buff.length() > 0) {\n                    buff.append(\", \");\n                }\n                buff.append(exp);\n            }\n            return getSyntaxError(buff.toString());\n        }\n    }\n\n    private java.text.ParseException getSyntaxError(java.lang.String expected) {\n        int index = java.lang.Math.max(0, java.lang.Math.min(parseIndex, statement.length() - 1));\n        java.lang.String query = (statement.substring(0, index) + \"(*)\") + statement.substring(index).trim();\n        if (expected != null) {\n            query += \"; expected: \" + expected;\n        }\n        return new java.text.ParseException(\"Query:\\n\" + query, index);\n    }\n\n    private org.apache.jackrabbit.oak.query.xpath.Statement convertToUnion(java.lang.String query, org.apache.jackrabbit.oak.query.xpath.Statement statement, int startParseIndex) throws java.text.ParseException {\n        int start = query.indexOf(\"(\", startParseIndex);\n        java.lang.String begin = query.substring(0, start);\n        org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter converter = new org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter();\n        java.lang.String partList = query.substring(start);\n        converter.initialize(partList);\n        converter.read();\n        int lastParseIndex = converter.parseIndex;\n        int lastOrIndex = lastParseIndex;\n        converter.read(\"(\");\n        int level = 0;\n        java.util.ArrayList<java.lang.String> parts = new java.util.ArrayList<java.lang.String>();\n        while (true) {\n            int parseIndex = converter.parseIndex;\n            if (converter.readIf(\"(\")) {\n                level++;\n            } else if (converter.readIf(\")\") && ((level--) <= 0)) {\n                break;\n            } else if (converter.readIf(\"|\") && (level == 0)) {\n                java.lang.String or = partList.substring(lastOrIndex, lastParseIndex);\n                parts.add(or);\n                lastOrIndex = parseIndex;\n            } else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.END) {\n                throw getSyntaxError(\"the query may not be empty\");\n            } else {\n                converter.read();\n            }\n            lastParseIndex = parseIndex;\n        } \n        java.lang.String or = partList.substring(lastOrIndex, lastParseIndex);\n        parts.add(or);\n        java.lang.String end = partList.substring(lastParseIndex + 1);\n        org.apache.jackrabbit.oak.query.xpath.Statement result = null;\n        for (java.lang.String p : parts) {\n            java.lang.String q = (begin + p) + end;\n            converter = new org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter();\n            org.apache.jackrabbit.oak.query.xpath.Statement stat = converter.convertToStatement(q);\n            if (result == null) {\n                result = stat;\n            } else {\n                org.apache.jackrabbit.oak.query.xpath.Statement.UnionStatement union = new org.apache.jackrabbit.oak.query.xpath.Statement.UnionStatement(result, stat);\n                union.orderList = stat.orderList;\n                result = union;\n            }\n            stat.orderList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order>();\n        }\n        return result;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "readOpenDotClose(false)",
            "dst_parent": "{\n    readOpenDotClose(false);\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "readExcerpt()",
            "src_parent": "{\n    rewindSelector();\n    readExcerpt();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "readOpenDotClose(true)",
            "dst_parent": "{\n    readOpenDotClose(true);\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "readExcerpt()",
            "src_parent": "{\n    readExcerpt();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "readOpenDotClose(true)",
            "dst_parent": "{\n    readOpenDotClose(true);\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n    statement.addSelectColumn(p);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "readExcerpt()",
            "src_parent": "{\n    readExcerpt();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n    statement.addSelectColumn(p);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "readIf(\"text\")",
            "src_parent": "if (readIf(\"text\")) {\n    currentSelector.isChild = false;\n    pathPattern += \"jcr:xmltext\";\n    read(\"(\");\n    read(\")\");\n    if (currentSelector.isDescendant) {\n        currentSelector.nodeName = \"jcr:xmltext\";\n    } else {\n        currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n    }\n} else if (readIf(\"element\")) {\n    read(\"(\");\n    if (readIf(\")\")) {\n        pathPattern += \"%\";\n    } else {\n        if (readIf(\"*\")) {\n            pathPattern += \"%\";\n        } else {\n            java.lang.String name = readPathSegment();\n            pathPattern += name;\n            appendNodeName(name);\n        }\n        if (readIf(\",\")) {\n            currentSelector.nodeType = readIdentifier();\n        }\n        read(\")\");\n    }\n} else if (readIf(\"@\")) {\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n} else if (readIf(\"rep:excerpt\")) {\n    rewindSelector();\n    readExcerpt();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String name = readPathSegment();\n    pathPattern += name;\n    appendNodeName(name);\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "readIf(\"element\")",
            "src_parent": "if (readIf(\"element\")) {\n    read(\"(\");\n    if (readIf(\")\")) {\n        pathPattern += \"%\";\n    } else {\n        if (readIf(\"*\")) {\n            pathPattern += \"%\";\n        } else {\n            java.lang.String name = readPathSegment();\n            pathPattern += name;\n            appendNodeName(name);\n        }\n        if (readIf(\",\")) {\n            currentSelector.nodeType = readIdentifier();\n        }\n        read(\")\");\n    }\n} else if (readIf(\"@\")) {\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n} else if (readIf(\"rep:excerpt\")) {\n    rewindSelector();\n    readExcerpt();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String name = readPathSegment();\n    pathPattern += name;\n    appendNodeName(name);\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "read(\"(\")",
            "src_parent": "{\n    currentSelector.isChild = false;\n    pathPattern += \"jcr:xmltext\";\n    read(\"(\");\n    read(\")\");\n    if (currentSelector.isDescendant) {\n        currentSelector.nodeName = \"jcr:xmltext\";\n    } else {\n        currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "readIf(\"rep:excerpt\")",
            "src_parent": "if (readIf(\"rep:excerpt\")) {\n    rewindSelector();\n    readExcerpt();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String name = readPathSegment();\n    pathPattern += name;\n    appendNodeName(name);\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n        java.lang.String name = readPathSegment();\n        pathPattern += name;\n        appendNodeName(name);\n    } else if (readIf(\".\")) {\n        if (readIf(\".\")) {\n            java.lang.String name = \"..\";\n            pathPattern += name;\n            if (!currentSelector.isChild) {\n                currentSelector.nodeName = name;\n            } else if (currentSelector.isChild) {\n                currentSelector.isChild = false;\n                currentSelector.isParent = true;\n            }\n        } else if (selectors.size() > 0) {\n            currentSelector = selectors.remove(selectors.size() - 1);\n            currentSelector.condition = null;\n            currentSelector.joinCondition = null;\n        }\n    } else {\n        throw getSyntaxError();\n    }\n}",
            "src_parent": "if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String name = readPathSegment();\n    pathPattern += name;\n    appendNodeName(name);\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (shortcut) {\n} else if (readIf(\"*\")) {\n    pathPattern += \"%\";\n    if (!currentSelector.isDescendant) {\n        if ((selectors.size() == 0) && currentSelector.path.equals(\"\")) {\n            currentSelector.path = \"/\";\n        }\n    }\n} else if (readIf(\"text\")) {\n    currentSelector.isChild = false;\n    pathPattern += \"jcr:xmltext\";\n    read(\"(\");\n    read(\")\");\n    if (currentSelector.isDescendant) {\n        currentSelector.nodeName = \"jcr:xmltext\";\n    } else {\n        currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n    }\n} else if (readIf(\"element\")) {\n    read(\"(\");\n    if (readIf(\")\")) {\n        pathPattern += \"%\";\n    } else {\n        if (readIf(\"*\")) {\n            pathPattern += \"%\";\n        } else {\n            java.lang.String name = readPathSegment();\n            pathPattern += name;\n            appendNodeName(name);\n        }\n        if (readIf(\",\")) {\n            currentSelector.nodeType = readIdentifier();\n        }\n        read(\")\");\n    }\n} else if (readIf(\"@\")) {\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n} else if (readIf(\"rep:excerpt\")) {\n    rewindSelector();\n    readExcerpt();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String name = readPathSegment();\n    pathPattern += name;\n    appendNodeName(name);\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "src_parent": "{\n    boolean shortcut = false;\n    boolean slash = readIf(\"/\");\n    if (!slash) {\n        if (startOfQuery) {\n            currentSelector.path = \"/\";\n            pathPattern = \"/\";\n            currentSelector.isChild = true;\n        } else {\n            break;\n        }\n    } else if (readIf(\"jcr:root\")) {\n        if (!pathPattern.isEmpty()) {\n            throw getSyntaxError(\"jcr:root needs to be at the beginning\");\n        }\n        if (readIf(\"/\")) {\n            currentSelector.path = \"/\";\n            pathPattern = \"/\";\n            if (readIf(\"/\")) {\n                pathPattern = \"//\";\n                currentSelector.isDescendant = true;\n            } else {\n                currentSelector.isChild = true;\n            }\n        } else {\n            pathPattern = \"/%\";\n            currentSelector.path = \"/\";\n            shortcut = true;\n        }\n    } else if (readIf(\"/\")) {\n        pathPattern += \"%\";\n        if (currentSelector.isDescendant) {\n            nextSelector(true);\n        }\n        currentSelector.isDescendant = true;\n    } else {\n        pathPattern += \"/\";\n        if (startOfQuery) {\n            currentSelector.path = \"/\";\n        } else {\n            if (currentSelector.isDescendant) {\n                nextSelector(true);\n            }\n            currentSelector.isChild = true;\n        }\n    }\n    int startParseIndex = parseIndex;\n    if (shortcut) {\n    } else if (readIf(\"*\")) {\n        pathPattern += \"%\";\n        if (!currentSelector.isDescendant) {\n            if ((selectors.size() == 0) && currentSelector.path.equals(\"\")) {\n                currentSelector.path = \"/\";\n            }\n        }\n    } else if (readIf(\"text\")) {\n        currentSelector.isChild = false;\n        pathPattern += \"jcr:xmltext\";\n        read(\"(\");\n        read(\")\");\n        if (currentSelector.isDescendant) {\n            currentSelector.nodeName = \"jcr:xmltext\";\n        } else {\n            currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n        }\n    } else if (readIf(\"element\")) {\n        read(\"(\");\n        if (readIf(\")\")) {\n            pathPattern += \"%\";\n        } else {\n            if (readIf(\"*\")) {\n                pathPattern += \"%\";\n            } else {\n                java.lang.String name = readPathSegment();\n                pathPattern += name;\n                appendNodeName(name);\n            }\n            if (readIf(\",\")) {\n                currentSelector.nodeType = readIdentifier();\n            }\n            read(\")\");\n        }\n    } else if (readIf(\"@\")) {\n        rewindSelector();\n        org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n        statement.addSelectColumn(p);\n    } else if (readIf(\"rep:excerpt\")) {\n        rewindSelector();\n        readExcerpt();\n        org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n        statement.addSelectColumn(p);\n    } else if (readIf(\"(\")) {\n        rewindSelector();\n        do {\n            if (readIf(\"@\")) {\n                org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n                statement.addSelectColumn(p);\n            } else if (readIf(\"rep:excerpt\")) {\n                readExcerpt();\n                org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n                statement.addSelectColumn(p);\n            } else if (readIf(\"rep:spellcheck\")) {\n                read(\"(\");\n                read(\")\");\n                org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n                statement.addSelectColumn(p);\n            } else if (readIf(\"rep:suggest\")) {\n                readExcerpt();\n                org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n                statement.addSelectColumn(p);\n            }\n        } while (readIf(\"|\") );\n        if (!readIf(\")\")) {\n            return convertToUnion(query, statement, startParseIndex - 1);\n        }\n    } else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n        java.lang.String name = readPathSegment();\n        pathPattern += name;\n        appendNodeName(name);\n    } else if (readIf(\".\")) {\n        if (readIf(\".\")) {\n            java.lang.String name = \"..\";\n            pathPattern += name;\n            if (!currentSelector.isChild) {\n                currentSelector.nodeName = name;\n            } else if (currentSelector.isChild) {\n                currentSelector.isChild = false;\n                currentSelector.isParent = true;\n            }\n        } else if (selectors.size() > 0) {\n            currentSelector = selectors.remove(selectors.size() - 1);\n            currentSelector.condition = null;\n            currentSelector.joinCondition = null;\n        }\n    } else {\n        throw getSyntaxError();\n    }\n    if (readIf(\"[\")) {\n        org.apache.jackrabbit.oak.query.xpath.Expression c = parseConstraint();\n        currentSelector.condition = org.apache.jackrabbit.oak.query.xpath.Expression.and(currentSelector.condition, c);\n        read(\"]\");\n    }\n    startOfQuery = false;\n    nextSelector(false);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "shortcut",
            "src_parent": "if (shortcut) {\n} else if (readIf(\"*\")) {\n    pathPattern += \"%\";\n    if (!currentSelector.isDescendant) {\n        if ((selectors.size() == 0) && currentSelector.path.equals(\"\")) {\n            currentSelector.path = \"/\";\n        }\n    }\n} else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String identifier = readIdentifier();\n    if (readIf(\"(\")) {\n        if (\"text\".equals(identifier)) {\n            currentSelector.isChild = false;\n            pathPattern += \"jcr:xmltext\";\n            read(\")\");\n            if (currentSelector.isDescendant) {\n                currentSelector.nodeName = \"jcr:xmltext\";\n            } else {\n                currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n            }\n        } else if (\"element\".equals(identifier)) {\n            if (readIf(\")\")) {\n                pathPattern += \"%\";\n            } else {\n                if (readIf(\"*\")) {\n                    pathPattern += \"%\";\n                } else {\n                    java.lang.String name = readPathSegment();\n                    pathPattern += name;\n                    appendNodeName(name);\n                }\n                if (readIf(\",\")) {\n                    currentSelector.nodeType = readIdentifier();\n                }\n                read(\")\");\n            }\n        } else if (\"rep:excerpt\".equals(identifier)) {\n            readOpenDotClose(false);\n            rewindSelector();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else {\n            throw getSyntaxError();\n        }\n    } else {\n        java.lang.String name = org.apache.jackrabbit.util.ISO9075.decode(identifier);\n        pathPattern += name;\n        appendNodeName(name);\n    }\n} else if (readIf(\"@\")) {\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readOpenDotClose(true);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readOpenDotClose(true);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "src_parent_type": "If",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n}",
            "src_parent": "if (shortcut) {\n} else if (readIf(\"*\")) {\n    pathPattern += \"%\";\n    if (!currentSelector.isDescendant) {\n        if ((selectors.size() == 0) && currentSelector.path.equals(\"\")) {\n            currentSelector.path = \"/\";\n        }\n    }\n} else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String identifier = readIdentifier();\n    if (readIf(\"(\")) {\n        if (\"text\".equals(identifier)) {\n            currentSelector.isChild = false;\n            pathPattern += \"jcr:xmltext\";\n            read(\")\");\n            if (currentSelector.isDescendant) {\n                currentSelector.nodeName = \"jcr:xmltext\";\n            } else {\n                currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n            }\n        } else if (\"element\".equals(identifier)) {\n            if (readIf(\")\")) {\n                pathPattern += \"%\";\n            } else {\n                if (readIf(\"*\")) {\n                    pathPattern += \"%\";\n                } else {\n                    java.lang.String name = readPathSegment();\n                    pathPattern += name;\n                    appendNodeName(name);\n                }\n                if (readIf(\",\")) {\n                    currentSelector.nodeType = readIdentifier();\n                }\n                read(\")\");\n            }\n        } else if (\"rep:excerpt\".equals(identifier)) {\n            readOpenDotClose(false);\n            rewindSelector();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else {\n            throw getSyntaxError();\n        }\n    } else {\n        java.lang.String name = org.apache.jackrabbit.util.ISO9075.decode(identifier);\n        pathPattern += name;\n        appendNodeName(name);\n    }\n} else if (readIf(\"@\")) {\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readOpenDotClose(true);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readOpenDotClose(true);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    java.lang.String identifier = readIdentifier();\n    if (readIf(\"(\")) {\n        if (\"text\".equals(identifier)) {\n            currentSelector.isChild = false;\n            pathPattern += \"jcr:xmltext\";\n            read(\")\");\n            if (currentSelector.isDescendant) {\n                currentSelector.nodeName = \"jcr:xmltext\";\n            } else {\n                currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n            }\n        } else if (\"element\".equals(identifier)) {\n            if (readIf(\")\")) {\n                pathPattern += \"%\";\n            } else {\n                if (readIf(\"*\")) {\n                    pathPattern += \"%\";\n                } else {\n                    java.lang.String name = readPathSegment();\n                    pathPattern += name;\n                    appendNodeName(name);\n                }\n                if (readIf(\",\")) {\n                    currentSelector.nodeType = readIdentifier();\n                }\n                read(\")\");\n            }\n        } else if (\"rep:excerpt\".equals(identifier)) {\n            readOpenDotClose(false);\n            rewindSelector();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else {\n            throw getSyntaxError();\n        }\n    } else {\n        java.lang.String name = org.apache.jackrabbit.util.ISO9075.decode(identifier);\n        pathPattern += name;\n        appendNodeName(name);\n    }\n}",
            "src_parent": "if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String identifier = readIdentifier();\n    if (readIf(\"(\")) {\n        if (\"text\".equals(identifier)) {\n            currentSelector.isChild = false;\n            pathPattern += \"jcr:xmltext\";\n            read(\")\");\n            if (currentSelector.isDescendant) {\n                currentSelector.nodeName = \"jcr:xmltext\";\n            } else {\n                currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n            }\n        } else if (\"element\".equals(identifier)) {\n            if (readIf(\")\")) {\n                pathPattern += \"%\";\n            } else {\n                if (readIf(\"*\")) {\n                    pathPattern += \"%\";\n                } else {\n                    java.lang.String name = readPathSegment();\n                    pathPattern += name;\n                    appendNodeName(name);\n                }\n                if (readIf(\",\")) {\n                    currentSelector.nodeType = readIdentifier();\n                }\n                read(\")\");\n            }\n        } else if (\"rep:excerpt\".equals(identifier)) {\n            readOpenDotClose(false);\n            rewindSelector();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else {\n            throw getSyntaxError();\n        }\n    } else {\n        java.lang.String name = org.apache.jackrabbit.util.ISO9075.decode(identifier);\n        pathPattern += name;\n        appendNodeName(name);\n    }\n} else if (readIf(\"@\")) {\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readOpenDotClose(true);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readOpenDotClose(true);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "read(\")\")",
            "dst_parent": "{\n    if (readOpenBracket) {\n        read(\"(\");\n    }\n    readIf(\".\");\n    read(\")\");\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "read(\")\")",
            "src_parent": "{\n    read(\".\");\n    read(\")\");\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (shortcut) {\n} else if (readIf(\"*\")) {\n    pathPattern += \"%\";\n    if (!currentSelector.isDescendant) {\n        if ((selectors.size() == 0) && currentSelector.path.equals(\"\")) {\n            currentSelector.path = \"/\";\n        }\n    }\n} else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String identifier = readIdentifier();\n    if (readIf(\"(\")) {\n        if (\"text\".equals(identifier)) {\n            currentSelector.isChild = false;\n            pathPattern += \"jcr:xmltext\";\n            read(\")\");\n            if (currentSelector.isDescendant) {\n                currentSelector.nodeName = \"jcr:xmltext\";\n            } else {\n                currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n            }\n        } else if (\"element\".equals(identifier)) {\n            if (readIf(\")\")) {\n                pathPattern += \"%\";\n            } else {\n                if (readIf(\"*\")) {\n                    pathPattern += \"%\";\n                } else {\n                    java.lang.String name = readPathSegment();\n                    pathPattern += name;\n                    appendNodeName(name);\n                }\n                if (readIf(\",\")) {\n                    currentSelector.nodeType = readIdentifier();\n                }\n                read(\")\");\n            }\n        } else if (\"rep:excerpt\".equals(identifier)) {\n            readOpenDotClose(false);\n            rewindSelector();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else {\n            throw getSyntaxError();\n        }\n    } else {\n        java.lang.String name = org.apache.jackrabbit.util.ISO9075.decode(identifier);\n        pathPattern += name;\n        appendNodeName(name);\n    }\n} else if (readIf(\"@\")) {\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readOpenDotClose(true);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readOpenDotClose(true);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "dst_parent": "{\n    boolean shortcut = false;\n    boolean slash = readIf(\"/\");\n    if (!slash) {\n        if (startOfQuery) {\n            currentSelector.path = \"/\";\n            pathPattern = \"/\";\n            currentSelector.isChild = true;\n        } else {\n            break;\n        }\n    } else if (readIf(\"jcr:root\")) {\n        if (!pathPattern.isEmpty()) {\n            throw getSyntaxError(\"jcr:root needs to be at the beginning\");\n        }\n        if (readIf(\"/\")) {\n            currentSelector.path = \"/\";\n            pathPattern = \"/\";\n            if (readIf(\"/\")) {\n                pathPattern = \"//\";\n                currentSelector.isDescendant = true;\n            } else {\n                currentSelector.isChild = true;\n            }\n        } else {\n            pathPattern = \"/%\";\n            currentSelector.path = \"/\";\n            shortcut = true;\n        }\n    } else if (readIf(\"/\")) {\n        pathPattern += \"%\";\n        if (currentSelector.isDescendant) {\n            nextSelector(true);\n        }\n        currentSelector.isDescendant = true;\n    } else {\n        pathPattern += \"/\";\n        if (startOfQuery) {\n            currentSelector.path = \"/\";\n        } else {\n            if (currentSelector.isDescendant) {\n                nextSelector(true);\n            }\n            currentSelector.isChild = true;\n        }\n    }\n    int startParseIndex = parseIndex;\n    if (shortcut) {\n    } else if (readIf(\"*\")) {\n        pathPattern += \"%\";\n        if (!currentSelector.isDescendant) {\n            if ((selectors.size() == 0) && currentSelector.path.equals(\"\")) {\n                currentSelector.path = \"/\";\n            }\n        }\n    } else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n        java.lang.String identifier = readIdentifier();\n        if (readIf(\"(\")) {\n            if (\"text\".equals(identifier)) {\n                currentSelector.isChild = false;\n                pathPattern += \"jcr:xmltext\";\n                read(\")\");\n                if (currentSelector.isDescendant) {\n                    currentSelector.nodeName = \"jcr:xmltext\";\n                } else {\n                    currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n                }\n            } else if (\"element\".equals(identifier)) {\n                if (readIf(\")\")) {\n                    pathPattern += \"%\";\n                } else {\n                    if (readIf(\"*\")) {\n                        pathPattern += \"%\";\n                    } else {\n                        java.lang.String name = readPathSegment();\n                        pathPattern += name;\n                        appendNodeName(name);\n                    }\n                    if (readIf(\",\")) {\n                        currentSelector.nodeType = readIdentifier();\n                    }\n                    read(\")\");\n                }\n            } else if (\"rep:excerpt\".equals(identifier)) {\n                readOpenDotClose(false);\n                rewindSelector();\n                org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n                statement.addSelectColumn(p);\n            } else {\n                throw getSyntaxError();\n            }\n        } else {\n            java.lang.String name = org.apache.jackrabbit.util.ISO9075.decode(identifier);\n            pathPattern += name;\n            appendNodeName(name);\n        }\n    } else if (readIf(\"@\")) {\n        rewindSelector();\n        org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n        statement.addSelectColumn(p);\n    } else if (readIf(\"(\")) {\n        rewindSelector();\n        do {\n            if (readIf(\"@\")) {\n                org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n                statement.addSelectColumn(p);\n            } else if (readIf(\"rep:excerpt\")) {\n                readOpenDotClose(true);\n                org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n                statement.addSelectColumn(p);\n            } else if (readIf(\"rep:spellcheck\")) {\n                read(\"(\");\n                read(\")\");\n                org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n                statement.addSelectColumn(p);\n            } else if (readIf(\"rep:suggest\")) {\n                readOpenDotClose(true);\n                org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n                statement.addSelectColumn(p);\n            }\n        } while (readIf(\"|\") );\n        if (!readIf(\")\")) {\n            return convertToUnion(query, statement, startParseIndex - 1);\n        }\n    } else if (readIf(\".\")) {\n        if (readIf(\".\")) {\n            java.lang.String name = \"..\";\n            pathPattern += name;\n            if (!currentSelector.isChild) {\n                currentSelector.nodeName = name;\n            } else if (currentSelector.isChild) {\n                currentSelector.isChild = false;\n                currentSelector.isParent = true;\n            }\n        } else if (selectors.size() > 0) {\n            currentSelector = selectors.remove(selectors.size() - 1);\n            currentSelector.condition = null;\n            currentSelector.joinCondition = null;\n        }\n    } else {\n        throw getSyntaxError();\n    }\n    if (readIf(\"[\")) {\n        org.apache.jackrabbit.oak.query.xpath.Expression c = parseConstraint();\n        currentSelector.condition = org.apache.jackrabbit.oak.query.xpath.Expression.and(currentSelector.condition, c);\n        read(\"]\");\n    }\n    startOfQuery = false;\n    nextSelector(false);\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (readIf(\"text\")) {\n    currentSelector.isChild = false;\n    pathPattern += \"jcr:xmltext\";\n    read(\"(\");\n    read(\")\");\n    if (currentSelector.isDescendant) {\n        currentSelector.nodeName = \"jcr:xmltext\";\n    } else {\n        currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n    }\n} else if (readIf(\"element\")) {\n    read(\"(\");\n    if (readIf(\")\")) {\n        pathPattern += \"%\";\n    } else {\n        if (readIf(\"*\")) {\n            pathPattern += \"%\";\n        } else {\n            java.lang.String name = readPathSegment();\n            pathPattern += name;\n            appendNodeName(name);\n        }\n        if (readIf(\",\")) {\n            currentSelector.nodeType = readIdentifier();\n        }\n        read(\")\");\n    }\n} else if (readIf(\"@\")) {\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n} else if (readIf(\"rep:excerpt\")) {\n    rewindSelector();\n    readExcerpt();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String name = readPathSegment();\n    pathPattern += name;\n    appendNodeName(name);\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "src_parent": "{\n    if (readIf(\"text\")) {\n        currentSelector.isChild = false;\n        pathPattern += \"jcr:xmltext\";\n        read(\"(\");\n        read(\")\");\n        if (currentSelector.isDescendant) {\n            currentSelector.nodeName = \"jcr:xmltext\";\n        } else {\n            currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n        }\n    } else if (readIf(\"element\")) {\n        read(\"(\");\n        if (readIf(\")\")) {\n            pathPattern += \"%\";\n        } else {\n            if (readIf(\"*\")) {\n                pathPattern += \"%\";\n            } else {\n                java.lang.String name = readPathSegment();\n                pathPattern += name;\n                appendNodeName(name);\n            }\n            if (readIf(\",\")) {\n                currentSelector.nodeType = readIdentifier();\n            }\n            read(\")\");\n        }\n    } else if (readIf(\"@\")) {\n        rewindSelector();\n        org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n        statement.addSelectColumn(p);\n    } else if (readIf(\"rep:excerpt\")) {\n        rewindSelector();\n        readExcerpt();\n        org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n        statement.addSelectColumn(p);\n    } else if (readIf(\"(\")) {\n        rewindSelector();\n        do {\n            if (readIf(\"@\")) {\n                org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n                statement.addSelectColumn(p);\n            } else if (readIf(\"rep:excerpt\")) {\n                readExcerpt();\n                org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n                statement.addSelectColumn(p);\n            } else if (readIf(\"rep:spellcheck\")) {\n                read(\"(\");\n                read(\")\");\n                org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n                statement.addSelectColumn(p);\n            } else if (readIf(\"rep:suggest\")) {\n                readExcerpt();\n                org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n                statement.addSelectColumn(p);\n            }\n        } while (readIf(\"|\") );\n        if (!readIf(\")\")) {\n            return convertToUnion(query, statement, startParseIndex - 1);\n        }\n    } else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n        java.lang.String name = readPathSegment();\n        pathPattern += name;\n        appendNodeName(name);\n    } else if (readIf(\".\")) {\n        if (readIf(\".\")) {\n            java.lang.String name = \"..\";\n            pathPattern += name;\n            if (!currentSelector.isChild) {\n                currentSelector.nodeName = name;\n            } else if (currentSelector.isChild) {\n                currentSelector.isChild = false;\n                currentSelector.isParent = true;\n            }\n        } else if (selectors.size() > 0) {\n            currentSelector = selectors.remove(selectors.size() - 1);\n            currentSelector.condition = null;\n            currentSelector.joinCondition = null;\n        }\n    } else {\n        throw getSyntaxError();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter",
            "dst_parent": "",
            "dst_parent_type": "ThisAccess",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "\".\"",
            "dst_parent": "readIf(\".\")",
            "dst_parent_type": "Invocation",
            "dst_type": "Literal",
            "operator": "MOV",
            "src": "\".\"",
            "src_parent": "read(\".\")",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "read(\"(\")",
            "dst_parent": "{\n    read(\"(\");\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "read(\"(\")",
            "src_parent": "{\n    read(\"(\");\n    if (readIf(\")\")) {\n        pathPattern += \"%\";\n    } else {\n        if (readIf(\"*\")) {\n            pathPattern += \"%\";\n        } else {\n            java.lang.String name = readPathSegment();\n            pathPattern += name;\n            appendNodeName(name);\n        }\n        if (readIf(\",\")) {\n            currentSelector.nodeType = readIdentifier();\n        }\n        read(\")\");\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "readIf(\"*\")",
            "dst_parent": "if (readIf(\"*\")) {\n    pathPattern += \"%\";\n    if (!currentSelector.isDescendant) {\n        if ((selectors.size() == 0) && currentSelector.path.equals(\"\")) {\n            currentSelector.path = \"/\";\n        }\n    }\n} else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String identifier = readIdentifier();\n    if (readIf(\"(\")) {\n        if (\"text\".equals(identifier)) {\n            currentSelector.isChild = false;\n            pathPattern += \"jcr:xmltext\";\n            read(\")\");\n            if (currentSelector.isDescendant) {\n                currentSelector.nodeName = \"jcr:xmltext\";\n            } else {\n                currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n            }\n        } else if (\"element\".equals(identifier)) {\n            if (readIf(\")\")) {\n                pathPattern += \"%\";\n            } else {\n                if (readIf(\"*\")) {\n                    pathPattern += \"%\";\n                } else {\n                    java.lang.String name = readPathSegment();\n                    pathPattern += name;\n                    appendNodeName(name);\n                }\n                if (readIf(\",\")) {\n                    currentSelector.nodeType = readIdentifier();\n                }\n                read(\")\");\n            }\n        } else if (\"rep:excerpt\".equals(identifier)) {\n            readOpenDotClose(false);\n            rewindSelector();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else {\n            throw getSyntaxError();\n        }\n    } else {\n        java.lang.String name = org.apache.jackrabbit.util.ISO9075.decode(identifier);\n        pathPattern += name;\n        appendNodeName(name);\n    }\n} else if (readIf(\"@\")) {\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readOpenDotClose(true);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readOpenDotClose(true);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "dst_parent_type": "If",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "readIf(\"*\")",
            "src_parent": "if (readIf(\"*\")) {\n    pathPattern += \"%\";\n    if (!currentSelector.isDescendant) {\n        if ((selectors.size() == 0) && currentSelector.path.equals(\"\")) {\n            currentSelector.path = \"/\";\n        }\n    }\n} else if (readIf(\"text\")) {\n    currentSelector.isChild = false;\n    pathPattern += \"jcr:xmltext\";\n    read(\"(\");\n    read(\")\");\n    if (currentSelector.isDescendant) {\n        currentSelector.nodeName = \"jcr:xmltext\";\n    } else {\n        currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n    }\n} else if (readIf(\"element\")) {\n    read(\"(\");\n    if (readIf(\")\")) {\n        pathPattern += \"%\";\n    } else {\n        if (readIf(\"*\")) {\n            pathPattern += \"%\";\n        } else {\n            java.lang.String name = readPathSegment();\n            pathPattern += name;\n            appendNodeName(name);\n        }\n        if (readIf(\",\")) {\n            currentSelector.nodeType = readIdentifier();\n        }\n        read(\")\");\n    }\n} else if (readIf(\"@\")) {\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n} else if (readIf(\"rep:excerpt\")) {\n    rewindSelector();\n    readExcerpt();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String name = readPathSegment();\n    pathPattern += name;\n    appendNodeName(name);\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    pathPattern += \"%\";\n    if (!currentSelector.isDescendant) {\n        if ((selectors.size() == 0) && currentSelector.path.equals(\"\")) {\n            currentSelector.path = \"/\";\n        }\n    }\n}",
            "dst_parent": "if (readIf(\"*\")) {\n    pathPattern += \"%\";\n    if (!currentSelector.isDescendant) {\n        if ((selectors.size() == 0) && currentSelector.path.equals(\"\")) {\n            currentSelector.path = \"/\";\n        }\n    }\n} else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String identifier = readIdentifier();\n    if (readIf(\"(\")) {\n        if (\"text\".equals(identifier)) {\n            currentSelector.isChild = false;\n            pathPattern += \"jcr:xmltext\";\n            read(\")\");\n            if (currentSelector.isDescendant) {\n                currentSelector.nodeName = \"jcr:xmltext\";\n            } else {\n                currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n            }\n        } else if (\"element\".equals(identifier)) {\n            if (readIf(\")\")) {\n                pathPattern += \"%\";\n            } else {\n                if (readIf(\"*\")) {\n                    pathPattern += \"%\";\n                } else {\n                    java.lang.String name = readPathSegment();\n                    pathPattern += name;\n                    appendNodeName(name);\n                }\n                if (readIf(\",\")) {\n                    currentSelector.nodeType = readIdentifier();\n                }\n                read(\")\");\n            }\n        } else if (\"rep:excerpt\".equals(identifier)) {\n            readOpenDotClose(false);\n            rewindSelector();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else {\n            throw getSyntaxError();\n        }\n    } else {\n        java.lang.String name = org.apache.jackrabbit.util.ISO9075.decode(identifier);\n        pathPattern += name;\n        appendNodeName(name);\n    }\n} else if (readIf(\"@\")) {\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readOpenDotClose(true);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readOpenDotClose(true);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    pathPattern += \"%\";\n    if (!currentSelector.isDescendant) {\n        if ((selectors.size() == 0) && currentSelector.path.equals(\"\")) {\n            currentSelector.path = \"/\";\n        }\n    }\n}",
            "src_parent": "if (readIf(\"*\")) {\n    pathPattern += \"%\";\n    if (!currentSelector.isDescendant) {\n        if ((selectors.size() == 0) && currentSelector.path.equals(\"\")) {\n            currentSelector.path = \"/\";\n        }\n    }\n} else if (readIf(\"text\")) {\n    currentSelector.isChild = false;\n    pathPattern += \"jcr:xmltext\";\n    read(\"(\");\n    read(\")\");\n    if (currentSelector.isDescendant) {\n        currentSelector.nodeName = \"jcr:xmltext\";\n    } else {\n        currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n    }\n} else if (readIf(\"element\")) {\n    read(\"(\");\n    if (readIf(\")\")) {\n        pathPattern += \"%\";\n    } else {\n        if (readIf(\"*\")) {\n            pathPattern += \"%\";\n        } else {\n            java.lang.String name = readPathSegment();\n            pathPattern += name;\n            appendNodeName(name);\n        }\n        if (readIf(\",\")) {\n            currentSelector.nodeType = readIdentifier();\n        }\n        read(\")\");\n    }\n} else if (readIf(\"@\")) {\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n} else if (readIf(\"rep:excerpt\")) {\n    rewindSelector();\n    readExcerpt();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String name = readPathSegment();\n    pathPattern += name;\n    appendNodeName(name);\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER",
            "dst_parent": "if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String identifier = readIdentifier();\n    if (readIf(\"(\")) {\n        if (\"text\".equals(identifier)) {\n            currentSelector.isChild = false;\n            pathPattern += \"jcr:xmltext\";\n            read(\")\");\n            if (currentSelector.isDescendant) {\n                currentSelector.nodeName = \"jcr:xmltext\";\n            } else {\n                currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n            }\n        } else if (\"element\".equals(identifier)) {\n            if (readIf(\")\")) {\n                pathPattern += \"%\";\n            } else {\n                if (readIf(\"*\")) {\n                    pathPattern += \"%\";\n                } else {\n                    java.lang.String name = readPathSegment();\n                    pathPattern += name;\n                    appendNodeName(name);\n                }\n                if (readIf(\",\")) {\n                    currentSelector.nodeType = readIdentifier();\n                }\n                read(\")\");\n            }\n        } else if (\"rep:excerpt\".equals(identifier)) {\n            readOpenDotClose(false);\n            rewindSelector();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else {\n            throw getSyntaxError();\n        }\n    } else {\n        java.lang.String name = org.apache.jackrabbit.util.ISO9075.decode(identifier);\n        pathPattern += name;\n        appendNodeName(name);\n    }\n} else if (readIf(\"@\")) {\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readOpenDotClose(true);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readOpenDotClose(true);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER",
            "src_parent": "if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String name = readPathSegment();\n    pathPattern += name;\n    appendNodeName(name);\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "readIf(\"@\")",
            "dst_parent": "if (readIf(\"@\")) {\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readOpenDotClose(true);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readOpenDotClose(true);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "dst_parent_type": "If",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "readIf(\"@\")",
            "src_parent": "if (readIf(\"@\")) {\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n} else if (readIf(\"rep:excerpt\")) {\n    rewindSelector();\n    readExcerpt();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String name = readPathSegment();\n    pathPattern += name;\n    appendNodeName(name);\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n}",
            "dst_parent": "if (readIf(\"@\")) {\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readOpenDotClose(true);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readOpenDotClose(true);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n}",
            "src_parent": "if (readIf(\"@\")) {\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n} else if (readIf(\"rep:excerpt\")) {\n    rewindSelector();\n    readExcerpt();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String name = readPathSegment();\n    pathPattern += name;\n    appendNodeName(name);\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "pathPattern += name",
            "dst_parent": "{\n    java.lang.String name = org.apache.jackrabbit.util.ISO9075.decode(identifier);\n    pathPattern += name;\n    appendNodeName(name);\n}",
            "dst_parent_type": "Block",
            "dst_type": "OperatorAssignment",
            "operator": "MOV",
            "src": "pathPattern += name",
            "src_parent": "{\n    java.lang.String name = readPathSegment();\n    pathPattern += name;\n    appendNodeName(name);\n}",
            "src_parent_type": "Block",
            "src_type": "OperatorAssignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "appendNodeName(name)",
            "dst_parent": "{\n    java.lang.String name = org.apache.jackrabbit.util.ISO9075.decode(identifier);\n    pathPattern += name;\n    appendNodeName(name);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "appendNodeName(name)",
            "src_parent": "{\n    java.lang.String name = readPathSegment();\n    pathPattern += name;\n    appendNodeName(name);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    currentSelector.isChild = false;\n    pathPattern += \"jcr:xmltext\";\n    read(\")\");\n    if (currentSelector.isDescendant) {\n        currentSelector.nodeName = \"jcr:xmltext\";\n    } else {\n        currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n    }\n}",
            "dst_parent": "if (\"text\".equals(identifier)) {\n    currentSelector.isChild = false;\n    pathPattern += \"jcr:xmltext\";\n    read(\")\");\n    if (currentSelector.isDescendant) {\n        currentSelector.nodeName = \"jcr:xmltext\";\n    } else {\n        currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n    }\n} else if (\"element\".equals(identifier)) {\n    if (readIf(\")\")) {\n        pathPattern += \"%\";\n    } else {\n        if (readIf(\"*\")) {\n            pathPattern += \"%\";\n        } else {\n            java.lang.String name = readPathSegment();\n            pathPattern += name;\n            appendNodeName(name);\n        }\n        if (readIf(\",\")) {\n            currentSelector.nodeType = readIdentifier();\n        }\n        read(\")\");\n    }\n} else if (\"rep:excerpt\".equals(identifier)) {\n    readOpenDotClose(false);\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n} else {\n    throw getSyntaxError();\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    currentSelector.isChild = false;\n    pathPattern += \"jcr:xmltext\";\n    read(\"(\");\n    read(\")\");\n    if (currentSelector.isDescendant) {\n        currentSelector.nodeName = \"jcr:xmltext\";\n    } else {\n        currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n    }\n}",
            "src_parent": "if (readIf(\"text\")) {\n    currentSelector.isChild = false;\n    pathPattern += \"jcr:xmltext\";\n    read(\"(\");\n    read(\")\");\n    if (currentSelector.isDescendant) {\n        currentSelector.nodeName = \"jcr:xmltext\";\n    } else {\n        currentSelector.path = org.apache.jackrabbit.oak.commons.PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n    }\n} else if (readIf(\"element\")) {\n    read(\"(\");\n    if (readIf(\")\")) {\n        pathPattern += \"%\";\n    } else {\n        if (readIf(\"*\")) {\n            pathPattern += \"%\";\n        } else {\n            java.lang.String name = readPathSegment();\n            pathPattern += name;\n            appendNodeName(name);\n        }\n        if (readIf(\",\")) {\n            currentSelector.nodeType = readIdentifier();\n        }\n        read(\")\");\n    }\n} else if (readIf(\"@\")) {\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n} else if (readIf(\"rep:excerpt\")) {\n    rewindSelector();\n    readExcerpt();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String name = readPathSegment();\n    pathPattern += name;\n    appendNodeName(name);\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    if (readIf(\".\")) {\n        if (readIf(\".\")) {\n            java.lang.String name = \"..\";\n            pathPattern += name;\n            if (!currentSelector.isChild) {\n                currentSelector.nodeName = name;\n            } else if (currentSelector.isChild) {\n                currentSelector.isChild = false;\n                currentSelector.isParent = true;\n            }\n        } else if (selectors.size() > 0) {\n            currentSelector = selectors.remove(selectors.size() - 1);\n            currentSelector.condition = null;\n            currentSelector.joinCondition = null;\n        }\n    } else {\n        throw getSyntaxError();\n    }\n}",
            "dst_parent": "if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readOpenDotClose(true);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readOpenDotClose(true);\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    if (readIf(\".\")) {\n        if (readIf(\".\")) {\n            java.lang.String name = \"..\";\n            pathPattern += name;\n            if (!currentSelector.isChild) {\n                currentSelector.nodeName = name;\n            } else if (currentSelector.isChild) {\n                currentSelector.isChild = false;\n                currentSelector.isParent = true;\n            }\n        } else if (selectors.size() > 0) {\n            currentSelector = selectors.remove(selectors.size() - 1);\n            currentSelector.condition = null;\n            currentSelector.joinCondition = null;\n        }\n    } else {\n        throw getSyntaxError();\n    }\n}",
            "src_parent": "if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String name = readPathSegment();\n    pathPattern += name;\n    appendNodeName(name);\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    if (readIf(\")\")) {\n        pathPattern += \"%\";\n    } else {\n        if (readIf(\"*\")) {\n            pathPattern += \"%\";\n        } else {\n            java.lang.String name = readPathSegment();\n            pathPattern += name;\n            appendNodeName(name);\n        }\n        if (readIf(\",\")) {\n            currentSelector.nodeType = readIdentifier();\n        }\n        read(\")\");\n    }\n}",
            "dst_parent": "if (\"element\".equals(identifier)) {\n    if (readIf(\")\")) {\n        pathPattern += \"%\";\n    } else {\n        if (readIf(\"*\")) {\n            pathPattern += \"%\";\n        } else {\n            java.lang.String name = readPathSegment();\n            pathPattern += name;\n            appendNodeName(name);\n        }\n        if (readIf(\",\")) {\n            currentSelector.nodeType = readIdentifier();\n        }\n        read(\")\");\n    }\n} else if (\"rep:excerpt\".equals(identifier)) {\n    readOpenDotClose(false);\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n} else {\n    throw getSyntaxError();\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    read(\"(\");\n    if (readIf(\")\")) {\n        pathPattern += \"%\";\n    } else {\n        if (readIf(\"*\")) {\n            pathPattern += \"%\";\n        } else {\n            java.lang.String name = readPathSegment();\n            pathPattern += name;\n            appendNodeName(name);\n        }\n        if (readIf(\",\")) {\n            currentSelector.nodeType = readIdentifier();\n        }\n        read(\")\");\n    }\n}",
            "src_parent": "if (readIf(\"element\")) {\n    read(\"(\");\n    if (readIf(\")\")) {\n        pathPattern += \"%\";\n    } else {\n        if (readIf(\"*\")) {\n            pathPattern += \"%\";\n        } else {\n            java.lang.String name = readPathSegment();\n            pathPattern += name;\n            appendNodeName(name);\n        }\n        if (readIf(\",\")) {\n            currentSelector.nodeType = readIdentifier();\n        }\n        read(\")\");\n    }\n} else if (readIf(\"@\")) {\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n    statement.addSelectColumn(p);\n} else if (readIf(\"rep:excerpt\")) {\n    rewindSelector();\n    readExcerpt();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String name = readPathSegment();\n    pathPattern += name;\n    appendNodeName(name);\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    readOpenDotClose(false);\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n}",
            "dst_parent": "if (\"rep:excerpt\".equals(identifier)) {\n    readOpenDotClose(false);\n    rewindSelector();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n} else {\n    throw getSyntaxError();\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    rewindSelector();\n    readExcerpt();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n}",
            "src_parent": "if (readIf(\"rep:excerpt\")) {\n    rewindSelector();\n    readExcerpt();\n    org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n    statement.addSelectColumn(p);\n} else if (readIf(\"(\")) {\n    rewindSelector();\n    do {\n        if (readIf(\"@\")) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = readProperty();\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:excerpt\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:excerpt\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:spellcheck\")) {\n            read(\"(\");\n            read(\")\");\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n            statement.addSelectColumn(p);\n        } else if (readIf(\"rep:suggest\")) {\n            readExcerpt();\n            org.apache.jackrabbit.oak.query.xpath.Expression.Property p = new org.apache.jackrabbit.oak.query.xpath.Expression.Property(currentSelector, \"rep:suggest()\", false);\n            statement.addSelectColumn(p);\n        }\n    } while (readIf(\"|\") );\n    if (!readIf(\")\")) {\n        return convertToUnion(query, statement, startParseIndex - 1);\n    }\n} else if (currentTokenType == org.apache.jackrabbit.oak.query.xpath.XPathToSQL2Converter.IDENTIFIER) {\n    java.lang.String name = readPathSegment();\n    pathPattern += name;\n    appendNodeName(name);\n} else if (readIf(\".\")) {\n    if (readIf(\".\")) {\n        java.lang.String name = \"..\";\n        pathPattern += name;\n        if (!currentSelector.isChild) {\n            currentSelector.nodeName = name;\n        } else if (currentSelector.isChild) {\n            currentSelector.isChild = false;\n            currentSelector.isParent = true;\n        }\n    } else if (selectors.size() > 0) {\n        currentSelector = selectors.remove(selectors.size() - 1);\n        currentSelector.condition = null;\n        currentSelector.joinCondition = null;\n    }\n} else {\n    throw getSyntaxError();\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        }
      ],
      "file_name": "XPathToSQL2Converter"
    }
  ],
  "id": "jackrabbit-oak_ca05fd06"
}