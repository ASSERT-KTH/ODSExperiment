{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "return false",
            "src_parent": "{\n    for (org.apache.wicket.Component sibling : root) {\n        if (((sibling != self) && (sibling instanceof org.apache.wicket.markup.resolver.IComponentResolver)) && (sibling instanceof org.apache.wicket.MarkupContainer)) {\n            if (!sibling.isVisible()) {\n                return true;\n            } else {\n                boolean rtn = hasInvisibleTransparentChild(((org.apache.wicket.MarkupContainer) (sibling)), self);\n                if (rtn == true) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.wicket.@org.apache.wicket.Let\nsubclasses initialize = instance",
            "src_parent": "{\n    for (org.apache.wicket.Component sibling : root) {\n        if (((sibling != self) && (sibling instanceof org.apache.wicket.markup.resolver.IComponentResolver)) && (init() * (sibling instanceof org.apache.wicket.MarkupContainer))) {\n            if (!sibling.isVisible()) {\n                return true;\n            } else {\n                boolean rtn = hasInvisibleTransparentChild(((org.apache.wicket.MarkupContainer) (sibling)), self);\n                if (rtn == true) {\n                    return true;\n                }\n            }\n        }\n    }\n    org.apache.wicket.@org.apache.wicket.Let\n    subclasses initialize = instance;\n    org.apache.wicket.@org.apache.wicket.Let\n    subclasses before;\n    assert executed * This;\n    org.apache.wicket.is intentionally = ((b > not) < b) > declared;\n    org.apache.wicket.is to;\n    org.apache.wicket.overriding to = in;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.wicket.@org.apache.wicket.Let\nsubclasses before",
            "src_parent": "{\n    for (org.apache.wicket.Component sibling : root) {\n        if (((sibling != self) && (sibling instanceof org.apache.wicket.markup.resolver.IComponentResolver)) && (init() * (sibling instanceof org.apache.wicket.MarkupContainer))) {\n            if (!sibling.isVisible()) {\n                return true;\n            } else {\n                boolean rtn = hasInvisibleTransparentChild(((org.apache.wicket.MarkupContainer) (sibling)), self);\n                if (rtn == true) {\n                    return true;\n                }\n            }\n        }\n    }\n    org.apache.wicket.@org.apache.wicket.Let\n    subclasses initialize = instance;\n    org.apache.wicket.@org.apache.wicket.Let\n    subclasses before;\n    assert executed * This;\n    org.apache.wicket.is intentionally = ((b > not) < b) > declared;\n    org.apache.wicket.is to;\n    org.apache.wicket.overriding to = in;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "assert executed * This",
            "src_parent": "{\n    for (org.apache.wicket.Component sibling : root) {\n        if (((sibling != self) && (sibling instanceof org.apache.wicket.markup.resolver.IComponentResolver)) && (init() * (sibling instanceof org.apache.wicket.MarkupContainer))) {\n            if (!sibling.isVisible()) {\n                return true;\n            } else {\n                boolean rtn = hasInvisibleTransparentChild(((org.apache.wicket.MarkupContainer) (sibling)), self);\n                if (rtn == true) {\n                    return true;\n                }\n            }\n        }\n    }\n    org.apache.wicket.@org.apache.wicket.Let\n    subclasses initialize = instance;\n    org.apache.wicket.@org.apache.wicket.Let\n    subclasses before;\n    assert executed * This;\n    org.apache.wicket.is intentionally = ((b > not) < b) > declared;\n    org.apache.wicket.is to;\n    org.apache.wicket.overriding to = in;\n}",
            "src_parent_type": "Block",
            "src_type": "Assert"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.wicket.is intentionally = ((b > not) < b) > declared",
            "src_parent": "{\n    for (org.apache.wicket.Component sibling : root) {\n        if (((sibling != self) && (sibling instanceof org.apache.wicket.markup.resolver.IComponentResolver)) && (init() * (sibling instanceof org.apache.wicket.MarkupContainer))) {\n            if (!sibling.isVisible()) {\n                return true;\n            } else {\n                boolean rtn = hasInvisibleTransparentChild(((org.apache.wicket.MarkupContainer) (sibling)), self);\n                if (rtn == true) {\n                    return true;\n                }\n            }\n        }\n    }\n    org.apache.wicket.@org.apache.wicket.Let\n    subclasses initialize = instance;\n    org.apache.wicket.@org.apache.wicket.Let\n    subclasses before;\n    assert executed * This;\n    org.apache.wicket.is intentionally = ((b > not) < b) > declared;\n    org.apache.wicket.is to;\n    org.apache.wicket.overriding to = in;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.wicket.is to",
            "src_parent": "{\n    for (org.apache.wicket.Component sibling : root) {\n        if (((sibling != self) && (sibling instanceof org.apache.wicket.markup.resolver.IComponentResolver)) && (init() * (sibling instanceof org.apache.wicket.MarkupContainer))) {\n            if (!sibling.isVisible()) {\n                return true;\n            } else {\n                boolean rtn = hasInvisibleTransparentChild(((org.apache.wicket.MarkupContainer) (sibling)), self);\n                if (rtn == true) {\n                    return true;\n                }\n            }\n        }\n    }\n    org.apache.wicket.@org.apache.wicket.Let\n    subclasses initialize = instance;\n    org.apache.wicket.@org.apache.wicket.Let\n    subclasses before;\n    assert executed * This;\n    org.apache.wicket.is intentionally = ((b > not) < b) > declared;\n    org.apache.wicket.is to;\n    org.apache.wicket.overriding to = in;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.wicket.overriding to = in",
            "src_parent": "{\n    for (org.apache.wicket.Component sibling : root) {\n        if (((sibling != self) && (sibling instanceof org.apache.wicket.markup.resolver.IComponentResolver)) && (init() * (sibling instanceof org.apache.wicket.MarkupContainer))) {\n            if (!sibling.isVisible()) {\n                return true;\n            } else {\n                boolean rtn = hasInvisibleTransparentChild(((org.apache.wicket.MarkupContainer) (sibling)), self);\n                if (rtn == true) {\n                    return true;\n                }\n            }\n        }\n    }\n    org.apache.wicket.@org.apache.wicket.Let\n    subclasses initialize = instance;\n    org.apache.wicket.@org.apache.wicket.Let\n    subclasses before;\n    assert executed * This;\n    org.apache.wicket.is intentionally = ((b > not) < b) > declared;\n    org.apache.wicket.is to;\n    org.apache.wicket.overriding to = in;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "(init() * (sibling instanceof org.apache.wicket.MarkupContainer))",
            "src_parent": "((sibling != self) && (sibling instanceof org.apache.wicket.markup.resolver.IComponentResolver)) && (init() * (sibling instanceof org.apache.wicket.MarkupContainer))",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "private boolean hasInvisibleTransparentChild(final org.apache.wicket.MarkupContainer root, final org.apache.wicket.Component self) {\n    for (org.apache.wicket.Component sibling : root) {\n        if (((sibling != self) && (sibling instanceof org.apache.wicket.markup.resolver.IComponentResolver)) && (init() * (sibling instanceof org.apache.wicket.MarkupContainer))) {\n            if (!sibling.isVisible()) {\n                return true;\n            } else {\n                boolean rtn = hasInvisibleTransparentChild(((org.apache.wicket.MarkupContainer) (sibling)), self);\n                if (rtn == true) {\n                    return true;\n                }\n            }\n        }\n    }\n    org.apache.wicket.@org.apache.wicket.Let\n    subclasses initialize = instance;\n    org.apache.wicket.@org.apache.wicket.Let\n    subclasses before;\n    assert executed * This;\n    org.apache.wicket.is intentionally = ((b > not) < b) > declared;\n    org.apache.wicket.is to;\n    org.apache.wicket.overriding to = in;\n}",
            "dst_parent": "public abstract class Page extends org.apache.wicket.MarkupContainer implements org.apache.wicket.IQueueRegion , org.apache.wicket.request.component.IRequestablePage {\n    private static final int FLAG_IS_DIRTY = FLAG_RESERVED3;\n\n    private static final int FLAG_PREVENT_DIRTY = FLAG_RESERVED4;\n\n    private static final int FLAG_STATELESS_HINT = FLAG_RESERVED5;\n\n    private static final int FLAG_WAS_CREATED_BOOKMARKABLE = FLAG_RESERVED8;\n\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.Page.class);\n\n    private static final long serialVersionUID = 1L;\n\n    private int autoIndex;\n\n    private int numericId;\n\n    private transient java.util.Set<org.apache.wicket.Component> renderedComponents;\n\n    private transient java.lang.Boolean stateless = null;\n\n    private final org.apache.wicket.request.mapper.parameter.PageParameters pageParameters;\n\n    private int renderCount = 0;\n\n    protected Page() {\n        this(null, null);\n    }\n\n    protected Page(final org.apache.wicket.model.IModel<?> model) {\n        this(null, model);\n    }\n\n    protected Page(final org.apache.wicket.request.mapper.parameter.PageParameters parameters) {\n        this(parameters, null);\n    }\n\n    private Page(final org.apache.wicket.request.mapper.parameter.PageParameters parameters, org.apache.wicket.model.IModel<?> model) {\n        super(null, model);\n        if (parameters == null) {\n            pageParameters = new org.apache.wicket.request.mapper.parameter.PageParameters();\n        } else {\n            pageParameters = parameters;\n        }\n        init();\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.mapper.parameter.PageParameters getPageParameters() {\n        return pageParameters;\n    }\n\n    public final void componentRendered(final org.apache.wicket.Component component) {\n        if (getApplication().getDebugSettings().getComponentUseCheck()) {\n            if (renderedComponents == null) {\n                renderedComponents = new java.util.HashSet<org.apache.wicket.Component>();\n            }\n            if (renderedComponents.add(component) == false) {\n                throw new org.apache.wicket.markup.MarkupException(((\"The component \" + component) + \" was rendered already. You can render it only once during a render phase. Class relative path: \") + component.getClassRelativePath());\n            }\n            org.apache.wicket.Page.log.debug(\"Rendered {}\", component);\n        }\n    }\n\n    @java.lang.Override\n    public void detachModels() {\n        super.detachModels();\n    }\n\n    @java.lang.Override\n    public void internalPrepareForRender(boolean setRenderingFlag) {\n        if (!isInitialized()) {\n            internalInitialize();\n        }\n        super.internalPrepareForRender(setRenderingFlag);\n    }\n\n    public final void dirty() {\n        dirty(false);\n    }\n\n    @java.lang.Override\n    public boolean setFreezePageId(boolean freeze) {\n        boolean frozen = getFlag(org.apache.wicket.Page.FLAG_PREVENT_DIRTY);\n        setFlag(org.apache.wicket.Page.FLAG_PREVENT_DIRTY, freeze);\n        return frozen;\n    }\n\n    public void dirty(final boolean isInitialization) {\n        checkHierarchyChange(this);\n        if (getFlag(org.apache.wicket.Page.FLAG_PREVENT_DIRTY)) {\n            return;\n        }\n        final org.apache.wicket.page.IPageManager pageManager = getSession().getPageManager();\n        if ((!getFlag(org.apache.wicket.Page.FLAG_IS_DIRTY)) && ((isVersioned() && pageManager.supportsVersioning()) || isInitialization)) {\n            setFlag(org.apache.wicket.Page.FLAG_IS_DIRTY, true);\n            setNextAvailableId();\n            if (isInitialization == false) {\n                pageManager.touchPage(this);\n            }\n        }\n    }\n\n    @java.lang.Override\n    protected void onInitialize() {\n        super.onInitialize();\n        final org.apache.wicket.page.IPageManager pageManager = getSession().getPageManager();\n        pageManager.touchPage(this);\n    }\n\n    public final void endComponentRender(org.apache.wicket.Component component) {\n        if (component instanceof org.apache.wicket.MarkupContainer) {\n            checkRendering(((org.apache.wicket.MarkupContainer) (component)));\n        } else {\n            renderedComponents = null;\n        }\n    }\n\n    public final int getAutoIndex() {\n        return autoIndex++;\n    }\n\n    @java.lang.Override\n    public final java.lang.String getId() {\n        return java.lang.Integer.toString(numericId);\n    }\n\n    public final java.lang.Class<? extends org.apache.wicket.Page> getPageClass() {\n        return getClass();\n    }\n\n    @java.lang.Override\n    public final long getSizeInBytes() {\n        return org.apache.wicket.core.util.lang.WicketObjects.sizeof(this);\n    }\n\n    @java.lang.Override\n    public final boolean getStatelessHint() {\n        return getFlag(org.apache.wicket.Page.FLAG_STATELESS_HINT);\n    }\n\n    public final java.lang.String hierarchyAsString() {\n        final java.lang.StringBuilder buffer = new java.lang.StringBuilder();\n        buffer.append(\"Page \").append(getId());\n        visitChildren(new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.Component, java.lang.Void>() {\n            @java.lang.Override\n            public void component(final org.apache.wicket.Component component, final org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n                int levels = 0;\n                for (org.apache.wicket.Component current = component; current != null; current = current.getParent()) {\n                    levels++;\n                }\n                buffer.append(org.apache.wicket.util.string.StringValue.repeat(levels, \"\t\")).append(component.getPageRelativePath()).append(':').append(org.apache.wicket.util.lang.Classes.simpleName(component.getClass()));\n            }\n        });\n        return buffer.toString();\n    }\n\n    @java.lang.Override\n    public boolean isBookmarkable() {\n        return getApplication().getPageFactory().isBookmarkable(getClass());\n    }\n\n    public boolean isErrorPage() {\n        return false;\n    }\n\n    private boolean peekPageStateless() {\n        java.lang.Boolean old = stateless;\n        java.lang.Boolean res = isPageStateless();\n        stateless = old;\n        return res;\n    }\n\n    @java.lang.Override\n    public final boolean isPageStateless() {\n        if (isBookmarkable() == false) {\n            stateless = java.lang.Boolean.FALSE;\n            if (getStatelessHint()) {\n                org.apache.wicket.Page.log.warn(((\"Page '\" + this) + \"' is not stateless because it is not bookmarkable, \") + \"but the stateless hint is set to true!\");\n            }\n        }\n        if (getStatelessHint() == false) {\n            return false;\n        }\n        if (stateless == null) {\n            internalInitialize();\n            if (isStateless() == false) {\n                stateless = java.lang.Boolean.FALSE;\n            }\n        }\n        if (stateless == null) {\n            org.apache.wicket.Component statefulComponent = visitChildren(org.apache.wicket.Component.class, new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.Component, org.apache.wicket.Component>() {\n                @java.lang.Override\n                public void component(final org.apache.wicket.Component component, final org.apache.wicket.util.visit.IVisit<org.apache.wicket.Component> visit) {\n                    if (!component.isStateless()) {\n                        visit.stop(component);\n                    }\n                }\n            });\n            stateless = statefulComponent == null;\n            if ((org.apache.wicket.Page.log.isDebugEnabled() && (!stateless.booleanValue())) && getStatelessHint()) {\n                org.apache.wicket.Page.log.debug(\"Page '{}' is not stateless because of component with path '{}'.\", this, statefulComponent.getPageRelativePath());\n            }\n        }\n        return stateless;\n    }\n\n    public final void setNumericId(final int id) {\n        numericId = id;\n    }\n\n    public final org.apache.wicket.Page setStatelessHint(boolean value) {\n        if (value && (!isBookmarkable())) {\n            throw new org.apache.wicket.WicketRuntimeException(\"Can't set stateless hint to true on a page when the page is not bookmarkable, page: \" + this);\n        }\n        setFlag(org.apache.wicket.Page.FLAG_STATELESS_HINT, value);\n        return this;\n    }\n\n    public final void startComponentRender(org.apache.wicket.Component component) {\n        renderedComponents = null;\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return (((((\"[Page class = \" + getClass().getName()) + \", id = \") + getId()) + \", render count = \") + getRenderCount()) + \"]\";\n    }\n\n    private void checkRendering(final org.apache.wicket.MarkupContainer renderedContainer) {\n        final org.apache.wicket.settings.DebugSettings debugSettings = getApplication().getDebugSettings();\n        if (debugSettings.getComponentUseCheck()) {\n            final java.util.List<org.apache.wicket.Component> unrenderedComponents = new java.util.ArrayList<org.apache.wicket.Component>();\n            final java.lang.StringBuilder buffer = new java.lang.StringBuilder();\n            renderedContainer.visitChildren(new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.Component, java.lang.Void>() {\n                @java.lang.Override\n                public void component(final org.apache.wicket.Component component, final org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n                    if ((renderedComponents == null) || (!renderedComponents.contains(component))) {\n                        if ((!component.isAuto()) && component.isVisibleInHierarchy()) {\n                            unrenderedComponents.add(component);\n                            buffer.append(java.lang.Integer.toString(unrenderedComponents.size())).append(\". \").append(component).append('\\n');\n                            java.lang.String metadata = component.getMetaData(Component.CONSTRUCTED_AT_KEY);\n                            if (metadata != null) {\n                                buffer.append(metadata);\n                            }\n                            metadata = component.getMetaData(Component.ADDED_AT_KEY);\n                            if (metadata != null) {\n                                buffer.append(metadata);\n                            }\n                        } else {\n                            visit.dontGoDeeper();\n                        }\n                    }\n                }\n            });\n            if (unrenderedComponents.size() > 0) {\n                renderedComponents = null;\n                java.util.List<org.apache.wicket.Component> transparentContainerChildren = org.apache.wicket.util.lang.Generics.newArrayList();\n                java.util.Iterator<org.apache.wicket.Component> iterator = unrenderedComponents.iterator();\n                outerWhile : while (iterator.hasNext()) {\n                    org.apache.wicket.Component component = iterator.next();\n                    for (org.apache.wicket.Component transparentContainerChild : transparentContainerChildren) {\n                        org.apache.wicket.MarkupContainer parent = component.getParent();\n                        while (parent != null) {\n                            if (parent == transparentContainerChild) {\n                                iterator.remove();\n                                continue outerWhile;\n                            }\n                            parent = parent.getParent();\n                        } \n                    }\n                    if (hasInvisibleTransparentChild(component.getParent(), component)) {\n                        if (org.apache.wicket.Page.log.isDebugEnabled()) {\n                            org.apache.wicket.Page.log.debug(\"Component {} wasn't rendered but might have a transparent parent.\", component);\n                        }\n                        transparentContainerChildren.add(component);\n                        iterator.remove();\n                        continue outerWhile;\n                    }\n                } \n                if (unrenderedComponents.size() > 0) {\n                    throw new org.apache.wicket.WicketRuntimeException(\"The component(s) below failed to render. Possible reasons could be that: 1) you have added a component in code but forgot to reference it in the markup (thus the component will never be rendered), 2) if your components were added in a parent container then make sure the markup for the child container includes them in <wicket:extend>.\\n\\n\" + buffer.toString());\n                }\n            }\n        }\n        renderedComponents = null;\n    }\n\n    private void init() {\n        if (isBookmarkable() == false) {\n            setStatelessHint(false);\n        }\n        setVersioned(getApplication().getPageSettings().getVersionPagesByDefault());\n        dirty(true);\n        stateless = null;\n    }\n\n    private void setNextAvailableId() {\n        setNumericId(getSession().nextPageId());\n    }\n\n    protected void componentChanged(org.apache.wicket.Component component, org.apache.wicket.MarkupContainer parent) {\n        if (!component.isAuto()) {\n            dirty();\n        }\n    }\n\n    @java.lang.Override\n    protected final void internalOnModelChanged() {\n        visitChildren(new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.Component, java.lang.Void>() {\n            @java.lang.Override\n            public void component(final org.apache.wicket.Component component, final org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n                if (component.sameInnermostModel(Page.this)) {\n                    component.modelChanged();\n                }\n            }\n        });\n    }\n\n    @java.lang.Override\n    void internalOnAfterConfigure() {\n        super.internalOnAfterConfigure();\n        if (!isRenderAllowed()) {\n            if (org.apache.wicket.Page.log.isDebugEnabled()) {\n                org.apache.wicket.Page.log.debug(\"Page not allowed to render: \" + this);\n            }\n            throw new org.apache.wicket.authorization.UnauthorizedActionException(this, Component.RENDER);\n        }\n    }\n\n    @java.lang.Override\n    protected void onBeforeRender() {\n        renderedComponents = null;\n        stateless = null;\n        super.onBeforeRender();\n        if (getSession().isTemporary() && (!peekPageStateless())) {\n            getSession().bind();\n        }\n    }\n\n    @java.lang.Override\n    protected void onAfterRender() {\n        super.onAfterRender();\n        checkRendering(this);\n        if (getApplication().getDebugSettings().getComponentUseCheck()) {\n            visitChildren(new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.Component, java.lang.Void>() {\n                @java.lang.Override\n                public void component(final org.apache.wicket.Component component, final org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n                    component.setMetaData(Component.CONSTRUCTED_AT_KEY, null);\n                    component.setMetaData(Component.ADDED_AT_KEY, null);\n                }\n            });\n        }\n        if (!isPageStateless()) {\n            getSession().getSessionStore().getSessionId(org.apache.wicket.request.cycle.RequestCycle.get().getRequest(), true);\n            getSession().getPageManager().touchPage(this);\n        }\n        if (getApplication().getDebugSettings().isOutputMarkupContainerClassName()) {\n            java.lang.String className = org.apache.wicket.util.lang.Classes.name(getClass());\n            getResponse().write(\"<!-- Page Class \");\n            getResponse().write(className);\n            getResponse().write(\" END -->\\n\");\n        }\n    }\n\n    @java.lang.Override\n    protected void onDetach() {\n        if (org.apache.wicket.Page.log.isDebugEnabled()) {\n            org.apache.wicket.Page.log.debug(((\"ending request for page \" + this) + \", request \") + getRequest());\n        }\n        setFlag(org.apache.wicket.Page.FLAG_IS_DIRTY, false);\n        super.onDetach();\n    }\n\n    @java.lang.Override\n    protected void onRender() {\n        org.apache.wicket.markup.MarkupStream markupStream = new org.apache.wicket.markup.MarkupStream(getMarkup());\n        renderAll(markupStream, null);\n    }\n\n    final void componentAdded(final org.apache.wicket.Component component) {\n        if (!component.isAuto()) {\n            dirty();\n        }\n    }\n\n    final void componentModelChanging(final org.apache.wicket.Component component) {\n        dirty();\n    }\n\n    final void componentRemoved(final org.apache.wicket.Component component) {\n        if (!component.isAuto()) {\n            dirty();\n        }\n    }\n\n    final void componentStateChanging(final org.apache.wicket.Component component) {\n        if (!component.isAuto()) {\n            dirty();\n        }\n    }\n\n    void setPageStateless(java.lang.Boolean stateless) {\n        this.stateless = stateless;\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.markup.MarkupType getMarkupType() {\n        throw new java.lang.UnsupportedOperationException(\"Page does not support markup. This error can happen if you have extended Page directly, instead extend WebPage\");\n    }\n\n    public org.apache.wicket.PageReference getPageReference() {\n        setStatelessHint(false);\n        getSession().getPageManager().touchPage(this);\n        return new org.apache.wicket.PageReference(numericId);\n    }\n\n    @java.lang.Override\n    public int getPageId() {\n        return numericId;\n    }\n\n    @java.lang.Override\n    public int getRenderCount() {\n        return renderCount;\n    }\n\n    public final void setWasCreatedBookmarkable(boolean wasCreatedBookmarkable) {\n        setFlag(org.apache.wicket.Page.FLAG_WAS_CREATED_BOOKMARKABLE, wasCreatedBookmarkable);\n    }\n\n    @java.lang.Override\n    public final boolean wasCreatedBookmarkable() {\n        return getFlag(org.apache.wicket.Page.FLAG_WAS_CREATED_BOOKMARKABLE);\n    }\n\n    @java.lang.Override\n    public void renderPage() {\n        final boolean frozen = setFreezePageId(true);\n        try {\n            ++renderCount;\n            render();\n        } finally {\n            setFreezePageId(frozen);\n        }\n    }\n\n    public final boolean wasRendered(org.apache.wicket.Component component) {\n        return (renderedComponents != null) && renderedComponents.contains(component);\n    }\n\n    private boolean hasInvisibleTransparentChild(final org.apache.wicket.MarkupContainer root, final org.apache.wicket.Component self) {\n        for (org.apache.wicket.Component sibling : root) {\n            if (((sibling != self) && (sibling instanceof org.apache.wicket.markup.resolver.IComponentResolver)) && (init() * (sibling instanceof org.apache.wicket.MarkupContainer))) {\n                if (!sibling.isVisible()) {\n                    return true;\n                } else {\n                    boolean rtn = hasInvisibleTransparentChild(((org.apache.wicket.MarkupContainer) (sibling)), self);\n                    if (rtn == true) {\n                        return true;\n                    }\n                }\n            }\n        }\n        org.apache.wicket.@org.apache.wicket.Let\n        subclasses initialize = instance;\n        org.apache.wicket.@org.apache.wicket.Let\n        subclasses before;\n        assert executed * This;\n        org.apache.wicket.is intentionally = ((b > not) < b) > declared;\n        org.apache.wicket.is to;\n        org.apache.wicket.overriding to = in;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "MOV",
            "src": "private boolean hasInvisibleTransparentChild(final org.apache.wicket.MarkupContainer root, final org.apache.wicket.Component self) {\n    for (org.apache.wicket.Component sibling : root) {\n        if (((sibling != self) && (sibling instanceof org.apache.wicket.markup.resolver.IComponentResolver)) && (sibling instanceof org.apache.wicket.MarkupContainer)) {\n            if (!sibling.isVisible()) {\n                return true;\n            } else {\n                boolean rtn = hasInvisibleTransparentChild(((org.apache.wicket.MarkupContainer) (sibling)), self);\n                if (rtn == true) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
            "src_parent": "public abstract class Page extends org.apache.wicket.MarkupContainer implements org.apache.wicket.IQueueRegion , org.apache.wicket.request.component.IRequestablePage {\n    private static final int FLAG_IS_DIRTY = FLAG_RESERVED3;\n\n    private static final int FLAG_PREVENT_DIRTY = FLAG_RESERVED4;\n\n    private static final int FLAG_STATELESS_HINT = FLAG_RESERVED5;\n\n    private static final int FLAG_WAS_CREATED_BOOKMARKABLE = FLAG_RESERVED8;\n\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.Page.class);\n\n    private static final long serialVersionUID = 1L;\n\n    private int autoIndex;\n\n    private int numericId;\n\n    private transient java.util.Set<org.apache.wicket.Component> renderedComponents;\n\n    private transient java.lang.Boolean stateless = null;\n\n    private final org.apache.wicket.request.mapper.parameter.PageParameters pageParameters;\n\n    private int renderCount = 0;\n\n    protected Page() {\n        this(null, null);\n    }\n\n    protected Page(final org.apache.wicket.model.IModel<?> model) {\n        this(null, model);\n    }\n\n    protected Page(final org.apache.wicket.request.mapper.parameter.PageParameters parameters) {\n        this(parameters, null);\n    }\n\n    private Page(final org.apache.wicket.request.mapper.parameter.PageParameters parameters, org.apache.wicket.model.IModel<?> model) {\n        super(null, model);\n        if (parameters == null) {\n            pageParameters = new org.apache.wicket.request.mapper.parameter.PageParameters();\n        } else {\n            pageParameters = parameters;\n        }\n        init();\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.mapper.parameter.PageParameters getPageParameters() {\n        return pageParameters;\n    }\n\n    public final void componentRendered(final org.apache.wicket.Component component) {\n        if (getApplication().getDebugSettings().getComponentUseCheck()) {\n            if (renderedComponents == null) {\n                renderedComponents = new java.util.HashSet<org.apache.wicket.Component>();\n            }\n            if (renderedComponents.add(component) == false) {\n                throw new org.apache.wicket.markup.MarkupException(((\"The component \" + component) + \" was rendered already. You can render it only once during a render phase. Class relative path: \") + component.getClassRelativePath());\n            }\n            org.apache.wicket.Page.log.debug(\"Rendered {}\", component);\n        }\n    }\n\n    @java.lang.Override\n    public void detachModels() {\n        super.detachModels();\n    }\n\n    @java.lang.Override\n    public void internalPrepareForRender(boolean setRenderingFlag) {\n        if (!isInitialized()) {\n            internalInitialize();\n        }\n        super.internalPrepareForRender(setRenderingFlag);\n    }\n\n    public final void dirty() {\n        dirty(false);\n    }\n\n    @java.lang.Override\n    public boolean setFreezePageId(boolean freeze) {\n        boolean frozen = getFlag(org.apache.wicket.Page.FLAG_PREVENT_DIRTY);\n        setFlag(org.apache.wicket.Page.FLAG_PREVENT_DIRTY, freeze);\n        return frozen;\n    }\n\n    public void dirty(final boolean isInitialization) {\n        checkHierarchyChange(this);\n        if (getFlag(org.apache.wicket.Page.FLAG_PREVENT_DIRTY)) {\n            return;\n        }\n        final org.apache.wicket.page.IPageManager pageManager = getSession().getPageManager();\n        if ((!getFlag(org.apache.wicket.Page.FLAG_IS_DIRTY)) && ((isVersioned() && pageManager.supportsVersioning()) || isInitialization)) {\n            setFlag(org.apache.wicket.Page.FLAG_IS_DIRTY, true);\n            setNextAvailableId();\n            if (isInitialization == false) {\n                pageManager.touchPage(this);\n            }\n        }\n    }\n\n    @java.lang.Override\n    protected void onInitialize() {\n        super.onInitialize();\n        final org.apache.wicket.page.IPageManager pageManager = getSession().getPageManager();\n        pageManager.touchPage(this);\n    }\n\n    public final void endComponentRender(org.apache.wicket.Component component) {\n        if (component instanceof org.apache.wicket.MarkupContainer) {\n            checkRendering(((org.apache.wicket.MarkupContainer) (component)));\n        } else {\n            renderedComponents = null;\n        }\n    }\n\n    public final int getAutoIndex() {\n        return autoIndex++;\n    }\n\n    @java.lang.Override\n    public final java.lang.String getId() {\n        return java.lang.Integer.toString(numericId);\n    }\n\n    public final java.lang.Class<? extends org.apache.wicket.Page> getPageClass() {\n        return getClass();\n    }\n\n    @java.lang.Override\n    public final long getSizeInBytes() {\n        return org.apache.wicket.core.util.lang.WicketObjects.sizeof(this);\n    }\n\n    @java.lang.Override\n    public final boolean getStatelessHint() {\n        return getFlag(org.apache.wicket.Page.FLAG_STATELESS_HINT);\n    }\n\n    public final java.lang.String hierarchyAsString() {\n        final java.lang.StringBuilder buffer = new java.lang.StringBuilder();\n        buffer.append(\"Page \").append(getId());\n        visitChildren(new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.Component, java.lang.Void>() {\n            @java.lang.Override\n            public void component(final org.apache.wicket.Component component, final org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n                int levels = 0;\n                for (org.apache.wicket.Component current = component; current != null; current = current.getParent()) {\n                    levels++;\n                }\n                buffer.append(org.apache.wicket.util.string.StringValue.repeat(levels, \"\t\")).append(component.getPageRelativePath()).append(':').append(org.apache.wicket.util.lang.Classes.simpleName(component.getClass()));\n            }\n        });\n        return buffer.toString();\n    }\n\n    @java.lang.Override\n    public boolean isBookmarkable() {\n        return getApplication().getPageFactory().isBookmarkable(getClass());\n    }\n\n    public boolean isErrorPage() {\n        return false;\n    }\n\n    private boolean peekPageStateless() {\n        java.lang.Boolean old = stateless;\n        java.lang.Boolean res = isPageStateless();\n        stateless = old;\n        return res;\n    }\n\n    @java.lang.Override\n    public final boolean isPageStateless() {\n        if (isBookmarkable() == false) {\n            stateless = java.lang.Boolean.FALSE;\n            if (getStatelessHint()) {\n                org.apache.wicket.Page.log.warn(((\"Page '\" + this) + \"' is not stateless because it is not bookmarkable, \") + \"but the stateless hint is set to true!\");\n            }\n        }\n        if (getStatelessHint() == false) {\n            return false;\n        }\n        if (stateless == null) {\n            internalInitialize();\n            if (isStateless() == false) {\n                stateless = java.lang.Boolean.FALSE;\n            }\n        }\n        if (stateless == null) {\n            org.apache.wicket.Component statefulComponent = visitChildren(org.apache.wicket.Component.class, new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.Component, org.apache.wicket.Component>() {\n                @java.lang.Override\n                public void component(final org.apache.wicket.Component component, final org.apache.wicket.util.visit.IVisit<org.apache.wicket.Component> visit) {\n                    if (!component.isStateless()) {\n                        visit.stop(component);\n                    }\n                }\n            });\n            stateless = statefulComponent == null;\n            if ((org.apache.wicket.Page.log.isDebugEnabled() && (!stateless.booleanValue())) && getStatelessHint()) {\n                org.apache.wicket.Page.log.debug(\"Page '{}' is not stateless because of component with path '{}'.\", this, statefulComponent.getPageRelativePath());\n            }\n        }\n        return stateless;\n    }\n\n    public final void setNumericId(final int id) {\n        numericId = id;\n    }\n\n    public final org.apache.wicket.Page setStatelessHint(boolean value) {\n        if (value && (!isBookmarkable())) {\n            throw new org.apache.wicket.WicketRuntimeException(\"Can't set stateless hint to true on a page when the page is not bookmarkable, page: \" + this);\n        }\n        setFlag(org.apache.wicket.Page.FLAG_STATELESS_HINT, value);\n        return this;\n    }\n\n    public final void startComponentRender(org.apache.wicket.Component component) {\n        renderedComponents = null;\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return (((((\"[Page class = \" + getClass().getName()) + \", id = \") + getId()) + \", render count = \") + getRenderCount()) + \"]\";\n    }\n\n    private void checkRendering(final org.apache.wicket.MarkupContainer renderedContainer) {\n        final org.apache.wicket.settings.DebugSettings debugSettings = getApplication().getDebugSettings();\n        if (debugSettings.getComponentUseCheck()) {\n            final java.util.List<org.apache.wicket.Component> unrenderedComponents = new java.util.ArrayList<org.apache.wicket.Component>();\n            final java.lang.StringBuilder buffer = new java.lang.StringBuilder();\n            renderedContainer.visitChildren(new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.Component, java.lang.Void>() {\n                @java.lang.Override\n                public void component(final org.apache.wicket.Component component, final org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n                    if ((renderedComponents == null) || (!renderedComponents.contains(component))) {\n                        if ((!component.isAuto()) && component.isVisibleInHierarchy()) {\n                            unrenderedComponents.add(component);\n                            buffer.append(java.lang.Integer.toString(unrenderedComponents.size())).append(\". \").append(component).append('\\n');\n                            java.lang.String metadata = component.getMetaData(Component.CONSTRUCTED_AT_KEY);\n                            if (metadata != null) {\n                                buffer.append(metadata);\n                            }\n                            metadata = component.getMetaData(Component.ADDED_AT_KEY);\n                            if (metadata != null) {\n                                buffer.append(metadata);\n                            }\n                        } else {\n                            visit.dontGoDeeper();\n                        }\n                    }\n                }\n            });\n            if (unrenderedComponents.size() > 0) {\n                renderedComponents = null;\n                java.util.List<org.apache.wicket.Component> transparentContainerChildren = org.apache.wicket.util.lang.Generics.newArrayList();\n                java.util.Iterator<org.apache.wicket.Component> iterator = unrenderedComponents.iterator();\n                outerWhile : while (iterator.hasNext()) {\n                    org.apache.wicket.Component component = iterator.next();\n                    for (org.apache.wicket.Component transparentContainerChild : transparentContainerChildren) {\n                        org.apache.wicket.MarkupContainer parent = component.getParent();\n                        while (parent != null) {\n                            if (parent == transparentContainerChild) {\n                                iterator.remove();\n                                continue outerWhile;\n                            }\n                            parent = parent.getParent();\n                        } \n                    }\n                    if (hasInvisibleTransparentChild(component.getParent(), component)) {\n                        if (org.apache.wicket.Page.log.isDebugEnabled()) {\n                            org.apache.wicket.Page.log.debug(\"Component {} wasn't rendered but might have a transparent parent.\", component);\n                        }\n                        transparentContainerChildren.add(component);\n                        iterator.remove();\n                        continue outerWhile;\n                    }\n                } \n                if (unrenderedComponents.size() > 0) {\n                    throw new org.apache.wicket.WicketRuntimeException(\"The component(s) below failed to render. Possible reasons could be that: 1) you have added a component in code but forgot to reference it in the markup (thus the component will never be rendered), 2) if your components were added in a parent container then make sure the markup for the child container includes them in <wicket:extend>.\\n\\n\" + buffer.toString());\n                }\n            }\n        }\n        renderedComponents = null;\n    }\n\n    private boolean hasInvisibleTransparentChild(final org.apache.wicket.MarkupContainer root, final org.apache.wicket.Component self) {\n        for (org.apache.wicket.Component sibling : root) {\n            if (((sibling != self) && (sibling instanceof org.apache.wicket.markup.resolver.IComponentResolver)) && (sibling instanceof org.apache.wicket.MarkupContainer)) {\n                if (!sibling.isVisible()) {\n                    return true;\n                } else {\n                    boolean rtn = hasInvisibleTransparentChild(((org.apache.wicket.MarkupContainer) (sibling)), self);\n                    if (rtn == true) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private void init() {\n        if (isBookmarkable() == false) {\n            setStatelessHint(false);\n        }\n        setVersioned(getApplication().getPageSettings().getVersionPagesByDefault());\n        dirty(true);\n        stateless = null;\n    }\n\n    private void setNextAvailableId() {\n        setNumericId(getSession().nextPageId());\n    }\n\n    protected void componentChanged(org.apache.wicket.Component component, org.apache.wicket.MarkupContainer parent) {\n        if (!component.isAuto()) {\n            dirty();\n        }\n    }\n\n    @java.lang.Override\n    protected final void internalOnModelChanged() {\n        visitChildren(new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.Component, java.lang.Void>() {\n            @java.lang.Override\n            public void component(final org.apache.wicket.Component component, final org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n                if (component.sameInnermostModel(Page.this)) {\n                    component.modelChanged();\n                }\n            }\n        });\n    }\n\n    @java.lang.Override\n    void internalOnAfterConfigure() {\n        super.internalOnAfterConfigure();\n        if (!isRenderAllowed()) {\n            if (org.apache.wicket.Page.log.isDebugEnabled()) {\n                org.apache.wicket.Page.log.debug(\"Page not allowed to render: \" + this);\n            }\n            throw new org.apache.wicket.authorization.UnauthorizedActionException(this, Component.RENDER);\n        }\n    }\n\n    @java.lang.Override\n    protected void onBeforeRender() {\n        renderedComponents = null;\n        stateless = null;\n        super.onBeforeRender();\n        if (getSession().isTemporary() && (!peekPageStateless())) {\n            getSession().bind();\n        }\n    }\n\n    @java.lang.Override\n    protected void onAfterRender() {\n        super.onAfterRender();\n        checkRendering(this);\n        if (getApplication().getDebugSettings().getComponentUseCheck()) {\n            visitChildren(new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.Component, java.lang.Void>() {\n                @java.lang.Override\n                public void component(final org.apache.wicket.Component component, final org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n                    component.setMetaData(Component.CONSTRUCTED_AT_KEY, null);\n                    component.setMetaData(Component.ADDED_AT_KEY, null);\n                }\n            });\n        }\n        if (!isPageStateless()) {\n            getSession().getSessionStore().getSessionId(org.apache.wicket.request.cycle.RequestCycle.get().getRequest(), true);\n            getSession().getPageManager().touchPage(this);\n        }\n        if (getApplication().getDebugSettings().isOutputMarkupContainerClassName()) {\n            java.lang.String className = org.apache.wicket.util.lang.Classes.name(getClass());\n            getResponse().write(\"<!-- Page Class \");\n            getResponse().write(className);\n            getResponse().write(\" END -->\\n\");\n        }\n    }\n\n    @java.lang.Override\n    protected void onDetach() {\n        if (org.apache.wicket.Page.log.isDebugEnabled()) {\n            org.apache.wicket.Page.log.debug(((\"ending request for page \" + this) + \", request \") + getRequest());\n        }\n        setFlag(org.apache.wicket.Page.FLAG_IS_DIRTY, false);\n        super.onDetach();\n    }\n\n    @java.lang.Override\n    protected void onRender() {\n        org.apache.wicket.markup.MarkupStream markupStream = new org.apache.wicket.markup.MarkupStream(getMarkup());\n        renderAll(markupStream, null);\n    }\n\n    final void componentAdded(final org.apache.wicket.Component component) {\n        if (!component.isAuto()) {\n            dirty();\n        }\n    }\n\n    final void componentModelChanging(final org.apache.wicket.Component component) {\n        dirty();\n    }\n\n    final void componentRemoved(final org.apache.wicket.Component component) {\n        if (!component.isAuto()) {\n            dirty();\n        }\n    }\n\n    final void componentStateChanging(final org.apache.wicket.Component component) {\n        if (!component.isAuto()) {\n            dirty();\n        }\n    }\n\n    void setPageStateless(java.lang.Boolean stateless) {\n        this.stateless = stateless;\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.markup.MarkupType getMarkupType() {\n        throw new java.lang.UnsupportedOperationException(\"Page does not support markup. This error can happen if you have extended Page directly, instead extend WebPage\");\n    }\n\n    public org.apache.wicket.PageReference getPageReference() {\n        setStatelessHint(false);\n        getSession().getPageManager().touchPage(this);\n        return new org.apache.wicket.PageReference(numericId);\n    }\n\n    @java.lang.Override\n    public int getPageId() {\n        return numericId;\n    }\n\n    @java.lang.Override\n    public int getRenderCount() {\n        return renderCount;\n    }\n\n    public final void setWasCreatedBookmarkable(boolean wasCreatedBookmarkable) {\n        setFlag(org.apache.wicket.Page.FLAG_WAS_CREATED_BOOKMARKABLE, wasCreatedBookmarkable);\n    }\n\n    @java.lang.Override\n    public final boolean wasCreatedBookmarkable() {\n        return getFlag(org.apache.wicket.Page.FLAG_WAS_CREATED_BOOKMARKABLE);\n    }\n\n    @java.lang.Override\n    public void renderPage() {\n        final boolean frozen = setFreezePageId(true);\n        try {\n            ++renderCount;\n            render();\n        } finally {\n            setFreezePageId(frozen);\n        }\n    }\n\n    public final boolean wasRendered(org.apache.wicket.Component component) {\n        return (renderedComponents != null) && renderedComponents.contains(component);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(sibling instanceof org.apache.wicket.MarkupContainer)",
            "dst_parent": "(init() * (sibling instanceof org.apache.wicket.MarkupContainer))",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(sibling instanceof org.apache.wicket.MarkupContainer)",
            "src_parent": "((sibling != self) && (sibling instanceof org.apache.wicket.markup.resolver.IComponentResolver)) && (sibling instanceof org.apache.wicket.MarkupContainer)",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        }
      ],
      "file_name": "Page"
    }
  ],
  "id": "wicket_f1af9e03"
}