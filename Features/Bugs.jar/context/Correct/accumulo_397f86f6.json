{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "public static final java.lang.String ENCODING = \"encoding\";",
            "dst_parent": "public class RegExFilter extends org.apache.accumulo.core.iterators.Filter {\n    @java.lang.Override\n    public org.apache.accumulo.core.iterators.SortedKeyValueIterator<org.apache.accumulo.core.data.Key, org.apache.accumulo.core.data.Value> deepCopy(org.apache.accumulo.core.iterators.IteratorEnvironment env) {\n        org.apache.accumulo.core.iterators.user.RegExFilter result = new org.apache.accumulo.core.iterators.user.RegExFilter();\n        result.setSource(getSource().deepCopy(env));\n        result.rowMatcher = copyMatcher(rowMatcher);\n        result.colfMatcher = copyMatcher(colfMatcher);\n        result.colqMatcher = copyMatcher(colqMatcher);\n        result.valueMatcher = copyMatcher(valueMatcher);\n        result.orFields = orFields;\n        return result;\n    }\n\n    public static final java.lang.String ROW_REGEX = \"rowRegex\";\n\n    public static final java.lang.String COLF_REGEX = \"colfRegex\";\n\n    public static final java.lang.String COLQ_REGEX = \"colqRegex\";\n\n    public static final java.lang.String VALUE_REGEX = \"valueRegex\";\n\n    public static final java.lang.String OR_FIELDS = \"orFields\";\n\n    public static final java.lang.String ENCODING = \"encoding\";\n\n    public static final java.lang.String ENCODING_DEFAULT = \"UTF-8\";\n\n    private java.util.regex.Matcher rowMatcher;\n\n    private java.util.regex.Matcher colfMatcher;\n\n    private java.util.regex.Matcher colqMatcher;\n\n    private java.util.regex.Matcher valueMatcher;\n\n    private boolean orFields = false;\n\n    private java.lang.String encoding = org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING_DEFAULT;\n\n    private java.util.regex.Matcher copyMatcher(java.util.regex.Matcher m) {\n        if (m == null) {\n            return m;\n        } else {\n            return m.pattern().matcher(\"\");\n        }\n    }\n\n    private boolean matches(java.util.regex.Matcher matcher, org.apache.accumulo.core.data.ByteSequence bs) {\n        if (matcher != null) {\n            try {\n                matcher.reset(new java.lang.String(bs.getBackingArray(), encoding));\n                return matcher.matches();\n            } catch (java.io.UnsupportedEncodingException e) {\n                e.printStackTrace();\n            }\n        }\n        return !orFields;\n    }\n\n    private boolean matches(java.util.regex.Matcher matcher, byte[] data, int offset, int len) {\n        if (matcher != null) {\n            try {\n                matcher.reset(new java.lang.String(data, offset, len, encoding));\n                return matcher.matches();\n            } catch (java.io.UnsupportedEncodingException e) {\n                e.printStackTrace();\n            }\n        }\n        return !orFields;\n    }\n\n    @java.lang.Override\n    public boolean accept(org.apache.accumulo.core.data.Key key, org.apache.accumulo.core.data.Value value) {\n        if (orFields) {\n            return ((matches(rowMatcher, key.getRowData()) || matches(colfMatcher, key.getColumnFamilyData())) || matches(colqMatcher, key.getColumnQualifierData())) || matches(valueMatcher, value.get(), 0, value.get().length);\n        }\n        return ((matches(rowMatcher, key.getRowData()) && matches(colfMatcher, key.getColumnFamilyData())) && matches(colqMatcher, key.getColumnQualifierData())) && matches(valueMatcher, value.get(), 0, value.get().length);\n    }\n\n    @java.lang.Override\n    public void init(org.apache.accumulo.core.iterators.SortedKeyValueIterator<org.apache.accumulo.core.data.Key, org.apache.accumulo.core.data.Value> source, java.util.Map<java.lang.String, java.lang.String> options, org.apache.accumulo.core.iterators.IteratorEnvironment env) throws java.io.IOException {\n        super.init(source, options, env);\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)) {\n            rowMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)).matcher(\"\");\n        } else {\n            rowMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)) {\n            colfMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)).matcher(\"\");\n        } else {\n            colfMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)) {\n            colqMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)).matcher(\"\");\n        } else {\n            colqMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)) {\n            valueMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)).matcher(\"\");\n        } else {\n            valueMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS)) {\n            orFields = java.lang.Boolean.parseBoolean(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS));\n        } else {\n            orFields = false;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING)) {\n            encoding = options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING);\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.accumulo.core.iterators.user.IteratorOptions describeOptions() {\n        org.apache.accumulo.core.iterators.user.IteratorOptions io = super.describeOptions();\n        io.setName(\"regex\");\n        io.setDescription(\"The RegExFilter/Iterator allows you to filter for key/value pairs based on regular expressions\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX, \"regular expression on row\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX, \"regular expression on column family\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX, \"regular expression on column qualifier\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX, \"regular expression on value\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS, \"use OR instread of AND when multiple regexes given\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING, (\"character encoding of byte array value (default is \" + org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING_DEFAULT) + \")\");\n        return io;\n    }\n\n    @java.lang.Override\n    public boolean validateOptions(java.util.Map<java.lang.String, java.lang.String> options) {\n        super.validateOptions(options);\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING)) {\n            try {\n                this.encoding = options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING);\n                @java.lang.SuppressWarnings(\"unused\")\n                java.lang.String test = new java.lang.String(\"test\".getBytes(), encoding);\n            } catch (java.io.UnsupportedEncodingException e) {\n                e.printStackTrace();\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void setRegexs(org.apache.accumulo.core.client.IteratorSetting si, java.lang.String rowTerm, java.lang.String cfTerm, java.lang.String cqTerm, java.lang.String valueTerm, boolean orFields) {\n        if (rowTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX, rowTerm);\n        }\n        if (cfTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX, cfTerm);\n        }\n        if (cqTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX, cqTerm);\n        }\n        if (valueTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX, valueTerm);\n        }\n        if (orFields) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS, \"true\");\n        }\n    }\n\n    public static void setEncoding(org.apache.accumulo.core.client.IteratorSetting si, java.lang.String encoding) {\n        if (!encoding.isEmpty()) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING, encoding);\n        }\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Field",
            "operator": "UPD",
            "src": "private org.apache.accumulo.core.util.ByteArrayBackedCharSequence babcs = new org.apache.accumulo.core.util.ByteArrayBackedCharSequence();",
            "src_parent": "public class RegExFilter extends org.apache.accumulo.core.iterators.Filter {\n    @java.lang.Override\n    public org.apache.accumulo.core.iterators.SortedKeyValueIterator<org.apache.accumulo.core.data.Key, org.apache.accumulo.core.data.Value> deepCopy(org.apache.accumulo.core.iterators.IteratorEnvironment env) {\n        org.apache.accumulo.core.iterators.user.RegExFilter result = new org.apache.accumulo.core.iterators.user.RegExFilter();\n        result.setSource(getSource().deepCopy(env));\n        result.rowMatcher = copyMatcher(rowMatcher);\n        result.colfMatcher = copyMatcher(colfMatcher);\n        result.colqMatcher = copyMatcher(colqMatcher);\n        result.valueMatcher = copyMatcher(valueMatcher);\n        result.orFields = orFields;\n        return result;\n    }\n\n    public static final java.lang.String ROW_REGEX = \"rowRegex\";\n\n    public static final java.lang.String COLF_REGEX = \"colfRegex\";\n\n    public static final java.lang.String COLQ_REGEX = \"colqRegex\";\n\n    public static final java.lang.String VALUE_REGEX = \"valueRegex\";\n\n    public static final java.lang.String OR_FIELDS = \"orFields\";\n\n    private java.util.regex.Matcher rowMatcher;\n\n    private java.util.regex.Matcher colfMatcher;\n\n    private java.util.regex.Matcher colqMatcher;\n\n    private java.util.regex.Matcher valueMatcher;\n\n    private boolean orFields = false;\n\n    private org.apache.accumulo.core.util.ByteArrayBackedCharSequence babcs = new org.apache.accumulo.core.util.ByteArrayBackedCharSequence();\n\n    private java.util.regex.Matcher copyMatcher(java.util.regex.Matcher m) {\n        if (m == null) {\n            return m;\n        } else {\n            return m.pattern().matcher(\"\");\n        }\n    }\n\n    private boolean matches(java.util.regex.Matcher matcher, org.apache.accumulo.core.data.ByteSequence bs) {\n        if (matcher != null) {\n            babcs.set(bs);\n            matcher.reset(babcs);\n            return matcher.matches();\n        }\n        return !orFields;\n    }\n\n    private boolean matches(java.util.regex.Matcher matcher, byte[] data, int offset, int len) {\n        if (matcher != null) {\n            babcs.set(data, offset, len);\n            matcher.reset(babcs);\n            return matcher.matches();\n        }\n        return !orFields;\n    }\n\n    @java.lang.Override\n    public boolean accept(org.apache.accumulo.core.data.Key key, org.apache.accumulo.core.data.Value value) {\n        if (orFields) {\n            return ((matches(rowMatcher, key.getRowData()) || matches(colfMatcher, key.getColumnFamilyData())) || matches(colqMatcher, key.getColumnQualifierData())) || matches(valueMatcher, value.get(), 0, value.get().length);\n        }\n        return ((matches(rowMatcher, key.getRowData()) && matches(colfMatcher, key.getColumnFamilyData())) && matches(colqMatcher, key.getColumnQualifierData())) && matches(valueMatcher, value.get(), 0, value.get().length);\n    }\n\n    @java.lang.Override\n    public void init(org.apache.accumulo.core.iterators.SortedKeyValueIterator<org.apache.accumulo.core.data.Key, org.apache.accumulo.core.data.Value> source, java.util.Map<java.lang.String, java.lang.String> options, org.apache.accumulo.core.iterators.IteratorEnvironment env) throws java.io.IOException {\n        super.init(source, options, env);\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)) {\n            rowMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)).matcher(\"\");\n        } else {\n            rowMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)) {\n            colfMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)).matcher(\"\");\n        } else {\n            colfMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)) {\n            colqMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)).matcher(\"\");\n        } else {\n            colqMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)) {\n            valueMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)).matcher(\"\");\n        } else {\n            valueMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS)) {\n            orFields = java.lang.Boolean.parseBoolean(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS));\n        } else {\n            orFields = false;\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.accumulo.core.iterators.user.IteratorOptions describeOptions() {\n        org.apache.accumulo.core.iterators.user.IteratorOptions io = super.describeOptions();\n        io.setName(\"regex\");\n        io.setDescription(\"The RegExFilter/Iterator allows you to filter for key/value pairs based on regular expressions\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX, \"regular expression on row\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX, \"regular expression on column family\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX, \"regular expression on column qualifier\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX, \"regular expression on value\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS, \"use OR instread of AND when multiple regexes given\");\n        return io;\n    }\n\n    @java.lang.Override\n    public boolean validateOptions(java.util.Map<java.lang.String, java.lang.String> options) {\n        super.validateOptions(options);\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)).matcher(\"\");\n        }\n        return true;\n    }\n\n    public static void setRegexs(org.apache.accumulo.core.client.IteratorSetting si, java.lang.String rowTerm, java.lang.String cfTerm, java.lang.String cqTerm, java.lang.String valueTerm, boolean orFields) {\n        if (rowTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX, rowTerm);\n        }\n        if (cfTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX, cfTerm);\n        }\n        if (cqTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX, cqTerm);\n        }\n        if (valueTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX, valueTerm);\n        }\n        if (orFields) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS, \"true\");\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Field",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String",
            "dst_parent": "public static final java.lang.String ENCODING = \"encoding\";",
            "dst_parent_type": "Field",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "org.apache.accumulo.core.util.ByteArrayBackedCharSequence",
            "src_parent": "private org.apache.accumulo.core.util.ByteArrayBackedCharSequence babcs = new org.apache.accumulo.core.util.ByteArrayBackedCharSequence();",
            "src_parent_type": "Field",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "e",
            "dst_parent": "e.printStackTrace()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "matcher",
            "src_parent": "matcher.reset(babcs)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "babcs.set(bs)",
            "src_parent": "{\n    babcs.set(bs);\n    matcher.reset(babcs);\n    return matcher.matches();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "matcher.reset(babcs)",
            "src_parent": "{\n    babcs.set(bs);\n    matcher.reset(babcs);\n    return matcher.matches();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "babcs.set(data, offset, len)",
            "src_parent": "{\n    babcs.set(data, offset, len);\n    matcher.reset(babcs);\n    return matcher.matches();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "matcher.reset(babcs)",
            "src_parent": "{\n    babcs.set(data, offset, len);\n    matcher.reset(babcs);\n    return matcher.matches();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public static final java.lang.String ENCODING_DEFAULT = \"UTF-8\";",
            "src_parent": "public class RegExFilter extends org.apache.accumulo.core.iterators.Filter {\n    @java.lang.Override\n    public org.apache.accumulo.core.iterators.SortedKeyValueIterator<org.apache.accumulo.core.data.Key, org.apache.accumulo.core.data.Value> deepCopy(org.apache.accumulo.core.iterators.IteratorEnvironment env) {\n        org.apache.accumulo.core.iterators.user.RegExFilter result = new org.apache.accumulo.core.iterators.user.RegExFilter();\n        result.setSource(getSource().deepCopy(env));\n        result.rowMatcher = copyMatcher(rowMatcher);\n        result.colfMatcher = copyMatcher(colfMatcher);\n        result.colqMatcher = copyMatcher(colqMatcher);\n        result.valueMatcher = copyMatcher(valueMatcher);\n        result.orFields = orFields;\n        return result;\n    }\n\n    public static final java.lang.String ROW_REGEX = \"rowRegex\";\n\n    public static final java.lang.String COLF_REGEX = \"colfRegex\";\n\n    public static final java.lang.String COLQ_REGEX = \"colqRegex\";\n\n    public static final java.lang.String VALUE_REGEX = \"valueRegex\";\n\n    public static final java.lang.String OR_FIELDS = \"orFields\";\n\n    public static final java.lang.String ENCODING = \"encoding\";\n\n    public static final java.lang.String ENCODING_DEFAULT = \"UTF-8\";\n\n    private java.util.regex.Matcher rowMatcher;\n\n    private java.util.regex.Matcher colfMatcher;\n\n    private java.util.regex.Matcher colqMatcher;\n\n    private java.util.regex.Matcher valueMatcher;\n\n    private boolean orFields = false;\n\n    private java.lang.String encoding = org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING_DEFAULT;\n\n    private java.util.regex.Matcher copyMatcher(java.util.regex.Matcher m) {\n        if (m == null) {\n            return m;\n        } else {\n            return m.pattern().matcher(\"\");\n        }\n    }\n\n    private boolean matches(java.util.regex.Matcher matcher, org.apache.accumulo.core.data.ByteSequence bs) {\n        if (matcher != null) {\n            try {\n                matcher.reset(new java.lang.String(bs.getBackingArray(), encoding));\n                return matcher.matches();\n            } catch (java.io.UnsupportedEncodingException e) {\n                e.printStackTrace();\n            }\n        }\n        return !orFields;\n    }\n\n    private boolean matches(java.util.regex.Matcher matcher, byte[] data, int offset, int len) {\n        if (matcher != null) {\n            try {\n                matcher.reset(new java.lang.String(data, offset, len, encoding));\n                return matcher.matches();\n            } catch (java.io.UnsupportedEncodingException e) {\n                e.printStackTrace();\n            }\n        }\n        return !orFields;\n    }\n\n    @java.lang.Override\n    public boolean accept(org.apache.accumulo.core.data.Key key, org.apache.accumulo.core.data.Value value) {\n        if (orFields) {\n            return ((matches(rowMatcher, key.getRowData()) || matches(colfMatcher, key.getColumnFamilyData())) || matches(colqMatcher, key.getColumnQualifierData())) || matches(valueMatcher, value.get(), 0, value.get().length);\n        }\n        return ((matches(rowMatcher, key.getRowData()) && matches(colfMatcher, key.getColumnFamilyData())) && matches(colqMatcher, key.getColumnQualifierData())) && matches(valueMatcher, value.get(), 0, value.get().length);\n    }\n\n    @java.lang.Override\n    public void init(org.apache.accumulo.core.iterators.SortedKeyValueIterator<org.apache.accumulo.core.data.Key, org.apache.accumulo.core.data.Value> source, java.util.Map<java.lang.String, java.lang.String> options, org.apache.accumulo.core.iterators.IteratorEnvironment env) throws java.io.IOException {\n        super.init(source, options, env);\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)) {\n            rowMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)).matcher(\"\");\n        } else {\n            rowMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)) {\n            colfMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)).matcher(\"\");\n        } else {\n            colfMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)) {\n            colqMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)).matcher(\"\");\n        } else {\n            colqMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)) {\n            valueMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)).matcher(\"\");\n        } else {\n            valueMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS)) {\n            orFields = java.lang.Boolean.parseBoolean(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS));\n        } else {\n            orFields = false;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING)) {\n            encoding = options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING);\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.accumulo.core.iterators.user.IteratorOptions describeOptions() {\n        org.apache.accumulo.core.iterators.user.IteratorOptions io = super.describeOptions();\n        io.setName(\"regex\");\n        io.setDescription(\"The RegExFilter/Iterator allows you to filter for key/value pairs based on regular expressions\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX, \"regular expression on row\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX, \"regular expression on column family\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX, \"regular expression on column qualifier\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX, \"regular expression on value\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS, \"use OR instread of AND when multiple regexes given\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING, (\"character encoding of byte array value (default is \" + org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING_DEFAULT) + \")\");\n        return io;\n    }\n\n    @java.lang.Override\n    public boolean validateOptions(java.util.Map<java.lang.String, java.lang.String> options) {\n        super.validateOptions(options);\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING)) {\n            try {\n                this.encoding = options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING);\n                @java.lang.SuppressWarnings(\"unused\")\n                java.lang.String test = new java.lang.String(\"test\".getBytes(), encoding);\n            } catch (java.io.UnsupportedEncodingException e) {\n                e.printStackTrace();\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void setRegexs(org.apache.accumulo.core.client.IteratorSetting si, java.lang.String rowTerm, java.lang.String cfTerm, java.lang.String cqTerm, java.lang.String valueTerm, boolean orFields) {\n        if (rowTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX, rowTerm);\n        }\n        if (cfTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX, cfTerm);\n        }\n        if (cqTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX, cqTerm);\n        }\n        if (valueTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX, valueTerm);\n        }\n        if (orFields) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS, \"true\");\n        }\n    }\n\n    public static void setEncoding(org.apache.accumulo.core.client.IteratorSetting si, java.lang.String encoding) {\n        if (!encoding.isEmpty()) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING, encoding);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private java.lang.String encoding = org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING_DEFAULT;",
            "src_parent": "public class RegExFilter extends org.apache.accumulo.core.iterators.Filter {\n    @java.lang.Override\n    public org.apache.accumulo.core.iterators.SortedKeyValueIterator<org.apache.accumulo.core.data.Key, org.apache.accumulo.core.data.Value> deepCopy(org.apache.accumulo.core.iterators.IteratorEnvironment env) {\n        org.apache.accumulo.core.iterators.user.RegExFilter result = new org.apache.accumulo.core.iterators.user.RegExFilter();\n        result.setSource(getSource().deepCopy(env));\n        result.rowMatcher = copyMatcher(rowMatcher);\n        result.colfMatcher = copyMatcher(colfMatcher);\n        result.colqMatcher = copyMatcher(colqMatcher);\n        result.valueMatcher = copyMatcher(valueMatcher);\n        result.orFields = orFields;\n        return result;\n    }\n\n    public static final java.lang.String ROW_REGEX = \"rowRegex\";\n\n    public static final java.lang.String COLF_REGEX = \"colfRegex\";\n\n    public static final java.lang.String COLQ_REGEX = \"colqRegex\";\n\n    public static final java.lang.String VALUE_REGEX = \"valueRegex\";\n\n    public static final java.lang.String OR_FIELDS = \"orFields\";\n\n    public static final java.lang.String ENCODING = \"encoding\";\n\n    public static final java.lang.String ENCODING_DEFAULT = \"UTF-8\";\n\n    private java.util.regex.Matcher rowMatcher;\n\n    private java.util.regex.Matcher colfMatcher;\n\n    private java.util.regex.Matcher colqMatcher;\n\n    private java.util.regex.Matcher valueMatcher;\n\n    private boolean orFields = false;\n\n    private java.lang.String encoding = org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING_DEFAULT;\n\n    private java.util.regex.Matcher copyMatcher(java.util.regex.Matcher m) {\n        if (m == null) {\n            return m;\n        } else {\n            return m.pattern().matcher(\"\");\n        }\n    }\n\n    private boolean matches(java.util.regex.Matcher matcher, org.apache.accumulo.core.data.ByteSequence bs) {\n        if (matcher != null) {\n            try {\n                matcher.reset(new java.lang.String(bs.getBackingArray(), encoding));\n                return matcher.matches();\n            } catch (java.io.UnsupportedEncodingException e) {\n                e.printStackTrace();\n            }\n        }\n        return !orFields;\n    }\n\n    private boolean matches(java.util.regex.Matcher matcher, byte[] data, int offset, int len) {\n        if (matcher != null) {\n            try {\n                matcher.reset(new java.lang.String(data, offset, len, encoding));\n                return matcher.matches();\n            } catch (java.io.UnsupportedEncodingException e) {\n                e.printStackTrace();\n            }\n        }\n        return !orFields;\n    }\n\n    @java.lang.Override\n    public boolean accept(org.apache.accumulo.core.data.Key key, org.apache.accumulo.core.data.Value value) {\n        if (orFields) {\n            return ((matches(rowMatcher, key.getRowData()) || matches(colfMatcher, key.getColumnFamilyData())) || matches(colqMatcher, key.getColumnQualifierData())) || matches(valueMatcher, value.get(), 0, value.get().length);\n        }\n        return ((matches(rowMatcher, key.getRowData()) && matches(colfMatcher, key.getColumnFamilyData())) && matches(colqMatcher, key.getColumnQualifierData())) && matches(valueMatcher, value.get(), 0, value.get().length);\n    }\n\n    @java.lang.Override\n    public void init(org.apache.accumulo.core.iterators.SortedKeyValueIterator<org.apache.accumulo.core.data.Key, org.apache.accumulo.core.data.Value> source, java.util.Map<java.lang.String, java.lang.String> options, org.apache.accumulo.core.iterators.IteratorEnvironment env) throws java.io.IOException {\n        super.init(source, options, env);\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)) {\n            rowMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)).matcher(\"\");\n        } else {\n            rowMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)) {\n            colfMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)).matcher(\"\");\n        } else {\n            colfMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)) {\n            colqMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)).matcher(\"\");\n        } else {\n            colqMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)) {\n            valueMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)).matcher(\"\");\n        } else {\n            valueMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS)) {\n            orFields = java.lang.Boolean.parseBoolean(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS));\n        } else {\n            orFields = false;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING)) {\n            encoding = options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING);\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.accumulo.core.iterators.user.IteratorOptions describeOptions() {\n        org.apache.accumulo.core.iterators.user.IteratorOptions io = super.describeOptions();\n        io.setName(\"regex\");\n        io.setDescription(\"The RegExFilter/Iterator allows you to filter for key/value pairs based on regular expressions\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX, \"regular expression on row\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX, \"regular expression on column family\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX, \"regular expression on column qualifier\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX, \"regular expression on value\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS, \"use OR instread of AND when multiple regexes given\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING, (\"character encoding of byte array value (default is \" + org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING_DEFAULT) + \")\");\n        return io;\n    }\n\n    @java.lang.Override\n    public boolean validateOptions(java.util.Map<java.lang.String, java.lang.String> options) {\n        super.validateOptions(options);\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING)) {\n            try {\n                this.encoding = options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING);\n                @java.lang.SuppressWarnings(\"unused\")\n                java.lang.String test = new java.lang.String(\"test\".getBytes(), encoding);\n            } catch (java.io.UnsupportedEncodingException e) {\n                e.printStackTrace();\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void setRegexs(org.apache.accumulo.core.client.IteratorSetting si, java.lang.String rowTerm, java.lang.String cfTerm, java.lang.String cqTerm, java.lang.String valueTerm, boolean orFields) {\n        if (rowTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX, rowTerm);\n        }\n        if (cfTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX, cfTerm);\n        }\n        if (cqTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX, cqTerm);\n        }\n        if (valueTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX, valueTerm);\n        }\n        if (orFields) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS, \"true\");\n        }\n    }\n\n    public static void setEncoding(org.apache.accumulo.core.client.IteratorSetting si, java.lang.String encoding) {\n        if (!encoding.isEmpty()) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING, encoding);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public static void setEncoding(org.apache.accumulo.core.client.IteratorSetting si, java.lang.String encoding) {\n    if (!encoding.isEmpty()) {\n        si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING, encoding);\n    }\n}",
            "src_parent": "public class RegExFilter extends org.apache.accumulo.core.iterators.Filter {\n    @java.lang.Override\n    public org.apache.accumulo.core.iterators.SortedKeyValueIterator<org.apache.accumulo.core.data.Key, org.apache.accumulo.core.data.Value> deepCopy(org.apache.accumulo.core.iterators.IteratorEnvironment env) {\n        org.apache.accumulo.core.iterators.user.RegExFilter result = new org.apache.accumulo.core.iterators.user.RegExFilter();\n        result.setSource(getSource().deepCopy(env));\n        result.rowMatcher = copyMatcher(rowMatcher);\n        result.colfMatcher = copyMatcher(colfMatcher);\n        result.colqMatcher = copyMatcher(colqMatcher);\n        result.valueMatcher = copyMatcher(valueMatcher);\n        result.orFields = orFields;\n        return result;\n    }\n\n    public static final java.lang.String ROW_REGEX = \"rowRegex\";\n\n    public static final java.lang.String COLF_REGEX = \"colfRegex\";\n\n    public static final java.lang.String COLQ_REGEX = \"colqRegex\";\n\n    public static final java.lang.String VALUE_REGEX = \"valueRegex\";\n\n    public static final java.lang.String OR_FIELDS = \"orFields\";\n\n    public static final java.lang.String ENCODING = \"encoding\";\n\n    public static final java.lang.String ENCODING_DEFAULT = \"UTF-8\";\n\n    private java.util.regex.Matcher rowMatcher;\n\n    private java.util.regex.Matcher colfMatcher;\n\n    private java.util.regex.Matcher colqMatcher;\n\n    private java.util.regex.Matcher valueMatcher;\n\n    private boolean orFields = false;\n\n    private java.lang.String encoding = org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING_DEFAULT;\n\n    private java.util.regex.Matcher copyMatcher(java.util.regex.Matcher m) {\n        if (m == null) {\n            return m;\n        } else {\n            return m.pattern().matcher(\"\");\n        }\n    }\n\n    private boolean matches(java.util.regex.Matcher matcher, org.apache.accumulo.core.data.ByteSequence bs) {\n        if (matcher != null) {\n            try {\n                matcher.reset(new java.lang.String(bs.getBackingArray(), encoding));\n                return matcher.matches();\n            } catch (java.io.UnsupportedEncodingException e) {\n                e.printStackTrace();\n            }\n        }\n        return !orFields;\n    }\n\n    private boolean matches(java.util.regex.Matcher matcher, byte[] data, int offset, int len) {\n        if (matcher != null) {\n            try {\n                matcher.reset(new java.lang.String(data, offset, len, encoding));\n                return matcher.matches();\n            } catch (java.io.UnsupportedEncodingException e) {\n                e.printStackTrace();\n            }\n        }\n        return !orFields;\n    }\n\n    @java.lang.Override\n    public boolean accept(org.apache.accumulo.core.data.Key key, org.apache.accumulo.core.data.Value value) {\n        if (orFields) {\n            return ((matches(rowMatcher, key.getRowData()) || matches(colfMatcher, key.getColumnFamilyData())) || matches(colqMatcher, key.getColumnQualifierData())) || matches(valueMatcher, value.get(), 0, value.get().length);\n        }\n        return ((matches(rowMatcher, key.getRowData()) && matches(colfMatcher, key.getColumnFamilyData())) && matches(colqMatcher, key.getColumnQualifierData())) && matches(valueMatcher, value.get(), 0, value.get().length);\n    }\n\n    @java.lang.Override\n    public void init(org.apache.accumulo.core.iterators.SortedKeyValueIterator<org.apache.accumulo.core.data.Key, org.apache.accumulo.core.data.Value> source, java.util.Map<java.lang.String, java.lang.String> options, org.apache.accumulo.core.iterators.IteratorEnvironment env) throws java.io.IOException {\n        super.init(source, options, env);\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)) {\n            rowMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)).matcher(\"\");\n        } else {\n            rowMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)) {\n            colfMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)).matcher(\"\");\n        } else {\n            colfMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)) {\n            colqMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)).matcher(\"\");\n        } else {\n            colqMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)) {\n            valueMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)).matcher(\"\");\n        } else {\n            valueMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS)) {\n            orFields = java.lang.Boolean.parseBoolean(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS));\n        } else {\n            orFields = false;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING)) {\n            encoding = options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING);\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.accumulo.core.iterators.user.IteratorOptions describeOptions() {\n        org.apache.accumulo.core.iterators.user.IteratorOptions io = super.describeOptions();\n        io.setName(\"regex\");\n        io.setDescription(\"The RegExFilter/Iterator allows you to filter for key/value pairs based on regular expressions\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX, \"regular expression on row\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX, \"regular expression on column family\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX, \"regular expression on column qualifier\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX, \"regular expression on value\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS, \"use OR instread of AND when multiple regexes given\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING, (\"character encoding of byte array value (default is \" + org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING_DEFAULT) + \")\");\n        return io;\n    }\n\n    @java.lang.Override\n    public boolean validateOptions(java.util.Map<java.lang.String, java.lang.String> options) {\n        super.validateOptions(options);\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING)) {\n            try {\n                this.encoding = options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING);\n                @java.lang.SuppressWarnings(\"unused\")\n                java.lang.String test = new java.lang.String(\"test\".getBytes(), encoding);\n            } catch (java.io.UnsupportedEncodingException e) {\n                e.printStackTrace();\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void setRegexs(org.apache.accumulo.core.client.IteratorSetting si, java.lang.String rowTerm, java.lang.String cfTerm, java.lang.String cqTerm, java.lang.String valueTerm, boolean orFields) {\n        if (rowTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX, rowTerm);\n        }\n        if (cfTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX, cfTerm);\n        }\n        if (cqTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX, cqTerm);\n        }\n        if (valueTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX, valueTerm);\n        }\n        if (orFields) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS, \"true\");\n        }\n    }\n\n    public static void setEncoding(org.apache.accumulo.core.client.IteratorSetting si, java.lang.String encoding) {\n        if (!encoding.isEmpty()) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING, encoding);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING)) {\n    encoding = options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING);\n}",
            "src_parent": "{\n    super.init(source, options, env);\n    if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)) {\n        rowMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)).matcher(\"\");\n    } else {\n        rowMatcher = null;\n    }\n    if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)) {\n        colfMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)).matcher(\"\");\n    } else {\n        colfMatcher = null;\n    }\n    if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)) {\n        colqMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)).matcher(\"\");\n    } else {\n        colqMatcher = null;\n    }\n    if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)) {\n        valueMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)).matcher(\"\");\n    } else {\n        valueMatcher = null;\n    }\n    if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS)) {\n        orFields = java.lang.Boolean.parseBoolean(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS));\n    } else {\n        orFields = false;\n    }\n    if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING)) {\n        encoding = options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING, (\"character encoding of byte array value (default is \" + org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING_DEFAULT) + \")\")",
            "src_parent": "{\n    org.apache.accumulo.core.iterators.user.IteratorOptions io = super.describeOptions();\n    io.setName(\"regex\");\n    io.setDescription(\"The RegExFilter/Iterator allows you to filter for key/value pairs based on regular expressions\");\n    io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX, \"regular expression on row\");\n    io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX, \"regular expression on column family\");\n    io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX, \"regular expression on column qualifier\");\n    io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX, \"regular expression on value\");\n    io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS, \"use OR instread of AND when multiple regexes given\");\n    io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING, (\"character encoding of byte array value (default is \" + org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING_DEFAULT) + \")\");\n    return io;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING)) {\n    try {\n        this.encoding = options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING);\n        @java.lang.SuppressWarnings(\"unused\")\n        java.lang.String test = new java.lang.String(\"test\".getBytes(), encoding);\n    } catch (java.io.UnsupportedEncodingException e) {\n        e.printStackTrace();\n        return false;\n    }\n}",
            "src_parent": "{\n    super.validateOptions(options);\n    if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)) {\n        java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)).matcher(\"\");\n    }\n    if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)) {\n        java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)).matcher(\"\");\n    }\n    if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)) {\n        java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)).matcher(\"\");\n    }\n    if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)) {\n        java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)).matcher(\"\");\n    }\n    if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING)) {\n        try {\n            this.encoding = options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING);\n            @java.lang.SuppressWarnings(\"unused\")\n            java.lang.String test = new java.lang.String(\"test\".getBytes(), encoding);\n        } catch (java.io.UnsupportedEncodingException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n    return true;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "try {\n    matcher.reset(new java.lang.String(bs.getBackingArray(), encoding));\n    return matcher.matches();\n} catch (java.io.UnsupportedEncodingException e) {\n    e.printStackTrace();\n}",
            "src_parent": "{\n    try {\n        matcher.reset(new java.lang.String(bs.getBackingArray(), encoding));\n        return matcher.matches();\n    } catch (java.io.UnsupportedEncodingException e) {\n        e.printStackTrace();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Try"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "try {\n    matcher.reset(new java.lang.String(data, offset, len, encoding));\n    return matcher.matches();\n} catch (java.io.UnsupportedEncodingException e) {\n    e.printStackTrace();\n}",
            "src_parent": "{\n    try {\n        matcher.reset(new java.lang.String(data, offset, len, encoding));\n        return matcher.matches();\n    } catch (java.io.UnsupportedEncodingException e) {\n        e.printStackTrace();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Try"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "public static final java.lang.String ENCODING = \"encoding\";",
            "dst_parent": "public class RegExFilter extends org.apache.accumulo.core.iterators.Filter {\n    @java.lang.Override\n    public org.apache.accumulo.core.iterators.SortedKeyValueIterator<org.apache.accumulo.core.data.Key, org.apache.accumulo.core.data.Value> deepCopy(org.apache.accumulo.core.iterators.IteratorEnvironment env) {\n        org.apache.accumulo.core.iterators.user.RegExFilter result = new org.apache.accumulo.core.iterators.user.RegExFilter();\n        result.setSource(getSource().deepCopy(env));\n        result.rowMatcher = copyMatcher(rowMatcher);\n        result.colfMatcher = copyMatcher(colfMatcher);\n        result.colqMatcher = copyMatcher(colqMatcher);\n        result.valueMatcher = copyMatcher(valueMatcher);\n        result.orFields = orFields;\n        return result;\n    }\n\n    public static final java.lang.String ROW_REGEX = \"rowRegex\";\n\n    public static final java.lang.String COLF_REGEX = \"colfRegex\";\n\n    public static final java.lang.String COLQ_REGEX = \"colqRegex\";\n\n    public static final java.lang.String VALUE_REGEX = \"valueRegex\";\n\n    public static final java.lang.String OR_FIELDS = \"orFields\";\n\n    public static final java.lang.String ENCODING = \"encoding\";\n\n    public static final java.lang.String ENCODING_DEFAULT = \"UTF-8\";\n\n    private java.util.regex.Matcher rowMatcher;\n\n    private java.util.regex.Matcher colfMatcher;\n\n    private java.util.regex.Matcher colqMatcher;\n\n    private java.util.regex.Matcher valueMatcher;\n\n    private boolean orFields = false;\n\n    private java.lang.String encoding = org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING_DEFAULT;\n\n    private java.util.regex.Matcher copyMatcher(java.util.regex.Matcher m) {\n        if (m == null) {\n            return m;\n        } else {\n            return m.pattern().matcher(\"\");\n        }\n    }\n\n    private boolean matches(java.util.regex.Matcher matcher, org.apache.accumulo.core.data.ByteSequence bs) {\n        if (matcher != null) {\n            try {\n                matcher.reset(new java.lang.String(bs.getBackingArray(), encoding));\n                return matcher.matches();\n            } catch (java.io.UnsupportedEncodingException e) {\n                e.printStackTrace();\n            }\n        }\n        return !orFields;\n    }\n\n    private boolean matches(java.util.regex.Matcher matcher, byte[] data, int offset, int len) {\n        if (matcher != null) {\n            try {\n                matcher.reset(new java.lang.String(data, offset, len, encoding));\n                return matcher.matches();\n            } catch (java.io.UnsupportedEncodingException e) {\n                e.printStackTrace();\n            }\n        }\n        return !orFields;\n    }\n\n    @java.lang.Override\n    public boolean accept(org.apache.accumulo.core.data.Key key, org.apache.accumulo.core.data.Value value) {\n        if (orFields) {\n            return ((matches(rowMatcher, key.getRowData()) || matches(colfMatcher, key.getColumnFamilyData())) || matches(colqMatcher, key.getColumnQualifierData())) || matches(valueMatcher, value.get(), 0, value.get().length);\n        }\n        return ((matches(rowMatcher, key.getRowData()) && matches(colfMatcher, key.getColumnFamilyData())) && matches(colqMatcher, key.getColumnQualifierData())) && matches(valueMatcher, value.get(), 0, value.get().length);\n    }\n\n    @java.lang.Override\n    public void init(org.apache.accumulo.core.iterators.SortedKeyValueIterator<org.apache.accumulo.core.data.Key, org.apache.accumulo.core.data.Value> source, java.util.Map<java.lang.String, java.lang.String> options, org.apache.accumulo.core.iterators.IteratorEnvironment env) throws java.io.IOException {\n        super.init(source, options, env);\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)) {\n            rowMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)).matcher(\"\");\n        } else {\n            rowMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)) {\n            colfMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)).matcher(\"\");\n        } else {\n            colfMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)) {\n            colqMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)).matcher(\"\");\n        } else {\n            colqMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)) {\n            valueMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)).matcher(\"\");\n        } else {\n            valueMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS)) {\n            orFields = java.lang.Boolean.parseBoolean(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS));\n        } else {\n            orFields = false;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING)) {\n            encoding = options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING);\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.accumulo.core.iterators.user.IteratorOptions describeOptions() {\n        org.apache.accumulo.core.iterators.user.IteratorOptions io = super.describeOptions();\n        io.setName(\"regex\");\n        io.setDescription(\"The RegExFilter/Iterator allows you to filter for key/value pairs based on regular expressions\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX, \"regular expression on row\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX, \"regular expression on column family\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX, \"regular expression on column qualifier\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX, \"regular expression on value\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS, \"use OR instread of AND when multiple regexes given\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING, (\"character encoding of byte array value (default is \" + org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING_DEFAULT) + \")\");\n        return io;\n    }\n\n    @java.lang.Override\n    public boolean validateOptions(java.util.Map<java.lang.String, java.lang.String> options) {\n        super.validateOptions(options);\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING)) {\n            try {\n                this.encoding = options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING);\n                @java.lang.SuppressWarnings(\"unused\")\n                java.lang.String test = new java.lang.String(\"test\".getBytes(), encoding);\n            } catch (java.io.UnsupportedEncodingException e) {\n                e.printStackTrace();\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void setRegexs(org.apache.accumulo.core.client.IteratorSetting si, java.lang.String rowTerm, java.lang.String cfTerm, java.lang.String cqTerm, java.lang.String valueTerm, boolean orFields) {\n        if (rowTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX, rowTerm);\n        }\n        if (cfTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX, cfTerm);\n        }\n        if (cqTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX, cqTerm);\n        }\n        if (valueTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX, valueTerm);\n        }\n        if (orFields) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS, \"true\");\n        }\n    }\n\n    public static void setEncoding(org.apache.accumulo.core.client.IteratorSetting si, java.lang.String encoding) {\n        if (!encoding.isEmpty()) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING, encoding);\n        }\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Field",
            "operator": "MOV",
            "src": "private org.apache.accumulo.core.util.ByteArrayBackedCharSequence babcs = new org.apache.accumulo.core.util.ByteArrayBackedCharSequence();",
            "src_parent": "public class RegExFilter extends org.apache.accumulo.core.iterators.Filter {\n    @java.lang.Override\n    public org.apache.accumulo.core.iterators.SortedKeyValueIterator<org.apache.accumulo.core.data.Key, org.apache.accumulo.core.data.Value> deepCopy(org.apache.accumulo.core.iterators.IteratorEnvironment env) {\n        org.apache.accumulo.core.iterators.user.RegExFilter result = new org.apache.accumulo.core.iterators.user.RegExFilter();\n        result.setSource(getSource().deepCopy(env));\n        result.rowMatcher = copyMatcher(rowMatcher);\n        result.colfMatcher = copyMatcher(colfMatcher);\n        result.colqMatcher = copyMatcher(colqMatcher);\n        result.valueMatcher = copyMatcher(valueMatcher);\n        result.orFields = orFields;\n        return result;\n    }\n\n    public static final java.lang.String ROW_REGEX = \"rowRegex\";\n\n    public static final java.lang.String COLF_REGEX = \"colfRegex\";\n\n    public static final java.lang.String COLQ_REGEX = \"colqRegex\";\n\n    public static final java.lang.String VALUE_REGEX = \"valueRegex\";\n\n    public static final java.lang.String OR_FIELDS = \"orFields\";\n\n    private java.util.regex.Matcher rowMatcher;\n\n    private java.util.regex.Matcher colfMatcher;\n\n    private java.util.regex.Matcher colqMatcher;\n\n    private java.util.regex.Matcher valueMatcher;\n\n    private boolean orFields = false;\n\n    private org.apache.accumulo.core.util.ByteArrayBackedCharSequence babcs = new org.apache.accumulo.core.util.ByteArrayBackedCharSequence();\n\n    private java.util.regex.Matcher copyMatcher(java.util.regex.Matcher m) {\n        if (m == null) {\n            return m;\n        } else {\n            return m.pattern().matcher(\"\");\n        }\n    }\n\n    private boolean matches(java.util.regex.Matcher matcher, org.apache.accumulo.core.data.ByteSequence bs) {\n        if (matcher != null) {\n            babcs.set(bs);\n            matcher.reset(babcs);\n            return matcher.matches();\n        }\n        return !orFields;\n    }\n\n    private boolean matches(java.util.regex.Matcher matcher, byte[] data, int offset, int len) {\n        if (matcher != null) {\n            babcs.set(data, offset, len);\n            matcher.reset(babcs);\n            return matcher.matches();\n        }\n        return !orFields;\n    }\n\n    @java.lang.Override\n    public boolean accept(org.apache.accumulo.core.data.Key key, org.apache.accumulo.core.data.Value value) {\n        if (orFields) {\n            return ((matches(rowMatcher, key.getRowData()) || matches(colfMatcher, key.getColumnFamilyData())) || matches(colqMatcher, key.getColumnQualifierData())) || matches(valueMatcher, value.get(), 0, value.get().length);\n        }\n        return ((matches(rowMatcher, key.getRowData()) && matches(colfMatcher, key.getColumnFamilyData())) && matches(colqMatcher, key.getColumnQualifierData())) && matches(valueMatcher, value.get(), 0, value.get().length);\n    }\n\n    @java.lang.Override\n    public void init(org.apache.accumulo.core.iterators.SortedKeyValueIterator<org.apache.accumulo.core.data.Key, org.apache.accumulo.core.data.Value> source, java.util.Map<java.lang.String, java.lang.String> options, org.apache.accumulo.core.iterators.IteratorEnvironment env) throws java.io.IOException {\n        super.init(source, options, env);\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)) {\n            rowMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)).matcher(\"\");\n        } else {\n            rowMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)) {\n            colfMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)).matcher(\"\");\n        } else {\n            colfMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)) {\n            colqMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)).matcher(\"\");\n        } else {\n            colqMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)) {\n            valueMatcher = java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)).matcher(\"\");\n        } else {\n            valueMatcher = null;\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS)) {\n            orFields = java.lang.Boolean.parseBoolean(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS));\n        } else {\n            orFields = false;\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.accumulo.core.iterators.user.IteratorOptions describeOptions() {\n        org.apache.accumulo.core.iterators.user.IteratorOptions io = super.describeOptions();\n        io.setName(\"regex\");\n        io.setDescription(\"The RegExFilter/Iterator allows you to filter for key/value pairs based on regular expressions\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX, \"regular expression on row\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX, \"regular expression on column family\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX, \"regular expression on column qualifier\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX, \"regular expression on value\");\n        io.addNamedOption(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS, \"use OR instread of AND when multiple regexes given\");\n        return io;\n    }\n\n    @java.lang.Override\n    public boolean validateOptions(java.util.Map<java.lang.String, java.lang.String> options) {\n        super.validateOptions(options);\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX)).matcher(\"\");\n        }\n        if (options.containsKey(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)) {\n            java.util.regex.Pattern.compile(options.get(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX)).matcher(\"\");\n        }\n        return true;\n    }\n\n    public static void setRegexs(org.apache.accumulo.core.client.IteratorSetting si, java.lang.String rowTerm, java.lang.String cfTerm, java.lang.String cqTerm, java.lang.String valueTerm, boolean orFields) {\n        if (rowTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.ROW_REGEX, rowTerm);\n        }\n        if (cfTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLF_REGEX, cfTerm);\n        }\n        if (cqTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.COLQ_REGEX, cqTerm);\n        }\n        if (valueTerm != null) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.VALUE_REGEX, valueTerm);\n        }\n        if (orFields) {\n            si.addOption(org.apache.accumulo.core.iterators.user.RegExFilter.OR_FIELDS, \"true\");\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Field",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Field",
            "dst_parent": "private java.lang.String encoding = org.apache.accumulo.core.iterators.user.RegExFilter.ENCODING_DEFAULT;",
            "dst_parent_type": "Field",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Field",
            "src_parent": "private org.apache.accumulo.core.util.ByteArrayBackedCharSequence babcs = new org.apache.accumulo.core.util.ByteArrayBackedCharSequence();",
            "src_parent_type": "Field",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return matcher.matches()",
            "dst_parent": "{\n    matcher.reset(new java.lang.String(bs.getBackingArray(), encoding));\n    return matcher.matches();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return matcher.matches()",
            "src_parent": "{\n    babcs.set(bs);\n    matcher.reset(babcs);\n    return matcher.matches();\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return matcher.matches()",
            "dst_parent": "{\n    matcher.reset(new java.lang.String(data, offset, len, encoding));\n    return matcher.matches();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return matcher.matches()",
            "src_parent": "{\n    babcs.set(data, offset, len);\n    matcher.reset(babcs);\n    return matcher.matches();\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "matcher",
            "dst_parent": "matcher.reset(new java.lang.String(bs.getBackingArray(), encoding))",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "matcher",
            "src_parent": "matcher.reset(babcs)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "e",
            "dst_parent": "e.printStackTrace()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "matcher",
            "src_parent": "matcher.reset(babcs)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.accumulo.core.iterators.user.RegExFilter",
            "dst_parent": "",
            "dst_parent_type": "ThisAccess",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "org.apache.accumulo.core.iterators.user.RegExFilter",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        }
      ],
      "file_name": "RegExFilter"
    }
  ],
  "id": "accumulo_397f86f6"
}