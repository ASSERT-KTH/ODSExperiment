{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private boolean restored = true;",
            "src_parent": "public class StreamOperatorState<S, C extends java.io.Serializable> implements org.apache.flink.api.common.state.OperatorState<S> {\n    private S state;\n\n    protected org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer;\n\n    private final org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable> provider;\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public StreamOperatorState(org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer, org.apache.flink.runtime.state.StateHandleProvider<C> provider) {\n        this.checkpointer = checkpointer;\n        this.provider = ((org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable>) (provider));\n    }\n\n    private boolean restored = true;\n\n    private org.apache.flink.runtime.state.StateHandle<java.io.Serializable> checkpoint = null;\n\n    {\n    }\n\n    @java.lang.Override\n    public S value() throws java.io.IOException {\n        return state;\n    }\n\n    @java.lang.Override\n    public void update(S state) throws java.io.IOException {\n        if (state == null) {\n            throw new java.lang.RuntimeException(\"Cannot set state to null.\");\n        }\n        this.state = state;\n    }\n\n    public void setDefaultState(S defaultState) throws java.io.IOException {\n        if (value() == null) {\n            update(defaultState);\n        }\n    }\n\n    {\n        restoreWithCheckpointer();\n    }\n\n    public org.apache.flink.api.common.state.StateCheckpointer<S, C> getCheckpointer() {\n        return checkpointer;\n    }\n\n    public void setCheckpointer(org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer) {\n        this.checkpointer = checkpointer;\n    }\n\n    protected org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable> getStateHandleProvider() {\n        return provider;\n    }\n\n    public org.apache.flink.runtime.state.StateHandle<java.io.Serializable> snapshotState(long checkpointId, long checkpointTimestamp) throws java.lang.Exception {\n        return provider.createStateHandle(checkpointer.snapshotState(value(), checkpointId, checkpointTimestamp));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public void restoreState(org.apache.flink.runtime.state.StateHandle<java.io.Serializable> snapshot, java.lang.ClassLoader userCodeClassLoader) throws java.lang.Exception {\n        update(checkpointer.restoreState(((C) (snapshot.getState(userCodeClassLoader)))));\n    }\n\n    {\n        restoreWithCheckpointer();\n    }\n\n    public java.util.Map<java.io.Serializable, S> getPartitionedState() throws java.lang.Exception {\n        return com.google.common.collect.ImmutableMap.of(((java.io.Serializable) (0)), state);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return state.toString();\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public StreamOperatorState(org.apache.flink.runtime.state.StateHandleProvider<C> provider) {\n        this(((org.apache.flink.api.common.state.StateCheckpointer<S, C>) (new org.apache.flink.streaming.api.state.BasicCheckpointer())), provider);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private org.apache.flink.runtime.state.StateHandle<java.io.Serializable> checkpoint = null;",
            "src_parent": "public class StreamOperatorState<S, C extends java.io.Serializable> implements org.apache.flink.api.common.state.OperatorState<S> {\n    private S state;\n\n    protected org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer;\n\n    private final org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable> provider;\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public StreamOperatorState(org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer, org.apache.flink.runtime.state.StateHandleProvider<C> provider) {\n        this.checkpointer = checkpointer;\n        this.provider = ((org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable>) (provider));\n    }\n\n    private boolean restored = true;\n\n    private org.apache.flink.runtime.state.StateHandle<java.io.Serializable> checkpoint = null;\n\n    {\n    }\n\n    @java.lang.Override\n    public S value() throws java.io.IOException {\n        return state;\n    }\n\n    @java.lang.Override\n    public void update(S state) throws java.io.IOException {\n        if (state == null) {\n            throw new java.lang.RuntimeException(\"Cannot set state to null.\");\n        }\n        this.state = state;\n    }\n\n    public void setDefaultState(S defaultState) throws java.io.IOException {\n        if (value() == null) {\n            update(defaultState);\n        }\n    }\n\n    {\n        restoreWithCheckpointer();\n    }\n\n    public org.apache.flink.api.common.state.StateCheckpointer<S, C> getCheckpointer() {\n        return checkpointer;\n    }\n\n    public void setCheckpointer(org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer) {\n        this.checkpointer = checkpointer;\n    }\n\n    protected org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable> getStateHandleProvider() {\n        return provider;\n    }\n\n    public org.apache.flink.runtime.state.StateHandle<java.io.Serializable> snapshotState(long checkpointId, long checkpointTimestamp) throws java.lang.Exception {\n        return provider.createStateHandle(checkpointer.snapshotState(value(), checkpointId, checkpointTimestamp));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public void restoreState(org.apache.flink.runtime.state.StateHandle<java.io.Serializable> snapshot, java.lang.ClassLoader userCodeClassLoader) throws java.lang.Exception {\n        update(checkpointer.restoreState(((C) (snapshot.getState(userCodeClassLoader)))));\n    }\n\n    {\n        restoreWithCheckpointer();\n    }\n\n    public java.util.Map<java.io.Serializable, S> getPartitionedState() throws java.lang.Exception {\n        return com.google.common.collect.ImmutableMap.of(((java.io.Serializable) (0)), state);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return state.toString();\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public StreamOperatorState(org.apache.flink.runtime.state.StateHandleProvider<C> provider) {\n        this(((org.apache.flink.api.common.state.StateCheckpointer<S, C>) (new org.apache.flink.streaming.api.state.BasicCheckpointer())), provider);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n}",
            "src_parent": "public class StreamOperatorState<S, C extends java.io.Serializable> implements org.apache.flink.api.common.state.OperatorState<S> {\n    private S state;\n\n    protected org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer;\n\n    private final org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable> provider;\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public StreamOperatorState(org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer, org.apache.flink.runtime.state.StateHandleProvider<C> provider) {\n        this.checkpointer = checkpointer;\n        this.provider = ((org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable>) (provider));\n    }\n\n    private boolean restored = true;\n\n    private org.apache.flink.runtime.state.StateHandle<java.io.Serializable> checkpoint = null;\n\n    {\n    }\n\n    @java.lang.Override\n    public S value() throws java.io.IOException {\n        return state;\n    }\n\n    @java.lang.Override\n    public void update(S state) throws java.io.IOException {\n        if (state == null) {\n            throw new java.lang.RuntimeException(\"Cannot set state to null.\");\n        }\n        this.state = state;\n    }\n\n    public void setDefaultState(S defaultState) throws java.io.IOException {\n        if (value() == null) {\n            update(defaultState);\n        }\n    }\n\n    {\n        restoreWithCheckpointer();\n    }\n\n    public org.apache.flink.api.common.state.StateCheckpointer<S, C> getCheckpointer() {\n        return checkpointer;\n    }\n\n    public void setCheckpointer(org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer) {\n        this.checkpointer = checkpointer;\n    }\n\n    protected org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable> getStateHandleProvider() {\n        return provider;\n    }\n\n    public org.apache.flink.runtime.state.StateHandle<java.io.Serializable> snapshotState(long checkpointId, long checkpointTimestamp) throws java.lang.Exception {\n        return provider.createStateHandle(checkpointer.snapshotState(value(), checkpointId, checkpointTimestamp));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public void restoreState(org.apache.flink.runtime.state.StateHandle<java.io.Serializable> snapshot, java.lang.ClassLoader userCodeClassLoader) throws java.lang.Exception {\n        update(checkpointer.restoreState(((C) (snapshot.getState(userCodeClassLoader)))));\n    }\n\n    {\n        restoreWithCheckpointer();\n    }\n\n    public java.util.Map<java.io.Serializable, S> getPartitionedState() throws java.lang.Exception {\n        return com.google.common.collect.ImmutableMap.of(((java.io.Serializable) (0)), state);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return state.toString();\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public StreamOperatorState(org.apache.flink.runtime.state.StateHandleProvider<C> provider) {\n        this(((org.apache.flink.api.common.state.StateCheckpointer<S, C>) (new org.apache.flink.streaming.api.state.BasicCheckpointer())), provider);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "AnonymousExecutable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    restoreWithCheckpointer();\n}",
            "src_parent": "public class StreamOperatorState<S, C extends java.io.Serializable> implements org.apache.flink.api.common.state.OperatorState<S> {\n    private S state;\n\n    protected org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer;\n\n    private final org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable> provider;\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public StreamOperatorState(org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer, org.apache.flink.runtime.state.StateHandleProvider<C> provider) {\n        this.checkpointer = checkpointer;\n        this.provider = ((org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable>) (provider));\n    }\n\n    private boolean restored = true;\n\n    private org.apache.flink.runtime.state.StateHandle<java.io.Serializable> checkpoint = null;\n\n    {\n    }\n\n    @java.lang.Override\n    public S value() throws java.io.IOException {\n        return state;\n    }\n\n    @java.lang.Override\n    public void update(S state) throws java.io.IOException {\n        if (state == null) {\n            throw new java.lang.RuntimeException(\"Cannot set state to null.\");\n        }\n        this.state = state;\n    }\n\n    public void setDefaultState(S defaultState) throws java.io.IOException {\n        if (value() == null) {\n            update(defaultState);\n        }\n    }\n\n    {\n        restoreWithCheckpointer();\n    }\n\n    public org.apache.flink.api.common.state.StateCheckpointer<S, C> getCheckpointer() {\n        return checkpointer;\n    }\n\n    public void setCheckpointer(org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer) {\n        this.checkpointer = checkpointer;\n    }\n\n    protected org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable> getStateHandleProvider() {\n        return provider;\n    }\n\n    public org.apache.flink.runtime.state.StateHandle<java.io.Serializable> snapshotState(long checkpointId, long checkpointTimestamp) throws java.lang.Exception {\n        return provider.createStateHandle(checkpointer.snapshotState(value(), checkpointId, checkpointTimestamp));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public void restoreState(org.apache.flink.runtime.state.StateHandle<java.io.Serializable> snapshot, java.lang.ClassLoader userCodeClassLoader) throws java.lang.Exception {\n        update(checkpointer.restoreState(((C) (snapshot.getState(userCodeClassLoader)))));\n    }\n\n    {\n        restoreWithCheckpointer();\n    }\n\n    public java.util.Map<java.io.Serializable, S> getPartitionedState() throws java.lang.Exception {\n        return com.google.common.collect.ImmutableMap.of(((java.io.Serializable) (0)), state);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return state.toString();\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public StreamOperatorState(org.apache.flink.runtime.state.StateHandleProvider<C> provider) {\n        this(((org.apache.flink.api.common.state.StateCheckpointer<S, C>) (new org.apache.flink.streaming.api.state.BasicCheckpointer())), provider);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "AnonymousExecutable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    restoreWithCheckpointer();\n}",
            "src_parent": "public class StreamOperatorState<S, C extends java.io.Serializable> implements org.apache.flink.api.common.state.OperatorState<S> {\n    private S state;\n\n    protected org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer;\n\n    private final org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable> provider;\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public StreamOperatorState(org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer, org.apache.flink.runtime.state.StateHandleProvider<C> provider) {\n        this.checkpointer = checkpointer;\n        this.provider = ((org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable>) (provider));\n    }\n\n    private boolean restored = true;\n\n    private org.apache.flink.runtime.state.StateHandle<java.io.Serializable> checkpoint = null;\n\n    {\n    }\n\n    @java.lang.Override\n    public S value() throws java.io.IOException {\n        return state;\n    }\n\n    @java.lang.Override\n    public void update(S state) throws java.io.IOException {\n        if (state == null) {\n            throw new java.lang.RuntimeException(\"Cannot set state to null.\");\n        }\n        this.state = state;\n    }\n\n    public void setDefaultState(S defaultState) throws java.io.IOException {\n        if (value() == null) {\n            update(defaultState);\n        }\n    }\n\n    {\n        restoreWithCheckpointer();\n    }\n\n    public org.apache.flink.api.common.state.StateCheckpointer<S, C> getCheckpointer() {\n        return checkpointer;\n    }\n\n    public void setCheckpointer(org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer) {\n        this.checkpointer = checkpointer;\n    }\n\n    protected org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable> getStateHandleProvider() {\n        return provider;\n    }\n\n    public org.apache.flink.runtime.state.StateHandle<java.io.Serializable> snapshotState(long checkpointId, long checkpointTimestamp) throws java.lang.Exception {\n        return provider.createStateHandle(checkpointer.snapshotState(value(), checkpointId, checkpointTimestamp));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public void restoreState(org.apache.flink.runtime.state.StateHandle<java.io.Serializable> snapshot, java.lang.ClassLoader userCodeClassLoader) throws java.lang.Exception {\n        update(checkpointer.restoreState(((C) (snapshot.getState(userCodeClassLoader)))));\n    }\n\n    {\n        restoreWithCheckpointer();\n    }\n\n    public java.util.Map<java.io.Serializable, S> getPartitionedState() throws java.lang.Exception {\n        return com.google.common.collect.ImmutableMap.of(((java.io.Serializable) (0)), state);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return state.toString();\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public StreamOperatorState(org.apache.flink.runtime.state.StateHandleProvider<C> provider) {\n        this(((org.apache.flink.api.common.state.StateCheckpointer<S, C>) (new org.apache.flink.streaming.api.state.BasicCheckpointer())), provider);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "AnonymousExecutable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Constructor",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "@java.lang.SuppressWarnings(\"unchecked\")\npublic StreamOperatorState(org.apache.flink.runtime.state.StateHandleProvider<C> provider) {\n    this(((org.apache.flink.api.common.state.StateCheckpointer<S, C>) (new org.apache.flink.streaming.api.state.BasicCheckpointer())), provider);\n}",
            "dst_parent": "public class StreamOperatorState<S, C extends java.io.Serializable> implements org.apache.flink.api.common.state.OperatorState<S> {\n    private S state;\n\n    protected org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer;\n\n    private final org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable> provider;\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public StreamOperatorState(org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer, org.apache.flink.runtime.state.StateHandleProvider<C> provider) {\n        this.checkpointer = checkpointer;\n        this.provider = ((org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable>) (provider));\n    }\n\n    private boolean restored = true;\n\n    private org.apache.flink.runtime.state.StateHandle<java.io.Serializable> checkpoint = null;\n\n    {\n    }\n\n    @java.lang.Override\n    public S value() throws java.io.IOException {\n        return state;\n    }\n\n    @java.lang.Override\n    public void update(S state) throws java.io.IOException {\n        if (state == null) {\n            throw new java.lang.RuntimeException(\"Cannot set state to null.\");\n        }\n        this.state = state;\n    }\n\n    public void setDefaultState(S defaultState) throws java.io.IOException {\n        if (value() == null) {\n            update(defaultState);\n        }\n    }\n\n    {\n        restoreWithCheckpointer();\n    }\n\n    public org.apache.flink.api.common.state.StateCheckpointer<S, C> getCheckpointer() {\n        return checkpointer;\n    }\n\n    public void setCheckpointer(org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer) {\n        this.checkpointer = checkpointer;\n    }\n\n    protected org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable> getStateHandleProvider() {\n        return provider;\n    }\n\n    public org.apache.flink.runtime.state.StateHandle<java.io.Serializable> snapshotState(long checkpointId, long checkpointTimestamp) throws java.lang.Exception {\n        return provider.createStateHandle(checkpointer.snapshotState(value(), checkpointId, checkpointTimestamp));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public void restoreState(org.apache.flink.runtime.state.StateHandle<java.io.Serializable> snapshot, java.lang.ClassLoader userCodeClassLoader) throws java.lang.Exception {\n        update(checkpointer.restoreState(((C) (snapshot.getState(userCodeClassLoader)))));\n    }\n\n    {\n        restoreWithCheckpointer();\n    }\n\n    public java.util.Map<java.io.Serializable, S> getPartitionedState() throws java.lang.Exception {\n        return com.google.common.collect.ImmutableMap.of(((java.io.Serializable) (0)), state);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return state.toString();\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public StreamOperatorState(org.apache.flink.runtime.state.StateHandleProvider<C> provider) {\n        this(((org.apache.flink.api.common.state.StateCheckpointer<S, C>) (new org.apache.flink.streaming.api.state.BasicCheckpointer())), provider);\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Constructor",
            "operator": "MOV",
            "src": "@java.lang.SuppressWarnings(\"unchecked\")\npublic StreamOperatorState(org.apache.flink.runtime.state.StateHandleProvider<C> provider) {\n    this(((org.apache.flink.api.common.state.StateCheckpointer<S, C>) (new org.apache.flink.streaming.api.state.BasicCheckpointer())), provider);\n}",
            "src_parent": "public class StreamOperatorState<S, C extends java.io.Serializable> implements org.apache.flink.api.common.state.OperatorState<S> {\n    private S state;\n\n    protected org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer;\n\n    private final org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable> provider;\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public StreamOperatorState(org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer, org.apache.flink.runtime.state.StateHandleProvider<C> provider) {\n        this.checkpointer = checkpointer;\n        this.provider = ((org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable>) (provider));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public StreamOperatorState(org.apache.flink.runtime.state.StateHandleProvider<C> provider) {\n        this(((org.apache.flink.api.common.state.StateCheckpointer<S, C>) (new org.apache.flink.streaming.api.state.BasicCheckpointer())), provider);\n    }\n\n    @java.lang.Override\n    public S value() throws java.io.IOException {\n        return state;\n    }\n\n    @java.lang.Override\n    public void update(S state) throws java.io.IOException {\n        if (state == null) {\n            throw new java.lang.RuntimeException(\"Cannot set state to null.\");\n        }\n        this.state = state;\n    }\n\n    public void setDefaultState(S defaultState) throws java.io.IOException {\n        if (value() == null) {\n            update(defaultState);\n        }\n    }\n\n    public org.apache.flink.api.common.state.StateCheckpointer<S, C> getCheckpointer() {\n        return checkpointer;\n    }\n\n    public void setCheckpointer(org.apache.flink.api.common.state.StateCheckpointer<S, C> checkpointer) {\n        this.checkpointer = checkpointer;\n    }\n\n    protected org.apache.flink.runtime.state.StateHandleProvider<java.io.Serializable> getStateHandleProvider() {\n        return provider;\n    }\n\n    public org.apache.flink.runtime.state.StateHandle<java.io.Serializable> snapshotState(long checkpointId, long checkpointTimestamp) throws java.lang.Exception {\n        return provider.createStateHandle(checkpointer.snapshotState(value(), checkpointId, checkpointTimestamp));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public void restoreState(org.apache.flink.runtime.state.StateHandle<java.io.Serializable> snapshot, java.lang.ClassLoader userCodeClassLoader) throws java.lang.Exception {\n        update(checkpointer.restoreState(((C) (snapshot.getState(userCodeClassLoader)))));\n    }\n\n    public java.util.Map<java.io.Serializable, S> getPartitionedState() throws java.lang.Exception {\n        return com.google.common.collect.ImmutableMap.of(((java.io.Serializable) (0)), state);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return state.toString();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Constructor"
          }
        }
      ],
      "file_name": "StreamOperatorState"
    }
  ],
  "id": "flink_63d9800e"
}