{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n}",
            "src_parent": "public class FileLockExclusiveReadLockStrategy extends org.apache.camel.component.file.strategy.MarkerFileExclusiveReadLockStrategy {\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.class);\n\n    private long timeout;\n\n    private long checkInterval = 1000;\n\n    private org.apache.camel.LoggingLevel readLockLoggingLevel = org.apache.camel.LoggingLevel.WARN;\n\n    @java.lang.Override\n    public void prepareOnStartup(org.apache.camel.component.file.GenericFileOperations<java.io.File> operations, org.apache.camel.component.file.GenericFileEndpoint<java.io.File> endpoint) {\n    }\n\n    @java.lang.Override\n    public boolean acquireExclusiveReadLock(org.apache.camel.component.file.GenericFileOperations<java.io.File> operations, org.apache.camel.component.file.GenericFile<java.io.File> file, org.apache.camel.Exchange exchange) throws java.lang.Exception {\n        if (!super.acquireExclusiveReadLock(operations, file, exchange)) {\n            return false;\n        }\n        java.io.File target = new java.io.File(file.getAbsoluteFilePath());\n        org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG.trace(\"Waiting for exclusive read lock to file: {}\", target);\n        java.nio.channels.FileChannel channel = null;\n        java.io.RandomAccessFile randomAccessFile = null;\n        boolean exclusive = false;\n        java.nio.channels.FileLock lock = null;\n        result.setCopyFromAbsoluteFilePath(source.getAbsoluteFilePath());\n        try {\n            randomAccessFile = new java.io.RandomAccessFile(target, \"rw\");\n            channel = randomAccessFile.getChannel();\n            org.apache.camel.util.StopWatch watch = new org.apache.camel.util.StopWatch();\n            while (!exclusive) {\n                if (timeout > 0) {\n                    long delta = watch.taken();\n                    if (delta > timeout) {\n                        org.apache.camel.util.CamelLogger.log(org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG, readLockLoggingLevel, ((\"Cannot acquire read lock within \" + timeout) + \" millis. Will skip the file: \") + target);\n                        return false;\n                    }\n                }\n                try {\n                    lock = (timeout > 0) ? channel.tryLock() : channel.lock();\n                } catch (java.lang.IllegalStateException ex) {\n                }\n                if (lock != null) {\n                    org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG.trace(\"Acquired exclusive read lock: {} to file: {}\", lock, target);\n                    exclusive = true;\n                } else {\n                    boolean interrupted = sleep();\n                    if (interrupted) {\n                        return false;\n                    }\n                }\n            } \n        } catch (java.io.IOException e) {\n            if (timeout == 0) {\n                return false;\n            }\n            org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG.debug(\"Cannot acquire read lock. Will try again.\", e);\n            boolean interrupted = sleep();\n            if (interrupted) {\n                return false;\n            }\n        } finally {\n            if (!exclusive) {\n                org.apache.camel.util.IOHelper.close(channel, \"while acquiring exclusive read lock for file: \" + target, org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG);\n                org.apache.camel.util.IOHelper.close(randomAccessFile, \"while acquiring exclusive read lock for file: \" + target, org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG);\n                super.releaseExclusiveReadLockOnAbort(operations, file, exchange);\n            }\n        }\n        exchange.setProperty(Exchange.FILE_LOCK_EXCLUSIVE_LOCK, lock);\n        exchange.setProperty(Exchange.FILE_LOCK_RANDOM_ACCESS_FILE, randomAccessFile);\n        return true;\n    }\n\n    @java.lang.Override\n    protected void doReleaseExclusiveReadLock(org.apache.camel.component.file.GenericFileOperations<java.io.File> operations, org.apache.camel.component.file.GenericFile<java.io.File> file, org.apache.camel.Exchange exchange) throws java.lang.Exception {\n        super.doReleaseExclusiveReadLock(operations, file, exchange);\n        java.lang.String target = file.getFileName();\n        java.nio.channels.FileLock lock = exchange.getProperty(Exchange.FILE_LOCK_EXCLUSIVE_LOCK, java.nio.channels.FileLock.class);\n        java.io.RandomAccessFile rac = exchange.getProperty(Exchange.FILE_LOCK_RANDOM_ACCESS_FILE, java.io.RandomAccessFile.class);\n        if (lock != null) {\n            java.nio.channels.Channel channel = lock.acquiredBy();\n            try {\n                lock.release();\n            } finally {\n                org.apache.camel.util.IOHelper.close(channel, \"while releasing exclusive read lock for file: \" + target, org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG);\n                org.apache.camel.util.IOHelper.close(rac, \"while releasing exclusive read lock for file: \" + target, org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG);\n            }\n        }\n    }\n\n    private boolean sleep() {\n        org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG.trace(\"Exclusive read lock not granted. Sleeping for {} millis.\", checkInterval);\n        try {\n            java.lang.Thread.sleep(checkInterval);\n            return false;\n        } catch (java.lang.InterruptedException e) {\n            org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG.debug(\"Sleep interrupted while waiting for exclusive read lock, so breaking out\");\n            return true;\n        }\n    }\n\n    public long getTimeout() {\n        return timeout;\n    }\n\n    @java.lang.Override\n    public void setTimeout(long timeout) {\n        this.timeout = timeout;\n    }\n\n    @java.lang.Override\n    public void setCheckInterval(long checkInterval) {\n        this.checkInterval = checkInterval;\n    }\n\n    @java.lang.Override\n    public void setReadLockLoggingLevel(org.apache.camel.LoggingLevel readLockLoggingLevel) {\n        this.readLockLoggingLevel = readLockLoggingLevel;\n    }\n\n    {\n    }\n\n    public java.lang.String getCopyFromAbsoluteFilePath() {\n        return copyFromAbsoluteFilePath;\n    }\n\n    public void setCopyFromAbsoluteFilePath(java.lang.String copyFromAbsoluteFilePath) {\n        this.copyFromAbsoluteFilePath = copyFromAbsoluteFilePath;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "AnonymousExecutable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public java.lang.String getCopyFromAbsoluteFilePath() {\n    return copyFromAbsoluteFilePath;\n}",
            "src_parent": "public class FileLockExclusiveReadLockStrategy extends org.apache.camel.component.file.strategy.MarkerFileExclusiveReadLockStrategy {\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.class);\n\n    private long timeout;\n\n    private long checkInterval = 1000;\n\n    private org.apache.camel.LoggingLevel readLockLoggingLevel = org.apache.camel.LoggingLevel.WARN;\n\n    @java.lang.Override\n    public void prepareOnStartup(org.apache.camel.component.file.GenericFileOperations<java.io.File> operations, org.apache.camel.component.file.GenericFileEndpoint<java.io.File> endpoint) {\n    }\n\n    @java.lang.Override\n    public boolean acquireExclusiveReadLock(org.apache.camel.component.file.GenericFileOperations<java.io.File> operations, org.apache.camel.component.file.GenericFile<java.io.File> file, org.apache.camel.Exchange exchange) throws java.lang.Exception {\n        if (!super.acquireExclusiveReadLock(operations, file, exchange)) {\n            return false;\n        }\n        java.io.File target = new java.io.File(file.getAbsoluteFilePath());\n        org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG.trace(\"Waiting for exclusive read lock to file: {}\", target);\n        java.nio.channels.FileChannel channel = null;\n        java.io.RandomAccessFile randomAccessFile = null;\n        boolean exclusive = false;\n        java.nio.channels.FileLock lock = null;\n        result.setCopyFromAbsoluteFilePath(source.getAbsoluteFilePath());\n        try {\n            randomAccessFile = new java.io.RandomAccessFile(target, \"rw\");\n            channel = randomAccessFile.getChannel();\n            org.apache.camel.util.StopWatch watch = new org.apache.camel.util.StopWatch();\n            while (!exclusive) {\n                if (timeout > 0) {\n                    long delta = watch.taken();\n                    if (delta > timeout) {\n                        org.apache.camel.util.CamelLogger.log(org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG, readLockLoggingLevel, ((\"Cannot acquire read lock within \" + timeout) + \" millis. Will skip the file: \") + target);\n                        return false;\n                    }\n                }\n                try {\n                    lock = (timeout > 0) ? channel.tryLock() : channel.lock();\n                } catch (java.lang.IllegalStateException ex) {\n                }\n                if (lock != null) {\n                    org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG.trace(\"Acquired exclusive read lock: {} to file: {}\", lock, target);\n                    exclusive = true;\n                } else {\n                    boolean interrupted = sleep();\n                    if (interrupted) {\n                        return false;\n                    }\n                }\n            } \n        } catch (java.io.IOException e) {\n            if (timeout == 0) {\n                return false;\n            }\n            org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG.debug(\"Cannot acquire read lock. Will try again.\", e);\n            boolean interrupted = sleep();\n            if (interrupted) {\n                return false;\n            }\n        } finally {\n            if (!exclusive) {\n                org.apache.camel.util.IOHelper.close(channel, \"while acquiring exclusive read lock for file: \" + target, org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG);\n                org.apache.camel.util.IOHelper.close(randomAccessFile, \"while acquiring exclusive read lock for file: \" + target, org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG);\n                super.releaseExclusiveReadLockOnAbort(operations, file, exchange);\n            }\n        }\n        exchange.setProperty(Exchange.FILE_LOCK_EXCLUSIVE_LOCK, lock);\n        exchange.setProperty(Exchange.FILE_LOCK_RANDOM_ACCESS_FILE, randomAccessFile);\n        return true;\n    }\n\n    @java.lang.Override\n    protected void doReleaseExclusiveReadLock(org.apache.camel.component.file.GenericFileOperations<java.io.File> operations, org.apache.camel.component.file.GenericFile<java.io.File> file, org.apache.camel.Exchange exchange) throws java.lang.Exception {\n        super.doReleaseExclusiveReadLock(operations, file, exchange);\n        java.lang.String target = file.getFileName();\n        java.nio.channels.FileLock lock = exchange.getProperty(Exchange.FILE_LOCK_EXCLUSIVE_LOCK, java.nio.channels.FileLock.class);\n        java.io.RandomAccessFile rac = exchange.getProperty(Exchange.FILE_LOCK_RANDOM_ACCESS_FILE, java.io.RandomAccessFile.class);\n        if (lock != null) {\n            java.nio.channels.Channel channel = lock.acquiredBy();\n            try {\n                lock.release();\n            } finally {\n                org.apache.camel.util.IOHelper.close(channel, \"while releasing exclusive read lock for file: \" + target, org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG);\n                org.apache.camel.util.IOHelper.close(rac, \"while releasing exclusive read lock for file: \" + target, org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG);\n            }\n        }\n    }\n\n    private boolean sleep() {\n        org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG.trace(\"Exclusive read lock not granted. Sleeping for {} millis.\", checkInterval);\n        try {\n            java.lang.Thread.sleep(checkInterval);\n            return false;\n        } catch (java.lang.InterruptedException e) {\n            org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG.debug(\"Sleep interrupted while waiting for exclusive read lock, so breaking out\");\n            return true;\n        }\n    }\n\n    public long getTimeout() {\n        return timeout;\n    }\n\n    @java.lang.Override\n    public void setTimeout(long timeout) {\n        this.timeout = timeout;\n    }\n\n    @java.lang.Override\n    public void setCheckInterval(long checkInterval) {\n        this.checkInterval = checkInterval;\n    }\n\n    @java.lang.Override\n    public void setReadLockLoggingLevel(org.apache.camel.LoggingLevel readLockLoggingLevel) {\n        this.readLockLoggingLevel = readLockLoggingLevel;\n    }\n\n    {\n    }\n\n    public java.lang.String getCopyFromAbsoluteFilePath() {\n        return copyFromAbsoluteFilePath;\n    }\n\n    public void setCopyFromAbsoluteFilePath(java.lang.String copyFromAbsoluteFilePath) {\n        this.copyFromAbsoluteFilePath = copyFromAbsoluteFilePath;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public void setCopyFromAbsoluteFilePath(java.lang.String copyFromAbsoluteFilePath) {\n    this.copyFromAbsoluteFilePath = copyFromAbsoluteFilePath;\n}",
            "src_parent": "public class FileLockExclusiveReadLockStrategy extends org.apache.camel.component.file.strategy.MarkerFileExclusiveReadLockStrategy {\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.class);\n\n    private long timeout;\n\n    private long checkInterval = 1000;\n\n    private org.apache.camel.LoggingLevel readLockLoggingLevel = org.apache.camel.LoggingLevel.WARN;\n\n    @java.lang.Override\n    public void prepareOnStartup(org.apache.camel.component.file.GenericFileOperations<java.io.File> operations, org.apache.camel.component.file.GenericFileEndpoint<java.io.File> endpoint) {\n    }\n\n    @java.lang.Override\n    public boolean acquireExclusiveReadLock(org.apache.camel.component.file.GenericFileOperations<java.io.File> operations, org.apache.camel.component.file.GenericFile<java.io.File> file, org.apache.camel.Exchange exchange) throws java.lang.Exception {\n        if (!super.acquireExclusiveReadLock(operations, file, exchange)) {\n            return false;\n        }\n        java.io.File target = new java.io.File(file.getAbsoluteFilePath());\n        org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG.trace(\"Waiting for exclusive read lock to file: {}\", target);\n        java.nio.channels.FileChannel channel = null;\n        java.io.RandomAccessFile randomAccessFile = null;\n        boolean exclusive = false;\n        java.nio.channels.FileLock lock = null;\n        result.setCopyFromAbsoluteFilePath(source.getAbsoluteFilePath());\n        try {\n            randomAccessFile = new java.io.RandomAccessFile(target, \"rw\");\n            channel = randomAccessFile.getChannel();\n            org.apache.camel.util.StopWatch watch = new org.apache.camel.util.StopWatch();\n            while (!exclusive) {\n                if (timeout > 0) {\n                    long delta = watch.taken();\n                    if (delta > timeout) {\n                        org.apache.camel.util.CamelLogger.log(org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG, readLockLoggingLevel, ((\"Cannot acquire read lock within \" + timeout) + \" millis. Will skip the file: \") + target);\n                        return false;\n                    }\n                }\n                try {\n                    lock = (timeout > 0) ? channel.tryLock() : channel.lock();\n                } catch (java.lang.IllegalStateException ex) {\n                }\n                if (lock != null) {\n                    org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG.trace(\"Acquired exclusive read lock: {} to file: {}\", lock, target);\n                    exclusive = true;\n                } else {\n                    boolean interrupted = sleep();\n                    if (interrupted) {\n                        return false;\n                    }\n                }\n            } \n        } catch (java.io.IOException e) {\n            if (timeout == 0) {\n                return false;\n            }\n            org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG.debug(\"Cannot acquire read lock. Will try again.\", e);\n            boolean interrupted = sleep();\n            if (interrupted) {\n                return false;\n            }\n        } finally {\n            if (!exclusive) {\n                org.apache.camel.util.IOHelper.close(channel, \"while acquiring exclusive read lock for file: \" + target, org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG);\n                org.apache.camel.util.IOHelper.close(randomAccessFile, \"while acquiring exclusive read lock for file: \" + target, org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG);\n                super.releaseExclusiveReadLockOnAbort(operations, file, exchange);\n            }\n        }\n        exchange.setProperty(Exchange.FILE_LOCK_EXCLUSIVE_LOCK, lock);\n        exchange.setProperty(Exchange.FILE_LOCK_RANDOM_ACCESS_FILE, randomAccessFile);\n        return true;\n    }\n\n    @java.lang.Override\n    protected void doReleaseExclusiveReadLock(org.apache.camel.component.file.GenericFileOperations<java.io.File> operations, org.apache.camel.component.file.GenericFile<java.io.File> file, org.apache.camel.Exchange exchange) throws java.lang.Exception {\n        super.doReleaseExclusiveReadLock(operations, file, exchange);\n        java.lang.String target = file.getFileName();\n        java.nio.channels.FileLock lock = exchange.getProperty(Exchange.FILE_LOCK_EXCLUSIVE_LOCK, java.nio.channels.FileLock.class);\n        java.io.RandomAccessFile rac = exchange.getProperty(Exchange.FILE_LOCK_RANDOM_ACCESS_FILE, java.io.RandomAccessFile.class);\n        if (lock != null) {\n            java.nio.channels.Channel channel = lock.acquiredBy();\n            try {\n                lock.release();\n            } finally {\n                org.apache.camel.util.IOHelper.close(channel, \"while releasing exclusive read lock for file: \" + target, org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG);\n                org.apache.camel.util.IOHelper.close(rac, \"while releasing exclusive read lock for file: \" + target, org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG);\n            }\n        }\n    }\n\n    private boolean sleep() {\n        org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG.trace(\"Exclusive read lock not granted. Sleeping for {} millis.\", checkInterval);\n        try {\n            java.lang.Thread.sleep(checkInterval);\n            return false;\n        } catch (java.lang.InterruptedException e) {\n            org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG.debug(\"Sleep interrupted while waiting for exclusive read lock, so breaking out\");\n            return true;\n        }\n    }\n\n    public long getTimeout() {\n        return timeout;\n    }\n\n    @java.lang.Override\n    public void setTimeout(long timeout) {\n        this.timeout = timeout;\n    }\n\n    @java.lang.Override\n    public void setCheckInterval(long checkInterval) {\n        this.checkInterval = checkInterval;\n    }\n\n    @java.lang.Override\n    public void setReadLockLoggingLevel(org.apache.camel.LoggingLevel readLockLoggingLevel) {\n        this.readLockLoggingLevel = readLockLoggingLevel;\n    }\n\n    {\n    }\n\n    public java.lang.String getCopyFromAbsoluteFilePath() {\n        return copyFromAbsoluteFilePath;\n    }\n\n    public void setCopyFromAbsoluteFilePath(java.lang.String copyFromAbsoluteFilePath) {\n        this.copyFromAbsoluteFilePath = copyFromAbsoluteFilePath;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "result.setCopyFromAbsoluteFilePath(source.getAbsoluteFilePath())",
            "src_parent": "{\n    if (!super.acquireExclusiveReadLock(operations, file, exchange)) {\n        return false;\n    }\n    java.io.File target = new java.io.File(file.getAbsoluteFilePath());\n    org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG.trace(\"Waiting for exclusive read lock to file: {}\", target);\n    java.nio.channels.FileChannel channel = null;\n    java.io.RandomAccessFile randomAccessFile = null;\n    boolean exclusive = false;\n    java.nio.channels.FileLock lock = null;\n    result.setCopyFromAbsoluteFilePath(source.getAbsoluteFilePath());\n    try {\n        randomAccessFile = new java.io.RandomAccessFile(target, \"rw\");\n        channel = randomAccessFile.getChannel();\n        org.apache.camel.util.StopWatch watch = new org.apache.camel.util.StopWatch();\n        while (!exclusive) {\n            if (timeout > 0) {\n                long delta = watch.taken();\n                if (delta > timeout) {\n                    org.apache.camel.util.CamelLogger.log(org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG, readLockLoggingLevel, ((\"Cannot acquire read lock within \" + timeout) + \" millis. Will skip the file: \") + target);\n                    return false;\n                }\n            }\n            try {\n                lock = (timeout > 0) ? channel.tryLock() : channel.lock();\n            } catch (java.lang.IllegalStateException ex) {\n            }\n            if (lock != null) {\n                org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG.trace(\"Acquired exclusive read lock: {} to file: {}\", lock, target);\n                exclusive = true;\n            } else {\n                boolean interrupted = sleep();\n                if (interrupted) {\n                    return false;\n                }\n            }\n        } \n    } catch (java.io.IOException e) {\n        if (timeout == 0) {\n            return false;\n        }\n        org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG.debug(\"Cannot acquire read lock. Will try again.\", e);\n        boolean interrupted = sleep();\n        if (interrupted) {\n            return false;\n        }\n    } finally {\n        if (!exclusive) {\n            org.apache.camel.util.IOHelper.close(channel, \"while acquiring exclusive read lock for file: \" + target, org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG);\n            org.apache.camel.util.IOHelper.close(randomAccessFile, \"while acquiring exclusive read lock for file: \" + target, org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy.LOG);\n            super.releaseExclusiveReadLockOnAbort(operations, file, exchange);\n        }\n    }\n    exchange.setProperty(Exchange.FILE_LOCK_EXCLUSIVE_LOCK, lock);\n    exchange.setProperty(Exchange.FILE_LOCK_RANDOM_ACCESS_FILE, randomAccessFile);\n    return true;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "FileLockExclusiveReadLockStrategy"
    }
  ],
  "id": "camel_7b1253db"
}