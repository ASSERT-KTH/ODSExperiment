{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "continue",
            "src_parent": "{\n    org.apache.camel.model.ChoiceDefinition choice = ((org.apache.camel.model.ChoiceDefinition) (out));\n    for (org.apache.camel.model.WhenDefinition when : choice.getWhenClauses()) {\n        java.util.List<org.apache.camel.model.ProcessorDefinition<?>> children = when.getOutputs();\n        org.apache.camel.model.ProcessorDefinitionHelper.doFindType(children, type, found);\n    }\n    if (choice.getOtherwise() != null) {\n        java.util.List<org.apache.camel.model.ProcessorDefinition<?>> children = choice.getOtherwise().getOutputs();\n        org.apache.camel.model.ProcessorDefinitionHelper.doFindType(children, type, found);\n    }\n    continue;\n}",
            "src_parent_type": "Block",
            "src_type": "Continue"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (type.isInstance(out)) {\n    found.add(((T) (out)));\n}",
            "dst_parent": "{\n    if (out instanceof org.apache.camel.model.SendDefinition) {\n        org.apache.camel.model.SendDefinition send = ((org.apache.camel.model.SendDefinition) (out));\n        java.util.List<org.apache.camel.model.ProcessorDefinition<?>> children = send.getOutputs();\n        org.apache.camel.model.ProcessorDefinitionHelper.doFindType(children, type, found);\n    }\n    if (out instanceof org.apache.camel.model.ChoiceDefinition) {\n        org.apache.camel.model.ChoiceDefinition choice = ((org.apache.camel.model.ChoiceDefinition) (out));\n        for (org.apache.camel.model.WhenDefinition when : choice.getWhenClauses()) {\n            java.util.List<org.apache.camel.model.ProcessorDefinition<?>> children = when.getOutputs();\n            org.apache.camel.model.ProcessorDefinitionHelper.doFindType(children, type, found);\n        }\n        if (choice.getOtherwise() != null) {\n            java.util.List<org.apache.camel.model.ProcessorDefinition<?>> children = choice.getOtherwise().getOutputs();\n            org.apache.camel.model.ProcessorDefinitionHelper.doFindType(children, type, found);\n        }\n        continue;\n    }\n    if (out instanceof org.apache.camel.model.TryDefinition) {\n        org.apache.camel.model.TryDefinition doTry = ((org.apache.camel.model.TryDefinition) (out));\n        java.util.List<org.apache.camel.model.ProcessorDefinition<?>> doTryOut = doTry.getOutputsWithoutCatches();\n        org.apache.camel.model.ProcessorDefinitionHelper.doFindType(doTryOut, type, found);\n        java.util.List<org.apache.camel.model.CatchDefinition> doTryCatch = doTry.getCatchClauses();\n        for (org.apache.camel.model.CatchDefinition doCatch : doTryCatch) {\n            org.apache.camel.model.ProcessorDefinitionHelper.doFindType(doCatch.getOutputs(), type, found);\n        }\n        if (doTry.getFinallyClause() != null) {\n            org.apache.camel.model.ProcessorDefinitionHelper.doFindType(doTry.getFinallyClause().getOutputs(), type, found);\n        }\n        continue;\n    }\n    if (out instanceof org.apache.camel.model.OutputDefinition) {\n        org.apache.camel.model.OutputDefinition outDef = ((org.apache.camel.model.OutputDefinition) (out));\n        java.util.List<org.apache.camel.model.ProcessorDefinition<?>> outDefOut = outDef.getOutputs();\n        org.apache.camel.model.ProcessorDefinitionHelper.doFindType(outDefOut, type, found);\n        continue;\n    }\n    if (type.isInstance(out)) {\n        found.add(((T) (out)));\n    }\n    java.util.List<org.apache.camel.model.ProcessorDefinition<?>> children = out.getOutputs();\n    org.apache.camel.model.ProcessorDefinitionHelper.doFindType(children, type, found);\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (type.isInstance(out)) {\n    found.add(((T) (out)));\n}",
            "src_parent": "{\n    if (type.isInstance(out)) {\n        found.add(((T) (out)));\n    }\n    if (out instanceof org.apache.camel.model.SendDefinition) {\n        org.apache.camel.model.SendDefinition send = ((org.apache.camel.model.SendDefinition) (out));\n        java.util.List<org.apache.camel.model.ProcessorDefinition<?>> children = send.getOutputs();\n        org.apache.camel.model.ProcessorDefinitionHelper.doFindType(children, type, found);\n    }\n    if (out instanceof org.apache.camel.model.ChoiceDefinition) {\n        org.apache.camel.model.ChoiceDefinition choice = ((org.apache.camel.model.ChoiceDefinition) (out));\n        for (org.apache.camel.model.WhenDefinition when : choice.getWhenClauses()) {\n            java.util.List<org.apache.camel.model.ProcessorDefinition<?>> children = when.getOutputs();\n            org.apache.camel.model.ProcessorDefinitionHelper.doFindType(children, type, found);\n        }\n        if (choice.getOtherwise() != null) {\n            java.util.List<org.apache.camel.model.ProcessorDefinition<?>> children = choice.getOtherwise().getOutputs();\n            org.apache.camel.model.ProcessorDefinitionHelper.doFindType(children, type, found);\n        }\n    }\n    if (out instanceof org.apache.camel.model.TryDefinition) {\n        org.apache.camel.model.TryDefinition doTry = ((org.apache.camel.model.TryDefinition) (out));\n        java.util.List<org.apache.camel.model.ProcessorDefinition<?>> doTryOut = doTry.getOutputsWithoutCatches();\n        org.apache.camel.model.ProcessorDefinitionHelper.doFindType(doTryOut, type, found);\n        java.util.List<org.apache.camel.model.CatchDefinition> doTryCatch = doTry.getCatchClauses();\n        for (org.apache.camel.model.CatchDefinition doCatch : doTryCatch) {\n            org.apache.camel.model.ProcessorDefinitionHelper.doFindType(doCatch.getOutputs(), type, found);\n        }\n        if (doTry.getFinallyClause() != null) {\n            org.apache.camel.model.ProcessorDefinitionHelper.doFindType(doTry.getFinallyClause().getOutputs(), type, found);\n        }\n        continue;\n    }\n    if (out instanceof org.apache.camel.model.OutputDefinition) {\n        org.apache.camel.model.OutputDefinition outDef = ((org.apache.camel.model.OutputDefinition) (out));\n        java.util.List<org.apache.camel.model.ProcessorDefinition<?>> outDefOut = outDef.getOutputs();\n        org.apache.camel.model.ProcessorDefinitionHelper.doFindType(outDefOut, type, found);\n        continue;\n    }\n    java.util.List<org.apache.camel.model.ProcessorDefinition<?>> children = out.getOutputs();\n    org.apache.camel.model.ProcessorDefinitionHelper.doFindType(children, type, found);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "ProcessorDefinitionHelper"
    }
  ],
  "id": "camel_689147e9"
}