{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Try",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "session.setProjects(projectDependencyGraph.getSortedProjects())",
            "dst_parent": "{\n    if (request.getStartTime() != null) {\n        request.getSystemProperties().put(\"${build.timestamp}\", new java.text.SimpleDateFormat(\"yyyyMMdd-hhmm\").format(request.getStartTime()));\n    }\n    request.setStartTime(new java.util.Date());\n    org.apache.maven.execution.MavenExecutionResult result = new org.apache.maven.execution.DefaultMavenExecutionResult();\n    try {\n        validateLocalRepository(request);\n    } catch (org.apache.maven.repository.LocalRepositoryNotAccessibleException e) {\n        return addExceptionToResult(result, e);\n    }\n    org.eclipse.aether.DefaultRepositorySystemSession repoSession = ((org.eclipse.aether.DefaultRepositorySystemSession) (newRepositorySession(request)));\n    org.apache.maven.execution.MavenSession session = new org.apache.maven.execution.MavenSession(container, repoSession, request, result);\n    legacySupport.setSession(session);\n    try {\n        for (org.apache.maven.AbstractMavenLifecycleParticipant listener : getLifecycleParticipants(java.util.Collections.<org.apache.maven.project.MavenProject>emptyList())) {\n            listener.afterSessionStart(session);\n        }\n    } catch (org.apache.maven.MavenExecutionException e) {\n        return addExceptionToResult(result, e);\n    }\n    eventCatapult.fire(ExecutionEvent.Type.ProjectDiscoveryStarted, session, null);\n    java.util.List<org.apache.maven.project.MavenProject> projects;\n    try {\n        projects = getProjectsForMavenReactor(session);\n        session.setAllProjects(projects);\n    } catch (org.apache.maven.project.ProjectBuildingException e) {\n        return addExceptionToResult(result, e);\n    }\n    validateProjects(projects);\n    org.apache.maven.execution.ProjectDependencyGraph projectDependencyGraph = createProjectDependencyGraph(projects, request, result, true);\n    if (result.hasExceptions()) {\n        return result;\n    }\n    session.setProjects(projectDependencyGraph.getSortedProjects());\n    try {\n        session.setProjectMap(getProjectMap(session.getProjects()));\n    } catch (org.apache.maven.DuplicateProjectException e) {\n        return addExceptionToResult(result, e);\n    }\n    org.eclipse.aether.repository.WorkspaceReader reactorWorkspace;\n    sessionScope.enter();\n    sessionScope.seed(org.apache.maven.execution.MavenSession.class, session);\n    try {\n        reactorWorkspace = container.lookup(org.eclipse.aether.repository.WorkspaceReader.class, ReactorReader.HINT);\n    } catch (org.codehaus.plexus.component.repository.exception.ComponentLookupException e) {\n        return addExceptionToResult(result, e);\n    }\n    repoSession.setWorkspaceReader(org.eclipse.aether.util.repository.ChainedWorkspaceReader.newInstance(reactorWorkspace, repoSession.getWorkspaceReader()));\n    repoSession.setReadOnly();\n    java.lang.ClassLoader originalClassLoader = java.lang.Thread.currentThread().getContextClassLoader();\n    try {\n        for (org.apache.maven.AbstractMavenLifecycleParticipant listener : getLifecycleParticipants(projects)) {\n            java.lang.Thread.currentThread().setContextClassLoader(listener.getClass().getClassLoader());\n            listener.afterProjectsRead(session);\n        }\n    } catch (org.apache.maven.MavenExecutionException e) {\n        return addExceptionToResult(result, e);\n    } finally {\n        java.lang.Thread.currentThread().setContextClassLoader(originalClassLoader);\n    }\n    projectDependencyGraph = createProjectDependencyGraph(session.getProjects(), request, result, false);\n    if (result.hasExceptions()) {\n        try {\n            afterSessionEnd(projects, session);\n        } catch (org.apache.maven.MavenExecutionException e) {\n            return addExceptionToResult(result, e);\n        }\n        return result;\n    }\n    session.setProjects(projectDependencyGraph.getSortedProjects());\n    session.setProjectDependencyGraph(projectDependencyGraph);\n    result.setTopologicallySortedProjects(session.getProjects());\n    result.setProject(session.getTopLevelProject());\n    lifecycleStarter.execute(session);\n    validateActivatedProfiles(session.getProjects(), request.getActiveProfiles());\n    if (session.getResult().hasExceptions()) {\n        return addExceptionToResult(result, session.getResult().getExceptions().get(0));\n    }\n    try {\n        afterSessionEnd(projects, session);\n    } catch (org.apache.maven.MavenExecutionException e) {\n        return addExceptionToResult(result, e);\n    }\n    sessionScope.exit();\n    return result;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "session.setProjects(projectDependencyGraph.getSortedProjects())",
            "src_parent": "{\n    if (request.getStartTime() != null) {\n        request.getSystemProperties().put(\"${build.timestamp}\", new java.text.SimpleDateFormat(\"yyyyMMdd-hhmm\").format(request.getStartTime()));\n    }\n    request.setStartTime(new java.util.Date());\n    org.apache.maven.execution.MavenExecutionResult result = new org.apache.maven.execution.DefaultMavenExecutionResult();\n    try {\n        validateLocalRepository(request);\n    } catch (org.apache.maven.repository.LocalRepositoryNotAccessibleException e) {\n        return addExceptionToResult(result, e);\n    }\n    org.eclipse.aether.DefaultRepositorySystemSession repoSession = ((org.eclipse.aether.DefaultRepositorySystemSession) (newRepositorySession(request)));\n    org.apache.maven.execution.MavenSession session = new org.apache.maven.execution.MavenSession(container, repoSession, request, result);\n    legacySupport.setSession(session);\n    try {\n        for (org.apache.maven.AbstractMavenLifecycleParticipant listener : getLifecycleParticipants(java.util.Collections.<org.apache.maven.project.MavenProject>emptyList())) {\n            listener.afterSessionStart(session);\n        }\n    } catch (org.apache.maven.MavenExecutionException e) {\n        return addExceptionToResult(result, e);\n    }\n    eventCatapult.fire(ExecutionEvent.Type.ProjectDiscoveryStarted, session, null);\n    java.util.List<org.apache.maven.project.MavenProject> projects;\n    try {\n        projects = getProjectsForMavenReactor(session);\n        session.setAllProjects(projects);\n    } catch (org.apache.maven.project.ProjectBuildingException e) {\n        return addExceptionToResult(result, e);\n    }\n    validateProjects(projects);\n    org.apache.maven.execution.ProjectDependencyGraph projectDependencyGraph = createProjectDependencyGraph(projects, request, result, true);\n    session.setProjects(projectDependencyGraph.getSortedProjects());\n    if (result.hasExceptions()) {\n        return result;\n    }\n    try {\n        session.setProjectMap(getProjectMap(session.getProjects()));\n    } catch (org.apache.maven.DuplicateProjectException e) {\n        return addExceptionToResult(result, e);\n    }\n    org.eclipse.aether.repository.WorkspaceReader reactorWorkspace;\n    sessionScope.enter();\n    sessionScope.seed(org.apache.maven.execution.MavenSession.class, session);\n    try {\n        reactorWorkspace = container.lookup(org.eclipse.aether.repository.WorkspaceReader.class, ReactorReader.HINT);\n    } catch (org.codehaus.plexus.component.repository.exception.ComponentLookupException e) {\n        return addExceptionToResult(result, e);\n    }\n    repoSession.setWorkspaceReader(org.eclipse.aether.util.repository.ChainedWorkspaceReader.newInstance(reactorWorkspace, repoSession.getWorkspaceReader()));\n    repoSession.setReadOnly();\n    java.lang.ClassLoader originalClassLoader = java.lang.Thread.currentThread().getContextClassLoader();\n    try {\n        for (org.apache.maven.AbstractMavenLifecycleParticipant listener : getLifecycleParticipants(projects)) {\n            java.lang.Thread.currentThread().setContextClassLoader(listener.getClass().getClassLoader());\n            listener.afterProjectsRead(session);\n        }\n    } catch (org.apache.maven.MavenExecutionException e) {\n        return addExceptionToResult(result, e);\n    } finally {\n        java.lang.Thread.currentThread().setContextClassLoader(originalClassLoader);\n    }\n    projectDependencyGraph = createProjectDependencyGraph(session.getProjects(), request, result, false);\n    if (result.hasExceptions()) {\n        try {\n            afterSessionEnd(projects, session);\n        } catch (org.apache.maven.MavenExecutionException e) {\n            return addExceptionToResult(result, e);\n        }\n        return result;\n    }\n    session.setProjects(projectDependencyGraph.getSortedProjects());\n    session.setProjectDependencyGraph(projectDependencyGraph);\n    result.setTopologicallySortedProjects(session.getProjects());\n    result.setProject(session.getTopLevelProject());\n    lifecycleStarter.execute(session);\n    validateActivatedProfiles(session.getProjects(), request.getActiveProfiles());\n    if (session.getResult().hasExceptions()) {\n        return addExceptionToResult(result, session.getResult().getExceptions().get(0));\n    }\n    try {\n        afterSessionEnd(projects, session);\n    } catch (org.apache.maven.MavenExecutionException e) {\n        return addExceptionToResult(result, e);\n    }\n    sessionScope.exit();\n    return result;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "DefaultMaven"
    }
  ],
  "id": "maven_bef7fac6"
}