{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "getNumOccupiedMemorySegments()",
            "dst_parent": "getNumOccupiedMemorySegments() < 2",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "getBuildSideBlockCount()",
            "src_parent": "(getBuildSideBlockCount() + this.numOverflowSegments)",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "this.partitionBuffers",
            "dst_parent": "this.partitionBuffers.length",
            "dst_parent_type": "FieldRead",
            "dst_type": "FieldRead",
            "operator": "UPD",
            "src": "this.numOverflowSegments",
            "src_parent": "(getBuildSideBlockCount() + this.numOverflowSegments)",
            "src_parent_type": "BinaryOperator",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(getBuildSideBlockCount() + this.numOverflowSegments)",
            "src_parent": "(getBuildSideBlockCount() + this.numOverflowSegments) < 2",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public int getNumOccupiedMemorySegments() {\n    final int numPartitionBuffers = (this.partitionBuffers != null) ? this.partitionBuffers.length : 1;\n    return numPartitionBuffers + numOverflowSegments;\n}",
            "src_parent": "public class HashPartition<BT, PT> extends org.apache.flink.runtime.memory.AbstractPagedInputView implements org.apache.flink.core.memory.SeekableDataInputView {\n    protected org.apache.flink.core.memory.MemorySegment[] overflowSegments;\n\n    protected int numOverflowSegments;\n\n    protected int nextOverflowBucket;\n\n    private final org.apache.flink.api.common.typeutils.TypeSerializer<BT> buildSideSerializer;\n\n    private final org.apache.flink.api.common.typeutils.TypeSerializer<PT> probeSideSerializer;\n\n    protected org.apache.flink.core.memory.MemorySegment[] partitionBuffers;\n\n    private int currentBufferNum;\n\n    private int finalBufferLimit;\n\n    private org.apache.flink.runtime.operators.hash.HashPartition.BuildSideBuffer buildSideWriteBuffer;\n\n    protected org.apache.flink.runtime.io.disk.iomanager.ChannelWriterOutputView probeSideBuffer;\n\n    private org.apache.flink.runtime.io.disk.RandomAccessOutputView overwriteBuffer;\n\n    private long buildSideRecordCounter;\n\n    protected long probeSideRecordCounter;\n\n    private final int segmentSizeBits;\n\n    private final int memorySegmentSize;\n\n    private final int partitionNumber;\n\n    protected int recursionLevel;\n\n    private org.apache.flink.runtime.io.disk.iomanager.BlockChannelWriter<org.apache.flink.core.memory.MemorySegment> buildSideChannel;\n\n    protected org.apache.flink.runtime.io.disk.iomanager.BlockChannelWriter<org.apache.flink.core.memory.MemorySegment> probeSideChannel;\n\n    protected boolean furtherPartitioning = false;\n\n    protected void setFurtherPatitioning(boolean v) {\n        furtherPartitioning = v;\n    }\n\n    HashPartition(org.apache.flink.api.common.typeutils.TypeSerializer<BT> buildSideAccessors, org.apache.flink.api.common.typeutils.TypeSerializer<PT> probeSideAccessors, int partitionNumber, int recursionLevel, org.apache.flink.core.memory.MemorySegment initialBuffer, org.apache.flink.core.memory.MemorySegmentSource memSource, int segmentSize) {\n        super(0);\n        this.buildSideSerializer = buildSideAccessors;\n        this.probeSideSerializer = probeSideAccessors;\n        this.partitionNumber = partitionNumber;\n        this.recursionLevel = recursionLevel;\n        this.memorySegmentSize = segmentSize;\n        this.segmentSizeBits = org.apache.flink.runtime.util.MathUtils.log2strict(segmentSize);\n        this.overflowSegments = new org.apache.flink.core.memory.MemorySegment[2];\n        this.numOverflowSegments = 0;\n        this.nextOverflowBucket = 0;\n        this.buildSideWriteBuffer = new org.apache.flink.runtime.operators.hash.HashPartition.BuildSideBuffer(initialBuffer, memSource);\n    }\n\n    HashPartition(org.apache.flink.api.common.typeutils.TypeSerializer<BT> buildSideAccessors, org.apache.flink.api.common.typeutils.TypeSerializer<PT> probeSideAccessors, int partitionNumber, int recursionLevel, java.util.List<org.apache.flink.core.memory.MemorySegment> buffers, long buildSideRecordCounter, int segmentSize, int lastSegmentLimit) {\n        super(0);\n        this.buildSideSerializer = buildSideAccessors;\n        this.probeSideSerializer = probeSideAccessors;\n        this.partitionNumber = partitionNumber;\n        this.recursionLevel = recursionLevel;\n        this.memorySegmentSize = segmentSize;\n        this.segmentSizeBits = org.apache.flink.runtime.util.MathUtils.log2strict(segmentSize);\n        this.finalBufferLimit = lastSegmentLimit;\n        this.partitionBuffers = ((org.apache.flink.core.memory.MemorySegment[]) (buffers.toArray(new org.apache.flink.core.memory.MemorySegment[buffers.size()])));\n        this.buildSideRecordCounter = buildSideRecordCounter;\n        this.overflowSegments = new org.apache.flink.core.memory.MemorySegment[2];\n        this.numOverflowSegments = 0;\n        this.nextOverflowBucket = 0;\n    }\n\n    public int getPartitionNumber() {\n        return this.partitionNumber;\n    }\n\n    public int getRecursionLevel() {\n        return this.recursionLevel;\n    }\n\n    public final boolean isInMemory() {\n        return this.buildSideChannel == null;\n    }\n\n    public int getNumOccupiedMemorySegments() {\n        final int numPartitionBuffers = (this.partitionBuffers != null) ? this.partitionBuffers.length : 1;\n        return numPartitionBuffers + numOverflowSegments;\n    }\n\n    public int getBuildSideBlockCount() {\n        return this.partitionBuffers == null ? this.buildSideWriteBuffer.getBlockCount() : this.partitionBuffers.length;\n    }\n\n    public int getProbeSideBlockCount() {\n        return this.probeSideBuffer == null ? -1 : this.probeSideBuffer.getBlockCount();\n    }\n\n    public long getBuildSideRecordCount() {\n        return this.buildSideRecordCounter;\n    }\n\n    public long getProbeSideRecordCount() {\n        return this.probeSideRecordCounter;\n    }\n\n    public org.apache.flink.runtime.io.disk.iomanager.BlockChannelWriter<org.apache.flink.core.memory.MemorySegment> getBuildSideChannel() {\n        return this.buildSideChannel;\n    }\n\n    public org.apache.flink.runtime.io.disk.iomanager.BlockChannelWriter<org.apache.flink.core.memory.MemorySegment> getProbeSideChannel() {\n        return this.probeSideChannel;\n    }\n\n    public final long insertIntoBuildBuffer(BT record) throws java.io.IOException {\n        this.buildSideRecordCounter++;\n        if (isInMemory()) {\n            final long pointer = this.buildSideWriteBuffer.getCurrentPointer();\n            this.buildSideSerializer.serialize(record, this.buildSideWriteBuffer);\n            return isInMemory() ? pointer : -1;\n        } else {\n            this.buildSideSerializer.serialize(record, this.buildSideWriteBuffer);\n            return -1;\n        }\n    }\n\n    public final void insertIntoProbeBuffer(PT record) throws java.io.IOException {\n        this.probeSideSerializer.serialize(record, this.probeSideBuffer);\n        this.probeSideRecordCounter++;\n    }\n\n    public int spillPartition(java.util.List<org.apache.flink.core.memory.MemorySegment> target, org.apache.flink.runtime.io.disk.iomanager.IOManager ioAccess, org.apache.flink.runtime.io.disk.iomanager.FileIOChannel.ID targetChannel, java.util.concurrent.LinkedBlockingQueue<org.apache.flink.core.memory.MemorySegment> bufferReturnQueue) throws java.io.IOException {\n        if (!isInMemory()) {\n            throw new java.lang.RuntimeException(\"Bug in Hybrid Hash Join: \" + \"Request to spill a partition that has already been spilled.\");\n        }\n        if (getNumOccupiedMemorySegments() < 2) {\n            throw new java.lang.RuntimeException(\"Bug in Hybrid Hash Join: \" + \"Request to spill a partition with less than two buffers.\");\n        }\n        for (int i = 0; i < this.numOverflowSegments; i++) {\n            target.add(this.overflowSegments[i]);\n        }\n        this.overflowSegments = null;\n        this.numOverflowSegments = 0;\n        this.nextOverflowBucket = 0;\n        this.buildSideChannel = ioAccess.createBlockChannelWriter(targetChannel, bufferReturnQueue);\n        return this.buildSideWriteBuffer.spill(this.buildSideChannel);\n    }\n\n    public void finalizeBuildPhase(org.apache.flink.runtime.io.disk.iomanager.IOManager ioAccess, org.apache.flink.runtime.io.disk.iomanager.FileIOChannel.Enumerator probeChannelEnumerator, java.util.concurrent.LinkedBlockingQueue<org.apache.flink.core.memory.MemorySegment> bufferReturnQueue) throws java.io.IOException {\n        this.finalBufferLimit = this.buildSideWriteBuffer.getCurrentPositionInSegment();\n        this.partitionBuffers = this.buildSideWriteBuffer.close();\n        if (!isInMemory()) {\n            this.buildSideChannel.close();\n            this.probeSideChannel = ioAccess.createBlockChannelWriter(probeChannelEnumerator.next(), bufferReturnQueue);\n            this.probeSideBuffer = new org.apache.flink.runtime.io.disk.iomanager.ChannelWriterOutputView(this.probeSideChannel, this.memorySegmentSize);\n        }\n    }\n\n    public int finalizeProbePhase(java.util.List<org.apache.flink.core.memory.MemorySegment> freeMemory, java.util.List<org.apache.flink.runtime.operators.hash.HashPartition<BT, PT>> spilledPartitions) throws java.io.IOException {\n        if (isInMemory()) {\n            for (int k = 0; k < this.numOverflowSegments; k++) {\n                freeMemory.add(this.overflowSegments[k]);\n            }\n            this.overflowSegments = null;\n            this.numOverflowSegments = 0;\n            this.nextOverflowBucket = 0;\n            for (org.apache.flink.core.memory.MemorySegment partitionBuffer : this.partitionBuffers) {\n                freeMemory.add(partitionBuffer);\n            }\n            this.partitionBuffers = null;\n            return 0;\n        } else if (this.probeSideRecordCounter == 0) {\n            freeMemory.add(this.probeSideBuffer.getCurrentSegment());\n            this.probeSideChannel.close();\n            this.buildSideChannel.deleteChannel();\n            this.probeSideChannel.deleteChannel();\n            return 0;\n        } else {\n            this.probeSideBuffer.close();\n            this.probeSideChannel.close();\n            spilledPartitions.add(this);\n            return 1;\n        }\n    }\n\n    public void clearAllMemory(java.util.List<org.apache.flink.core.memory.MemorySegment> target) {\n        if (this.buildSideWriteBuffer != null) {\n            if (this.buildSideWriteBuffer.getCurrentSegment() != null) {\n                target.add(this.buildSideWriteBuffer.getCurrentSegment());\n            }\n            target.addAll(this.buildSideWriteBuffer.targetList);\n            this.buildSideWriteBuffer.targetList.clear();\n            this.buildSideWriteBuffer = null;\n        }\n        if ((this.probeSideBuffer != null) && (this.probeSideBuffer.getCurrentSegment() != null)) {\n            target.add(this.probeSideBuffer.getCurrentSegment());\n            this.probeSideBuffer = null;\n        }\n        if (this.overflowSegments != null) {\n            for (int k = 0; k < this.numOverflowSegments; k++) {\n                target.add(this.overflowSegments[k]);\n            }\n        }\n        if (this.partitionBuffers != null) {\n            for (org.apache.flink.core.memory.MemorySegment partitionBuffer : this.partitionBuffers) {\n                target.add(partitionBuffer);\n            }\n            this.partitionBuffers = null;\n        }\n        try {\n            if (this.buildSideChannel != null) {\n                this.buildSideChannel.close();\n                this.buildSideChannel.deleteChannel();\n            }\n            if (this.probeSideChannel != null) {\n                this.probeSideChannel.close();\n                this.probeSideChannel.deleteChannel();\n            }\n        } catch (java.io.IOException ioex) {\n            throw new java.lang.RuntimeException(\"Error deleting the partition files. Some temporary files might not be removed.\");\n        }\n    }\n\n    final org.apache.flink.runtime.operators.hash.HashPartition<BT, PT>.PartitionIterator getPartitionIterator(org.apache.flink.api.common.typeutils.TypeComparator<BT> comparator) throws java.io.IOException {\n        return new PartitionIterator(comparator);\n    }\n\n    final int getLastSegmentLimit() {\n        return this.finalBufferLimit;\n    }\n\n    final org.apache.flink.core.memory.SeekableDataOutputView getWriteView() {\n        if (this.overwriteBuffer == null) {\n            this.overwriteBuffer = new org.apache.flink.runtime.io.disk.RandomAccessOutputView(this.partitionBuffers, this.memorySegmentSize);\n        }\n        return this.overwriteBuffer;\n    }\n\n    public void prepareProbePhase(org.apache.flink.runtime.io.disk.iomanager.IOManager ioAccess, org.apache.flink.runtime.io.disk.iomanager.FileIOChannel.Enumerator probeChannelEnumerator, java.util.concurrent.LinkedBlockingQueue<org.apache.flink.core.memory.MemorySegment> bufferReturnQueue) throws java.io.IOException {\n        if (isInMemory()) {\n            return;\n        }\n        this.probeSideChannel = ioAccess.createBlockChannelWriter(probeChannelEnumerator.next(), bufferReturnQueue);\n        this.probeSideBuffer = new org.apache.flink.runtime.io.disk.iomanager.ChannelWriterOutputView(this.probeSideChannel, this.memorySegmentSize);\n    }\n\n    public void setReadPosition(long pointer) {\n        final int bufferNum = ((int) (pointer >>> this.segmentSizeBits));\n        final int offset = ((int) (pointer & (this.memorySegmentSize - 1)));\n        this.currentBufferNum = bufferNum;\n        seekInput(this.partitionBuffers[bufferNum], offset, bufferNum < (this.partitionBuffers.length - 1) ? this.memorySegmentSize : this.finalBufferLimit);\n    }\n\n    @java.lang.Override\n    protected org.apache.flink.core.memory.MemorySegment nextSegment(org.apache.flink.core.memory.MemorySegment current) throws java.io.IOException {\n        this.currentBufferNum++;\n        if (this.currentBufferNum < this.partitionBuffers.length) {\n            return this.partitionBuffers[this.currentBufferNum];\n        } else {\n            throw new java.io.EOFException();\n        }\n    }\n\n    @java.lang.Override\n    protected int getLimitForSegment(org.apache.flink.core.memory.MemorySegment segment) {\n        return segment == this.partitionBuffers[partitionBuffers.length - 1] ? this.finalBufferLimit : this.memorySegmentSize;\n    }\n\n    protected static final class BuildSideBuffer extends org.apache.flink.runtime.memory.AbstractPagedOutputView {\n        private final java.util.ArrayList<org.apache.flink.core.memory.MemorySegment> targetList;\n\n        private final org.apache.flink.core.memory.MemorySegmentSource memSource;\n\n        private org.apache.flink.runtime.io.disk.iomanager.BlockChannelWriter<org.apache.flink.core.memory.MemorySegment> writer;\n\n        private int currentBlockNumber;\n\n        private final int sizeBits;\n\n        private BuildSideBuffer(org.apache.flink.core.memory.MemorySegment initialSegment, org.apache.flink.core.memory.MemorySegmentSource memSource) {\n            super(initialSegment, initialSegment.size(), 0);\n            this.targetList = new java.util.ArrayList<org.apache.flink.core.memory.MemorySegment>();\n            this.memSource = memSource;\n            this.sizeBits = org.apache.flink.runtime.util.MathUtils.log2strict(initialSegment.size());\n        }\n\n        @java.lang.Override\n        protected org.apache.flink.core.memory.MemorySegment nextSegment(org.apache.flink.core.memory.MemorySegment current, int bytesUsed) throws java.io.IOException {\n            finalizeSegment(current, bytesUsed);\n            final org.apache.flink.core.memory.MemorySegment next;\n            if (this.writer == null) {\n                this.targetList.add(current);\n                next = this.memSource.nextSegment();\n            } else {\n                this.writer.writeBlock(current);\n                try {\n                    next = this.writer.getReturnQueue().take();\n                } catch (java.lang.InterruptedException iex) {\n                    throw new java.io.IOException(\"Hash Join Partition was interrupted while grabbing a new write-behind buffer.\");\n                }\n            }\n            this.currentBlockNumber++;\n            return next;\n        }\n\n        long getCurrentPointer() {\n            return (((long) (this.currentBlockNumber)) << this.sizeBits) + getCurrentPositionInSegment();\n        }\n\n        int getBlockCount() {\n            return this.currentBlockNumber + 1;\n        }\n\n        int spill(org.apache.flink.runtime.io.disk.iomanager.BlockChannelWriter<org.apache.flink.core.memory.MemorySegment> writer) throws java.io.IOException {\n            this.writer = writer;\n            final int numSegments = this.targetList.size();\n            for (int i = 0; i < numSegments; i++) {\n                this.writer.writeBlock(this.targetList.get(i));\n            }\n            this.targetList.clear();\n            return numSegments;\n        }\n\n        org.apache.flink.core.memory.MemorySegment[] close() throws java.io.IOException {\n            final org.apache.flink.core.memory.MemorySegment current = getCurrentSegment();\n            if (current == null) {\n                throw new java.lang.IllegalStateException(\"Illegal State in HashPartition: No current buffer when finilizing build side.\");\n            }\n            finalizeSegment(current, getCurrentPositionInSegment());\n            clear();\n            if (this.writer == null) {\n                this.targetList.add(current);\n                org.apache.flink.core.memory.MemorySegment[] buffers = this.targetList.toArray(new org.apache.flink.core.memory.MemorySegment[this.targetList.size()]);\n                this.targetList.clear();\n                return buffers;\n            } else {\n                writer.writeBlock(current);\n                return null;\n            }\n        }\n\n        private void finalizeSegment(org.apache.flink.core.memory.MemorySegment seg, int bytesUsed) {\n        }\n    }\n\n    final class PartitionIterator implements org.apache.flink.util.MutableObjectIterator<BT> {\n        private final org.apache.flink.api.common.typeutils.TypeComparator<BT> comparator;\n\n        private long currentPointer;\n\n        private int currentHashCode;\n\n        private PartitionIterator(final org.apache.flink.api.common.typeutils.TypeComparator<BT> comparator) throws java.io.IOException {\n            this.comparator = comparator;\n            setReadPosition(0);\n        }\n\n        public final BT next(BT reuse) throws java.io.IOException {\n            final int pos = org.apache.flink.runtime.operators.hash.HashPartition.PartitionIterator.getCurrentPositionInSegment();\n            final int buffer = HashPartition.this.currentBufferNum;\n            this.currentPointer = (((long) (buffer)) << HashPartition.this.segmentSizeBits) + pos;\n            try {\n                reuse = HashPartition.this.buildSideSerializer.deserialize(reuse, HashPartition.this);\n                this.currentHashCode = this.comparator.hash(reuse);\n                return reuse;\n            } catch (java.io.EOFException eofex) {\n                return null;\n            }\n        }\n\n        public final BT next() throws java.io.IOException {\n            final int pos = org.apache.flink.runtime.operators.hash.HashPartition.PartitionIterator.getCurrentPositionInSegment();\n            final int buffer = HashPartition.this.currentBufferNum;\n            this.currentPointer = (((long) (buffer)) << HashPartition.this.segmentSizeBits) + pos;\n            try {\n                BT result = HashPartition.this.buildSideSerializer.deserialize(HashPartition.this);\n                this.currentHashCode = this.comparator.hash(result);\n                return result;\n            } catch (java.io.EOFException eofex) {\n                return null;\n            }\n        }\n\n        protected final long getPointer() {\n            return this.currentPointer;\n        }\n\n        protected final int getCurrentHashCode() {\n            return this.currentHashCode;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "getNumOccupiedMemorySegments()",
            "dst_parent": "getNumOccupiedMemorySegments() < 2",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "getBuildSideBlockCount()",
            "src_parent": "(getBuildSideBlockCount() + this.numOverflowSegments)",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "this.partitionBuffers",
            "dst_parent": "this.partitionBuffers.length",
            "dst_parent_type": "FieldRead",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "this.numOverflowSegments",
            "src_parent": "(getBuildSideBlockCount() + this.numOverflowSegments)",
            "src_parent_type": "BinaryOperator",
            "src_type": "FieldRead"
          }
        }
      ],
      "file_name": "HashPartition"
    }
  ],
  "id": "flink_af477563"
}