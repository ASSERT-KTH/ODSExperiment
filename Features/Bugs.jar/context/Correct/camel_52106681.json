{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (exchange.hasOut()) {\n    if (log.isTraceEnabled()) {\n        log.trace(\"Removing the out message to avoid some uncertain behavior\");\n    }\n    exchange.setOut(null);\n}",
            "src_parent": "{\n    if (log.isTraceEnabled()) {\n        log.trace(\"Using the original IN message instead of current\");\n    }\n    org.apache.camel.Message original = exchange.getUnitOfWork().getOriginalInMessage();\n    exchange.setIn(original);\n    if (exchange.hasOut()) {\n        if (log.isTraceEnabled()) {\n            log.trace(\"Removing the out message to avoid some uncertain behavior\");\n        }\n        exchange.setOut(null);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.camel.util.MessageHelper.resetStreamCache(exchange.getIn())",
            "dst_parent": "{\n    if (data.useOriginalInMessage) {\n        if (log.isTraceEnabled()) {\n            log.trace(\"Using the original IN message instead of current\");\n        }\n        org.apache.camel.Message original = exchange.getUnitOfWork().getOriginalInMessage();\n        exchange.setIn(original);\n        if (exchange.hasOut()) {\n            if (log.isTraceEnabled()) {\n                log.trace(\"Removing the out message to avoid some uncertain behavior\");\n            }\n            exchange.setOut(null);\n        }\n    }\n    org.apache.camel.util.MessageHelper.resetStreamCache(exchange.getIn());\n    if (log.isTraceEnabled()) {\n        log.trace(((\"Failure processor \" + processor) + \" is processing Exchange: \") + exchange);\n    }\n    exchange.setProperty(Exchange.FAILURE_ENDPOINT, exchange.getProperty(Exchange.TO_ENDPOINT));\n    org.apache.camel.AsyncProcessor afp = org.apache.camel.impl.converter.AsyncProcessorTypeConverter.convert(processor);\n    sync = org.apache.camel.util.AsyncProcessorHelper.process(afp, exchange, new org.apache.camel.AsyncCallback() {\n        public void done(boolean sync) {\n            if (log.isTraceEnabled()) {\n                log.trace(((\"Failure processor done: \" + processor) + \" processing Exchange: \") + exchange);\n            }\n            try {\n                prepareExchangeAfterFailure(exchange, data);\n                boolean deadLetterChannel = (processor == data.deadLetterProcessor) && (data.deadLetterProcessor != null);\n                org.apache.camel.util.EventHelper.notifyExchangeFailureHandled(exchange.getContext(), exchange, processor, deadLetterChannel);\n            } finally {\n                data.sync &= sync;\n                callback.done(data.sync);\n            }\n        }\n    });\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "org.apache.camel.util.MessageHelper.resetStreamCache(exchange.getIn())",
            "src_parent": "{\n    org.apache.camel.util.MessageHelper.resetStreamCache(exchange.getIn());\n    if (data.useOriginalInMessage) {\n        if (log.isTraceEnabled()) {\n            log.trace(\"Using the original IN message instead of current\");\n        }\n        org.apache.camel.Message original = exchange.getUnitOfWork().getOriginalInMessage();\n        exchange.setIn(original);\n    }\n    if (log.isTraceEnabled()) {\n        log.trace(((\"Failure processor \" + processor) + \" is processing Exchange: \") + exchange);\n    }\n    exchange.setProperty(Exchange.FAILURE_ENDPOINT, exchange.getProperty(Exchange.TO_ENDPOINT));\n    org.apache.camel.AsyncProcessor afp = org.apache.camel.impl.converter.AsyncProcessorTypeConverter.convert(processor);\n    sync = org.apache.camel.util.AsyncProcessorHelper.process(afp, exchange, new org.apache.camel.AsyncCallback() {\n        public void done(boolean sync) {\n            if (log.isTraceEnabled()) {\n                log.trace(((\"Failure processor done: \" + processor) + \" processing Exchange: \") + exchange);\n            }\n            try {\n                prepareExchangeAfterFailure(exchange, data);\n                boolean deadLetterChannel = (processor == data.deadLetterProcessor) && (data.deadLetterProcessor != null);\n                org.apache.camel.util.EventHelper.notifyExchangeFailureHandled(exchange.getContext(), exchange, processor, deadLetterChannel);\n            } finally {\n                data.sync &= sync;\n                callback.done(data.sync);\n            }\n        }\n    });\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "RedeliveryErrorHandler"
    }
  ],
  "id": "camel_52106681"
}