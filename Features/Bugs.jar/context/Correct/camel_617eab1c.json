{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "parameterValue != null",
            "src_parent": "if (parameterValue != null) {\n    if (\"null\".equals(parameterValue)) {\n        return java.lang.Void.TYPE;\n    }\n    exp = exchange.getContext().getTypeConverter().convertTo(java.lang.String.class, parameterValue);\n    if (!valid) {\n        valid = (parameterValue instanceof java.lang.String) || org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n    }\n    if (valid) {\n        if (parameterValue instanceof java.lang.String) {\n            parameterValue = org.apache.camel.util.StringHelper.removeLeadingAndEndingQuotes(((java.lang.String) (parameterValue)));\n        }\n        if (parameterValue != null) {\n            try {\n                answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, exchange, parameterValue);\n                if (org.apache.camel.component.bean.MethodInfo.LOG.isTraceEnabled()) {\n                    org.apache.camel.component.bean.MethodInfo.LOG.trace(\"Parameter #{} evaluated as: {} type: \", new java.lang.Object[]{ index, answer, org.apache.camel.util.ObjectHelper.type(answer) });\n                }\n            } catch (java.lang.Exception e) {\n                if (org.apache.camel.component.bean.MethodInfo.LOG.isDebugEnabled()) {\n                    org.apache.camel.component.bean.MethodInfo.LOG.debug(\"Cannot convert from type: {} to type: {} for parameter #{}\", new java.lang.Object[]{ org.apache.camel.util.ObjectHelper.type(parameterValue), parameterType, index });\n                }\n                throw new org.apache.camel.component.bean.ParameterBindingException(e, method, index, parameterType, parameterValue);\n            }\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (exp != null) {\n    boolean valid = org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n    if (!valid) {\n        java.lang.Boolean isClass = org.apache.camel.component.bean.BeanHelper.isAssignableToExpectedType(exchange.getContext().getClassResolver(), exp, parameterType);\n        if (isClass != null) {\n            return null;\n        }\n    }\n    org.apache.camel.Expression expression = null;\n    try {\n        expression = exchange.getContext().resolveLanguage(\"simple\").createExpression(exp);\n        parameterValue = expression.evaluate(exchange, java.lang.Object.class);\n    } catch (java.lang.Exception e) {\n        throw new org.apache.camel.ExpressionEvaluationException(expression, ((((\"Cannot create/evaluate simple expression: \" + exp) + \" to be bound to parameter at index: \") + index) + \" on method: \") + getMethod(), exchange, e);\n    }\n    if (parameterValue != null) {\n        if (\"null\".equals(parameterValue)) {\n            return java.lang.Void.TYPE;\n        }\n        exp = exchange.getContext().getTypeConverter().convertTo(java.lang.String.class, parameterValue);\n        if (!valid) {\n            valid = (parameterValue instanceof java.lang.String) || org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n        }\n        if (valid) {\n            if (parameterValue instanceof java.lang.String) {\n                parameterValue = org.apache.camel.util.StringHelper.removeLeadingAndEndingQuotes(((java.lang.String) (parameterValue)));\n            }\n            if (parameterValue != null) {\n                try {\n                    answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, exchange, parameterValue);\n                    if (org.apache.camel.component.bean.MethodInfo.LOG.isTraceEnabled()) {\n                        org.apache.camel.component.bean.MethodInfo.LOG.trace(\"Parameter #{} evaluated as: {} type: \", new java.lang.Object[]{ index, answer, org.apache.camel.util.ObjectHelper.type(answer) });\n                    }\n                } catch (java.lang.Exception e) {\n                    if (org.apache.camel.component.bean.MethodInfo.LOG.isDebugEnabled()) {\n                        org.apache.camel.component.bean.MethodInfo.LOG.debug(\"Cannot convert from type: {} to type: {} for parameter #{}\", new java.lang.Object[]{ org.apache.camel.util.ObjectHelper.type(parameterValue), parameterType, index });\n                    }\n                    throw new org.apache.camel.component.bean.ParameterBindingException(e, method, index, parameterType, parameterValue);\n                }\n            }\n        }\n    }\n}",
            "src_parent": "{\n    java.lang.Object answer = null;\n    java.lang.String exp = exchange.getContext().getTypeConverter().convertTo(java.lang.String.class, exchange, parameterValue);\n    if (exp != null) {\n        boolean valid = org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n        if (!valid) {\n            java.lang.Boolean isClass = org.apache.camel.component.bean.BeanHelper.isAssignableToExpectedType(exchange.getContext().getClassResolver(), exp, parameterType);\n            if (isClass != null) {\n                return null;\n            }\n        }\n        org.apache.camel.Expression expression = null;\n        try {\n            expression = exchange.getContext().resolveLanguage(\"simple\").createExpression(exp);\n            parameterValue = expression.evaluate(exchange, java.lang.Object.class);\n        } catch (java.lang.Exception e) {\n            throw new org.apache.camel.ExpressionEvaluationException(expression, ((((\"Cannot create/evaluate simple expression: \" + exp) + \" to be bound to parameter at index: \") + index) + \" on method: \") + getMethod(), exchange, e);\n        }\n        if (parameterValue != null) {\n            if (\"null\".equals(parameterValue)) {\n                return java.lang.Void.TYPE;\n            }\n            exp = exchange.getContext().getTypeConverter().convertTo(java.lang.String.class, parameterValue);\n            if (!valid) {\n                valid = (parameterValue instanceof java.lang.String) || org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n            }\n            if (valid) {\n                if (parameterValue instanceof java.lang.String) {\n                    parameterValue = org.apache.camel.util.StringHelper.removeLeadingAndEndingQuotes(((java.lang.String) (parameterValue)));\n                }\n                if (parameterValue != null) {\n                    try {\n                        answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, exchange, parameterValue);\n                        if (org.apache.camel.component.bean.MethodInfo.LOG.isTraceEnabled()) {\n                            org.apache.camel.component.bean.MethodInfo.LOG.trace(\"Parameter #{} evaluated as: {} type: \", new java.lang.Object[]{ index, answer, org.apache.camel.util.ObjectHelper.type(answer) });\n                        }\n                    } catch (java.lang.Exception e) {\n                        if (org.apache.camel.component.bean.MethodInfo.LOG.isDebugEnabled()) {\n                            org.apache.camel.component.bean.MethodInfo.LOG.debug(\"Cannot convert from type: {} to type: {} for parameter #{}\", new java.lang.Object[]{ org.apache.camel.util.ObjectHelper.type(parameterValue), parameterType, index });\n                        }\n                        throw new org.apache.camel.component.bean.ParameterBindingException(e, method, index, parameterType, parameterValue);\n                    }\n                }\n            }\n        }\n    }\n    return answer;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (parameterValue == null) {\n    parameterValue = \"null\";\n}",
            "src_parent": "{\n    expression = exchange.getContext().resolveLanguage(\"simple\").createExpression(exp);\n    parameterValue = expression.evaluate(exchange, java.lang.Object.class);\n    if (parameterValue == null) {\n        parameterValue = \"null\";\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (exp != null) {\n    boolean valid = org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n    if (!valid) {\n        java.lang.Boolean isClass = org.apache.camel.component.bean.BeanHelper.isAssignableToExpectedType(exchange.getContext().getClassResolver(), exp, parameterType);\n        if (isClass != null) {\n            return null;\n        }\n    }\n    org.apache.camel.Expression expression = null;\n    try {\n        expression = exchange.getContext().resolveLanguage(\"simple\").createExpression(exp);\n        parameterValue = expression.evaluate(exchange, java.lang.Object.class);\n        if (parameterValue == null) {\n            parameterValue = \"null\";\n        }\n    } catch (java.lang.Exception e) {\n        throw new org.apache.camel.ExpressionEvaluationException(expression, ((((\"Cannot create/evaluate simple expression: \" + exp) + \" to be bound to parameter at index: \") + index) + \" on method: \") + getMethod(), exchange, e);\n    }\n    if (\"null\".equals(parameterValue)) {\n        return java.lang.Void.TYPE;\n    }\n    exp = exchange.getContext().getTypeConverter().convertTo(java.lang.String.class, parameterValue);\n    if (!valid) {\n        valid = (parameterValue instanceof java.lang.String) || org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n    }\n    if (valid) {\n        if (parameterValue instanceof java.lang.String) {\n            parameterValue = org.apache.camel.util.StringHelper.removeLeadingAndEndingQuotes(((java.lang.String) (parameterValue)));\n        }\n        if (parameterValue != null) {\n            try {\n                answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, exchange, parameterValue);\n                if (org.apache.camel.component.bean.MethodInfo.LOG.isTraceEnabled()) {\n                    org.apache.camel.component.bean.MethodInfo.LOG.trace(\"Parameter #{} evaluated as: {} type: \", new java.lang.Object[]{ index, answer, org.apache.camel.util.ObjectHelper.type(answer) });\n                }\n            } catch (java.lang.Exception e) {\n                if (org.apache.camel.component.bean.MethodInfo.LOG.isDebugEnabled()) {\n                    org.apache.camel.component.bean.MethodInfo.LOG.debug(\"Cannot convert from type: {} to type: {} for parameter #{}\", new java.lang.Object[]{ org.apache.camel.util.ObjectHelper.type(parameterValue), parameterType, index });\n                }\n                throw new org.apache.camel.component.bean.ParameterBindingException(e, method, index, parameterType, parameterValue);\n            }\n        }\n    }\n}",
            "dst_parent": "{\n    java.lang.Object answer = null;\n    java.lang.String exp = exchange.getContext().getTypeConverter().convertTo(java.lang.String.class, exchange, parameterValue);\n    if (exp != null) {\n        boolean valid = org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n        if (!valid) {\n            java.lang.Boolean isClass = org.apache.camel.component.bean.BeanHelper.isAssignableToExpectedType(exchange.getContext().getClassResolver(), exp, parameterType);\n            if (isClass != null) {\n                return null;\n            }\n        }\n        org.apache.camel.Expression expression = null;\n        try {\n            expression = exchange.getContext().resolveLanguage(\"simple\").createExpression(exp);\n            parameterValue = expression.evaluate(exchange, java.lang.Object.class);\n            if (parameterValue == null) {\n                parameterValue = \"null\";\n            }\n        } catch (java.lang.Exception e) {\n            throw new org.apache.camel.ExpressionEvaluationException(expression, ((((\"Cannot create/evaluate simple expression: \" + exp) + \" to be bound to parameter at index: \") + index) + \" on method: \") + getMethod(), exchange, e);\n        }\n        if (\"null\".equals(parameterValue)) {\n            return java.lang.Void.TYPE;\n        }\n        exp = exchange.getContext().getTypeConverter().convertTo(java.lang.String.class, parameterValue);\n        if (!valid) {\n            valid = (parameterValue instanceof java.lang.String) || org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n        }\n        if (valid) {\n            if (parameterValue instanceof java.lang.String) {\n                parameterValue = org.apache.camel.util.StringHelper.removeLeadingAndEndingQuotes(((java.lang.String) (parameterValue)));\n            }\n            if (parameterValue != null) {\n                try {\n                    answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, exchange, parameterValue);\n                    if (org.apache.camel.component.bean.MethodInfo.LOG.isTraceEnabled()) {\n                        org.apache.camel.component.bean.MethodInfo.LOG.trace(\"Parameter #{} evaluated as: {} type: \", new java.lang.Object[]{ index, answer, org.apache.camel.util.ObjectHelper.type(answer) });\n                    }\n                } catch (java.lang.Exception e) {\n                    if (org.apache.camel.component.bean.MethodInfo.LOG.isDebugEnabled()) {\n                        org.apache.camel.component.bean.MethodInfo.LOG.debug(\"Cannot convert from type: {} to type: {} for parameter #{}\", new java.lang.Object[]{ org.apache.camel.util.ObjectHelper.type(parameterValue), parameterType, index });\n                    }\n                    throw new org.apache.camel.component.bean.ParameterBindingException(e, method, index, parameterType, parameterValue);\n                }\n            }\n        }\n    }\n    return answer;\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (parameterValue != null) {\n    if (\"null\".equals(parameterValue)) {\n        return java.lang.Void.TYPE;\n    }\n    exp = exchange.getContext().getTypeConverter().convertTo(java.lang.String.class, parameterValue);\n    if (!valid) {\n        valid = (parameterValue instanceof java.lang.String) || org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n    }\n    if (valid) {\n        if (parameterValue instanceof java.lang.String) {\n            parameterValue = org.apache.camel.util.StringHelper.removeLeadingAndEndingQuotes(((java.lang.String) (parameterValue)));\n        }\n        if (parameterValue != null) {\n            try {\n                answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, exchange, parameterValue);\n                if (org.apache.camel.component.bean.MethodInfo.LOG.isTraceEnabled()) {\n                    org.apache.camel.component.bean.MethodInfo.LOG.trace(\"Parameter #{} evaluated as: {} type: \", new java.lang.Object[]{ index, answer, org.apache.camel.util.ObjectHelper.type(answer) });\n                }\n            } catch (java.lang.Exception e) {\n                if (org.apache.camel.component.bean.MethodInfo.LOG.isDebugEnabled()) {\n                    org.apache.camel.component.bean.MethodInfo.LOG.debug(\"Cannot convert from type: {} to type: {} for parameter #{}\", new java.lang.Object[]{ org.apache.camel.util.ObjectHelper.type(parameterValue), parameterType, index });\n                }\n                throw new org.apache.camel.component.bean.ParameterBindingException(e, method, index, parameterType, parameterValue);\n            }\n        }\n    }\n}",
            "src_parent": "{\n    boolean valid = org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n    if (!valid) {\n        java.lang.Boolean isClass = org.apache.camel.component.bean.BeanHelper.isAssignableToExpectedType(exchange.getContext().getClassResolver(), exp, parameterType);\n        if (isClass != null) {\n            return null;\n        }\n    }\n    org.apache.camel.Expression expression = null;\n    try {\n        expression = exchange.getContext().resolveLanguage(\"simple\").createExpression(exp);\n        parameterValue = expression.evaluate(exchange, java.lang.Object.class);\n    } catch (java.lang.Exception e) {\n        throw new org.apache.camel.ExpressionEvaluationException(expression, ((((\"Cannot create/evaluate simple expression: \" + exp) + \" to be bound to parameter at index: \") + index) + \" on method: \") + getMethod(), exchange, e);\n    }\n    if (parameterValue != null) {\n        if (\"null\".equals(parameterValue)) {\n            return java.lang.Void.TYPE;\n        }\n        exp = exchange.getContext().getTypeConverter().convertTo(java.lang.String.class, parameterValue);\n        if (!valid) {\n            valid = (parameterValue instanceof java.lang.String) || org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n        }\n        if (valid) {\n            if (parameterValue instanceof java.lang.String) {\n                parameterValue = org.apache.camel.util.StringHelper.removeLeadingAndEndingQuotes(((java.lang.String) (parameterValue)));\n            }\n            if (parameterValue != null) {\n                try {\n                    answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, exchange, parameterValue);\n                    if (org.apache.camel.component.bean.MethodInfo.LOG.isTraceEnabled()) {\n                        org.apache.camel.component.bean.MethodInfo.LOG.trace(\"Parameter #{} evaluated as: {} type: \", new java.lang.Object[]{ index, answer, org.apache.camel.util.ObjectHelper.type(answer) });\n                    }\n                } catch (java.lang.Exception e) {\n                    if (org.apache.camel.component.bean.MethodInfo.LOG.isDebugEnabled()) {\n                        org.apache.camel.component.bean.MethodInfo.LOG.debug(\"Cannot convert from type: {} to type: {} for parameter #{}\", new java.lang.Object[]{ org.apache.camel.util.ObjectHelper.type(parameterValue), parameterType, index });\n                    }\n                    throw new org.apache.camel.component.bean.ParameterBindingException(e, method, index, parameterType, parameterValue);\n                }\n            }\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "boolean valid = org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp)",
            "dst_parent": "{\n    boolean valid = org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n    if (!valid) {\n        java.lang.Boolean isClass = org.apache.camel.component.bean.BeanHelper.isAssignableToExpectedType(exchange.getContext().getClassResolver(), exp, parameterType);\n        if (isClass != null) {\n            return null;\n        }\n    }\n    org.apache.camel.Expression expression = null;\n    try {\n        expression = exchange.getContext().resolveLanguage(\"simple\").createExpression(exp);\n        parameterValue = expression.evaluate(exchange, java.lang.Object.class);\n        if (parameterValue == null) {\n            parameterValue = \"null\";\n        }\n    } catch (java.lang.Exception e) {\n        throw new org.apache.camel.ExpressionEvaluationException(expression, ((((\"Cannot create/evaluate simple expression: \" + exp) + \" to be bound to parameter at index: \") + index) + \" on method: \") + getMethod(), exchange, e);\n    }\n    if (\"null\".equals(parameterValue)) {\n        return java.lang.Void.TYPE;\n    }\n    exp = exchange.getContext().getTypeConverter().convertTo(java.lang.String.class, parameterValue);\n    if (!valid) {\n        valid = (parameterValue instanceof java.lang.String) || org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n    }\n    if (valid) {\n        if (parameterValue instanceof java.lang.String) {\n            parameterValue = org.apache.camel.util.StringHelper.removeLeadingAndEndingQuotes(((java.lang.String) (parameterValue)));\n        }\n        if (parameterValue != null) {\n            try {\n                answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, exchange, parameterValue);\n                if (org.apache.camel.component.bean.MethodInfo.LOG.isTraceEnabled()) {\n                    org.apache.camel.component.bean.MethodInfo.LOG.trace(\"Parameter #{} evaluated as: {} type: \", new java.lang.Object[]{ index, answer, org.apache.camel.util.ObjectHelper.type(answer) });\n                }\n            } catch (java.lang.Exception e) {\n                if (org.apache.camel.component.bean.MethodInfo.LOG.isDebugEnabled()) {\n                    org.apache.camel.component.bean.MethodInfo.LOG.debug(\"Cannot convert from type: {} to type: {} for parameter #{}\", new java.lang.Object[]{ org.apache.camel.util.ObjectHelper.type(parameterValue), parameterType, index });\n                }\n                throw new org.apache.camel.component.bean.ParameterBindingException(e, method, index, parameterType, parameterValue);\n            }\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "boolean valid = org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp)",
            "src_parent": "{\n    boolean valid = org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n    if (!valid) {\n        java.lang.Boolean isClass = org.apache.camel.component.bean.BeanHelper.isAssignableToExpectedType(exchange.getContext().getClassResolver(), exp, parameterType);\n        if (isClass != null) {\n            return null;\n        }\n    }\n    org.apache.camel.Expression expression = null;\n    try {\n        expression = exchange.getContext().resolveLanguage(\"simple\").createExpression(exp);\n        parameterValue = expression.evaluate(exchange, java.lang.Object.class);\n    } catch (java.lang.Exception e) {\n        throw new org.apache.camel.ExpressionEvaluationException(expression, ((((\"Cannot create/evaluate simple expression: \" + exp) + \" to be bound to parameter at index: \") + index) + \" on method: \") + getMethod(), exchange, e);\n    }\n    if (parameterValue != null) {\n        if (\"null\".equals(parameterValue)) {\n            return java.lang.Void.TYPE;\n        }\n        exp = exchange.getContext().getTypeConverter().convertTo(java.lang.String.class, parameterValue);\n        if (!valid) {\n            valid = (parameterValue instanceof java.lang.String) || org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n        }\n        if (valid) {\n            if (parameterValue instanceof java.lang.String) {\n                parameterValue = org.apache.camel.util.StringHelper.removeLeadingAndEndingQuotes(((java.lang.String) (parameterValue)));\n            }\n            if (parameterValue != null) {\n                try {\n                    answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, exchange, parameterValue);\n                    if (org.apache.camel.component.bean.MethodInfo.LOG.isTraceEnabled()) {\n                        org.apache.camel.component.bean.MethodInfo.LOG.trace(\"Parameter #{} evaluated as: {} type: \", new java.lang.Object[]{ index, answer, org.apache.camel.util.ObjectHelper.type(answer) });\n                    }\n                } catch (java.lang.Exception e) {\n                    if (org.apache.camel.component.bean.MethodInfo.LOG.isDebugEnabled()) {\n                        org.apache.camel.component.bean.MethodInfo.LOG.debug(\"Cannot convert from type: {} to type: {} for parameter #{}\", new java.lang.Object[]{ org.apache.camel.util.ObjectHelper.type(parameterValue), parameterType, index });\n                    }\n                    throw new org.apache.camel.component.bean.ParameterBindingException(e, method, index, parameterType, parameterValue);\n                }\n            }\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (!valid) {\n    java.lang.Boolean isClass = org.apache.camel.component.bean.BeanHelper.isAssignableToExpectedType(exchange.getContext().getClassResolver(), exp, parameterType);\n    if (isClass != null) {\n        return null;\n    }\n}",
            "dst_parent": "{\n    boolean valid = org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n    if (!valid) {\n        java.lang.Boolean isClass = org.apache.camel.component.bean.BeanHelper.isAssignableToExpectedType(exchange.getContext().getClassResolver(), exp, parameterType);\n        if (isClass != null) {\n            return null;\n        }\n    }\n    org.apache.camel.Expression expression = null;\n    try {\n        expression = exchange.getContext().resolveLanguage(\"simple\").createExpression(exp);\n        parameterValue = expression.evaluate(exchange, java.lang.Object.class);\n        if (parameterValue == null) {\n            parameterValue = \"null\";\n        }\n    } catch (java.lang.Exception e) {\n        throw new org.apache.camel.ExpressionEvaluationException(expression, ((((\"Cannot create/evaluate simple expression: \" + exp) + \" to be bound to parameter at index: \") + index) + \" on method: \") + getMethod(), exchange, e);\n    }\n    if (\"null\".equals(parameterValue)) {\n        return java.lang.Void.TYPE;\n    }\n    exp = exchange.getContext().getTypeConverter().convertTo(java.lang.String.class, parameterValue);\n    if (!valid) {\n        valid = (parameterValue instanceof java.lang.String) || org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n    }\n    if (valid) {\n        if (parameterValue instanceof java.lang.String) {\n            parameterValue = org.apache.camel.util.StringHelper.removeLeadingAndEndingQuotes(((java.lang.String) (parameterValue)));\n        }\n        if (parameterValue != null) {\n            try {\n                answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, exchange, parameterValue);\n                if (org.apache.camel.component.bean.MethodInfo.LOG.isTraceEnabled()) {\n                    org.apache.camel.component.bean.MethodInfo.LOG.trace(\"Parameter #{} evaluated as: {} type: \", new java.lang.Object[]{ index, answer, org.apache.camel.util.ObjectHelper.type(answer) });\n                }\n            } catch (java.lang.Exception e) {\n                if (org.apache.camel.component.bean.MethodInfo.LOG.isDebugEnabled()) {\n                    org.apache.camel.component.bean.MethodInfo.LOG.debug(\"Cannot convert from type: {} to type: {} for parameter #{}\", new java.lang.Object[]{ org.apache.camel.util.ObjectHelper.type(parameterValue), parameterType, index });\n                }\n                throw new org.apache.camel.component.bean.ParameterBindingException(e, method, index, parameterType, parameterValue);\n            }\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (!valid) {\n    java.lang.Boolean isClass = org.apache.camel.component.bean.BeanHelper.isAssignableToExpectedType(exchange.getContext().getClassResolver(), exp, parameterType);\n    if (isClass != null) {\n        return null;\n    }\n}",
            "src_parent": "{\n    boolean valid = org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n    if (!valid) {\n        java.lang.Boolean isClass = org.apache.camel.component.bean.BeanHelper.isAssignableToExpectedType(exchange.getContext().getClassResolver(), exp, parameterType);\n        if (isClass != null) {\n            return null;\n        }\n    }\n    org.apache.camel.Expression expression = null;\n    try {\n        expression = exchange.getContext().resolveLanguage(\"simple\").createExpression(exp);\n        parameterValue = expression.evaluate(exchange, java.lang.Object.class);\n    } catch (java.lang.Exception e) {\n        throw new org.apache.camel.ExpressionEvaluationException(expression, ((((\"Cannot create/evaluate simple expression: \" + exp) + \" to be bound to parameter at index: \") + index) + \" on method: \") + getMethod(), exchange, e);\n    }\n    if (parameterValue != null) {\n        if (\"null\".equals(parameterValue)) {\n            return java.lang.Void.TYPE;\n        }\n        exp = exchange.getContext().getTypeConverter().convertTo(java.lang.String.class, parameterValue);\n        if (!valid) {\n            valid = (parameterValue instanceof java.lang.String) || org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n        }\n        if (valid) {\n            if (parameterValue instanceof java.lang.String) {\n                parameterValue = org.apache.camel.util.StringHelper.removeLeadingAndEndingQuotes(((java.lang.String) (parameterValue)));\n            }\n            if (parameterValue != null) {\n                try {\n                    answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, exchange, parameterValue);\n                    if (org.apache.camel.component.bean.MethodInfo.LOG.isTraceEnabled()) {\n                        org.apache.camel.component.bean.MethodInfo.LOG.trace(\"Parameter #{} evaluated as: {} type: \", new java.lang.Object[]{ index, answer, org.apache.camel.util.ObjectHelper.type(answer) });\n                    }\n                } catch (java.lang.Exception e) {\n                    if (org.apache.camel.component.bean.MethodInfo.LOG.isDebugEnabled()) {\n                        org.apache.camel.component.bean.MethodInfo.LOG.debug(\"Cannot convert from type: {} to type: {} for parameter #{}\", new java.lang.Object[]{ org.apache.camel.util.ObjectHelper.type(parameterValue), parameterType, index });\n                    }\n                    throw new org.apache.camel.component.bean.ParameterBindingException(e, method, index, parameterType, parameterValue);\n                }\n            }\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.camel.Expression expression = null",
            "dst_parent": "{\n    boolean valid = org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n    if (!valid) {\n        java.lang.Boolean isClass = org.apache.camel.component.bean.BeanHelper.isAssignableToExpectedType(exchange.getContext().getClassResolver(), exp, parameterType);\n        if (isClass != null) {\n            return null;\n        }\n    }\n    org.apache.camel.Expression expression = null;\n    try {\n        expression = exchange.getContext().resolveLanguage(\"simple\").createExpression(exp);\n        parameterValue = expression.evaluate(exchange, java.lang.Object.class);\n        if (parameterValue == null) {\n            parameterValue = \"null\";\n        }\n    } catch (java.lang.Exception e) {\n        throw new org.apache.camel.ExpressionEvaluationException(expression, ((((\"Cannot create/evaluate simple expression: \" + exp) + \" to be bound to parameter at index: \") + index) + \" on method: \") + getMethod(), exchange, e);\n    }\n    if (\"null\".equals(parameterValue)) {\n        return java.lang.Void.TYPE;\n    }\n    exp = exchange.getContext().getTypeConverter().convertTo(java.lang.String.class, parameterValue);\n    if (!valid) {\n        valid = (parameterValue instanceof java.lang.String) || org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n    }\n    if (valid) {\n        if (parameterValue instanceof java.lang.String) {\n            parameterValue = org.apache.camel.util.StringHelper.removeLeadingAndEndingQuotes(((java.lang.String) (parameterValue)));\n        }\n        if (parameterValue != null) {\n            try {\n                answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, exchange, parameterValue);\n                if (org.apache.camel.component.bean.MethodInfo.LOG.isTraceEnabled()) {\n                    org.apache.camel.component.bean.MethodInfo.LOG.trace(\"Parameter #{} evaluated as: {} type: \", new java.lang.Object[]{ index, answer, org.apache.camel.util.ObjectHelper.type(answer) });\n                }\n            } catch (java.lang.Exception e) {\n                if (org.apache.camel.component.bean.MethodInfo.LOG.isDebugEnabled()) {\n                    org.apache.camel.component.bean.MethodInfo.LOG.debug(\"Cannot convert from type: {} to type: {} for parameter #{}\", new java.lang.Object[]{ org.apache.camel.util.ObjectHelper.type(parameterValue), parameterType, index });\n                }\n                throw new org.apache.camel.component.bean.ParameterBindingException(e, method, index, parameterType, parameterValue);\n            }\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "org.apache.camel.Expression expression = null",
            "src_parent": "{\n    boolean valid = org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n    if (!valid) {\n        java.lang.Boolean isClass = org.apache.camel.component.bean.BeanHelper.isAssignableToExpectedType(exchange.getContext().getClassResolver(), exp, parameterType);\n        if (isClass != null) {\n            return null;\n        }\n    }\n    org.apache.camel.Expression expression = null;\n    try {\n        expression = exchange.getContext().resolveLanguage(\"simple\").createExpression(exp);\n        parameterValue = expression.evaluate(exchange, java.lang.Object.class);\n    } catch (java.lang.Exception e) {\n        throw new org.apache.camel.ExpressionEvaluationException(expression, ((((\"Cannot create/evaluate simple expression: \" + exp) + \" to be bound to parameter at index: \") + index) + \" on method: \") + getMethod(), exchange, e);\n    }\n    if (parameterValue != null) {\n        if (\"null\".equals(parameterValue)) {\n            return java.lang.Void.TYPE;\n        }\n        exp = exchange.getContext().getTypeConverter().convertTo(java.lang.String.class, parameterValue);\n        if (!valid) {\n            valid = (parameterValue instanceof java.lang.String) || org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n        }\n        if (valid) {\n            if (parameterValue instanceof java.lang.String) {\n                parameterValue = org.apache.camel.util.StringHelper.removeLeadingAndEndingQuotes(((java.lang.String) (parameterValue)));\n            }\n            if (parameterValue != null) {\n                try {\n                    answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, exchange, parameterValue);\n                    if (org.apache.camel.component.bean.MethodInfo.LOG.isTraceEnabled()) {\n                        org.apache.camel.component.bean.MethodInfo.LOG.trace(\"Parameter #{} evaluated as: {} type: \", new java.lang.Object[]{ index, answer, org.apache.camel.util.ObjectHelper.type(answer) });\n                    }\n                } catch (java.lang.Exception e) {\n                    if (org.apache.camel.component.bean.MethodInfo.LOG.isDebugEnabled()) {\n                        org.apache.camel.component.bean.MethodInfo.LOG.debug(\"Cannot convert from type: {} to type: {} for parameter #{}\", new java.lang.Object[]{ org.apache.camel.util.ObjectHelper.type(parameterValue), parameterType, index });\n                    }\n                    throw new org.apache.camel.component.bean.ParameterBindingException(e, method, index, parameterType, parameterValue);\n                }\n            }\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "try {\n    expression = exchange.getContext().resolveLanguage(\"simple\").createExpression(exp);\n    parameterValue = expression.evaluate(exchange, java.lang.Object.class);\n    if (parameterValue == null) {\n        parameterValue = \"null\";\n    }\n} catch (java.lang.Exception e) {\n    throw new org.apache.camel.ExpressionEvaluationException(expression, ((((\"Cannot create/evaluate simple expression: \" + exp) + \" to be bound to parameter at index: \") + index) + \" on method: \") + getMethod(), exchange, e);\n}",
            "dst_parent": "{\n    boolean valid = org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n    if (!valid) {\n        java.lang.Boolean isClass = org.apache.camel.component.bean.BeanHelper.isAssignableToExpectedType(exchange.getContext().getClassResolver(), exp, parameterType);\n        if (isClass != null) {\n            return null;\n        }\n    }\n    org.apache.camel.Expression expression = null;\n    try {\n        expression = exchange.getContext().resolveLanguage(\"simple\").createExpression(exp);\n        parameterValue = expression.evaluate(exchange, java.lang.Object.class);\n        if (parameterValue == null) {\n            parameterValue = \"null\";\n        }\n    } catch (java.lang.Exception e) {\n        throw new org.apache.camel.ExpressionEvaluationException(expression, ((((\"Cannot create/evaluate simple expression: \" + exp) + \" to be bound to parameter at index: \") + index) + \" on method: \") + getMethod(), exchange, e);\n    }\n    if (\"null\".equals(parameterValue)) {\n        return java.lang.Void.TYPE;\n    }\n    exp = exchange.getContext().getTypeConverter().convertTo(java.lang.String.class, parameterValue);\n    if (!valid) {\n        valid = (parameterValue instanceof java.lang.String) || org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n    }\n    if (valid) {\n        if (parameterValue instanceof java.lang.String) {\n            parameterValue = org.apache.camel.util.StringHelper.removeLeadingAndEndingQuotes(((java.lang.String) (parameterValue)));\n        }\n        if (parameterValue != null) {\n            try {\n                answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, exchange, parameterValue);\n                if (org.apache.camel.component.bean.MethodInfo.LOG.isTraceEnabled()) {\n                    org.apache.camel.component.bean.MethodInfo.LOG.trace(\"Parameter #{} evaluated as: {} type: \", new java.lang.Object[]{ index, answer, org.apache.camel.util.ObjectHelper.type(answer) });\n                }\n            } catch (java.lang.Exception e) {\n                if (org.apache.camel.component.bean.MethodInfo.LOG.isDebugEnabled()) {\n                    org.apache.camel.component.bean.MethodInfo.LOG.debug(\"Cannot convert from type: {} to type: {} for parameter #{}\", new java.lang.Object[]{ org.apache.camel.util.ObjectHelper.type(parameterValue), parameterType, index });\n                }\n                throw new org.apache.camel.component.bean.ParameterBindingException(e, method, index, parameterType, parameterValue);\n            }\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Try",
            "operator": "MOV",
            "src": "try {\n    expression = exchange.getContext().resolveLanguage(\"simple\").createExpression(exp);\n    parameterValue = expression.evaluate(exchange, java.lang.Object.class);\n} catch (java.lang.Exception e) {\n    throw new org.apache.camel.ExpressionEvaluationException(expression, ((((\"Cannot create/evaluate simple expression: \" + exp) + \" to be bound to parameter at index: \") + index) + \" on method: \") + getMethod(), exchange, e);\n}",
            "src_parent": "{\n    boolean valid = org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n    if (!valid) {\n        java.lang.Boolean isClass = org.apache.camel.component.bean.BeanHelper.isAssignableToExpectedType(exchange.getContext().getClassResolver(), exp, parameterType);\n        if (isClass != null) {\n            return null;\n        }\n    }\n    org.apache.camel.Expression expression = null;\n    try {\n        expression = exchange.getContext().resolveLanguage(\"simple\").createExpression(exp);\n        parameterValue = expression.evaluate(exchange, java.lang.Object.class);\n    } catch (java.lang.Exception e) {\n        throw new org.apache.camel.ExpressionEvaluationException(expression, ((((\"Cannot create/evaluate simple expression: \" + exp) + \" to be bound to parameter at index: \") + index) + \" on method: \") + getMethod(), exchange, e);\n    }\n    if (parameterValue != null) {\n        if (\"null\".equals(parameterValue)) {\n            return java.lang.Void.TYPE;\n        }\n        exp = exchange.getContext().getTypeConverter().convertTo(java.lang.String.class, parameterValue);\n        if (!valid) {\n            valid = (parameterValue instanceof java.lang.String) || org.apache.camel.component.bean.BeanHelper.isValidParameterValue(exp);\n        }\n        if (valid) {\n            if (parameterValue instanceof java.lang.String) {\n                parameterValue = org.apache.camel.util.StringHelper.removeLeadingAndEndingQuotes(((java.lang.String) (parameterValue)));\n            }\n            if (parameterValue != null) {\n                try {\n                    answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, exchange, parameterValue);\n                    if (org.apache.camel.component.bean.MethodInfo.LOG.isTraceEnabled()) {\n                        org.apache.camel.component.bean.MethodInfo.LOG.trace(\"Parameter #{} evaluated as: {} type: \", new java.lang.Object[]{ index, answer, org.apache.camel.util.ObjectHelper.type(answer) });\n                    }\n                } catch (java.lang.Exception e) {\n                    if (org.apache.camel.component.bean.MethodInfo.LOG.isDebugEnabled()) {\n                        org.apache.camel.component.bean.MethodInfo.LOG.debug(\"Cannot convert from type: {} to type: {} for parameter #{}\", new java.lang.Object[]{ org.apache.camel.util.ObjectHelper.type(parameterValue), parameterType, index });\n                    }\n                    throw new org.apache.camel.component.bean.ParameterBindingException(e, method, index, parameterType, parameterValue);\n                }\n            }\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Try"
          }
        }
      ],
      "file_name": "MethodInfo"
    }
  ],
  "id": "camel_617eab1c"
}