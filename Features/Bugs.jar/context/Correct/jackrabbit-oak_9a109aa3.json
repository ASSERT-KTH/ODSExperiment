{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.Calendar",
            "dst_parent": "private java.util.Calendar updateSuggester(org.apache.lucene.analysis.Analyzer analyzer) throws java.io.IOException {\n    java.util.Calendar ret = null;\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n    org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n    final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n    try {\n        org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n        ret = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n        suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(ret), Type.DATE);\n    } catch (java.lang.Throwable e) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n    } finally {\n        suggestDirectory.close();\n        reader.close();\n    }\n    return ret;\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "void",
            "src_parent": "private void updateSuggester(org.apache.lucene.analysis.Analyzer analyzer) throws java.io.IOException {\n    if (definition.isSuggestEnabled()) {\n        boolean updateSuggester = false;\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n        if (suggesterStatus.hasProperty(\"lastUpdated\")) {\n            org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n            java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n            int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n            suggesterLastUpdatedTime.add(java.util.Calendar.MINUTE, updateFrequency);\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(suggesterLastUpdatedTime)) {\n                updateSuggester = true;\n            }\n        } else {\n            updateSuggester = true;\n        }\n        if (updateSuggester) {\n            org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n            final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n            try {\n                org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n                suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n            } catch (java.lang.Throwable e) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n            } finally {\n                suggestDirectory.close();\n                reader.close();\n            }\n        }\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "nextSuggestUpdateTime",
            "dst_parent": "nextSuggestUpdateTime.add(java.util.Calendar.MINUTE, updateFrequency)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "suggesterLastUpdatedTime",
            "src_parent": "suggesterLastUpdatedTime.add(java.util.Calendar.MINUTE, updateFrequency)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "updateSuggestions",
            "dst_parent": "updateSuggestions = true",
            "dst_parent_type": "Assignment",
            "dst_type": "VariableWrite",
            "operator": "UPD",
            "src": "updateSuggester",
            "src_parent": "updateSuggester = true",
            "src_parent_type": "Assignment",
            "src_type": "VariableWrite"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "nextSuggestUpdateTime",
            "dst_parent": "org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(nextSuggestUpdateTime)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "suggesterLastUpdatedTime",
            "src_parent": "org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(suggesterLastUpdatedTime)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "updateSuggestions",
            "dst_parent": "updateSuggestions = (writer != null) || isIndexUpdatedAfter(suggesterLastUpdatedTime)",
            "dst_parent_type": "Assignment",
            "dst_type": "VariableWrite",
            "operator": "UPD",
            "src": "updateSuggester",
            "src_parent": "updateSuggester = true",
            "src_parent_type": "Assignment",
            "src_type": "VariableWrite"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()",
            "src_parent": "org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar())",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "suggesterStatus.hasProperty(\"lastUpdated\")",
            "src_parent": "if (suggesterStatus.hasProperty(\"lastUpdated\")) {\n    org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n    java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n    int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n    suggesterLastUpdatedTime.add(java.util.Calendar.MINUTE, updateFrequency);\n    if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(suggesterLastUpdatedTime)) {\n        updateSuggester = true;\n    }\n} else {\n    updateSuggester = true;\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "true",
            "src_parent": "updateSuggester = true",
            "src_parent_type": "Assignment",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "try {\n    org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n    suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n} catch (java.lang.Throwable e) {\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n} finally {\n    suggestDirectory.close();\n    reader.close();\n}",
            "src_parent": "{\n    org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n    final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n    try {\n        org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n        suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n    } catch (java.lang.Throwable e) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n    } finally {\n        suggestDirectory.close();\n        reader.close();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Try"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private void updateSuggester(org.apache.lucene.analysis.Analyzer analyzer) throws java.io.IOException {\n    if (definition.isSuggestEnabled()) {\n        boolean updateSuggester = false;\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n        if (suggesterStatus.hasProperty(\"lastUpdated\")) {\n            org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n            java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n            int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n            suggesterLastUpdatedTime.add(java.util.Calendar.MINUTE, updateFrequency);\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(suggesterLastUpdatedTime)) {\n                updateSuggester = true;\n            }\n        } else {\n            updateSuggester = true;\n        }\n        if (updateSuggester) {\n            org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n            final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n            try {\n                org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n                suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n            } catch (java.lang.Throwable e) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n            } finally {\n                suggestDirectory.close();\n                reader.close();\n            }\n        }\n    }\n}",
            "src_parent": "public class LuceneIndexEditorContext {\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.class);\n\n    private static final org.apache.jackrabbit.oak.util.PerfLogger PERF_LOGGER = new org.apache.jackrabbit.oak.util.PerfLogger(org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.class.getName() + \".perf\"));\n\n    private final org.apache.lucene.facet.FacetsConfig facetsConfig;\n\n    static org.apache.lucene.index.IndexWriterConfig getIndexWriterConfig(org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition definition, boolean remoteDir) {\n        java.lang.Thread thread = java.lang.Thread.currentThread();\n        java.lang.ClassLoader loader = thread.getContextClassLoader();\n        thread.setContextClassLoader(org.apache.lucene.index.IndexWriterConfig.class.getClassLoader());\n        try {\n            org.apache.lucene.analysis.Analyzer definitionAnalyzer = definition.getAnalyzer();\n            java.util.Map<java.lang.String, org.apache.lucene.analysis.Analyzer> analyzers = new java.util.HashMap<java.lang.String, org.apache.lucene.analysis.Analyzer>();\n            analyzers.put(FieldNames.SPELLCHECK, new org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper(LuceneIndexConstants.ANALYZER, 3));\n            if (!definition.isSuggestAnalyzed()) {\n                analyzers.put(FieldNames.SUGGEST, org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.getAnalyzer());\n            }\n            org.apache.lucene.analysis.Analyzer analyzer = new org.apache.lucene.analysis.miscellaneous.PerFieldAnalyzerWrapper(definitionAnalyzer, analyzers);\n            org.apache.lucene.index.IndexWriterConfig config = new org.apache.lucene.index.IndexWriterConfig(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.VERSION, analyzer);\n            if (remoteDir) {\n                config.setMergeScheduler(new org.apache.lucene.index.SerialMergeScheduler());\n            }\n            if (definition.getCodec() != null) {\n                config.setCodec(definition.getCodec());\n            }\n            return config;\n        } finally {\n            thread.setContextClassLoader(loader);\n        }\n    }\n\n    static org.apache.lucene.store.Directory newIndexDirectory(org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition indexDefinition, org.apache.jackrabbit.oak.spi.state.NodeBuilder definition) throws java.io.IOException {\n        java.lang.String path = definition.getString(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.PERSISTENCE_PATH);\n        if (path == null) {\n            return new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definition, indexDefinition, false);\n        } else {\n            java.io.File file = new java.io.File(path);\n            file.mkdirs();\n            return org.apache.lucene.store.FSDirectory.open(file, getNoLockFactory());\n        }\n    }\n\n    private static final org.apache.tika.parser.Parser defaultParser = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.createDefaultParser();\n\n    private org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition definition;\n\n    private final org.apache.jackrabbit.oak.spi.state.NodeBuilder definitionBuilder;\n\n    private org.apache.lucene.index.IndexWriter writer = null;\n\n    private long indexedNodes;\n\n    private final org.apache.jackrabbit.oak.plugins.index.IndexUpdateCallback updateCallback;\n\n    private boolean reindex;\n\n    private org.apache.tika.parser.Parser parser;\n\n    @javax.annotation.Nullable\n    private final org.apache.jackrabbit.oak.plugins.index.lucene.IndexCopier indexCopier;\n\n    private org.apache.lucene.store.Directory directory;\n\n    private final org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.TextExtractionStats textExtractionStats = new org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.TextExtractionStats();\n\n    private final org.apache.jackrabbit.oak.plugins.index.lucene.ExtractedTextCache extractedTextCache;\n\n    private final org.apache.jackrabbit.oak.plugins.index.lucene.IndexAugmentorFactory augmentorFactory;\n\n    private final org.apache.jackrabbit.oak.spi.state.NodeState root;\n\n    private java.util.Set<org.apache.tika.mime.MediaType> supportedMediaTypes;\n\n    private static org.apache.jackrabbit.oak.stats.Clock clock = org.apache.jackrabbit.oak.stats.Clock.SIMPLE;\n\n    LuceneIndexEditorContext(org.apache.jackrabbit.oak.spi.state.NodeState root, org.apache.jackrabbit.oak.spi.state.NodeBuilder definition, org.apache.jackrabbit.oak.plugins.index.IndexUpdateCallback updateCallback, @javax.annotation.Nullable\n    org.apache.jackrabbit.oak.plugins.index.lucene.IndexCopier indexCopier, org.apache.jackrabbit.oak.plugins.index.lucene.ExtractedTextCache extractedTextCache, org.apache.jackrabbit.oak.plugins.index.lucene.IndexAugmentorFactory augmentorFactory) {\n        this.root = root;\n        this.definitionBuilder = definition;\n        this.indexCopier = indexCopier;\n        this.definition = new org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition(root, definition);\n        this.indexedNodes = 0;\n        this.updateCallback = updateCallback;\n        this.extractedTextCache = extractedTextCache;\n        this.augmentorFactory = augmentorFactory;\n        if (this.definition.isOfOldFormat()) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition.updateDefinition(definition);\n        }\n        this.facetsConfig = org.apache.jackrabbit.oak.plugins.index.lucene.util.FacetHelper.getFacetsConfig(definition);\n    }\n\n    org.apache.tika.parser.Parser getParser() {\n        if (parser == null) {\n            parser = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.initializeTikaParser(definition);\n        }\n        return parser;\n    }\n\n    org.apache.lucene.index.IndexWriter getWriter() throws java.io.IOException {\n        if (writer == null) {\n            final long start = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.start();\n            directory = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.newIndexDirectory(definition, definitionBuilder);\n            org.apache.lucene.index.IndexWriterConfig config;\n            if (indexCopier != null) {\n                directory = indexCopier.wrapForWrite(definition, directory, reindex);\n                config = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getIndexWriterConfig(definition, false);\n            } else {\n                config = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getIndexWriterConfig(definition, true);\n            }\n            writer = new org.apache.lucene.index.IndexWriter(directory, config);\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Created IndexWriter for directory {}\", definition);\n        }\n        return writer;\n    }\n\n    private static void trackIndexSizeInfo(@javax.annotation.Nonnull\n    org.apache.lucene.index.IndexWriter writer, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition definition, @javax.annotation.Nonnull\n    org.apache.lucene.store.Directory directory) throws java.io.IOException {\n        com.google.common.base.Preconditions.checkNotNull(writer);\n        com.google.common.base.Preconditions.checkNotNull(definition);\n        com.google.common.base.Preconditions.checkNotNull(directory);\n        int docs = writer.numDocs();\n        int ram = writer.numRamDocs();\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.trace(\"Writer for direcory {} - docs: {}, ramDocs: {}\", definition, docs, ram);\n        java.lang.String[] files = directory.listAll();\n        long overallSize = 0;\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        for (java.lang.String f : files) {\n            sb.append(f).append(\":\");\n            if (directory.fileExists(f)) {\n                long size = directory.fileLength(f);\n                overallSize += size;\n                sb.append(size);\n            } else {\n                sb.append(\"--\");\n            }\n            sb.append(\", \");\n        }\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.trace(\"Directory overall size: {}, files: {}\", org.apache.jackrabbit.oak.commons.IOUtils.humanReadableByteCount(overallSize), sb.toString());\n    }\n\n    void closeWriter() throws java.io.IOException {\n        if (reindex && (writer == null)) {\n            getWriter();\n        }\n        if (writer != null) {\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.isTraceEnabled()) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.trackIndexSizeInfo(writer, definition, directory);\n            }\n            final long start = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.start();\n            updateSuggester(writer.getAnalyzer());\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Completed suggester for directory {}\", definition);\n            writer.close();\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed writer for directory {}\", definition);\n            directory.close();\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed directory for directory {}\", definition);\n            org.apache.jackrabbit.oak.spi.state.NodeBuilder status = definitionBuilder.child(\":status\");\n            status.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n            status.setProperty(\"indexedNodes\", indexedNodes);\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Overall Closed IndexWriter for directory {}\", definition);\n            textExtractionStats.log(reindex);\n            textExtractionStats.collectStats(extractedTextCache);\n        }\n    }\n\n    private void updateSuggester(org.apache.lucene.analysis.Analyzer analyzer) throws java.io.IOException {\n        if (definition.isSuggestEnabled()) {\n            boolean updateSuggester = false;\n            org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n            if (suggesterStatus.hasProperty(\"lastUpdated\")) {\n                org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n                java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n                int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n                suggesterLastUpdatedTime.add(java.util.Calendar.MINUTE, updateFrequency);\n                if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(suggesterLastUpdatedTime)) {\n                    updateSuggester = true;\n                }\n            } else {\n                updateSuggester = true;\n            }\n            if (updateSuggester) {\n                org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n                final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n                try {\n                    org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n                    suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n                } catch (java.lang.Throwable e) {\n                    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n                } finally {\n                    suggestDirectory.close();\n                    reader.close();\n                }\n            }\n        }\n    }\n\n    static void setClock(org.apache.jackrabbit.oak.stats.Clock c) {\n        com.google.common.base.Preconditions.checkNotNull(c);\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.clock = c;\n    }\n\n    private static java.util.Calendar getCalendar() {\n        java.util.Calendar ret = java.util.Calendar.getInstance();\n        ret.setTime(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.clock.getDate());\n        return ret;\n    }\n\n    public void enableReindexMode() {\n        reindex = true;\n        org.apache.jackrabbit.oak.plugins.index.lucene.IndexFormatVersion version = org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition.determineVersionForFreshIndex(definitionBuilder);\n        definitionBuilder.setProperty(IndexDefinition.INDEX_VERSION, version.getVersion());\n        definition = new org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition(root, definitionBuilder);\n    }\n\n    public long incIndexedNodes() {\n        indexedNodes++;\n        return indexedNodes;\n    }\n\n    public long getIndexedNodes() {\n        return indexedNodes;\n    }\n\n    public boolean isSupportedMediaType(java.lang.String type) {\n        if (supportedMediaTypes == null) {\n            supportedMediaTypes = getParser().getSupportedTypes(new org.apache.tika.parser.ParseContext());\n        }\n        return supportedMediaTypes.contains(org.apache.tika.mime.MediaType.parse(type));\n    }\n\n    void indexUpdate() throws org.apache.jackrabbit.oak.api.CommitFailedException {\n        updateCallback.indexUpdate();\n    }\n\n    public org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition getDefinition() {\n        return definition;\n    }\n\n    org.apache.lucene.facet.FacetsConfig getFacetsConfig() {\n        return facetsConfig;\n    }\n\n    @java.lang.Deprecated\n    public void recordTextExtractionStats(long timeInMillis, long bytesRead) {\n        recordTextExtractionStats(timeInMillis, bytesRead, 0);\n    }\n\n    public void recordTextExtractionStats(long timeInMillis, long bytesRead, int textLength) {\n        textExtractionStats.addStats(timeInMillis, bytesRead, textLength);\n    }\n\n    org.apache.jackrabbit.oak.plugins.index.lucene.ExtractedTextCache getExtractedTextCache() {\n        return extractedTextCache;\n    }\n\n    org.apache.jackrabbit.oak.plugins.index.lucene.IndexAugmentorFactory getAugmentorFactory() {\n        return augmentorFactory;\n    }\n\n    public boolean isReindex() {\n        return reindex;\n    }\n\n    private static org.apache.tika.parser.Parser initializeTikaParser(org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition definition) {\n        java.lang.ClassLoader current = java.lang.Thread.currentThread().getContextClassLoader();\n        try {\n            if (definition.hasCustomTikaConfig()) {\n                java.lang.Thread.currentThread().setContextClassLoader(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.class.getClassLoader());\n                java.io.InputStream is = definition.getTikaConfig();\n                try {\n                    return new org.apache.tika.parser.AutoDetectParser(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getTikaConfig(is, definition));\n                } finally {\n                    org.apache.commons.io.IOUtils.closeQuietly(is);\n                }\n            }\n        } finally {\n            java.lang.Thread.currentThread().setContextClassLoader(current);\n        }\n        return org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.defaultParser;\n    }\n\n    private static org.apache.tika.parser.AutoDetectParser createDefaultParser() {\n        java.lang.ClassLoader current = java.lang.Thread.currentThread().getContextClassLoader();\n        java.net.URL configUrl = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.class.getResource(\"tika-config.xml\");\n        java.io.InputStream is = null;\n        if (configUrl != null) {\n            try {\n                java.lang.Thread.currentThread().setContextClassLoader(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.class.getClassLoader());\n                is = configUrl.openStream();\n                org.apache.tika.config.TikaConfig config = new org.apache.tika.config.TikaConfig(is);\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.info(\"Loaded default Tika Config from classpath {}\", configUrl);\n                return new org.apache.tika.parser.AutoDetectParser(config);\n            } catch (java.lang.Exception e) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"Tika configuration not available : \" + configUrl, e);\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(is);\n                java.lang.Thread.currentThread().setContextClassLoader(current);\n            }\n        } else {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"Default Tika configuration not found from {}\", configUrl);\n        }\n        return new org.apache.tika.parser.AutoDetectParser();\n    }\n\n    private static org.apache.tika.config.TikaConfig getTikaConfig(java.io.InputStream configStream, java.lang.Object source) {\n        try {\n            return new org.apache.tika.config.TikaConfig(configStream);\n        } catch (java.lang.Exception e) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"Tika configuration not available : \" + source, e);\n        }\n        return org.apache.tika.config.TikaConfig.getDefaultConfig();\n    }\n\n    static class TextExtractionStats {\n        private static final long LOGGING_THRESHOLD = java.util.concurrent.TimeUnit.MINUTES.toMillis(1);\n\n        private int count;\n\n        private long totalBytesRead;\n\n        private long totalTime;\n\n        private long totalTextLength;\n\n        public void addStats(long timeInMillis, long bytesRead, int textLength) {\n            count++;\n            totalBytesRead += bytesRead;\n            totalTime += timeInMillis;\n            totalTextLength += textLength;\n        }\n\n        public void log(boolean reindex) {\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.isDebugEnabled()) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.debug(\"Text extraction stats {}\", this);\n            } else if (anyParsingDone() && (reindex || isTakingLotsOfTime())) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.info(\"Text extraction stats {}\", this);\n            }\n        }\n\n        public void collectStats(org.apache.jackrabbit.oak.plugins.index.lucene.ExtractedTextCache cache) {\n            cache.addStats(count, totalTime, totalBytesRead, totalTextLength);\n        }\n\n        private boolean isTakingLotsOfTime() {\n            return totalTime > org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.TextExtractionStats.LOGGING_THRESHOLD;\n        }\n\n        private boolean anyParsingDone() {\n            return count > 0;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\" %d (Time Taken %s, Bytes Read %s, Extracted text size %s)\", count, org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.TextExtractionStats.timeInWords(totalTime), humanReadableByteCount(totalBytesRead), humanReadableByteCount(totalTextLength));\n        }\n\n        private static java.lang.String timeInWords(long millis) {\n            return java.lang.String.format(\"%d min, %d sec\", java.util.concurrent.TimeUnit.MILLISECONDS.toMinutes(millis), java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds(millis) - java.util.concurrent.TimeUnit.MINUTES.toSeconds(java.util.concurrent.TimeUnit.MILLISECONDS.toMinutes(millis)));\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private java.util.Calendar updateSuggester(org.apache.lucene.analysis.Analyzer analyzer) throws java.io.IOException {\n    java.util.Calendar ret = null;\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n    org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n    final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n    try {\n        org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n        ret = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n        suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(ret), Type.DATE);\n    } catch (java.lang.Throwable e) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n    } finally {\n        suggestDirectory.close();\n        reader.close();\n    }\n    return ret;\n}",
            "src_parent": "public class LuceneIndexEditorContext {\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.class);\n\n    private static final org.apache.jackrabbit.oak.util.PerfLogger PERF_LOGGER = new org.apache.jackrabbit.oak.util.PerfLogger(org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.class.getName() + \".perf\"));\n\n    private final org.apache.lucene.facet.FacetsConfig facetsConfig;\n\n    static org.apache.lucene.index.IndexWriterConfig getIndexWriterConfig(org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition definition, boolean remoteDir) {\n        java.lang.Thread thread = java.lang.Thread.currentThread();\n        java.lang.ClassLoader loader = thread.getContextClassLoader();\n        thread.setContextClassLoader(org.apache.lucene.index.IndexWriterConfig.class.getClassLoader());\n        try {\n            org.apache.lucene.analysis.Analyzer definitionAnalyzer = definition.getAnalyzer();\n            java.util.Map<java.lang.String, org.apache.lucene.analysis.Analyzer> analyzers = new java.util.HashMap<java.lang.String, org.apache.lucene.analysis.Analyzer>();\n            analyzers.put(FieldNames.SPELLCHECK, new org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper(LuceneIndexConstants.ANALYZER, 3));\n            if (!definition.isSuggestAnalyzed()) {\n                analyzers.put(FieldNames.SUGGEST, org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.getAnalyzer());\n            }\n            org.apache.lucene.analysis.Analyzer analyzer = new org.apache.lucene.analysis.miscellaneous.PerFieldAnalyzerWrapper(definitionAnalyzer, analyzers);\n            org.apache.lucene.index.IndexWriterConfig config = new org.apache.lucene.index.IndexWriterConfig(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.VERSION, analyzer);\n            if (remoteDir) {\n                config.setMergeScheduler(new org.apache.lucene.index.SerialMergeScheduler());\n            }\n            if (definition.getCodec() != null) {\n                config.setCodec(definition.getCodec());\n            }\n            return config;\n        } finally {\n            thread.setContextClassLoader(loader);\n        }\n    }\n\n    static org.apache.lucene.store.Directory newIndexDirectory(org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition indexDefinition, org.apache.jackrabbit.oak.spi.state.NodeBuilder definition) throws java.io.IOException {\n        java.lang.String path = definition.getString(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.PERSISTENCE_PATH);\n        if (path == null) {\n            return new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definition, indexDefinition, false);\n        } else {\n            java.io.File file = new java.io.File(path);\n            file.mkdirs();\n            return org.apache.lucene.store.FSDirectory.open(file, getNoLockFactory());\n        }\n    }\n\n    private static final org.apache.tika.parser.Parser defaultParser = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.createDefaultParser();\n\n    private org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition definition;\n\n    private final org.apache.jackrabbit.oak.spi.state.NodeBuilder definitionBuilder;\n\n    private org.apache.lucene.index.IndexWriter writer = null;\n\n    private long indexedNodes;\n\n    private final org.apache.jackrabbit.oak.plugins.index.IndexUpdateCallback updateCallback;\n\n    private boolean reindex;\n\n    private org.apache.tika.parser.Parser parser;\n\n    @javax.annotation.Nullable\n    private final org.apache.jackrabbit.oak.plugins.index.lucene.IndexCopier indexCopier;\n\n    private org.apache.lucene.store.Directory directory;\n\n    private final org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.TextExtractionStats textExtractionStats = new org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.TextExtractionStats();\n\n    private final org.apache.jackrabbit.oak.plugins.index.lucene.ExtractedTextCache extractedTextCache;\n\n    private final org.apache.jackrabbit.oak.plugins.index.lucene.IndexAugmentorFactory augmentorFactory;\n\n    private final org.apache.jackrabbit.oak.spi.state.NodeState root;\n\n    private java.util.Set<org.apache.tika.mime.MediaType> supportedMediaTypes;\n\n    private static org.apache.jackrabbit.oak.stats.Clock clock = org.apache.jackrabbit.oak.stats.Clock.SIMPLE;\n\n    LuceneIndexEditorContext(org.apache.jackrabbit.oak.spi.state.NodeState root, org.apache.jackrabbit.oak.spi.state.NodeBuilder definition, org.apache.jackrabbit.oak.plugins.index.IndexUpdateCallback updateCallback, @javax.annotation.Nullable\n    org.apache.jackrabbit.oak.plugins.index.lucene.IndexCopier indexCopier, org.apache.jackrabbit.oak.plugins.index.lucene.ExtractedTextCache extractedTextCache, org.apache.jackrabbit.oak.plugins.index.lucene.IndexAugmentorFactory augmentorFactory) {\n        this.root = root;\n        this.definitionBuilder = definition;\n        this.indexCopier = indexCopier;\n        this.definition = new org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition(root, definition);\n        this.indexedNodes = 0;\n        this.updateCallback = updateCallback;\n        this.extractedTextCache = extractedTextCache;\n        this.augmentorFactory = augmentorFactory;\n        if (this.definition.isOfOldFormat()) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition.updateDefinition(definition);\n        }\n        this.facetsConfig = org.apache.jackrabbit.oak.plugins.index.lucene.util.FacetHelper.getFacetsConfig(definition);\n    }\n\n    org.apache.tika.parser.Parser getParser() {\n        if (parser == null) {\n            parser = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.initializeTikaParser(definition);\n        }\n        return parser;\n    }\n\n    org.apache.lucene.index.IndexWriter getWriter() throws java.io.IOException {\n        if (writer == null) {\n            final long start = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.start();\n            directory = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.newIndexDirectory(definition, definitionBuilder);\n            org.apache.lucene.index.IndexWriterConfig config;\n            if (indexCopier != null) {\n                directory = indexCopier.wrapForWrite(definition, directory, reindex);\n                config = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getIndexWriterConfig(definition, false);\n            } else {\n                config = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getIndexWriterConfig(definition, true);\n            }\n            writer = new org.apache.lucene.index.IndexWriter(directory, config);\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Created IndexWriter for directory {}\", definition);\n        }\n        return writer;\n    }\n\n    private static void trackIndexSizeInfo(@javax.annotation.Nonnull\n    org.apache.lucene.index.IndexWriter writer, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition definition, @javax.annotation.Nonnull\n    org.apache.lucene.store.Directory directory) throws java.io.IOException {\n        com.google.common.base.Preconditions.checkNotNull(writer);\n        com.google.common.base.Preconditions.checkNotNull(definition);\n        com.google.common.base.Preconditions.checkNotNull(directory);\n        int docs = writer.numDocs();\n        int ram = writer.numRamDocs();\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.trace(\"Writer for direcory {} - docs: {}, ramDocs: {}\", definition, docs, ram);\n        java.lang.String[] files = directory.listAll();\n        long overallSize = 0;\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        for (java.lang.String f : files) {\n            sb.append(f).append(\":\");\n            if (directory.fileExists(f)) {\n                long size = directory.fileLength(f);\n                overallSize += size;\n                sb.append(size);\n            } else {\n                sb.append(\"--\");\n            }\n            sb.append(\", \");\n        }\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.trace(\"Directory overall size: {}, files: {}\", org.apache.jackrabbit.oak.commons.IOUtils.humanReadableByteCount(overallSize), sb.toString());\n    }\n\n    void closeWriter() throws java.io.IOException {\n        if (reindex && (writer == null)) {\n            getWriter();\n        }\n        boolean updateSuggestions = shouldUpdateSuggestions();\n        if ((writer == null) && updateSuggestions) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.debug(\"Would update suggester dictionary although no index changes were detected in current cycle\");\n            getWriter();\n        }\n        if (writer != null) {\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.isTraceEnabled()) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.trackIndexSizeInfo(writer, definition, directory);\n            }\n            final long start = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.start();\n            java.util.Calendar lastUpdated = null;\n            if (updateSuggestions) {\n                lastUpdated = updateSuggester(writer.getAnalyzer());\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Completed suggester for directory {}\", definition);\n            }\n            if (lastUpdated == null) {\n                lastUpdated = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n            }\n            writer.close();\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed writer for directory {}\", definition);\n            directory.close();\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed directory for directory {}\", definition);\n            org.apache.jackrabbit.oak.spi.state.NodeBuilder status = definitionBuilder.child(\":status\");\n            status.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(lastUpdated), Type.DATE);\n            status.setProperty(\"indexedNodes\", indexedNodes);\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Overall Closed IndexWriter for directory {}\", definition);\n            textExtractionStats.log(reindex);\n            textExtractionStats.collectStats(extractedTextCache);\n        }\n    }\n\n    private java.util.Calendar updateSuggester(org.apache.lucene.analysis.Analyzer analyzer) throws java.io.IOException {\n        java.util.Calendar ret = null;\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n        org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n        final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n        try {\n            org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n            ret = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n            suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(ret), Type.DATE);\n        } catch (java.lang.Throwable e) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n        } finally {\n            suggestDirectory.close();\n            reader.close();\n        }\n        return ret;\n    }\n\n    private boolean shouldUpdateSuggestions() {\n        boolean updateSuggestions = false;\n        if (definition.isSuggestEnabled()) {\n            org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n            org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n            if (suggesterLastUpdatedValue != null) {\n                java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n                int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n                java.util.Calendar nextSuggestUpdateTime = ((java.util.Calendar) (suggesterLastUpdatedTime.clone()));\n                nextSuggestUpdateTime.add(java.util.Calendar.MINUTE, updateFrequency);\n                if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(nextSuggestUpdateTime)) {\n                    updateSuggestions = (writer != null) || isIndexUpdatedAfter(suggesterLastUpdatedTime);\n                }\n            } else {\n                updateSuggestions = true;\n            }\n        }\n        return updateSuggestions;\n    }\n\n    private boolean isIndexUpdatedAfter(java.util.Calendar calendar) {\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder indexStats = definitionBuilder.child(\":status\");\n        org.apache.jackrabbit.oak.api.PropertyState indexLastUpdatedValue = indexStats.getProperty(\"lastUpdated\");\n        if (indexLastUpdatedValue != null) {\n            java.util.Calendar indexLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(indexLastUpdatedValue.getValue(Type.DATE));\n            return indexLastUpdatedTime.after(calendar);\n        } else {\n            return true;\n        }\n    }\n\n    static void setClock(org.apache.jackrabbit.oak.stats.Clock c) {\n        com.google.common.base.Preconditions.checkNotNull(c);\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.clock = c;\n    }\n\n    private static java.util.Calendar getCalendar() {\n        java.util.Calendar ret = java.util.Calendar.getInstance();\n        ret.setTime(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.clock.getDate());\n        return ret;\n    }\n\n    public void enableReindexMode() {\n        reindex = true;\n        org.apache.jackrabbit.oak.plugins.index.lucene.IndexFormatVersion version = org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition.determineVersionForFreshIndex(definitionBuilder);\n        definitionBuilder.setProperty(IndexDefinition.INDEX_VERSION, version.getVersion());\n        definition = new org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition(root, definitionBuilder);\n    }\n\n    public long incIndexedNodes() {\n        indexedNodes++;\n        return indexedNodes;\n    }\n\n    public long getIndexedNodes() {\n        return indexedNodes;\n    }\n\n    public boolean isSupportedMediaType(java.lang.String type) {\n        if (supportedMediaTypes == null) {\n            supportedMediaTypes = getParser().getSupportedTypes(new org.apache.tika.parser.ParseContext());\n        }\n        return supportedMediaTypes.contains(org.apache.tika.mime.MediaType.parse(type));\n    }\n\n    void indexUpdate() throws org.apache.jackrabbit.oak.api.CommitFailedException {\n        updateCallback.indexUpdate();\n    }\n\n    public org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition getDefinition() {\n        return definition;\n    }\n\n    org.apache.lucene.facet.FacetsConfig getFacetsConfig() {\n        return facetsConfig;\n    }\n\n    @java.lang.Deprecated\n    public void recordTextExtractionStats(long timeInMillis, long bytesRead) {\n        recordTextExtractionStats(timeInMillis, bytesRead, 0);\n    }\n\n    public void recordTextExtractionStats(long timeInMillis, long bytesRead, int textLength) {\n        textExtractionStats.addStats(timeInMillis, bytesRead, textLength);\n    }\n\n    org.apache.jackrabbit.oak.plugins.index.lucene.ExtractedTextCache getExtractedTextCache() {\n        return extractedTextCache;\n    }\n\n    org.apache.jackrabbit.oak.plugins.index.lucene.IndexAugmentorFactory getAugmentorFactory() {\n        return augmentorFactory;\n    }\n\n    public boolean isReindex() {\n        return reindex;\n    }\n\n    private static org.apache.tika.parser.Parser initializeTikaParser(org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition definition) {\n        java.lang.ClassLoader current = java.lang.Thread.currentThread().getContextClassLoader();\n        try {\n            if (definition.hasCustomTikaConfig()) {\n                java.lang.Thread.currentThread().setContextClassLoader(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.class.getClassLoader());\n                java.io.InputStream is = definition.getTikaConfig();\n                try {\n                    return new org.apache.tika.parser.AutoDetectParser(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getTikaConfig(is, definition));\n                } finally {\n                    org.apache.commons.io.IOUtils.closeQuietly(is);\n                }\n            }\n        } finally {\n            java.lang.Thread.currentThread().setContextClassLoader(current);\n        }\n        return org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.defaultParser;\n    }\n\n    private static org.apache.tika.parser.AutoDetectParser createDefaultParser() {\n        java.lang.ClassLoader current = java.lang.Thread.currentThread().getContextClassLoader();\n        java.net.URL configUrl = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.class.getResource(\"tika-config.xml\");\n        java.io.InputStream is = null;\n        if (configUrl != null) {\n            try {\n                java.lang.Thread.currentThread().setContextClassLoader(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.class.getClassLoader());\n                is = configUrl.openStream();\n                org.apache.tika.config.TikaConfig config = new org.apache.tika.config.TikaConfig(is);\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.info(\"Loaded default Tika Config from classpath {}\", configUrl);\n                return new org.apache.tika.parser.AutoDetectParser(config);\n            } catch (java.lang.Exception e) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"Tika configuration not available : \" + configUrl, e);\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(is);\n                java.lang.Thread.currentThread().setContextClassLoader(current);\n            }\n        } else {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"Default Tika configuration not found from {}\", configUrl);\n        }\n        return new org.apache.tika.parser.AutoDetectParser();\n    }\n\n    private static org.apache.tika.config.TikaConfig getTikaConfig(java.io.InputStream configStream, java.lang.Object source) {\n        try {\n            return new org.apache.tika.config.TikaConfig(configStream);\n        } catch (java.lang.Exception e) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"Tika configuration not available : \" + source, e);\n        }\n        return org.apache.tika.config.TikaConfig.getDefaultConfig();\n    }\n\n    static class TextExtractionStats {\n        private static final long LOGGING_THRESHOLD = java.util.concurrent.TimeUnit.MINUTES.toMillis(1);\n\n        private int count;\n\n        private long totalBytesRead;\n\n        private long totalTime;\n\n        private long totalTextLength;\n\n        public void addStats(long timeInMillis, long bytesRead, int textLength) {\n            count++;\n            totalBytesRead += bytesRead;\n            totalTime += timeInMillis;\n            totalTextLength += textLength;\n        }\n\n        public void log(boolean reindex) {\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.isDebugEnabled()) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.debug(\"Text extraction stats {}\", this);\n            } else if (anyParsingDone() && (reindex || isTakingLotsOfTime())) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.info(\"Text extraction stats {}\", this);\n            }\n        }\n\n        public void collectStats(org.apache.jackrabbit.oak.plugins.index.lucene.ExtractedTextCache cache) {\n            cache.addStats(count, totalTime, totalBytesRead, totalTextLength);\n        }\n\n        private boolean isTakingLotsOfTime() {\n            return totalTime > org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.TextExtractionStats.LOGGING_THRESHOLD;\n        }\n\n        private boolean anyParsingDone() {\n            return count > 0;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\" %d (Time Taken %s, Bytes Read %s, Extracted text size %s)\", count, org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.TextExtractionStats.timeInWords(totalTime), humanReadableByteCount(totalBytesRead), humanReadableByteCount(totalTextLength));\n        }\n\n        private static java.lang.String timeInWords(long millis) {\n            return java.lang.String.format(\"%d min, %d sec\", java.util.concurrent.TimeUnit.MILLISECONDS.toMinutes(millis), java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds(millis) - java.util.concurrent.TimeUnit.MINUTES.toSeconds(java.util.concurrent.TimeUnit.MILLISECONDS.toMinutes(millis)));\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private boolean shouldUpdateSuggestions() {\n    boolean updateSuggestions = false;\n    if (definition.isSuggestEnabled()) {\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n        org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n        if (suggesterLastUpdatedValue != null) {\n            java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n            int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n            java.util.Calendar nextSuggestUpdateTime = ((java.util.Calendar) (suggesterLastUpdatedTime.clone()));\n            nextSuggestUpdateTime.add(java.util.Calendar.MINUTE, updateFrequency);\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(nextSuggestUpdateTime)) {\n                updateSuggestions = (writer != null) || isIndexUpdatedAfter(suggesterLastUpdatedTime);\n            }\n        } else {\n            updateSuggestions = true;\n        }\n    }\n    return updateSuggestions;\n}",
            "src_parent": "public class LuceneIndexEditorContext {\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.class);\n\n    private static final org.apache.jackrabbit.oak.util.PerfLogger PERF_LOGGER = new org.apache.jackrabbit.oak.util.PerfLogger(org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.class.getName() + \".perf\"));\n\n    private final org.apache.lucene.facet.FacetsConfig facetsConfig;\n\n    static org.apache.lucene.index.IndexWriterConfig getIndexWriterConfig(org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition definition, boolean remoteDir) {\n        java.lang.Thread thread = java.lang.Thread.currentThread();\n        java.lang.ClassLoader loader = thread.getContextClassLoader();\n        thread.setContextClassLoader(org.apache.lucene.index.IndexWriterConfig.class.getClassLoader());\n        try {\n            org.apache.lucene.analysis.Analyzer definitionAnalyzer = definition.getAnalyzer();\n            java.util.Map<java.lang.String, org.apache.lucene.analysis.Analyzer> analyzers = new java.util.HashMap<java.lang.String, org.apache.lucene.analysis.Analyzer>();\n            analyzers.put(FieldNames.SPELLCHECK, new org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper(LuceneIndexConstants.ANALYZER, 3));\n            if (!definition.isSuggestAnalyzed()) {\n                analyzers.put(FieldNames.SUGGEST, org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.getAnalyzer());\n            }\n            org.apache.lucene.analysis.Analyzer analyzer = new org.apache.lucene.analysis.miscellaneous.PerFieldAnalyzerWrapper(definitionAnalyzer, analyzers);\n            org.apache.lucene.index.IndexWriterConfig config = new org.apache.lucene.index.IndexWriterConfig(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.VERSION, analyzer);\n            if (remoteDir) {\n                config.setMergeScheduler(new org.apache.lucene.index.SerialMergeScheduler());\n            }\n            if (definition.getCodec() != null) {\n                config.setCodec(definition.getCodec());\n            }\n            return config;\n        } finally {\n            thread.setContextClassLoader(loader);\n        }\n    }\n\n    static org.apache.lucene.store.Directory newIndexDirectory(org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition indexDefinition, org.apache.jackrabbit.oak.spi.state.NodeBuilder definition) throws java.io.IOException {\n        java.lang.String path = definition.getString(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.PERSISTENCE_PATH);\n        if (path == null) {\n            return new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definition, indexDefinition, false);\n        } else {\n            java.io.File file = new java.io.File(path);\n            file.mkdirs();\n            return org.apache.lucene.store.FSDirectory.open(file, getNoLockFactory());\n        }\n    }\n\n    private static final org.apache.tika.parser.Parser defaultParser = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.createDefaultParser();\n\n    private org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition definition;\n\n    private final org.apache.jackrabbit.oak.spi.state.NodeBuilder definitionBuilder;\n\n    private org.apache.lucene.index.IndexWriter writer = null;\n\n    private long indexedNodes;\n\n    private final org.apache.jackrabbit.oak.plugins.index.IndexUpdateCallback updateCallback;\n\n    private boolean reindex;\n\n    private org.apache.tika.parser.Parser parser;\n\n    @javax.annotation.Nullable\n    private final org.apache.jackrabbit.oak.plugins.index.lucene.IndexCopier indexCopier;\n\n    private org.apache.lucene.store.Directory directory;\n\n    private final org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.TextExtractionStats textExtractionStats = new org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.TextExtractionStats();\n\n    private final org.apache.jackrabbit.oak.plugins.index.lucene.ExtractedTextCache extractedTextCache;\n\n    private final org.apache.jackrabbit.oak.plugins.index.lucene.IndexAugmentorFactory augmentorFactory;\n\n    private final org.apache.jackrabbit.oak.spi.state.NodeState root;\n\n    private java.util.Set<org.apache.tika.mime.MediaType> supportedMediaTypes;\n\n    private static org.apache.jackrabbit.oak.stats.Clock clock = org.apache.jackrabbit.oak.stats.Clock.SIMPLE;\n\n    LuceneIndexEditorContext(org.apache.jackrabbit.oak.spi.state.NodeState root, org.apache.jackrabbit.oak.spi.state.NodeBuilder definition, org.apache.jackrabbit.oak.plugins.index.IndexUpdateCallback updateCallback, @javax.annotation.Nullable\n    org.apache.jackrabbit.oak.plugins.index.lucene.IndexCopier indexCopier, org.apache.jackrabbit.oak.plugins.index.lucene.ExtractedTextCache extractedTextCache, org.apache.jackrabbit.oak.plugins.index.lucene.IndexAugmentorFactory augmentorFactory) {\n        this.root = root;\n        this.definitionBuilder = definition;\n        this.indexCopier = indexCopier;\n        this.definition = new org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition(root, definition);\n        this.indexedNodes = 0;\n        this.updateCallback = updateCallback;\n        this.extractedTextCache = extractedTextCache;\n        this.augmentorFactory = augmentorFactory;\n        if (this.definition.isOfOldFormat()) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition.updateDefinition(definition);\n        }\n        this.facetsConfig = org.apache.jackrabbit.oak.plugins.index.lucene.util.FacetHelper.getFacetsConfig(definition);\n    }\n\n    org.apache.tika.parser.Parser getParser() {\n        if (parser == null) {\n            parser = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.initializeTikaParser(definition);\n        }\n        return parser;\n    }\n\n    org.apache.lucene.index.IndexWriter getWriter() throws java.io.IOException {\n        if (writer == null) {\n            final long start = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.start();\n            directory = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.newIndexDirectory(definition, definitionBuilder);\n            org.apache.lucene.index.IndexWriterConfig config;\n            if (indexCopier != null) {\n                directory = indexCopier.wrapForWrite(definition, directory, reindex);\n                config = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getIndexWriterConfig(definition, false);\n            } else {\n                config = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getIndexWriterConfig(definition, true);\n            }\n            writer = new org.apache.lucene.index.IndexWriter(directory, config);\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Created IndexWriter for directory {}\", definition);\n        }\n        return writer;\n    }\n\n    private static void trackIndexSizeInfo(@javax.annotation.Nonnull\n    org.apache.lucene.index.IndexWriter writer, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition definition, @javax.annotation.Nonnull\n    org.apache.lucene.store.Directory directory) throws java.io.IOException {\n        com.google.common.base.Preconditions.checkNotNull(writer);\n        com.google.common.base.Preconditions.checkNotNull(definition);\n        com.google.common.base.Preconditions.checkNotNull(directory);\n        int docs = writer.numDocs();\n        int ram = writer.numRamDocs();\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.trace(\"Writer for direcory {} - docs: {}, ramDocs: {}\", definition, docs, ram);\n        java.lang.String[] files = directory.listAll();\n        long overallSize = 0;\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        for (java.lang.String f : files) {\n            sb.append(f).append(\":\");\n            if (directory.fileExists(f)) {\n                long size = directory.fileLength(f);\n                overallSize += size;\n                sb.append(size);\n            } else {\n                sb.append(\"--\");\n            }\n            sb.append(\", \");\n        }\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.trace(\"Directory overall size: {}, files: {}\", org.apache.jackrabbit.oak.commons.IOUtils.humanReadableByteCount(overallSize), sb.toString());\n    }\n\n    void closeWriter() throws java.io.IOException {\n        if (reindex && (writer == null)) {\n            getWriter();\n        }\n        boolean updateSuggestions = shouldUpdateSuggestions();\n        if ((writer == null) && updateSuggestions) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.debug(\"Would update suggester dictionary although no index changes were detected in current cycle\");\n            getWriter();\n        }\n        if (writer != null) {\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.isTraceEnabled()) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.trackIndexSizeInfo(writer, definition, directory);\n            }\n            final long start = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.start();\n            java.util.Calendar lastUpdated = null;\n            if (updateSuggestions) {\n                lastUpdated = updateSuggester(writer.getAnalyzer());\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Completed suggester for directory {}\", definition);\n            }\n            if (lastUpdated == null) {\n                lastUpdated = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n            }\n            writer.close();\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed writer for directory {}\", definition);\n            directory.close();\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed directory for directory {}\", definition);\n            org.apache.jackrabbit.oak.spi.state.NodeBuilder status = definitionBuilder.child(\":status\");\n            status.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(lastUpdated), Type.DATE);\n            status.setProperty(\"indexedNodes\", indexedNodes);\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Overall Closed IndexWriter for directory {}\", definition);\n            textExtractionStats.log(reindex);\n            textExtractionStats.collectStats(extractedTextCache);\n        }\n    }\n\n    private java.util.Calendar updateSuggester(org.apache.lucene.analysis.Analyzer analyzer) throws java.io.IOException {\n        java.util.Calendar ret = null;\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n        org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n        final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n        try {\n            org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n            ret = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n            suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(ret), Type.DATE);\n        } catch (java.lang.Throwable e) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n        } finally {\n            suggestDirectory.close();\n            reader.close();\n        }\n        return ret;\n    }\n\n    private boolean shouldUpdateSuggestions() {\n        boolean updateSuggestions = false;\n        if (definition.isSuggestEnabled()) {\n            org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n            org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n            if (suggesterLastUpdatedValue != null) {\n                java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n                int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n                java.util.Calendar nextSuggestUpdateTime = ((java.util.Calendar) (suggesterLastUpdatedTime.clone()));\n                nextSuggestUpdateTime.add(java.util.Calendar.MINUTE, updateFrequency);\n                if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(nextSuggestUpdateTime)) {\n                    updateSuggestions = (writer != null) || isIndexUpdatedAfter(suggesterLastUpdatedTime);\n                }\n            } else {\n                updateSuggestions = true;\n            }\n        }\n        return updateSuggestions;\n    }\n\n    private boolean isIndexUpdatedAfter(java.util.Calendar calendar) {\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder indexStats = definitionBuilder.child(\":status\");\n        org.apache.jackrabbit.oak.api.PropertyState indexLastUpdatedValue = indexStats.getProperty(\"lastUpdated\");\n        if (indexLastUpdatedValue != null) {\n            java.util.Calendar indexLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(indexLastUpdatedValue.getValue(Type.DATE));\n            return indexLastUpdatedTime.after(calendar);\n        } else {\n            return true;\n        }\n    }\n\n    static void setClock(org.apache.jackrabbit.oak.stats.Clock c) {\n        com.google.common.base.Preconditions.checkNotNull(c);\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.clock = c;\n    }\n\n    private static java.util.Calendar getCalendar() {\n        java.util.Calendar ret = java.util.Calendar.getInstance();\n        ret.setTime(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.clock.getDate());\n        return ret;\n    }\n\n    public void enableReindexMode() {\n        reindex = true;\n        org.apache.jackrabbit.oak.plugins.index.lucene.IndexFormatVersion version = org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition.determineVersionForFreshIndex(definitionBuilder);\n        definitionBuilder.setProperty(IndexDefinition.INDEX_VERSION, version.getVersion());\n        definition = new org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition(root, definitionBuilder);\n    }\n\n    public long incIndexedNodes() {\n        indexedNodes++;\n        return indexedNodes;\n    }\n\n    public long getIndexedNodes() {\n        return indexedNodes;\n    }\n\n    public boolean isSupportedMediaType(java.lang.String type) {\n        if (supportedMediaTypes == null) {\n            supportedMediaTypes = getParser().getSupportedTypes(new org.apache.tika.parser.ParseContext());\n        }\n        return supportedMediaTypes.contains(org.apache.tika.mime.MediaType.parse(type));\n    }\n\n    void indexUpdate() throws org.apache.jackrabbit.oak.api.CommitFailedException {\n        updateCallback.indexUpdate();\n    }\n\n    public org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition getDefinition() {\n        return definition;\n    }\n\n    org.apache.lucene.facet.FacetsConfig getFacetsConfig() {\n        return facetsConfig;\n    }\n\n    @java.lang.Deprecated\n    public void recordTextExtractionStats(long timeInMillis, long bytesRead) {\n        recordTextExtractionStats(timeInMillis, bytesRead, 0);\n    }\n\n    public void recordTextExtractionStats(long timeInMillis, long bytesRead, int textLength) {\n        textExtractionStats.addStats(timeInMillis, bytesRead, textLength);\n    }\n\n    org.apache.jackrabbit.oak.plugins.index.lucene.ExtractedTextCache getExtractedTextCache() {\n        return extractedTextCache;\n    }\n\n    org.apache.jackrabbit.oak.plugins.index.lucene.IndexAugmentorFactory getAugmentorFactory() {\n        return augmentorFactory;\n    }\n\n    public boolean isReindex() {\n        return reindex;\n    }\n\n    private static org.apache.tika.parser.Parser initializeTikaParser(org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition definition) {\n        java.lang.ClassLoader current = java.lang.Thread.currentThread().getContextClassLoader();\n        try {\n            if (definition.hasCustomTikaConfig()) {\n                java.lang.Thread.currentThread().setContextClassLoader(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.class.getClassLoader());\n                java.io.InputStream is = definition.getTikaConfig();\n                try {\n                    return new org.apache.tika.parser.AutoDetectParser(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getTikaConfig(is, definition));\n                } finally {\n                    org.apache.commons.io.IOUtils.closeQuietly(is);\n                }\n            }\n        } finally {\n            java.lang.Thread.currentThread().setContextClassLoader(current);\n        }\n        return org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.defaultParser;\n    }\n\n    private static org.apache.tika.parser.AutoDetectParser createDefaultParser() {\n        java.lang.ClassLoader current = java.lang.Thread.currentThread().getContextClassLoader();\n        java.net.URL configUrl = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.class.getResource(\"tika-config.xml\");\n        java.io.InputStream is = null;\n        if (configUrl != null) {\n            try {\n                java.lang.Thread.currentThread().setContextClassLoader(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.class.getClassLoader());\n                is = configUrl.openStream();\n                org.apache.tika.config.TikaConfig config = new org.apache.tika.config.TikaConfig(is);\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.info(\"Loaded default Tika Config from classpath {}\", configUrl);\n                return new org.apache.tika.parser.AutoDetectParser(config);\n            } catch (java.lang.Exception e) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"Tika configuration not available : \" + configUrl, e);\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(is);\n                java.lang.Thread.currentThread().setContextClassLoader(current);\n            }\n        } else {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"Default Tika configuration not found from {}\", configUrl);\n        }\n        return new org.apache.tika.parser.AutoDetectParser();\n    }\n\n    private static org.apache.tika.config.TikaConfig getTikaConfig(java.io.InputStream configStream, java.lang.Object source) {\n        try {\n            return new org.apache.tika.config.TikaConfig(configStream);\n        } catch (java.lang.Exception e) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"Tika configuration not available : \" + source, e);\n        }\n        return org.apache.tika.config.TikaConfig.getDefaultConfig();\n    }\n\n    static class TextExtractionStats {\n        private static final long LOGGING_THRESHOLD = java.util.concurrent.TimeUnit.MINUTES.toMillis(1);\n\n        private int count;\n\n        private long totalBytesRead;\n\n        private long totalTime;\n\n        private long totalTextLength;\n\n        public void addStats(long timeInMillis, long bytesRead, int textLength) {\n            count++;\n            totalBytesRead += bytesRead;\n            totalTime += timeInMillis;\n            totalTextLength += textLength;\n        }\n\n        public void log(boolean reindex) {\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.isDebugEnabled()) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.debug(\"Text extraction stats {}\", this);\n            } else if (anyParsingDone() && (reindex || isTakingLotsOfTime())) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.info(\"Text extraction stats {}\", this);\n            }\n        }\n\n        public void collectStats(org.apache.jackrabbit.oak.plugins.index.lucene.ExtractedTextCache cache) {\n            cache.addStats(count, totalTime, totalBytesRead, totalTextLength);\n        }\n\n        private boolean isTakingLotsOfTime() {\n            return totalTime > org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.TextExtractionStats.LOGGING_THRESHOLD;\n        }\n\n        private boolean anyParsingDone() {\n            return count > 0;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\" %d (Time Taken %s, Bytes Read %s, Extracted text size %s)\", count, org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.TextExtractionStats.timeInWords(totalTime), humanReadableByteCount(totalBytesRead), humanReadableByteCount(totalTextLength));\n        }\n\n        private static java.lang.String timeInWords(long millis) {\n            return java.lang.String.format(\"%d min, %d sec\", java.util.concurrent.TimeUnit.MILLISECONDS.toMinutes(millis), java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds(millis) - java.util.concurrent.TimeUnit.MINUTES.toSeconds(java.util.concurrent.TimeUnit.MILLISECONDS.toMinutes(millis)));\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private boolean isIndexUpdatedAfter(java.util.Calendar calendar) {\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder indexStats = definitionBuilder.child(\":status\");\n    org.apache.jackrabbit.oak.api.PropertyState indexLastUpdatedValue = indexStats.getProperty(\"lastUpdated\");\n    if (indexLastUpdatedValue != null) {\n        java.util.Calendar indexLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(indexLastUpdatedValue.getValue(Type.DATE));\n        return indexLastUpdatedTime.after(calendar);\n    } else {\n        return true;\n    }\n}",
            "src_parent": "public class LuceneIndexEditorContext {\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.class);\n\n    private static final org.apache.jackrabbit.oak.util.PerfLogger PERF_LOGGER = new org.apache.jackrabbit.oak.util.PerfLogger(org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.class.getName() + \".perf\"));\n\n    private final org.apache.lucene.facet.FacetsConfig facetsConfig;\n\n    static org.apache.lucene.index.IndexWriterConfig getIndexWriterConfig(org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition definition, boolean remoteDir) {\n        java.lang.Thread thread = java.lang.Thread.currentThread();\n        java.lang.ClassLoader loader = thread.getContextClassLoader();\n        thread.setContextClassLoader(org.apache.lucene.index.IndexWriterConfig.class.getClassLoader());\n        try {\n            org.apache.lucene.analysis.Analyzer definitionAnalyzer = definition.getAnalyzer();\n            java.util.Map<java.lang.String, org.apache.lucene.analysis.Analyzer> analyzers = new java.util.HashMap<java.lang.String, org.apache.lucene.analysis.Analyzer>();\n            analyzers.put(FieldNames.SPELLCHECK, new org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper(LuceneIndexConstants.ANALYZER, 3));\n            if (!definition.isSuggestAnalyzed()) {\n                analyzers.put(FieldNames.SUGGEST, org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.getAnalyzer());\n            }\n            org.apache.lucene.analysis.Analyzer analyzer = new org.apache.lucene.analysis.miscellaneous.PerFieldAnalyzerWrapper(definitionAnalyzer, analyzers);\n            org.apache.lucene.index.IndexWriterConfig config = new org.apache.lucene.index.IndexWriterConfig(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.VERSION, analyzer);\n            if (remoteDir) {\n                config.setMergeScheduler(new org.apache.lucene.index.SerialMergeScheduler());\n            }\n            if (definition.getCodec() != null) {\n                config.setCodec(definition.getCodec());\n            }\n            return config;\n        } finally {\n            thread.setContextClassLoader(loader);\n        }\n    }\n\n    static org.apache.lucene.store.Directory newIndexDirectory(org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition indexDefinition, org.apache.jackrabbit.oak.spi.state.NodeBuilder definition) throws java.io.IOException {\n        java.lang.String path = definition.getString(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexConstants.PERSISTENCE_PATH);\n        if (path == null) {\n            return new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definition, indexDefinition, false);\n        } else {\n            java.io.File file = new java.io.File(path);\n            file.mkdirs();\n            return org.apache.lucene.store.FSDirectory.open(file, getNoLockFactory());\n        }\n    }\n\n    private static final org.apache.tika.parser.Parser defaultParser = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.createDefaultParser();\n\n    private org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition definition;\n\n    private final org.apache.jackrabbit.oak.spi.state.NodeBuilder definitionBuilder;\n\n    private org.apache.lucene.index.IndexWriter writer = null;\n\n    private long indexedNodes;\n\n    private final org.apache.jackrabbit.oak.plugins.index.IndexUpdateCallback updateCallback;\n\n    private boolean reindex;\n\n    private org.apache.tika.parser.Parser parser;\n\n    @javax.annotation.Nullable\n    private final org.apache.jackrabbit.oak.plugins.index.lucene.IndexCopier indexCopier;\n\n    private org.apache.lucene.store.Directory directory;\n\n    private final org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.TextExtractionStats textExtractionStats = new org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.TextExtractionStats();\n\n    private final org.apache.jackrabbit.oak.plugins.index.lucene.ExtractedTextCache extractedTextCache;\n\n    private final org.apache.jackrabbit.oak.plugins.index.lucene.IndexAugmentorFactory augmentorFactory;\n\n    private final org.apache.jackrabbit.oak.spi.state.NodeState root;\n\n    private java.util.Set<org.apache.tika.mime.MediaType> supportedMediaTypes;\n\n    private static org.apache.jackrabbit.oak.stats.Clock clock = org.apache.jackrabbit.oak.stats.Clock.SIMPLE;\n\n    LuceneIndexEditorContext(org.apache.jackrabbit.oak.spi.state.NodeState root, org.apache.jackrabbit.oak.spi.state.NodeBuilder definition, org.apache.jackrabbit.oak.plugins.index.IndexUpdateCallback updateCallback, @javax.annotation.Nullable\n    org.apache.jackrabbit.oak.plugins.index.lucene.IndexCopier indexCopier, org.apache.jackrabbit.oak.plugins.index.lucene.ExtractedTextCache extractedTextCache, org.apache.jackrabbit.oak.plugins.index.lucene.IndexAugmentorFactory augmentorFactory) {\n        this.root = root;\n        this.definitionBuilder = definition;\n        this.indexCopier = indexCopier;\n        this.definition = new org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition(root, definition);\n        this.indexedNodes = 0;\n        this.updateCallback = updateCallback;\n        this.extractedTextCache = extractedTextCache;\n        this.augmentorFactory = augmentorFactory;\n        if (this.definition.isOfOldFormat()) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition.updateDefinition(definition);\n        }\n        this.facetsConfig = org.apache.jackrabbit.oak.plugins.index.lucene.util.FacetHelper.getFacetsConfig(definition);\n    }\n\n    org.apache.tika.parser.Parser getParser() {\n        if (parser == null) {\n            parser = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.initializeTikaParser(definition);\n        }\n        return parser;\n    }\n\n    org.apache.lucene.index.IndexWriter getWriter() throws java.io.IOException {\n        if (writer == null) {\n            final long start = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.start();\n            directory = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.newIndexDirectory(definition, definitionBuilder);\n            org.apache.lucene.index.IndexWriterConfig config;\n            if (indexCopier != null) {\n                directory = indexCopier.wrapForWrite(definition, directory, reindex);\n                config = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getIndexWriterConfig(definition, false);\n            } else {\n                config = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getIndexWriterConfig(definition, true);\n            }\n            writer = new org.apache.lucene.index.IndexWriter(directory, config);\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Created IndexWriter for directory {}\", definition);\n        }\n        return writer;\n    }\n\n    private static void trackIndexSizeInfo(@javax.annotation.Nonnull\n    org.apache.lucene.index.IndexWriter writer, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition definition, @javax.annotation.Nonnull\n    org.apache.lucene.store.Directory directory) throws java.io.IOException {\n        com.google.common.base.Preconditions.checkNotNull(writer);\n        com.google.common.base.Preconditions.checkNotNull(definition);\n        com.google.common.base.Preconditions.checkNotNull(directory);\n        int docs = writer.numDocs();\n        int ram = writer.numRamDocs();\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.trace(\"Writer for direcory {} - docs: {}, ramDocs: {}\", definition, docs, ram);\n        java.lang.String[] files = directory.listAll();\n        long overallSize = 0;\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        for (java.lang.String f : files) {\n            sb.append(f).append(\":\");\n            if (directory.fileExists(f)) {\n                long size = directory.fileLength(f);\n                overallSize += size;\n                sb.append(size);\n            } else {\n                sb.append(\"--\");\n            }\n            sb.append(\", \");\n        }\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.trace(\"Directory overall size: {}, files: {}\", org.apache.jackrabbit.oak.commons.IOUtils.humanReadableByteCount(overallSize), sb.toString());\n    }\n\n    void closeWriter() throws java.io.IOException {\n        if (reindex && (writer == null)) {\n            getWriter();\n        }\n        boolean updateSuggestions = shouldUpdateSuggestions();\n        if ((writer == null) && updateSuggestions) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.debug(\"Would update suggester dictionary although no index changes were detected in current cycle\");\n            getWriter();\n        }\n        if (writer != null) {\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.isTraceEnabled()) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.trackIndexSizeInfo(writer, definition, directory);\n            }\n            final long start = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.start();\n            java.util.Calendar lastUpdated = null;\n            if (updateSuggestions) {\n                lastUpdated = updateSuggester(writer.getAnalyzer());\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Completed suggester for directory {}\", definition);\n            }\n            if (lastUpdated == null) {\n                lastUpdated = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n            }\n            writer.close();\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed writer for directory {}\", definition);\n            directory.close();\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed directory for directory {}\", definition);\n            org.apache.jackrabbit.oak.spi.state.NodeBuilder status = definitionBuilder.child(\":status\");\n            status.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(lastUpdated), Type.DATE);\n            status.setProperty(\"indexedNodes\", indexedNodes);\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Overall Closed IndexWriter for directory {}\", definition);\n            textExtractionStats.log(reindex);\n            textExtractionStats.collectStats(extractedTextCache);\n        }\n    }\n\n    private java.util.Calendar updateSuggester(org.apache.lucene.analysis.Analyzer analyzer) throws java.io.IOException {\n        java.util.Calendar ret = null;\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n        org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n        final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n        try {\n            org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n            ret = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n            suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(ret), Type.DATE);\n        } catch (java.lang.Throwable e) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n        } finally {\n            suggestDirectory.close();\n            reader.close();\n        }\n        return ret;\n    }\n\n    private boolean shouldUpdateSuggestions() {\n        boolean updateSuggestions = false;\n        if (definition.isSuggestEnabled()) {\n            org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n            org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n            if (suggesterLastUpdatedValue != null) {\n                java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n                int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n                java.util.Calendar nextSuggestUpdateTime = ((java.util.Calendar) (suggesterLastUpdatedTime.clone()));\n                nextSuggestUpdateTime.add(java.util.Calendar.MINUTE, updateFrequency);\n                if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(nextSuggestUpdateTime)) {\n                    updateSuggestions = (writer != null) || isIndexUpdatedAfter(suggesterLastUpdatedTime);\n                }\n            } else {\n                updateSuggestions = true;\n            }\n        }\n        return updateSuggestions;\n    }\n\n    private boolean isIndexUpdatedAfter(java.util.Calendar calendar) {\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder indexStats = definitionBuilder.child(\":status\");\n        org.apache.jackrabbit.oak.api.PropertyState indexLastUpdatedValue = indexStats.getProperty(\"lastUpdated\");\n        if (indexLastUpdatedValue != null) {\n            java.util.Calendar indexLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(indexLastUpdatedValue.getValue(Type.DATE));\n            return indexLastUpdatedTime.after(calendar);\n        } else {\n            return true;\n        }\n    }\n\n    static void setClock(org.apache.jackrabbit.oak.stats.Clock c) {\n        com.google.common.base.Preconditions.checkNotNull(c);\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.clock = c;\n    }\n\n    private static java.util.Calendar getCalendar() {\n        java.util.Calendar ret = java.util.Calendar.getInstance();\n        ret.setTime(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.clock.getDate());\n        return ret;\n    }\n\n    public void enableReindexMode() {\n        reindex = true;\n        org.apache.jackrabbit.oak.plugins.index.lucene.IndexFormatVersion version = org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition.determineVersionForFreshIndex(definitionBuilder);\n        definitionBuilder.setProperty(IndexDefinition.INDEX_VERSION, version.getVersion());\n        definition = new org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition(root, definitionBuilder);\n    }\n\n    public long incIndexedNodes() {\n        indexedNodes++;\n        return indexedNodes;\n    }\n\n    public long getIndexedNodes() {\n        return indexedNodes;\n    }\n\n    public boolean isSupportedMediaType(java.lang.String type) {\n        if (supportedMediaTypes == null) {\n            supportedMediaTypes = getParser().getSupportedTypes(new org.apache.tika.parser.ParseContext());\n        }\n        return supportedMediaTypes.contains(org.apache.tika.mime.MediaType.parse(type));\n    }\n\n    void indexUpdate() throws org.apache.jackrabbit.oak.api.CommitFailedException {\n        updateCallback.indexUpdate();\n    }\n\n    public org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition getDefinition() {\n        return definition;\n    }\n\n    org.apache.lucene.facet.FacetsConfig getFacetsConfig() {\n        return facetsConfig;\n    }\n\n    @java.lang.Deprecated\n    public void recordTextExtractionStats(long timeInMillis, long bytesRead) {\n        recordTextExtractionStats(timeInMillis, bytesRead, 0);\n    }\n\n    public void recordTextExtractionStats(long timeInMillis, long bytesRead, int textLength) {\n        textExtractionStats.addStats(timeInMillis, bytesRead, textLength);\n    }\n\n    org.apache.jackrabbit.oak.plugins.index.lucene.ExtractedTextCache getExtractedTextCache() {\n        return extractedTextCache;\n    }\n\n    org.apache.jackrabbit.oak.plugins.index.lucene.IndexAugmentorFactory getAugmentorFactory() {\n        return augmentorFactory;\n    }\n\n    public boolean isReindex() {\n        return reindex;\n    }\n\n    private static org.apache.tika.parser.Parser initializeTikaParser(org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition definition) {\n        java.lang.ClassLoader current = java.lang.Thread.currentThread().getContextClassLoader();\n        try {\n            if (definition.hasCustomTikaConfig()) {\n                java.lang.Thread.currentThread().setContextClassLoader(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.class.getClassLoader());\n                java.io.InputStream is = definition.getTikaConfig();\n                try {\n                    return new org.apache.tika.parser.AutoDetectParser(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getTikaConfig(is, definition));\n                } finally {\n                    org.apache.commons.io.IOUtils.closeQuietly(is);\n                }\n            }\n        } finally {\n            java.lang.Thread.currentThread().setContextClassLoader(current);\n        }\n        return org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.defaultParser;\n    }\n\n    private static org.apache.tika.parser.AutoDetectParser createDefaultParser() {\n        java.lang.ClassLoader current = java.lang.Thread.currentThread().getContextClassLoader();\n        java.net.URL configUrl = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.class.getResource(\"tika-config.xml\");\n        java.io.InputStream is = null;\n        if (configUrl != null) {\n            try {\n                java.lang.Thread.currentThread().setContextClassLoader(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.class.getClassLoader());\n                is = configUrl.openStream();\n                org.apache.tika.config.TikaConfig config = new org.apache.tika.config.TikaConfig(is);\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.info(\"Loaded default Tika Config from classpath {}\", configUrl);\n                return new org.apache.tika.parser.AutoDetectParser(config);\n            } catch (java.lang.Exception e) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"Tika configuration not available : \" + configUrl, e);\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(is);\n                java.lang.Thread.currentThread().setContextClassLoader(current);\n            }\n        } else {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"Default Tika configuration not found from {}\", configUrl);\n        }\n        return new org.apache.tika.parser.AutoDetectParser();\n    }\n\n    private static org.apache.tika.config.TikaConfig getTikaConfig(java.io.InputStream configStream, java.lang.Object source) {\n        try {\n            return new org.apache.tika.config.TikaConfig(configStream);\n        } catch (java.lang.Exception e) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"Tika configuration not available : \" + source, e);\n        }\n        return org.apache.tika.config.TikaConfig.getDefaultConfig();\n    }\n\n    static class TextExtractionStats {\n        private static final long LOGGING_THRESHOLD = java.util.concurrent.TimeUnit.MINUTES.toMillis(1);\n\n        private int count;\n\n        private long totalBytesRead;\n\n        private long totalTime;\n\n        private long totalTextLength;\n\n        public void addStats(long timeInMillis, long bytesRead, int textLength) {\n            count++;\n            totalBytesRead += bytesRead;\n            totalTime += timeInMillis;\n            totalTextLength += textLength;\n        }\n\n        public void log(boolean reindex) {\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.isDebugEnabled()) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.debug(\"Text extraction stats {}\", this);\n            } else if (anyParsingDone() && (reindex || isTakingLotsOfTime())) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.info(\"Text extraction stats {}\", this);\n            }\n        }\n\n        public void collectStats(org.apache.jackrabbit.oak.plugins.index.lucene.ExtractedTextCache cache) {\n            cache.addStats(count, totalTime, totalBytesRead, totalTextLength);\n        }\n\n        private boolean isTakingLotsOfTime() {\n            return totalTime > org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.TextExtractionStats.LOGGING_THRESHOLD;\n        }\n\n        private boolean anyParsingDone() {\n            return count > 0;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\" %d (Time Taken %s, Bytes Read %s, Extracted text size %s)\", count, org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.TextExtractionStats.timeInWords(totalTime), humanReadableByteCount(totalBytesRead), humanReadableByteCount(totalTextLength));\n        }\n\n        private static java.lang.String timeInWords(long millis) {\n            return java.lang.String.format(\"%d min, %d sec\", java.util.concurrent.TimeUnit.MILLISECONDS.toMinutes(millis), java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds(millis) - java.util.concurrent.TimeUnit.MINUTES.toSeconds(java.util.concurrent.TimeUnit.MILLISECONDS.toMinutes(millis)));\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "boolean updateSuggestions = shouldUpdateSuggestions()",
            "src_parent": "{\n    if (reindex && (writer == null)) {\n        getWriter();\n    }\n    boolean updateSuggestions = shouldUpdateSuggestions();\n    if ((writer == null) && updateSuggestions) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.debug(\"Would update suggester dictionary although no index changes were detected in current cycle\");\n        getWriter();\n    }\n    if (writer != null) {\n        if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.isTraceEnabled()) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.trackIndexSizeInfo(writer, definition, directory);\n        }\n        final long start = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.start();\n        java.util.Calendar lastUpdated = null;\n        if (updateSuggestions) {\n            lastUpdated = updateSuggester(writer.getAnalyzer());\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Completed suggester for directory {}\", definition);\n        }\n        if (lastUpdated == null) {\n            lastUpdated = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n        }\n        writer.close();\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed writer for directory {}\", definition);\n        directory.close();\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed directory for directory {}\", definition);\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder status = definitionBuilder.child(\":status\");\n        status.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(lastUpdated), Type.DATE);\n        status.setProperty(\"indexedNodes\", indexedNodes);\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Overall Closed IndexWriter for directory {}\", definition);\n        textExtractionStats.log(reindex);\n        textExtractionStats.collectStats(extractedTextCache);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if ((writer == null) && updateSuggestions) {\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.debug(\"Would update suggester dictionary although no index changes were detected in current cycle\");\n    getWriter();\n}",
            "src_parent": "{\n    if (reindex && (writer == null)) {\n        getWriter();\n    }\n    boolean updateSuggestions = shouldUpdateSuggestions();\n    if ((writer == null) && updateSuggestions) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.debug(\"Would update suggester dictionary although no index changes were detected in current cycle\");\n        getWriter();\n    }\n    if (writer != null) {\n        if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.isTraceEnabled()) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.trackIndexSizeInfo(writer, definition, directory);\n        }\n        final long start = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.start();\n        java.util.Calendar lastUpdated = null;\n        if (updateSuggestions) {\n            lastUpdated = updateSuggester(writer.getAnalyzer());\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Completed suggester for directory {}\", definition);\n        }\n        if (lastUpdated == null) {\n            lastUpdated = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n        }\n        writer.close();\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed writer for directory {}\", definition);\n        directory.close();\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed directory for directory {}\", definition);\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder status = definitionBuilder.child(\":status\");\n        status.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(lastUpdated), Type.DATE);\n        status.setProperty(\"indexedNodes\", indexedNodes);\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Overall Closed IndexWriter for directory {}\", definition);\n        textExtractionStats.log(reindex);\n        textExtractionStats.collectStats(extractedTextCache);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.util.Calendar lastUpdated = null",
            "src_parent": "{\n    if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.isTraceEnabled()) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.trackIndexSizeInfo(writer, definition, directory);\n    }\n    final long start = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.start();\n    java.util.Calendar lastUpdated = null;\n    if (updateSuggestions) {\n        lastUpdated = updateSuggester(writer.getAnalyzer());\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Completed suggester for directory {}\", definition);\n    }\n    if (lastUpdated == null) {\n        lastUpdated = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n    }\n    writer.close();\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed writer for directory {}\", definition);\n    directory.close();\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed directory for directory {}\", definition);\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder status = definitionBuilder.child(\":status\");\n    status.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(lastUpdated), Type.DATE);\n    status.setProperty(\"indexedNodes\", indexedNodes);\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Overall Closed IndexWriter for directory {}\", definition);\n    textExtractionStats.log(reindex);\n    textExtractionStats.collectStats(extractedTextCache);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (updateSuggestions) {\n    lastUpdated = updateSuggester(writer.getAnalyzer());\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Completed suggester for directory {}\", definition);\n}",
            "src_parent": "{\n    if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.isTraceEnabled()) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.trackIndexSizeInfo(writer, definition, directory);\n    }\n    final long start = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.start();\n    java.util.Calendar lastUpdated = null;\n    if (updateSuggestions) {\n        lastUpdated = updateSuggester(writer.getAnalyzer());\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Completed suggester for directory {}\", definition);\n    }\n    if (lastUpdated == null) {\n        lastUpdated = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n    }\n    writer.close();\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed writer for directory {}\", definition);\n    directory.close();\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed directory for directory {}\", definition);\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder status = definitionBuilder.child(\":status\");\n    status.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(lastUpdated), Type.DATE);\n    status.setProperty(\"indexedNodes\", indexedNodes);\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Overall Closed IndexWriter for directory {}\", definition);\n    textExtractionStats.log(reindex);\n    textExtractionStats.collectStats(extractedTextCache);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (lastUpdated == null) {\n    lastUpdated = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n}",
            "src_parent": "{\n    if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.isTraceEnabled()) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.trackIndexSizeInfo(writer, definition, directory);\n    }\n    final long start = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.start();\n    java.util.Calendar lastUpdated = null;\n    if (updateSuggestions) {\n        lastUpdated = updateSuggester(writer.getAnalyzer());\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Completed suggester for directory {}\", definition);\n    }\n    if (lastUpdated == null) {\n        lastUpdated = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n    }\n    writer.close();\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed writer for directory {}\", definition);\n    directory.close();\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed directory for directory {}\", definition);\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder status = definitionBuilder.child(\":status\");\n    status.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(lastUpdated), Type.DATE);\n    status.setProperty(\"indexedNodes\", indexedNodes);\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Overall Closed IndexWriter for directory {}\", definition);\n    textExtractionStats.log(reindex);\n    textExtractionStats.collectStats(extractedTextCache);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.util.Calendar indexLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(indexLastUpdatedValue.getValue(Type.DATE))",
            "src_parent": "{\n    java.util.Calendar indexLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(indexLastUpdatedValue.getValue(Type.DATE));\n    return indexLastUpdatedTime.after(calendar);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "return indexLastUpdatedTime.after(calendar)",
            "src_parent": "{\n    java.util.Calendar indexLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(indexLastUpdatedValue.getValue(Type.DATE));\n    return indexLastUpdatedTime.after(calendar);\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "suggesterLastUpdatedValue != null",
            "src_parent": "if (suggesterLastUpdatedValue != null) {\n    java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n    int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n    java.util.Calendar nextSuggestUpdateTime = ((java.util.Calendar) (suggesterLastUpdatedTime.clone()));\n    nextSuggestUpdateTime.add(java.util.Calendar.MINUTE, updateFrequency);\n    if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(nextSuggestUpdateTime)) {\n        updateSuggestions = (writer != null) || isIndexUpdatedAfter(suggesterLastUpdatedTime);\n    }\n} else {\n    updateSuggestions = true;\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "lastUpdated",
            "src_parent": "org.apache.jackrabbit.util.ISO8601.format(lastUpdated)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.util.Calendar nextSuggestUpdateTime = ((java.util.Calendar) (suggesterLastUpdatedTime.clone()))",
            "src_parent": "{\n    java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n    int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n    java.util.Calendar nextSuggestUpdateTime = ((java.util.Calendar) (suggesterLastUpdatedTime.clone()));\n    nextSuggestUpdateTime.add(java.util.Calendar.MINUTE, updateFrequency);\n    if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(nextSuggestUpdateTime)) {\n        updateSuggestions = (writer != null) || isIndexUpdatedAfter(suggesterLastUpdatedTime);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "(writer != null) || isIndexUpdatedAfter(suggesterLastUpdatedTime)",
            "src_parent": "updateSuggestions = (writer != null) || isIndexUpdatedAfter(suggesterLastUpdatedTime)",
            "src_parent_type": "Assignment",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.Calendar",
            "dst_parent": "private java.util.Calendar updateSuggester(org.apache.lucene.analysis.Analyzer analyzer) throws java.io.IOException {\n    java.util.Calendar ret = null;\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n    org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n    final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n    try {\n        org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n        ret = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n        suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(ret), Type.DATE);\n    } catch (java.lang.Throwable e) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n    } finally {\n        suggestDirectory.close();\n        reader.close();\n    }\n    return ret;\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "void",
            "src_parent": "private void updateSuggester(org.apache.lucene.analysis.Analyzer analyzer) throws java.io.IOException {\n    if (definition.isSuggestEnabled()) {\n        boolean updateSuggester = false;\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n        if (suggesterStatus.hasProperty(\"lastUpdated\")) {\n            org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n            java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n            int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n            suggesterLastUpdatedTime.add(java.util.Calendar.MINUTE, updateFrequency);\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(suggesterLastUpdatedTime)) {\n                updateSuggester = true;\n            }\n        } else {\n            updateSuggester = true;\n        }\n        if (updateSuggester) {\n            org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n            final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n            try {\n                org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n                suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n            } catch (java.lang.Throwable e) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n            } finally {\n                suggestDirectory.close();\n                reader.close();\n            }\n        }\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.io.IOException",
            "dst_parent": "private java.util.Calendar updateSuggester(org.apache.lucene.analysis.Analyzer analyzer) throws java.io.IOException {\n    java.util.Calendar ret = null;\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n    org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n    final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n    try {\n        org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n        ret = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n        suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(ret), Type.DATE);\n    } catch (java.lang.Throwable e) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n    } finally {\n        suggestDirectory.close();\n        reader.close();\n    }\n    return ret;\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "java.io.IOException",
            "src_parent": "private void updateSuggester(org.apache.lucene.analysis.Analyzer analyzer) throws java.io.IOException {\n    if (definition.isSuggestEnabled()) {\n        boolean updateSuggester = false;\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n        if (suggesterStatus.hasProperty(\"lastUpdated\")) {\n            org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n            java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n            int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n            suggesterLastUpdatedTime.add(java.util.Calendar.MINUTE, updateFrequency);\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(suggesterLastUpdatedTime)) {\n                updateSuggester = true;\n            }\n        } else {\n            updateSuggester = true;\n        }\n        if (updateSuggester) {\n            org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n            final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n            try {\n                org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n                suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n            } catch (java.lang.Throwable e) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n            } finally {\n                suggestDirectory.close();\n                reader.close();\n            }\n        }\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Method",
            "dst_parent": "private java.util.Calendar updateSuggester(org.apache.lucene.analysis.Analyzer analyzer) throws java.io.IOException {\n    java.util.Calendar ret = null;\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n    org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n    final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n    try {\n        org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n        ret = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n        suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(ret), Type.DATE);\n    } catch (java.lang.Throwable e) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n    } finally {\n        suggestDirectory.close();\n        reader.close();\n    }\n    return ret;\n}",
            "dst_parent_type": "Method",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Method",
            "src_parent": "private void updateSuggester(org.apache.lucene.analysis.Analyzer analyzer) throws java.io.IOException {\n    if (definition.isSuggestEnabled()) {\n        boolean updateSuggester = false;\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n        if (suggesterStatus.hasProperty(\"lastUpdated\")) {\n            org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n            java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n            int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n            suggesterLastUpdatedTime.add(java.util.Calendar.MINUTE, updateFrequency);\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(suggesterLastUpdatedTime)) {\n                updateSuggester = true;\n            }\n        } else {\n            updateSuggester = true;\n        }\n        if (updateSuggester) {\n            org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n            final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n            try {\n                org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n                suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n            } catch (java.lang.Throwable e) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n            } finally {\n                suggestDirectory.close();\n                reader.close();\n            }\n        }\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.lucene.analysis.Analyzer analyzer",
            "dst_parent": "private java.util.Calendar updateSuggester(org.apache.lucene.analysis.Analyzer analyzer) throws java.io.IOException {\n    java.util.Calendar ret = null;\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n    org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n    final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n    try {\n        org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n        ret = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n        suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(ret), Type.DATE);\n    } catch (java.lang.Throwable e) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n    } finally {\n        suggestDirectory.close();\n        reader.close();\n    }\n    return ret;\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "org.apache.lucene.analysis.Analyzer analyzer",
            "src_parent": "private void updateSuggester(org.apache.lucene.analysis.Analyzer analyzer) throws java.io.IOException {\n    if (definition.isSuggestEnabled()) {\n        boolean updateSuggester = false;\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n        if (suggesterStatus.hasProperty(\"lastUpdated\")) {\n            org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n            java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n            int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n            suggesterLastUpdatedTime.add(java.util.Calendar.MINUTE, updateFrequency);\n            if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(suggesterLastUpdatedTime)) {\n                updateSuggester = true;\n            }\n        } else {\n            updateSuggester = true;\n        }\n        if (updateSuggester) {\n            org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n            final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n            try {\n                org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n                suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n            } catch (java.lang.Throwable e) {\n                org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n            } finally {\n                suggestDirectory.close();\n                reader.close();\n            }\n        }\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\")",
            "dst_parent": "{\n    java.util.Calendar ret = null;\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n    org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n    final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n    try {\n        org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n        ret = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n        suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(ret), Type.DATE);\n    } catch (java.lang.Throwable e) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n    } finally {\n        suggestDirectory.close();\n        reader.close();\n    }\n    return ret;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\")",
            "src_parent": "{\n    boolean updateSuggester = false;\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n    if (suggesterStatus.hasProperty(\"lastUpdated\")) {\n        org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n        java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n        int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n        suggesterLastUpdatedTime.add(java.util.Calendar.MINUTE, updateFrequency);\n        if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(suggesterLastUpdatedTime)) {\n            updateSuggester = true;\n        }\n    } else {\n        updateSuggester = true;\n    }\n    if (updateSuggester) {\n        org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n        final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n        try {\n            org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n            suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n        } catch (java.lang.Throwable e) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n        } finally {\n            suggestDirectory.close();\n            reader.close();\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false)",
            "dst_parent": "{\n    java.util.Calendar ret = null;\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n    org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n    final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n    try {\n        org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n        ret = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n        suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(ret), Type.DATE);\n    } catch (java.lang.Throwable e) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n    } finally {\n        suggestDirectory.close();\n        reader.close();\n    }\n    return ret;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false)",
            "src_parent": "{\n    org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n    final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n    try {\n        org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n        suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n    } catch (java.lang.Throwable e) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n    } finally {\n        suggestDirectory.close();\n        reader.close();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false)",
            "dst_parent": "{\n    java.util.Calendar ret = null;\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n    org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n    final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n    try {\n        org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n        ret = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n        suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(ret), Type.DATE);\n    } catch (java.lang.Throwable e) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n    } finally {\n        suggestDirectory.close();\n        reader.close();\n    }\n    return ret;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false)",
            "src_parent": "{\n    org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n    final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n    try {\n        org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n        suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n    } catch (java.lang.Throwable e) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n    } finally {\n        suggestDirectory.close();\n        reader.close();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader)",
            "dst_parent": "{\n    org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n    ret = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n    suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(ret), Type.DATE);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader)",
            "src_parent": "{\n    org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n    suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "catch (java.lang.Throwable e) {\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n}",
            "dst_parent": "try {\n    org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n    ret = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar();\n    suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(ret), Type.DATE);\n} catch (java.lang.Throwable e) {\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n} finally {\n    suggestDirectory.close();\n    reader.close();\n}",
            "dst_parent_type": "Try",
            "dst_type": "Catch",
            "operator": "MOV",
            "src": "catch (java.lang.Throwable e) {\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n}",
            "src_parent": "try {\n    org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n    suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n} catch (java.lang.Throwable e) {\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n} finally {\n    suggestDirectory.close();\n    reader.close();\n}",
            "src_parent_type": "Try",
            "src_type": "Catch"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "suggestDirectory.close()",
            "dst_parent": "{\n    suggestDirectory.close();\n    reader.close();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "suggestDirectory.close()",
            "src_parent": "{\n    suggestDirectory.close();\n    reader.close();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "reader.close()",
            "dst_parent": "{\n    suggestDirectory.close();\n    reader.close();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "reader.close()",
            "src_parent": "{\n    suggestDirectory.close();\n    reader.close();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "boolean",
            "dst_parent": "boolean updateSuggestions = false",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "boolean",
            "src_parent": "boolean updateSuggester = false",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "false",
            "dst_parent": "boolean updateSuggestions = false",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Literal",
            "operator": "MOV",
            "src": "false",
            "src_parent": "boolean updateSuggester = false",
            "src_parent_type": "LocalVariable",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "definition.isSuggestEnabled()",
            "dst_parent": "if (definition.isSuggestEnabled()) {\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n    org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n    if (suggesterLastUpdatedValue != null) {\n        java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n        int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n        java.util.Calendar nextSuggestUpdateTime = ((java.util.Calendar) (suggesterLastUpdatedTime.clone()));\n        nextSuggestUpdateTime.add(java.util.Calendar.MINUTE, updateFrequency);\n        if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(nextSuggestUpdateTime)) {\n            updateSuggestions = (writer != null) || isIndexUpdatedAfter(suggesterLastUpdatedTime);\n        }\n    } else {\n        updateSuggestions = true;\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "definition.isSuggestEnabled()",
            "src_parent": "if (definition.isSuggestEnabled()) {\n    boolean updateSuggester = false;\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n    if (suggesterStatus.hasProperty(\"lastUpdated\")) {\n        org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n        java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n        int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n        suggesterLastUpdatedTime.add(java.util.Calendar.MINUTE, updateFrequency);\n        if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(suggesterLastUpdatedTime)) {\n            updateSuggester = true;\n        }\n    } else {\n        updateSuggester = true;\n    }\n    if (updateSuggester) {\n        org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n        final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n        try {\n            org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n            suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n        } catch (java.lang.Throwable e) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n        } finally {\n            suggestDirectory.close();\n            reader.close();\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    java.util.Calendar indexLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(indexLastUpdatedValue.getValue(Type.DATE));\n    return indexLastUpdatedTime.after(calendar);\n}",
            "dst_parent": "if (indexLastUpdatedValue != null) {\n    java.util.Calendar indexLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(indexLastUpdatedValue.getValue(Type.DATE));\n    return indexLastUpdatedTime.after(calendar);\n} else {\n    return true;\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n    final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n    try {\n        org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n        suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n    } catch (java.lang.Throwable e) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n    } finally {\n        suggestDirectory.close();\n        reader.close();\n    }\n}",
            "src_parent": "if (updateSuggester) {\n    org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n    final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n    try {\n        org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n        suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n    } catch (java.lang.Throwable e) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n    } finally {\n        suggestDirectory.close();\n        reader.close();\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\")",
            "dst_parent": "{\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n    org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n    if (suggesterLastUpdatedValue != null) {\n        java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n        int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n        java.util.Calendar nextSuggestUpdateTime = ((java.util.Calendar) (suggesterLastUpdatedTime.clone()));\n        nextSuggestUpdateTime.add(java.util.Calendar.MINUTE, updateFrequency);\n        if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(nextSuggestUpdateTime)) {\n            updateSuggestions = (writer != null) || isIndexUpdatedAfter(suggesterLastUpdatedTime);\n        }\n    } else {\n        updateSuggestions = true;\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\")",
            "src_parent": "{\n    org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n    java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n    int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n    suggesterLastUpdatedTime.add(java.util.Calendar.MINUTE, updateFrequency);\n    if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(suggesterLastUpdatedTime)) {\n        updateSuggester = true;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (suggesterLastUpdatedValue != null) {\n    java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n    int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n    java.util.Calendar nextSuggestUpdateTime = ((java.util.Calendar) (suggesterLastUpdatedTime.clone()));\n    nextSuggestUpdateTime.add(java.util.Calendar.MINUTE, updateFrequency);\n    if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(nextSuggestUpdateTime)) {\n        updateSuggestions = (writer != null) || isIndexUpdatedAfter(suggesterLastUpdatedTime);\n    }\n} else {\n    updateSuggestions = true;\n}",
            "dst_parent": "{\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n    org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n    if (suggesterLastUpdatedValue != null) {\n        java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n        int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n        java.util.Calendar nextSuggestUpdateTime = ((java.util.Calendar) (suggesterLastUpdatedTime.clone()));\n        nextSuggestUpdateTime.add(java.util.Calendar.MINUTE, updateFrequency);\n        if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(nextSuggestUpdateTime)) {\n            updateSuggestions = (writer != null) || isIndexUpdatedAfter(suggesterLastUpdatedTime);\n        }\n    } else {\n        updateSuggestions = true;\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (suggesterStatus.hasProperty(\"lastUpdated\")) {\n    org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n    java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n    int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n    suggesterLastUpdatedTime.add(java.util.Calendar.MINUTE, updateFrequency);\n    if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(suggesterLastUpdatedTime)) {\n        updateSuggester = true;\n    }\n} else {\n    updateSuggester = true;\n}",
            "src_parent": "{\n    boolean updateSuggester = false;\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n    if (suggesterStatus.hasProperty(\"lastUpdated\")) {\n        org.apache.jackrabbit.oak.api.PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n        java.util.Calendar suggesterLastUpdatedTime = org.apache.jackrabbit.util.ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n        int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n        suggesterLastUpdatedTime.add(java.util.Calendar.MINUTE, updateFrequency);\n        if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar().after(suggesterLastUpdatedTime)) {\n            updateSuggester = true;\n        }\n    } else {\n        updateSuggester = true;\n    }\n    if (updateSuggester) {\n        org.apache.lucene.index.DirectoryReader reader = org.apache.lucene.index.DirectoryReader.open(writer, false);\n        final org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory suggestDirectory = new org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n        try {\n            org.apache.jackrabbit.oak.plugins.index.lucene.util.SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n            suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n        } catch (java.lang.Throwable e) {\n            org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.warn(\"could not update suggester\", e);\n        } finally {\n            suggestDirectory.close();\n            reader.close();\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Completed suggester for directory {}\", definition)",
            "dst_parent": "{\n    lastUpdated = updateSuggester(writer.getAnalyzer());\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Completed suggester for directory {}\", definition);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Completed suggester for directory {}\", definition)",
            "src_parent": "{\n    if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.isTraceEnabled()) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.trackIndexSizeInfo(writer, definition, directory);\n    }\n    final long start = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.start();\n    updateSuggester(writer.getAnalyzer());\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Completed suggester for directory {}\", definition);\n    writer.close();\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed writer for directory {}\", definition);\n    directory.close();\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed directory for directory {}\", definition);\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder status = definitionBuilder.child(\":status\");\n    status.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n    status.setProperty(\"indexedNodes\", indexedNodes);\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Overall Closed IndexWriter for directory {}\", definition);\n    textExtractionStats.log(reindex);\n    textExtractionStats.collectStats(extractedTextCache);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.util.ISO8601",
            "dst_parent": "org.apache.jackrabbit.util.ISO8601.parse(indexLastUpdatedValue.getValue(Type.DATE))",
            "dst_parent_type": "Invocation",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "org.apache.jackrabbit.util.ISO8601",
            "src_parent": "org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar())",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "updateSuggester(writer.getAnalyzer())",
            "dst_parent": "lastUpdated = updateSuggester(writer.getAnalyzer())",
            "dst_parent_type": "Assignment",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "updateSuggester(writer.getAnalyzer())",
            "src_parent": "{\n    if (org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.log.isTraceEnabled()) {\n        org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.trackIndexSizeInfo(writer, definition, directory);\n    }\n    final long start = org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.start();\n    updateSuggester(writer.getAnalyzer());\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Completed suggester for directory {}\", definition);\n    writer.close();\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed writer for directory {}\", definition);\n    directory.close();\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Closed directory for directory {}\", definition);\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder status = definitionBuilder.child(\":status\");\n    status.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE);\n    status.setProperty(\"indexedNodes\", indexedNodes);\n    org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.PERF_LOGGER.end(start, -1, \"Overall Closed IndexWriter for directory {}\", definition);\n    textExtractionStats.log(reindex);\n    textExtractionStats.collectStats(extractedTextCache);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "Type.DATE",
            "dst_parent": "indexLastUpdatedValue.getValue(Type.DATE)",
            "dst_parent_type": "Invocation",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "Type.DATE",
            "src_parent": "suggesterStatus.setProperty(\"lastUpdated\", org.apache.jackrabbit.util.ISO8601.format(org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexEditorContext.getCalendar()), Type.DATE)",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        }
      ],
      "file_name": "LuceneIndexEditorContext"
    }
  ],
  "id": "jackrabbit-oak_9a109aa3"
}