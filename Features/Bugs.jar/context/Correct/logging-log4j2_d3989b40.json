{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Catch",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "clazz = org.apache.logging.log4j.core.util.Loader.initializeClass(className, this.getClass().getClassLoader())",
            "src_parent": "{\n    clazz = org.apache.logging.log4j.core.util.Loader.initializeClass(className, this.getClass().getClassLoader());\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private java.lang.Class<?> initializeClass(final java.lang.String className) {\n    try {\n        return org.apache.logging.log4j.core.util.Loader.initializeClass(className, this.getClass().getClassLoader());\n    } catch (final java.lang.ClassNotFoundException ignore) {\n        return null;\n    } catch (final java.lang.NoClassDefFoundError ignore) {\n        return null;\n    }\n}",
            "src_parent": "public class ThrowableProxy implements java.io.Serializable {\n    static class CacheEntry {\n        private final org.apache.logging.log4j.core.impl.ExtendedClassInfo element;\n\n        private final java.lang.ClassLoader loader;\n\n        public CacheEntry(final org.apache.logging.log4j.core.impl.ExtendedClassInfo element, final java.lang.ClassLoader loader) {\n            this.element = element;\n            this.loader = loader;\n        }\n    }\n\n    private static final org.apache.logging.log4j.core.impl.ThrowableProxy[] EMPTY_THROWABLE_PROXY_ARRAY = new org.apache.logging.log4j.core.impl.ThrowableProxy[0];\n\n    private static final char EOL = '\\n';\n\n    private static final long serialVersionUID = -2752771578252251910L;\n\n    private final org.apache.logging.log4j.core.impl.ThrowableProxy causeProxy;\n\n    private int commonElementCount;\n\n    private final org.apache.logging.log4j.core.impl.ExtendedStackTraceElement[] extendedStackTrace;\n\n    private final java.lang.String localizedMessage;\n\n    private final java.lang.String message;\n\n    private final java.lang.String name;\n\n    private final org.apache.logging.log4j.core.impl.ThrowableProxy[] suppressedProxies;\n\n    private transient final java.lang.Throwable throwable;\n\n    @java.lang.SuppressWarnings(\"unused\")\n    private ThrowableProxy() {\n        this.throwable = null;\n        this.name = null;\n        this.extendedStackTrace = null;\n        this.causeProxy = null;\n        this.message = null;\n        this.localizedMessage = null;\n        this.suppressedProxies = org.apache.logging.log4j.core.impl.ThrowableProxy.EMPTY_THROWABLE_PROXY_ARRAY;\n    }\n\n    public ThrowableProxy(final java.lang.Throwable throwable) {\n        this.throwable = throwable;\n        this.name = throwable.getClass().getName();\n        this.message = throwable.getMessage();\n        this.localizedMessage = throwable.getLocalizedMessage();\n        final java.util.Map<java.lang.String, org.apache.logging.log4j.core.impl.ThrowableProxy.CacheEntry> map = new java.util.HashMap<java.lang.String, org.apache.logging.log4j.core.impl.ThrowableProxy.CacheEntry>();\n        final java.util.Stack<java.lang.Class<?>> stack = org.apache.logging.log4j.util.ReflectionUtil.getCurrentStackTrace();\n        this.extendedStackTrace = this.toExtendedStackTrace(stack, map, null, throwable.getStackTrace());\n        final java.lang.Throwable throwableCause = throwable.getCause();\n        this.causeProxy = (throwableCause == null) ? null : new org.apache.logging.log4j.core.impl.ThrowableProxy(throwable, stack, map, throwableCause);\n        this.suppressedProxies = this.toSuppressedProxies(throwable);\n    }\n\n    private ThrowableProxy(final java.lang.Throwable parent, final java.util.Stack<java.lang.Class<?>> stack, final java.util.Map<java.lang.String, org.apache.logging.log4j.core.impl.ThrowableProxy.CacheEntry> map, final java.lang.Throwable cause) {\n        this.throwable = cause;\n        this.name = cause.getClass().getName();\n        this.message = this.throwable.getMessage();\n        this.localizedMessage = this.throwable.getLocalizedMessage();\n        this.extendedStackTrace = this.toExtendedStackTrace(stack, map, parent.getStackTrace(), cause.getStackTrace());\n        this.causeProxy = (cause.getCause() == null) ? null : new org.apache.logging.log4j.core.impl.ThrowableProxy(parent, stack, map, cause.getCause());\n        this.suppressedProxies = this.toSuppressedProxies(cause);\n    }\n\n    @java.lang.Override\n    public boolean equals(final java.lang.Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null) {\n            return false;\n        }\n        if (this.getClass() != obj.getClass()) {\n            return false;\n        }\n        final org.apache.logging.log4j.core.impl.ThrowableProxy other = ((org.apache.logging.log4j.core.impl.ThrowableProxy) (obj));\n        if (this.causeProxy == null) {\n            if (other.causeProxy != null) {\n                return false;\n            }\n        } else if (!this.causeProxy.equals(other.causeProxy)) {\n            return false;\n        }\n        if (this.commonElementCount != other.commonElementCount) {\n            return false;\n        }\n        if (this.name == null) {\n            if (other.name != null) {\n                return false;\n            }\n        } else if (!this.name.equals(other.name)) {\n            return false;\n        }\n        if (!java.util.Arrays.equals(this.extendedStackTrace, other.extendedStackTrace)) {\n            return false;\n        }\n        if (!java.util.Arrays.equals(this.suppressedProxies, other.suppressedProxies)) {\n            return false;\n        }\n        return true;\n    }\n\n    @java.lang.SuppressWarnings(\"ThrowableResultOfMethodCallIgnored\")\n    private void formatCause(final java.lang.StringBuilder sb, final org.apache.logging.log4j.core.impl.ThrowableProxy cause, final java.util.List<java.lang.String> ignorePackages) {\n        sb.append(\"Caused by: \").append(cause).append(org.apache.logging.log4j.core.impl.ThrowableProxy.EOL);\n        this.formatElements(sb, cause.commonElementCount, cause.getThrowable().getStackTrace(), cause.extendedStackTrace, ignorePackages);\n        if (cause.getCauseProxy() != null) {\n            this.formatCause(sb, cause.causeProxy, ignorePackages);\n        }\n    }\n\n    private void formatElements(final java.lang.StringBuilder sb, final int commonCount, final java.lang.StackTraceElement[] causedTrace, final org.apache.logging.log4j.core.impl.ExtendedStackTraceElement[] extStackTrace, final java.util.List<java.lang.String> ignorePackages) {\n        if ((ignorePackages == null) || ignorePackages.isEmpty()) {\n            for (final org.apache.logging.log4j.core.impl.ExtendedStackTraceElement element : extStackTrace) {\n                this.formatEntry(element, sb);\n            }\n        } else {\n            int count = 0;\n            for (int i = 0; i < extStackTrace.length; ++i) {\n                if (!this.ignoreElement(causedTrace[i], ignorePackages)) {\n                    if (count > 0) {\n                        if (count == 1) {\n                            sb.append(\"\\t....\\n\");\n                        } else {\n                            sb.append(\"\\t... suppressed \").append(count).append(\" lines\\n\");\n                        }\n                        count = 0;\n                    }\n                    this.formatEntry(extStackTrace[i], sb);\n                } else {\n                    ++count;\n                }\n            }\n            if (count > 0) {\n                if (count == 1) {\n                    sb.append(\"\\t...\\n\");\n                } else {\n                    sb.append(\"\\t... suppressed \").append(count).append(\" lines\\n\");\n                }\n            }\n        }\n        if (commonCount != 0) {\n            sb.append(\"\\t... \").append(commonCount).append(\" more\").append('\\n');\n        }\n    }\n\n    private void formatEntry(final org.apache.logging.log4j.core.impl.ExtendedStackTraceElement extStackTraceElement, final java.lang.StringBuilder sb) {\n        sb.append(\"\\tat \");\n        sb.append(extStackTraceElement);\n        sb.append('\\n');\n    }\n\n    public void formatWrapper(final java.lang.StringBuilder sb, final org.apache.logging.log4j.core.impl.ThrowableProxy cause) {\n        this.formatWrapper(sb, cause, null);\n    }\n\n    @java.lang.SuppressWarnings(\"ThrowableResultOfMethodCallIgnored\")\n    public void formatWrapper(final java.lang.StringBuilder sb, final org.apache.logging.log4j.core.impl.ThrowableProxy cause, final java.util.List<java.lang.String> packages) {\n        final java.lang.Throwable caused = (cause.getCauseProxy() != null) ? cause.getCauseProxy().getThrowable() : null;\n        if (caused != null) {\n            this.formatWrapper(sb, cause.causeProxy);\n            sb.append(\"Wrapped by: \");\n        }\n        sb.append(cause).append('\\n');\n        this.formatElements(sb, cause.commonElementCount, cause.getThrowable().getStackTrace(), cause.extendedStackTrace, packages);\n    }\n\n    public org.apache.logging.log4j.core.impl.ThrowableProxy getCauseProxy() {\n        return this.causeProxy;\n    }\n\n    public java.lang.String getCauseStackTraceAsString() {\n        return this.getCauseStackTraceAsString(null);\n    }\n\n    public java.lang.String getCauseStackTraceAsString(final java.util.List<java.lang.String> packages) {\n        final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        if (this.causeProxy != null) {\n            this.formatWrapper(sb, this.causeProxy);\n            sb.append(\"Wrapped by: \");\n        }\n        sb.append(this.toString());\n        sb.append('\\n');\n        this.formatElements(sb, 0, this.throwable.getStackTrace(), this.extendedStackTrace, packages);\n        return sb.toString();\n    }\n\n    public int getCommonElementCount() {\n        return this.commonElementCount;\n    }\n\n    public org.apache.logging.log4j.core.impl.ExtendedStackTraceElement[] getExtendedStackTrace() {\n        return this.extendedStackTrace;\n    }\n\n    public java.lang.String getExtendedStackTraceAsString() {\n        return this.getExtendedStackTraceAsString(null);\n    }\n\n    public java.lang.String getExtendedStackTraceAsString(final java.util.List<java.lang.String> ignorePackages) {\n        final java.lang.StringBuilder sb = new java.lang.StringBuilder(this.name);\n        final java.lang.String msg = this.message;\n        if (msg != null) {\n            sb.append(\": \").append(msg);\n        }\n        sb.append('\\n');\n        this.formatElements(sb, 0, this.throwable.getStackTrace(), this.extendedStackTrace, ignorePackages);\n        if (this.causeProxy != null) {\n            this.formatCause(sb, this.causeProxy, ignorePackages);\n        }\n        return sb.toString();\n    }\n\n    public java.lang.String getLocalizedMessage() {\n        return this.localizedMessage;\n    }\n\n    public java.lang.String getMessage() {\n        return this.message;\n    }\n\n    public java.lang.String getName() {\n        return this.name;\n    }\n\n    public java.lang.StackTraceElement[] getStackTrace() {\n        return this.throwable == null ? null : this.throwable.getStackTrace();\n    }\n\n    public org.apache.logging.log4j.core.impl.ThrowableProxy[] getSuppressedProxies() {\n        return this.suppressedProxies;\n    }\n\n    public java.lang.String getSuppressedStackTrace() {\n        final org.apache.logging.log4j.core.impl.ThrowableProxy[] suppressed = this.getSuppressedProxies();\n        if ((suppressed == null) || (suppressed.length == 0)) {\n            return org.apache.logging.log4j.util.Strings.EMPTY;\n        }\n        final java.lang.StringBuilder sb = new java.lang.StringBuilder(\"Suppressed Stack Trace Elements:\\n\");\n        for (final org.apache.logging.log4j.core.impl.ThrowableProxy proxy : suppressed) {\n            sb.append(proxy.getExtendedStackTraceAsString());\n        }\n        return sb.toString();\n    }\n\n    public java.lang.Throwable getThrowable() {\n        return this.throwable;\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = (prime * result) + (this.causeProxy == null ? 0 : this.causeProxy.hashCode());\n        result = (prime * result) + this.commonElementCount;\n        result = (prime * result) + (this.extendedStackTrace == null ? 0 : java.util.Arrays.hashCode(this.extendedStackTrace));\n        result = (prime * result) + (this.suppressedProxies == null ? 0 : java.util.Arrays.hashCode(this.suppressedProxies));\n        result = (prime * result) + (this.name == null ? 0 : this.name.hashCode());\n        return result;\n    }\n\n    private boolean ignoreElement(final java.lang.StackTraceElement element, final java.util.List<java.lang.String> ignorePackages) {\n        final java.lang.String className = element.getClassName();\n        for (final java.lang.String pkg : ignorePackages) {\n            if (className.startsWith(pkg)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private java.lang.Class<?> loadClass(final java.lang.ClassLoader lastLoader, final java.lang.String className) {\n        java.lang.Class<?> clazz;\n        if (lastLoader != null) {\n            try {\n                clazz = org.apache.logging.log4j.core.util.Loader.initializeClass(className, lastLoader);\n                if (clazz != null) {\n                    return clazz;\n                }\n            } catch (final java.lang.Throwable ignore) {\n            }\n        }\n        try {\n            clazz = org.apache.logging.log4j.core.util.Loader.loadClass(className);\n        } catch (final java.lang.ClassNotFoundException ignored) {\n            return initializeClass(className);\n        } catch (final java.lang.NoClassDefFoundError ignored) {\n            return initializeClass(className);\n        }\n        return clazz;\n    }\n\n    private java.lang.Class<?> initializeClass(final java.lang.String className) {\n        try {\n            return org.apache.logging.log4j.core.util.Loader.initializeClass(className, this.getClass().getClassLoader());\n        } catch (final java.lang.ClassNotFoundException ignore) {\n            return null;\n        } catch (final java.lang.NoClassDefFoundError ignore) {\n            return null;\n        }\n    }\n\n    private org.apache.logging.log4j.core.impl.ThrowableProxy.CacheEntry toCacheEntry(final java.lang.StackTraceElement stackTraceElement, final java.lang.Class<?> callerClass, final boolean exact) {\n        java.lang.String location = \"?\";\n        java.lang.String version = \"?\";\n        java.lang.ClassLoader lastLoader = null;\n        if (callerClass != null) {\n            try {\n                final java.security.CodeSource source = callerClass.getProtectionDomain().getCodeSource();\n                if (source != null) {\n                    final java.net.URL locationURL = source.getLocation();\n                    if (locationURL != null) {\n                        final java.lang.String str = locationURL.toString().replace('\\\\', '/');\n                        int index = str.lastIndexOf(\"/\");\n                        if ((index >= 0) && (index == (str.length() - 1))) {\n                            index = str.lastIndexOf(\"/\", index - 1);\n                            location = str.substring(index + 1);\n                        } else {\n                            location = str.substring(index + 1);\n                        }\n                    }\n                }\n            } catch (final java.lang.Exception ex) {\n            }\n            final java.lang.Package pkg = callerClass.getPackage();\n            if (pkg != null) {\n                final java.lang.String ver = pkg.getImplementationVersion();\n                if (ver != null) {\n                    version = ver;\n                }\n            }\n            lastLoader = callerClass.getClassLoader();\n        }\n        return new org.apache.logging.log4j.core.impl.ThrowableProxy.CacheEntry(new org.apache.logging.log4j.core.impl.ExtendedClassInfo(exact, location, version), lastLoader);\n    }\n\n    org.apache.logging.log4j.core.impl.ExtendedStackTraceElement[] toExtendedStackTrace(final java.util.Stack<java.lang.Class<?>> stack, final java.util.Map<java.lang.String, org.apache.logging.log4j.core.impl.ThrowableProxy.CacheEntry> map, final java.lang.StackTraceElement[] rootTrace, final java.lang.StackTraceElement[] stackTrace) {\n        int stackLength;\n        if (rootTrace != null) {\n            int rootIndex = rootTrace.length - 1;\n            int stackIndex = stackTrace.length - 1;\n            while (((rootIndex >= 0) && (stackIndex >= 0)) && rootTrace[rootIndex].equals(stackTrace[stackIndex])) {\n                --rootIndex;\n                --stackIndex;\n            } \n            this.commonElementCount = (stackTrace.length - 1) - stackIndex;\n            stackLength = stackIndex + 1;\n        } else {\n            this.commonElementCount = 0;\n            stackLength = stackTrace.length;\n        }\n        final org.apache.logging.log4j.core.impl.ExtendedStackTraceElement[] extStackTrace = new org.apache.logging.log4j.core.impl.ExtendedStackTraceElement[stackLength];\n        java.lang.Class<?> clazz = (stack.isEmpty()) ? null : stack.peek();\n        java.lang.ClassLoader lastLoader = null;\n        for (int i = stackLength - 1; i >= 0; --i) {\n            final java.lang.StackTraceElement stackTraceElement = stackTrace[i];\n            final java.lang.String className = stackTraceElement.getClassName();\n            org.apache.logging.log4j.core.impl.ExtendedClassInfo extClassInfo;\n            if ((clazz != null) && className.equals(clazz.getName())) {\n                final org.apache.logging.log4j.core.impl.ThrowableProxy.CacheEntry entry = this.toCacheEntry(stackTraceElement, clazz, true);\n                extClassInfo = entry.element;\n                lastLoader = entry.loader;\n                stack.pop();\n                clazz = (stack.isEmpty()) ? null : stack.peek();\n            } else if (map.containsKey(className)) {\n                final org.apache.logging.log4j.core.impl.ThrowableProxy.CacheEntry entry = map.get(className);\n                extClassInfo = entry.element;\n                if (entry.loader != null) {\n                    lastLoader = entry.loader;\n                }\n            } else {\n                final org.apache.logging.log4j.core.impl.ThrowableProxy.CacheEntry entry = this.toCacheEntry(stackTraceElement, this.loadClass(lastLoader, className), false);\n                extClassInfo = entry.element;\n                map.put(stackTraceElement.toString(), entry);\n                if (entry.loader != null) {\n                    lastLoader = entry.loader;\n                }\n            }\n            extStackTrace[i] = new org.apache.logging.log4j.core.impl.ExtendedStackTraceElement(stackTraceElement, extClassInfo);\n        }\n        return extStackTrace;\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        final java.lang.String msg = this.message;\n        return msg != null ? (this.name + \": \") + msg : this.name;\n    }\n\n    private org.apache.logging.log4j.core.impl.ThrowableProxy[] toSuppressedProxies(final java.lang.Throwable thrown) {\n        try {\n            final java.lang.Throwable[] suppressed = org.apache.logging.log4j.core.util.Throwables.getSuppressed(thrown);\n            if (suppressed == null) {\n                return org.apache.logging.log4j.core.impl.ThrowableProxy.EMPTY_THROWABLE_PROXY_ARRAY;\n            }\n            final org.apache.logging.log4j.core.impl.ThrowableProxy[] proxies = new org.apache.logging.log4j.core.impl.ThrowableProxy[suppressed.length];\n            for (int i = 0; i < suppressed.length; i++) {\n                proxies[i] = new org.apache.logging.log4j.core.impl.ThrowableProxy(suppressed[i]);\n            }\n            return proxies;\n        } catch (final java.lang.Exception e) {\n            org.apache.logging.log4j.status.StatusLogger.getLogger().error(e);\n        }\n        return null;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "catch (final java.lang.NoClassDefFoundError ignored) {\n    return initializeClass(className);\n}",
            "src_parent": "try {\n    clazz = org.apache.logging.log4j.core.util.Loader.loadClass(className);\n} catch (final java.lang.ClassNotFoundException ignored) {\n    return initializeClass(className);\n} catch (final java.lang.NoClassDefFoundError ignored) {\n    return initializeClass(className);\n}",
            "src_parent_type": "Try",
            "src_type": "Catch"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "return org.apache.logging.log4j.core.util.Loader.initializeClass(className, this.getClass().getClassLoader())",
            "src_parent": "{\n    return org.apache.logging.log4j.core.util.Loader.initializeClass(className, this.getClass().getClassLoader());\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "catch (final java.lang.NoClassDefFoundError ignore) {\n    return null;\n}",
            "src_parent": "try {\n    return org.apache.logging.log4j.core.util.Loader.initializeClass(className, this.getClass().getClassLoader());\n} catch (final java.lang.ClassNotFoundException ignore) {\n    return null;\n} catch (final java.lang.NoClassDefFoundError ignore) {\n    return null;\n}",
            "src_parent_type": "Try",
            "src_type": "Catch"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "return initializeClass(className)",
            "src_parent": "{\n    return initializeClass(className);\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "try {\n    return org.apache.logging.log4j.core.util.Loader.initializeClass(className, this.getClass().getClassLoader());\n} catch (final java.lang.ClassNotFoundException ignore) {\n    return null;\n} catch (final java.lang.NoClassDefFoundError ignore) {\n    return null;\n}",
            "dst_parent": "{\n    try {\n        return org.apache.logging.log4j.core.util.Loader.initializeClass(className, this.getClass().getClassLoader());\n    } catch (final java.lang.ClassNotFoundException ignore) {\n        return null;\n    } catch (final java.lang.NoClassDefFoundError ignore) {\n        return null;\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Try",
            "operator": "MOV",
            "src": "try {\n    clazz = org.apache.logging.log4j.core.util.Loader.initializeClass(className, this.getClass().getClassLoader());\n} catch (final java.lang.ClassNotFoundException ignore) {\n    return null;\n}",
            "src_parent": "{\n    try {\n        clazz = org.apache.logging.log4j.core.util.Loader.initializeClass(className, this.getClass().getClassLoader());\n    } catch (final java.lang.ClassNotFoundException ignore) {\n        return null;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Try"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.logging.log4j.core.util.Loader.initializeClass(className, this.getClass().getClassLoader())",
            "dst_parent": "return org.apache.logging.log4j.core.util.Loader.initializeClass(className, this.getClass().getClassLoader())",
            "dst_parent_type": "Return",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "org.apache.logging.log4j.core.util.Loader.initializeClass(className, this.getClass().getClassLoader())",
            "src_parent": "clazz = org.apache.logging.log4j.core.util.Loader.initializeClass(className, this.getClass().getClassLoader())",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "ThrowableProxy"
    }
  ],
  "id": "logging-log4j2_d3989b40"
}