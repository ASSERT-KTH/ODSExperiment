{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "userFunction instanceof org.apache.flink.streaming.api.operators.OutputTypeConfigurable",
            "dst_parent": "if (userFunction instanceof org.apache.flink.streaming.api.operators.OutputTypeConfigurable) {\n    org.apache.flink.streaming.api.operators.OutputTypeConfigurable<OUT> outputTypeConfigurable = ((org.apache.flink.streaming.api.operators.OutputTypeConfigurable<OUT>) (userFunction));\n    outputTypeConfigurable.setOutputType(outTypeInfo, executionConfig);\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "UPD",
            "src": "inputSerializer == null",
            "src_parent": "if (inputSerializer == null) {\n    throw new java.lang.IllegalStateException(\"Input serializer was not set.\");\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (inputSerializer == null) {\n    throw new java.lang.IllegalStateException(\"Input serializer was not set.\");\n}",
            "src_parent": "{\n    super.open();\n    timestampedCollector = new org.apache.flink.streaming.api.operators.TimestampedCollector(output);\n    if (inputSerializer == null) {\n        throw new java.lang.IllegalStateException(\"Input serializer was not set.\");\n    }\n    windowBufferFactory.setRuntimeContext(org.apache.flink.streaming.runtime.operators.windowing.NonKeyedWindowOperator.getRuntimeContext());\n    windowBufferFactory.open(org.apache.flink.streaming.runtime.operators.windowing.NonKeyedWindowOperator.getUserFunctionParameters());\n    if (watermarkTimers == null) {\n        watermarkTimers = new java.util.HashMap<>();\n    }\n    if (processingTimeTimers == null) {\n        processingTimeTimers = new java.util.HashMap<>();\n    }\n    if (windows == null) {\n        windows = new java.util.HashMap<>();\n    }\n    for (org.apache.flink.streaming.runtime.operators.windowing.NonKeyedWindowOperator<IN, OUT, W>.Context context : windows.values()) {\n        if (context.processingTimeTimer > 0) {\n            java.util.Set<org.apache.flink.streaming.runtime.operators.windowing.NonKeyedWindowOperator<IN, OUT, W>.Context> triggers = processingTimeTimers.get(context.processingTimeTimer);\n            if (triggers == null) {\n                org.apache.flink.streaming.runtime.operators.windowing.NonKeyedWindowOperator.getRuntimeContext().registerTimer(context.processingTimeTimer, this);\n                triggers = new java.util.HashSet<>();\n                processingTimeTimers.put(context.processingTimeTimer, triggers);\n            }\n            triggers.add(context);\n        }\n        if (context.watermarkTimer > 0) {\n            java.util.Set<org.apache.flink.streaming.runtime.operators.windowing.NonKeyedWindowOperator<IN, OUT, W>.Context> triggers = watermarkTimers.get(context.watermarkTimer);\n            if (triggers == null) {\n                triggers = new java.util.HashSet<>();\n                watermarkTimers.put(context.watermarkTimer, triggers);\n            }\n            triggers.add(context);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (executionConfig) {\n    if (userFunction instanceof org.apache.flink.streaming.api.operators.OutputTypeConfigurable) {\n        org.apache.flink.streaming.api.operators.OutputTypeConfigurable<OUT> outputTypeConfigurable = ((org.apache.flink.streaming.api.operators.OutputTypeConfigurable<OUT>) (userFunction));\n        outputTypeConfigurable.setOutputType(outTypeInfo, executionConfig);\n    }\n}",
            "src_parent": "{\n    super.open();\n    timestampedCollector = new org.apache.flink.streaming.api.operators.TimestampedCollector(output);\n    if (executionConfig) {\n        if (userFunction instanceof org.apache.flink.streaming.api.operators.OutputTypeConfigurable) {\n            org.apache.flink.streaming.api.operators.OutputTypeConfigurable<OUT> outputTypeConfigurable = ((org.apache.flink.streaming.api.operators.OutputTypeConfigurable<OUT>) (userFunction));\n            outputTypeConfigurable.setOutputType(outTypeInfo, executionConfig);\n        }\n    }\n    throw new java.lang.IllegalStateException(\"Input serializer was not set.\");\n    windowBufferFactory.setRuntimeContext(org.apache.flink.streaming.runtime.operators.windowing.NonKeyedWindowOperator.getRuntimeContext());\n    windowBufferFactory.open(org.apache.flink.streaming.runtime.operators.windowing.NonKeyedWindowOperator.getUserFunctionParameters());\n    if (watermarkTimers == null) {\n        watermarkTimers = new java.util.HashMap<>();\n    }\n    if (processingTimeTimers == null) {\n        processingTimeTimers = new java.util.HashMap<>();\n    }\n    if (windows == null) {\n        windows = new java.util.HashMap<>();\n    }\n    for (org.apache.flink.streaming.runtime.operators.windowing.NonKeyedWindowOperator<IN, OUT, W>.Context context : windows.values()) {\n        if (context.processingTimeTimer > 0) {\n            java.util.Set<org.apache.flink.streaming.runtime.operators.windowing.NonKeyedWindowOperator<IN, OUT, W>.Context> triggers = processingTimeTimers.get(context.processingTimeTimer);\n            if (triggers == null) {\n                org.apache.flink.streaming.runtime.operators.windowing.NonKeyedWindowOperator.getRuntimeContext().registerTimer(context.processingTimeTimer, this);\n                triggers = new java.util.HashSet<>();\n                processingTimeTimers.put(context.processingTimeTimer, triggers);\n            }\n            triggers.add(context);\n        }\n        if (context.watermarkTimer > 0) {\n            java.util.Set<org.apache.flink.streaming.runtime.operators.windowing.NonKeyedWindowOperator<IN, OUT, W>.Context> triggers = watermarkTimers.get(context.watermarkTimer);\n            if (triggers == null) {\n                triggers = new java.util.HashSet<>();\n                watermarkTimers.put(context.watermarkTimer, triggers);\n            }\n            triggers.add(context);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.flink.streaming.api.operators.OutputTypeConfigurable<OUT> outputTypeConfigurable = ((org.apache.flink.streaming.api.operators.OutputTypeConfigurable<OUT>) (userFunction))",
            "src_parent": "{\n    org.apache.flink.streaming.api.operators.OutputTypeConfigurable<OUT> outputTypeConfigurable = ((org.apache.flink.streaming.api.operators.OutputTypeConfigurable<OUT>) (userFunction));\n    outputTypeConfigurable.setOutputType(outTypeInfo, executionConfig);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "outputTypeConfigurable.setOutputType(outTypeInfo, executionConfig)",
            "src_parent": "{\n    org.apache.flink.streaming.api.operators.OutputTypeConfigurable<OUT> outputTypeConfigurable = ((org.apache.flink.streaming.api.operators.OutputTypeConfigurable<OUT>) (userFunction));\n    outputTypeConfigurable.setOutputType(outTypeInfo, executionConfig);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "throw new java.lang.IllegalStateException(\"Input serializer was not set.\")",
            "dst_parent": "{\n    super.open();\n    timestampedCollector = new org.apache.flink.streaming.api.operators.TimestampedCollector(output);\n    if (executionConfig) {\n        if (userFunction instanceof org.apache.flink.streaming.api.operators.OutputTypeConfigurable) {\n            org.apache.flink.streaming.api.operators.OutputTypeConfigurable<OUT> outputTypeConfigurable = ((org.apache.flink.streaming.api.operators.OutputTypeConfigurable<OUT>) (userFunction));\n            outputTypeConfigurable.setOutputType(outTypeInfo, executionConfig);\n        }\n    }\n    throw new java.lang.IllegalStateException(\"Input serializer was not set.\");\n    windowBufferFactory.setRuntimeContext(org.apache.flink.streaming.runtime.operators.windowing.NonKeyedWindowOperator.getRuntimeContext());\n    windowBufferFactory.open(org.apache.flink.streaming.runtime.operators.windowing.NonKeyedWindowOperator.getUserFunctionParameters());\n    if (watermarkTimers == null) {\n        watermarkTimers = new java.util.HashMap<>();\n    }\n    if (processingTimeTimers == null) {\n        processingTimeTimers = new java.util.HashMap<>();\n    }\n    if (windows == null) {\n        windows = new java.util.HashMap<>();\n    }\n    for (org.apache.flink.streaming.runtime.operators.windowing.NonKeyedWindowOperator<IN, OUT, W>.Context context : windows.values()) {\n        if (context.processingTimeTimer > 0) {\n            java.util.Set<org.apache.flink.streaming.runtime.operators.windowing.NonKeyedWindowOperator<IN, OUT, W>.Context> triggers = processingTimeTimers.get(context.processingTimeTimer);\n            if (triggers == null) {\n                org.apache.flink.streaming.runtime.operators.windowing.NonKeyedWindowOperator.getRuntimeContext().registerTimer(context.processingTimeTimer, this);\n                triggers = new java.util.HashSet<>();\n                processingTimeTimers.put(context.processingTimeTimer, triggers);\n            }\n            triggers.add(context);\n        }\n        if (context.watermarkTimer > 0) {\n            java.util.Set<org.apache.flink.streaming.runtime.operators.windowing.NonKeyedWindowOperator<IN, OUT, W>.Context> triggers = watermarkTimers.get(context.watermarkTimer);\n            if (triggers == null) {\n                triggers = new java.util.HashSet<>();\n                watermarkTimers.put(context.watermarkTimer, triggers);\n            }\n            triggers.add(context);\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Throw",
            "operator": "MOV",
            "src": "throw new java.lang.IllegalStateException(\"Input serializer was not set.\")",
            "src_parent": "{\n    throw new java.lang.IllegalStateException(\"Input serializer was not set.\");\n}",
            "src_parent_type": "Block",
            "src_type": "Throw"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "userFunction instanceof org.apache.flink.streaming.api.operators.OutputTypeConfigurable",
            "dst_parent": "if (userFunction instanceof org.apache.flink.streaming.api.operators.OutputTypeConfigurable) {\n    org.apache.flink.streaming.api.operators.OutputTypeConfigurable<OUT> outputTypeConfigurable = ((org.apache.flink.streaming.api.operators.OutputTypeConfigurable<OUT>) (userFunction));\n    outputTypeConfigurable.setOutputType(outTypeInfo, executionConfig);\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "inputSerializer == null",
            "src_parent": "if (inputSerializer == null) {\n    throw new java.lang.IllegalStateException(\"Input serializer was not set.\");\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    org.apache.flink.streaming.api.operators.OutputTypeConfigurable<OUT> outputTypeConfigurable = ((org.apache.flink.streaming.api.operators.OutputTypeConfigurable<OUT>) (userFunction));\n    outputTypeConfigurable.setOutputType(outTypeInfo, executionConfig);\n}",
            "dst_parent": "if (userFunction instanceof org.apache.flink.streaming.api.operators.OutputTypeConfigurable) {\n    org.apache.flink.streaming.api.operators.OutputTypeConfigurable<OUT> outputTypeConfigurable = ((org.apache.flink.streaming.api.operators.OutputTypeConfigurable<OUT>) (userFunction));\n    outputTypeConfigurable.setOutputType(outTypeInfo, executionConfig);\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    throw new java.lang.IllegalStateException(\"Input serializer was not set.\");\n}",
            "src_parent": "if (inputSerializer == null) {\n    throw new java.lang.IllegalStateException(\"Input serializer was not set.\");\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        }
      ],
      "file_name": "NonKeyedWindowOperator"
    }
  ],
  "id": "flink_59685903"
}