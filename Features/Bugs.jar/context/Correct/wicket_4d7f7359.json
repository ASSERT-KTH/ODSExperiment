{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "private static final org.apache.wicket.MetaDataKey<java.lang.Boolean> ENABLED_IN_HIERARCHY_CACHE_KEY = new org.apache.wicket.MetaDataKey<java.lang.Boolean>() {\n    private static final long serialVersionUID = 1L;\n};",
            "dst_parent": "public abstract class Component implements org.apache.wicket.IClusterable , org.apache.wicket.IConverterLocator , org.apache.wicket.event.IEventSink , org.apache.wicket.event.IEventSource , org.apache.wicket.markup.html.IHeaderContributor , org.apache.wicket.request.component.IRequestableComponent , org.apache.wicket.util.IHierarchical<org.apache.wicket.Component> {\n    protected static final int FLAG_CONFIGURED = 0x800000;\n\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.Component.class);\n\n    private static final long serialVersionUID = 1L;\n\n    public static final org.apache.wicket.authorization.Action ENABLE = new org.apache.wicket.authorization.Action(org.apache.wicket.authorization.Action.ENABLE);\n\n    public static final char PATH_SEPARATOR = ':';\n\n    public static final org.apache.wicket.authorization.Action RENDER = new org.apache.wicket.authorization.Action(org.apache.wicket.authorization.Action.RENDER);\n\n    private static final org.apache.wicket.MetaDataKey<java.lang.String> MARKUP_ID_KEY = new org.apache.wicket.MetaDataKey<java.lang.String>() {\n        private static final long serialVersionUID = 1L;\n    };\n\n    private static final org.apache.wicket.model.IModelComparator defaultModelComparator = new org.apache.wicket.model.IModelComparator() {\n        private static final long serialVersionUID = 1L;\n\n        public boolean compare(org.apache.wicket.Component component, java.lang.Object b) {\n            final java.lang.Object a = component.getDefaultModelObject();\n            if ((a == null) && (b == null)) {\n                return true;\n            }\n            if ((a == null) || (b == null)) {\n                return false;\n            }\n            return a.equals(b);\n        }\n    };\n\n    private static final int FLAG_UNUSED0 = 0x20000000;\n\n    private static final int FLAG_AUTO = 0x1;\n\n    private static final int FLAG_ESCAPE_MODEL_STRINGS = 0x2;\n\n    static final int FLAG_INHERITABLE_MODEL = 0x4;\n\n    private static final int FLAG_VERSIONED = 0x8;\n\n    private static final int FLAG_VISIBLE = 0x10;\n\n    private static final int FLAG_RENDER_BODY_ONLY = 0x20;\n\n    private static final int FLAG_IGNORE_ATTRIBUTE_MODIFIER = 0x40;\n\n    private static final int FLAG_ENABLED = 0x80;\n\n    protected static final int FLAG_RESERVED1 = 0x100;\n\n    protected static final int FLAG_RESERVED2 = 0x200;\n\n    protected static final int FLAG_RESERVED3 = 0x400;\n\n    protected static final int FLAG_RESERVED4 = 0x800;\n\n    private static final int FLAG_HAS_BEEN_RENDERED = 0x1000;\n\n    private static final int FLAG_IS_RENDER_ALLOWED = 0x2000;\n\n    private static final int FLAG_OUTPUT_MARKUP_ID = 0x4000;\n\n    private static final int FLAG_PLACEHOLDER = 0x8000;\n\n    protected static final int FLAG_RESERVED5 = 0x10000;\n\n    protected static final int FLAG_INITIALIZED = 0x20000;\n\n    private static final int FLAG_NOTUSED7 = 0x40000;\n\n    protected static final int FLAG_RESERVED8 = 0x80000;\n\n    private static final int FLAG_MODEL_SET = 0x100000;\n\n    protected static final int FLAG_REMOVING_FROM_HIERARCHY = 0x200000;\n\n    private static final int FLAG_BEFORE_RENDER_SUPER_CALL_VERIFIED = 0x1000000;\n\n    private static final int FLAG_INITIALIZE_SUPER_CALL_VERIFIED = 0x10000000;\n\n    private static final int FLAG_RENDERING = 0x2000000;\n\n    private static final int FLAG_PREPARED_FOR_RENDER = 0x4000000;\n\n    private static final int FLAG_AFTER_RENDERING = 0x8000000;\n\n    private static final int FLAG_MARKUP_ATTACHED = 0x10000000;\n\n    private static final int FLAG_VISIBILITY_ALLOWED = 0x40000000;\n\n    private static final int FLAG_DETACHING = 0x80000000;\n\n    private static final java.lang.String MARKUP_ID_ATTR_NAME = \"id\";\n\n    static final org.apache.wicket.MetaDataKey<java.lang.String> ADDED_AT_KEY = new org.apache.wicket.MetaDataKey<java.lang.String>() {\n        private static final long serialVersionUID = 1L;\n    };\n\n    static final org.apache.wicket.MetaDataKey<java.lang.String> CONSTRUCTED_AT_KEY = new org.apache.wicket.MetaDataKey<java.lang.String>() {\n        private static final long serialVersionUID = 1L;\n    };\n\n    private static final org.apache.wicket.MetaDataKey<java.lang.Boolean> ENABLED_IN_HIERARCHY_CACHE_KEY = new org.apache.wicket.MetaDataKey<java.lang.Boolean>() {\n        private static final long serialVersionUID = 1L;\n    };\n\n    private int flags = ((((org.apache.wicket.Component.FLAG_VISIBLE | org.apache.wicket.Component.FLAG_ESCAPE_MODEL_STRINGS) | org.apache.wicket.Component.FLAG_VERSIONED) | org.apache.wicket.Component.FLAG_ENABLED) | org.apache.wicket.Component.FLAG_IS_RENDER_ALLOWED) | org.apache.wicket.Component.FLAG_VISIBILITY_ALLOWED;\n\n    private java.lang.String id;\n\n    private org.apache.wicket.MarkupContainer parent;\n\n    int generatedMarkupId = -1;\n\n    private transient org.apache.wicket.markup.IMarkupFragment markup;\n\n    private transient java.lang.String markupIdFromMarkup;\n\n    java.lang.Object data = null;\n\n    final int data_start() {\n        return getFlag(org.apache.wicket.Component.FLAG_MODEL_SET) ? 1 : 0;\n    }\n\n    final int data_length() {\n        if (data == null) {\n            return 0;\n        } else if ((data instanceof java.lang.Object[]) && (!(data instanceof org.apache.wicket.MetaDataEntry<?>[]))) {\n            return ((java.lang.Object[]) (data)).length;\n        } else {\n            return 1;\n        }\n    }\n\n    final java.lang.Object data_get(int index) {\n        if (data == null) {\n            return null;\n        } else if ((data instanceof java.lang.Object[]) && (!(data instanceof org.apache.wicket.MetaDataEntry<?>[]))) {\n            java.lang.Object[] array = ((java.lang.Object[]) (data));\n            return index < array.length ? array[index] : null;\n        } else if (index == 0) {\n            return data;\n        } else {\n            return null;\n        }\n    }\n\n    final java.lang.Object data_set(int index, java.lang.Object object) {\n        if (index > (data_length() - 1)) {\n            throw new java.lang.IndexOutOfBoundsException();\n        } else if ((index == 0) && (!((data instanceof java.lang.Object[]) && (!(data instanceof org.apache.wicket.MetaDataEntry<?>[]))))) {\n            java.lang.Object old = data;\n            data = object;\n            return old;\n        } else {\n            java.lang.Object[] array = ((java.lang.Object[]) (data));\n            java.lang.Object old = array[index];\n            array[index] = object;\n            return old;\n        }\n    }\n\n    final void data_add(java.lang.Object object) {\n        data_insert(-1, object);\n    }\n\n    final void data_insert(int position, java.lang.Object object) {\n        int currentLength = data_length();\n        if (position == (-1)) {\n            position = currentLength;\n        }\n        if (position > currentLength) {\n            throw new java.lang.IndexOutOfBoundsException();\n        }\n        if (currentLength == 0) {\n            data = object;\n        } else if (currentLength == 1) {\n            java.lang.Object[] array = new java.lang.Object[2];\n            if (position == 0) {\n                array[0] = object;\n                array[1] = data;\n            } else {\n                array[0] = data;\n                array[1] = object;\n            }\n            data = array;\n        } else {\n            java.lang.Object[] array = new java.lang.Object[currentLength + 1];\n            java.lang.Object[] current = ((java.lang.Object[]) (data));\n            int before = position;\n            int after = currentLength - position;\n            if (before > 0) {\n                java.lang.System.arraycopy(current, 0, array, 0, before);\n            }\n            array[position] = object;\n            if (after > 0) {\n                java.lang.System.arraycopy(current, position, array, position + 1, after);\n            }\n            data = array;\n        }\n    }\n\n    java.lang.Object data_remove(int position) {\n        int currentLength = data_length();\n        if (position > (currentLength - 1)) {\n            throw new java.lang.IndexOutOfBoundsException();\n        } else if (currentLength == 1) {\n            java.lang.Object old = data;\n            data = null;\n            return old;\n        } else if (currentLength == 2) {\n            java.lang.Object[] current = ((java.lang.Object[]) (data));\n            if (position == 0) {\n                data = current[1];\n                return current[0];\n            } else {\n                data = current[0];\n                return current[1];\n            }\n        } else {\n            java.lang.Object[] current = ((java.lang.Object[]) (data));\n            data = new java.lang.Object[currentLength - 1];\n            if (position > 0) {\n                java.lang.System.arraycopy(current, 0, data, 0, position);\n            }\n            if (position != (currentLength - 1)) {\n                final int left = (currentLength - position) - 1;\n                java.lang.System.arraycopy(current, position + 1, data, position, left);\n            }\n            return current[position];\n        }\n    }\n\n    public Component(final java.lang.String id) {\n        this(id, null);\n    }\n\n    public Component(final java.lang.String id, final org.apache.wicket.model.IModel<?> model) {\n        setId(id);\n        getApplication().getComponentInstantiationListeners().onInstantiation(this);\n        final org.apache.wicket.settings.IDebugSettings debugSettings = org.apache.wicket.Application.get().getDebugSettings();\n        if (debugSettings.isLinePreciseReportingOnNewComponentEnabled()) {\n            setMetaData(org.apache.wicket.Component.CONSTRUCTED_AT_KEY, org.apache.wicket.util.string.ComponentStrings.toString(this, new org.apache.wicket.markup.MarkupException(\"constructed\")));\n        }\n        if (model != null) {\n            setModelImpl(wrap(model));\n        }\n    }\n\n    public org.apache.wicket.markup.IMarkupFragment getMarkup() {\n        if (markup != null) {\n            return markup;\n        }\n        if (parent == null) {\n            throw new org.apache.wicket.markup.MarkupException(\"Can not determine Markup. Component is not yet connected to a parent. \" + toString());\n        }\n        markup = parent.getMarkup(this);\n        return markup;\n    }\n\n    final boolean internalOnMarkupAttached() {\n        boolean rtn = getFlag(org.apache.wicket.Component.FLAG_MARKUP_ATTACHED);\n        if (rtn == false) {\n            setFlag(org.apache.wicket.Component.FLAG_MARKUP_ATTACHED, true);\n            onMarkupAttached();\n        }\n        return rtn;\n    }\n\n    protected void onMarkupAttached() {\n        if (org.apache.wicket.Component.log.isDebugEnabled()) {\n            org.apache.wicket.Component.log.debug(\"Markup available \" + toString());\n        }\n        markupIdFromMarkup = getMarkupIdFromMarkup();\n    }\n\n    private boolean moveComponentToItsRealParent() {\n        org.apache.wicket.MarkupContainer parent = getParent();\n        org.apache.wicket.markup.IMarkupFragment markup = getMarkup();\n        if ((parent != null) && (markup != null)) {\n            org.apache.wicket.markup.IMarkupFragment parentMarkup = parent.getMarkup(null);\n            if ((parentMarkup != null) && (markup != parentMarkup)) {\n                if (markup.getMarkupResourceStream() == parentMarkup.getMarkupResourceStream()) {\n                    org.apache.wicket.markup.MarkupStream stream = new org.apache.wicket.markup.MarkupStream(markup);\n                    stream.skipUntil(org.apache.wicket.markup.ComponentTag.class);\n                    org.apache.wicket.markup.ComponentTag openTag = stream.getTag();\n                    if (openTag != null) {\n                        org.apache.wicket.markup.MarkupStream parentStream = new org.apache.wicket.markup.MarkupStream(parentMarkup);\n                        if (parentStream.skipUntil(org.apache.wicket.markup.ComponentTag.class)) {\n                            parentStream.next();\n                        }\n                        java.util.Stack<org.apache.wicket.markup.ComponentTag> stack = new java.util.Stack<org.apache.wicket.markup.ComponentTag>();\n                        while (parentStream.skipUntil(org.apache.wicket.markup.ComponentTag.class)) {\n                            org.apache.wicket.markup.ComponentTag tag = parentStream.getTag();\n                            if (openTag == tag) {\n                                if (stack.isEmpty() == false) {\n                                    final org.apache.wicket.markup.ComponentTag lastTag = stack.pop();\n                                    parent.visitChildren(org.apache.wicket.MarkupContainer.class, new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.MarkupContainer, java.lang.Void>() {\n                                        public void component(final org.apache.wicket.MarkupContainer component, final org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n                                            org.apache.wicket.markup.IMarkupFragment m = component.getMarkup();\n                                            org.apache.wicket.markup.MarkupStream ms = new org.apache.wicket.markup.MarkupStream(m);\n                                            ms.skipUntil(org.apache.wicket.markup.ComponentTag.class);\n                                            if (ms.hasMore() && (lastTag == ms.getTag())) {\n                                                component.add(Component.this);\n                                                visit.stop();\n                                                return;\n                                            }\n                                        }\n                                    });\n                                }\n                                return false;\n                            }\n                            if (tag.isOpen()) {\n                                if (tag.hasNoCloseTag() == false) {\n                                    stack.push(tag);\n                                }\n                            } else if (tag.isOpenClose()) {\n                            } else if (tag.isClose()) {\n                                if (stack.isEmpty() == false) {\n                                    stack.pop();\n                                }\n                            }\n                            parentStream.next();\n                        } \n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public final java.lang.String getMarkupIdFromMarkup() {\n        org.apache.wicket.markup.ComponentTag tag = getMarkupTag();\n        if (tag != null) {\n            java.lang.String id = tag.getAttribute(\"id\");\n            if (org.apache.wicket.util.string.Strings.isEmpty(id) == false) {\n                return id.trim();\n            }\n        }\n        return null;\n    }\n\n    public final void setMarkup(final org.apache.wicket.markup.IMarkupFragment markup) {\n        this.markup = markup;\n    }\n\n    protected void onConfigure() {\n    }\n\n    protected void onInitialize() {\n        setFlag(org.apache.wicket.Component.FLAG_INITIALIZE_SUPER_CALL_VERIFIED, true);\n    }\n\n    final boolean isInitialized() {\n        return getFlag(org.apache.wicket.Component.FLAG_INITIALIZED);\n    }\n\n    void initialize() {\n        fireInitialize();\n    }\n\n    final void fireInitialize() {\n        if (!getFlag(org.apache.wicket.Component.FLAG_INITIALIZED)) {\n            setFlag(org.apache.wicket.Component.FLAG_INITIALIZED, true);\n            setFlag(org.apache.wicket.Component.FLAG_INITIALIZE_SUPER_CALL_VERIFIED, false);\n            onInitialize();\n            if (!getFlag(org.apache.wicket.Component.FLAG_INITIALIZE_SUPER_CALL_VERIFIED)) {\n                throw new java.lang.IllegalStateException(((org.apache.wicket.Component.class.getName() + \" has not been properly initialized. Something in the hierarchy of \") + getClass().getName()) + \" has not called super.onInitialize() in the override of onInitialize() method\");\n            }\n            setFlag(org.apache.wicket.Component.FLAG_INITIALIZE_SUPER_CALL_VERIFIED, false);\n            getApplication().getComponentInitializationListeners().onInitialize(this);\n        }\n    }\n\n    public final void afterRender() {\n        try {\n            setFlag(org.apache.wicket.Component.FLAG_AFTER_RENDERING, true);\n            onAfterRender();\n            getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);\n            if (getFlag(org.apache.wicket.Component.FLAG_AFTER_RENDERING)) {\n                throw new java.lang.IllegalStateException(((org.apache.wicket.Component.class.getName() + \" has not been properly detached. Something in the hierarchy of \") + getClass().getName()) + \" has not called super.onAfterRender() in the override of onAfterRender() method\");\n            }\n            onAfterRenderChildren();\n        } finally {\n            setFlag(org.apache.wicket.Component.FLAG_RENDERING, false);\n        }\n    }\n\n    private final void internalBeforeRender() {\n        configure();\n        if (((determineVisibility() || callOnBeforeRenderIfNotVisible()) && (!getFlag(org.apache.wicket.Component.FLAG_RENDERING))) && (!getFlag(org.apache.wicket.Component.FLAG_PREPARED_FOR_RENDER))) {\n            setFlag(org.apache.wicket.Component.FLAG_BEFORE_RENDER_SUPER_CALL_VERIFIED, false);\n            getApplication().getComponentPreOnBeforeRenderListeners().onBeforeRender(this);\n            clearEnabledInHierarchyCache();\n            onBeforeRender();\n            getApplication().getComponentPostOnBeforeRenderListeners().onBeforeRender(this);\n            if (!getFlag(org.apache.wicket.Component.FLAG_BEFORE_RENDER_SUPER_CALL_VERIFIED)) {\n                throw new java.lang.IllegalStateException(((org.apache.wicket.Component.class.getName() + \" has not been properly rendered. Something in the hierarchy of \") + getClass().getName()) + \" has not called super.onBeforeRender() in the override of onBeforeRender() method\");\n            }\n        }\n    }\n\n    private static final org.apache.wicket.MetaDataKey<java.util.List<org.apache.wicket.Component>> FEEDBACK_LIST = new org.apache.wicket.MetaDataKey<java.util.List<org.apache.wicket.Component>>() {\n        private static final long serialVersionUID = 1L;\n    };\n\n    public final void beforeRender() {\n        if (!(this instanceof org.apache.wicket.feedback.IFeedback)) {\n            internalBeforeRender();\n        } else {\n            java.util.List<org.apache.wicket.Component> feedbacks = getRequestCycle().getMetaData(org.apache.wicket.Component.FEEDBACK_LIST);\n            if (feedbacks == null) {\n                feedbacks = new java.util.ArrayList<org.apache.wicket.Component>();\n                getRequestCycle().setMetaData(org.apache.wicket.Component.FEEDBACK_LIST, feedbacks);\n            }\n            if (this instanceof org.apache.wicket.MarkupContainer) {\n                ((org.apache.wicket.MarkupContainer) (this)).visitChildren(org.apache.wicket.feedback.IFeedback.class, new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.Component, java.lang.Void>() {\n                    public void component(org.apache.wicket.Component component, org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n                        component.beforeRender();\n                    }\n                });\n            }\n            if (!feedbacks.contains(this)) {\n                feedbacks.add(this);\n            }\n        }\n    }\n\n    public final void configure() {\n        if (!getFlag(org.apache.wicket.Component.FLAG_CONFIGURED)) {\n            onConfigure();\n            setFlag(org.apache.wicket.Component.FLAG_CONFIGURED, true);\n        }\n    }\n\n    public final boolean continueToOriginalDestination() {\n        return org.apache.wicket.RestartResponseAtInterceptPageException.continueToOriginalDestination();\n    }\n\n    public final void debug(final java.lang.String message) {\n        org.apache.wicket.Session.get().getFeedbackMessages().debug(this, message);\n        org.apache.wicket.Session.get().dirty();\n    }\n\n    final void internalOnRemove() {\n        setFlag(org.apache.wicket.Component.FLAG_REMOVING_FROM_HIERARCHY, true);\n        onRemove();\n        if (getFlag(org.apache.wicket.Component.FLAG_REMOVING_FROM_HIERARCHY)) {\n            throw new java.lang.IllegalStateException(((org.apache.wicket.Component.class.getName() + \" has not been properly removed from hierachy. Something in the hierarchy of \") + getClass().getName()) + \" has not called super.onRemovalFromHierarchy() in the override of onRemovalFromHierarchy() method\");\n        }\n        removeChildren();\n    }\n\n    public final void detach() {\n        setFlag(org.apache.wicket.Component.FLAG_DETACHING, true);\n        onDetach();\n        if (getFlag(org.apache.wicket.Component.FLAG_DETACHING)) {\n            throw new java.lang.IllegalStateException(((org.apache.wicket.Component.class.getName() + \" has not been properly detached. Something in the hierarchy of \") + getClass().getName()) + \" has not called super.onDetach() in the override of onDetach() method\");\n        }\n        setFlag(org.apache.wicket.Component.FLAG_CONFIGURED, false);\n        detachModels();\n        new org.apache.wicket.Behaviors(this).detach();\n        detachChildren();\n        if (getFlag(org.apache.wicket.Component.FLAG_INHERITABLE_MODEL)) {\n            setModelImpl(null);\n            setFlag(org.apache.wicket.Component.FLAG_INHERITABLE_MODEL, false);\n        }\n        clearEnabledInHierarchyCache();\n        org.apache.wicket.IDetachListener detachListener = getApplication().getFrameworkSettings().getDetachListener();\n        if (detachListener != null) {\n            detachListener.onDetach(this);\n        }\n    }\n\n    public void detachModels() {\n        detachModel();\n    }\n\n    public final void error(final java.io.Serializable message) {\n        org.apache.wicket.Session.get().getFeedbackMessages().error(this, message);\n        org.apache.wicket.Session.get().dirty();\n    }\n\n    public final void fatal(final java.lang.String message) {\n        org.apache.wicket.Session.get().getFeedbackMessages().fatal(this, message);\n        org.apache.wicket.Session.get().dirty();\n    }\n\n    public final <Z> Z findParent(final java.lang.Class<Z> c) {\n        org.apache.wicket.MarkupContainer current = parent;\n        while (current != null) {\n            if (c.isInstance(current)) {\n                return c.cast(current);\n            }\n            current = current.getParent();\n        } \n        return null;\n    }\n\n    public final org.apache.wicket.MarkupContainer findParentWithAssociatedMarkup() {\n        org.apache.wicket.MarkupContainer container = parent;\n        while (container != null) {\n            if (container.hasAssociatedMarkup()) {\n                return container;\n            }\n            container = container.getParent();\n        } \n        throw new org.apache.wicket.WicketRuntimeException(\"Unable to find parent with associated markup\");\n    }\n\n    public final org.apache.wicket.Application getApplication() {\n        return org.apache.wicket.Application.get();\n    }\n\n    public final java.lang.String getClassRelativePath() {\n        return (getClass().getName() + org.apache.wicket.Component.PATH_SEPARATOR) + getPageRelativePath();\n    }\n\n    public <C> org.apache.wicket.util.convert.IConverter<C> getConverter(java.lang.Class<C> type) {\n        return getApplication().getConverterLocator().getConverter(type);\n    }\n\n    public final boolean getEscapeModelStrings() {\n        return getFlag(org.apache.wicket.Component.FLAG_ESCAPE_MODEL_STRINGS);\n    }\n\n    public final org.apache.wicket.feedback.FeedbackMessage getFeedbackMessage() {\n        return org.apache.wicket.Session.get().getFeedbackMessages().messageForComponent(this);\n    }\n\n    public java.lang.String getId() {\n        return id;\n    }\n\n    public final org.apache.wicket.model.IModel<?> getInnermostModel() {\n        return getInnermostModel(getDefaultModel());\n    }\n\n    public java.util.Locale getLocale() {\n        if (parent != null) {\n            return parent.getLocale();\n        }\n        return getSession().getLocale();\n    }\n\n    public final org.apache.wicket.Localizer getLocalizer() {\n        return getApplication().getResourceSettings().getLocalizer();\n    }\n\n    private final org.apache.wicket.markup.ComponentTag getMarkupTag() {\n        org.apache.wicket.markup.IMarkupFragment markup = getMarkup();\n        if (markup != null) {\n            for (int i = 0; i < markup.size(); i++) {\n                org.apache.wicket.markup.MarkupElement elem = markup.get(i);\n                if (elem instanceof org.apache.wicket.markup.ComponentTag) {\n                    return ((org.apache.wicket.markup.ComponentTag) (elem));\n                }\n            }\n        }\n        return null;\n    }\n\n    public final org.apache.wicket.util.value.ValueMap getMarkupAttributes() {\n        org.apache.wicket.markup.ComponentTag tag = getMarkupTag();\n        if (tag != null) {\n            org.apache.wicket.util.value.ValueMap attrs = new org.apache.wicket.util.value.ValueMap(tag.getAttributes());\n            attrs.makeImmutable();\n            return attrs;\n        }\n        return org.apache.wicket.util.value.ValueMap.EMPTY_MAP;\n    }\n\n    public final java.lang.Object getMarkupIdImpl() {\n        if (markupIdFromMarkup != null) {\n            return markupIdFromMarkup;\n        }\n        if (generatedMarkupId != (-1)) {\n            return new java.lang.Integer(generatedMarkupId);\n        }\n        return getMetaData(org.apache.wicket.Component.MARKUP_ID_KEY);\n    }\n\n    private final int nextAutoIndex() {\n        org.apache.wicket.Page page = findPage();\n        if (page == null) {\n            throw new org.apache.wicket.WicketRuntimeException(\"This component is not (yet) coupled to a page. It has to be able \" + (\"to find the page it is supposed to operate in before you can call \" + \"this method (Component#getMarkupId)\"));\n        }\n        return page.getAutoIndex();\n    }\n\n    public java.lang.String getMarkupId(boolean createIfDoesNotExist) {\n        java.lang.Object storedMarkupId = getMarkupIdImpl();\n        if (storedMarkupId instanceof java.lang.String) {\n            return ((java.lang.String) (storedMarkupId));\n        }\n        if ((storedMarkupId == null) && (createIfDoesNotExist == false)) {\n            return null;\n        }\n        final int generatedMarkupId = (storedMarkupId instanceof java.lang.Integer) ? ((java.lang.Integer) (storedMarkupId)).intValue() : org.apache.wicket.Session.get().nextSequenceValue();\n        if (storedMarkupId == null) {\n            setMarkupIdImpl(new java.lang.Integer(generatedMarkupId));\n        }\n        java.lang.String markupIdPrefix = \"id\";\n        if (!org.apache.wicket.Application.get().getConfigurationType().equals(Application.DEPLOYMENT)) {\n            markupIdPrefix = getId();\n        }\n        java.lang.String markupIdPostfix = java.lang.Integer.toHexString(generatedMarkupId).toLowerCase();\n        java.lang.String markupId = markupIdPrefix + markupIdPostfix;\n        char c = markupId.charAt(0);\n        if (!java.lang.Character.isLetter(c)) {\n            markupId = \"id\" + markupId;\n        }\n        markupId = org.apache.wicket.util.string.Strings.replaceAll(markupId, \"_\", \"__\").toString();\n        markupId = markupId.replace('.', '_');\n        markupId = markupId.replace('-', '_');\n        markupId = markupId.replace(' ', '_');\n        return markupId;\n    }\n\n    public java.lang.String getMarkupId() {\n        return getMarkupId(true);\n    }\n\n    public final <M extends java.io.Serializable> M getMetaData(final org.apache.wicket.MetaDataKey<M> key) {\n        return key.get(getMetaData());\n    }\n\n    private org.apache.wicket.MetaDataEntry<?>[] getMetaData() {\n        org.apache.wicket.MetaDataEntry<?>[] metaData = null;\n        int index = (getFlag(org.apache.wicket.Component.FLAG_MODEL_SET)) ? 1 : 0;\n        int length = data_length();\n        if (index < length) {\n            java.lang.Object object = data_get(index);\n            if (object instanceof org.apache.wicket.MetaDataEntry<?>[]) {\n                metaData = ((org.apache.wicket.MetaDataEntry<?>[]) (object));\n            } else if (object instanceof org.apache.wicket.MetaDataEntry) {\n                metaData = new org.apache.wicket.MetaDataEntry[]{ ((org.apache.wicket.MetaDataEntry<?>) (object)) };\n            }\n        }\n        return metaData;\n    }\n\n    public final org.apache.wicket.model.IModel<?> getDefaultModel() {\n        org.apache.wicket.model.IModel<?> model = getModelImpl();\n        if (model == null) {\n            model = initModel();\n            setModelImpl(model);\n        }\n        return model;\n    }\n\n    public final java.lang.Object getDefaultModelObject() {\n        final org.apache.wicket.model.IModel<?> model = getDefaultModel();\n        if (model != null) {\n            try {\n                return model.getObject();\n            } catch (java.lang.RuntimeException ex) {\n                org.apache.wicket.Component.log.error(\"Error while getting default model object for Component: \" + this.toString(true));\n                throw ex;\n            }\n        }\n        return null;\n    }\n\n    public final java.lang.String getDefaultModelObjectAsString() {\n        return getDefaultModelObjectAsString(getDefaultModelObject());\n    }\n\n    public final java.lang.String getDefaultModelObjectAsString(final java.lang.Object modelObject) {\n        if (modelObject != null) {\n            final java.lang.Class<?> objectClass = modelObject.getClass();\n            final org.apache.wicket.util.convert.IConverter converter = getConverter(objectClass);\n            final java.lang.String modelString = converter.convertToString(modelObject, getLocale());\n            if (modelString != null) {\n                if (getFlag(org.apache.wicket.Component.FLAG_ESCAPE_MODEL_STRINGS)) {\n                    return org.apache.wicket.util.string.Strings.escapeMarkup(modelString, false, false).toString();\n                }\n                return modelString;\n            }\n        }\n        return \"\";\n    }\n\n    public final boolean getOutputMarkupId() {\n        return getFlag(org.apache.wicket.Component.FLAG_OUTPUT_MARKUP_ID);\n    }\n\n    public final boolean getOutputMarkupPlaceholderTag() {\n        return getFlag(org.apache.wicket.Component.FLAG_PLACEHOLDER);\n    }\n\n    public final org.apache.wicket.Page getPage() {\n        final org.apache.wicket.Page page = findPage();\n        if (page == null) {\n            throw new org.apache.wicket.WicketRuntimeException(\"No Page found for component \" + this);\n        }\n        return page;\n    }\n\n    public final java.lang.String getPageRelativePath() {\n        return org.apache.wicket.util.string.Strings.afterFirstPathComponent(getPath(), org.apache.wicket.Component.PATH_SEPARATOR);\n    }\n\n    public final org.apache.wicket.MarkupContainer getParent() {\n        return parent;\n    }\n\n    public final java.lang.String getPath() {\n        final org.apache.wicket.util.string.PrependingStringBuffer buffer = new org.apache.wicket.util.string.PrependingStringBuffer(32);\n        for (org.apache.wicket.Component c = this; c != null; c = c.getParent()) {\n            if (buffer.length() > 0) {\n                buffer.prepend(org.apache.wicket.Component.PATH_SEPARATOR);\n            }\n            buffer.prepend(c.getId());\n        }\n        return buffer.toString();\n    }\n\n    public final boolean getRenderBodyOnly() {\n        return getFlag(org.apache.wicket.Component.FLAG_RENDER_BODY_ONLY);\n    }\n\n    public final org.apache.wicket.request.Request getRequest() {\n        org.apache.wicket.request.cycle.RequestCycle requestCycle = getRequestCycle();\n        if (requestCycle == null) {\n            throw new org.apache.wicket.WicketRuntimeException(\"No RequestCycle is currently set!\");\n        }\n        return requestCycle.getRequest();\n    }\n\n    public final org.apache.wicket.request.cycle.RequestCycle getRequestCycle() {\n        return org.apache.wicket.request.cycle.RequestCycle.get();\n    }\n\n    public final org.apache.wicket.request.Response getResponse() {\n        return getRequestCycle().getResponse();\n    }\n\n    public org.apache.wicket.Session getSession() {\n        return org.apache.wicket.Session.get();\n    }\n\n    public long getSizeInBytes() {\n        final org.apache.wicket.MarkupContainer originalParent = parent;\n        parent = null;\n        long size = -1;\n        try {\n            size = org.apache.wicket.util.lang.WicketObjects.sizeof(this);\n        } catch (java.lang.Exception e) {\n            org.apache.wicket.Component.log.error(\"Exception getting size for component \" + this, e);\n        }\n        parent = originalParent;\n        return size;\n    }\n\n    public final java.lang.String getString(final java.lang.String key) {\n        return getString(key, null);\n    }\n\n    public final java.lang.String getString(final java.lang.String key, final org.apache.wicket.model.IModel<?> model) {\n        return getLocalizer().getString(key, this, model);\n    }\n\n    public final java.lang.String getString(final java.lang.String key, final org.apache.wicket.model.IModel<?> model, final java.lang.String defaultValue) {\n        return getLocalizer().getString(key, this, model, defaultValue);\n    }\n\n    public final java.lang.String getStyle() {\n        org.apache.wicket.Session session = getSession();\n        if (session == null) {\n            throw new org.apache.wicket.WicketRuntimeException(\"Wicket Session object not avaiable\");\n        }\n        return session.getStyle();\n    }\n\n    public java.lang.String getVariation() {\n        if (parent != null) {\n            return parent.getVariation();\n        }\n        return null;\n    }\n\n    public final boolean hasBeenRendered() {\n        return getFlag(org.apache.wicket.Component.FLAG_HAS_BEEN_RENDERED);\n    }\n\n    public final boolean hasErrorMessage() {\n        return org.apache.wicket.Session.get().getFeedbackMessages().hasErrorMessageFor(this);\n    }\n\n    public final boolean hasFeedbackMessage() {\n        return org.apache.wicket.Session.get().getFeedbackMessages().hasMessageFor(this);\n    }\n\n    public final void info(final java.lang.String message) {\n        org.apache.wicket.Session.get().getFeedbackMessages().info(this, message);\n        org.apache.wicket.Session.get().dirty();\n    }\n\n    public final boolean isActionAuthorized(org.apache.wicket.authorization.Action action) {\n        org.apache.wicket.authorization.IAuthorizationStrategy authorizationStrategy = getSession().getAuthorizationStrategy();\n        if (authorizationStrategy != null) {\n            return authorizationStrategy.isActionAuthorized(this, action);\n        }\n        return true;\n    }\n\n    public final boolean isEnableAllowed() {\n        return isActionAuthorized(org.apache.wicket.Component.ENABLE);\n    }\n\n    public boolean isEnabled() {\n        return getFlag(org.apache.wicket.Component.FLAG_ENABLED);\n    }\n\n    public final boolean isRenderAllowed() {\n        return getFlag(org.apache.wicket.Component.FLAG_IS_RENDER_ALLOWED);\n    }\n\n    public final boolean isStateless() {\n        if (!getStatelessHint()) {\n            return false;\n        }\n        for (org.apache.wicket.behavior.IBehavior behavior : getBehaviors()) {\n            if (!behavior.getStatelessHint(this)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean isVersioned() {\n        if (!getFlag(org.apache.wicket.Component.FLAG_VERSIONED)) {\n            return false;\n        } else {\n            if (parent != null) {\n                if (!parent.isVersioned()) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    public boolean isVisible() {\n        return getFlag(org.apache.wicket.Component.FLAG_VISIBLE);\n    }\n\n    public final boolean isVisibleInHierarchy() {\n        org.apache.wicket.Component parent = getParent();\n        if ((parent != null) && (!parent.isVisibleInHierarchy())) {\n            return false;\n        } else {\n            return determineVisibility();\n        }\n    }\n\n    public final void markRendering(boolean setRenderingFlag) {\n        internalMarkRendering(setRenderingFlag);\n    }\n\n    public final void modelChanged() {\n        internalOnModelChanged();\n        onModelChanged();\n    }\n\n    public final void modelChanging() {\n        checkHierarchyChange(this);\n        onModelChanging();\n        final org.apache.wicket.Page page = findPage();\n        if (page != null) {\n            page.componentModelChanging(this);\n        }\n    }\n\n    public void prepareForRender(boolean setRenderingFlag) {\n        beforeRender();\n        if (setRenderingFlag) {\n            java.util.List<org.apache.wicket.Component> feedbacks = getRequestCycle().getMetaData(org.apache.wicket.Component.FEEDBACK_LIST);\n            if (feedbacks != null) {\n                for (int i = 0; i < feedbacks.size(); i++) {\n                    feedbacks.get(i).internalBeforeRender();\n                }\n            }\n            getRequestCycle().setMetaData(org.apache.wicket.Component.FEEDBACK_LIST, null);\n        }\n        markRendering(setRenderingFlag);\n        setRenderAllowed();\n    }\n\n    public final void prepareForRender() {\n        prepareForRender(true);\n    }\n\n    public final void redirectToInterceptPage(final org.apache.wicket.Page page) {\n        throw new org.apache.wicket.RestartResponseAtInterceptPageException(page);\n    }\n\n    public final void remove() {\n        if (parent == null) {\n            throw new java.lang.IllegalStateException((\"Cannot remove \" + this) + \" from null parent!\");\n        }\n        parent.remove(this);\n    }\n\n    public final void render() {\n        java.lang.RuntimeException exception = null;\n        try {\n            org.apache.wicket.MarkupContainer parent = getParent();\n            if (((parent == null) || (parent.getFlag(org.apache.wicket.Component.FLAG_RENDERING) == false)) || isAuto()) {\n                prepareForRender(true);\n            }\n            render_();\n        } catch (final java.lang.RuntimeException ex) {\n            exception = ex;\n        } finally {\n            try {\n                afterRender();\n            } catch (java.lang.RuntimeException ex2) {\n                if (exception == null) {\n                    exception = ex2;\n                }\n            }\n        }\n        if (exception != null) {\n            throw exception;\n        }\n    }\n\n    private final void render_() {\n        org.apache.wicket.markup.IMarkupFragment markup = getMarkup();\n        if (markup == null) {\n            throw new org.apache.wicket.markup.MarkupNotFoundException(\"Markup not found for Component: \" + toString());\n        }\n        org.apache.wicket.markup.MarkupStream markupStream = new org.apache.wicket.markup.MarkupStream(markup);\n        setMarkupStream(markupStream);\n        markRendering(true);\n        org.apache.wicket.markup.MarkupElement elem = markup.get(0);\n        if (elem instanceof org.apache.wicket.markup.ComponentTag) {\n            ((org.apache.wicket.markup.ComponentTag) (elem)).onBeforeRender(this, markupStream);\n        }\n        if (determineVisibility()) {\n            setFlag(org.apache.wicket.Component.FLAG_HAS_BEEN_RENDERED, true);\n            if (org.apache.wicket.Component.log.isDebugEnabled()) {\n                org.apache.wicket.Component.log.debug(\"Begin render \" + this);\n            }\n            try {\n                notifyBehaviorsComponentBeforeRender();\n                onRender();\n                notifyBehaviorsComponentRendered();\n                rendered();\n            } catch (java.lang.RuntimeException ex) {\n                onException(ex);\n            }\n            if (org.apache.wicket.Component.log.isDebugEnabled()) {\n                org.apache.wicket.Component.log.debug(\"End render \" + this);\n            }\n        } else if ((elem != null) && (elem instanceof org.apache.wicket.markup.ComponentTag)) {\n            if (getFlag(org.apache.wicket.Component.FLAG_PLACEHOLDER)) {\n                renderPlaceholderTag(((org.apache.wicket.markup.ComponentTag) (elem)), getResponse());\n            }\n        }\n    }\n\n    private void onException(final java.lang.RuntimeException ex) {\n        for (org.apache.wicket.behavior.IBehavior behavior : getBehaviors()) {\n            if (isBehaviorAccepted(behavior)) {\n                try {\n                    behavior.exception(this, ex);\n                } catch (java.lang.Throwable ex2) {\n                    org.apache.wicket.Component.log.error(\"Error while cleaning up after exception\", ex2);\n                }\n            }\n        }\n        throw ex;\n    }\n\n    protected void renderPlaceholderTag(final org.apache.wicket.markup.ComponentTag tag, final org.apache.wicket.request.Response response) {\n        java.lang.String ns = (org.apache.wicket.util.string.Strings.isEmpty(tag.getNamespace())) ? null : tag.getNamespace() + \":\";\n        response.write(\"<\");\n        if (ns != null) {\n            response.write(ns);\n        }\n        response.write(tag.getName());\n        response.write(\" id=\\\"\");\n        response.write(getMarkupId());\n        response.write(\"\\\" style=\\\"display:none\\\"></\");\n        if (ns != null) {\n            response.write(ns);\n        }\n        response.write(tag.getName());\n        response.write(\">\");\n    }\n\n    public final void renderComponent() {\n        final org.apache.wicket.markup.IMarkupFragment markup = getMarkup();\n        if (markup == null) {\n            throw new org.apache.wicket.markup.MarkupException(\"Markup not found. Component: \" + toString());\n        }\n        final org.apache.wicket.markup.MarkupStream markupStream = new org.apache.wicket.markup.MarkupStream(markup);\n        final org.apache.wicket.markup.ComponentTag openTag = markupStream.getTag();\n        final org.apache.wicket.markup.ComponentTag tag = openTag.mutable();\n        onComponentTag(tag);\n        if ((!tag.isOpenClose()) && (!tag.isOpen())) {\n            markupStream.throwMarkupException(\"Method renderComponent called on bad markup element: \" + tag);\n        }\n        if (tag.isOpenClose() && openTag.isOpen()) {\n            markupStream.throwMarkupException(\"You can not modify a open tag to open-close: \" + tag);\n        }\n        try {\n            if (getRenderBodyOnly() == false) {\n                renderComponentTag(tag);\n            }\n            markupStream.next();\n            if (tag.isOpen()) {\n                onComponentTagBody(markupStream, tag);\n            }\n            if (tag.isOpen()) {\n                if (openTag.isOpen()) {\n                    renderClosingComponentTag(markupStream, tag, getRenderBodyOnly());\n                } else if (getRenderBodyOnly() == false) {\n                    if (needToRenderTag(openTag)) {\n                        getResponse().write(tag.syntheticCloseTagString());\n                    }\n                }\n            }\n        } catch (org.apache.wicket.WicketRuntimeException wre) {\n            throw wre;\n        } catch (java.lang.RuntimeException re) {\n            throw new org.apache.wicket.WicketRuntimeException(\"Exception in rendering component: \" + this, re);\n        }\n    }\n\n    private boolean needToRenderTag(final org.apache.wicket.markup.ComponentTag openTag) {\n        boolean renderTag = (openTag == null) ? false : !(openTag instanceof org.apache.wicket.markup.WicketTag);\n        if (renderTag == false) {\n            renderTag = !((getRequest() instanceof org.apache.wicket.request.http.WebRequest) && ((org.apache.wicket.request.http.WebRequest) (getRequest())).isAjax());\n            renderTag &= !getApplication().getMarkupSettings().getStripWicketTags();\n        }\n        return renderTag;\n    }\n\n    public final void rendered() {\n        org.apache.wicket.Page page = findPage();\n        if (page != null) {\n            page.componentRendered(this);\n        } else {\n            org.apache.wicket.Component.log.error(\"Component is not connected to a Page. Cannot register the component as being rendered. Component: \" + toString());\n        }\n    }\n\n    public void renderHead(final org.apache.wicket.markup.html.internal.HtmlHeaderContainer container) {\n        if (isVisibleInHierarchy() && isRenderAllowed()) {\n            if (org.apache.wicket.Component.log.isDebugEnabled()) {\n                org.apache.wicket.Component.log.debug(\"renderHead: \" + toString(false));\n            }\n            org.apache.wicket.markup.html.IHeaderResponse response = container.getHeaderResponse();\n            if (response.wasRendered(this) == false) {\n                renderHead(response);\n                response.markRendered(this);\n            }\n            for (org.apache.wicket.behavior.IBehavior behavior : getBehaviors()) {\n                if (isBehaviorAccepted(behavior)) {\n                    if (response.wasRendered(behavior) == false) {\n                        behavior.renderHead(response);\n                        response.markRendered(behavior);\n                    }\n                }\n            }\n        }\n    }\n\n    public org.apache.wicket.Component replaceWith(org.apache.wicket.Component replacement) {\n        if (replacement == null) {\n            throw new java.lang.IllegalArgumentException(\"Argument [[replacement]] cannot be null.\");\n        }\n        if (!getId().equals(replacement.getId())) {\n            throw new java.lang.IllegalArgumentException((((\"Replacement component must have the same id as the component it will replace. Replacement id [[\" + replacement.getId()) + \"]], replaced id [[\") + getId()) + \"]].\");\n        }\n        if (parent == null) {\n            throw new java.lang.IllegalStateException(\"This method can only be called on a component that has already been added to its parent.\");\n        }\n        parent.replace(replacement);\n        return replacement;\n    }\n\n    public final boolean sameInnermostModel(final org.apache.wicket.Component component) {\n        return sameInnermostModel(component.getDefaultModel());\n    }\n\n    public final boolean sameInnermostModel(final org.apache.wicket.model.IModel<?> model) {\n        org.apache.wicket.model.IModel<?> thisModel = getDefaultModel();\n        org.apache.wicket.model.IModel<?> thatModel = model;\n        if ((thisModel != null) && (thatModel != null)) {\n            return getInnermostModel(thisModel) == getInnermostModel(thatModel);\n        }\n        return false;\n    }\n\n    public final org.apache.wicket.Component setEnabled(final boolean enabled) {\n        if (enabled != getFlag(org.apache.wicket.Component.FLAG_ENABLED)) {\n            if (isVersioned()) {\n                final org.apache.wicket.Page page = findPage();\n                if (page != null) {\n                    addStateChange();\n                }\n            }\n            setFlag(org.apache.wicket.Component.FLAG_ENABLED, enabled);\n            onEnabledStateChanged();\n        }\n        return this;\n    }\n\n    void clearEnabledInHierarchyCache() {\n        setMetaData(org.apache.wicket.Component.ENABLED_IN_HIERARCHY_CACHE_KEY, null);\n    }\n\n    void onEnabledStateChanged() {\n        clearEnabledInHierarchyCache();\n    }\n\n    public final org.apache.wicket.Component setEscapeModelStrings(final boolean escapeMarkup) {\n        setFlag(org.apache.wicket.Component.FLAG_ESCAPE_MODEL_STRINGS, escapeMarkup);\n        return this;\n    }\n\n    public final void setMarkupIdImpl(java.lang.Object markupId) {\n        if (((markupId != null) && (!(markupId instanceof java.lang.String))) && (!(markupId instanceof java.lang.Integer))) {\n            throw new java.lang.IllegalArgumentException(\"markupId must be String or Integer\");\n        }\n        if (markupId instanceof java.lang.Integer) {\n            generatedMarkupId = ((java.lang.Integer) (markupId)).intValue();\n            setMetaData(org.apache.wicket.Component.MARKUP_ID_KEY, null);\n            return;\n        }\n        generatedMarkupId = -1;\n        setMetaData(org.apache.wicket.Component.MARKUP_ID_KEY, ((java.lang.String) (markupId)));\n    }\n\n    public org.apache.wicket.Component setMarkupId(java.lang.String markupId) {\n        if ((markupId != null) && org.apache.wicket.util.string.Strings.isEmpty(markupId)) {\n            throw new java.lang.IllegalArgumentException(\"Markup id cannot be an empty string\");\n        }\n        setMarkupIdImpl(markupId);\n        return this;\n    }\n\n    public final <M> void setMetaData(final org.apache.wicket.MetaDataKey<M> key, final M object) {\n        org.apache.wicket.MetaDataEntry<?>[] old = getMetaData();\n        java.lang.Object metaData = null;\n        org.apache.wicket.MetaDataEntry<?>[] metaDataArray = key.set(getMetaData(), object);\n        if ((metaDataArray != null) && (metaDataArray.length > 0)) {\n            metaData = (metaDataArray.length > 1) ? ((java.lang.Object) (metaDataArray)) : metaDataArray[0];\n        }\n        int index = (getFlag(org.apache.wicket.Component.FLAG_MODEL_SET)) ? 1 : 0;\n        if ((old == null) && (metaData != null)) {\n            data_insert(index, metaData);\n        } else if ((old != null) && (metaData != null)) {\n            data_set(index, metaData);\n        } else if ((old != null) && (metaData == null)) {\n            data_remove(index);\n        }\n    }\n\n    public org.apache.wicket.Component setDefaultModel(final org.apache.wicket.model.IModel<?> model) {\n        org.apache.wicket.model.IModel<?> prevModel = getModelImpl();\n        if (prevModel != null) {\n            prevModel.detach();\n        }\n        org.apache.wicket.model.IModel<?> wrappedModel = prevModel;\n        if (prevModel instanceof org.apache.wicket.model.IWrapModel) {\n            wrappedModel = ((org.apache.wicket.model.IWrapModel<?>) (prevModel)).getWrappedModel();\n        }\n        if (wrappedModel != model) {\n            if (wrappedModel != null) {\n                addStateChange();\n            }\n            setModelImpl(wrap(model));\n        }\n        modelChanged();\n        return this;\n    }\n\n    org.apache.wicket.model.IModel<?> getModelImpl() {\n        if (getFlag(org.apache.wicket.Component.FLAG_MODEL_SET)) {\n            return ((org.apache.wicket.model.IModel<?>) (data_get(0)));\n        }\n        return null;\n    }\n\n    void setModelImpl(org.apache.wicket.model.IModel<?> model) {\n        if (getFlag(org.apache.wicket.Component.FLAG_MODEL_SET)) {\n            if (model != null) {\n                data_set(0, model);\n            } else {\n                data_remove(0);\n                setFlag(org.apache.wicket.Component.FLAG_MODEL_SET, false);\n            }\n        } else if (model != null) {\n            data_insert(0, model);\n            setFlag(org.apache.wicket.Component.FLAG_MODEL_SET, true);\n        }\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public final org.apache.wicket.Component setDefaultModelObject(final java.lang.Object object) {\n        final org.apache.wicket.model.IModel<java.lang.Object> model = ((org.apache.wicket.model.IModel<java.lang.Object>) (getDefaultModel()));\n        if (model == null) {\n            throw new java.lang.IllegalStateException(\"Attempt to set model object on null model of component: \" + getPageRelativePath());\n        }\n        if (!isActionAuthorized(org.apache.wicket.Component.ENABLE)) {\n            throw new org.apache.wicket.authorization.UnauthorizedActionException(this, org.apache.wicket.Component.ENABLE);\n        }\n        if (!getModelComparator().compare(this, object)) {\n            modelChanging();\n            model.setObject(object);\n            modelChanged();\n        }\n        return this;\n    }\n\n    public final org.apache.wicket.Component setOutputMarkupId(final boolean output) {\n        setFlag(org.apache.wicket.Component.FLAG_OUTPUT_MARKUP_ID, output);\n        return this;\n    }\n\n    public final org.apache.wicket.Component setOutputMarkupPlaceholderTag(final boolean outputTag) {\n        if (outputTag != getFlag(org.apache.wicket.Component.FLAG_PLACEHOLDER)) {\n            if (outputTag) {\n                setOutputMarkupId(true);\n                setFlag(org.apache.wicket.Component.FLAG_PLACEHOLDER, true);\n            } else {\n                setFlag(org.apache.wicket.Component.FLAG_PLACEHOLDER, false);\n            }\n        }\n        return this;\n    }\n\n    public final org.apache.wicket.Component setRenderBodyOnly(final boolean renderTag) {\n        this.setFlag(org.apache.wicket.Component.FLAG_RENDER_BODY_ONLY, renderTag);\n        return this;\n    }\n\n    public final <C extends org.apache.wicket.request.component.IRequestablePage> void setResponsePage(final java.lang.Class<C> cls) {\n        getRequestCycle().setResponsePage(cls, null);\n    }\n\n    public final <C extends org.apache.wicket.request.component.IRequestablePage> void setResponsePage(final java.lang.Class<C> cls, org.apache.wicket.request.mapper.parameter.PageParameters parameters) {\n        getRequestCycle().setResponsePage(cls, parameters);\n    }\n\n    public final void setResponsePage(final org.apache.wicket.Page page) {\n        getRequestCycle().setResponsePage(page);\n    }\n\n    public org.apache.wicket.Component setVersioned(boolean versioned) {\n        setFlag(org.apache.wicket.Component.FLAG_VERSIONED, versioned);\n        return this;\n    }\n\n    public final org.apache.wicket.Component setVisible(final boolean visible) {\n        if (visible != getFlag(org.apache.wicket.Component.FLAG_VISIBLE)) {\n            addStateChange();\n            setFlag(org.apache.wicket.Component.FLAG_VISIBLE, visible);\n        }\n        return this;\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return toString(false);\n    }\n\n    public java.lang.String toString(final boolean detailed) {\n        if (detailed) {\n            final org.apache.wicket.Page page = findPage();\n            if (page == null) {\n                return new java.lang.StringBuffer(\"[Component id = \").append(getId()).append(\", page = <No Page>, path = \").append(getPath()).append(\".\").append(org.apache.wicket.util.lang.Classes.simpleName(getClass())).append(\"]\").toString();\n            } else {\n                return new java.lang.StringBuffer(\"[Component id = \").append(getId()).append(\", page = \").append(getPage().getClass().getName()).append(\", path = \").append(getPath()).append(\".\").append(org.apache.wicket.util.lang.Classes.simpleName(getClass())).append(\", isVisible = \").append(determineVisibility()).append(\", isVersioned = \").append(isVersioned()).append(\"]\").toString();\n            }\n        } else {\n            return (\"[Component id = \" + getId()) + \"]\";\n        }\n    }\n\n    public final <C extends org.apache.wicket.Page> java.lang.CharSequence urlFor(final java.lang.Class<C> pageClass, final org.apache.wicket.request.mapper.parameter.PageParameters parameters) {\n        return getRequestCycle().urlFor(pageClass, parameters);\n    }\n\n    public final java.lang.CharSequence urlFor(final org.apache.wicket.behavior.IBehavior behaviour, final org.apache.wicket.RequestListenerInterface listener) {\n        org.apache.wicket.request.handler.PageAndComponentProvider provider = new org.apache.wicket.request.handler.PageAndComponentProvider(getPage(), this);\n        int id = getBehaviorId(behaviour);\n        org.apache.wicket.request.IRequestHandler handler;\n        if (getPage().isPageStateless()) {\n            handler = new org.apache.wicket.request.handler.BookmarkableListenerInterfaceRequestHandler(provider, listener, id);\n        } else {\n            handler = new org.apache.wicket.request.handler.ListenerInterfaceRequestHandler(provider, listener, id);\n        }\n        return getRequestCycle().urlFor(handler);\n    }\n\n    public final java.lang.CharSequence urlFor(final org.apache.wicket.request.IRequestHandler requestHandler) {\n        return getRequestCycle().urlFor(requestHandler);\n    }\n\n    public final java.lang.CharSequence urlFor(final org.apache.wicket.RequestListenerInterface listener) {\n        org.apache.wicket.request.handler.PageAndComponentProvider provider = new org.apache.wicket.request.handler.PageAndComponentProvider(getPage(), this);\n        org.apache.wicket.request.IRequestHandler handler;\n        if (getPage().isPageStateless()) {\n            handler = new org.apache.wicket.request.handler.BookmarkableListenerInterfaceRequestHandler(provider, listener);\n        } else {\n            handler = new org.apache.wicket.request.handler.ListenerInterfaceRequestHandler(provider, listener);\n        }\n        return getRequestCycle().urlFor(handler);\n    }\n\n    public final java.lang.CharSequence urlFor(final org.apache.wicket.request.resource.ResourceReference resourceReference, org.apache.wicket.request.mapper.parameter.PageParameters parameters) {\n        return getRequestCycle().urlFor(resourceReference, parameters);\n    }\n\n    public final <R> R visitParents(final java.lang.Class<?> c, final org.apache.wicket.util.visit.IVisitor<org.apache.wicket.Component, R> visitor) {\n        org.apache.wicket.Component current = getParent();\n        org.apache.wicket.util.visit.Visit<R> visit = new org.apache.wicket.util.visit.Visit<R>();\n        while (current != null) {\n            if (c.isInstance(current)) {\n                visitor.component(current, visit);\n                if (visit.isStopped()) {\n                    return visit.getResult();\n                }\n            }\n            current = current.getParent();\n        } \n        return null;\n    }\n\n    public final void warn(final java.lang.String message) {\n        org.apache.wicket.Session.get().getFeedbackMessages().warn(this, message);\n        org.apache.wicket.Session.get().dirty();\n    }\n\n    private void notifyBehaviorsComponentBeforeRender() {\n        for (org.apache.wicket.behavior.IBehavior behavior : getBehaviors()) {\n            if (isBehaviorAccepted(behavior)) {\n                behavior.beforeRender(this);\n            }\n        }\n    }\n\n    private void notifyBehaviorsComponentRendered() {\n        for (org.apache.wicket.behavior.IBehavior behavior : getBehaviors()) {\n            if (isBehaviorAccepted(behavior)) {\n                behavior.afterRender(this);\n            }\n        }\n    }\n\n    protected final void addStateChange() {\n        checkHierarchyChange(this);\n        final org.apache.wicket.Page page = findPage();\n        if (page != null) {\n            page.componentStateChanging(this);\n        }\n    }\n\n    protected final void checkComponentTag(final org.apache.wicket.markup.ComponentTag tag, final java.lang.String name) {\n        if (!tag.getName().equalsIgnoreCase(name)) {\n            java.lang.String msg = java.lang.String.format(\"Component [%s] (path = [%s]) must be \" + \"applied to a tag of type [%s], not: %s\", getId(), getPath(), name, tag.toUserDebugString());\n            findMarkupStream().throwMarkupException(msg);\n        }\n    }\n\n    protected final void checkComponentTagAttribute(final org.apache.wicket.markup.ComponentTag tag, final java.lang.String key, final java.lang.String value) {\n        if (key != null) {\n            final java.lang.String tagAttributeValue = tag.getAttributes().getString(key);\n            if ((tagAttributeValue == null) || (!value.equalsIgnoreCase(tagAttributeValue))) {\n                java.lang.String msg = java.lang.String.format(\"Component [%s] (path = [%s]) must be applied to a tag \" + \"with [%s] attribute matching [%s], not [%s]\", getId(), getPath(), key, value, tagAttributeValue);\n                findMarkupStream().throwMarkupException(msg);\n            }\n        }\n    }\n\n    protected void checkHierarchyChange(final org.apache.wicket.Component component) {\n        if ((!component.isAuto()) && getFlag(org.apache.wicket.Component.FLAG_RENDERING)) {\n            throw new org.apache.wicket.WicketRuntimeException(\"Cannot modify component hierarchy after render phase has started (page version cant change then anymore)\");\n        }\n    }\n\n    protected void detachModel() {\n        org.apache.wicket.model.IModel<?> model = getModelImpl();\n        if (model != null) {\n            model.detach();\n        }\n        if ((model instanceof org.apache.wicket.model.IWrapModel) && (!getFlag(org.apache.wicket.Component.FLAG_INHERITABLE_MODEL))) {\n            ((org.apache.wicket.model.IWrapModel<?>) (model)).getWrappedModel().detach();\n        }\n    }\n\n    protected final java.lang.String exceptionMessage(final java.lang.String message) {\n        return (message + \":\\n\") + toString();\n    }\n\n    protected final org.apache.wicket.markup.MarkupStream findMarkupStream() {\n        return new org.apache.wicket.markup.MarkupStream(getMarkup());\n    }\n\n    protected final org.apache.wicket.Page findPage() {\n        return ((org.apache.wicket.Page) (this instanceof org.apache.wicket.Page ? this : findParent(org.apache.wicket.Page.class)));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <M extends org.apache.wicket.behavior.IBehavior> java.util.List<M> getBehaviors(java.lang.Class<M> type) {\n        return new org.apache.wicket.Behaviors(this).getBehaviors(type);\n    }\n\n    protected final boolean getFlag(final int flag) {\n        return (flags & flag) != 0;\n    }\n\n    protected final boolean getFlag(final short flag) {\n        return getFlag(((int) (flag)));\n    }\n\n    protected final org.apache.wicket.model.IModel<?> getInnermostModel(final org.apache.wicket.model.IModel<?> model) {\n        org.apache.wicket.model.IModel<?> nested = model;\n        while ((nested != null) && (nested instanceof org.apache.wicket.model.IWrapModel)) {\n            final org.apache.wicket.model.IModel<?> next = ((org.apache.wicket.model.IWrapModel<?>) (nested)).getWrappedModel();\n            if (nested == next) {\n                throw new org.apache.wicket.WicketRuntimeException((\"Model for \" + nested) + \" is self-referential\");\n            }\n            nested = next;\n        } \n        return nested;\n    }\n\n    public org.apache.wicket.model.IModelComparator getModelComparator() {\n        return org.apache.wicket.Component.defaultModelComparator;\n    }\n\n    protected boolean getStatelessHint() {\n        return true;\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    protected org.apache.wicket.model.IModel<?> initModel() {\n        org.apache.wicket.model.IModel<?> foundModel = null;\n        for (org.apache.wicket.Component current = getParent(); current != null; current = current.getParent()) {\n            org.apache.wicket.model.IModel<?> model = current.getModelImpl();\n            if ((model instanceof org.apache.wicket.model.IWrapModel) && (!(model instanceof org.apache.wicket.model.IComponentInheritedModel))) {\n                model = ((org.apache.wicket.model.IWrapModel<?>) (model)).getWrappedModel();\n            }\n            if (model instanceof org.apache.wicket.model.IComponentInheritedModel) {\n                foundModel = ((org.apache.wicket.model.IComponentInheritedModel<?>) (model)).wrapOnInheritance(this);\n                setFlag(org.apache.wicket.Component.FLAG_INHERITABLE_MODEL, true);\n                break;\n            }\n        }\n        return foundModel;\n    }\n\n    protected void internalOnModelChanged() {\n    }\n\n    protected boolean isBehaviorAccepted(final org.apache.wicket.behavior.IBehavior behavior) {\n        if ((behavior instanceof org.apache.wicket.AttributeModifier) && (getFlag(org.apache.wicket.Component.FLAG_IGNORE_ATTRIBUTE_MODIFIER) != false)) {\n            return false;\n        }\n        return behavior.isEnabled(this);\n    }\n\n    protected final boolean isIgnoreAttributeModifier() {\n        return this.getFlag(org.apache.wicket.Component.FLAG_IGNORE_ATTRIBUTE_MODIFIER);\n    }\n\n    protected org.apache.wicket.markup.MarkupStream locateMarkupStream() {\n        return new org.apache.wicket.markup.MarkupStream(getMarkup());\n    }\n\n    protected void onAfterRender() {\n        setFlag(org.apache.wicket.Component.FLAG_AFTER_RENDERING, false);\n    }\n\n    protected void onBeforeRender() {\n        setFlag(org.apache.wicket.Component.FLAG_PREPARED_FOR_RENDER, true);\n        onBeforeRenderChildren();\n        setFlag(org.apache.wicket.Component.FLAG_BEFORE_RENDER_SUPER_CALL_VERIFIED, true);\n    }\n\n    @java.lang.Deprecated\n    protected boolean callOnBeforeRenderIfNotVisible() {\n        return false;\n    }\n\n    protected void onComponentTag(final org.apache.wicket.markup.ComponentTag tag) {\n        if (getFlag(org.apache.wicket.Component.FLAG_OUTPUT_MARKUP_ID)) {\n            tag.put(org.apache.wicket.Component.MARKUP_ID_ATTR_NAME, getMarkupId());\n        }\n        if (getApplication().getDebugSettings().isOutputComponentPath()) {\n            java.lang.String path = getPageRelativePath();\n            path = path.replace(\"_\", \"__\");\n            path = path.replace(\":\", \"_\");\n            tag.put(\"wicketpath\", path);\n        }\n    }\n\n    protected void onComponentTagBody(final org.apache.wicket.markup.MarkupStream markupStream, final org.apache.wicket.markup.ComponentTag openTag) {\n    }\n\n    protected void onDetach() {\n        setFlag(org.apache.wicket.Component.FLAG_DETACHING, false);\n    }\n\n    protected void onRemove() {\n        setFlag(org.apache.wicket.Component.FLAG_REMOVING_FROM_HIERARCHY, false);\n    }\n\n    protected void onModelChanged() {\n    }\n\n    protected void onModelChanging() {\n    }\n\n    protected abstract void onRender();\n\n    protected final void renderComponentTag(org.apache.wicket.markup.ComponentTag tag) {\n        if (needToRenderTag(tag)) {\n            java.util.List<? extends org.apache.wicket.behavior.IBehavior> behaviors = getBehaviors();\n            if ((((behaviors != null) && (!behaviors.isEmpty())) && (!tag.isClose())) && (isIgnoreAttributeModifier() == false)) {\n                tag = tag.mutable();\n                for (org.apache.wicket.behavior.IBehavior behavior : behaviors) {\n                    if (isBehaviorAccepted(behavior)) {\n                        behavior.onComponentTag(this, tag);\n                    }\n                }\n            }\n            if (tag.hasBehaviors()) {\n                java.util.Iterator<? extends org.apache.wicket.behavior.IBehavior> tagBehaviors = tag.getBehaviors();\n                while (tagBehaviors.hasNext()) {\n                    final org.apache.wicket.behavior.IBehavior behavior = tagBehaviors.next();\n                    if (behavior.isEnabled(this)) {\n                        behavior.onComponentTag(this, tag);\n                    }\n                    behavior.detach(this);\n                } \n            }\n            tag.writeOutput(getResponse(), !needToRenderTag(null), getMarkup().getMarkupResourceStream().getWicketNamespace());\n        }\n    }\n\n    protected final void replaceComponentTagBody(final org.apache.wicket.markup.MarkupStream markupStream, final org.apache.wicket.markup.ComponentTag tag, final java.lang.CharSequence body) {\n        org.apache.wicket.markup.ComponentTag markupOpenTag = null;\n        if (tag.isOpen()) {\n            markupStream.setCurrentIndex(markupStream.getCurrentIndex() - 1);\n            markupOpenTag = markupStream.getTag();\n            markupStream.next();\n            if (markupOpenTag.isOpen()) {\n                markupStream.skipRawMarkup();\n            }\n        }\n        if (body != null) {\n            getResponse().write(body);\n        }\n        if (tag.isOpen()) {\n            if (((markupOpenTag != null) && markupOpenTag.isOpen()) && (!markupStream.atCloseTag())) {\n                markupStream.throwMarkupException((((\"Expected close tag for '\" + markupOpenTag) + \"' Possible attempt to embed component(s) '\") + markupStream.get()) + \"' in the body of this component which discards its body\");\n            }\n        }\n    }\n\n    protected final void setAuto(final boolean auto) {\n        setFlag(org.apache.wicket.Component.FLAG_AUTO, auto);\n    }\n\n    protected final void setFlag(final int flag, final boolean set) {\n        if (set) {\n            flags |= flag;\n        } else {\n            flags &= ~flag;\n        }\n    }\n\n    protected final void setFlag(final short flag, final boolean set) {\n        setFlag(((int) (flag)), set);\n    }\n\n    protected final org.apache.wicket.Component setIgnoreAttributeModifier(final boolean ignore) {\n        this.setFlag(org.apache.wicket.Component.FLAG_IGNORE_ATTRIBUTE_MODIFIER, ignore);\n        return this;\n    }\n\n    protected void setMarkupStream(final org.apache.wicket.markup.MarkupStream markupStream) {\n    }\n\n    protected final <V> org.apache.wicket.model.IModel<V> wrap(final org.apache.wicket.model.IModel<V> model) {\n        if (model instanceof org.apache.wicket.model.IComponentAssignedModel) {\n            return ((org.apache.wicket.model.IComponentAssignedModel<V>) (model)).wrapOnAssignment(this);\n        }\n        return model;\n    }\n\n    void detachChildren() {\n    }\n\n    void removeChildren() {\n    }\n\n    public org.apache.wicket.Component get(final java.lang.String path) {\n        if (path.equals(\"\")) {\n            return this;\n        }\n        throw new java.lang.IllegalArgumentException(exceptionMessage((\"Component is not a container and so does \" + \"not contain the path \") + path));\n    }\n\n    final boolean hasMarkupIdMetaData() {\n        return getMarkupId() != null;\n    }\n\n    void internalMarkRendering(boolean setRenderingFlag) {\n        if (setRenderingFlag) {\n            setFlag(org.apache.wicket.Component.FLAG_PREPARED_FOR_RENDER, false);\n            setFlag(org.apache.wicket.Component.FLAG_RENDERING, true);\n        }\n    }\n\n    public final boolean isAuto() {\n        for (org.apache.wicket.Component current = this; current != null; current = current.getParent()) {\n            if (current.getFlag(org.apache.wicket.Component.FLAG_AUTO)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    boolean isPreparedForRender() {\n        return getFlag(org.apache.wicket.Component.FLAG_PREPARED_FOR_RENDER);\n    }\n\n    void onAfterRenderChildren() {\n    }\n\n    void onBeforeRenderChildren() {\n    }\n\n    final void renderClosingComponentTag(final org.apache.wicket.markup.MarkupStream markupStream, final org.apache.wicket.markup.ComponentTag openTag, final boolean renderBodyOnly) {\n        if (openTag.isOpen()) {\n            if (markupStream.atCloseTag() && markupStream.getTag().closes(openTag)) {\n                if (renderBodyOnly == false) {\n                    org.apache.wicket.markup.ComponentTag closeTag = markupStream.getTag();\n                    if (openTag.getNameChanged()) {\n                        closeTag = closeTag.mutable();\n                        closeTag.setName(openTag.getName());\n                        closeTag.setNamespace(openTag.getNamespace());\n                    }\n                    renderComponentTag(closeTag);\n                }\n            } else if (openTag.requiresCloseTag()) {\n                markupStream.throwMarkupException(\"Expected close tag for \" + openTag);\n            }\n        }\n    }\n\n    final void setId(final java.lang.String id) {\n        if (!(this instanceof org.apache.wicket.Page)) {\n            if (org.apache.wicket.util.string.Strings.isEmpty(id)) {\n                throw new org.apache.wicket.WicketRuntimeException(\"Null or empty component ID's are not allowed.\");\n            }\n        }\n        if ((id != null) && (id.indexOf(':') != (-1))) {\n            throw new org.apache.wicket.WicketRuntimeException(\"The component ID must not contain ':' chars.\");\n        }\n        this.id = id;\n    }\n\n    final void setParent(final org.apache.wicket.MarkupContainer parent) {\n        if ((this.parent != null) && org.apache.wicket.Component.log.isDebugEnabled()) {\n            org.apache.wicket.Component.log.debug(((\"Replacing parent \" + this.parent) + \" with \") + parent);\n        }\n        this.parent = parent;\n    }\n\n    final void setRenderAllowed(boolean renderAllowed) {\n        setFlag(org.apache.wicket.Component.FLAG_IS_RENDER_ALLOWED, renderAllowed);\n    }\n\n    void setRenderAllowed() {\n        setRenderAllowed(isActionAuthorized(org.apache.wicket.Component.RENDER));\n    }\n\n    public final org.apache.wicket.Component setVisibilityAllowed(boolean allowed) {\n        setFlag(org.apache.wicket.Component.FLAG_VISIBILITY_ALLOWED, allowed);\n        return this;\n    }\n\n    public final boolean isVisibilityAllowed() {\n        return getFlag(org.apache.wicket.Component.FLAG_VISIBILITY_ALLOWED);\n    }\n\n    public final boolean determineVisibility() {\n        return (isVisible() && isRenderAllowed()) && isVisibilityAllowed();\n    }\n\n    public final boolean isEnabledInHierarchy() {\n        java.lang.Boolean state = getMetaData(org.apache.wicket.Component.ENABLED_IN_HIERARCHY_CACHE_KEY);\n        if (state == null) {\n            org.apache.wicket.Component parent = getParent();\n            if ((parent != null) && (!parent.isEnabledInHierarchy())) {\n                state = false;\n            } else {\n                state = isEnabled() && isEnableAllowed();\n            }\n            setMetaData(org.apache.wicket.Component.ENABLED_IN_HIERARCHY_CACHE_KEY, state);\n        }\n        return state;\n    }\n\n    public final boolean canCallListenerInterface() {\n        return isEnabledInHierarchy() && isVisibleInHierarchy();\n    }\n\n    public void renderHead(org.apache.wicket.markup.html.IHeaderResponse response) {\n    }\n\n    public void onEvent(org.apache.wicket.event.IEvent<?> event) {\n    }\n\n    public final void send(org.apache.wicket.event.IEventSink sink, org.apache.wicket.event.Broadcast type, java.lang.Object payload) {\n        new org.apache.wicket.ComponentEventSender(this).send(sink, type, payload);\n    }\n\n    public org.apache.wicket.Component remove(final org.apache.wicket.behavior.IBehavior behavior) {\n        new org.apache.wicket.Behaviors(this).remove(behavior);\n        return this;\n    }\n\n    public final org.apache.wicket.behavior.IBehavior getBehaviorById(int id) {\n        return new org.apache.wicket.Behaviors(this).getBehaviorById(id);\n    }\n\n    public final int getBehaviorId(org.apache.wicket.behavior.IBehavior behavior) {\n        return new org.apache.wicket.Behaviors(this).getBehaviorId(behavior);\n    }\n\n    public org.apache.wicket.Component add(final org.apache.wicket.behavior.IBehavior... behaviors) {\n        new org.apache.wicket.Behaviors(this).add(behaviors);\n        return this;\n    }\n\n    public final java.util.List<? extends org.apache.wicket.behavior.IBehavior> getBehaviors() {\n        return getBehaviors(org.apache.wicket.behavior.IBehavior.class);\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Field",
            "operator": "UPD",
            "src": "private static final org.apache.wicket.MetaDataKey<java.lang.Boolean> VISIBLE_IN_HIERARCHY_CACHE_KEY = new org.apache.wicket.MetaDataKey<java.lang.Boolean>() {\n    private static final long serialVersionUID = 1L;\n};",
            "src_parent": "public abstract class Component implements org.apache.wicket.IClusterable , org.apache.wicket.IConverterLocator , org.apache.wicket.event.IEventSink , org.apache.wicket.event.IEventSource , org.apache.wicket.markup.html.IHeaderContributor , org.apache.wicket.request.component.IRequestableComponent , org.apache.wicket.util.IHierarchical<org.apache.wicket.Component> {\n    protected static final int FLAG_CONFIGURED = 0x800000;\n\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.Component.class);\n\n    private static final long serialVersionUID = 1L;\n\n    public static final org.apache.wicket.authorization.Action ENABLE = new org.apache.wicket.authorization.Action(org.apache.wicket.authorization.Action.ENABLE);\n\n    public static final char PATH_SEPARATOR = ':';\n\n    public static final org.apache.wicket.authorization.Action RENDER = new org.apache.wicket.authorization.Action(org.apache.wicket.authorization.Action.RENDER);\n\n    private static final org.apache.wicket.MetaDataKey<java.lang.String> MARKUP_ID_KEY = new org.apache.wicket.MetaDataKey<java.lang.String>() {\n        private static final long serialVersionUID = 1L;\n    };\n\n    private static final org.apache.wicket.model.IModelComparator defaultModelComparator = new org.apache.wicket.model.IModelComparator() {\n        private static final long serialVersionUID = 1L;\n\n        public boolean compare(org.apache.wicket.Component component, java.lang.Object b) {\n            final java.lang.Object a = component.getDefaultModelObject();\n            if ((a == null) && (b == null)) {\n                return true;\n            }\n            if ((a == null) || (b == null)) {\n                return false;\n            }\n            return a.equals(b);\n        }\n    };\n\n    private static final int FLAG_UNUSED0 = 0x20000000;\n\n    private static final int FLAG_AUTO = 0x1;\n\n    private static final int FLAG_ESCAPE_MODEL_STRINGS = 0x2;\n\n    static final int FLAG_INHERITABLE_MODEL = 0x4;\n\n    private static final int FLAG_VERSIONED = 0x8;\n\n    private static final int FLAG_VISIBLE = 0x10;\n\n    private static final int FLAG_RENDER_BODY_ONLY = 0x20;\n\n    private static final int FLAG_IGNORE_ATTRIBUTE_MODIFIER = 0x40;\n\n    private static final int FLAG_ENABLED = 0x80;\n\n    protected static final int FLAG_RESERVED1 = 0x100;\n\n    protected static final int FLAG_RESERVED2 = 0x200;\n\n    protected static final int FLAG_RESERVED3 = 0x400;\n\n    protected static final int FLAG_RESERVED4 = 0x800;\n\n    private static final int FLAG_HAS_BEEN_RENDERED = 0x1000;\n\n    private static final int FLAG_IS_RENDER_ALLOWED = 0x2000;\n\n    private static final int FLAG_OUTPUT_MARKUP_ID = 0x4000;\n\n    private static final int FLAG_PLACEHOLDER = 0x8000;\n\n    protected static final int FLAG_RESERVED5 = 0x10000;\n\n    protected static final int FLAG_INITIALIZED = 0x20000;\n\n    private static final int FLAG_NOTUSED7 = 0x40000;\n\n    protected static final int FLAG_RESERVED8 = 0x80000;\n\n    private static final int FLAG_MODEL_SET = 0x100000;\n\n    protected static final int FLAG_REMOVING_FROM_HIERARCHY = 0x200000;\n\n    private static final int FLAG_BEFORE_RENDER_SUPER_CALL_VERIFIED = 0x1000000;\n\n    private static final int FLAG_INITIALIZE_SUPER_CALL_VERIFIED = 0x10000000;\n\n    private static final int FLAG_RENDERING = 0x2000000;\n\n    private static final int FLAG_PREPARED_FOR_RENDER = 0x4000000;\n\n    private static final int FLAG_AFTER_RENDERING = 0x8000000;\n\n    private static final int FLAG_MARKUP_ATTACHED = 0x10000000;\n\n    private static final int FLAG_VISIBILITY_ALLOWED = 0x40000000;\n\n    private static final int FLAG_DETACHING = 0x80000000;\n\n    private static final java.lang.String MARKUP_ID_ATTR_NAME = \"id\";\n\n    static final org.apache.wicket.MetaDataKey<java.lang.String> ADDED_AT_KEY = new org.apache.wicket.MetaDataKey<java.lang.String>() {\n        private static final long serialVersionUID = 1L;\n    };\n\n    static final org.apache.wicket.MetaDataKey<java.lang.String> CONSTRUCTED_AT_KEY = new org.apache.wicket.MetaDataKey<java.lang.String>() {\n        private static final long serialVersionUID = 1L;\n    };\n\n    private static final org.apache.wicket.MetaDataKey<java.lang.Boolean> VISIBLE_IN_HIERARCHY_CACHE_KEY = new org.apache.wicket.MetaDataKey<java.lang.Boolean>() {\n        private static final long serialVersionUID = 1L;\n    };\n\n    private static final org.apache.wicket.MetaDataKey<java.lang.Boolean> ENABLED_IN_HIERARCHY_CACHE_KEY = new org.apache.wicket.MetaDataKey<java.lang.Boolean>() {\n        private static final long serialVersionUID = 1L;\n    };\n\n    private int flags = ((((org.apache.wicket.Component.FLAG_VISIBLE | org.apache.wicket.Component.FLAG_ESCAPE_MODEL_STRINGS) | org.apache.wicket.Component.FLAG_VERSIONED) | org.apache.wicket.Component.FLAG_ENABLED) | org.apache.wicket.Component.FLAG_IS_RENDER_ALLOWED) | org.apache.wicket.Component.FLAG_VISIBILITY_ALLOWED;\n\n    private java.lang.String id;\n\n    private org.apache.wicket.MarkupContainer parent;\n\n    int generatedMarkupId = -1;\n\n    private transient org.apache.wicket.markup.IMarkupFragment markup;\n\n    private transient java.lang.String markupIdFromMarkup;\n\n    java.lang.Object data = null;\n\n    final int data_start() {\n        return getFlag(org.apache.wicket.Component.FLAG_MODEL_SET) ? 1 : 0;\n    }\n\n    final int data_length() {\n        if (data == null) {\n            return 0;\n        } else if ((data instanceof java.lang.Object[]) && (!(data instanceof org.apache.wicket.MetaDataEntry<?>[]))) {\n            return ((java.lang.Object[]) (data)).length;\n        } else {\n            return 1;\n        }\n    }\n\n    final java.lang.Object data_get(int index) {\n        if (data == null) {\n            return null;\n        } else if ((data instanceof java.lang.Object[]) && (!(data instanceof org.apache.wicket.MetaDataEntry<?>[]))) {\n            java.lang.Object[] array = ((java.lang.Object[]) (data));\n            return index < array.length ? array[index] : null;\n        } else if (index == 0) {\n            return data;\n        } else {\n            return null;\n        }\n    }\n\n    final java.lang.Object data_set(int index, java.lang.Object object) {\n        if (index > (data_length() - 1)) {\n            throw new java.lang.IndexOutOfBoundsException();\n        } else if ((index == 0) && (!((data instanceof java.lang.Object[]) && (!(data instanceof org.apache.wicket.MetaDataEntry<?>[]))))) {\n            java.lang.Object old = data;\n            data = object;\n            return old;\n        } else {\n            java.lang.Object[] array = ((java.lang.Object[]) (data));\n            java.lang.Object old = array[index];\n            array[index] = object;\n            return old;\n        }\n    }\n\n    final void data_add(java.lang.Object object) {\n        data_insert(-1, object);\n    }\n\n    final void data_insert(int position, java.lang.Object object) {\n        int currentLength = data_length();\n        if (position == (-1)) {\n            position = currentLength;\n        }\n        if (position > currentLength) {\n            throw new java.lang.IndexOutOfBoundsException();\n        }\n        if (currentLength == 0) {\n            data = object;\n        } else if (currentLength == 1) {\n            java.lang.Object[] array = new java.lang.Object[2];\n            if (position == 0) {\n                array[0] = object;\n                array[1] = data;\n            } else {\n                array[0] = data;\n                array[1] = object;\n            }\n            data = array;\n        } else {\n            java.lang.Object[] array = new java.lang.Object[currentLength + 1];\n            java.lang.Object[] current = ((java.lang.Object[]) (data));\n            int before = position;\n            int after = currentLength - position;\n            if (before > 0) {\n                java.lang.System.arraycopy(current, 0, array, 0, before);\n            }\n            array[position] = object;\n            if (after > 0) {\n                java.lang.System.arraycopy(current, position, array, position + 1, after);\n            }\n            data = array;\n        }\n    }\n\n    java.lang.Object data_remove(int position) {\n        int currentLength = data_length();\n        if (position > (currentLength - 1)) {\n            throw new java.lang.IndexOutOfBoundsException();\n        } else if (currentLength == 1) {\n            java.lang.Object old = data;\n            data = null;\n            return old;\n        } else if (currentLength == 2) {\n            java.lang.Object[] current = ((java.lang.Object[]) (data));\n            if (position == 0) {\n                data = current[1];\n                return current[0];\n            } else {\n                data = current[0];\n                return current[1];\n            }\n        } else {\n            java.lang.Object[] current = ((java.lang.Object[]) (data));\n            data = new java.lang.Object[currentLength - 1];\n            if (position > 0) {\n                java.lang.System.arraycopy(current, 0, data, 0, position);\n            }\n            if (position != (currentLength - 1)) {\n                final int left = (currentLength - position) - 1;\n                java.lang.System.arraycopy(current, position + 1, data, position, left);\n            }\n            return current[position];\n        }\n    }\n\n    public Component(final java.lang.String id) {\n        this(id, null);\n    }\n\n    public Component(final java.lang.String id, final org.apache.wicket.model.IModel<?> model) {\n        setId(id);\n        getApplication().getComponentInstantiationListeners().onInstantiation(this);\n        final org.apache.wicket.settings.IDebugSettings debugSettings = org.apache.wicket.Application.get().getDebugSettings();\n        if (debugSettings.isLinePreciseReportingOnNewComponentEnabled()) {\n            setMetaData(org.apache.wicket.Component.CONSTRUCTED_AT_KEY, org.apache.wicket.util.string.ComponentStrings.toString(this, new org.apache.wicket.markup.MarkupException(\"constructed\")));\n        }\n        if (model != null) {\n            setModelImpl(wrap(model));\n        }\n    }\n\n    public org.apache.wicket.markup.IMarkupFragment getMarkup() {\n        if (markup != null) {\n            return markup;\n        }\n        if (parent == null) {\n            throw new org.apache.wicket.markup.MarkupException(\"Can not determine Markup. Component is not yet connected to a parent. \" + toString());\n        }\n        markup = parent.getMarkup(this);\n        return markup;\n    }\n\n    final boolean internalOnMarkupAttached() {\n        boolean rtn = getFlag(org.apache.wicket.Component.FLAG_MARKUP_ATTACHED);\n        if (rtn == false) {\n            setFlag(org.apache.wicket.Component.FLAG_MARKUP_ATTACHED, true);\n            onMarkupAttached();\n        }\n        return rtn;\n    }\n\n    protected void onMarkupAttached() {\n        if (org.apache.wicket.Component.log.isDebugEnabled()) {\n            org.apache.wicket.Component.log.debug(\"Markup available \" + toString());\n        }\n        markupIdFromMarkup = getMarkupIdFromMarkup();\n    }\n\n    private boolean moveComponentToItsRealParent() {\n        org.apache.wicket.MarkupContainer parent = getParent();\n        org.apache.wicket.markup.IMarkupFragment markup = getMarkup();\n        if ((parent != null) && (markup != null)) {\n            org.apache.wicket.markup.IMarkupFragment parentMarkup = parent.getMarkup(null);\n            if ((parentMarkup != null) && (markup != parentMarkup)) {\n                if (markup.getMarkupResourceStream() == parentMarkup.getMarkupResourceStream()) {\n                    org.apache.wicket.markup.MarkupStream stream = new org.apache.wicket.markup.MarkupStream(markup);\n                    stream.skipUntil(org.apache.wicket.markup.ComponentTag.class);\n                    org.apache.wicket.markup.ComponentTag openTag = stream.getTag();\n                    if (openTag != null) {\n                        org.apache.wicket.markup.MarkupStream parentStream = new org.apache.wicket.markup.MarkupStream(parentMarkup);\n                        if (parentStream.skipUntil(org.apache.wicket.markup.ComponentTag.class)) {\n                            parentStream.next();\n                        }\n                        java.util.Stack<org.apache.wicket.markup.ComponentTag> stack = new java.util.Stack<org.apache.wicket.markup.ComponentTag>();\n                        while (parentStream.skipUntil(org.apache.wicket.markup.ComponentTag.class)) {\n                            org.apache.wicket.markup.ComponentTag tag = parentStream.getTag();\n                            if (openTag == tag) {\n                                if (stack.isEmpty() == false) {\n                                    final org.apache.wicket.markup.ComponentTag lastTag = stack.pop();\n                                    parent.visitChildren(org.apache.wicket.MarkupContainer.class, new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.MarkupContainer, java.lang.Void>() {\n                                        public void component(final org.apache.wicket.MarkupContainer component, final org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n                                            org.apache.wicket.markup.IMarkupFragment m = component.getMarkup();\n                                            org.apache.wicket.markup.MarkupStream ms = new org.apache.wicket.markup.MarkupStream(m);\n                                            ms.skipUntil(org.apache.wicket.markup.ComponentTag.class);\n                                            if (ms.hasMore() && (lastTag == ms.getTag())) {\n                                                component.add(Component.this);\n                                                visit.stop();\n                                                return;\n                                            }\n                                        }\n                                    });\n                                }\n                                return false;\n                            }\n                            if (tag.isOpen()) {\n                                if (tag.hasNoCloseTag() == false) {\n                                    stack.push(tag);\n                                }\n                            } else if (tag.isOpenClose()) {\n                            } else if (tag.isClose()) {\n                                if (stack.isEmpty() == false) {\n                                    stack.pop();\n                                }\n                            }\n                            parentStream.next();\n                        } \n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public final java.lang.String getMarkupIdFromMarkup() {\n        org.apache.wicket.markup.ComponentTag tag = getMarkupTag();\n        if (tag != null) {\n            java.lang.String id = tag.getAttribute(\"id\");\n            if (org.apache.wicket.util.string.Strings.isEmpty(id) == false) {\n                return id.trim();\n            }\n        }\n        return null;\n    }\n\n    public final void setMarkup(final org.apache.wicket.markup.IMarkupFragment markup) {\n        this.markup = markup;\n    }\n\n    protected void onConfigure() {\n    }\n\n    protected void onInitialize() {\n        setFlag(org.apache.wicket.Component.FLAG_INITIALIZE_SUPER_CALL_VERIFIED, true);\n    }\n\n    final boolean isInitialized() {\n        return getFlag(org.apache.wicket.Component.FLAG_INITIALIZED);\n    }\n\n    void initialize() {\n        fireInitialize();\n    }\n\n    final void fireInitialize() {\n        if (!getFlag(org.apache.wicket.Component.FLAG_INITIALIZED)) {\n            setFlag(org.apache.wicket.Component.FLAG_INITIALIZED, true);\n            setFlag(org.apache.wicket.Component.FLAG_INITIALIZE_SUPER_CALL_VERIFIED, false);\n            onInitialize();\n            if (!getFlag(org.apache.wicket.Component.FLAG_INITIALIZE_SUPER_CALL_VERIFIED)) {\n                throw new java.lang.IllegalStateException(((org.apache.wicket.Component.class.getName() + \" has not been properly initialized. Something in the hierarchy of \") + getClass().getName()) + \" has not called super.onInitialize() in the override of onInitialize() method\");\n            }\n            setFlag(org.apache.wicket.Component.FLAG_INITIALIZE_SUPER_CALL_VERIFIED, false);\n            getApplication().getComponentInitializationListeners().onInitialize(this);\n        }\n    }\n\n    public final void afterRender() {\n        try {\n            setFlag(org.apache.wicket.Component.FLAG_AFTER_RENDERING, true);\n            onAfterRender();\n            getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);\n            if (getFlag(org.apache.wicket.Component.FLAG_AFTER_RENDERING)) {\n                throw new java.lang.IllegalStateException(((org.apache.wicket.Component.class.getName() + \" has not been properly detached. Something in the hierarchy of \") + getClass().getName()) + \" has not called super.onAfterRender() in the override of onAfterRender() method\");\n            }\n            onAfterRenderChildren();\n        } finally {\n            setFlag(org.apache.wicket.Component.FLAG_RENDERING, false);\n        }\n    }\n\n    private final void internalBeforeRender() {\n        configure();\n        if (((determineVisibility() || callOnBeforeRenderIfNotVisible()) && (!getFlag(org.apache.wicket.Component.FLAG_RENDERING))) && (!getFlag(org.apache.wicket.Component.FLAG_PREPARED_FOR_RENDER))) {\n            setFlag(org.apache.wicket.Component.FLAG_BEFORE_RENDER_SUPER_CALL_VERIFIED, false);\n            getApplication().getComponentPreOnBeforeRenderListeners().onBeforeRender(this);\n            clearEnabledInHierarchyCache();\n            onBeforeRender();\n            getApplication().getComponentPostOnBeforeRenderListeners().onBeforeRender(this);\n            if (!getFlag(org.apache.wicket.Component.FLAG_BEFORE_RENDER_SUPER_CALL_VERIFIED)) {\n                throw new java.lang.IllegalStateException(((org.apache.wicket.Component.class.getName() + \" has not been properly rendered. Something in the hierarchy of \") + getClass().getName()) + \" has not called super.onBeforeRender() in the override of onBeforeRender() method\");\n            }\n        }\n    }\n\n    private static final org.apache.wicket.MetaDataKey<java.util.List<org.apache.wicket.Component>> FEEDBACK_LIST = new org.apache.wicket.MetaDataKey<java.util.List<org.apache.wicket.Component>>() {\n        private static final long serialVersionUID = 1L;\n    };\n\n    public final void beforeRender() {\n        if (!(this instanceof org.apache.wicket.feedback.IFeedback)) {\n            internalBeforeRender();\n        } else {\n            java.util.List<org.apache.wicket.Component> feedbacks = getRequestCycle().getMetaData(org.apache.wicket.Component.FEEDBACK_LIST);\n            if (feedbacks == null) {\n                feedbacks = new java.util.ArrayList<org.apache.wicket.Component>();\n                getRequestCycle().setMetaData(org.apache.wicket.Component.FEEDBACK_LIST, feedbacks);\n            }\n            if (this instanceof org.apache.wicket.MarkupContainer) {\n                ((org.apache.wicket.MarkupContainer) (this)).visitChildren(org.apache.wicket.feedback.IFeedback.class, new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.Component, java.lang.Void>() {\n                    public void component(org.apache.wicket.Component component, org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n                        component.beforeRender();\n                    }\n                });\n            }\n            if (!feedbacks.contains(this)) {\n                feedbacks.add(this);\n            }\n        }\n    }\n\n    public final void configure() {\n        if (!getFlag(org.apache.wicket.Component.FLAG_CONFIGURED)) {\n            onConfigure();\n            setFlag(org.apache.wicket.Component.FLAG_CONFIGURED, true);\n        }\n    }\n\n    public final boolean continueToOriginalDestination() {\n        return org.apache.wicket.RestartResponseAtInterceptPageException.continueToOriginalDestination();\n    }\n\n    public final void debug(final java.lang.String message) {\n        org.apache.wicket.Session.get().getFeedbackMessages().debug(this, message);\n        org.apache.wicket.Session.get().dirty();\n    }\n\n    final void internalOnRemove() {\n        setFlag(org.apache.wicket.Component.FLAG_REMOVING_FROM_HIERARCHY, true);\n        onRemove();\n        if (getFlag(org.apache.wicket.Component.FLAG_REMOVING_FROM_HIERARCHY)) {\n            throw new java.lang.IllegalStateException(((org.apache.wicket.Component.class.getName() + \" has not been properly removed from hierachy. Something in the hierarchy of \") + getClass().getName()) + \" has not called super.onRemovalFromHierarchy() in the override of onRemovalFromHierarchy() method\");\n        }\n        removeChildren();\n    }\n\n    public final void detach() {\n        setFlag(org.apache.wicket.Component.FLAG_DETACHING, true);\n        onDetach();\n        if (getFlag(org.apache.wicket.Component.FLAG_DETACHING)) {\n            throw new java.lang.IllegalStateException(((org.apache.wicket.Component.class.getName() + \" has not been properly detached. Something in the hierarchy of \") + getClass().getName()) + \" has not called super.onDetach() in the override of onDetach() method\");\n        }\n        setFlag(org.apache.wicket.Component.FLAG_CONFIGURED, false);\n        detachModels();\n        new org.apache.wicket.Behaviors(this).detach();\n        detachChildren();\n        if (getFlag(org.apache.wicket.Component.FLAG_INHERITABLE_MODEL)) {\n            setModelImpl(null);\n            setFlag(org.apache.wicket.Component.FLAG_INHERITABLE_MODEL, false);\n        }\n        clearEnabledInHierarchyCache();\n        org.apache.wicket.IDetachListener detachListener = getApplication().getFrameworkSettings().getDetachListener();\n        if (detachListener != null) {\n            detachListener.onDetach(this);\n        }\n    }\n\n    public void detachModels() {\n        detachModel();\n    }\n\n    public final void error(final java.io.Serializable message) {\n        org.apache.wicket.Session.get().getFeedbackMessages().error(this, message);\n        org.apache.wicket.Session.get().dirty();\n    }\n\n    public final void fatal(final java.lang.String message) {\n        org.apache.wicket.Session.get().getFeedbackMessages().fatal(this, message);\n        org.apache.wicket.Session.get().dirty();\n    }\n\n    public final <Z> Z findParent(final java.lang.Class<Z> c) {\n        org.apache.wicket.MarkupContainer current = parent;\n        while (current != null) {\n            if (c.isInstance(current)) {\n                return c.cast(current);\n            }\n            current = current.getParent();\n        } \n        return null;\n    }\n\n    public final org.apache.wicket.MarkupContainer findParentWithAssociatedMarkup() {\n        org.apache.wicket.MarkupContainer container = parent;\n        while (container != null) {\n            if (container.hasAssociatedMarkup()) {\n                return container;\n            }\n            container = container.getParent();\n        } \n        throw new org.apache.wicket.WicketRuntimeException(\"Unable to find parent with associated markup\");\n    }\n\n    public final org.apache.wicket.Application getApplication() {\n        return org.apache.wicket.Application.get();\n    }\n\n    public final java.lang.String getClassRelativePath() {\n        return (getClass().getName() + org.apache.wicket.Component.PATH_SEPARATOR) + getPageRelativePath();\n    }\n\n    public <C> org.apache.wicket.util.convert.IConverter<C> getConverter(java.lang.Class<C> type) {\n        return getApplication().getConverterLocator().getConverter(type);\n    }\n\n    public final boolean getEscapeModelStrings() {\n        return getFlag(org.apache.wicket.Component.FLAG_ESCAPE_MODEL_STRINGS);\n    }\n\n    public final org.apache.wicket.feedback.FeedbackMessage getFeedbackMessage() {\n        return org.apache.wicket.Session.get().getFeedbackMessages().messageForComponent(this);\n    }\n\n    public java.lang.String getId() {\n        return id;\n    }\n\n    public final org.apache.wicket.model.IModel<?> getInnermostModel() {\n        return getInnermostModel(getDefaultModel());\n    }\n\n    public java.util.Locale getLocale() {\n        if (parent != null) {\n            return parent.getLocale();\n        }\n        return getSession().getLocale();\n    }\n\n    public final org.apache.wicket.Localizer getLocalizer() {\n        return getApplication().getResourceSettings().getLocalizer();\n    }\n\n    private final org.apache.wicket.markup.ComponentTag getMarkupTag() {\n        org.apache.wicket.markup.IMarkupFragment markup = getMarkup();\n        if (markup != null) {\n            for (int i = 0; i < markup.size(); i++) {\n                org.apache.wicket.markup.MarkupElement elem = markup.get(i);\n                if (elem instanceof org.apache.wicket.markup.ComponentTag) {\n                    return ((org.apache.wicket.markup.ComponentTag) (elem));\n                }\n            }\n        }\n        return null;\n    }\n\n    public final org.apache.wicket.util.value.ValueMap getMarkupAttributes() {\n        org.apache.wicket.markup.ComponentTag tag = getMarkupTag();\n        if (tag != null) {\n            org.apache.wicket.util.value.ValueMap attrs = new org.apache.wicket.util.value.ValueMap(tag.getAttributes());\n            attrs.makeImmutable();\n            return attrs;\n        }\n        return org.apache.wicket.util.value.ValueMap.EMPTY_MAP;\n    }\n\n    public final java.lang.Object getMarkupIdImpl() {\n        if (markupIdFromMarkup != null) {\n            return markupIdFromMarkup;\n        }\n        if (generatedMarkupId != (-1)) {\n            return new java.lang.Integer(generatedMarkupId);\n        }\n        return getMetaData(org.apache.wicket.Component.MARKUP_ID_KEY);\n    }\n\n    private final int nextAutoIndex() {\n        org.apache.wicket.Page page = findPage();\n        if (page == null) {\n            throw new org.apache.wicket.WicketRuntimeException(\"This component is not (yet) coupled to a page. It has to be able \" + (\"to find the page it is supposed to operate in before you can call \" + \"this method (Component#getMarkupId)\"));\n        }\n        return page.getAutoIndex();\n    }\n\n    public java.lang.String getMarkupId(boolean createIfDoesNotExist) {\n        java.lang.Object storedMarkupId = getMarkupIdImpl();\n        if (storedMarkupId instanceof java.lang.String) {\n            return ((java.lang.String) (storedMarkupId));\n        }\n        if ((storedMarkupId == null) && (createIfDoesNotExist == false)) {\n            return null;\n        }\n        final int generatedMarkupId = (storedMarkupId instanceof java.lang.Integer) ? ((java.lang.Integer) (storedMarkupId)).intValue() : org.apache.wicket.Session.get().nextSequenceValue();\n        if (storedMarkupId == null) {\n            setMarkupIdImpl(new java.lang.Integer(generatedMarkupId));\n        }\n        java.lang.String markupIdPrefix = \"id\";\n        if (!org.apache.wicket.Application.get().getConfigurationType().equals(Application.DEPLOYMENT)) {\n            markupIdPrefix = getId();\n        }\n        java.lang.String markupIdPostfix = java.lang.Integer.toHexString(generatedMarkupId).toLowerCase();\n        java.lang.String markupId = markupIdPrefix + markupIdPostfix;\n        char c = markupId.charAt(0);\n        if (!java.lang.Character.isLetter(c)) {\n            markupId = \"id\" + markupId;\n        }\n        markupId = org.apache.wicket.util.string.Strings.replaceAll(markupId, \"_\", \"__\").toString();\n        markupId = markupId.replace('.', '_');\n        markupId = markupId.replace('-', '_');\n        markupId = markupId.replace(' ', '_');\n        return markupId;\n    }\n\n    public java.lang.String getMarkupId() {\n        return getMarkupId(true);\n    }\n\n    public final <M extends java.io.Serializable> M getMetaData(final org.apache.wicket.MetaDataKey<M> key) {\n        return key.get(getMetaData());\n    }\n\n    private org.apache.wicket.MetaDataEntry<?>[] getMetaData() {\n        org.apache.wicket.MetaDataEntry<?>[] metaData = null;\n        int index = (getFlag(org.apache.wicket.Component.FLAG_MODEL_SET)) ? 1 : 0;\n        int length = data_length();\n        if (index < length) {\n            java.lang.Object object = data_get(index);\n            if (object instanceof org.apache.wicket.MetaDataEntry<?>[]) {\n                metaData = ((org.apache.wicket.MetaDataEntry<?>[]) (object));\n            } else if (object instanceof org.apache.wicket.MetaDataEntry) {\n                metaData = new org.apache.wicket.MetaDataEntry[]{ ((org.apache.wicket.MetaDataEntry<?>) (object)) };\n            }\n        }\n        return metaData;\n    }\n\n    public final org.apache.wicket.model.IModel<?> getDefaultModel() {\n        org.apache.wicket.model.IModel<?> model = getModelImpl();\n        if (model == null) {\n            model = initModel();\n            setModelImpl(model);\n        }\n        return model;\n    }\n\n    public final java.lang.Object getDefaultModelObject() {\n        final org.apache.wicket.model.IModel<?> model = getDefaultModel();\n        if (model != null) {\n            try {\n                return model.getObject();\n            } catch (java.lang.RuntimeException ex) {\n                org.apache.wicket.Component.log.error(\"Error while getting default model object for Component: \" + this.toString(true));\n                throw ex;\n            }\n        }\n        return null;\n    }\n\n    public final java.lang.String getDefaultModelObjectAsString() {\n        return getDefaultModelObjectAsString(getDefaultModelObject());\n    }\n\n    public final java.lang.String getDefaultModelObjectAsString(final java.lang.Object modelObject) {\n        if (modelObject != null) {\n            final java.lang.Class<?> objectClass = modelObject.getClass();\n            final org.apache.wicket.util.convert.IConverter converter = getConverter(objectClass);\n            final java.lang.String modelString = converter.convertToString(modelObject, getLocale());\n            if (modelString != null) {\n                if (getFlag(org.apache.wicket.Component.FLAG_ESCAPE_MODEL_STRINGS)) {\n                    return org.apache.wicket.util.string.Strings.escapeMarkup(modelString, false, false).toString();\n                }\n                return modelString;\n            }\n        }\n        return \"\";\n    }\n\n    public final boolean getOutputMarkupId() {\n        return getFlag(org.apache.wicket.Component.FLAG_OUTPUT_MARKUP_ID);\n    }\n\n    public final boolean getOutputMarkupPlaceholderTag() {\n        return getFlag(org.apache.wicket.Component.FLAG_PLACEHOLDER);\n    }\n\n    public final org.apache.wicket.Page getPage() {\n        final org.apache.wicket.Page page = findPage();\n        if (page == null) {\n            throw new org.apache.wicket.WicketRuntimeException(\"No Page found for component \" + this);\n        }\n        return page;\n    }\n\n    public final java.lang.String getPageRelativePath() {\n        return org.apache.wicket.util.string.Strings.afterFirstPathComponent(getPath(), org.apache.wicket.Component.PATH_SEPARATOR);\n    }\n\n    public final org.apache.wicket.MarkupContainer getParent() {\n        return parent;\n    }\n\n    public final java.lang.String getPath() {\n        final org.apache.wicket.util.string.PrependingStringBuffer buffer = new org.apache.wicket.util.string.PrependingStringBuffer(32);\n        for (org.apache.wicket.Component c = this; c != null; c = c.getParent()) {\n            if (buffer.length() > 0) {\n                buffer.prepend(org.apache.wicket.Component.PATH_SEPARATOR);\n            }\n            buffer.prepend(c.getId());\n        }\n        return buffer.toString();\n    }\n\n    public final boolean getRenderBodyOnly() {\n        return getFlag(org.apache.wicket.Component.FLAG_RENDER_BODY_ONLY);\n    }\n\n    public final org.apache.wicket.request.Request getRequest() {\n        org.apache.wicket.request.cycle.RequestCycle requestCycle = getRequestCycle();\n        if (requestCycle == null) {\n            throw new org.apache.wicket.WicketRuntimeException(\"No RequestCycle is currently set!\");\n        }\n        return requestCycle.getRequest();\n    }\n\n    public final org.apache.wicket.request.cycle.RequestCycle getRequestCycle() {\n        return org.apache.wicket.request.cycle.RequestCycle.get();\n    }\n\n    public final org.apache.wicket.request.Response getResponse() {\n        return getRequestCycle().getResponse();\n    }\n\n    public org.apache.wicket.Session getSession() {\n        return org.apache.wicket.Session.get();\n    }\n\n    public long getSizeInBytes() {\n        final org.apache.wicket.MarkupContainer originalParent = parent;\n        parent = null;\n        long size = -1;\n        try {\n            size = org.apache.wicket.util.lang.WicketObjects.sizeof(this);\n        } catch (java.lang.Exception e) {\n            org.apache.wicket.Component.log.error(\"Exception getting size for component \" + this, e);\n        }\n        parent = originalParent;\n        return size;\n    }\n\n    public final java.lang.String getString(final java.lang.String key) {\n        return getString(key, null);\n    }\n\n    public final java.lang.String getString(final java.lang.String key, final org.apache.wicket.model.IModel<?> model) {\n        return getLocalizer().getString(key, this, model);\n    }\n\n    public final java.lang.String getString(final java.lang.String key, final org.apache.wicket.model.IModel<?> model, final java.lang.String defaultValue) {\n        return getLocalizer().getString(key, this, model, defaultValue);\n    }\n\n    public final java.lang.String getStyle() {\n        org.apache.wicket.Session session = getSession();\n        if (session == null) {\n            throw new org.apache.wicket.WicketRuntimeException(\"Wicket Session object not avaiable\");\n        }\n        return session.getStyle();\n    }\n\n    public java.lang.String getVariation() {\n        if (parent != null) {\n            return parent.getVariation();\n        }\n        return null;\n    }\n\n    public final boolean hasBeenRendered() {\n        return getFlag(org.apache.wicket.Component.FLAG_HAS_BEEN_RENDERED);\n    }\n\n    public final boolean hasErrorMessage() {\n        return org.apache.wicket.Session.get().getFeedbackMessages().hasErrorMessageFor(this);\n    }\n\n    public final boolean hasFeedbackMessage() {\n        return org.apache.wicket.Session.get().getFeedbackMessages().hasMessageFor(this);\n    }\n\n    public final void info(final java.lang.String message) {\n        org.apache.wicket.Session.get().getFeedbackMessages().info(this, message);\n        org.apache.wicket.Session.get().dirty();\n    }\n\n    public final boolean isActionAuthorized(org.apache.wicket.authorization.Action action) {\n        org.apache.wicket.authorization.IAuthorizationStrategy authorizationStrategy = getSession().getAuthorizationStrategy();\n        if (authorizationStrategy != null) {\n            return authorizationStrategy.isActionAuthorized(this, action);\n        }\n        return true;\n    }\n\n    public final boolean isEnableAllowed() {\n        return isActionAuthorized(org.apache.wicket.Component.ENABLE);\n    }\n\n    public boolean isEnabled() {\n        return getFlag(org.apache.wicket.Component.FLAG_ENABLED);\n    }\n\n    public final boolean isRenderAllowed() {\n        return getFlag(org.apache.wicket.Component.FLAG_IS_RENDER_ALLOWED);\n    }\n\n    public final boolean isStateless() {\n        if (!getStatelessHint()) {\n            return false;\n        }\n        for (org.apache.wicket.behavior.IBehavior behavior : getBehaviors()) {\n            if (!behavior.getStatelessHint(this)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean isVersioned() {\n        if (!getFlag(org.apache.wicket.Component.FLAG_VERSIONED)) {\n            return false;\n        } else {\n            if (parent != null) {\n                if (!parent.isVersioned()) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    public boolean isVisible() {\n        return getFlag(org.apache.wicket.Component.FLAG_VISIBLE);\n    }\n\n    public final boolean isVisibleInHierarchy() {\n        java.lang.Boolean state = getMetaData(org.apache.wicket.Component.VISIBLE_IN_HIERARCHY_CACHE_KEY);\n        if (state == null) {\n            org.apache.wicket.Component parent = getParent();\n            if ((parent != null) && (!parent.isVisibleInHierarchy())) {\n                state = false;\n            } else {\n                state = determineVisibility();\n            }\n            setMetaData(org.apache.wicket.Component.VISIBLE_IN_HIERARCHY_CACHE_KEY, state);\n        }\n        return state;\n    }\n\n    public final void markRendering(boolean setRenderingFlag) {\n        internalMarkRendering(setRenderingFlag);\n    }\n\n    public final void modelChanged() {\n        internalOnModelChanged();\n        onModelChanged();\n    }\n\n    public final void modelChanging() {\n        checkHierarchyChange(this);\n        onModelChanging();\n        final org.apache.wicket.Page page = findPage();\n        if (page != null) {\n            page.componentModelChanging(this);\n        }\n    }\n\n    public void prepareForRender(boolean setRenderingFlag) {\n        beforeRender();\n        if (setRenderingFlag) {\n            java.util.List<org.apache.wicket.Component> feedbacks = getRequestCycle().getMetaData(org.apache.wicket.Component.FEEDBACK_LIST);\n            if (feedbacks != null) {\n                for (int i = 0; i < feedbacks.size(); i++) {\n                    feedbacks.get(i).internalBeforeRender();\n                }\n            }\n            getRequestCycle().setMetaData(org.apache.wicket.Component.FEEDBACK_LIST, null);\n        }\n        markRendering(setRenderingFlag);\n        setRenderAllowed();\n    }\n\n    public final void prepareForRender() {\n        prepareForRender(true);\n    }\n\n    public final void redirectToInterceptPage(final org.apache.wicket.Page page) {\n        throw new org.apache.wicket.RestartResponseAtInterceptPageException(page);\n    }\n\n    public final void remove() {\n        if (parent == null) {\n            throw new java.lang.IllegalStateException((\"Cannot remove \" + this) + \" from null parent!\");\n        }\n        parent.remove(this);\n    }\n\n    public final void render() {\n        java.lang.RuntimeException exception = null;\n        try {\n            org.apache.wicket.MarkupContainer parent = getParent();\n            if (((parent == null) || (parent.getFlag(org.apache.wicket.Component.FLAG_RENDERING) == false)) || isAuto()) {\n                prepareForRender(true);\n            }\n            render_();\n        } catch (final java.lang.RuntimeException ex) {\n            exception = ex;\n        } finally {\n            try {\n                afterRender();\n            } catch (java.lang.RuntimeException ex2) {\n                if (exception == null) {\n                    exception = ex2;\n                }\n            }\n        }\n        if (exception != null) {\n            throw exception;\n        }\n    }\n\n    private final void render_() {\n        org.apache.wicket.markup.IMarkupFragment markup = getMarkup();\n        if (markup == null) {\n            throw new org.apache.wicket.markup.MarkupNotFoundException(\"Markup not found for Component: \" + toString());\n        }\n        org.apache.wicket.markup.MarkupStream markupStream = new org.apache.wicket.markup.MarkupStream(markup);\n        setMarkupStream(markupStream);\n        markRendering(true);\n        org.apache.wicket.markup.MarkupElement elem = markup.get(0);\n        if (elem instanceof org.apache.wicket.markup.ComponentTag) {\n            ((org.apache.wicket.markup.ComponentTag) (elem)).onBeforeRender(this, markupStream);\n        }\n        if (determineVisibility()) {\n            setFlag(org.apache.wicket.Component.FLAG_HAS_BEEN_RENDERED, true);\n            if (org.apache.wicket.Component.log.isDebugEnabled()) {\n                org.apache.wicket.Component.log.debug(\"Begin render \" + this);\n            }\n            try {\n                notifyBehaviorsComponentBeforeRender();\n                onRender();\n                notifyBehaviorsComponentRendered();\n                rendered();\n            } catch (java.lang.RuntimeException ex) {\n                onException(ex);\n            }\n            if (org.apache.wicket.Component.log.isDebugEnabled()) {\n                org.apache.wicket.Component.log.debug(\"End render \" + this);\n            }\n        } else if ((elem != null) && (elem instanceof org.apache.wicket.markup.ComponentTag)) {\n            if (getFlag(org.apache.wicket.Component.FLAG_PLACEHOLDER)) {\n                renderPlaceholderTag(((org.apache.wicket.markup.ComponentTag) (elem)), getResponse());\n            }\n        }\n    }\n\n    private void onException(final java.lang.RuntimeException ex) {\n        for (org.apache.wicket.behavior.IBehavior behavior : getBehaviors()) {\n            if (isBehaviorAccepted(behavior)) {\n                try {\n                    behavior.exception(this, ex);\n                } catch (java.lang.Throwable ex2) {\n                    org.apache.wicket.Component.log.error(\"Error while cleaning up after exception\", ex2);\n                }\n            }\n        }\n        throw ex;\n    }\n\n    protected void renderPlaceholderTag(final org.apache.wicket.markup.ComponentTag tag, final org.apache.wicket.request.Response response) {\n        java.lang.String ns = (org.apache.wicket.util.string.Strings.isEmpty(tag.getNamespace())) ? null : tag.getNamespace() + \":\";\n        response.write(\"<\");\n        if (ns != null) {\n            response.write(ns);\n        }\n        response.write(tag.getName());\n        response.write(\" id=\\\"\");\n        response.write(getMarkupId());\n        response.write(\"\\\" style=\\\"display:none\\\"></\");\n        if (ns != null) {\n            response.write(ns);\n        }\n        response.write(tag.getName());\n        response.write(\">\");\n    }\n\n    public final void renderComponent() {\n        final org.apache.wicket.markup.IMarkupFragment markup = getMarkup();\n        if (markup == null) {\n            throw new org.apache.wicket.markup.MarkupException(\"Markup not found. Component: \" + toString());\n        }\n        final org.apache.wicket.markup.MarkupStream markupStream = new org.apache.wicket.markup.MarkupStream(markup);\n        final org.apache.wicket.markup.ComponentTag openTag = markupStream.getTag();\n        final org.apache.wicket.markup.ComponentTag tag = openTag.mutable();\n        onComponentTag(tag);\n        if ((!tag.isOpenClose()) && (!tag.isOpen())) {\n            markupStream.throwMarkupException(\"Method renderComponent called on bad markup element: \" + tag);\n        }\n        if (tag.isOpenClose() && openTag.isOpen()) {\n            markupStream.throwMarkupException(\"You can not modify a open tag to open-close: \" + tag);\n        }\n        try {\n            if (getRenderBodyOnly() == false) {\n                renderComponentTag(tag);\n            }\n            markupStream.next();\n            if (tag.isOpen()) {\n                onComponentTagBody(markupStream, tag);\n            }\n            if (tag.isOpen()) {\n                if (openTag.isOpen()) {\n                    renderClosingComponentTag(markupStream, tag, getRenderBodyOnly());\n                } else if (getRenderBodyOnly() == false) {\n                    if (needToRenderTag(openTag)) {\n                        getResponse().write(tag.syntheticCloseTagString());\n                    }\n                }\n            }\n        } catch (org.apache.wicket.WicketRuntimeException wre) {\n            throw wre;\n        } catch (java.lang.RuntimeException re) {\n            throw new org.apache.wicket.WicketRuntimeException(\"Exception in rendering component: \" + this, re);\n        }\n    }\n\n    private boolean needToRenderTag(final org.apache.wicket.markup.ComponentTag openTag) {\n        boolean renderTag = (openTag == null) ? false : !(openTag instanceof org.apache.wicket.markup.WicketTag);\n        if (renderTag == false) {\n            renderTag = !((getRequest() instanceof org.apache.wicket.request.http.WebRequest) && ((org.apache.wicket.request.http.WebRequest) (getRequest())).isAjax());\n            renderTag &= !getApplication().getMarkupSettings().getStripWicketTags();\n        }\n        return renderTag;\n    }\n\n    public final void rendered() {\n        org.apache.wicket.Page page = findPage();\n        if (page != null) {\n            page.componentRendered(this);\n        } else {\n            org.apache.wicket.Component.log.error(\"Component is not connected to a Page. Cannot register the component as being rendered. Component: \" + toString());\n        }\n    }\n\n    public void renderHead(final org.apache.wicket.markup.html.internal.HtmlHeaderContainer container) {\n        if (isVisibleInHierarchy() && isRenderAllowed()) {\n            if (org.apache.wicket.Component.log.isDebugEnabled()) {\n                org.apache.wicket.Component.log.debug(\"renderHead: \" + toString(false));\n            }\n            org.apache.wicket.markup.html.IHeaderResponse response = container.getHeaderResponse();\n            if (response.wasRendered(this) == false) {\n                renderHead(response);\n                response.markRendered(this);\n            }\n            for (org.apache.wicket.behavior.IBehavior behavior : getBehaviors()) {\n                if (isBehaviorAccepted(behavior)) {\n                    if (response.wasRendered(behavior) == false) {\n                        behavior.renderHead(response);\n                        response.markRendered(behavior);\n                    }\n                }\n            }\n        }\n    }\n\n    public org.apache.wicket.Component replaceWith(org.apache.wicket.Component replacement) {\n        if (replacement == null) {\n            throw new java.lang.IllegalArgumentException(\"Argument [[replacement]] cannot be null.\");\n        }\n        if (!getId().equals(replacement.getId())) {\n            throw new java.lang.IllegalArgumentException((((\"Replacement component must have the same id as the component it will replace. Replacement id [[\" + replacement.getId()) + \"]], replaced id [[\") + getId()) + \"]].\");\n        }\n        if (parent == null) {\n            throw new java.lang.IllegalStateException(\"This method can only be called on a component that has already been added to its parent.\");\n        }\n        parent.replace(replacement);\n        return replacement;\n    }\n\n    public final boolean sameInnermostModel(final org.apache.wicket.Component component) {\n        return sameInnermostModel(component.getDefaultModel());\n    }\n\n    public final boolean sameInnermostModel(final org.apache.wicket.model.IModel<?> model) {\n        org.apache.wicket.model.IModel<?> thisModel = getDefaultModel();\n        org.apache.wicket.model.IModel<?> thatModel = model;\n        if ((thisModel != null) && (thatModel != null)) {\n            return getInnermostModel(thisModel) == getInnermostModel(thatModel);\n        }\n        return false;\n    }\n\n    public final org.apache.wicket.Component setEnabled(final boolean enabled) {\n        if (enabled != getFlag(org.apache.wicket.Component.FLAG_ENABLED)) {\n            if (isVersioned()) {\n                final org.apache.wicket.Page page = findPage();\n                if (page != null) {\n                    addStateChange();\n                }\n            }\n            setFlag(org.apache.wicket.Component.FLAG_ENABLED, enabled);\n            onEnabledStateChanged();\n        }\n        return this;\n    }\n\n    void clearEnabledInHierarchyCache() {\n        setMetaData(org.apache.wicket.Component.ENABLED_IN_HIERARCHY_CACHE_KEY, null);\n    }\n\n    void onEnabledStateChanged() {\n        clearEnabledInHierarchyCache();\n    }\n\n    public final org.apache.wicket.Component setEscapeModelStrings(final boolean escapeMarkup) {\n        setFlag(org.apache.wicket.Component.FLAG_ESCAPE_MODEL_STRINGS, escapeMarkup);\n        return this;\n    }\n\n    public final void setMarkupIdImpl(java.lang.Object markupId) {\n        if (((markupId != null) && (!(markupId instanceof java.lang.String))) && (!(markupId instanceof java.lang.Integer))) {\n            throw new java.lang.IllegalArgumentException(\"markupId must be String or Integer\");\n        }\n        if (markupId instanceof java.lang.Integer) {\n            generatedMarkupId = ((java.lang.Integer) (markupId)).intValue();\n            setMetaData(org.apache.wicket.Component.MARKUP_ID_KEY, null);\n            return;\n        }\n        generatedMarkupId = -1;\n        setMetaData(org.apache.wicket.Component.MARKUP_ID_KEY, ((java.lang.String) (markupId)));\n    }\n\n    public org.apache.wicket.Component setMarkupId(java.lang.String markupId) {\n        if ((markupId != null) && org.apache.wicket.util.string.Strings.isEmpty(markupId)) {\n            throw new java.lang.IllegalArgumentException(\"Markup id cannot be an empty string\");\n        }\n        setMarkupIdImpl(markupId);\n        return this;\n    }\n\n    public final <M> void setMetaData(final org.apache.wicket.MetaDataKey<M> key, final M object) {\n        org.apache.wicket.MetaDataEntry<?>[] old = getMetaData();\n        java.lang.Object metaData = null;\n        org.apache.wicket.MetaDataEntry<?>[] metaDataArray = key.set(getMetaData(), object);\n        if ((metaDataArray != null) && (metaDataArray.length > 0)) {\n            metaData = (metaDataArray.length > 1) ? ((java.lang.Object) (metaDataArray)) : metaDataArray[0];\n        }\n        int index = (getFlag(org.apache.wicket.Component.FLAG_MODEL_SET)) ? 1 : 0;\n        if ((old == null) && (metaData != null)) {\n            data_insert(index, metaData);\n        } else if ((old != null) && (metaData != null)) {\n            data_set(index, metaData);\n        } else if ((old != null) && (metaData == null)) {\n            data_remove(index);\n        }\n    }\n\n    public org.apache.wicket.Component setDefaultModel(final org.apache.wicket.model.IModel<?> model) {\n        org.apache.wicket.model.IModel<?> prevModel = getModelImpl();\n        if (prevModel != null) {\n            prevModel.detach();\n        }\n        org.apache.wicket.model.IModel<?> wrappedModel = prevModel;\n        if (prevModel instanceof org.apache.wicket.model.IWrapModel) {\n            wrappedModel = ((org.apache.wicket.model.IWrapModel<?>) (prevModel)).getWrappedModel();\n        }\n        if (wrappedModel != model) {\n            if (wrappedModel != null) {\n                addStateChange();\n            }\n            setModelImpl(wrap(model));\n        }\n        modelChanged();\n        return this;\n    }\n\n    org.apache.wicket.model.IModel<?> getModelImpl() {\n        if (getFlag(org.apache.wicket.Component.FLAG_MODEL_SET)) {\n            return ((org.apache.wicket.model.IModel<?>) (data_get(0)));\n        }\n        return null;\n    }\n\n    void setModelImpl(org.apache.wicket.model.IModel<?> model) {\n        if (getFlag(org.apache.wicket.Component.FLAG_MODEL_SET)) {\n            if (model != null) {\n                data_set(0, model);\n            } else {\n                data_remove(0);\n                setFlag(org.apache.wicket.Component.FLAG_MODEL_SET, false);\n            }\n        } else if (model != null) {\n            data_insert(0, model);\n            setFlag(org.apache.wicket.Component.FLAG_MODEL_SET, true);\n        }\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public final org.apache.wicket.Component setDefaultModelObject(final java.lang.Object object) {\n        final org.apache.wicket.model.IModel<java.lang.Object> model = ((org.apache.wicket.model.IModel<java.lang.Object>) (getDefaultModel()));\n        if (model == null) {\n            throw new java.lang.IllegalStateException(\"Attempt to set model object on null model of component: \" + getPageRelativePath());\n        }\n        if (!isActionAuthorized(org.apache.wicket.Component.ENABLE)) {\n            throw new org.apache.wicket.authorization.UnauthorizedActionException(this, org.apache.wicket.Component.ENABLE);\n        }\n        if (!getModelComparator().compare(this, object)) {\n            modelChanging();\n            model.setObject(object);\n            modelChanged();\n        }\n        return this;\n    }\n\n    public final org.apache.wicket.Component setOutputMarkupId(final boolean output) {\n        setFlag(org.apache.wicket.Component.FLAG_OUTPUT_MARKUP_ID, output);\n        return this;\n    }\n\n    public final org.apache.wicket.Component setOutputMarkupPlaceholderTag(final boolean outputTag) {\n        if (outputTag != getFlag(org.apache.wicket.Component.FLAG_PLACEHOLDER)) {\n            if (outputTag) {\n                setOutputMarkupId(true);\n                setFlag(org.apache.wicket.Component.FLAG_PLACEHOLDER, true);\n            } else {\n                setFlag(org.apache.wicket.Component.FLAG_PLACEHOLDER, false);\n            }\n        }\n        return this;\n    }\n\n    public final org.apache.wicket.Component setRenderBodyOnly(final boolean renderTag) {\n        this.setFlag(org.apache.wicket.Component.FLAG_RENDER_BODY_ONLY, renderTag);\n        return this;\n    }\n\n    public final <C extends org.apache.wicket.request.component.IRequestablePage> void setResponsePage(final java.lang.Class<C> cls) {\n        getRequestCycle().setResponsePage(cls, null);\n    }\n\n    public final <C extends org.apache.wicket.request.component.IRequestablePage> void setResponsePage(final java.lang.Class<C> cls, org.apache.wicket.request.mapper.parameter.PageParameters parameters) {\n        getRequestCycle().setResponsePage(cls, parameters);\n    }\n\n    public final void setResponsePage(final org.apache.wicket.Page page) {\n        getRequestCycle().setResponsePage(page);\n    }\n\n    public org.apache.wicket.Component setVersioned(boolean versioned) {\n        setFlag(org.apache.wicket.Component.FLAG_VERSIONED, versioned);\n        return this;\n    }\n\n    public final org.apache.wicket.Component setVisible(final boolean visible) {\n        if (visible != getFlag(org.apache.wicket.Component.FLAG_VISIBLE)) {\n            addStateChange();\n            setFlag(org.apache.wicket.Component.FLAG_VISIBLE, visible);\n        }\n        return this;\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return toString(false);\n    }\n\n    public java.lang.String toString(final boolean detailed) {\n        if (detailed) {\n            final org.apache.wicket.Page page = findPage();\n            if (page == null) {\n                return new java.lang.StringBuffer(\"[Component id = \").append(getId()).append(\", page = <No Page>, path = \").append(getPath()).append(\".\").append(org.apache.wicket.util.lang.Classes.simpleName(getClass())).append(\"]\").toString();\n            } else {\n                return new java.lang.StringBuffer(\"[Component id = \").append(getId()).append(\", page = \").append(getPage().getClass().getName()).append(\", path = \").append(getPath()).append(\".\").append(org.apache.wicket.util.lang.Classes.simpleName(getClass())).append(\", isVisible = \").append(determineVisibility()).append(\", isVersioned = \").append(isVersioned()).append(\"]\").toString();\n            }\n        } else {\n            return (\"[Component id = \" + getId()) + \"]\";\n        }\n    }\n\n    public final <C extends org.apache.wicket.Page> java.lang.CharSequence urlFor(final java.lang.Class<C> pageClass, final org.apache.wicket.request.mapper.parameter.PageParameters parameters) {\n        return getRequestCycle().urlFor(pageClass, parameters);\n    }\n\n    public final java.lang.CharSequence urlFor(final org.apache.wicket.behavior.IBehavior behaviour, final org.apache.wicket.RequestListenerInterface listener) {\n        org.apache.wicket.request.handler.PageAndComponentProvider provider = new org.apache.wicket.request.handler.PageAndComponentProvider(getPage(), this);\n        int id = getBehaviorId(behaviour);\n        org.apache.wicket.request.IRequestHandler handler;\n        if (getPage().isPageStateless()) {\n            handler = new org.apache.wicket.request.handler.BookmarkableListenerInterfaceRequestHandler(provider, listener, id);\n        } else {\n            handler = new org.apache.wicket.request.handler.ListenerInterfaceRequestHandler(provider, listener, id);\n        }\n        return getRequestCycle().urlFor(handler);\n    }\n\n    public final java.lang.CharSequence urlFor(final org.apache.wicket.request.IRequestHandler requestHandler) {\n        return getRequestCycle().urlFor(requestHandler);\n    }\n\n    public final java.lang.CharSequence urlFor(final org.apache.wicket.RequestListenerInterface listener) {\n        org.apache.wicket.request.handler.PageAndComponentProvider provider = new org.apache.wicket.request.handler.PageAndComponentProvider(getPage(), this);\n        org.apache.wicket.request.IRequestHandler handler;\n        if (getPage().isPageStateless()) {\n            handler = new org.apache.wicket.request.handler.BookmarkableListenerInterfaceRequestHandler(provider, listener);\n        } else {\n            handler = new org.apache.wicket.request.handler.ListenerInterfaceRequestHandler(provider, listener);\n        }\n        return getRequestCycle().urlFor(handler);\n    }\n\n    public final java.lang.CharSequence urlFor(final org.apache.wicket.request.resource.ResourceReference resourceReference, org.apache.wicket.request.mapper.parameter.PageParameters parameters) {\n        return getRequestCycle().urlFor(resourceReference, parameters);\n    }\n\n    public final <R> R visitParents(final java.lang.Class<?> c, final org.apache.wicket.util.visit.IVisitor<org.apache.wicket.Component, R> visitor) {\n        org.apache.wicket.Component current = getParent();\n        org.apache.wicket.util.visit.Visit<R> visit = new org.apache.wicket.util.visit.Visit<R>();\n        while (current != null) {\n            if (c.isInstance(current)) {\n                visitor.component(current, visit);\n                if (visit.isStopped()) {\n                    return visit.getResult();\n                }\n            }\n            current = current.getParent();\n        } \n        return null;\n    }\n\n    public final void warn(final java.lang.String message) {\n        org.apache.wicket.Session.get().getFeedbackMessages().warn(this, message);\n        org.apache.wicket.Session.get().dirty();\n    }\n\n    private void notifyBehaviorsComponentBeforeRender() {\n        for (org.apache.wicket.behavior.IBehavior behavior : getBehaviors()) {\n            if (isBehaviorAccepted(behavior)) {\n                behavior.beforeRender(this);\n            }\n        }\n    }\n\n    private void notifyBehaviorsComponentRendered() {\n        for (org.apache.wicket.behavior.IBehavior behavior : getBehaviors()) {\n            if (isBehaviorAccepted(behavior)) {\n                behavior.afterRender(this);\n            }\n        }\n    }\n\n    protected final void addStateChange() {\n        checkHierarchyChange(this);\n        final org.apache.wicket.Page page = findPage();\n        if (page != null) {\n            page.componentStateChanging(this);\n        }\n    }\n\n    protected final void checkComponentTag(final org.apache.wicket.markup.ComponentTag tag, final java.lang.String name) {\n        if (!tag.getName().equalsIgnoreCase(name)) {\n            java.lang.String msg = java.lang.String.format(\"Component [%s] (path = [%s]) must be \" + \"applied to a tag of type [%s], not: %s\", getId(), getPath(), name, tag.toUserDebugString());\n            findMarkupStream().throwMarkupException(msg);\n        }\n    }\n\n    protected final void checkComponentTagAttribute(final org.apache.wicket.markup.ComponentTag tag, final java.lang.String key, final java.lang.String value) {\n        if (key != null) {\n            final java.lang.String tagAttributeValue = tag.getAttributes().getString(key);\n            if ((tagAttributeValue == null) || (!value.equalsIgnoreCase(tagAttributeValue))) {\n                java.lang.String msg = java.lang.String.format(\"Component [%s] (path = [%s]) must be applied to a tag \" + \"with [%s] attribute matching [%s], not [%s]\", getId(), getPath(), key, value, tagAttributeValue);\n                findMarkupStream().throwMarkupException(msg);\n            }\n        }\n    }\n\n    protected void checkHierarchyChange(final org.apache.wicket.Component component) {\n        if ((!component.isAuto()) && getFlag(org.apache.wicket.Component.FLAG_RENDERING)) {\n            throw new org.apache.wicket.WicketRuntimeException(\"Cannot modify component hierarchy after render phase has started (page version cant change then anymore)\");\n        }\n    }\n\n    protected void detachModel() {\n        org.apache.wicket.model.IModel<?> model = getModelImpl();\n        if (model != null) {\n            model.detach();\n        }\n        if ((model instanceof org.apache.wicket.model.IWrapModel) && (!getFlag(org.apache.wicket.Component.FLAG_INHERITABLE_MODEL))) {\n            ((org.apache.wicket.model.IWrapModel<?>) (model)).getWrappedModel().detach();\n        }\n    }\n\n    protected final java.lang.String exceptionMessage(final java.lang.String message) {\n        return (message + \":\\n\") + toString();\n    }\n\n    protected final org.apache.wicket.markup.MarkupStream findMarkupStream() {\n        return new org.apache.wicket.markup.MarkupStream(getMarkup());\n    }\n\n    protected final org.apache.wicket.Page findPage() {\n        return ((org.apache.wicket.Page) (this instanceof org.apache.wicket.Page ? this : findParent(org.apache.wicket.Page.class)));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <M extends org.apache.wicket.behavior.IBehavior> java.util.List<M> getBehaviors(java.lang.Class<M> type) {\n        return new org.apache.wicket.Behaviors(this).getBehaviors(type);\n    }\n\n    protected final boolean getFlag(final int flag) {\n        return (flags & flag) != 0;\n    }\n\n    protected final boolean getFlag(final short flag) {\n        return getFlag(((int) (flag)));\n    }\n\n    protected final org.apache.wicket.model.IModel<?> getInnermostModel(final org.apache.wicket.model.IModel<?> model) {\n        org.apache.wicket.model.IModel<?> nested = model;\n        while ((nested != null) && (nested instanceof org.apache.wicket.model.IWrapModel)) {\n            final org.apache.wicket.model.IModel<?> next = ((org.apache.wicket.model.IWrapModel<?>) (nested)).getWrappedModel();\n            if (nested == next) {\n                throw new org.apache.wicket.WicketRuntimeException((\"Model for \" + nested) + \" is self-referential\");\n            }\n            nested = next;\n        } \n        return nested;\n    }\n\n    public org.apache.wicket.model.IModelComparator getModelComparator() {\n        return org.apache.wicket.Component.defaultModelComparator;\n    }\n\n    protected boolean getStatelessHint() {\n        return true;\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    protected org.apache.wicket.model.IModel<?> initModel() {\n        org.apache.wicket.model.IModel<?> foundModel = null;\n        for (org.apache.wicket.Component current = getParent(); current != null; current = current.getParent()) {\n            org.apache.wicket.model.IModel<?> model = current.getModelImpl();\n            if ((model instanceof org.apache.wicket.model.IWrapModel) && (!(model instanceof org.apache.wicket.model.IComponentInheritedModel))) {\n                model = ((org.apache.wicket.model.IWrapModel<?>) (model)).getWrappedModel();\n            }\n            if (model instanceof org.apache.wicket.model.IComponentInheritedModel) {\n                foundModel = ((org.apache.wicket.model.IComponentInheritedModel<?>) (model)).wrapOnInheritance(this);\n                setFlag(org.apache.wicket.Component.FLAG_INHERITABLE_MODEL, true);\n                break;\n            }\n        }\n        return foundModel;\n    }\n\n    protected void internalOnModelChanged() {\n    }\n\n    protected boolean isBehaviorAccepted(final org.apache.wicket.behavior.IBehavior behavior) {\n        if ((behavior instanceof org.apache.wicket.AttributeModifier) && (getFlag(org.apache.wicket.Component.FLAG_IGNORE_ATTRIBUTE_MODIFIER) != false)) {\n            return false;\n        }\n        return behavior.isEnabled(this);\n    }\n\n    protected final boolean isIgnoreAttributeModifier() {\n        return this.getFlag(org.apache.wicket.Component.FLAG_IGNORE_ATTRIBUTE_MODIFIER);\n    }\n\n    protected org.apache.wicket.markup.MarkupStream locateMarkupStream() {\n        return new org.apache.wicket.markup.MarkupStream(getMarkup());\n    }\n\n    protected void onAfterRender() {\n        setFlag(org.apache.wicket.Component.FLAG_AFTER_RENDERING, false);\n    }\n\n    protected void onBeforeRender() {\n        setFlag(org.apache.wicket.Component.FLAG_PREPARED_FOR_RENDER, true);\n        onBeforeRenderChildren();\n        setFlag(org.apache.wicket.Component.FLAG_BEFORE_RENDER_SUPER_CALL_VERIFIED, true);\n    }\n\n    @java.lang.Deprecated\n    protected boolean callOnBeforeRenderIfNotVisible() {\n        return false;\n    }\n\n    protected void onComponentTag(final org.apache.wicket.markup.ComponentTag tag) {\n        if (getFlag(org.apache.wicket.Component.FLAG_OUTPUT_MARKUP_ID)) {\n            tag.put(org.apache.wicket.Component.MARKUP_ID_ATTR_NAME, getMarkupId());\n        }\n        if (getApplication().getDebugSettings().isOutputComponentPath()) {\n            java.lang.String path = getPageRelativePath();\n            path = path.replace(\"_\", \"__\");\n            path = path.replace(\":\", \"_\");\n            tag.put(\"wicketpath\", path);\n        }\n    }\n\n    protected void onComponentTagBody(final org.apache.wicket.markup.MarkupStream markupStream, final org.apache.wicket.markup.ComponentTag openTag) {\n    }\n\n    protected void onDetach() {\n        setFlag(org.apache.wicket.Component.FLAG_DETACHING, false);\n    }\n\n    protected void onRemove() {\n        setFlag(org.apache.wicket.Component.FLAG_REMOVING_FROM_HIERARCHY, false);\n    }\n\n    protected void onModelChanged() {\n    }\n\n    protected void onModelChanging() {\n    }\n\n    protected abstract void onRender();\n\n    protected final void renderComponentTag(org.apache.wicket.markup.ComponentTag tag) {\n        if (needToRenderTag(tag)) {\n            java.util.List<? extends org.apache.wicket.behavior.IBehavior> behaviors = getBehaviors();\n            if ((((behaviors != null) && (!behaviors.isEmpty())) && (!tag.isClose())) && (isIgnoreAttributeModifier() == false)) {\n                tag = tag.mutable();\n                for (org.apache.wicket.behavior.IBehavior behavior : behaviors) {\n                    if (isBehaviorAccepted(behavior)) {\n                        behavior.onComponentTag(this, tag);\n                    }\n                }\n            }\n            if (tag.hasBehaviors()) {\n                java.util.Iterator<? extends org.apache.wicket.behavior.IBehavior> tagBehaviors = tag.getBehaviors();\n                while (tagBehaviors.hasNext()) {\n                    final org.apache.wicket.behavior.IBehavior behavior = tagBehaviors.next();\n                    if (behavior.isEnabled(this)) {\n                        behavior.onComponentTag(this, tag);\n                    }\n                    behavior.detach(this);\n                } \n            }\n            tag.writeOutput(getResponse(), !needToRenderTag(null), getMarkup().getMarkupResourceStream().getWicketNamespace());\n        }\n    }\n\n    protected final void replaceComponentTagBody(final org.apache.wicket.markup.MarkupStream markupStream, final org.apache.wicket.markup.ComponentTag tag, final java.lang.CharSequence body) {\n        org.apache.wicket.markup.ComponentTag markupOpenTag = null;\n        if (tag.isOpen()) {\n            markupStream.setCurrentIndex(markupStream.getCurrentIndex() - 1);\n            markupOpenTag = markupStream.getTag();\n            markupStream.next();\n            if (markupOpenTag.isOpen()) {\n                markupStream.skipRawMarkup();\n            }\n        }\n        if (body != null) {\n            getResponse().write(body);\n        }\n        if (tag.isOpen()) {\n            if (((markupOpenTag != null) && markupOpenTag.isOpen()) && (!markupStream.atCloseTag())) {\n                markupStream.throwMarkupException((((\"Expected close tag for '\" + markupOpenTag) + \"' Possible attempt to embed component(s) '\") + markupStream.get()) + \"' in the body of this component which discards its body\");\n            }\n        }\n    }\n\n    protected final void setAuto(final boolean auto) {\n        setFlag(org.apache.wicket.Component.FLAG_AUTO, auto);\n    }\n\n    protected final void setFlag(final int flag, final boolean set) {\n        if (set) {\n            flags |= flag;\n        } else {\n            flags &= ~flag;\n        }\n    }\n\n    protected final void setFlag(final short flag, final boolean set) {\n        setFlag(((int) (flag)), set);\n    }\n\n    protected final org.apache.wicket.Component setIgnoreAttributeModifier(final boolean ignore) {\n        this.setFlag(org.apache.wicket.Component.FLAG_IGNORE_ATTRIBUTE_MODIFIER, ignore);\n        return this;\n    }\n\n    protected void setMarkupStream(final org.apache.wicket.markup.MarkupStream markupStream) {\n    }\n\n    protected final <V> org.apache.wicket.model.IModel<V> wrap(final org.apache.wicket.model.IModel<V> model) {\n        if (model instanceof org.apache.wicket.model.IComponentAssignedModel) {\n            return ((org.apache.wicket.model.IComponentAssignedModel<V>) (model)).wrapOnAssignment(this);\n        }\n        return model;\n    }\n\n    void detachChildren() {\n    }\n\n    void removeChildren() {\n    }\n\n    public org.apache.wicket.Component get(final java.lang.String path) {\n        if (path.equals(\"\")) {\n            return this;\n        }\n        throw new java.lang.IllegalArgumentException(exceptionMessage((\"Component is not a container and so does \" + \"not contain the path \") + path));\n    }\n\n    final boolean hasMarkupIdMetaData() {\n        return getMarkupId() != null;\n    }\n\n    void internalMarkRendering(boolean setRenderingFlag) {\n        if (setRenderingFlag) {\n            setFlag(org.apache.wicket.Component.FLAG_PREPARED_FOR_RENDER, false);\n            setFlag(org.apache.wicket.Component.FLAG_RENDERING, true);\n        }\n    }\n\n    public final boolean isAuto() {\n        for (org.apache.wicket.Component current = this; current != null; current = current.getParent()) {\n            if (current.getFlag(org.apache.wicket.Component.FLAG_AUTO)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    boolean isPreparedForRender() {\n        return getFlag(org.apache.wicket.Component.FLAG_PREPARED_FOR_RENDER);\n    }\n\n    void onAfterRenderChildren() {\n    }\n\n    void onBeforeRenderChildren() {\n    }\n\n    final void renderClosingComponentTag(final org.apache.wicket.markup.MarkupStream markupStream, final org.apache.wicket.markup.ComponentTag openTag, final boolean renderBodyOnly) {\n        if (openTag.isOpen()) {\n            if (markupStream.atCloseTag() && markupStream.getTag().closes(openTag)) {\n                if (renderBodyOnly == false) {\n                    org.apache.wicket.markup.ComponentTag closeTag = markupStream.getTag();\n                    if (openTag.getNameChanged()) {\n                        closeTag = closeTag.mutable();\n                        closeTag.setName(openTag.getName());\n                        closeTag.setNamespace(openTag.getNamespace());\n                    }\n                    renderComponentTag(closeTag);\n                }\n            } else if (openTag.requiresCloseTag()) {\n                markupStream.throwMarkupException(\"Expected close tag for \" + openTag);\n            }\n        }\n    }\n\n    final void setId(final java.lang.String id) {\n        if (!(this instanceof org.apache.wicket.Page)) {\n            if (org.apache.wicket.util.string.Strings.isEmpty(id)) {\n                throw new org.apache.wicket.WicketRuntimeException(\"Null or empty component ID's are not allowed.\");\n            }\n        }\n        if ((id != null) && (id.indexOf(':') != (-1))) {\n            throw new org.apache.wicket.WicketRuntimeException(\"The component ID must not contain ':' chars.\");\n        }\n        this.id = id;\n    }\n\n    final void setParent(final org.apache.wicket.MarkupContainer parent) {\n        if ((this.parent != null) && org.apache.wicket.Component.log.isDebugEnabled()) {\n            org.apache.wicket.Component.log.debug(((\"Replacing parent \" + this.parent) + \" with \") + parent);\n        }\n        this.parent = parent;\n    }\n\n    final void setRenderAllowed(boolean renderAllowed) {\n        setFlag(org.apache.wicket.Component.FLAG_IS_RENDER_ALLOWED, renderAllowed);\n    }\n\n    void setRenderAllowed() {\n        setRenderAllowed(isActionAuthorized(org.apache.wicket.Component.RENDER));\n    }\n\n    public final org.apache.wicket.Component setVisibilityAllowed(boolean allowed) {\n        setFlag(org.apache.wicket.Component.FLAG_VISIBILITY_ALLOWED, allowed);\n        return this;\n    }\n\n    public final boolean isVisibilityAllowed() {\n        return getFlag(org.apache.wicket.Component.FLAG_VISIBILITY_ALLOWED);\n    }\n\n    public final boolean determineVisibility() {\n        return (isVisible() && isRenderAllowed()) && isVisibilityAllowed();\n    }\n\n    public final boolean isEnabledInHierarchy() {\n        java.lang.Boolean state = getMetaData(org.apache.wicket.Component.ENABLED_IN_HIERARCHY_CACHE_KEY);\n        if (state == null) {\n            org.apache.wicket.Component parent = getParent();\n            if ((parent != null) && (!parent.isEnabledInHierarchy())) {\n                state = false;\n            } else {\n                state = isEnabled() && isEnableAllowed();\n            }\n            setMetaData(org.apache.wicket.Component.ENABLED_IN_HIERARCHY_CACHE_KEY, state);\n        }\n        return state;\n    }\n\n    public final boolean canCallListenerInterface() {\n        return isEnabledInHierarchy() && isVisibleInHierarchy();\n    }\n\n    public void renderHead(org.apache.wicket.markup.html.IHeaderResponse response) {\n    }\n\n    public void onEvent(org.apache.wicket.event.IEvent<?> event) {\n    }\n\n    public final void send(org.apache.wicket.event.IEventSink sink, org.apache.wicket.event.Broadcast type, java.lang.Object payload) {\n        new org.apache.wicket.ComponentEventSender(this).send(sink, type, payload);\n    }\n\n    public org.apache.wicket.Component remove(final org.apache.wicket.behavior.IBehavior behavior) {\n        new org.apache.wicket.Behaviors(this).remove(behavior);\n        return this;\n    }\n\n    public final org.apache.wicket.behavior.IBehavior getBehaviorById(int id) {\n        return new org.apache.wicket.Behaviors(this).getBehaviorById(id);\n    }\n\n    public final int getBehaviorId(org.apache.wicket.behavior.IBehavior behavior) {\n        return new org.apache.wicket.Behaviors(this).getBehaviorId(behavior);\n    }\n\n    public org.apache.wicket.Component add(final org.apache.wicket.behavior.IBehavior... behaviors) {\n        new org.apache.wicket.Behaviors(this).add(behaviors);\n        return this;\n    }\n\n    public final java.util.List<? extends org.apache.wicket.behavior.IBehavior> getBehaviors() {\n        return getBehaviors(org.apache.wicket.behavior.IBehavior.class);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "NewClass",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    private static final long serialVersionUID = 1L;\n}",
            "dst_parent": "new org.apache.wicket.MetaDataKey<java.util.List<org.apache.wicket.Component>>() {\n    private static final long serialVersionUID = 1L;\n}",
            "dst_parent_type": "NewClass",
            "dst_type": "Class",
            "operator": "UPD",
            "src": "{\n    private static final long serialVersionUID = 1L;\n}",
            "src_parent": "new org.apache.wicket.MetaDataKey<java.util.List<org.apache.wicket.Component>>() {\n    private static final long serialVersionUID = 1L;\n}",
            "src_parent_type": "NewClass",
            "src_type": "Class"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    public void component(org.apache.wicket.Component component, org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n        component.beforeRender();\n    }\n}",
            "dst_parent": "new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.Component, java.lang.Void>() {\n    public void component(org.apache.wicket.Component component, org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n        component.beforeRender();\n    }\n}",
            "dst_parent_type": "NewClass",
            "dst_type": "Class",
            "operator": "UPD",
            "src": "{\n    public void component(org.apache.wicket.Component component, org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n        component.beforeRender();\n    }\n}",
            "src_parent": "new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.Component, java.lang.Void>() {\n    public void component(org.apache.wicket.Component component, org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n        component.beforeRender();\n    }\n}",
            "src_parent_type": "NewClass",
            "src_type": "Class"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    public void component(final org.apache.wicket.MarkupContainer component, final org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n        org.apache.wicket.markup.IMarkupFragment m = component.getMarkup();\n        org.apache.wicket.markup.MarkupStream ms = new org.apache.wicket.markup.MarkupStream(m);\n        ms.skipUntil(org.apache.wicket.markup.ComponentTag.class);\n        if (ms.hasMore() && (lastTag == ms.getTag())) {\n            component.add(Component.this);\n            visit.stop();\n            return;\n        }\n    }\n}",
            "dst_parent": "new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.MarkupContainer, java.lang.Void>() {\n    public void component(final org.apache.wicket.MarkupContainer component, final org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n        org.apache.wicket.markup.IMarkupFragment m = component.getMarkup();\n        org.apache.wicket.markup.MarkupStream ms = new org.apache.wicket.markup.MarkupStream(m);\n        ms.skipUntil(org.apache.wicket.markup.ComponentTag.class);\n        if (ms.hasMore() && (lastTag == ms.getTag())) {\n            component.add(Component.this);\n            visit.stop();\n            return;\n        }\n    }\n}",
            "dst_parent_type": "NewClass",
            "dst_type": "Class",
            "operator": "UPD",
            "src": "{\n    public void component(final org.apache.wicket.MarkupContainer component, final org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n        org.apache.wicket.markup.IMarkupFragment m = component.getMarkup();\n        org.apache.wicket.markup.MarkupStream ms = new org.apache.wicket.markup.MarkupStream(m);\n        ms.skipUntil(org.apache.wicket.markup.ComponentTag.class);\n        if (ms.hasMore() && (lastTag == ms.getTag())) {\n            component.add(Component.this);\n            visit.stop();\n            return;\n        }\n    }\n}",
            "src_parent": "new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.MarkupContainer, java.lang.Void>() {\n    public void component(final org.apache.wicket.MarkupContainer component, final org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n        org.apache.wicket.markup.IMarkupFragment m = component.getMarkup();\n        org.apache.wicket.markup.MarkupStream ms = new org.apache.wicket.markup.MarkupStream(m);\n        ms.skipUntil(org.apache.wicket.markup.ComponentTag.class);\n        if (ms.hasMore() && (lastTag == ms.getTag())) {\n            component.add(Component.this);\n            visit.stop();\n            return;\n        }\n    }\n}",
            "src_parent_type": "NewClass",
            "src_type": "Class"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private static final org.apache.wicket.MetaDataKey<java.lang.Boolean> ENABLED_IN_HIERARCHY_CACHE_KEY = new org.apache.wicket.MetaDataKey<java.lang.Boolean>() {\n    private static final long serialVersionUID = 1L;\n};",
            "src_parent": "public abstract class Component implements org.apache.wicket.IClusterable , org.apache.wicket.IConverterLocator , org.apache.wicket.event.IEventSink , org.apache.wicket.event.IEventSource , org.apache.wicket.markup.html.IHeaderContributor , org.apache.wicket.request.component.IRequestableComponent , org.apache.wicket.util.IHierarchical<org.apache.wicket.Component> {\n    protected static final int FLAG_CONFIGURED = 0x800000;\n\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.Component.class);\n\n    private static final long serialVersionUID = 1L;\n\n    public static final org.apache.wicket.authorization.Action ENABLE = new org.apache.wicket.authorization.Action(org.apache.wicket.authorization.Action.ENABLE);\n\n    public static final char PATH_SEPARATOR = ':';\n\n    public static final org.apache.wicket.authorization.Action RENDER = new org.apache.wicket.authorization.Action(org.apache.wicket.authorization.Action.RENDER);\n\n    private static final org.apache.wicket.MetaDataKey<java.lang.String> MARKUP_ID_KEY = new org.apache.wicket.MetaDataKey<java.lang.String>() {\n        private static final long serialVersionUID = 1L;\n    };\n\n    private static final org.apache.wicket.model.IModelComparator defaultModelComparator = new org.apache.wicket.model.IModelComparator() {\n        private static final long serialVersionUID = 1L;\n\n        public boolean compare(org.apache.wicket.Component component, java.lang.Object b) {\n            final java.lang.Object a = component.getDefaultModelObject();\n            if ((a == null) && (b == null)) {\n                return true;\n            }\n            if ((a == null) || (b == null)) {\n                return false;\n            }\n            return a.equals(b);\n        }\n    };\n\n    private static final int FLAG_UNUSED0 = 0x20000000;\n\n    private static final int FLAG_AUTO = 0x1;\n\n    private static final int FLAG_ESCAPE_MODEL_STRINGS = 0x2;\n\n    static final int FLAG_INHERITABLE_MODEL = 0x4;\n\n    private static final int FLAG_VERSIONED = 0x8;\n\n    private static final int FLAG_VISIBLE = 0x10;\n\n    private static final int FLAG_RENDER_BODY_ONLY = 0x20;\n\n    private static final int FLAG_IGNORE_ATTRIBUTE_MODIFIER = 0x40;\n\n    private static final int FLAG_ENABLED = 0x80;\n\n    protected static final int FLAG_RESERVED1 = 0x100;\n\n    protected static final int FLAG_RESERVED2 = 0x200;\n\n    protected static final int FLAG_RESERVED3 = 0x400;\n\n    protected static final int FLAG_RESERVED4 = 0x800;\n\n    private static final int FLAG_HAS_BEEN_RENDERED = 0x1000;\n\n    private static final int FLAG_IS_RENDER_ALLOWED = 0x2000;\n\n    private static final int FLAG_OUTPUT_MARKUP_ID = 0x4000;\n\n    private static final int FLAG_PLACEHOLDER = 0x8000;\n\n    protected static final int FLAG_RESERVED5 = 0x10000;\n\n    protected static final int FLAG_INITIALIZED = 0x20000;\n\n    private static final int FLAG_NOTUSED7 = 0x40000;\n\n    protected static final int FLAG_RESERVED8 = 0x80000;\n\n    private static final int FLAG_MODEL_SET = 0x100000;\n\n    protected static final int FLAG_REMOVING_FROM_HIERARCHY = 0x200000;\n\n    private static final int FLAG_BEFORE_RENDER_SUPER_CALL_VERIFIED = 0x1000000;\n\n    private static final int FLAG_INITIALIZE_SUPER_CALL_VERIFIED = 0x10000000;\n\n    private static final int FLAG_RENDERING = 0x2000000;\n\n    private static final int FLAG_PREPARED_FOR_RENDER = 0x4000000;\n\n    private static final int FLAG_AFTER_RENDERING = 0x8000000;\n\n    private static final int FLAG_MARKUP_ATTACHED = 0x10000000;\n\n    private static final int FLAG_VISIBILITY_ALLOWED = 0x40000000;\n\n    private static final int FLAG_DETACHING = 0x80000000;\n\n    private static final java.lang.String MARKUP_ID_ATTR_NAME = \"id\";\n\n    static final org.apache.wicket.MetaDataKey<java.lang.String> ADDED_AT_KEY = new org.apache.wicket.MetaDataKey<java.lang.String>() {\n        private static final long serialVersionUID = 1L;\n    };\n\n    static final org.apache.wicket.MetaDataKey<java.lang.String> CONSTRUCTED_AT_KEY = new org.apache.wicket.MetaDataKey<java.lang.String>() {\n        private static final long serialVersionUID = 1L;\n    };\n\n    private static final org.apache.wicket.MetaDataKey<java.lang.Boolean> VISIBLE_IN_HIERARCHY_CACHE_KEY = new org.apache.wicket.MetaDataKey<java.lang.Boolean>() {\n        private static final long serialVersionUID = 1L;\n    };\n\n    private static final org.apache.wicket.MetaDataKey<java.lang.Boolean> ENABLED_IN_HIERARCHY_CACHE_KEY = new org.apache.wicket.MetaDataKey<java.lang.Boolean>() {\n        private static final long serialVersionUID = 1L;\n    };\n\n    private int flags = ((((org.apache.wicket.Component.FLAG_VISIBLE | org.apache.wicket.Component.FLAG_ESCAPE_MODEL_STRINGS) | org.apache.wicket.Component.FLAG_VERSIONED) | org.apache.wicket.Component.FLAG_ENABLED) | org.apache.wicket.Component.FLAG_IS_RENDER_ALLOWED) | org.apache.wicket.Component.FLAG_VISIBILITY_ALLOWED;\n\n    private java.lang.String id;\n\n    private org.apache.wicket.MarkupContainer parent;\n\n    int generatedMarkupId = -1;\n\n    private transient org.apache.wicket.markup.IMarkupFragment markup;\n\n    private transient java.lang.String markupIdFromMarkup;\n\n    java.lang.Object data = null;\n\n    final int data_start() {\n        return getFlag(org.apache.wicket.Component.FLAG_MODEL_SET) ? 1 : 0;\n    }\n\n    final int data_length() {\n        if (data == null) {\n            return 0;\n        } else if ((data instanceof java.lang.Object[]) && (!(data instanceof org.apache.wicket.MetaDataEntry<?>[]))) {\n            return ((java.lang.Object[]) (data)).length;\n        } else {\n            return 1;\n        }\n    }\n\n    final java.lang.Object data_get(int index) {\n        if (data == null) {\n            return null;\n        } else if ((data instanceof java.lang.Object[]) && (!(data instanceof org.apache.wicket.MetaDataEntry<?>[]))) {\n            java.lang.Object[] array = ((java.lang.Object[]) (data));\n            return index < array.length ? array[index] : null;\n        } else if (index == 0) {\n            return data;\n        } else {\n            return null;\n        }\n    }\n\n    final java.lang.Object data_set(int index, java.lang.Object object) {\n        if (index > (data_length() - 1)) {\n            throw new java.lang.IndexOutOfBoundsException();\n        } else if ((index == 0) && (!((data instanceof java.lang.Object[]) && (!(data instanceof org.apache.wicket.MetaDataEntry<?>[]))))) {\n            java.lang.Object old = data;\n            data = object;\n            return old;\n        } else {\n            java.lang.Object[] array = ((java.lang.Object[]) (data));\n            java.lang.Object old = array[index];\n            array[index] = object;\n            return old;\n        }\n    }\n\n    final void data_add(java.lang.Object object) {\n        data_insert(-1, object);\n    }\n\n    final void data_insert(int position, java.lang.Object object) {\n        int currentLength = data_length();\n        if (position == (-1)) {\n            position = currentLength;\n        }\n        if (position > currentLength) {\n            throw new java.lang.IndexOutOfBoundsException();\n        }\n        if (currentLength == 0) {\n            data = object;\n        } else if (currentLength == 1) {\n            java.lang.Object[] array = new java.lang.Object[2];\n            if (position == 0) {\n                array[0] = object;\n                array[1] = data;\n            } else {\n                array[0] = data;\n                array[1] = object;\n            }\n            data = array;\n        } else {\n            java.lang.Object[] array = new java.lang.Object[currentLength + 1];\n            java.lang.Object[] current = ((java.lang.Object[]) (data));\n            int before = position;\n            int after = currentLength - position;\n            if (before > 0) {\n                java.lang.System.arraycopy(current, 0, array, 0, before);\n            }\n            array[position] = object;\n            if (after > 0) {\n                java.lang.System.arraycopy(current, position, array, position + 1, after);\n            }\n            data = array;\n        }\n    }\n\n    java.lang.Object data_remove(int position) {\n        int currentLength = data_length();\n        if (position > (currentLength - 1)) {\n            throw new java.lang.IndexOutOfBoundsException();\n        } else if (currentLength == 1) {\n            java.lang.Object old = data;\n            data = null;\n            return old;\n        } else if (currentLength == 2) {\n            java.lang.Object[] current = ((java.lang.Object[]) (data));\n            if (position == 0) {\n                data = current[1];\n                return current[0];\n            } else {\n                data = current[0];\n                return current[1];\n            }\n        } else {\n            java.lang.Object[] current = ((java.lang.Object[]) (data));\n            data = new java.lang.Object[currentLength - 1];\n            if (position > 0) {\n                java.lang.System.arraycopy(current, 0, data, 0, position);\n            }\n            if (position != (currentLength - 1)) {\n                final int left = (currentLength - position) - 1;\n                java.lang.System.arraycopy(current, position + 1, data, position, left);\n            }\n            return current[position];\n        }\n    }\n\n    public Component(final java.lang.String id) {\n        this(id, null);\n    }\n\n    public Component(final java.lang.String id, final org.apache.wicket.model.IModel<?> model) {\n        setId(id);\n        getApplication().getComponentInstantiationListeners().onInstantiation(this);\n        final org.apache.wicket.settings.IDebugSettings debugSettings = org.apache.wicket.Application.get().getDebugSettings();\n        if (debugSettings.isLinePreciseReportingOnNewComponentEnabled()) {\n            setMetaData(org.apache.wicket.Component.CONSTRUCTED_AT_KEY, org.apache.wicket.util.string.ComponentStrings.toString(this, new org.apache.wicket.markup.MarkupException(\"constructed\")));\n        }\n        if (model != null) {\n            setModelImpl(wrap(model));\n        }\n    }\n\n    public org.apache.wicket.markup.IMarkupFragment getMarkup() {\n        if (markup != null) {\n            return markup;\n        }\n        if (parent == null) {\n            throw new org.apache.wicket.markup.MarkupException(\"Can not determine Markup. Component is not yet connected to a parent. \" + toString());\n        }\n        markup = parent.getMarkup(this);\n        return markup;\n    }\n\n    final boolean internalOnMarkupAttached() {\n        boolean rtn = getFlag(org.apache.wicket.Component.FLAG_MARKUP_ATTACHED);\n        if (rtn == false) {\n            setFlag(org.apache.wicket.Component.FLAG_MARKUP_ATTACHED, true);\n            onMarkupAttached();\n        }\n        return rtn;\n    }\n\n    protected void onMarkupAttached() {\n        if (org.apache.wicket.Component.log.isDebugEnabled()) {\n            org.apache.wicket.Component.log.debug(\"Markup available \" + toString());\n        }\n        markupIdFromMarkup = getMarkupIdFromMarkup();\n    }\n\n    private boolean moveComponentToItsRealParent() {\n        org.apache.wicket.MarkupContainer parent = getParent();\n        org.apache.wicket.markup.IMarkupFragment markup = getMarkup();\n        if ((parent != null) && (markup != null)) {\n            org.apache.wicket.markup.IMarkupFragment parentMarkup = parent.getMarkup(null);\n            if ((parentMarkup != null) && (markup != parentMarkup)) {\n                if (markup.getMarkupResourceStream() == parentMarkup.getMarkupResourceStream()) {\n                    org.apache.wicket.markup.MarkupStream stream = new org.apache.wicket.markup.MarkupStream(markup);\n                    stream.skipUntil(org.apache.wicket.markup.ComponentTag.class);\n                    org.apache.wicket.markup.ComponentTag openTag = stream.getTag();\n                    if (openTag != null) {\n                        org.apache.wicket.markup.MarkupStream parentStream = new org.apache.wicket.markup.MarkupStream(parentMarkup);\n                        if (parentStream.skipUntil(org.apache.wicket.markup.ComponentTag.class)) {\n                            parentStream.next();\n                        }\n                        java.util.Stack<org.apache.wicket.markup.ComponentTag> stack = new java.util.Stack<org.apache.wicket.markup.ComponentTag>();\n                        while (parentStream.skipUntil(org.apache.wicket.markup.ComponentTag.class)) {\n                            org.apache.wicket.markup.ComponentTag tag = parentStream.getTag();\n                            if (openTag == tag) {\n                                if (stack.isEmpty() == false) {\n                                    final org.apache.wicket.markup.ComponentTag lastTag = stack.pop();\n                                    parent.visitChildren(org.apache.wicket.MarkupContainer.class, new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.MarkupContainer, java.lang.Void>() {\n                                        public void component(final org.apache.wicket.MarkupContainer component, final org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n                                            org.apache.wicket.markup.IMarkupFragment m = component.getMarkup();\n                                            org.apache.wicket.markup.MarkupStream ms = new org.apache.wicket.markup.MarkupStream(m);\n                                            ms.skipUntil(org.apache.wicket.markup.ComponentTag.class);\n                                            if (ms.hasMore() && (lastTag == ms.getTag())) {\n                                                component.add(Component.this);\n                                                visit.stop();\n                                                return;\n                                            }\n                                        }\n                                    });\n                                }\n                                return false;\n                            }\n                            if (tag.isOpen()) {\n                                if (tag.hasNoCloseTag() == false) {\n                                    stack.push(tag);\n                                }\n                            } else if (tag.isOpenClose()) {\n                            } else if (tag.isClose()) {\n                                if (stack.isEmpty() == false) {\n                                    stack.pop();\n                                }\n                            }\n                            parentStream.next();\n                        } \n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public final java.lang.String getMarkupIdFromMarkup() {\n        org.apache.wicket.markup.ComponentTag tag = getMarkupTag();\n        if (tag != null) {\n            java.lang.String id = tag.getAttribute(\"id\");\n            if (org.apache.wicket.util.string.Strings.isEmpty(id) == false) {\n                return id.trim();\n            }\n        }\n        return null;\n    }\n\n    public final void setMarkup(final org.apache.wicket.markup.IMarkupFragment markup) {\n        this.markup = markup;\n    }\n\n    protected void onConfigure() {\n    }\n\n    protected void onInitialize() {\n        setFlag(org.apache.wicket.Component.FLAG_INITIALIZE_SUPER_CALL_VERIFIED, true);\n    }\n\n    final boolean isInitialized() {\n        return getFlag(org.apache.wicket.Component.FLAG_INITIALIZED);\n    }\n\n    void initialize() {\n        fireInitialize();\n    }\n\n    final void fireInitialize() {\n        if (!getFlag(org.apache.wicket.Component.FLAG_INITIALIZED)) {\n            setFlag(org.apache.wicket.Component.FLAG_INITIALIZED, true);\n            setFlag(org.apache.wicket.Component.FLAG_INITIALIZE_SUPER_CALL_VERIFIED, false);\n            onInitialize();\n            if (!getFlag(org.apache.wicket.Component.FLAG_INITIALIZE_SUPER_CALL_VERIFIED)) {\n                throw new java.lang.IllegalStateException(((org.apache.wicket.Component.class.getName() + \" has not been properly initialized. Something in the hierarchy of \") + getClass().getName()) + \" has not called super.onInitialize() in the override of onInitialize() method\");\n            }\n            setFlag(org.apache.wicket.Component.FLAG_INITIALIZE_SUPER_CALL_VERIFIED, false);\n            getApplication().getComponentInitializationListeners().onInitialize(this);\n        }\n    }\n\n    public final void afterRender() {\n        try {\n            setFlag(org.apache.wicket.Component.FLAG_AFTER_RENDERING, true);\n            onAfterRender();\n            getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);\n            if (getFlag(org.apache.wicket.Component.FLAG_AFTER_RENDERING)) {\n                throw new java.lang.IllegalStateException(((org.apache.wicket.Component.class.getName() + \" has not been properly detached. Something in the hierarchy of \") + getClass().getName()) + \" has not called super.onAfterRender() in the override of onAfterRender() method\");\n            }\n            onAfterRenderChildren();\n        } finally {\n            setFlag(org.apache.wicket.Component.FLAG_RENDERING, false);\n        }\n    }\n\n    private final void internalBeforeRender() {\n        configure();\n        if (((determineVisibility() || callOnBeforeRenderIfNotVisible()) && (!getFlag(org.apache.wicket.Component.FLAG_RENDERING))) && (!getFlag(org.apache.wicket.Component.FLAG_PREPARED_FOR_RENDER))) {\n            setFlag(org.apache.wicket.Component.FLAG_BEFORE_RENDER_SUPER_CALL_VERIFIED, false);\n            getApplication().getComponentPreOnBeforeRenderListeners().onBeforeRender(this);\n            clearEnabledInHierarchyCache();\n            onBeforeRender();\n            getApplication().getComponentPostOnBeforeRenderListeners().onBeforeRender(this);\n            if (!getFlag(org.apache.wicket.Component.FLAG_BEFORE_RENDER_SUPER_CALL_VERIFIED)) {\n                throw new java.lang.IllegalStateException(((org.apache.wicket.Component.class.getName() + \" has not been properly rendered. Something in the hierarchy of \") + getClass().getName()) + \" has not called super.onBeforeRender() in the override of onBeforeRender() method\");\n            }\n        }\n    }\n\n    private static final org.apache.wicket.MetaDataKey<java.util.List<org.apache.wicket.Component>> FEEDBACK_LIST = new org.apache.wicket.MetaDataKey<java.util.List<org.apache.wicket.Component>>() {\n        private static final long serialVersionUID = 1L;\n    };\n\n    public final void beforeRender() {\n        if (!(this instanceof org.apache.wicket.feedback.IFeedback)) {\n            internalBeforeRender();\n        } else {\n            java.util.List<org.apache.wicket.Component> feedbacks = getRequestCycle().getMetaData(org.apache.wicket.Component.FEEDBACK_LIST);\n            if (feedbacks == null) {\n                feedbacks = new java.util.ArrayList<org.apache.wicket.Component>();\n                getRequestCycle().setMetaData(org.apache.wicket.Component.FEEDBACK_LIST, feedbacks);\n            }\n            if (this instanceof org.apache.wicket.MarkupContainer) {\n                ((org.apache.wicket.MarkupContainer) (this)).visitChildren(org.apache.wicket.feedback.IFeedback.class, new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.Component, java.lang.Void>() {\n                    public void component(org.apache.wicket.Component component, org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) {\n                        component.beforeRender();\n                    }\n                });\n            }\n            if (!feedbacks.contains(this)) {\n                feedbacks.add(this);\n            }\n        }\n    }\n\n    public final void configure() {\n        if (!getFlag(org.apache.wicket.Component.FLAG_CONFIGURED)) {\n            onConfigure();\n            setFlag(org.apache.wicket.Component.FLAG_CONFIGURED, true);\n        }\n    }\n\n    public final boolean continueToOriginalDestination() {\n        return org.apache.wicket.RestartResponseAtInterceptPageException.continueToOriginalDestination();\n    }\n\n    public final void debug(final java.lang.String message) {\n        org.apache.wicket.Session.get().getFeedbackMessages().debug(this, message);\n        org.apache.wicket.Session.get().dirty();\n    }\n\n    final void internalOnRemove() {\n        setFlag(org.apache.wicket.Component.FLAG_REMOVING_FROM_HIERARCHY, true);\n        onRemove();\n        if (getFlag(org.apache.wicket.Component.FLAG_REMOVING_FROM_HIERARCHY)) {\n            throw new java.lang.IllegalStateException(((org.apache.wicket.Component.class.getName() + \" has not been properly removed from hierachy. Something in the hierarchy of \") + getClass().getName()) + \" has not called super.onRemovalFromHierarchy() in the override of onRemovalFromHierarchy() method\");\n        }\n        removeChildren();\n    }\n\n    public final void detach() {\n        setFlag(org.apache.wicket.Component.FLAG_DETACHING, true);\n        onDetach();\n        if (getFlag(org.apache.wicket.Component.FLAG_DETACHING)) {\n            throw new java.lang.IllegalStateException(((org.apache.wicket.Component.class.getName() + \" has not been properly detached. Something in the hierarchy of \") + getClass().getName()) + \" has not called super.onDetach() in the override of onDetach() method\");\n        }\n        setFlag(org.apache.wicket.Component.FLAG_CONFIGURED, false);\n        detachModels();\n        new org.apache.wicket.Behaviors(this).detach();\n        detachChildren();\n        if (getFlag(org.apache.wicket.Component.FLAG_INHERITABLE_MODEL)) {\n            setModelImpl(null);\n            setFlag(org.apache.wicket.Component.FLAG_INHERITABLE_MODEL, false);\n        }\n        clearEnabledInHierarchyCache();\n        org.apache.wicket.IDetachListener detachListener = getApplication().getFrameworkSettings().getDetachListener();\n        if (detachListener != null) {\n            detachListener.onDetach(this);\n        }\n    }\n\n    public void detachModels() {\n        detachModel();\n    }\n\n    public final void error(final java.io.Serializable message) {\n        org.apache.wicket.Session.get().getFeedbackMessages().error(this, message);\n        org.apache.wicket.Session.get().dirty();\n    }\n\n    public final void fatal(final java.lang.String message) {\n        org.apache.wicket.Session.get().getFeedbackMessages().fatal(this, message);\n        org.apache.wicket.Session.get().dirty();\n    }\n\n    public final <Z> Z findParent(final java.lang.Class<Z> c) {\n        org.apache.wicket.MarkupContainer current = parent;\n        while (current != null) {\n            if (c.isInstance(current)) {\n                return c.cast(current);\n            }\n            current = current.getParent();\n        } \n        return null;\n    }\n\n    public final org.apache.wicket.MarkupContainer findParentWithAssociatedMarkup() {\n        org.apache.wicket.MarkupContainer container = parent;\n        while (container != null) {\n            if (container.hasAssociatedMarkup()) {\n                return container;\n            }\n            container = container.getParent();\n        } \n        throw new org.apache.wicket.WicketRuntimeException(\"Unable to find parent with associated markup\");\n    }\n\n    public final org.apache.wicket.Application getApplication() {\n        return org.apache.wicket.Application.get();\n    }\n\n    public final java.lang.String getClassRelativePath() {\n        return (getClass().getName() + org.apache.wicket.Component.PATH_SEPARATOR) + getPageRelativePath();\n    }\n\n    public <C> org.apache.wicket.util.convert.IConverter<C> getConverter(java.lang.Class<C> type) {\n        return getApplication().getConverterLocator().getConverter(type);\n    }\n\n    public final boolean getEscapeModelStrings() {\n        return getFlag(org.apache.wicket.Component.FLAG_ESCAPE_MODEL_STRINGS);\n    }\n\n    public final org.apache.wicket.feedback.FeedbackMessage getFeedbackMessage() {\n        return org.apache.wicket.Session.get().getFeedbackMessages().messageForComponent(this);\n    }\n\n    public java.lang.String getId() {\n        return id;\n    }\n\n    public final org.apache.wicket.model.IModel<?> getInnermostModel() {\n        return getInnermostModel(getDefaultModel());\n    }\n\n    public java.util.Locale getLocale() {\n        if (parent != null) {\n            return parent.getLocale();\n        }\n        return getSession().getLocale();\n    }\n\n    public final org.apache.wicket.Localizer getLocalizer() {\n        return getApplication().getResourceSettings().getLocalizer();\n    }\n\n    private final org.apache.wicket.markup.ComponentTag getMarkupTag() {\n        org.apache.wicket.markup.IMarkupFragment markup = getMarkup();\n        if (markup != null) {\n            for (int i = 0; i < markup.size(); i++) {\n                org.apache.wicket.markup.MarkupElement elem = markup.get(i);\n                if (elem instanceof org.apache.wicket.markup.ComponentTag) {\n                    return ((org.apache.wicket.markup.ComponentTag) (elem));\n                }\n            }\n        }\n        return null;\n    }\n\n    public final org.apache.wicket.util.value.ValueMap getMarkupAttributes() {\n        org.apache.wicket.markup.ComponentTag tag = getMarkupTag();\n        if (tag != null) {\n            org.apache.wicket.util.value.ValueMap attrs = new org.apache.wicket.util.value.ValueMap(tag.getAttributes());\n            attrs.makeImmutable();\n            return attrs;\n        }\n        return org.apache.wicket.util.value.ValueMap.EMPTY_MAP;\n    }\n\n    public final java.lang.Object getMarkupIdImpl() {\n        if (markupIdFromMarkup != null) {\n            return markupIdFromMarkup;\n        }\n        if (generatedMarkupId != (-1)) {\n            return new java.lang.Integer(generatedMarkupId);\n        }\n        return getMetaData(org.apache.wicket.Component.MARKUP_ID_KEY);\n    }\n\n    private final int nextAutoIndex() {\n        org.apache.wicket.Page page = findPage();\n        if (page == null) {\n            throw new org.apache.wicket.WicketRuntimeException(\"This component is not (yet) coupled to a page. It has to be able \" + (\"to find the page it is supposed to operate in before you can call \" + \"this method (Component#getMarkupId)\"));\n        }\n        return page.getAutoIndex();\n    }\n\n    public java.lang.String getMarkupId(boolean createIfDoesNotExist) {\n        java.lang.Object storedMarkupId = getMarkupIdImpl();\n        if (storedMarkupId instanceof java.lang.String) {\n            return ((java.lang.String) (storedMarkupId));\n        }\n        if ((storedMarkupId == null) && (createIfDoesNotExist == false)) {\n            return null;\n        }\n        final int generatedMarkupId = (storedMarkupId instanceof java.lang.Integer) ? ((java.lang.Integer) (storedMarkupId)).intValue() : org.apache.wicket.Session.get().nextSequenceValue();\n        if (storedMarkupId == null) {\n            setMarkupIdImpl(new java.lang.Integer(generatedMarkupId));\n        }\n        java.lang.String markupIdPrefix = \"id\";\n        if (!org.apache.wicket.Application.get().getConfigurationType().equals(Application.DEPLOYMENT)) {\n            markupIdPrefix = getId();\n        }\n        java.lang.String markupIdPostfix = java.lang.Integer.toHexString(generatedMarkupId).toLowerCase();\n        java.lang.String markupId = markupIdPrefix + markupIdPostfix;\n        char c = markupId.charAt(0);\n        if (!java.lang.Character.isLetter(c)) {\n            markupId = \"id\" + markupId;\n        }\n        markupId = org.apache.wicket.util.string.Strings.replaceAll(markupId, \"_\", \"__\").toString();\n        markupId = markupId.replace('.', '_');\n        markupId = markupId.replace('-', '_');\n        markupId = markupId.replace(' ', '_');\n        return markupId;\n    }\n\n    public java.lang.String getMarkupId() {\n        return getMarkupId(true);\n    }\n\n    public final <M extends java.io.Serializable> M getMetaData(final org.apache.wicket.MetaDataKey<M> key) {\n        return key.get(getMetaData());\n    }\n\n    private org.apache.wicket.MetaDataEntry<?>[] getMetaData() {\n        org.apache.wicket.MetaDataEntry<?>[] metaData = null;\n        int index = (getFlag(org.apache.wicket.Component.FLAG_MODEL_SET)) ? 1 : 0;\n        int length = data_length();\n        if (index < length) {\n            java.lang.Object object = data_get(index);\n            if (object instanceof org.apache.wicket.MetaDataEntry<?>[]) {\n                metaData = ((org.apache.wicket.MetaDataEntry<?>[]) (object));\n            } else if (object instanceof org.apache.wicket.MetaDataEntry) {\n                metaData = new org.apache.wicket.MetaDataEntry[]{ ((org.apache.wicket.MetaDataEntry<?>) (object)) };\n            }\n        }\n        return metaData;\n    }\n\n    public final org.apache.wicket.model.IModel<?> getDefaultModel() {\n        org.apache.wicket.model.IModel<?> model = getModelImpl();\n        if (model == null) {\n            model = initModel();\n            setModelImpl(model);\n        }\n        return model;\n    }\n\n    public final java.lang.Object getDefaultModelObject() {\n        final org.apache.wicket.model.IModel<?> model = getDefaultModel();\n        if (model != null) {\n            try {\n                return model.getObject();\n            } catch (java.lang.RuntimeException ex) {\n                org.apache.wicket.Component.log.error(\"Error while getting default model object for Component: \" + this.toString(true));\n                throw ex;\n            }\n        }\n        return null;\n    }\n\n    public final java.lang.String getDefaultModelObjectAsString() {\n        return getDefaultModelObjectAsString(getDefaultModelObject());\n    }\n\n    public final java.lang.String getDefaultModelObjectAsString(final java.lang.Object modelObject) {\n        if (modelObject != null) {\n            final java.lang.Class<?> objectClass = modelObject.getClass();\n            final org.apache.wicket.util.convert.IConverter converter = getConverter(objectClass);\n            final java.lang.String modelString = converter.convertToString(modelObject, getLocale());\n            if (modelString != null) {\n                if (getFlag(org.apache.wicket.Component.FLAG_ESCAPE_MODEL_STRINGS)) {\n                    return org.apache.wicket.util.string.Strings.escapeMarkup(modelString, false, false).toString();\n                }\n                return modelString;\n            }\n        }\n        return \"\";\n    }\n\n    public final boolean getOutputMarkupId() {\n        return getFlag(org.apache.wicket.Component.FLAG_OUTPUT_MARKUP_ID);\n    }\n\n    public final boolean getOutputMarkupPlaceholderTag() {\n        return getFlag(org.apache.wicket.Component.FLAG_PLACEHOLDER);\n    }\n\n    public final org.apache.wicket.Page getPage() {\n        final org.apache.wicket.Page page = findPage();\n        if (page == null) {\n            throw new org.apache.wicket.WicketRuntimeException(\"No Page found for component \" + this);\n        }\n        return page;\n    }\n\n    public final java.lang.String getPageRelativePath() {\n        return org.apache.wicket.util.string.Strings.afterFirstPathComponent(getPath(), org.apache.wicket.Component.PATH_SEPARATOR);\n    }\n\n    public final org.apache.wicket.MarkupContainer getParent() {\n        return parent;\n    }\n\n    public final java.lang.String getPath() {\n        final org.apache.wicket.util.string.PrependingStringBuffer buffer = new org.apache.wicket.util.string.PrependingStringBuffer(32);\n        for (org.apache.wicket.Component c = this; c != null; c = c.getParent()) {\n            if (buffer.length() > 0) {\n                buffer.prepend(org.apache.wicket.Component.PATH_SEPARATOR);\n            }\n            buffer.prepend(c.getId());\n        }\n        return buffer.toString();\n    }\n\n    public final boolean getRenderBodyOnly() {\n        return getFlag(org.apache.wicket.Component.FLAG_RENDER_BODY_ONLY);\n    }\n\n    public final org.apache.wicket.request.Request getRequest() {\n        org.apache.wicket.request.cycle.RequestCycle requestCycle = getRequestCycle();\n        if (requestCycle == null) {\n            throw new org.apache.wicket.WicketRuntimeException(\"No RequestCycle is currently set!\");\n        }\n        return requestCycle.getRequest();\n    }\n\n    public final org.apache.wicket.request.cycle.RequestCycle getRequestCycle() {\n        return org.apache.wicket.request.cycle.RequestCycle.get();\n    }\n\n    public final org.apache.wicket.request.Response getResponse() {\n        return getRequestCycle().getResponse();\n    }\n\n    public org.apache.wicket.Session getSession() {\n        return org.apache.wicket.Session.get();\n    }\n\n    public long getSizeInBytes() {\n        final org.apache.wicket.MarkupContainer originalParent = parent;\n        parent = null;\n        long size = -1;\n        try {\n            size = org.apache.wicket.util.lang.WicketObjects.sizeof(this);\n        } catch (java.lang.Exception e) {\n            org.apache.wicket.Component.log.error(\"Exception getting size for component \" + this, e);\n        }\n        parent = originalParent;\n        return size;\n    }\n\n    public final java.lang.String getString(final java.lang.String key) {\n        return getString(key, null);\n    }\n\n    public final java.lang.String getString(final java.lang.String key, final org.apache.wicket.model.IModel<?> model) {\n        return getLocalizer().getString(key, this, model);\n    }\n\n    public final java.lang.String getString(final java.lang.String key, final org.apache.wicket.model.IModel<?> model, final java.lang.String defaultValue) {\n        return getLocalizer().getString(key, this, model, defaultValue);\n    }\n\n    public final java.lang.String getStyle() {\n        org.apache.wicket.Session session = getSession();\n        if (session == null) {\n            throw new org.apache.wicket.WicketRuntimeException(\"Wicket Session object not avaiable\");\n        }\n        return session.getStyle();\n    }\n\n    public java.lang.String getVariation() {\n        if (parent != null) {\n            return parent.getVariation();\n        }\n        return null;\n    }\n\n    public final boolean hasBeenRendered() {\n        return getFlag(org.apache.wicket.Component.FLAG_HAS_BEEN_RENDERED);\n    }\n\n    public final boolean hasErrorMessage() {\n        return org.apache.wicket.Session.get().getFeedbackMessages().hasErrorMessageFor(this);\n    }\n\n    public final boolean hasFeedbackMessage() {\n        return org.apache.wicket.Session.get().getFeedbackMessages().hasMessageFor(this);\n    }\n\n    public final void info(final java.lang.String message) {\n        org.apache.wicket.Session.get().getFeedbackMessages().info(this, message);\n        org.apache.wicket.Session.get().dirty();\n    }\n\n    public final boolean isActionAuthorized(org.apache.wicket.authorization.Action action) {\n        org.apache.wicket.authorization.IAuthorizationStrategy authorizationStrategy = getSession().getAuthorizationStrategy();\n        if (authorizationStrategy != null) {\n            return authorizationStrategy.isActionAuthorized(this, action);\n        }\n        return true;\n    }\n\n    public final boolean isEnableAllowed() {\n        return isActionAuthorized(org.apache.wicket.Component.ENABLE);\n    }\n\n    public boolean isEnabled() {\n        return getFlag(org.apache.wicket.Component.FLAG_ENABLED);\n    }\n\n    public final boolean isRenderAllowed() {\n        return getFlag(org.apache.wicket.Component.FLAG_IS_RENDER_ALLOWED);\n    }\n\n    public final boolean isStateless() {\n        if (!getStatelessHint()) {\n            return false;\n        }\n        for (org.apache.wicket.behavior.IBehavior behavior : getBehaviors()) {\n            if (!behavior.getStatelessHint(this)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean isVersioned() {\n        if (!getFlag(org.apache.wicket.Component.FLAG_VERSIONED)) {\n            return false;\n        } else {\n            if (parent != null) {\n                if (!parent.isVersioned()) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    public boolean isVisible() {\n        return getFlag(org.apache.wicket.Component.FLAG_VISIBLE);\n    }\n\n    public final boolean isVisibleInHierarchy() {\n        java.lang.Boolean state = getMetaData(org.apache.wicket.Component.VISIBLE_IN_HIERARCHY_CACHE_KEY);\n        if (state == null) {\n            org.apache.wicket.Component parent = getParent();\n            if ((parent != null) && (!parent.isVisibleInHierarchy())) {\n                state = false;\n            } else {\n                state = determineVisibility();\n            }\n            setMetaData(org.apache.wicket.Component.VISIBLE_IN_HIERARCHY_CACHE_KEY, state);\n        }\n        return state;\n    }\n\n    public final void markRendering(boolean setRenderingFlag) {\n        internalMarkRendering(setRenderingFlag);\n    }\n\n    public final void modelChanged() {\n        internalOnModelChanged();\n        onModelChanged();\n    }\n\n    public final void modelChanging() {\n        checkHierarchyChange(this);\n        onModelChanging();\n        final org.apache.wicket.Page page = findPage();\n        if (page != null) {\n            page.componentModelChanging(this);\n        }\n    }\n\n    public void prepareForRender(boolean setRenderingFlag) {\n        beforeRender();\n        if (setRenderingFlag) {\n            java.util.List<org.apache.wicket.Component> feedbacks = getRequestCycle().getMetaData(org.apache.wicket.Component.FEEDBACK_LIST);\n            if (feedbacks != null) {\n                for (int i = 0; i < feedbacks.size(); i++) {\n                    feedbacks.get(i).internalBeforeRender();\n                }\n            }\n            getRequestCycle().setMetaData(org.apache.wicket.Component.FEEDBACK_LIST, null);\n        }\n        markRendering(setRenderingFlag);\n        setRenderAllowed();\n    }\n\n    public final void prepareForRender() {\n        prepareForRender(true);\n    }\n\n    public final void redirectToInterceptPage(final org.apache.wicket.Page page) {\n        throw new org.apache.wicket.RestartResponseAtInterceptPageException(page);\n    }\n\n    public final void remove() {\n        if (parent == null) {\n            throw new java.lang.IllegalStateException((\"Cannot remove \" + this) + \" from null parent!\");\n        }\n        parent.remove(this);\n    }\n\n    public final void render() {\n        java.lang.RuntimeException exception = null;\n        try {\n            org.apache.wicket.MarkupContainer parent = getParent();\n            if (((parent == null) || (parent.getFlag(org.apache.wicket.Component.FLAG_RENDERING) == false)) || isAuto()) {\n                prepareForRender(true);\n            }\n            render_();\n        } catch (final java.lang.RuntimeException ex) {\n            exception = ex;\n        } finally {\n            try {\n                afterRender();\n            } catch (java.lang.RuntimeException ex2) {\n                if (exception == null) {\n                    exception = ex2;\n                }\n            }\n        }\n        if (exception != null) {\n            throw exception;\n        }\n    }\n\n    private final void render_() {\n        org.apache.wicket.markup.IMarkupFragment markup = getMarkup();\n        if (markup == null) {\n            throw new org.apache.wicket.markup.MarkupNotFoundException(\"Markup not found for Component: \" + toString());\n        }\n        org.apache.wicket.markup.MarkupStream markupStream = new org.apache.wicket.markup.MarkupStream(markup);\n        setMarkupStream(markupStream);\n        markRendering(true);\n        org.apache.wicket.markup.MarkupElement elem = markup.get(0);\n        if (elem instanceof org.apache.wicket.markup.ComponentTag) {\n            ((org.apache.wicket.markup.ComponentTag) (elem)).onBeforeRender(this, markupStream);\n        }\n        if (determineVisibility()) {\n            setFlag(org.apache.wicket.Component.FLAG_HAS_BEEN_RENDERED, true);\n            if (org.apache.wicket.Component.log.isDebugEnabled()) {\n                org.apache.wicket.Component.log.debug(\"Begin render \" + this);\n            }\n            try {\n                notifyBehaviorsComponentBeforeRender();\n                onRender();\n                notifyBehaviorsComponentRendered();\n                rendered();\n            } catch (java.lang.RuntimeException ex) {\n                onException(ex);\n            }\n            if (org.apache.wicket.Component.log.isDebugEnabled()) {\n                org.apache.wicket.Component.log.debug(\"End render \" + this);\n            }\n        } else if ((elem != null) && (elem instanceof org.apache.wicket.markup.ComponentTag)) {\n            if (getFlag(org.apache.wicket.Component.FLAG_PLACEHOLDER)) {\n                renderPlaceholderTag(((org.apache.wicket.markup.ComponentTag) (elem)), getResponse());\n            }\n        }\n    }\n\n    private void onException(final java.lang.RuntimeException ex) {\n        for (org.apache.wicket.behavior.IBehavior behavior : getBehaviors()) {\n            if (isBehaviorAccepted(behavior)) {\n                try {\n                    behavior.exception(this, ex);\n                } catch (java.lang.Throwable ex2) {\n                    org.apache.wicket.Component.log.error(\"Error while cleaning up after exception\", ex2);\n                }\n            }\n        }\n        throw ex;\n    }\n\n    protected void renderPlaceholderTag(final org.apache.wicket.markup.ComponentTag tag, final org.apache.wicket.request.Response response) {\n        java.lang.String ns = (org.apache.wicket.util.string.Strings.isEmpty(tag.getNamespace())) ? null : tag.getNamespace() + \":\";\n        response.write(\"<\");\n        if (ns != null) {\n            response.write(ns);\n        }\n        response.write(tag.getName());\n        response.write(\" id=\\\"\");\n        response.write(getMarkupId());\n        response.write(\"\\\" style=\\\"display:none\\\"></\");\n        if (ns != null) {\n            response.write(ns);\n        }\n        response.write(tag.getName());\n        response.write(\">\");\n    }\n\n    public final void renderComponent() {\n        final org.apache.wicket.markup.IMarkupFragment markup = getMarkup();\n        if (markup == null) {\n            throw new org.apache.wicket.markup.MarkupException(\"Markup not found. Component: \" + toString());\n        }\n        final org.apache.wicket.markup.MarkupStream markupStream = new org.apache.wicket.markup.MarkupStream(markup);\n        final org.apache.wicket.markup.ComponentTag openTag = markupStream.getTag();\n        final org.apache.wicket.markup.ComponentTag tag = openTag.mutable();\n        onComponentTag(tag);\n        if ((!tag.isOpenClose()) && (!tag.isOpen())) {\n            markupStream.throwMarkupException(\"Method renderComponent called on bad markup element: \" + tag);\n        }\n        if (tag.isOpenClose() && openTag.isOpen()) {\n            markupStream.throwMarkupException(\"You can not modify a open tag to open-close: \" + tag);\n        }\n        try {\n            if (getRenderBodyOnly() == false) {\n                renderComponentTag(tag);\n            }\n            markupStream.next();\n            if (tag.isOpen()) {\n                onComponentTagBody(markupStream, tag);\n            }\n            if (tag.isOpen()) {\n                if (openTag.isOpen()) {\n                    renderClosingComponentTag(markupStream, tag, getRenderBodyOnly());\n                } else if (getRenderBodyOnly() == false) {\n                    if (needToRenderTag(openTag)) {\n                        getResponse().write(tag.syntheticCloseTagString());\n                    }\n                }\n            }\n        } catch (org.apache.wicket.WicketRuntimeException wre) {\n            throw wre;\n        } catch (java.lang.RuntimeException re) {\n            throw new org.apache.wicket.WicketRuntimeException(\"Exception in rendering component: \" + this, re);\n        }\n    }\n\n    private boolean needToRenderTag(final org.apache.wicket.markup.ComponentTag openTag) {\n        boolean renderTag = (openTag == null) ? false : !(openTag instanceof org.apache.wicket.markup.WicketTag);\n        if (renderTag == false) {\n            renderTag = !((getRequest() instanceof org.apache.wicket.request.http.WebRequest) && ((org.apache.wicket.request.http.WebRequest) (getRequest())).isAjax());\n            renderTag &= !getApplication().getMarkupSettings().getStripWicketTags();\n        }\n        return renderTag;\n    }\n\n    public final void rendered() {\n        org.apache.wicket.Page page = findPage();\n        if (page != null) {\n            page.componentRendered(this);\n        } else {\n            org.apache.wicket.Component.log.error(\"Component is not connected to a Page. Cannot register the component as being rendered. Component: \" + toString());\n        }\n    }\n\n    public void renderHead(final org.apache.wicket.markup.html.internal.HtmlHeaderContainer container) {\n        if (isVisibleInHierarchy() && isRenderAllowed()) {\n            if (org.apache.wicket.Component.log.isDebugEnabled()) {\n                org.apache.wicket.Component.log.debug(\"renderHead: \" + toString(false));\n            }\n            org.apache.wicket.markup.html.IHeaderResponse response = container.getHeaderResponse();\n            if (response.wasRendered(this) == false) {\n                renderHead(response);\n                response.markRendered(this);\n            }\n            for (org.apache.wicket.behavior.IBehavior behavior : getBehaviors()) {\n                if (isBehaviorAccepted(behavior)) {\n                    if (response.wasRendered(behavior) == false) {\n                        behavior.renderHead(response);\n                        response.markRendered(behavior);\n                    }\n                }\n            }\n        }\n    }\n\n    public org.apache.wicket.Component replaceWith(org.apache.wicket.Component replacement) {\n        if (replacement == null) {\n            throw new java.lang.IllegalArgumentException(\"Argument [[replacement]] cannot be null.\");\n        }\n        if (!getId().equals(replacement.getId())) {\n            throw new java.lang.IllegalArgumentException((((\"Replacement component must have the same id as the component it will replace. Replacement id [[\" + replacement.getId()) + \"]], replaced id [[\") + getId()) + \"]].\");\n        }\n        if (parent == null) {\n            throw new java.lang.IllegalStateException(\"This method can only be called on a component that has already been added to its parent.\");\n        }\n        parent.replace(replacement);\n        return replacement;\n    }\n\n    public final boolean sameInnermostModel(final org.apache.wicket.Component component) {\n        return sameInnermostModel(component.getDefaultModel());\n    }\n\n    public final boolean sameInnermostModel(final org.apache.wicket.model.IModel<?> model) {\n        org.apache.wicket.model.IModel<?> thisModel = getDefaultModel();\n        org.apache.wicket.model.IModel<?> thatModel = model;\n        if ((thisModel != null) && (thatModel != null)) {\n            return getInnermostModel(thisModel) == getInnermostModel(thatModel);\n        }\n        return false;\n    }\n\n    public final org.apache.wicket.Component setEnabled(final boolean enabled) {\n        if (enabled != getFlag(org.apache.wicket.Component.FLAG_ENABLED)) {\n            if (isVersioned()) {\n                final org.apache.wicket.Page page = findPage();\n                if (page != null) {\n                    addStateChange();\n                }\n            }\n            setFlag(org.apache.wicket.Component.FLAG_ENABLED, enabled);\n            onEnabledStateChanged();\n        }\n        return this;\n    }\n\n    void clearEnabledInHierarchyCache() {\n        setMetaData(org.apache.wicket.Component.ENABLED_IN_HIERARCHY_CACHE_KEY, null);\n    }\n\n    void onEnabledStateChanged() {\n        clearEnabledInHierarchyCache();\n    }\n\n    public final org.apache.wicket.Component setEscapeModelStrings(final boolean escapeMarkup) {\n        setFlag(org.apache.wicket.Component.FLAG_ESCAPE_MODEL_STRINGS, escapeMarkup);\n        return this;\n    }\n\n    public final void setMarkupIdImpl(java.lang.Object markupId) {\n        if (((markupId != null) && (!(markupId instanceof java.lang.String))) && (!(markupId instanceof java.lang.Integer))) {\n            throw new java.lang.IllegalArgumentException(\"markupId must be String or Integer\");\n        }\n        if (markupId instanceof java.lang.Integer) {\n            generatedMarkupId = ((java.lang.Integer) (markupId)).intValue();\n            setMetaData(org.apache.wicket.Component.MARKUP_ID_KEY, null);\n            return;\n        }\n        generatedMarkupId = -1;\n        setMetaData(org.apache.wicket.Component.MARKUP_ID_KEY, ((java.lang.String) (markupId)));\n    }\n\n    public org.apache.wicket.Component setMarkupId(java.lang.String markupId) {\n        if ((markupId != null) && org.apache.wicket.util.string.Strings.isEmpty(markupId)) {\n            throw new java.lang.IllegalArgumentException(\"Markup id cannot be an empty string\");\n        }\n        setMarkupIdImpl(markupId);\n        return this;\n    }\n\n    public final <M> void setMetaData(final org.apache.wicket.MetaDataKey<M> key, final M object) {\n        org.apache.wicket.MetaDataEntry<?>[] old = getMetaData();\n        java.lang.Object metaData = null;\n        org.apache.wicket.MetaDataEntry<?>[] metaDataArray = key.set(getMetaData(), object);\n        if ((metaDataArray != null) && (metaDataArray.length > 0)) {\n            metaData = (metaDataArray.length > 1) ? ((java.lang.Object) (metaDataArray)) : metaDataArray[0];\n        }\n        int index = (getFlag(org.apache.wicket.Component.FLAG_MODEL_SET)) ? 1 : 0;\n        if ((old == null) && (metaData != null)) {\n            data_insert(index, metaData);\n        } else if ((old != null) && (metaData != null)) {\n            data_set(index, metaData);\n        } else if ((old != null) && (metaData == null)) {\n            data_remove(index);\n        }\n    }\n\n    public org.apache.wicket.Component setDefaultModel(final org.apache.wicket.model.IModel<?> model) {\n        org.apache.wicket.model.IModel<?> prevModel = getModelImpl();\n        if (prevModel != null) {\n            prevModel.detach();\n        }\n        org.apache.wicket.model.IModel<?> wrappedModel = prevModel;\n        if (prevModel instanceof org.apache.wicket.model.IWrapModel) {\n            wrappedModel = ((org.apache.wicket.model.IWrapModel<?>) (prevModel)).getWrappedModel();\n        }\n        if (wrappedModel != model) {\n            if (wrappedModel != null) {\n                addStateChange();\n            }\n            setModelImpl(wrap(model));\n        }\n        modelChanged();\n        return this;\n    }\n\n    org.apache.wicket.model.IModel<?> getModelImpl() {\n        if (getFlag(org.apache.wicket.Component.FLAG_MODEL_SET)) {\n            return ((org.apache.wicket.model.IModel<?>) (data_get(0)));\n        }\n        return null;\n    }\n\n    void setModelImpl(org.apache.wicket.model.IModel<?> model) {\n        if (getFlag(org.apache.wicket.Component.FLAG_MODEL_SET)) {\n            if (model != null) {\n                data_set(0, model);\n            } else {\n                data_remove(0);\n                setFlag(org.apache.wicket.Component.FLAG_MODEL_SET, false);\n            }\n        } else if (model != null) {\n            data_insert(0, model);\n            setFlag(org.apache.wicket.Component.FLAG_MODEL_SET, true);\n        }\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public final org.apache.wicket.Component setDefaultModelObject(final java.lang.Object object) {\n        final org.apache.wicket.model.IModel<java.lang.Object> model = ((org.apache.wicket.model.IModel<java.lang.Object>) (getDefaultModel()));\n        if (model == null) {\n            throw new java.lang.IllegalStateException(\"Attempt to set model object on null model of component: \" + getPageRelativePath());\n        }\n        if (!isActionAuthorized(org.apache.wicket.Component.ENABLE)) {\n            throw new org.apache.wicket.authorization.UnauthorizedActionException(this, org.apache.wicket.Component.ENABLE);\n        }\n        if (!getModelComparator().compare(this, object)) {\n            modelChanging();\n            model.setObject(object);\n            modelChanged();\n        }\n        return this;\n    }\n\n    public final org.apache.wicket.Component setOutputMarkupId(final boolean output) {\n        setFlag(org.apache.wicket.Component.FLAG_OUTPUT_MARKUP_ID, output);\n        return this;\n    }\n\n    public final org.apache.wicket.Component setOutputMarkupPlaceholderTag(final boolean outputTag) {\n        if (outputTag != getFlag(org.apache.wicket.Component.FLAG_PLACEHOLDER)) {\n            if (outputTag) {\n                setOutputMarkupId(true);\n                setFlag(org.apache.wicket.Component.FLAG_PLACEHOLDER, true);\n            } else {\n                setFlag(org.apache.wicket.Component.FLAG_PLACEHOLDER, false);\n            }\n        }\n        return this;\n    }\n\n    public final org.apache.wicket.Component setRenderBodyOnly(final boolean renderTag) {\n        this.setFlag(org.apache.wicket.Component.FLAG_RENDER_BODY_ONLY, renderTag);\n        return this;\n    }\n\n    public final <C extends org.apache.wicket.request.component.IRequestablePage> void setResponsePage(final java.lang.Class<C> cls) {\n        getRequestCycle().setResponsePage(cls, null);\n    }\n\n    public final <C extends org.apache.wicket.request.component.IRequestablePage> void setResponsePage(final java.lang.Class<C> cls, org.apache.wicket.request.mapper.parameter.PageParameters parameters) {\n        getRequestCycle().setResponsePage(cls, parameters);\n    }\n\n    public final void setResponsePage(final org.apache.wicket.Page page) {\n        getRequestCycle().setResponsePage(page);\n    }\n\n    public org.apache.wicket.Component setVersioned(boolean versioned) {\n        setFlag(org.apache.wicket.Component.FLAG_VERSIONED, versioned);\n        return this;\n    }\n\n    public final org.apache.wicket.Component setVisible(final boolean visible) {\n        if (visible != getFlag(org.apache.wicket.Component.FLAG_VISIBLE)) {\n            addStateChange();\n            setFlag(org.apache.wicket.Component.FLAG_VISIBLE, visible);\n        }\n        return this;\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return toString(false);\n    }\n\n    public java.lang.String toString(final boolean detailed) {\n        if (detailed) {\n            final org.apache.wicket.Page page = findPage();\n            if (page == null) {\n                return new java.lang.StringBuffer(\"[Component id = \").append(getId()).append(\", page = <No Page>, path = \").append(getPath()).append(\".\").append(org.apache.wicket.util.lang.Classes.simpleName(getClass())).append(\"]\").toString();\n            } else {\n                return new java.lang.StringBuffer(\"[Component id = \").append(getId()).append(\", page = \").append(getPage().getClass().getName()).append(\", path = \").append(getPath()).append(\".\").append(org.apache.wicket.util.lang.Classes.simpleName(getClass())).append(\", isVisible = \").append(determineVisibility()).append(\", isVersioned = \").append(isVersioned()).append(\"]\").toString();\n            }\n        } else {\n            return (\"[Component id = \" + getId()) + \"]\";\n        }\n    }\n\n    public final <C extends org.apache.wicket.Page> java.lang.CharSequence urlFor(final java.lang.Class<C> pageClass, final org.apache.wicket.request.mapper.parameter.PageParameters parameters) {\n        return getRequestCycle().urlFor(pageClass, parameters);\n    }\n\n    public final java.lang.CharSequence urlFor(final org.apache.wicket.behavior.IBehavior behaviour, final org.apache.wicket.RequestListenerInterface listener) {\n        org.apache.wicket.request.handler.PageAndComponentProvider provider = new org.apache.wicket.request.handler.PageAndComponentProvider(getPage(), this);\n        int id = getBehaviorId(behaviour);\n        org.apache.wicket.request.IRequestHandler handler;\n        if (getPage().isPageStateless()) {\n            handler = new org.apache.wicket.request.handler.BookmarkableListenerInterfaceRequestHandler(provider, listener, id);\n        } else {\n            handler = new org.apache.wicket.request.handler.ListenerInterfaceRequestHandler(provider, listener, id);\n        }\n        return getRequestCycle().urlFor(handler);\n    }\n\n    public final java.lang.CharSequence urlFor(final org.apache.wicket.request.IRequestHandler requestHandler) {\n        return getRequestCycle().urlFor(requestHandler);\n    }\n\n    public final java.lang.CharSequence urlFor(final org.apache.wicket.RequestListenerInterface listener) {\n        org.apache.wicket.request.handler.PageAndComponentProvider provider = new org.apache.wicket.request.handler.PageAndComponentProvider(getPage(), this);\n        org.apache.wicket.request.IRequestHandler handler;\n        if (getPage().isPageStateless()) {\n            handler = new org.apache.wicket.request.handler.BookmarkableListenerInterfaceRequestHandler(provider, listener);\n        } else {\n            handler = new org.apache.wicket.request.handler.ListenerInterfaceRequestHandler(provider, listener);\n        }\n        return getRequestCycle().urlFor(handler);\n    }\n\n    public final java.lang.CharSequence urlFor(final org.apache.wicket.request.resource.ResourceReference resourceReference, org.apache.wicket.request.mapper.parameter.PageParameters parameters) {\n        return getRequestCycle().urlFor(resourceReference, parameters);\n    }\n\n    public final <R> R visitParents(final java.lang.Class<?> c, final org.apache.wicket.util.visit.IVisitor<org.apache.wicket.Component, R> visitor) {\n        org.apache.wicket.Component current = getParent();\n        org.apache.wicket.util.visit.Visit<R> visit = new org.apache.wicket.util.visit.Visit<R>();\n        while (current != null) {\n            if (c.isInstance(current)) {\n                visitor.component(current, visit);\n                if (visit.isStopped()) {\n                    return visit.getResult();\n                }\n            }\n            current = current.getParent();\n        } \n        return null;\n    }\n\n    public final void warn(final java.lang.String message) {\n        org.apache.wicket.Session.get().getFeedbackMessages().warn(this, message);\n        org.apache.wicket.Session.get().dirty();\n    }\n\n    private void notifyBehaviorsComponentBeforeRender() {\n        for (org.apache.wicket.behavior.IBehavior behavior : getBehaviors()) {\n            if (isBehaviorAccepted(behavior)) {\n                behavior.beforeRender(this);\n            }\n        }\n    }\n\n    private void notifyBehaviorsComponentRendered() {\n        for (org.apache.wicket.behavior.IBehavior behavior : getBehaviors()) {\n            if (isBehaviorAccepted(behavior)) {\n                behavior.afterRender(this);\n            }\n        }\n    }\n\n    protected final void addStateChange() {\n        checkHierarchyChange(this);\n        final org.apache.wicket.Page page = findPage();\n        if (page != null) {\n            page.componentStateChanging(this);\n        }\n    }\n\n    protected final void checkComponentTag(final org.apache.wicket.markup.ComponentTag tag, final java.lang.String name) {\n        if (!tag.getName().equalsIgnoreCase(name)) {\n            java.lang.String msg = java.lang.String.format(\"Component [%s] (path = [%s]) must be \" + \"applied to a tag of type [%s], not: %s\", getId(), getPath(), name, tag.toUserDebugString());\n            findMarkupStream().throwMarkupException(msg);\n        }\n    }\n\n    protected final void checkComponentTagAttribute(final org.apache.wicket.markup.ComponentTag tag, final java.lang.String key, final java.lang.String value) {\n        if (key != null) {\n            final java.lang.String tagAttributeValue = tag.getAttributes().getString(key);\n            if ((tagAttributeValue == null) || (!value.equalsIgnoreCase(tagAttributeValue))) {\n                java.lang.String msg = java.lang.String.format(\"Component [%s] (path = [%s]) must be applied to a tag \" + \"with [%s] attribute matching [%s], not [%s]\", getId(), getPath(), key, value, tagAttributeValue);\n                findMarkupStream().throwMarkupException(msg);\n            }\n        }\n    }\n\n    protected void checkHierarchyChange(final org.apache.wicket.Component component) {\n        if ((!component.isAuto()) && getFlag(org.apache.wicket.Component.FLAG_RENDERING)) {\n            throw new org.apache.wicket.WicketRuntimeException(\"Cannot modify component hierarchy after render phase has started (page version cant change then anymore)\");\n        }\n    }\n\n    protected void detachModel() {\n        org.apache.wicket.model.IModel<?> model = getModelImpl();\n        if (model != null) {\n            model.detach();\n        }\n        if ((model instanceof org.apache.wicket.model.IWrapModel) && (!getFlag(org.apache.wicket.Component.FLAG_INHERITABLE_MODEL))) {\n            ((org.apache.wicket.model.IWrapModel<?>) (model)).getWrappedModel().detach();\n        }\n    }\n\n    protected final java.lang.String exceptionMessage(final java.lang.String message) {\n        return (message + \":\\n\") + toString();\n    }\n\n    protected final org.apache.wicket.markup.MarkupStream findMarkupStream() {\n        return new org.apache.wicket.markup.MarkupStream(getMarkup());\n    }\n\n    protected final org.apache.wicket.Page findPage() {\n        return ((org.apache.wicket.Page) (this instanceof org.apache.wicket.Page ? this : findParent(org.apache.wicket.Page.class)));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <M extends org.apache.wicket.behavior.IBehavior> java.util.List<M> getBehaviors(java.lang.Class<M> type) {\n        return new org.apache.wicket.Behaviors(this).getBehaviors(type);\n    }\n\n    protected final boolean getFlag(final int flag) {\n        return (flags & flag) != 0;\n    }\n\n    protected final boolean getFlag(final short flag) {\n        return getFlag(((int) (flag)));\n    }\n\n    protected final org.apache.wicket.model.IModel<?> getInnermostModel(final org.apache.wicket.model.IModel<?> model) {\n        org.apache.wicket.model.IModel<?> nested = model;\n        while ((nested != null) && (nested instanceof org.apache.wicket.model.IWrapModel)) {\n            final org.apache.wicket.model.IModel<?> next = ((org.apache.wicket.model.IWrapModel<?>) (nested)).getWrappedModel();\n            if (nested == next) {\n                throw new org.apache.wicket.WicketRuntimeException((\"Model for \" + nested) + \" is self-referential\");\n            }\n            nested = next;\n        } \n        return nested;\n    }\n\n    public org.apache.wicket.model.IModelComparator getModelComparator() {\n        return org.apache.wicket.Component.defaultModelComparator;\n    }\n\n    protected boolean getStatelessHint() {\n        return true;\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    protected org.apache.wicket.model.IModel<?> initModel() {\n        org.apache.wicket.model.IModel<?> foundModel = null;\n        for (org.apache.wicket.Component current = getParent(); current != null; current = current.getParent()) {\n            org.apache.wicket.model.IModel<?> model = current.getModelImpl();\n            if ((model instanceof org.apache.wicket.model.IWrapModel) && (!(model instanceof org.apache.wicket.model.IComponentInheritedModel))) {\n                model = ((org.apache.wicket.model.IWrapModel<?>) (model)).getWrappedModel();\n            }\n            if (model instanceof org.apache.wicket.model.IComponentInheritedModel) {\n                foundModel = ((org.apache.wicket.model.IComponentInheritedModel<?>) (model)).wrapOnInheritance(this);\n                setFlag(org.apache.wicket.Component.FLAG_INHERITABLE_MODEL, true);\n                break;\n            }\n        }\n        return foundModel;\n    }\n\n    protected void internalOnModelChanged() {\n    }\n\n    protected boolean isBehaviorAccepted(final org.apache.wicket.behavior.IBehavior behavior) {\n        if ((behavior instanceof org.apache.wicket.AttributeModifier) && (getFlag(org.apache.wicket.Component.FLAG_IGNORE_ATTRIBUTE_MODIFIER) != false)) {\n            return false;\n        }\n        return behavior.isEnabled(this);\n    }\n\n    protected final boolean isIgnoreAttributeModifier() {\n        return this.getFlag(org.apache.wicket.Component.FLAG_IGNORE_ATTRIBUTE_MODIFIER);\n    }\n\n    protected org.apache.wicket.markup.MarkupStream locateMarkupStream() {\n        return new org.apache.wicket.markup.MarkupStream(getMarkup());\n    }\n\n    protected void onAfterRender() {\n        setFlag(org.apache.wicket.Component.FLAG_AFTER_RENDERING, false);\n    }\n\n    protected void onBeforeRender() {\n        setFlag(org.apache.wicket.Component.FLAG_PREPARED_FOR_RENDER, true);\n        onBeforeRenderChildren();\n        setFlag(org.apache.wicket.Component.FLAG_BEFORE_RENDER_SUPER_CALL_VERIFIED, true);\n    }\n\n    @java.lang.Deprecated\n    protected boolean callOnBeforeRenderIfNotVisible() {\n        return false;\n    }\n\n    protected void onComponentTag(final org.apache.wicket.markup.ComponentTag tag) {\n        if (getFlag(org.apache.wicket.Component.FLAG_OUTPUT_MARKUP_ID)) {\n            tag.put(org.apache.wicket.Component.MARKUP_ID_ATTR_NAME, getMarkupId());\n        }\n        if (getApplication().getDebugSettings().isOutputComponentPath()) {\n            java.lang.String path = getPageRelativePath();\n            path = path.replace(\"_\", \"__\");\n            path = path.replace(\":\", \"_\");\n            tag.put(\"wicketpath\", path);\n        }\n    }\n\n    protected void onComponentTagBody(final org.apache.wicket.markup.MarkupStream markupStream, final org.apache.wicket.markup.ComponentTag openTag) {\n    }\n\n    protected void onDetach() {\n        setFlag(org.apache.wicket.Component.FLAG_DETACHING, false);\n    }\n\n    protected void onRemove() {\n        setFlag(org.apache.wicket.Component.FLAG_REMOVING_FROM_HIERARCHY, false);\n    }\n\n    protected void onModelChanged() {\n    }\n\n    protected void onModelChanging() {\n    }\n\n    protected abstract void onRender();\n\n    protected final void renderComponentTag(org.apache.wicket.markup.ComponentTag tag) {\n        if (needToRenderTag(tag)) {\n            java.util.List<? extends org.apache.wicket.behavior.IBehavior> behaviors = getBehaviors();\n            if ((((behaviors != null) && (!behaviors.isEmpty())) && (!tag.isClose())) && (isIgnoreAttributeModifier() == false)) {\n                tag = tag.mutable();\n                for (org.apache.wicket.behavior.IBehavior behavior : behaviors) {\n                    if (isBehaviorAccepted(behavior)) {\n                        behavior.onComponentTag(this, tag);\n                    }\n                }\n            }\n            if (tag.hasBehaviors()) {\n                java.util.Iterator<? extends org.apache.wicket.behavior.IBehavior> tagBehaviors = tag.getBehaviors();\n                while (tagBehaviors.hasNext()) {\n                    final org.apache.wicket.behavior.IBehavior behavior = tagBehaviors.next();\n                    if (behavior.isEnabled(this)) {\n                        behavior.onComponentTag(this, tag);\n                    }\n                    behavior.detach(this);\n                } \n            }\n            tag.writeOutput(getResponse(), !needToRenderTag(null), getMarkup().getMarkupResourceStream().getWicketNamespace());\n        }\n    }\n\n    protected final void replaceComponentTagBody(final org.apache.wicket.markup.MarkupStream markupStream, final org.apache.wicket.markup.ComponentTag tag, final java.lang.CharSequence body) {\n        org.apache.wicket.markup.ComponentTag markupOpenTag = null;\n        if (tag.isOpen()) {\n            markupStream.setCurrentIndex(markupStream.getCurrentIndex() - 1);\n            markupOpenTag = markupStream.getTag();\n            markupStream.next();\n            if (markupOpenTag.isOpen()) {\n                markupStream.skipRawMarkup();\n            }\n        }\n        if (body != null) {\n            getResponse().write(body);\n        }\n        if (tag.isOpen()) {\n            if (((markupOpenTag != null) && markupOpenTag.isOpen()) && (!markupStream.atCloseTag())) {\n                markupStream.throwMarkupException((((\"Expected close tag for '\" + markupOpenTag) + \"' Possible attempt to embed component(s) '\") + markupStream.get()) + \"' in the body of this component which discards its body\");\n            }\n        }\n    }\n\n    protected final void setAuto(final boolean auto) {\n        setFlag(org.apache.wicket.Component.FLAG_AUTO, auto);\n    }\n\n    protected final void setFlag(final int flag, final boolean set) {\n        if (set) {\n            flags |= flag;\n        } else {\n            flags &= ~flag;\n        }\n    }\n\n    protected final void setFlag(final short flag, final boolean set) {\n        setFlag(((int) (flag)), set);\n    }\n\n    protected final org.apache.wicket.Component setIgnoreAttributeModifier(final boolean ignore) {\n        this.setFlag(org.apache.wicket.Component.FLAG_IGNORE_ATTRIBUTE_MODIFIER, ignore);\n        return this;\n    }\n\n    protected void setMarkupStream(final org.apache.wicket.markup.MarkupStream markupStream) {\n    }\n\n    protected final <V> org.apache.wicket.model.IModel<V> wrap(final org.apache.wicket.model.IModel<V> model) {\n        if (model instanceof org.apache.wicket.model.IComponentAssignedModel) {\n            return ((org.apache.wicket.model.IComponentAssignedModel<V>) (model)).wrapOnAssignment(this);\n        }\n        return model;\n    }\n\n    void detachChildren() {\n    }\n\n    void removeChildren() {\n    }\n\n    public org.apache.wicket.Component get(final java.lang.String path) {\n        if (path.equals(\"\")) {\n            return this;\n        }\n        throw new java.lang.IllegalArgumentException(exceptionMessage((\"Component is not a container and so does \" + \"not contain the path \") + path));\n    }\n\n    final boolean hasMarkupIdMetaData() {\n        return getMarkupId() != null;\n    }\n\n    void internalMarkRendering(boolean setRenderingFlag) {\n        if (setRenderingFlag) {\n            setFlag(org.apache.wicket.Component.FLAG_PREPARED_FOR_RENDER, false);\n            setFlag(org.apache.wicket.Component.FLAG_RENDERING, true);\n        }\n    }\n\n    public final boolean isAuto() {\n        for (org.apache.wicket.Component current = this; current != null; current = current.getParent()) {\n            if (current.getFlag(org.apache.wicket.Component.FLAG_AUTO)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    boolean isPreparedForRender() {\n        return getFlag(org.apache.wicket.Component.FLAG_PREPARED_FOR_RENDER);\n    }\n\n    void onAfterRenderChildren() {\n    }\n\n    void onBeforeRenderChildren() {\n    }\n\n    final void renderClosingComponentTag(final org.apache.wicket.markup.MarkupStream markupStream, final org.apache.wicket.markup.ComponentTag openTag, final boolean renderBodyOnly) {\n        if (openTag.isOpen()) {\n            if (markupStream.atCloseTag() && markupStream.getTag().closes(openTag)) {\n                if (renderBodyOnly == false) {\n                    org.apache.wicket.markup.ComponentTag closeTag = markupStream.getTag();\n                    if (openTag.getNameChanged()) {\n                        closeTag = closeTag.mutable();\n                        closeTag.setName(openTag.getName());\n                        closeTag.setNamespace(openTag.getNamespace());\n                    }\n                    renderComponentTag(closeTag);\n                }\n            } else if (openTag.requiresCloseTag()) {\n                markupStream.throwMarkupException(\"Expected close tag for \" + openTag);\n            }\n        }\n    }\n\n    final void setId(final java.lang.String id) {\n        if (!(this instanceof org.apache.wicket.Page)) {\n            if (org.apache.wicket.util.string.Strings.isEmpty(id)) {\n                throw new org.apache.wicket.WicketRuntimeException(\"Null or empty component ID's are not allowed.\");\n            }\n        }\n        if ((id != null) && (id.indexOf(':') != (-1))) {\n            throw new org.apache.wicket.WicketRuntimeException(\"The component ID must not contain ':' chars.\");\n        }\n        this.id = id;\n    }\n\n    final void setParent(final org.apache.wicket.MarkupContainer parent) {\n        if ((this.parent != null) && org.apache.wicket.Component.log.isDebugEnabled()) {\n            org.apache.wicket.Component.log.debug(((\"Replacing parent \" + this.parent) + \" with \") + parent);\n        }\n        this.parent = parent;\n    }\n\n    final void setRenderAllowed(boolean renderAllowed) {\n        setFlag(org.apache.wicket.Component.FLAG_IS_RENDER_ALLOWED, renderAllowed);\n    }\n\n    void setRenderAllowed() {\n        setRenderAllowed(isActionAuthorized(org.apache.wicket.Component.RENDER));\n    }\n\n    public final org.apache.wicket.Component setVisibilityAllowed(boolean allowed) {\n        setFlag(org.apache.wicket.Component.FLAG_VISIBILITY_ALLOWED, allowed);\n        return this;\n    }\n\n    public final boolean isVisibilityAllowed() {\n        return getFlag(org.apache.wicket.Component.FLAG_VISIBILITY_ALLOWED);\n    }\n\n    public final boolean determineVisibility() {\n        return (isVisible() && isRenderAllowed()) && isVisibilityAllowed();\n    }\n\n    public final boolean isEnabledInHierarchy() {\n        java.lang.Boolean state = getMetaData(org.apache.wicket.Component.ENABLED_IN_HIERARCHY_CACHE_KEY);\n        if (state == null) {\n            org.apache.wicket.Component parent = getParent();\n            if ((parent != null) && (!parent.isEnabledInHierarchy())) {\n                state = false;\n            } else {\n                state = isEnabled() && isEnableAllowed();\n            }\n            setMetaData(org.apache.wicket.Component.ENABLED_IN_HIERARCHY_CACHE_KEY, state);\n        }\n        return state;\n    }\n\n    public final boolean canCallListenerInterface() {\n        return isEnabledInHierarchy() && isVisibleInHierarchy();\n    }\n\n    public void renderHead(org.apache.wicket.markup.html.IHeaderResponse response) {\n    }\n\n    public void onEvent(org.apache.wicket.event.IEvent<?> event) {\n    }\n\n    public final void send(org.apache.wicket.event.IEventSink sink, org.apache.wicket.event.Broadcast type, java.lang.Object payload) {\n        new org.apache.wicket.ComponentEventSender(this).send(sink, type, payload);\n    }\n\n    public org.apache.wicket.Component remove(final org.apache.wicket.behavior.IBehavior behavior) {\n        new org.apache.wicket.Behaviors(this).remove(behavior);\n        return this;\n    }\n\n    public final org.apache.wicket.behavior.IBehavior getBehaviorById(int id) {\n        return new org.apache.wicket.Behaviors(this).getBehaviorById(id);\n    }\n\n    public final int getBehaviorId(org.apache.wicket.behavior.IBehavior behavior) {\n        return new org.apache.wicket.Behaviors(this).getBehaviorId(behavior);\n    }\n\n    public org.apache.wicket.Component add(final org.apache.wicket.behavior.IBehavior... behaviors) {\n        new org.apache.wicket.Behaviors(this).add(behaviors);\n        return this;\n    }\n\n    public final java.util.List<? extends org.apache.wicket.behavior.IBehavior> getBehaviors() {\n        return getBehaviors(org.apache.wicket.behavior.IBehavior.class);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "state = false",
            "src_parent": "{\n    state = false;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "state = determineVisibility()",
            "src_parent": "{\n    state = determineVisibility();\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "java.lang.Boolean state = getMetaData(org.apache.wicket.Component.VISIBLE_IN_HIERARCHY_CACHE_KEY)",
            "src_parent": "{\n    java.lang.Boolean state = getMetaData(org.apache.wicket.Component.VISIBLE_IN_HIERARCHY_CACHE_KEY);\n    if (state == null) {\n        org.apache.wicket.Component parent = getParent();\n        if ((parent != null) && (!parent.isVisibleInHierarchy())) {\n            state = false;\n        } else {\n            state = determineVisibility();\n        }\n        setMetaData(org.apache.wicket.Component.VISIBLE_IN_HIERARCHY_CACHE_KEY, state);\n    }\n    return state;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (state == null) {\n    org.apache.wicket.Component parent = getParent();\n    if ((parent != null) && (!parent.isVisibleInHierarchy())) {\n        state = false;\n    } else {\n        state = determineVisibility();\n    }\n    setMetaData(org.apache.wicket.Component.VISIBLE_IN_HIERARCHY_CACHE_KEY, state);\n}",
            "src_parent": "{\n    java.lang.Boolean state = getMetaData(org.apache.wicket.Component.VISIBLE_IN_HIERARCHY_CACHE_KEY);\n    if (state == null) {\n        org.apache.wicket.Component parent = getParent();\n        if ((parent != null) && (!parent.isVisibleInHierarchy())) {\n            state = false;\n        } else {\n            state = determineVisibility();\n        }\n        setMetaData(org.apache.wicket.Component.VISIBLE_IN_HIERARCHY_CACHE_KEY, state);\n    }\n    return state;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "return state",
            "src_parent": "{\n    java.lang.Boolean state = getMetaData(org.apache.wicket.Component.VISIBLE_IN_HIERARCHY_CACHE_KEY);\n    if (state == null) {\n        org.apache.wicket.Component parent = getParent();\n        if ((parent != null) && (!parent.isVisibleInHierarchy())) {\n            state = false;\n        } else {\n            state = determineVisibility();\n        }\n        setMetaData(org.apache.wicket.Component.VISIBLE_IN_HIERARCHY_CACHE_KEY, state);\n    }\n    return state;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if ((parent != null) && (!parent.isVisibleInHierarchy())) {\n    return false;\n} else {\n    return determineVisibility();\n}",
            "src_parent": "{\n    org.apache.wicket.Component parent = getParent();\n    if ((parent != null) && (!parent.isVisibleInHierarchy())) {\n        return false;\n    } else {\n        return determineVisibility();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "return false",
            "src_parent": "{\n    return false;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "return determineVisibility()",
            "src_parent": "{\n    return determineVisibility();\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.wicket.Component parent = getParent()",
            "dst_parent": "{\n    org.apache.wicket.Component parent = getParent();\n    if ((parent != null) && (!parent.isVisibleInHierarchy())) {\n        return false;\n    } else {\n        return determineVisibility();\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "org.apache.wicket.Component parent = getParent()",
            "src_parent": "{\n    org.apache.wicket.Component parent = getParent();\n    if ((parent != null) && (!parent.isVisibleInHierarchy())) {\n        state = false;\n    } else {\n        state = determineVisibility();\n    }\n    setMetaData(org.apache.wicket.Component.VISIBLE_IN_HIERARCHY_CACHE_KEY, state);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(parent != null) && (!parent.isVisibleInHierarchy())",
            "dst_parent": "if ((parent != null) && (!parent.isVisibleInHierarchy())) {\n    return false;\n} else {\n    return determineVisibility();\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(parent != null) && (!parent.isVisibleInHierarchy())",
            "src_parent": "if ((parent != null) && (!parent.isVisibleInHierarchy())) {\n    state = false;\n} else {\n    state = determineVisibility();\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    return false;\n}",
            "dst_parent": "if ((parent != null) && (!parent.isVisibleInHierarchy())) {\n    return false;\n} else {\n    return determineVisibility();\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    state = false;\n}",
            "src_parent": "if ((parent != null) && (!parent.isVisibleInHierarchy())) {\n    state = false;\n} else {\n    state = determineVisibility();\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    return determineVisibility();\n}",
            "dst_parent": "if ((parent != null) && (!parent.isVisibleInHierarchy())) {\n    return false;\n} else {\n    return determineVisibility();\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    state = determineVisibility();\n}",
            "src_parent": "if ((parent != null) && (!parent.isVisibleInHierarchy())) {\n    state = false;\n} else {\n    state = determineVisibility();\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "determineVisibility()",
            "dst_parent": "return determineVisibility()",
            "dst_parent_type": "Return",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "determineVisibility()",
            "src_parent": "state = determineVisibility()",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "Component"
    }
  ],
  "id": "wicket_4d7f7359"
}