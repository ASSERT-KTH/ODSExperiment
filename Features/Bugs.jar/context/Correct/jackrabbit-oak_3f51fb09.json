{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static java.lang.String getString(javax.jcr.Value value, int type) throws javax.jcr.RepositoryException {\n    if (value instanceof org.apache.jackrabbit.oak.plugins.value.ValueImpl) {\n        return ((org.apache.jackrabbit.oak.plugins.value.ValueImpl) (value)).getOakString();\n    } else if ((type == javax.jcr.PropertyType.NAME) || (type == javax.jcr.PropertyType.PATH)) {\n        throw new java.lang.IllegalArgumentException(((\"Cannot create name of path property state from Value \" + \"of class '\") + value.getClass()) + '\\'');\n    } else {\n        return value.getString();\n    }\n}",
            "src_parent": "public final class PropertyStates {\n    private PropertyStates() {\n    }\n\n    @javax.annotation.Nonnull\n    public static org.apache.jackrabbit.oak.api.PropertyState createProperty(java.lang.String name, javax.jcr.Value value) throws javax.jcr.RepositoryException {\n        int type = value.getType();\n        switch (type) {\n            case javax.jcr.PropertyType.STRING :\n                return org.apache.jackrabbit.oak.plugins.memory.StringPropertyState.stringProperty(name, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.getString(value, type));\n            case javax.jcr.PropertyType.BINARY :\n                return org.apache.jackrabbit.oak.plugins.memory.BinaryPropertyState.binaryProperty(name, value);\n            case javax.jcr.PropertyType.LONG :\n                return org.apache.jackrabbit.oak.plugins.memory.LongPropertyState.createLongProperty(name, value.getLong());\n            case javax.jcr.PropertyType.DOUBLE :\n                return org.apache.jackrabbit.oak.plugins.memory.DoublePropertyState.doubleProperty(name, value.getDouble());\n            case javax.jcr.PropertyType.DATE :\n                return org.apache.jackrabbit.oak.plugins.memory.LongPropertyState.createDateProperty(name, value.getLong());\n            case javax.jcr.PropertyType.BOOLEAN :\n                return org.apache.jackrabbit.oak.plugins.memory.BooleanPropertyState.booleanProperty(name, value.getBoolean());\n            case javax.jcr.PropertyType.DECIMAL :\n                return org.apache.jackrabbit.oak.plugins.memory.DecimalPropertyState.decimalProperty(name, value.getDecimal());\n            default :\n                return new org.apache.jackrabbit.oak.plugins.memory.GenericPropertyState(name, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.getString(value, type), org.apache.jackrabbit.oak.api.Type.fromTag(type, false));\n        }\n    }\n\n    @javax.annotation.Nonnull\n    public static org.apache.jackrabbit.oak.api.PropertyState createProperty(java.lang.String name, java.lang.Iterable<javax.jcr.Value> values) throws javax.jcr.RepositoryException {\n        javax.jcr.Value first = com.google.common.collect.Iterables.getFirst(values, null);\n        if (first == null) {\n            return org.apache.jackrabbit.oak.plugins.memory.EmptyPropertyState.emptyProperty(name, org.apache.jackrabbit.oak.plugins.memory.STRINGS);\n        }\n        int type = first.getType();\n        switch (type) {\n            case javax.jcr.PropertyType.STRING :\n                java.util.List<java.lang.String> strings = com.google.common.collect.Lists.newArrayList();\n                for (javax.jcr.Value value : values) {\n                    strings.add(org.apache.jackrabbit.oak.plugins.memory.PropertyStates.getString(value, type));\n                }\n                return org.apache.jackrabbit.oak.plugins.memory.MultiStringPropertyState.stringProperty(name, strings);\n            case javax.jcr.PropertyType.BINARY :\n                java.util.List<org.apache.jackrabbit.oak.api.Blob> blobs = com.google.common.collect.Lists.newArrayList();\n                for (javax.jcr.Value value : values) {\n                    blobs.add(new org.apache.jackrabbit.oak.plugins.memory.ValueBasedBlob(value));\n                }\n                return org.apache.jackrabbit.oak.plugins.memory.MultiBinaryPropertyState.binaryPropertyFromBlob(name, blobs);\n            case javax.jcr.PropertyType.LONG :\n                java.util.List<java.lang.Long> longs = com.google.common.collect.Lists.newArrayList();\n                for (javax.jcr.Value value : values) {\n                    longs.add(value.getLong());\n                }\n                return org.apache.jackrabbit.oak.plugins.memory.MultiLongPropertyState.createLongProperty(name, longs);\n            case javax.jcr.PropertyType.DOUBLE :\n                java.util.List<java.lang.Double> doubles = com.google.common.collect.Lists.newArrayList();\n                for (javax.jcr.Value value : values) {\n                    doubles.add(value.getDouble());\n                }\n                return org.apache.jackrabbit.oak.plugins.memory.MultiDoublePropertyState.doubleProperty(name, doubles);\n            case javax.jcr.PropertyType.DATE :\n                java.util.List<java.lang.Long> dates = com.google.common.collect.Lists.newArrayList();\n                for (javax.jcr.Value value : values) {\n                    dates.add(value.getLong());\n                }\n                return org.apache.jackrabbit.oak.plugins.memory.MultiLongPropertyState.createDatePropertyFromLong(name, dates);\n            case javax.jcr.PropertyType.BOOLEAN :\n                java.util.List<java.lang.Boolean> booleans = com.google.common.collect.Lists.newArrayList();\n                for (javax.jcr.Value value : values) {\n                    booleans.add(value.getBoolean());\n                }\n                return org.apache.jackrabbit.oak.plugins.memory.MultiBooleanPropertyState.booleanProperty(name, booleans);\n            case javax.jcr.PropertyType.DECIMAL :\n                java.util.List<java.math.BigDecimal> decimals = com.google.common.collect.Lists.newArrayList();\n                for (javax.jcr.Value value : values) {\n                    decimals.add(value.getDecimal());\n                }\n                return org.apache.jackrabbit.oak.plugins.memory.MultiDecimalPropertyState.decimalProperty(name, decimals);\n            default :\n                java.util.List<java.lang.String> vals = com.google.common.collect.Lists.newArrayList();\n                for (javax.jcr.Value value : values) {\n                    vals.add(org.apache.jackrabbit.oak.plugins.memory.PropertyStates.getString(value, type));\n                }\n                return new org.apache.jackrabbit.oak.plugins.memory.MultiGenericPropertyState(name, vals, org.apache.jackrabbit.oak.api.Type.fromTag(type, true));\n        }\n    }\n\n    private static java.lang.String getString(javax.jcr.Value value, int type) throws javax.jcr.RepositoryException {\n        if (value instanceof org.apache.jackrabbit.oak.plugins.value.ValueImpl) {\n            return ((org.apache.jackrabbit.oak.plugins.value.ValueImpl) (value)).getOakString();\n        } else if ((type == javax.jcr.PropertyType.NAME) || (type == javax.jcr.PropertyType.PATH)) {\n            throw new java.lang.IllegalArgumentException(((\"Cannot create name of path property state from Value \" + \"of class '\") + value.getClass()) + '\\'');\n        } else {\n            return value.getString();\n        }\n    }\n\n    @javax.annotation.Nonnull\n    public static org.apache.jackrabbit.oak.api.PropertyState createProperty(java.lang.String name, java.lang.String value, int type) {\n        switch (type) {\n            case javax.jcr.PropertyType.STRING :\n                return org.apache.jackrabbit.oak.plugins.memory.StringPropertyState.stringProperty(name, value);\n            case javax.jcr.PropertyType.BINARY :\n                return org.apache.jackrabbit.oak.plugins.memory.BinaryPropertyState.binaryProperty(name, org.apache.jackrabbit.oak.plugins.value.Conversions.convert(value).toBinary());\n            case javax.jcr.PropertyType.LONG :\n                return org.apache.jackrabbit.oak.plugins.memory.LongPropertyState.createLongProperty(name, org.apache.jackrabbit.oak.plugins.value.Conversions.convert(value).toLong());\n            case javax.jcr.PropertyType.DOUBLE :\n                return org.apache.jackrabbit.oak.plugins.memory.DoublePropertyState.doubleProperty(name, org.apache.jackrabbit.oak.plugins.value.Conversions.convert(value).toDouble());\n            case javax.jcr.PropertyType.DATE :\n                return org.apache.jackrabbit.oak.plugins.memory.LongPropertyState.createDateProperty(name, value);\n            case javax.jcr.PropertyType.BOOLEAN :\n                return org.apache.jackrabbit.oak.plugins.memory.BooleanPropertyState.booleanProperty(name, org.apache.jackrabbit.oak.plugins.value.Conversions.convert(value).toBoolean());\n            case javax.jcr.PropertyType.DECIMAL :\n                return org.apache.jackrabbit.oak.plugins.memory.DecimalPropertyState.decimalProperty(name, org.apache.jackrabbit.oak.plugins.value.Conversions.convert(value).toDecimal());\n            default :\n                return new org.apache.jackrabbit.oak.plugins.memory.GenericPropertyState(name, value, org.apache.jackrabbit.oak.api.Type.fromTag(type, false));\n        }\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    @javax.annotation.Nonnull\n    public static org.apache.jackrabbit.oak.api.PropertyState createProperty(java.lang.String name, java.lang.Object value, org.apache.jackrabbit.oak.api.Type<?> type) {\n        switch (type.tag()) {\n            case javax.jcr.PropertyType.STRING :\n                return type.isArray() ? org.apache.jackrabbit.oak.plugins.memory.MultiStringPropertyState.stringProperty(name, ((java.lang.Iterable<java.lang.String>) (value))) : org.apache.jackrabbit.oak.plugins.memory.StringPropertyState.stringProperty(name, ((java.lang.String) (value)));\n            case javax.jcr.PropertyType.BINARY :\n                return type.isArray() ? org.apache.jackrabbit.oak.plugins.memory.MultiBinaryPropertyState.binaryPropertyFromBlob(name, ((java.lang.Iterable<org.apache.jackrabbit.oak.api.Blob>) (value))) : org.apache.jackrabbit.oak.plugins.memory.BinaryPropertyState.binaryProperty(name, ((org.apache.jackrabbit.oak.api.Blob) (value)));\n            case javax.jcr.PropertyType.LONG :\n                return type.isArray() ? org.apache.jackrabbit.oak.plugins.memory.MultiLongPropertyState.createLongProperty(name, ((java.lang.Iterable<java.lang.Long>) (value))) : org.apache.jackrabbit.oak.plugins.memory.LongPropertyState.createLongProperty(name, ((java.lang.Long) (value)));\n            case javax.jcr.PropertyType.DOUBLE :\n                return type.isArray() ? org.apache.jackrabbit.oak.plugins.memory.MultiDoublePropertyState.doubleProperty(name, ((java.lang.Iterable<java.lang.Double>) (value))) : org.apache.jackrabbit.oak.plugins.memory.DoublePropertyState.doubleProperty(name, ((java.lang.Double) (value)));\n            case javax.jcr.PropertyType.DATE :\n                return type.isArray() ? org.apache.jackrabbit.oak.plugins.memory.MultiLongPropertyState.createDateProperty(name, ((java.lang.Iterable<java.lang.String>) (value))) : org.apache.jackrabbit.oak.plugins.memory.LongPropertyState.createDateProperty(name, ((java.lang.String) (value)));\n            case javax.jcr.PropertyType.BOOLEAN :\n                return type.isArray() ? org.apache.jackrabbit.oak.plugins.memory.MultiBooleanPropertyState.booleanProperty(name, ((java.lang.Iterable<java.lang.Boolean>) (value))) : org.apache.jackrabbit.oak.plugins.memory.BooleanPropertyState.booleanProperty(name, ((java.lang.Boolean) (value)));\n            case javax.jcr.PropertyType.NAME :\n                return type.isArray() ? org.apache.jackrabbit.oak.plugins.memory.MultiGenericPropertyState.nameProperty(name, ((java.lang.Iterable<java.lang.String>) (value))) : org.apache.jackrabbit.oak.plugins.memory.GenericPropertyState.nameProperty(name, ((java.lang.String) (value)));\n            case javax.jcr.PropertyType.PATH :\n                return type.isArray() ? org.apache.jackrabbit.oak.plugins.memory.MultiGenericPropertyState.pathProperty(name, ((java.lang.Iterable<java.lang.String>) (value))) : org.apache.jackrabbit.oak.plugins.memory.GenericPropertyState.pathProperty(name, ((java.lang.String) (value)));\n            case javax.jcr.PropertyType.REFERENCE :\n                return type.isArray() ? org.apache.jackrabbit.oak.plugins.memory.MultiGenericPropertyState.referenceProperty(name, ((java.lang.Iterable<java.lang.String>) (value))) : org.apache.jackrabbit.oak.plugins.memory.GenericPropertyState.referenceProperty(name, ((java.lang.String) (value)));\n            case javax.jcr.PropertyType.WEAKREFERENCE :\n                return type.isArray() ? org.apache.jackrabbit.oak.plugins.memory.MultiGenericPropertyState.weakreferenceProperty(name, ((java.lang.Iterable<java.lang.String>) (value))) : org.apache.jackrabbit.oak.plugins.memory.GenericPropertyState.weakreferenceProperty(name, ((java.lang.String) (value)));\n            case javax.jcr.PropertyType.URI :\n                return type.isArray() ? org.apache.jackrabbit.oak.plugins.memory.MultiGenericPropertyState.uriProperty(name, ((java.lang.Iterable<java.lang.String>) (value))) : org.apache.jackrabbit.oak.plugins.memory.GenericPropertyState.uriProperty(name, ((java.lang.String) (value)));\n            case javax.jcr.PropertyType.DECIMAL :\n                return type.isArray() ? org.apache.jackrabbit.oak.plugins.memory.MultiDecimalPropertyState.decimalProperty(name, ((java.lang.Iterable<java.math.BigDecimal>) (value))) : org.apache.jackrabbit.oak.plugins.memory.DecimalPropertyState.decimalProperty(name, ((java.math.BigDecimal) (value)));\n            default :\n                throw new java.lang.IllegalArgumentException(\"Invalid type: \" + type);\n        }\n    }\n\n    @javax.annotation.Nonnull\n    public static <T> org.apache.jackrabbit.oak.api.PropertyState createProperty(java.lang.String name, T value) {\n        if (value instanceof java.lang.String) {\n            return org.apache.jackrabbit.oak.plugins.memory.StringPropertyState.stringProperty(name, ((java.lang.String) (value)));\n        } else if (value instanceof org.apache.jackrabbit.oak.api.Blob) {\n            return org.apache.jackrabbit.oak.plugins.memory.BinaryPropertyState.binaryProperty(name, ((org.apache.jackrabbit.oak.api.Blob) (value)));\n        } else if (value instanceof byte[]) {\n            return org.apache.jackrabbit.oak.plugins.memory.BinaryPropertyState.binaryProperty(name, ((byte[]) (value)));\n        } else if (value instanceof java.lang.Long) {\n            return org.apache.jackrabbit.oak.plugins.memory.LongPropertyState.createLongProperty(name, ((java.lang.Long) (value)));\n        } else if (value instanceof java.lang.Integer) {\n            return org.apache.jackrabbit.oak.plugins.memory.LongPropertyState.createLongProperty(name, ((long) ((java.lang.Integer) (value))));\n        } else if (value instanceof java.lang.Double) {\n            return org.apache.jackrabbit.oak.plugins.memory.DoublePropertyState.doubleProperty(name, ((java.lang.Double) (value)));\n        } else if (value instanceof java.lang.Boolean) {\n            return org.apache.jackrabbit.oak.plugins.memory.BooleanPropertyState.booleanProperty(name, ((java.lang.Boolean) (value)));\n        } else if (value instanceof java.math.BigDecimal) {\n            return org.apache.jackrabbit.oak.plugins.memory.DecimalPropertyState.decimalProperty(name, ((java.math.BigDecimal) (value)));\n        } else {\n            throw new java.lang.IllegalArgumentException((\"Can't infer type of value of class '\" + value.getClass()) + '\\'');\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.plugins.memory.PropertyStates.getString(value, type)",
            "src_parent": "new org.apache.jackrabbit.oak.plugins.memory.GenericPropertyState(name, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.getString(value, type), org.apache.jackrabbit.oak.api.Type.fromTag(type, false))",
            "src_parent_type": "ConstructorCall",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "type",
            "src_parent": "org.apache.jackrabbit.oak.plugins.memory.PropertyStates.getString(value, type)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "type",
            "src_parent": "org.apache.jackrabbit.oak.plugins.memory.PropertyStates.getString(value, type)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "type",
            "src_parent": "org.apache.jackrabbit.oak.plugins.memory.PropertyStates.getString(value, type)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "value.getString()",
            "dst_parent": "return value.getString()",
            "dst_parent_type": "Return",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "value.getString()",
            "src_parent": "new org.apache.jackrabbit.oak.plugins.memory.GenericPropertyState(name, value.getString(), org.apache.jackrabbit.oak.api.Type.fromTag(type, false))",
            "src_parent_type": "ConstructorCall",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "PropertyStates"
    }
  ],
  "id": "jackrabbit-oak_3f51fb09"
}