{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Synchronized",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "disposed.removeAll(toReturn)",
            "dst_parent": "{\n    toFlush.addAll(toReturn);\n    disposed.removeAll(toReturn);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "disposed.clear()",
            "src_parent": "{\n    toFlush.addAll(writers.values());\n    toFlush.addAll(disposed);\n    writers.clear();\n    disposed.clear();\n    borrowed.clear();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Synchronized",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "disposed.containsAll(toReturn)",
            "dst_parent": "return disposed.containsAll(toReturn)",
            "dst_parent_type": "Return",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "toFlush.addAll(disposed)",
            "src_parent": "{\n    toFlush.addAll(writers.values());\n    toFlush.addAll(disposed);\n    writers.clear();\n    disposed.clear();\n    borrowed.clear();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Synchronized",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "toReturn",
            "dst_parent": "disposed.containsAll(toReturn)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "toFlush",
            "src_parent": "toFlush.addAll(disposed)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Synchronized",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "synchronized(this) {\n    toFlush.addAll(writers.values());\n    toFlush.addAll(disposed);\n    writers.clear();\n    disposed.clear();\n    borrowed.clear();\n}",
            "src_parent": "{\n    java.util.List<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> toFlush = com.google.common.collect.Lists.newArrayList();\n    synchronized(this) {\n        toFlush.addAll(writers.values());\n        toFlush.addAll(disposed);\n        writers.clear();\n        disposed.clear();\n        borrowed.clear();\n    }\n    for (org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer : toFlush) {\n        writer.flush();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Synchronized"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Wrapper",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "synchronized",
            "src_parent": "private synchronized org.apache.jackrabbit.oak.segment.SegmentBufferWriter borrowWriter(java.lang.Object key) {\n    org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer = writers.remove(key);\n    if (writer == null) {\n        writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n    } else if (writer.getGeneration() != gcGeneration.get()) {\n        disposed.add(writer);\n        writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n    }\n    borrowed.add(writer);\n    return writer;\n}",
            "src_parent_type": "Method",
            "src_type": "Wra"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Wrapper",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "synchronized",
            "src_parent": "private synchronized void returnWriter(java.lang.Object key, org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer) {\n    if (borrowed.remove(writer)) {\n        com.google.common.base.Preconditions.checkState(writers.put(key, writer) == null);\n    } else {\n        disposed.add(writer);\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "Wra"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private final com.google.common.util.concurrent.Monitor poolMonitor = new com.google.common.util.concurrent.Monitor(true);",
            "src_parent": "public class SegmentBufferWriterPool implements org.apache.jackrabbit.oak.segment.WriteOperationHandler {\n    private final com.google.common.util.concurrent.Monitor poolMonitor = new com.google.common.util.concurrent.Monitor(true);\n\n    private final java.util.Map<java.lang.Object, org.apache.jackrabbit.oak.segment.SegmentBufferWriter> writers = com.google.common.collect.Maps.newHashMap();\n\n    private final java.util.Set<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> borrowed = com.google.common.collect.Sets.newHashSet();\n\n    private final java.util.Set<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> disposed = com.google.common.collect.Sets.newHashSet();\n\n    @javax.annotation.Nonnull\n    private final org.apache.jackrabbit.oak.segment.SegmentStore store;\n\n    @javax.annotation.Nonnull\n    private final org.apache.jackrabbit.oak.segment.SegmentTracker tracker;\n\n    @javax.annotation.Nonnull\n    private final org.apache.jackrabbit.oak.segment.SegmentReader reader;\n\n    @javax.annotation.Nonnull\n    private final com.google.common.base.Supplier<java.lang.Integer> gcGeneration;\n\n    @javax.annotation.Nonnull\n    private final org.apache.jackrabbit.oak.segment.SegmentVersion version;\n\n    @javax.annotation.Nonnull\n    private final java.lang.String wid;\n\n    private short writerId = -1;\n\n    public SegmentBufferWriterPool(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.segment.SegmentStore store, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.segment.SegmentTracker tracker, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.segment.SegmentReader reader, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.segment.SegmentVersion version, @javax.annotation.Nonnull\n    java.lang.String wid, @javax.annotation.Nonnull\n    com.google.common.base.Supplier<java.lang.Integer> gcGeneration) {\n        this.store = com.google.common.base.Preconditions.checkNotNull(store);\n        this.tracker = com.google.common.base.Preconditions.checkNotNull(tracker);\n        this.reader = com.google.common.base.Preconditions.checkNotNull(reader);\n        this.version = com.google.common.base.Preconditions.checkNotNull(version);\n        this.wid = com.google.common.base.Preconditions.checkNotNull(wid);\n        this.gcGeneration = com.google.common.base.Preconditions.checkNotNull(gcGeneration);\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.segment.RecordId execute(org.apache.jackrabbit.oak.segment.WriteOperation writeOperation) throws java.io.IOException {\n        org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer = borrowWriter(java.lang.Thread.currentThread());\n        try {\n            return writeOperation.execute(writer);\n        } finally {\n            returnWriter(java.lang.Thread.currentThread(), writer);\n        }\n    }\n\n    @java.lang.Override\n    public void flush() throws java.io.IOException {\n        java.util.List<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> toFlush = com.google.common.collect.Lists.newArrayList();\n        java.util.List<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> toReturn = com.google.common.collect.Lists.newArrayList();\n        poolMonitor.enter();\n        try {\n            toFlush.addAll(writers.values());\n            writers.clear();\n            toReturn.addAll(borrowed);\n            borrowed.clear();\n        } finally {\n            poolMonitor.leave();\n        }\n        if (org.apache.jackrabbit.oak.segment.SegmentBufferWriterPool.safeEnterWhen(poolMonitor, allReturned(toReturn))) {\n            try {\n                toFlush.addAll(toReturn);\n                disposed.removeAll(toReturn);\n            } finally {\n                poolMonitor.leave();\n            }\n        }\n        for (org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer : toFlush) {\n            writer.flush();\n        }\n    }\n\n    @javax.annotation.Nonnull\n    private com.google.common.util.concurrent.Monitor.Guard allReturned(final java.util.List<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> toReturn) {\n        return new com.google.common.util.concurrent.Monitor.Guard(poolMonitor) {\n            @java.lang.Override\n            public boolean isSatisfied() {\n                return disposed.containsAll(toReturn);\n            }\n        };\n    }\n\n    private static boolean safeEnterWhen(com.google.common.util.concurrent.Monitor monitor, com.google.common.util.concurrent.Monitor.Guard guard) {\n        try {\n            monitor.enterWhen(guard);\n            return true;\n        } catch (java.lang.InterruptedException ignore) {\n            java.lang.Thread.currentThread().interrupt();\n            return false;\n        }\n    }\n\n    private org.apache.jackrabbit.oak.segment.SegmentBufferWriter borrowWriter(java.lang.Object key) {\n        poolMonitor.enter();\n        try {\n            org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer = writers.remove(key);\n            if (writer == null) {\n                writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n            } else if (writer.getGeneration() != gcGeneration.get()) {\n                disposed.add(writer);\n                writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n            }\n            borrowed.add(writer);\n            return writer;\n        } finally {\n            poolMonitor.leave();\n        }\n    }\n\n    private void returnWriter(java.lang.Object key, org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer) {\n        poolMonitor.enter();\n        try {\n            if (borrowed.remove(writer)) {\n                com.google.common.base.Preconditions.checkState(writers.put(key, writer) == null);\n            } else {\n                disposed.add(writer);\n            }\n        } finally {\n            poolMonitor.leave();\n        }\n    }\n\n    private java.lang.String getWriterId(java.lang.String wid) {\n        if ((++writerId) > 9999) {\n            writerId = 0;\n        }\n        if (writerId < 10) {\n            return (wid + \".000\") + writerId;\n        } else if (writerId < 100) {\n            return (wid + \".00\") + writerId;\n        } else if (writerId < 1000) {\n            return (wid + \".0\") + writerId;\n        } else {\n            return (wid + \".\") + writerId;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "@javax.annotation.Nonnull\nprivate com.google.common.util.concurrent.Monitor.Guard allReturned(final java.util.List<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> toReturn) {\n    return new com.google.common.util.concurrent.Monitor.Guard(poolMonitor) {\n        @java.lang.Override\n        public boolean isSatisfied() {\n            return disposed.containsAll(toReturn);\n        }\n    };\n}",
            "src_parent": "public class SegmentBufferWriterPool implements org.apache.jackrabbit.oak.segment.WriteOperationHandler {\n    private final com.google.common.util.concurrent.Monitor poolMonitor = new com.google.common.util.concurrent.Monitor(true);\n\n    private final java.util.Map<java.lang.Object, org.apache.jackrabbit.oak.segment.SegmentBufferWriter> writers = com.google.common.collect.Maps.newHashMap();\n\n    private final java.util.Set<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> borrowed = com.google.common.collect.Sets.newHashSet();\n\n    private final java.util.Set<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> disposed = com.google.common.collect.Sets.newHashSet();\n\n    @javax.annotation.Nonnull\n    private final org.apache.jackrabbit.oak.segment.SegmentStore store;\n\n    @javax.annotation.Nonnull\n    private final org.apache.jackrabbit.oak.segment.SegmentTracker tracker;\n\n    @javax.annotation.Nonnull\n    private final org.apache.jackrabbit.oak.segment.SegmentReader reader;\n\n    @javax.annotation.Nonnull\n    private final com.google.common.base.Supplier<java.lang.Integer> gcGeneration;\n\n    @javax.annotation.Nonnull\n    private final org.apache.jackrabbit.oak.segment.SegmentVersion version;\n\n    @javax.annotation.Nonnull\n    private final java.lang.String wid;\n\n    private short writerId = -1;\n\n    public SegmentBufferWriterPool(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.segment.SegmentStore store, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.segment.SegmentTracker tracker, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.segment.SegmentReader reader, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.segment.SegmentVersion version, @javax.annotation.Nonnull\n    java.lang.String wid, @javax.annotation.Nonnull\n    com.google.common.base.Supplier<java.lang.Integer> gcGeneration) {\n        this.store = com.google.common.base.Preconditions.checkNotNull(store);\n        this.tracker = com.google.common.base.Preconditions.checkNotNull(tracker);\n        this.reader = com.google.common.base.Preconditions.checkNotNull(reader);\n        this.version = com.google.common.base.Preconditions.checkNotNull(version);\n        this.wid = com.google.common.base.Preconditions.checkNotNull(wid);\n        this.gcGeneration = com.google.common.base.Preconditions.checkNotNull(gcGeneration);\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.segment.RecordId execute(org.apache.jackrabbit.oak.segment.WriteOperation writeOperation) throws java.io.IOException {\n        org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer = borrowWriter(java.lang.Thread.currentThread());\n        try {\n            return writeOperation.execute(writer);\n        } finally {\n            returnWriter(java.lang.Thread.currentThread(), writer);\n        }\n    }\n\n    @java.lang.Override\n    public void flush() throws java.io.IOException {\n        java.util.List<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> toFlush = com.google.common.collect.Lists.newArrayList();\n        java.util.List<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> toReturn = com.google.common.collect.Lists.newArrayList();\n        poolMonitor.enter();\n        try {\n            toFlush.addAll(writers.values());\n            writers.clear();\n            toReturn.addAll(borrowed);\n            borrowed.clear();\n        } finally {\n            poolMonitor.leave();\n        }\n        if (org.apache.jackrabbit.oak.segment.SegmentBufferWriterPool.safeEnterWhen(poolMonitor, allReturned(toReturn))) {\n            try {\n                toFlush.addAll(toReturn);\n                disposed.removeAll(toReturn);\n            } finally {\n                poolMonitor.leave();\n            }\n        }\n        for (org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer : toFlush) {\n            writer.flush();\n        }\n    }\n\n    @javax.annotation.Nonnull\n    private com.google.common.util.concurrent.Monitor.Guard allReturned(final java.util.List<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> toReturn) {\n        return new com.google.common.util.concurrent.Monitor.Guard(poolMonitor) {\n            @java.lang.Override\n            public boolean isSatisfied() {\n                return disposed.containsAll(toReturn);\n            }\n        };\n    }\n\n    private static boolean safeEnterWhen(com.google.common.util.concurrent.Monitor monitor, com.google.common.util.concurrent.Monitor.Guard guard) {\n        try {\n            monitor.enterWhen(guard);\n            return true;\n        } catch (java.lang.InterruptedException ignore) {\n            java.lang.Thread.currentThread().interrupt();\n            return false;\n        }\n    }\n\n    private org.apache.jackrabbit.oak.segment.SegmentBufferWriter borrowWriter(java.lang.Object key) {\n        poolMonitor.enter();\n        try {\n            org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer = writers.remove(key);\n            if (writer == null) {\n                writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n            } else if (writer.getGeneration() != gcGeneration.get()) {\n                disposed.add(writer);\n                writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n            }\n            borrowed.add(writer);\n            return writer;\n        } finally {\n            poolMonitor.leave();\n        }\n    }\n\n    private void returnWriter(java.lang.Object key, org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer) {\n        poolMonitor.enter();\n        try {\n            if (borrowed.remove(writer)) {\n                com.google.common.base.Preconditions.checkState(writers.put(key, writer) == null);\n            } else {\n                disposed.add(writer);\n            }\n        } finally {\n            poolMonitor.leave();\n        }\n    }\n\n    private java.lang.String getWriterId(java.lang.String wid) {\n        if ((++writerId) > 9999) {\n            writerId = 0;\n        }\n        if (writerId < 10) {\n            return (wid + \".000\") + writerId;\n        } else if (writerId < 100) {\n            return (wid + \".00\") + writerId;\n        } else if (writerId < 1000) {\n            return (wid + \".0\") + writerId;\n        } else {\n            return (wid + \".\") + writerId;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static boolean safeEnterWhen(com.google.common.util.concurrent.Monitor monitor, com.google.common.util.concurrent.Monitor.Guard guard) {\n    try {\n        monitor.enterWhen(guard);\n        return true;\n    } catch (java.lang.InterruptedException ignore) {\n        java.lang.Thread.currentThread().interrupt();\n        return false;\n    }\n}",
            "src_parent": "public class SegmentBufferWriterPool implements org.apache.jackrabbit.oak.segment.WriteOperationHandler {\n    private final com.google.common.util.concurrent.Monitor poolMonitor = new com.google.common.util.concurrent.Monitor(true);\n\n    private final java.util.Map<java.lang.Object, org.apache.jackrabbit.oak.segment.SegmentBufferWriter> writers = com.google.common.collect.Maps.newHashMap();\n\n    private final java.util.Set<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> borrowed = com.google.common.collect.Sets.newHashSet();\n\n    private final java.util.Set<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> disposed = com.google.common.collect.Sets.newHashSet();\n\n    @javax.annotation.Nonnull\n    private final org.apache.jackrabbit.oak.segment.SegmentStore store;\n\n    @javax.annotation.Nonnull\n    private final org.apache.jackrabbit.oak.segment.SegmentTracker tracker;\n\n    @javax.annotation.Nonnull\n    private final org.apache.jackrabbit.oak.segment.SegmentReader reader;\n\n    @javax.annotation.Nonnull\n    private final com.google.common.base.Supplier<java.lang.Integer> gcGeneration;\n\n    @javax.annotation.Nonnull\n    private final org.apache.jackrabbit.oak.segment.SegmentVersion version;\n\n    @javax.annotation.Nonnull\n    private final java.lang.String wid;\n\n    private short writerId = -1;\n\n    public SegmentBufferWriterPool(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.segment.SegmentStore store, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.segment.SegmentTracker tracker, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.segment.SegmentReader reader, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.segment.SegmentVersion version, @javax.annotation.Nonnull\n    java.lang.String wid, @javax.annotation.Nonnull\n    com.google.common.base.Supplier<java.lang.Integer> gcGeneration) {\n        this.store = com.google.common.base.Preconditions.checkNotNull(store);\n        this.tracker = com.google.common.base.Preconditions.checkNotNull(tracker);\n        this.reader = com.google.common.base.Preconditions.checkNotNull(reader);\n        this.version = com.google.common.base.Preconditions.checkNotNull(version);\n        this.wid = com.google.common.base.Preconditions.checkNotNull(wid);\n        this.gcGeneration = com.google.common.base.Preconditions.checkNotNull(gcGeneration);\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.segment.RecordId execute(org.apache.jackrabbit.oak.segment.WriteOperation writeOperation) throws java.io.IOException {\n        org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer = borrowWriter(java.lang.Thread.currentThread());\n        try {\n            return writeOperation.execute(writer);\n        } finally {\n            returnWriter(java.lang.Thread.currentThread(), writer);\n        }\n    }\n\n    @java.lang.Override\n    public void flush() throws java.io.IOException {\n        java.util.List<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> toFlush = com.google.common.collect.Lists.newArrayList();\n        java.util.List<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> toReturn = com.google.common.collect.Lists.newArrayList();\n        poolMonitor.enter();\n        try {\n            toFlush.addAll(writers.values());\n            writers.clear();\n            toReturn.addAll(borrowed);\n            borrowed.clear();\n        } finally {\n            poolMonitor.leave();\n        }\n        if (org.apache.jackrabbit.oak.segment.SegmentBufferWriterPool.safeEnterWhen(poolMonitor, allReturned(toReturn))) {\n            try {\n                toFlush.addAll(toReturn);\n                disposed.removeAll(toReturn);\n            } finally {\n                poolMonitor.leave();\n            }\n        }\n        for (org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer : toFlush) {\n            writer.flush();\n        }\n    }\n\n    @javax.annotation.Nonnull\n    private com.google.common.util.concurrent.Monitor.Guard allReturned(final java.util.List<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> toReturn) {\n        return new com.google.common.util.concurrent.Monitor.Guard(poolMonitor) {\n            @java.lang.Override\n            public boolean isSatisfied() {\n                return disposed.containsAll(toReturn);\n            }\n        };\n    }\n\n    private static boolean safeEnterWhen(com.google.common.util.concurrent.Monitor monitor, com.google.common.util.concurrent.Monitor.Guard guard) {\n        try {\n            monitor.enterWhen(guard);\n            return true;\n        } catch (java.lang.InterruptedException ignore) {\n            java.lang.Thread.currentThread().interrupt();\n            return false;\n        }\n    }\n\n    private org.apache.jackrabbit.oak.segment.SegmentBufferWriter borrowWriter(java.lang.Object key) {\n        poolMonitor.enter();\n        try {\n            org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer = writers.remove(key);\n            if (writer == null) {\n                writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n            } else if (writer.getGeneration() != gcGeneration.get()) {\n                disposed.add(writer);\n                writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n            }\n            borrowed.add(writer);\n            return writer;\n        } finally {\n            poolMonitor.leave();\n        }\n    }\n\n    private void returnWriter(java.lang.Object key, org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer) {\n        poolMonitor.enter();\n        try {\n            if (borrowed.remove(writer)) {\n                com.google.common.base.Preconditions.checkState(writers.put(key, writer) == null);\n            } else {\n                disposed.add(writer);\n            }\n        } finally {\n            poolMonitor.leave();\n        }\n    }\n\n    private java.lang.String getWriterId(java.lang.String wid) {\n        if ((++writerId) > 9999) {\n            writerId = 0;\n        }\n        if (writerId < 10) {\n            return (wid + \".000\") + writerId;\n        } else if (writerId < 100) {\n            return (wid + \".00\") + writerId;\n        } else if (writerId < 1000) {\n            return (wid + \".0\") + writerId;\n        } else {\n            return (wid + \".\") + writerId;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.util.List<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> toReturn = com.google.common.collect.Lists.newArrayList()",
            "src_parent": "{\n    java.util.List<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> toFlush = com.google.common.collect.Lists.newArrayList();\n    java.util.List<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> toReturn = com.google.common.collect.Lists.newArrayList();\n    poolMonitor.enter();\n    try {\n        toFlush.addAll(writers.values());\n        writers.clear();\n        toReturn.addAll(borrowed);\n        borrowed.clear();\n    } finally {\n        poolMonitor.leave();\n    }\n    if (org.apache.jackrabbit.oak.segment.SegmentBufferWriterPool.safeEnterWhen(poolMonitor, allReturned(toReturn))) {\n        try {\n            toFlush.addAll(toReturn);\n            disposed.removeAll(toReturn);\n        } finally {\n            poolMonitor.leave();\n        }\n    }\n    for (org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer : toFlush) {\n        writer.flush();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "poolMonitor.enter()",
            "src_parent": "{\n    java.util.List<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> toFlush = com.google.common.collect.Lists.newArrayList();\n    java.util.List<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> toReturn = com.google.common.collect.Lists.newArrayList();\n    poolMonitor.enter();\n    try {\n        toFlush.addAll(writers.values());\n        writers.clear();\n        toReturn.addAll(borrowed);\n        borrowed.clear();\n    } finally {\n        poolMonitor.leave();\n    }\n    if (org.apache.jackrabbit.oak.segment.SegmentBufferWriterPool.safeEnterWhen(poolMonitor, allReturned(toReturn))) {\n        try {\n            toFlush.addAll(toReturn);\n            disposed.removeAll(toReturn);\n        } finally {\n            poolMonitor.leave();\n        }\n    }\n    for (org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer : toFlush) {\n        writer.flush();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "try {\n    toFlush.addAll(writers.values());\n    writers.clear();\n    toReturn.addAll(borrowed);\n    borrowed.clear();\n} finally {\n    poolMonitor.leave();\n}",
            "src_parent": "{\n    java.util.List<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> toFlush = com.google.common.collect.Lists.newArrayList();\n    java.util.List<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> toReturn = com.google.common.collect.Lists.newArrayList();\n    poolMonitor.enter();\n    try {\n        toFlush.addAll(writers.values());\n        writers.clear();\n        toReturn.addAll(borrowed);\n        borrowed.clear();\n    } finally {\n        poolMonitor.leave();\n    }\n    if (org.apache.jackrabbit.oak.segment.SegmentBufferWriterPool.safeEnterWhen(poolMonitor, allReturned(toReturn))) {\n        try {\n            toFlush.addAll(toReturn);\n            disposed.removeAll(toReturn);\n        } finally {\n            poolMonitor.leave();\n        }\n    }\n    for (org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer : toFlush) {\n        writer.flush();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Try"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (org.apache.jackrabbit.oak.segment.SegmentBufferWriterPool.safeEnterWhen(poolMonitor, allReturned(toReturn))) {\n    try {\n        toFlush.addAll(toReturn);\n        disposed.removeAll(toReturn);\n    } finally {\n        poolMonitor.leave();\n    }\n}",
            "src_parent": "{\n    java.util.List<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> toFlush = com.google.common.collect.Lists.newArrayList();\n    java.util.List<org.apache.jackrabbit.oak.segment.SegmentBufferWriter> toReturn = com.google.common.collect.Lists.newArrayList();\n    poolMonitor.enter();\n    try {\n        toFlush.addAll(writers.values());\n        writers.clear();\n        toReturn.addAll(borrowed);\n        borrowed.clear();\n    } finally {\n        poolMonitor.leave();\n    }\n    if (org.apache.jackrabbit.oak.segment.SegmentBufferWriterPool.safeEnterWhen(poolMonitor, allReturned(toReturn))) {\n        try {\n            toFlush.addAll(toReturn);\n            disposed.removeAll(toReturn);\n        } finally {\n            poolMonitor.leave();\n        }\n    }\n    for (org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer : toFlush) {\n        writer.flush();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "poolMonitor.enter()",
            "src_parent": "{\n    poolMonitor.enter();\n    try {\n        org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer = writers.remove(key);\n        if (writer == null) {\n            writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n        } else if (writer.getGeneration() != gcGeneration.get()) {\n            disposed.add(writer);\n            writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n        }\n        borrowed.add(writer);\n        return writer;\n    } finally {\n        poolMonitor.leave();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "try {\n    org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer = writers.remove(key);\n    if (writer == null) {\n        writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n    } else if (writer.getGeneration() != gcGeneration.get()) {\n        disposed.add(writer);\n        writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n    }\n    borrowed.add(writer);\n    return writer;\n} finally {\n    poolMonitor.leave();\n}",
            "src_parent": "{\n    poolMonitor.enter();\n    try {\n        org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer = writers.remove(key);\n        if (writer == null) {\n            writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n        } else if (writer.getGeneration() != gcGeneration.get()) {\n            disposed.add(writer);\n            writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n        }\n        borrowed.add(writer);\n        return writer;\n    } finally {\n        poolMonitor.leave();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Try"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "poolMonitor.enter()",
            "src_parent": "{\n    poolMonitor.enter();\n    try {\n        if (borrowed.remove(writer)) {\n            com.google.common.base.Preconditions.checkState(writers.put(key, writer) == null);\n        } else {\n            disposed.add(writer);\n        }\n    } finally {\n        poolMonitor.leave();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "try {\n    if (borrowed.remove(writer)) {\n        com.google.common.base.Preconditions.checkState(writers.put(key, writer) == null);\n    } else {\n        disposed.add(writer);\n    }\n} finally {\n    poolMonitor.leave();\n}",
            "src_parent": "{\n    poolMonitor.enter();\n    try {\n        if (borrowed.remove(writer)) {\n            com.google.common.base.Preconditions.checkState(writers.put(key, writer) == null);\n        } else {\n            disposed.add(writer);\n        }\n    } finally {\n        poolMonitor.leave();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Try"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Synchronized",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "toFlush.addAll(writers.values())",
            "dst_parent": "{\n    toFlush.addAll(writers.values());\n    writers.clear();\n    toReturn.addAll(borrowed);\n    borrowed.clear();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "toFlush.addAll(writers.values())",
            "src_parent": "{\n    toFlush.addAll(writers.values());\n    toFlush.addAll(disposed);\n    writers.clear();\n    disposed.clear();\n    borrowed.clear();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Synchronized",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "writers.clear()",
            "dst_parent": "{\n    toFlush.addAll(writers.values());\n    writers.clear();\n    toReturn.addAll(borrowed);\n    borrowed.clear();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "writers.clear()",
            "src_parent": "{\n    toFlush.addAll(writers.values());\n    toFlush.addAll(disposed);\n    writers.clear();\n    disposed.clear();\n    borrowed.clear();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Synchronized",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "borrowed.clear()",
            "dst_parent": "{\n    toFlush.addAll(writers.values());\n    writers.clear();\n    toReturn.addAll(borrowed);\n    borrowed.clear();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "borrowed.clear()",
            "src_parent": "{\n    toFlush.addAll(writers.values());\n    toFlush.addAll(disposed);\n    writers.clear();\n    disposed.clear();\n    borrowed.clear();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer = writers.remove(key)",
            "dst_parent": "{\n    org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer = writers.remove(key);\n    if (writer == null) {\n        writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n    } else if (writer.getGeneration() != gcGeneration.get()) {\n        disposed.add(writer);\n        writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n    }\n    borrowed.add(writer);\n    return writer;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer = writers.remove(key)",
            "src_parent": "{\n    org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer = writers.remove(key);\n    if (writer == null) {\n        writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n    } else if (writer.getGeneration() != gcGeneration.get()) {\n        disposed.add(writer);\n        writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n    }\n    borrowed.add(writer);\n    return writer;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (writer == null) {\n    writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n} else if (writer.getGeneration() != gcGeneration.get()) {\n    disposed.add(writer);\n    writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n}",
            "dst_parent": "{\n    org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer = writers.remove(key);\n    if (writer == null) {\n        writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n    } else if (writer.getGeneration() != gcGeneration.get()) {\n        disposed.add(writer);\n        writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n    }\n    borrowed.add(writer);\n    return writer;\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (writer == null) {\n    writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n} else if (writer.getGeneration() != gcGeneration.get()) {\n    disposed.add(writer);\n    writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n}",
            "src_parent": "{\n    org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer = writers.remove(key);\n    if (writer == null) {\n        writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n    } else if (writer.getGeneration() != gcGeneration.get()) {\n        disposed.add(writer);\n        writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n    }\n    borrowed.add(writer);\n    return writer;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "borrowed.add(writer)",
            "dst_parent": "{\n    org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer = writers.remove(key);\n    if (writer == null) {\n        writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n    } else if (writer.getGeneration() != gcGeneration.get()) {\n        disposed.add(writer);\n        writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n    }\n    borrowed.add(writer);\n    return writer;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "borrowed.add(writer)",
            "src_parent": "{\n    org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer = writers.remove(key);\n    if (writer == null) {\n        writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n    } else if (writer.getGeneration() != gcGeneration.get()) {\n        disposed.add(writer);\n        writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n    }\n    borrowed.add(writer);\n    return writer;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return writer",
            "dst_parent": "{\n    org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer = writers.remove(key);\n    if (writer == null) {\n        writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n    } else if (writer.getGeneration() != gcGeneration.get()) {\n        disposed.add(writer);\n        writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n    }\n    borrowed.add(writer);\n    return writer;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return writer",
            "src_parent": "{\n    org.apache.jackrabbit.oak.segment.SegmentBufferWriter writer = writers.remove(key);\n    if (writer == null) {\n        writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n    } else if (writer.getGeneration() != gcGeneration.get()) {\n        disposed.add(writer);\n        writer = new org.apache.jackrabbit.oak.segment.SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());\n    }\n    borrowed.add(writer);\n    return writer;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (borrowed.remove(writer)) {\n    com.google.common.base.Preconditions.checkState(writers.put(key, writer) == null);\n} else {\n    disposed.add(writer);\n}",
            "dst_parent": "{\n    if (borrowed.remove(writer)) {\n        com.google.common.base.Preconditions.checkState(writers.put(key, writer) == null);\n    } else {\n        disposed.add(writer);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (borrowed.remove(writer)) {\n    com.google.common.base.Preconditions.checkState(writers.put(key, writer) == null);\n} else {\n    disposed.add(writer);\n}",
            "src_parent": "{\n    if (borrowed.remove(writer)) {\n        com.google.common.base.Preconditions.checkState(writers.put(key, writer) == null);\n    } else {\n        disposed.add(writer);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Synchronized",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "disposed.removeAll(toReturn)",
            "dst_parent": "{\n    toFlush.addAll(toReturn);\n    disposed.removeAll(toReturn);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "disposed.clear()",
            "src_parent": "{\n    toFlush.addAll(writers.values());\n    toFlush.addAll(disposed);\n    writers.clear();\n    disposed.clear();\n    borrowed.clear();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Synchronized",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "disposed.containsAll(toReturn)",
            "dst_parent": "return disposed.containsAll(toReturn)",
            "dst_parent_type": "Return",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "toFlush.addAll(disposed)",
            "src_parent": "{\n    toFlush.addAll(writers.values());\n    toFlush.addAll(disposed);\n    writers.clear();\n    disposed.clear();\n    borrowed.clear();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "SegmentBufferWriterPool"
    }
  ],
  "id": "jackrabbit-oak_cdb34ffc"
}