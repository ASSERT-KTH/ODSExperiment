{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (itemEntry.getValue().isObject()) {\n    org.apache.logging.log4j.core.config.LOGGER.debug(\"Processing node for object \" + itemEntry.getKey());\n    itemChildren.add(constructNode(itemEntry.getKey(), item, itemEntry.getValue()));\n}",
            "src_parent": "{\n    final java.util.Map.Entry<java.lang.String, com.fasterxml.jackson.databind.JsonNode> itemEntry = itemIter.next();\n    if (itemEntry.getValue().isObject()) {\n        org.apache.logging.log4j.core.config.LOGGER.debug(\"Processing node for object \" + itemEntry.getKey());\n        itemChildren.add(constructNode(itemEntry.getKey(), item, itemEntry.getValue()));\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    org.apache.logging.log4j.core.config.LOGGER.debug(\"Node {} is of type {}\", entry.getKey(), n.getNodeType());\n}",
            "src_parent": "if (n.isArray() || n.isObject()) {\n    if (type == null) {\n        status.add(new org.apache.logging.log4j.core.config.JSONConfiguration.Status(name, n, org.apache.logging.log4j.core.config.JSONConfiguration.ErrorType.CLASS_NOT_FOUND));\n    }\n    if (n.isArray()) {\n        org.apache.logging.log4j.core.config.LOGGER.debug(\"Processing node for array \" + entry.getKey());\n        for (int i = 0; i < n.size(); ++i) {\n            final java.lang.String pluginType = getType(n.get(i), entry.getKey());\n            final org.apache.logging.log4j.core.config.plugins.PluginType<?> entryType = pluginManager.getPluginType(pluginType);\n            final org.apache.logging.log4j.core.config.Node item = new org.apache.logging.log4j.core.config.Node(node, entry.getKey(), entryType);\n            processAttributes(item, n.get(i));\n            if (pluginType.equals(entry.getKey())) {\n                org.apache.logging.log4j.core.config.LOGGER.debug((((\"Processing \" + entry.getKey()) + \"[\") + i) + \"]\");\n            } else {\n                org.apache.logging.log4j.core.config.LOGGER.debug((((((\"Processing \" + pluginType) + \" \") + entry.getKey()) + \"[\") + i) + \"]\");\n            }\n            final java.util.Iterator<java.util.Map.Entry<java.lang.String, com.fasterxml.jackson.databind.JsonNode>> itemIter = n.get(i).fields();\n            final java.util.List<org.apache.logging.log4j.core.config.Node> itemChildren = item.getChildren();\n            while (itemIter.hasNext()) {\n                final java.util.Map.Entry<java.lang.String, com.fasterxml.jackson.databind.JsonNode> itemEntry = itemIter.next();\n                if (itemEntry.getValue().isObject()) {\n                    org.apache.logging.log4j.core.config.LOGGER.debug(\"Processing node for object \" + itemEntry.getKey());\n                    itemChildren.add(constructNode(itemEntry.getKey(), item, itemEntry.getValue()));\n                } else if (itemEntry.getValue().isArray()) {\n                    com.fasterxml.jackson.databind.JsonNode array = itemEntry.getValue();\n                    java.lang.String entryName = itemEntry.getKey();\n                    org.apache.logging.log4j.core.config.LOGGER.debug(\"Processing array for object \" + entryName);\n                    final org.apache.logging.log4j.core.config.plugins.PluginType<?> itemEntryType = pluginManager.getPluginType(entryName);\n                    for (int j = 0; j < array.size(); ++j) {\n                        itemChildren.add(constructNode(entryName, item, array.get(j)));\n                    }\n                }\n            } \n            children.add(item);\n        }\n    } else {\n        org.apache.logging.log4j.core.config.LOGGER.debug(\"Processing node for object \" + entry.getKey());\n        children.add(constructNode(entry.getKey(), node, n));\n    }\n} else {\n    org.apache.logging.log4j.core.config.LOGGER.debug(\"Node {} is of type {}\", entry.getKey(), n.getNodeType());\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (itemEntry.getValue().isObject()) {\n    org.apache.logging.log4j.core.config.LOGGER.debug(\"Processing node for object \" + itemEntry.getKey());\n    itemChildren.add(constructNode(itemEntry.getKey(), item, itemEntry.getValue()));\n} else if (itemEntry.getValue().isArray()) {\n    com.fasterxml.jackson.databind.JsonNode array = itemEntry.getValue();\n    java.lang.String entryName = itemEntry.getKey();\n    org.apache.logging.log4j.core.config.LOGGER.debug(\"Processing array for object \" + entryName);\n    final org.apache.logging.log4j.core.config.plugins.PluginType<?> itemEntryType = pluginManager.getPluginType(entryName);\n    for (int j = 0; j < array.size(); ++j) {\n        itemChildren.add(constructNode(entryName, item, array.get(j)));\n    }\n}",
            "src_parent": "{\n    final java.util.Map.Entry<java.lang.String, com.fasterxml.jackson.databind.JsonNode> itemEntry = itemIter.next();\n    if (itemEntry.getValue().isObject()) {\n        org.apache.logging.log4j.core.config.LOGGER.debug(\"Processing node for object \" + itemEntry.getKey());\n        itemChildren.add(constructNode(itemEntry.getKey(), item, itemEntry.getValue()));\n    } else if (itemEntry.getValue().isArray()) {\n        com.fasterxml.jackson.databind.JsonNode array = itemEntry.getValue();\n        java.lang.String entryName = itemEntry.getKey();\n        org.apache.logging.log4j.core.config.LOGGER.debug(\"Processing array for object \" + entryName);\n        final org.apache.logging.log4j.core.config.plugins.PluginType<?> itemEntryType = pluginManager.getPluginType(entryName);\n        for (int j = 0; j < array.size(); ++j) {\n            itemChildren.add(constructNode(entryName, item, array.get(j)));\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "itemEntry.getValue().isObject()",
            "dst_parent": "if (itemEntry.getValue().isObject()) {\n    org.apache.logging.log4j.core.config.LOGGER.debug(\"Processing node for object \" + itemEntry.getKey());\n    itemChildren.add(constructNode(itemEntry.getKey(), item, itemEntry.getValue()));\n} else if (itemEntry.getValue().isArray()) {\n    com.fasterxml.jackson.databind.JsonNode array = itemEntry.getValue();\n    java.lang.String entryName = itemEntry.getKey();\n    org.apache.logging.log4j.core.config.LOGGER.debug(\"Processing array for object \" + entryName);\n    final org.apache.logging.log4j.core.config.plugins.PluginType<?> itemEntryType = pluginManager.getPluginType(entryName);\n    for (int j = 0; j < array.size(); ++j) {\n        itemChildren.add(constructNode(entryName, item, array.get(j)));\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "itemEntry.getValue().isObject()",
            "src_parent": "if (itemEntry.getValue().isObject()) {\n    org.apache.logging.log4j.core.config.LOGGER.debug(\"Processing node for object \" + itemEntry.getKey());\n    itemChildren.add(constructNode(itemEntry.getKey(), item, itemEntry.getValue()));\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    org.apache.logging.log4j.core.config.LOGGER.debug(\"Processing node for object \" + itemEntry.getKey());\n    itemChildren.add(constructNode(itemEntry.getKey(), item, itemEntry.getValue()));\n}",
            "dst_parent": "if (itemEntry.getValue().isObject()) {\n    org.apache.logging.log4j.core.config.LOGGER.debug(\"Processing node for object \" + itemEntry.getKey());\n    itemChildren.add(constructNode(itemEntry.getKey(), item, itemEntry.getValue()));\n} else if (itemEntry.getValue().isArray()) {\n    com.fasterxml.jackson.databind.JsonNode array = itemEntry.getValue();\n    java.lang.String entryName = itemEntry.getKey();\n    org.apache.logging.log4j.core.config.LOGGER.debug(\"Processing array for object \" + entryName);\n    final org.apache.logging.log4j.core.config.plugins.PluginType<?> itemEntryType = pluginManager.getPluginType(entryName);\n    for (int j = 0; j < array.size(); ++j) {\n        itemChildren.add(constructNode(entryName, item, array.get(j)));\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    org.apache.logging.log4j.core.config.LOGGER.debug(\"Processing node for object \" + itemEntry.getKey());\n    itemChildren.add(constructNode(itemEntry.getKey(), item, itemEntry.getValue()));\n}",
            "src_parent": "if (itemEntry.getValue().isObject()) {\n    org.apache.logging.log4j.core.config.LOGGER.debug(\"Processing node for object \" + itemEntry.getKey());\n    itemChildren.add(constructNode(itemEntry.getKey(), item, itemEntry.getValue()));\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        }
      ],
      "file_name": "JSONConfiguration"
    }
  ],
  "id": "logging-log4j2_484c865f"
}