{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "int",
            "dst_parent": "int keyPos = groupingFields[j]",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "org.apache.flink.api.common.typeutils.CompositeType<?>",
            "src_parent": "org.apache.flink.api.common.typeutils.CompositeType<?> compositeType = ((org.apache.flink.api.common.typeutils.CompositeType<?>) (type))",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "i < keyPos",
            "dst_parent": "if (i < keyPos) {\n    offset += fieldType.getTotalFields();\n} else {\n    if (fieldType instanceof org.apache.flink.api.common.typeutils.CompositeType) {\n        ((org.apache.flink.api.common.typeutils.CompositeType) (fieldType)).getFlatFields(\"*\", offset, keyFields);\n    } else if (fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType) {\n        keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType));\n    } else {\n        throw new org.apache.flink.api.common.InvalidProgramException(\"Field type is neither CompositeType nor AtomicType: \" + fieldType);\n    }\n    break;\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "UPD",
            "src": "groupingFields[j] == i",
            "src_parent": "if (groupingFields[j] == i) {\n    int keyId = org.apache.flink.api.java.operators.Keys.ExpressionKeys.countNestedElementsBefore(compositeType, i) + i;\n    if (fieldType instanceof org.apache.flink.api.java.typeutils.TupleTypeInfoBase) {\n        org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?> tupleFieldType = ((org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?>) (fieldType));\n        tupleFieldType.addAllFields(keyId, keyFields);\n    } else {\n        com.google.common.base.Preconditions.checkArgument(fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType, \"Wrong field type\");\n        keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType));\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "((org.apache.flink.api.common.typeutils.CompositeType<?>) (type))",
            "dst_parent": "((org.apache.flink.api.common.typeutils.CompositeType<?>) (type)).getTypeAt(i)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "compositeType",
            "src_parent": "compositeType.getTypeAt(i)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "fieldType",
            "dst_parent": "fieldType.getTotalFields()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "compositeType",
            "src_parent": "org.apache.flink.api.java.operators.Keys.ExpressionKeys.countNestedElementsBefore(compositeType, i)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.flink.api.common.typeutils.CompositeType",
            "dst_parent": "fieldType instanceof org.apache.flink.api.common.typeutils.CompositeType",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "TypeAccess",
            "operator": "UPD",
            "src": "org.apache.flink.api.java.typeutils.TupleTypeInfoBase",
            "src_parent": "fieldType instanceof org.apache.flink.api.java.typeutils.TupleTypeInfoBase",
            "src_parent_type": "BinaryOperator",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "((org.apache.flink.api.common.typeutils.CompositeType) (fieldType)).getFlatFields(\"*\", offset, keyFields)",
            "dst_parent": "{\n    ((org.apache.flink.api.common.typeutils.CompositeType) (fieldType)).getFlatFields(\"*\", offset, keyFields);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "tupleFieldType.addAllFields(keyId, keyFields)",
            "src_parent": "{\n    org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?> tupleFieldType = ((org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?>) (fieldType));\n    tupleFieldType.addAllFields(keyId, keyFields);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "((org.apache.flink.api.common.typeutils.CompositeType) (fieldType))",
            "dst_parent": "((org.apache.flink.api.common.typeutils.CompositeType) (fieldType)).getFlatFields(\"*\", offset, keyFields)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "tupleFieldType",
            "src_parent": "tupleFieldType.addAllFields(keyId, keyFields)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "offset",
            "dst_parent": "((org.apache.flink.api.common.typeutils.CompositeType) (fieldType)).getFlatFields(\"*\", offset, keyFields)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "keyId",
            "src_parent": "tupleFieldType.addAllFields(keyId, keyFields)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "offset",
            "dst_parent": "new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType)",
            "dst_parent_type": "ConstructorCall",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "keyId",
            "src_parent": "new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType)",
            "src_parent_type": "ConstructorCall",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "org.apache.flink.api.common.typeutils.CompositeType<?> compositeType = ((org.apache.flink.api.common.typeutils.CompositeType<?>) (type))",
            "src_parent": "{\n    if (!type.isTupleType()) {\n        throw new org.apache.flink.api.common.InvalidProgramException((\"Specifying keys via field positions is only valid \" + \"for tuple data types. Type: \") + type);\n    }\n    if ((!allowEmpty) && ((groupingFields == null) || (groupingFields.length == 0))) {\n        throw new java.lang.IllegalArgumentException(\"The grouping fields must not be empty.\");\n    }\n    if ((groupingFields == null) || (groupingFields.length == 0)) {\n        groupingFields = new int[type.getArity()];\n        for (int i = 0; i < groupingFields.length; i++) {\n            groupingFields[i] = i;\n        }\n    } else {\n        groupingFields = org.apache.flink.api.java.operators.Keys.rangeCheckFields(groupingFields, type.getArity() - 1);\n    }\n    org.apache.flink.api.common.typeutils.CompositeType<?> compositeType = ((org.apache.flink.api.common.typeutils.CompositeType<?>) (type));\n    com.google.common.base.Preconditions.checkArgument(groupingFields.length > 0, \"Grouping fields can not be empty at this point\");\n    keyFields = new java.util.ArrayList<org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor>(type.getTotalFields());\n    for (int j = 0; j < groupingFields.length; j++) {\n        for (int i = 0; i < type.getArity(); i++) {\n            org.apache.flink.api.common.typeinfo.TypeInformation<?> fieldType = compositeType.getTypeAt(i);\n            if (groupingFields[j] == i) {\n                int keyId = org.apache.flink.api.java.operators.Keys.ExpressionKeys.countNestedElementsBefore(compositeType, i) + i;\n                if (fieldType instanceof org.apache.flink.api.java.typeutils.TupleTypeInfoBase) {\n                    org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?> tupleFieldType = ((org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?>) (fieldType));\n                    tupleFieldType.addAllFields(keyId, keyFields);\n                } else {\n                    com.google.common.base.Preconditions.checkArgument(fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType, \"Wrong field type\");\n                    keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType));\n                }\n            }\n        }\n    }\n    keyFields = org.apache.flink.api.java.operators.Keys.ExpressionKeys.removeNullElementsFromList(keyFields);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?> tupleFieldType = ((org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?>) (fieldType))",
            "src_parent": "{\n    org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?> tupleFieldType = ((org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?>) (fieldType));\n    tupleFieldType.addAllFields(keyId, keyFields);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.google.common.base.Preconditions.checkArgument(fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType, \"Wrong field type\")",
            "src_parent": "{\n    com.google.common.base.Preconditions.checkArgument(fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType, \"Wrong field type\");\n    keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType));\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType))",
            "src_parent": "{\n    com.google.common.base.Preconditions.checkArgument(fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType, \"Wrong field type\");\n    keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType));\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    int keyId = org.apache.flink.api.java.operators.Keys.ExpressionKeys.countNestedElementsBefore(compositeType, i) + i;\n    if (fieldType instanceof org.apache.flink.api.java.typeutils.TupleTypeInfoBase) {\n        org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?> tupleFieldType = ((org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?>) (fieldType));\n        tupleFieldType.addAllFields(keyId, keyFields);\n    } else {\n        com.google.common.base.Preconditions.checkArgument(fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType, \"Wrong field type\");\n        keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType));\n    }\n}",
            "src_parent": "if (groupingFields[j] == i) {\n    int keyId = org.apache.flink.api.java.operators.Keys.ExpressionKeys.countNestedElementsBefore(compositeType, i) + i;\n    if (fieldType instanceof org.apache.flink.api.java.typeutils.TupleTypeInfoBase) {\n        org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?> tupleFieldType = ((org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?>) (fieldType));\n        tupleFieldType.addAllFields(keyId, keyFields);\n    } else {\n        com.google.common.base.Preconditions.checkArgument(fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType, \"Wrong field type\");\n        keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType));\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "for (int j = 0; j < groupingFields.length; j++) {\n    for (int i = 0; i < type.getArity(); i++) {\n        org.apache.flink.api.common.typeinfo.TypeInformation<?> fieldType = compositeType.getTypeAt(i);\n        if (groupingFields[j] == i) {\n            int keyId = org.apache.flink.api.java.operators.Keys.ExpressionKeys.countNestedElementsBefore(compositeType, i) + i;\n            if (fieldType instanceof org.apache.flink.api.java.typeutils.TupleTypeInfoBase) {\n                org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?> tupleFieldType = ((org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?>) (fieldType));\n                tupleFieldType.addAllFields(keyId, keyFields);\n            } else {\n                com.google.common.base.Preconditions.checkArgument(fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType, \"Wrong field type\");\n                keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType));\n            }\n        }\n    }\n}",
            "src_parent": "{\n    if (!type.isTupleType()) {\n        throw new org.apache.flink.api.common.InvalidProgramException((\"Specifying keys via field positions is only valid \" + \"for tuple data types. Type: \") + type);\n    }\n    if ((!allowEmpty) && ((groupingFields == null) || (groupingFields.length == 0))) {\n        throw new java.lang.IllegalArgumentException(\"The grouping fields must not be empty.\");\n    }\n    if ((groupingFields == null) || (groupingFields.length == 0)) {\n        groupingFields = new int[type.getArity()];\n        for (int i = 0; i < groupingFields.length; i++) {\n            groupingFields[i] = i;\n        }\n    } else {\n        groupingFields = org.apache.flink.api.java.operators.Keys.rangeCheckFields(groupingFields, type.getArity() - 1);\n    }\n    org.apache.flink.api.common.typeutils.CompositeType<?> compositeType = ((org.apache.flink.api.common.typeutils.CompositeType<?>) (type));\n    com.google.common.base.Preconditions.checkArgument(groupingFields.length > 0, \"Grouping fields can not be empty at this point\");\n    keyFields = new java.util.ArrayList<org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor>(type.getTotalFields());\n    for (int j = 0; j < groupingFields.length; j++) {\n        for (int i = 0; i < type.getArity(); i++) {\n            org.apache.flink.api.common.typeinfo.TypeInformation<?> fieldType = compositeType.getTypeAt(i);\n            if (groupingFields[j] == i) {\n                int keyId = org.apache.flink.api.java.operators.Keys.ExpressionKeys.countNestedElementsBefore(compositeType, i) + i;\n                if (fieldType instanceof org.apache.flink.api.java.typeutils.TupleTypeInfoBase) {\n                    org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?> tupleFieldType = ((org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?>) (fieldType));\n                    tupleFieldType.addAllFields(keyId, keyFields);\n                } else {\n                    com.google.common.base.Preconditions.checkArgument(fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType, \"Wrong field type\");\n                    keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType));\n                }\n            }\n        }\n    }\n    keyFields = org.apache.flink.api.java.operators.Keys.ExpressionKeys.removeNullElementsFromList(keyFields);\n}",
            "src_parent_type": "Block",
            "src_type": "For"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private static int countNestedElementsBefore(org.apache.flink.api.common.typeutils.CompositeType<?> compositeType, int pos) {\n    if (pos == 0) {\n        return 0;\n    }\n    int ret = 0;\n    for (int i = 0; i < pos; i++) {\n        org.apache.flink.api.common.typeinfo.TypeInformation<?> fieldType = compositeType.getTypeAt(i);\n        ret += fieldType.getTotalFields() - 1;\n    }\n    return ret;\n}",
            "src_parent": "public static class ExpressionKeys<T> extends org.apache.flink.api.java.operators.Keys<T> {\n    public static final java.lang.String SELECT_ALL_CHAR = \"*\";\n\n    public static final java.lang.String SELECT_ALL_CHAR_SCALA = \"_\";\n\n    private java.util.List<org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor> keyFields;\n\n    public ExpressionKeys(int[] groupingFields, org.apache.flink.api.common.typeinfo.TypeInformation<T> type) {\n        this(groupingFields, type, false);\n    }\n\n    public ExpressionKeys(int[] groupingFields, org.apache.flink.api.common.typeinfo.TypeInformation<T> type, boolean allowEmpty) {\n        if (!type.isTupleType()) {\n            throw new org.apache.flink.api.common.InvalidProgramException((\"Specifying keys via field positions is only valid \" + \"for tuple data types. Type: \") + type);\n        }\n        if ((!allowEmpty) && ((groupingFields == null) || (groupingFields.length == 0))) {\n            throw new java.lang.IllegalArgumentException(\"The grouping fields must not be empty.\");\n        }\n        if ((groupingFields == null) || (groupingFields.length == 0)) {\n            groupingFields = new int[type.getArity()];\n            for (int i = 0; i < groupingFields.length; i++) {\n                groupingFields[i] = i;\n            }\n        } else {\n            groupingFields = org.apache.flink.api.java.operators.Keys.rangeCheckFields(groupingFields, type.getArity() - 1);\n        }\n        org.apache.flink.api.common.typeutils.CompositeType<?> compositeType = ((org.apache.flink.api.common.typeutils.CompositeType<?>) (type));\n        com.google.common.base.Preconditions.checkArgument(groupingFields.length > 0, \"Grouping fields can not be empty at this point\");\n        keyFields = new java.util.ArrayList<org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor>(type.getTotalFields());\n        for (int j = 0; j < groupingFields.length; j++) {\n            for (int i = 0; i < type.getArity(); i++) {\n                org.apache.flink.api.common.typeinfo.TypeInformation<?> fieldType = compositeType.getTypeAt(i);\n                if (groupingFields[j] == i) {\n                    int keyId = org.apache.flink.api.java.operators.Keys.ExpressionKeys.countNestedElementsBefore(compositeType, i) + i;\n                    if (fieldType instanceof org.apache.flink.api.java.typeutils.TupleTypeInfoBase) {\n                        org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?> tupleFieldType = ((org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?>) (fieldType));\n                        tupleFieldType.addAllFields(keyId, keyFields);\n                    } else {\n                        com.google.common.base.Preconditions.checkArgument(fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType, \"Wrong field type\");\n                        keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType));\n                    }\n                }\n            }\n        }\n        keyFields = org.apache.flink.api.java.operators.Keys.ExpressionKeys.removeNullElementsFromList(keyFields);\n    }\n\n    private static int countNestedElementsBefore(org.apache.flink.api.common.typeutils.CompositeType<?> compositeType, int pos) {\n        if (pos == 0) {\n            return 0;\n        }\n        int ret = 0;\n        for (int i = 0; i < pos; i++) {\n            org.apache.flink.api.common.typeinfo.TypeInformation<?> fieldType = compositeType.getTypeAt(i);\n            ret += fieldType.getTotalFields() - 1;\n        }\n        return ret;\n    }\n\n    public static <R> java.util.List<R> removeNullElementsFromList(java.util.List<R> in) {\n        java.util.List<R> elements = new java.util.ArrayList<R>();\n        for (R e : in) {\n            if (e != null) {\n                elements.add(e);\n            }\n        }\n        return elements;\n    }\n\n    public ExpressionKeys(java.lang.String[] expressionsIn, org.apache.flink.api.common.typeinfo.TypeInformation<T> type) {\n        com.google.common.base.Preconditions.checkNotNull(expressionsIn, \"Field expression cannot be null.\");\n        if (type instanceof org.apache.flink.api.common.typeinfo.AtomicType) {\n            if (!type.isKeyType()) {\n                throw new org.apache.flink.api.common.InvalidProgramException((\"This type (\" + type) + \") cannot be used as key.\");\n            } else if ((expressionsIn.length != 1) || (!(org.apache.flink.api.java.operators.Keys.ExpressionKeys.SELECT_ALL_CHAR.equals(expressionsIn[0]) || org.apache.flink.api.java.operators.Keys.ExpressionKeys.SELECT_ALL_CHAR_SCALA.equals(expressionsIn[0])))) {\n                throw new org.apache.flink.api.common.InvalidProgramException(\"Field expression for atomic type must be equal to '*' or '_'.\");\n            }\n            keyFields = new java.util.ArrayList<org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor>(1);\n            keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(0, type));\n        } else {\n            org.apache.flink.api.common.typeutils.CompositeType<T> cType = ((org.apache.flink.api.common.typeutils.CompositeType<T>) (type));\n            java.lang.String[] expressions = org.apache.flink.api.java.operators.Keys.removeDuplicates(expressionsIn);\n            if (expressionsIn.length != expressions.length) {\n                org.apache.flink.api.java.operators.Keys.LOG.warn(\"The key expressions contained duplicates. They are now unique\");\n            }\n            keyFields = new java.util.ArrayList<org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor>(expressions.length);\n            for (int i = 0; i < expressions.length; i++) {\n                java.util.List<org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor> keys = cType.getFlatFields(expressions[i]);\n                if (keys.size() == 0) {\n                    throw new org.apache.flink.api.common.InvalidProgramException(((\"Unable to extract key from expression '\" + expressions[i]) + \"' on key \") + cType);\n                }\n                keyFields.addAll(keys);\n            }\n        }\n    }\n\n    @java.lang.Override\n    public int getNumberOfKeyFields() {\n        if (keyFields == null) {\n            return 0;\n        }\n        return keyFields.size();\n    }\n\n    @java.lang.Override\n    public boolean areCompatible(org.apache.flink.api.java.operators.Keys<?> other) throws org.apache.flink.api.java.operators.Keys.IncompatibleKeysException {\n        if (other instanceof org.apache.flink.api.java.operators.Keys.ExpressionKeys) {\n            org.apache.flink.api.java.operators.Keys.ExpressionKeys<?> oKey = ((org.apache.flink.api.java.operators.Keys.ExpressionKeys<?>) (other));\n            if (oKey.getNumberOfKeyFields() != this.getNumberOfKeyFields()) {\n                throw new org.apache.flink.api.java.operators.Keys.IncompatibleKeysException(org.apache.flink.api.java.operators.Keys.IncompatibleKeysException.SIZE_MISMATCH_MESSAGE);\n            }\n            for (int i = 0; i < this.keyFields.size(); i++) {\n                if (!this.keyFields.get(i).getType().equals(oKey.keyFields.get(i).getType())) {\n                    throw new org.apache.flink.api.java.operators.Keys.IncompatibleKeysException(this.keyFields.get(i).getType(), oKey.keyFields.get(i).getType());\n                }\n            }\n            return true;\n        } else if (other instanceof org.apache.flink.api.java.operators.Keys.SelectorFunctionKeys<?, ?>) {\n            return other.areCompatible(this);\n        } else {\n            throw new org.apache.flink.api.java.operators.Keys.IncompatibleKeysException(\"The key is not compatible with \" + other);\n        }\n    }\n\n    @java.lang.Override\n    public int[] computeLogicalKeyPositions() {\n        java.util.List<java.lang.Integer> logicalKeys = new java.util.ArrayList<java.lang.Integer>();\n        for (org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor kd : keyFields) {\n            logicalKeys.add(kd.getPosition());\n        }\n        return com.google.common.primitives.Ints.toArray(logicalKeys);\n    }\n\n    @java.lang.Override\n    public <E> void validateCustomPartitioner(org.apache.flink.api.common.functions.Partitioner<E> partitioner, org.apache.flink.api.common.typeinfo.TypeInformation<E> typeInfo) {\n        if (keyFields.size() != 1) {\n            throw new org.apache.flink.api.common.InvalidProgramException(\"Custom partitioners can only be used with keys that have one key field.\");\n        }\n        if (typeInfo == null) {\n            try {\n                typeInfo = org.apache.flink.api.java.typeutils.TypeExtractor.getPartitionerTypes(partitioner);\n            } catch (java.lang.Throwable t) {\n            }\n        }\n        if ((typeInfo != null) && (!(typeInfo instanceof org.apache.flink.api.java.typeutils.GenericTypeInfo))) {\n            org.apache.flink.api.common.typeinfo.TypeInformation<?> keyType = keyFields.get(0).getType();\n            if (!keyType.equals(typeInfo)) {\n                throw new org.apache.flink.api.common.InvalidProgramException((((\"The partitioner is incompatible with the key type. \" + \"Partitioner type: \") + typeInfo) + \" , key type: \") + keyType);\n            }\n        }\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        com.google.common.base.Joiner join = com.google.common.base.Joiner.on('.');\n        return \"ExpressionKeys: \" + join.join(keyFields);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Constructor",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "for (int j = 0; j < groupingFields.length; j++) {\n    int keyPos = groupingFields[j];\n    int offset = 0;\n    for (int i = 0; i < type.getArity(); i++) {\n        org.apache.flink.api.common.typeinfo.TypeInformation fieldType = ((org.apache.flink.api.common.typeutils.CompositeType<?>) (type)).getTypeAt(i);\n        if (i < keyPos) {\n            offset += fieldType.getTotalFields();\n        } else {\n            if (fieldType instanceof org.apache.flink.api.common.typeutils.CompositeType) {\n                ((org.apache.flink.api.common.typeutils.CompositeType) (fieldType)).getFlatFields(\"*\", offset, keyFields);\n            } else if (fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType) {\n                keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType));\n            } else {\n                throw new org.apache.flink.api.common.InvalidProgramException(\"Field type is neither CompositeType nor AtomicType: \" + fieldType);\n            }\n            break;\n        }\n    }\n}",
            "src_parent": "{\n    if (!type.isTupleType()) {\n        throw new org.apache.flink.api.common.InvalidProgramException((\"Specifying keys via field positions is only valid \" + \"for tuple data types. Type: \") + type);\n    }\n    if ((!allowEmpty) && ((groupingFields == null) || (groupingFields.length == 0))) {\n        throw new java.lang.IllegalArgumentException(\"The grouping fields must not be empty.\");\n    }\n    if ((groupingFields == null) || (groupingFields.length == 0)) {\n        groupingFields = new int[type.getArity()];\n        for (int i = 0; i < groupingFields.length; i++) {\n            groupingFields[i] = i;\n        }\n    } else {\n        groupingFields = org.apache.flink.api.java.operators.Keys.rangeCheckFields(groupingFields, type.getArity() - 1);\n    }\n    com.google.common.base.Preconditions.checkArgument(groupingFields.length > 0, \"Grouping fields can not be empty at this point\");\n    keyFields = new java.util.ArrayList<org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor>(type.getTotalFields());\n    for (int j = 0; j < groupingFields.length; j++) {\n        int keyPos = groupingFields[j];\n        int offset = 0;\n        for (int i = 0; i < type.getArity(); i++) {\n            org.apache.flink.api.common.typeinfo.TypeInformation fieldType = ((org.apache.flink.api.common.typeutils.CompositeType<?>) (type)).getTypeAt(i);\n            if (i < keyPos) {\n                offset += fieldType.getTotalFields();\n            } else {\n                if (fieldType instanceof org.apache.flink.api.common.typeutils.CompositeType) {\n                    ((org.apache.flink.api.common.typeutils.CompositeType) (fieldType)).getFlatFields(\"*\", offset, keyFields);\n                } else if (fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType) {\n                    keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType));\n                } else {\n                    throw new org.apache.flink.api.common.InvalidProgramException(\"Field type is neither CompositeType nor AtomicType: \" + fieldType);\n                }\n                break;\n            }\n        }\n    }\n    keyFields = org.apache.flink.api.java.operators.Keys.ExpressionKeys.removeNullElementsFromList(keyFields);\n}",
            "src_parent_type": "Block",
            "src_type": "For"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    offset += fieldType.getTotalFields();\n}",
            "src_parent": "if (i < keyPos) {\n    offset += fieldType.getTotalFields();\n} else {\n    if (fieldType instanceof org.apache.flink.api.common.typeutils.CompositeType) {\n        ((org.apache.flink.api.common.typeutils.CompositeType) (fieldType)).getFlatFields(\"*\", offset, keyFields);\n    } else if (fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType) {\n        keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType));\n    } else {\n        throw new org.apache.flink.api.common.InvalidProgramException(\"Field type is neither CompositeType nor AtomicType: \" + fieldType);\n    }\n    break;\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    if (fieldType instanceof org.apache.flink.api.common.typeutils.CompositeType) {\n        ((org.apache.flink.api.common.typeutils.CompositeType) (fieldType)).getFlatFields(\"*\", offset, keyFields);\n    } else if (fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType) {\n        keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType));\n    } else {\n        throw new org.apache.flink.api.common.InvalidProgramException(\"Field type is neither CompositeType nor AtomicType: \" + fieldType);\n    }\n    break;\n}",
            "src_parent": "if (i < keyPos) {\n    offset += fieldType.getTotalFields();\n} else {\n    if (fieldType instanceof org.apache.flink.api.common.typeutils.CompositeType) {\n        ((org.apache.flink.api.common.typeutils.CompositeType) (fieldType)).getFlatFields(\"*\", offset, keyFields);\n    } else if (fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType) {\n        keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType));\n    } else {\n        throw new org.apache.flink.api.common.InvalidProgramException(\"Field type is neither CompositeType nor AtomicType: \" + fieldType);\n    }\n    break;\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType) {\n    keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType));\n} else {\n    throw new org.apache.flink.api.common.InvalidProgramException(\"Field type is neither CompositeType nor AtomicType: \" + fieldType);\n}",
            "src_parent": "{\n    if (fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType) {\n        keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType));\n    } else {\n        throw new org.apache.flink.api.common.InvalidProgramException(\"Field type is neither CompositeType nor AtomicType: \" + fieldType);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "int j = 0",
            "dst_parent": "for (int j = 0; j < groupingFields.length; j++) {\n    int keyPos = groupingFields[j];\n    int offset = 0;\n    for (int i = 0; i < type.getArity(); i++) {\n        org.apache.flink.api.common.typeinfo.TypeInformation fieldType = ((org.apache.flink.api.common.typeutils.CompositeType<?>) (type)).getTypeAt(i);\n        if (i < keyPos) {\n            offset += fieldType.getTotalFields();\n        } else {\n            if (fieldType instanceof org.apache.flink.api.common.typeutils.CompositeType) {\n                ((org.apache.flink.api.common.typeutils.CompositeType) (fieldType)).getFlatFields(\"*\", offset, keyFields);\n            } else if (fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType) {\n                keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType));\n            } else {\n                throw new org.apache.flink.api.common.InvalidProgramException(\"Field type is neither CompositeType nor AtomicType: \" + fieldType);\n            }\n            break;\n        }\n    }\n}",
            "dst_parent_type": "For",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "int j = 0",
            "src_parent": "for (int j = 0; j < groupingFields.length; j++) {\n    for (int i = 0; i < type.getArity(); i++) {\n        org.apache.flink.api.common.typeinfo.TypeInformation<?> fieldType = compositeType.getTypeAt(i);\n        if (groupingFields[j] == i) {\n            int keyId = org.apache.flink.api.java.operators.Keys.ExpressionKeys.countNestedElementsBefore(compositeType, i) + i;\n            if (fieldType instanceof org.apache.flink.api.java.typeutils.TupleTypeInfoBase) {\n                org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?> tupleFieldType = ((org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?>) (fieldType));\n                tupleFieldType.addAllFields(keyId, keyFields);\n            } else {\n                com.google.common.base.Preconditions.checkArgument(fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType, \"Wrong field type\");\n                keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType));\n            }\n        }\n    }\n}",
            "src_parent_type": "For",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "j < groupingFields.length",
            "dst_parent": "for (int j = 0; j < groupingFields.length; j++) {\n    int keyPos = groupingFields[j];\n    int offset = 0;\n    for (int i = 0; i < type.getArity(); i++) {\n        org.apache.flink.api.common.typeinfo.TypeInformation fieldType = ((org.apache.flink.api.common.typeutils.CompositeType<?>) (type)).getTypeAt(i);\n        if (i < keyPos) {\n            offset += fieldType.getTotalFields();\n        } else {\n            if (fieldType instanceof org.apache.flink.api.common.typeutils.CompositeType) {\n                ((org.apache.flink.api.common.typeutils.CompositeType) (fieldType)).getFlatFields(\"*\", offset, keyFields);\n            } else if (fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType) {\n                keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType));\n            } else {\n                throw new org.apache.flink.api.common.InvalidProgramException(\"Field type is neither CompositeType nor AtomicType: \" + fieldType);\n            }\n            break;\n        }\n    }\n}",
            "dst_parent_type": "For",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "j < groupingFields.length",
            "src_parent": "for (int j = 0; j < groupingFields.length; j++) {\n    for (int i = 0; i < type.getArity(); i++) {\n        org.apache.flink.api.common.typeinfo.TypeInformation<?> fieldType = compositeType.getTypeAt(i);\n        if (groupingFields[j] == i) {\n            int keyId = org.apache.flink.api.java.operators.Keys.ExpressionKeys.countNestedElementsBefore(compositeType, i) + i;\n            if (fieldType instanceof org.apache.flink.api.java.typeutils.TupleTypeInfoBase) {\n                org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?> tupleFieldType = ((org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?>) (fieldType));\n                tupleFieldType.addAllFields(keyId, keyFields);\n            } else {\n                com.google.common.base.Preconditions.checkArgument(fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType, \"Wrong field type\");\n                keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType));\n            }\n        }\n    }\n}",
            "src_parent_type": "For",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "j++",
            "dst_parent": "for (int j = 0; j < groupingFields.length; j++) {\n    int keyPos = groupingFields[j];\n    int offset = 0;\n    for (int i = 0; i < type.getArity(); i++) {\n        org.apache.flink.api.common.typeinfo.TypeInformation fieldType = ((org.apache.flink.api.common.typeutils.CompositeType<?>) (type)).getTypeAt(i);\n        if (i < keyPos) {\n            offset += fieldType.getTotalFields();\n        } else {\n            if (fieldType instanceof org.apache.flink.api.common.typeutils.CompositeType) {\n                ((org.apache.flink.api.common.typeutils.CompositeType) (fieldType)).getFlatFields(\"*\", offset, keyFields);\n            } else if (fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType) {\n                keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType));\n            } else {\n                throw new org.apache.flink.api.common.InvalidProgramException(\"Field type is neither CompositeType nor AtomicType: \" + fieldType);\n            }\n            break;\n        }\n    }\n}",
            "dst_parent_type": "For",
            "dst_type": "UnaryOperator",
            "operator": "MOV",
            "src": "j++",
            "src_parent": "for (int j = 0; j < groupingFields.length; j++) {\n    for (int i = 0; i < type.getArity(); i++) {\n        org.apache.flink.api.common.typeinfo.TypeInformation<?> fieldType = compositeType.getTypeAt(i);\n        if (groupingFields[j] == i) {\n            int keyId = org.apache.flink.api.java.operators.Keys.ExpressionKeys.countNestedElementsBefore(compositeType, i) + i;\n            if (fieldType instanceof org.apache.flink.api.java.typeutils.TupleTypeInfoBase) {\n                org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?> tupleFieldType = ((org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?>) (fieldType));\n                tupleFieldType.addAllFields(keyId, keyFields);\n            } else {\n                com.google.common.base.Preconditions.checkArgument(fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType, \"Wrong field type\");\n                keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType));\n            }\n        }\n    }\n}",
            "src_parent_type": "For",
            "src_type": "UnaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "for (int i = 0; i < type.getArity(); i++) {\n    org.apache.flink.api.common.typeinfo.TypeInformation fieldType = ((org.apache.flink.api.common.typeutils.CompositeType<?>) (type)).getTypeAt(i);\n    if (i < keyPos) {\n        offset += fieldType.getTotalFields();\n    } else {\n        if (fieldType instanceof org.apache.flink.api.common.typeutils.CompositeType) {\n            ((org.apache.flink.api.common.typeutils.CompositeType) (fieldType)).getFlatFields(\"*\", offset, keyFields);\n        } else if (fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType) {\n            keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType));\n        } else {\n            throw new org.apache.flink.api.common.InvalidProgramException(\"Field type is neither CompositeType nor AtomicType: \" + fieldType);\n        }\n        break;\n    }\n}",
            "dst_parent": "{\n    int keyPos = groupingFields[j];\n    int offset = 0;\n    for (int i = 0; i < type.getArity(); i++) {\n        org.apache.flink.api.common.typeinfo.TypeInformation fieldType = ((org.apache.flink.api.common.typeutils.CompositeType<?>) (type)).getTypeAt(i);\n        if (i < keyPos) {\n            offset += fieldType.getTotalFields();\n        } else {\n            if (fieldType instanceof org.apache.flink.api.common.typeutils.CompositeType) {\n                ((org.apache.flink.api.common.typeutils.CompositeType) (fieldType)).getFlatFields(\"*\", offset, keyFields);\n            } else if (fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType) {\n                keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType));\n            } else {\n                throw new org.apache.flink.api.common.InvalidProgramException(\"Field type is neither CompositeType nor AtomicType: \" + fieldType);\n            }\n            break;\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "For",
            "operator": "MOV",
            "src": "for (int i = 0; i < type.getArity(); i++) {\n    org.apache.flink.api.common.typeinfo.TypeInformation<?> fieldType = compositeType.getTypeAt(i);\n    if (groupingFields[j] == i) {\n        int keyId = org.apache.flink.api.java.operators.Keys.ExpressionKeys.countNestedElementsBefore(compositeType, i) + i;\n        if (fieldType instanceof org.apache.flink.api.java.typeutils.TupleTypeInfoBase) {\n            org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?> tupleFieldType = ((org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?>) (fieldType));\n            tupleFieldType.addAllFields(keyId, keyFields);\n        } else {\n            com.google.common.base.Preconditions.checkArgument(fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType, \"Wrong field type\");\n            keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType));\n        }\n    }\n}",
            "src_parent": "{\n    for (int i = 0; i < type.getArity(); i++) {\n        org.apache.flink.api.common.typeinfo.TypeInformation<?> fieldType = compositeType.getTypeAt(i);\n        if (groupingFields[j] == i) {\n            int keyId = org.apache.flink.api.java.operators.Keys.ExpressionKeys.countNestedElementsBefore(compositeType, i) + i;\n            if (fieldType instanceof org.apache.flink.api.java.typeutils.TupleTypeInfoBase) {\n                org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?> tupleFieldType = ((org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?>) (fieldType));\n                tupleFieldType.addAllFields(keyId, keyFields);\n            } else {\n                com.google.common.base.Preconditions.checkArgument(fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType, \"Wrong field type\");\n                keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType));\n            }\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "For"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "int",
            "dst_parent": "int keyPos = groupingFields[j]",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "org.apache.flink.api.common.typeutils.CompositeType<?>",
            "src_parent": "org.apache.flink.api.common.typeutils.CompositeType<?> compositeType = ((org.apache.flink.api.common.typeutils.CompositeType<?>) (type))",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "groupingFields[j]",
            "dst_parent": "int keyPos = groupingFields[j]",
            "dst_parent_type": "LocalVariable",
            "dst_type": "ArrayRead",
            "operator": "MOV",
            "src": "groupingFields[j]",
            "src_parent": "groupingFields[j] == i",
            "src_parent_type": "BinaryOperator",
            "src_type": "ArrayRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "OperatorAssignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "fieldType.getTotalFields()",
            "dst_parent": "offset += fieldType.getTotalFields()",
            "dst_parent_type": "OperatorAssignment",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "fieldType.getTotalFields()",
            "src_parent": "fieldType.getTotalFields() - 1",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "fieldType instanceof org.apache.flink.api.common.typeutils.CompositeType",
            "dst_parent": "if (fieldType instanceof org.apache.flink.api.common.typeutils.CompositeType) {\n    ((org.apache.flink.api.common.typeutils.CompositeType) (fieldType)).getFlatFields(\"*\", offset, keyFields);\n} else if (fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType) {\n    keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType));\n} else {\n    throw new org.apache.flink.api.common.InvalidProgramException(\"Field type is neither CompositeType nor AtomicType: \" + fieldType);\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "fieldType instanceof org.apache.flink.api.java.typeutils.TupleTypeInfoBase",
            "src_parent": "if (fieldType instanceof org.apache.flink.api.java.typeutils.TupleTypeInfoBase) {\n    org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?> tupleFieldType = ((org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?>) (fieldType));\n    tupleFieldType.addAllFields(keyId, keyFields);\n} else {\n    com.google.common.base.Preconditions.checkArgument(fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType, \"Wrong field type\");\n    keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType));\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    ((org.apache.flink.api.common.typeutils.CompositeType) (fieldType)).getFlatFields(\"*\", offset, keyFields);\n}",
            "dst_parent": "if (fieldType instanceof org.apache.flink.api.common.typeutils.CompositeType) {\n    ((org.apache.flink.api.common.typeutils.CompositeType) (fieldType)).getFlatFields(\"*\", offset, keyFields);\n} else if (fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType) {\n    keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType));\n} else {\n    throw new org.apache.flink.api.common.InvalidProgramException(\"Field type is neither CompositeType nor AtomicType: \" + fieldType);\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?> tupleFieldType = ((org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?>) (fieldType));\n    tupleFieldType.addAllFields(keyId, keyFields);\n}",
            "src_parent": "if (fieldType instanceof org.apache.flink.api.java.typeutils.TupleTypeInfoBase) {\n    org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?> tupleFieldType = ((org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?>) (fieldType));\n    tupleFieldType.addAllFields(keyId, keyFields);\n} else {\n    com.google.common.base.Preconditions.checkArgument(fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType, \"Wrong field type\");\n    keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType));\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    if (fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType) {\n        keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType));\n    } else {\n        throw new org.apache.flink.api.common.InvalidProgramException(\"Field type is neither CompositeType nor AtomicType: \" + fieldType);\n    }\n}",
            "dst_parent": "if (fieldType instanceof org.apache.flink.api.common.typeutils.CompositeType) {\n    ((org.apache.flink.api.common.typeutils.CompositeType) (fieldType)).getFlatFields(\"*\", offset, keyFields);\n} else if (fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType) {\n    keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType));\n} else {\n    throw new org.apache.flink.api.common.InvalidProgramException(\"Field type is neither CompositeType nor AtomicType: \" + fieldType);\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    com.google.common.base.Preconditions.checkArgument(fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType, \"Wrong field type\");\n    keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType));\n}",
            "src_parent": "if (fieldType instanceof org.apache.flink.api.java.typeutils.TupleTypeInfoBase) {\n    org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?> tupleFieldType = ((org.apache.flink.api.java.typeutils.TupleTypeInfoBase<?>) (fieldType));\n    tupleFieldType.addAllFields(keyId, keyFields);\n} else {\n    com.google.common.base.Preconditions.checkArgument(fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType, \"Wrong field type\");\n    keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType));\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType",
            "dst_parent": "if (fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType) {\n    keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType));\n} else {\n    throw new org.apache.flink.api.common.InvalidProgramException(\"Field type is neither CompositeType nor AtomicType: \" + fieldType);\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType",
            "src_parent": "com.google.common.base.Preconditions.checkArgument(fieldType instanceof org.apache.flink.api.common.typeinfo.AtomicType, \"Wrong field type\")",
            "src_parent_type": "Invocation",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "keyFields",
            "dst_parent": "keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType))",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "keyFields",
            "src_parent": "keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType))",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType)",
            "dst_parent": "keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(offset, fieldType))",
            "dst_parent_type": "Invocation",
            "dst_type": "ConstructorCall",
            "operator": "MOV",
            "src": "new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType)",
            "src_parent": "keyFields.add(new org.apache.flink.api.common.typeutils.CompositeType.FlatFieldDescriptor(keyId, fieldType))",
            "src_parent_type": "Invocation",
            "src_type": "ConstructorCall"
          }
        }
      ],
      "file_name": "Keys"
    }
  ],
  "id": "flink_30761572"
}