{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "s",
            "dst_parent": "org.apache.jackrabbit.oak.commons.json.JsopBuilder.escape(s, s.length(), buff)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "c",
            "src_parent": "java.lang.Integer.toHexString(c)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "s",
            "dst_parent": "s.length()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "hex",
            "src_parent": "hex.length()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Character",
            "dst_parent": "java.lang.Character.forDigit(c >>> 4, 16)",
            "dst_parent_type": "Invocation",
            "dst_type": "TypeAccess",
            "operator": "UPD",
            "src": "java.lang.Integer",
            "src_parent": "java.lang.Integer.toHexString(c)",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "16",
            "dst_parent": "java.lang.Character.forDigit(c >>> 4, 16)",
            "dst_parent_type": "Invocation",
            "dst_type": "Literal",
            "operator": "UPD",
            "src": "'0'",
            "src_parent": "buff.append('0')",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(((c == '\\\"') || (c == '\\\\')) || (c < ' ')) || (c >= 127)",
            "src_parent": "if ((((c == '\\\"') || (c == '\\\\')) || (c < ' ')) || (c >= 127)) {\n    java.lang.StringBuilder buff = new java.lang.StringBuilder((length + 2) + (length / 8));\n    buff.append('\\\"');\n    org.apache.jackrabbit.oak.commons.json.JsopBuilder.escape(s, length, buff);\n    return buff.append('\\\"').toString();\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "buff.append(\"\\\\u\")",
            "src_parent": "{\n    buff.append(\"\\\\u\");\n    java.lang.String hex = java.lang.Integer.toHexString(c);\n    for (int len = hex.length(); len < 4; len++) {\n        buff.append('0');\n    }\n    buff.append(hex);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "java.lang.String hex = java.lang.Integer.toHexString(c)",
            "src_parent": "{\n    buff.append(\"\\\\u\");\n    java.lang.String hex = java.lang.Integer.toHexString(c);\n    for (int len = hex.length(); len < 4; len++) {\n        buff.append('0');\n    }\n    buff.append(hex);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "for (int len = hex.length(); len < 4; len++) {\n    buff.append('0');\n}",
            "src_parent": "{\n    buff.append(\"\\\\u\");\n    java.lang.String hex = java.lang.Integer.toHexString(c);\n    for (int len = hex.length(); len < 4; len++) {\n        buff.append('0');\n    }\n    buff.append(hex);\n}",
            "src_parent_type": "Block",
            "src_type": "For"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "hex",
            "src_parent": "buff.append(hex)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public static void escape(java.lang.String s, int length, java.lang.StringBuilder buff) {\n    for (int i = 0; i < length; i++) {\n        char c = s.charAt(i);\n        switch (c) {\n            case '\"' :\n                buff.append(\"\\\\\\\"\");\n                break;\n            case '\\\\' :\n                buff.append(\"\\\\\\\\\");\n                break;\n            case '\\b' :\n                buff.append(\"\\\\b\");\n                break;\n            case '\\f' :\n                buff.append(\"\\\\f\");\n                break;\n            case '\\n' :\n                buff.append(\"\\\\n\");\n                break;\n            case '\\r' :\n                buff.append(\"\\\\r\");\n                break;\n            case '\\t' :\n                buff.append(\"\\\\t\");\n                break;\n            default :\n                if (c < ' ') {\n                    buff.append(\"\\\\u00\");\n                    java.lang.String hex = java.lang.Integer.toHexString(c);\n                    if (hex.length() == 1) {\n                        buff.append('0');\n                    }\n                    buff.append(hex);\n                } else if (c >= 127) {\n                    buff.append(\"\\\\u\");\n                    java.lang.String hex = java.lang.Integer.toHexString(c);\n                    for (int len = hex.length(); len < 4; len++) {\n                        buff.append('0');\n                    }\n                    buff.append(hex);\n                } else {\n                    buff.append(c);\n                }\n        }\n    }\n}",
            "src_parent": "public class JsopBuilder implements org.apache.jackrabbit.oak.commons.json.JsopWriter {\n    private static final boolean JSON_NEWLINES = false;\n\n    private java.lang.StringBuilder buff = new java.lang.StringBuilder();\n\n    private boolean needComma;\n\n    private int lineLength;\n\n    private int previous;\n\n    @java.lang.Override\n    public void resetWriter() {\n        needComma = false;\n        buff.setLength(0);\n    }\n\n    @java.lang.Override\n    public void setLineLength(int length) {\n        lineLength = length;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder append(org.apache.jackrabbit.oak.commons.json.JsopWriter buffer) {\n        appendTag(buffer.toString());\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder tag(char tag) {\n        buff.append(tag);\n        needComma = false;\n        return this;\n    }\n\n    private org.apache.jackrabbit.oak.commons.json.JsopBuilder appendTag(java.lang.String string) {\n        buff.append(string);\n        needComma = false;\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder newline() {\n        buff.append('\\n');\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder object() {\n        optionalCommaAndNewline(1);\n        buff.append('{');\n        needComma = false;\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder endObject() {\n        if (org.apache.jackrabbit.oak.commons.json.JsopBuilder.JSON_NEWLINES) {\n            buff.append(\"\\n}\");\n        } else {\n            buff.append('}');\n        }\n        needComma = true;\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder array() {\n        optionalCommaAndNewline(1);\n        buff.append('[');\n        needComma = false;\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder endArray() {\n        buff.append(']');\n        needComma = true;\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder key(java.lang.String name) {\n        optionalCommaAndNewline(name.length());\n        if (org.apache.jackrabbit.oak.commons.json.JsopBuilder.JSON_NEWLINES) {\n            buff.append('\\n');\n        }\n        buff.append(org.apache.jackrabbit.oak.commons.json.JsopBuilder.encode(name)).append(':');\n        needComma = false;\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder value(long value) {\n        return encodedValue(java.lang.Long.toString(value));\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder value(boolean value) {\n        return encodedValue(java.lang.Boolean.toString(value));\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder value(java.lang.String value) {\n        return encodedValue(org.apache.jackrabbit.oak.commons.json.JsopBuilder.encode(value));\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder encodedValue(java.lang.String value) {\n        optionalCommaAndNewline(value.length());\n        buff.append(value);\n        needComma = true;\n        return this;\n    }\n\n    private void optionalCommaAndNewline(int add) {\n        if (needComma) {\n            buff.append(',');\n        }\n        if (lineLength > 0) {\n            int len = buff.length();\n            if ((len > (lineLength / 4)) && (((len + add) - previous) > lineLength)) {\n                buff.append('\\n');\n                previous = len;\n            }\n        }\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return buff.toString();\n    }\n\n    public static java.lang.String encode(java.lang.String s) {\n        if (s == null) {\n            return \"null\";\n        }\n        int length = s.length();\n        if (length == 0) {\n            return \"\\\"\\\"\";\n        }\n        for (int i = 0; i < length; i++) {\n            char c = s.charAt(i);\n            if ((((c == '\\\"') || (c == '\\\\')) || (c < ' ')) || (c >= 127)) {\n                java.lang.StringBuilder buff = new java.lang.StringBuilder((length + 2) + (length / 8));\n                buff.append('\\\"');\n                org.apache.jackrabbit.oak.commons.json.JsopBuilder.escape(s, length, buff);\n                return buff.append('\\\"').toString();\n            }\n        }\n        java.lang.StringBuilder buff = new java.lang.StringBuilder(length + 2);\n        return buff.append('\\\"').append(s).append('\\\"').toString();\n    }\n\n    public static void escape(java.lang.String s, int length, java.lang.StringBuilder buff) {\n        for (int i = 0; i < length; i++) {\n            char c = s.charAt(i);\n            switch (c) {\n                case '\"' :\n                    buff.append(\"\\\\\\\"\");\n                    break;\n                case '\\\\' :\n                    buff.append(\"\\\\\\\\\");\n                    break;\n                case '\\b' :\n                    buff.append(\"\\\\b\");\n                    break;\n                case '\\f' :\n                    buff.append(\"\\\\f\");\n                    break;\n                case '\\n' :\n                    buff.append(\"\\\\n\");\n                    break;\n                case '\\r' :\n                    buff.append(\"\\\\r\");\n                    break;\n                case '\\t' :\n                    buff.append(\"\\\\t\");\n                    break;\n                default :\n                    if (c < ' ') {\n                        buff.append(\"\\\\u00\");\n                        java.lang.String hex = java.lang.Integer.toHexString(c);\n                        if (hex.length() == 1) {\n                            buff.append('0');\n                        }\n                        buff.append(hex);\n                    } else if (c >= 127) {\n                        buff.append(\"\\\\u\");\n                        java.lang.String hex = java.lang.Integer.toHexString(c);\n                        for (int len = hex.length(); len < 4; len++) {\n                            buff.append('0');\n                        }\n                        buff.append(hex);\n                    } else {\n                        buff.append(c);\n                    }\n            }\n        }\n    }\n\n    public int length() {\n        return buff.length();\n    }\n\n    public static java.lang.String prettyPrint(java.lang.String jsop) {\n        java.lang.StringBuilder buff = new java.lang.StringBuilder();\n        org.apache.jackrabbit.oak.commons.json.JsopTokenizer t = new org.apache.jackrabbit.oak.commons.json.JsopTokenizer(jsop);\n        while (true) {\n            org.apache.jackrabbit.oak.commons.json.JsopBuilder.prettyPrint(buff, t, \"  \");\n            if (t.getTokenType() == JsopReader.END) {\n                return buff.toString();\n            }\n        } \n    }\n\n    static java.lang.String prettyPrint(java.lang.StringBuilder buff, org.apache.jackrabbit.oak.commons.json.JsopTokenizer t, java.lang.String ident) {\n        java.lang.String space = \"\";\n        boolean inArray = false;\n        while (true) {\n            int token = t.read();\n            switch (token) {\n                case JsopReader.END :\n                    return buff.toString();\n                case JsopReader.STRING :\n                    buff.append('\\\"').append(t.getEscapedToken()).append('\\\"');\n                    break;\n                case JsopReader.NUMBER :\n                case JsopReader.TRUE :\n                case JsopReader.FALSE :\n                case JsopReader.NULL :\n                case JsopReader.IDENTIFIER :\n                case JsopReader.ERROR :\n                    buff.append(t.getEscapedToken());\n                    break;\n                case '{' :\n                    if (t.matches('}')) {\n                        buff.append(\"{}\");\n                    } else {\n                        buff.append(\"{\\n\").append(space += ident);\n                    }\n                    break;\n                case '}' :\n                    space = space.substring(0, space.length() - ident.length());\n                    buff.append('\\n').append(space).append(\"}\");\n                    break;\n                case '[' :\n                    inArray = true;\n                    buff.append(\"[\");\n                    break;\n                case ']' :\n                    inArray = false;\n                    buff.append(\"]\");\n                    break;\n                case ',' :\n                    if (!inArray) {\n                        buff.append(\",\\n\").append(space);\n                    } else {\n                        buff.append(\", \");\n                    }\n                    break;\n                default :\n                    buff.append(((char) (token))).append(' ');\n                    break;\n            }\n        } \n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public static void escape(java.lang.String s, java.lang.StringBuilder buff) {\n    org.apache.jackrabbit.oak.commons.json.JsopBuilder.escape(s, s.length(), buff);\n}",
            "src_parent": "public class JsopBuilder implements org.apache.jackrabbit.oak.commons.json.JsopWriter {\n    private static final boolean JSON_NEWLINES = false;\n\n    private java.lang.StringBuilder buff = new java.lang.StringBuilder();\n\n    private boolean needComma;\n\n    private int lineLength;\n\n    private int previous;\n\n    @java.lang.Override\n    public void resetWriter() {\n        needComma = false;\n        buff.setLength(0);\n    }\n\n    @java.lang.Override\n    public void setLineLength(int length) {\n        lineLength = length;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder append(org.apache.jackrabbit.oak.commons.json.JsopWriter buffer) {\n        appendTag(buffer.toString());\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder tag(char tag) {\n        buff.append(tag);\n        needComma = false;\n        return this;\n    }\n\n    private org.apache.jackrabbit.oak.commons.json.JsopBuilder appendTag(java.lang.String string) {\n        buff.append(string);\n        needComma = false;\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder newline() {\n        buff.append('\\n');\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder object() {\n        optionalCommaAndNewline(1);\n        buff.append('{');\n        needComma = false;\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder endObject() {\n        if (org.apache.jackrabbit.oak.commons.json.JsopBuilder.JSON_NEWLINES) {\n            buff.append(\"\\n}\");\n        } else {\n            buff.append('}');\n        }\n        needComma = true;\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder array() {\n        optionalCommaAndNewline(1);\n        buff.append('[');\n        needComma = false;\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder endArray() {\n        buff.append(']');\n        needComma = true;\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder key(java.lang.String name) {\n        optionalCommaAndNewline(name.length());\n        if (org.apache.jackrabbit.oak.commons.json.JsopBuilder.JSON_NEWLINES) {\n            buff.append('\\n');\n        }\n        buff.append(org.apache.jackrabbit.oak.commons.json.JsopBuilder.encode(name)).append(':');\n        needComma = false;\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder value(long value) {\n        return encodedValue(java.lang.Long.toString(value));\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder value(boolean value) {\n        return encodedValue(java.lang.Boolean.toString(value));\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder value(java.lang.String value) {\n        return encodedValue(org.apache.jackrabbit.oak.commons.json.JsopBuilder.encode(value));\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder encodedValue(java.lang.String value) {\n        optionalCommaAndNewline(value.length());\n        buff.append(value);\n        needComma = true;\n        return this;\n    }\n\n    private void optionalCommaAndNewline(int add) {\n        if (needComma) {\n            buff.append(',');\n        }\n        if (lineLength > 0) {\n            int len = buff.length();\n            if ((len > (lineLength / 4)) && (((len + add) - previous) > lineLength)) {\n                buff.append('\\n');\n                previous = len;\n            }\n        }\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return buff.toString();\n    }\n\n    public static java.lang.String encode(java.lang.String s) {\n        if (s == null) {\n            return \"null\";\n        }\n        int length = s.length();\n        if (length == 0) {\n            return \"\\\"\\\"\";\n        }\n        for (int i = 0; i < length; i++) {\n            char c = s.charAt(i);\n            if (((c == '\\\"') || (c == '\\\\')) || (c < ' ')) {\n                java.lang.StringBuilder buff = new java.lang.StringBuilder((length + 2) + (length / 8));\n                buff.append('\\\"');\n                org.apache.jackrabbit.oak.commons.json.JsopBuilder.escape(s, length, buff);\n                return buff.append('\\\"').toString();\n            }\n        }\n        java.lang.StringBuilder buff = new java.lang.StringBuilder(length + 2);\n        return buff.append('\\\"').append(s).append('\\\"').toString();\n    }\n\n    public static void escape(java.lang.String s, java.lang.StringBuilder buff) {\n        org.apache.jackrabbit.oak.commons.json.JsopBuilder.escape(s, s.length(), buff);\n    }\n\n    private static void escape(java.lang.String s, int length, java.lang.StringBuilder buff) {\n        for (int i = 0; i < length; i++) {\n            char c = s.charAt(i);\n            switch (c) {\n                case '\"' :\n                    buff.append(\"\\\\\\\"\");\n                    break;\n                case '\\\\' :\n                    buff.append(\"\\\\\\\\\");\n                    break;\n                case '\\b' :\n                    buff.append(\"\\\\b\");\n                    break;\n                case '\\f' :\n                    buff.append(\"\\\\f\");\n                    break;\n                case '\\n' :\n                    buff.append(\"\\\\n\");\n                    break;\n                case '\\r' :\n                    buff.append(\"\\\\r\");\n                    break;\n                case '\\t' :\n                    buff.append(\"\\\\t\");\n                    break;\n                default :\n                    if (c < ' ') {\n                        buff.append(\"\\\\u00\");\n                        buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n                        buff.append(java.lang.Character.forDigit(c & 15, 16));\n                    } else {\n                        buff.append(c);\n                    }\n            }\n        }\n    }\n\n    public int length() {\n        return buff.length();\n    }\n\n    public static java.lang.String prettyPrint(java.lang.String jsop) {\n        java.lang.StringBuilder buff = new java.lang.StringBuilder();\n        org.apache.jackrabbit.oak.commons.json.JsopTokenizer t = new org.apache.jackrabbit.oak.commons.json.JsopTokenizer(jsop);\n        while (true) {\n            org.apache.jackrabbit.oak.commons.json.JsopBuilder.prettyPrint(buff, t, \"  \");\n            if (t.getTokenType() == JsopReader.END) {\n                return buff.toString();\n            }\n        } \n    }\n\n    static java.lang.String prettyPrint(java.lang.StringBuilder buff, org.apache.jackrabbit.oak.commons.json.JsopTokenizer t, java.lang.String ident) {\n        java.lang.String space = \"\";\n        boolean inArray = false;\n        while (true) {\n            int token = t.read();\n            switch (token) {\n                case JsopReader.END :\n                    return buff.toString();\n                case JsopReader.STRING :\n                    buff.append('\\\"').append(t.getEscapedToken()).append('\\\"');\n                    break;\n                case JsopReader.NUMBER :\n                case JsopReader.TRUE :\n                case JsopReader.FALSE :\n                case JsopReader.NULL :\n                case JsopReader.IDENTIFIER :\n                case JsopReader.ERROR :\n                    buff.append(t.getEscapedToken());\n                    break;\n                case '{' :\n                    if (t.matches('}')) {\n                        buff.append(\"{}\");\n                    } else {\n                        buff.append(\"{\\n\").append(space += ident);\n                    }\n                    break;\n                case '}' :\n                    space = space.substring(0, space.length() - ident.length());\n                    buff.append('\\n').append(space).append(\"}\");\n                    break;\n                case '[' :\n                    inArray = true;\n                    buff.append(\"[\");\n                    break;\n                case ']' :\n                    inArray = false;\n                    buff.append(\"]\");\n                    break;\n                case ',' :\n                    if (!inArray) {\n                        buff.append(\",\\n\").append(space);\n                    } else {\n                        buff.append(\", \");\n                    }\n                    break;\n                default :\n                    buff.append(((char) (token))).append(' ');\n                    break;\n            }\n        } \n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static void escape(java.lang.String s, int length, java.lang.StringBuilder buff) {\n    for (int i = 0; i < length; i++) {\n        char c = s.charAt(i);\n        switch (c) {\n            case '\"' :\n                buff.append(\"\\\\\\\"\");\n                break;\n            case '\\\\' :\n                buff.append(\"\\\\\\\\\");\n                break;\n            case '\\b' :\n                buff.append(\"\\\\b\");\n                break;\n            case '\\f' :\n                buff.append(\"\\\\f\");\n                break;\n            case '\\n' :\n                buff.append(\"\\\\n\");\n                break;\n            case '\\r' :\n                buff.append(\"\\\\r\");\n                break;\n            case '\\t' :\n                buff.append(\"\\\\t\");\n                break;\n            default :\n                if (c < ' ') {\n                    buff.append(\"\\\\u00\");\n                    buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n                    buff.append(java.lang.Character.forDigit(c & 15, 16));\n                } else {\n                    buff.append(c);\n                }\n        }\n    }\n}",
            "src_parent": "public class JsopBuilder implements org.apache.jackrabbit.oak.commons.json.JsopWriter {\n    private static final boolean JSON_NEWLINES = false;\n\n    private java.lang.StringBuilder buff = new java.lang.StringBuilder();\n\n    private boolean needComma;\n\n    private int lineLength;\n\n    private int previous;\n\n    @java.lang.Override\n    public void resetWriter() {\n        needComma = false;\n        buff.setLength(0);\n    }\n\n    @java.lang.Override\n    public void setLineLength(int length) {\n        lineLength = length;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder append(org.apache.jackrabbit.oak.commons.json.JsopWriter buffer) {\n        appendTag(buffer.toString());\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder tag(char tag) {\n        buff.append(tag);\n        needComma = false;\n        return this;\n    }\n\n    private org.apache.jackrabbit.oak.commons.json.JsopBuilder appendTag(java.lang.String string) {\n        buff.append(string);\n        needComma = false;\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder newline() {\n        buff.append('\\n');\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder object() {\n        optionalCommaAndNewline(1);\n        buff.append('{');\n        needComma = false;\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder endObject() {\n        if (org.apache.jackrabbit.oak.commons.json.JsopBuilder.JSON_NEWLINES) {\n            buff.append(\"\\n}\");\n        } else {\n            buff.append('}');\n        }\n        needComma = true;\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder array() {\n        optionalCommaAndNewline(1);\n        buff.append('[');\n        needComma = false;\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder endArray() {\n        buff.append(']');\n        needComma = true;\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder key(java.lang.String name) {\n        optionalCommaAndNewline(name.length());\n        if (org.apache.jackrabbit.oak.commons.json.JsopBuilder.JSON_NEWLINES) {\n            buff.append('\\n');\n        }\n        buff.append(org.apache.jackrabbit.oak.commons.json.JsopBuilder.encode(name)).append(':');\n        needComma = false;\n        return this;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder value(long value) {\n        return encodedValue(java.lang.Long.toString(value));\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder value(boolean value) {\n        return encodedValue(java.lang.Boolean.toString(value));\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder value(java.lang.String value) {\n        return encodedValue(org.apache.jackrabbit.oak.commons.json.JsopBuilder.encode(value));\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.commons.json.JsopBuilder encodedValue(java.lang.String value) {\n        optionalCommaAndNewline(value.length());\n        buff.append(value);\n        needComma = true;\n        return this;\n    }\n\n    private void optionalCommaAndNewline(int add) {\n        if (needComma) {\n            buff.append(',');\n        }\n        if (lineLength > 0) {\n            int len = buff.length();\n            if ((len > (lineLength / 4)) && (((len + add) - previous) > lineLength)) {\n                buff.append('\\n');\n                previous = len;\n            }\n        }\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return buff.toString();\n    }\n\n    public static java.lang.String encode(java.lang.String s) {\n        if (s == null) {\n            return \"null\";\n        }\n        int length = s.length();\n        if (length == 0) {\n            return \"\\\"\\\"\";\n        }\n        for (int i = 0; i < length; i++) {\n            char c = s.charAt(i);\n            if (((c == '\\\"') || (c == '\\\\')) || (c < ' ')) {\n                java.lang.StringBuilder buff = new java.lang.StringBuilder((length + 2) + (length / 8));\n                buff.append('\\\"');\n                org.apache.jackrabbit.oak.commons.json.JsopBuilder.escape(s, length, buff);\n                return buff.append('\\\"').toString();\n            }\n        }\n        java.lang.StringBuilder buff = new java.lang.StringBuilder(length + 2);\n        return buff.append('\\\"').append(s).append('\\\"').toString();\n    }\n\n    public static void escape(java.lang.String s, java.lang.StringBuilder buff) {\n        org.apache.jackrabbit.oak.commons.json.JsopBuilder.escape(s, s.length(), buff);\n    }\n\n    private static void escape(java.lang.String s, int length, java.lang.StringBuilder buff) {\n        for (int i = 0; i < length; i++) {\n            char c = s.charAt(i);\n            switch (c) {\n                case '\"' :\n                    buff.append(\"\\\\\\\"\");\n                    break;\n                case '\\\\' :\n                    buff.append(\"\\\\\\\\\");\n                    break;\n                case '\\b' :\n                    buff.append(\"\\\\b\");\n                    break;\n                case '\\f' :\n                    buff.append(\"\\\\f\");\n                    break;\n                case '\\n' :\n                    buff.append(\"\\\\n\");\n                    break;\n                case '\\r' :\n                    buff.append(\"\\\\r\");\n                    break;\n                case '\\t' :\n                    buff.append(\"\\\\t\");\n                    break;\n                default :\n                    if (c < ' ') {\n                        buff.append(\"\\\\u00\");\n                        buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n                        buff.append(java.lang.Character.forDigit(c & 15, 16));\n                    } else {\n                        buff.append(c);\n                    }\n            }\n        }\n    }\n\n    public int length() {\n        return buff.length();\n    }\n\n    public static java.lang.String prettyPrint(java.lang.String jsop) {\n        java.lang.StringBuilder buff = new java.lang.StringBuilder();\n        org.apache.jackrabbit.oak.commons.json.JsopTokenizer t = new org.apache.jackrabbit.oak.commons.json.JsopTokenizer(jsop);\n        while (true) {\n            org.apache.jackrabbit.oak.commons.json.JsopBuilder.prettyPrint(buff, t, \"  \");\n            if (t.getTokenType() == JsopReader.END) {\n                return buff.toString();\n            }\n        } \n    }\n\n    static java.lang.String prettyPrint(java.lang.StringBuilder buff, org.apache.jackrabbit.oak.commons.json.JsopTokenizer t, java.lang.String ident) {\n        java.lang.String space = \"\";\n        boolean inArray = false;\n        while (true) {\n            int token = t.read();\n            switch (token) {\n                case JsopReader.END :\n                    return buff.toString();\n                case JsopReader.STRING :\n                    buff.append('\\\"').append(t.getEscapedToken()).append('\\\"');\n                    break;\n                case JsopReader.NUMBER :\n                case JsopReader.TRUE :\n                case JsopReader.FALSE :\n                case JsopReader.NULL :\n                case JsopReader.IDENTIFIER :\n                case JsopReader.ERROR :\n                    buff.append(t.getEscapedToken());\n                    break;\n                case '{' :\n                    if (t.matches('}')) {\n                        buff.append(\"{}\");\n                    } else {\n                        buff.append(\"{\\n\").append(space += ident);\n                    }\n                    break;\n                case '}' :\n                    space = space.substring(0, space.length() - ident.length());\n                    buff.append('\\n').append(space).append(\"}\");\n                    break;\n                case '[' :\n                    inArray = true;\n                    buff.append(\"[\");\n                    break;\n                case ']' :\n                    inArray = false;\n                    buff.append(\"]\");\n                    break;\n                case ',' :\n                    if (!inArray) {\n                        buff.append(\",\\n\").append(space);\n                    } else {\n                        buff.append(\", \");\n                    }\n                    break;\n                default :\n                    buff.append(((char) (token))).append(' ');\n                    break;\n            }\n        } \n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "buff.append(java.lang.Character.forDigit(c >>> 4, 16))",
            "src_parent": "{\n    buff.append(\"\\\\u00\");\n    buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n    buff.append(java.lang.Character.forDigit(c & 15, 16));\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.lang.Character.forDigit(c & 15, 16)",
            "src_parent": "buff.append(java.lang.Character.forDigit(c & 15, 16))",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "void",
            "dst_parent": "public static void escape(java.lang.String s, java.lang.StringBuilder buff) {\n    org.apache.jackrabbit.oak.commons.json.JsopBuilder.escape(s, s.length(), buff);\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "void",
            "src_parent": "public static void escape(java.lang.String s, int length, java.lang.StringBuilder buff) {\n    for (int i = 0; i < length; i++) {\n        char c = s.charAt(i);\n        switch (c) {\n            case '\"' :\n                buff.append(\"\\\\\\\"\");\n                break;\n            case '\\\\' :\n                buff.append(\"\\\\\\\\\");\n                break;\n            case '\\b' :\n                buff.append(\"\\\\b\");\n                break;\n            case '\\f' :\n                buff.append(\"\\\\f\");\n                break;\n            case '\\n' :\n                buff.append(\"\\\\n\");\n                break;\n            case '\\r' :\n                buff.append(\"\\\\r\");\n                break;\n            case '\\t' :\n                buff.append(\"\\\\t\");\n                break;\n            default :\n                if (c < ' ') {\n                    buff.append(\"\\\\u00\");\n                    java.lang.String hex = java.lang.Integer.toHexString(c);\n                    if (hex.length() == 1) {\n                        buff.append('0');\n                    }\n                    buff.append(hex);\n                } else if (c >= 127) {\n                    buff.append(\"\\\\u\");\n                    java.lang.String hex = java.lang.Integer.toHexString(c);\n                    for (int len = hex.length(); len < 4; len++) {\n                        buff.append('0');\n                    }\n                    buff.append(hex);\n                } else {\n                    buff.append(c);\n                }\n        }\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Method",
            "dst_parent": "public static void escape(java.lang.String s, java.lang.StringBuilder buff) {\n    org.apache.jackrabbit.oak.commons.json.JsopBuilder.escape(s, s.length(), buff);\n}",
            "dst_parent_type": "Method",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Method",
            "src_parent": "public static void escape(java.lang.String s, int length, java.lang.StringBuilder buff) {\n    for (int i = 0; i < length; i++) {\n        char c = s.charAt(i);\n        switch (c) {\n            case '\"' :\n                buff.append(\"\\\\\\\"\");\n                break;\n            case '\\\\' :\n                buff.append(\"\\\\\\\\\");\n                break;\n            case '\\b' :\n                buff.append(\"\\\\b\");\n                break;\n            case '\\f' :\n                buff.append(\"\\\\f\");\n                break;\n            case '\\n' :\n                buff.append(\"\\\\n\");\n                break;\n            case '\\r' :\n                buff.append(\"\\\\r\");\n                break;\n            case '\\t' :\n                buff.append(\"\\\\t\");\n                break;\n            default :\n                if (c < ' ') {\n                    buff.append(\"\\\\u00\");\n                    java.lang.String hex = java.lang.Integer.toHexString(c);\n                    if (hex.length() == 1) {\n                        buff.append('0');\n                    }\n                    buff.append(hex);\n                } else if (c >= 127) {\n                    buff.append(\"\\\\u\");\n                    java.lang.String hex = java.lang.Integer.toHexString(c);\n                    for (int len = hex.length(); len < 4; len++) {\n                        buff.append('0');\n                    }\n                    buff.append(hex);\n                } else {\n                    buff.append(c);\n                }\n        }\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String s",
            "dst_parent": "private static void escape(java.lang.String s, int length, java.lang.StringBuilder buff) {\n    for (int i = 0; i < length; i++) {\n        char c = s.charAt(i);\n        switch (c) {\n            case '\"' :\n                buff.append(\"\\\\\\\"\");\n                break;\n            case '\\\\' :\n                buff.append(\"\\\\\\\\\");\n                break;\n            case '\\b' :\n                buff.append(\"\\\\b\");\n                break;\n            case '\\f' :\n                buff.append(\"\\\\f\");\n                break;\n            case '\\n' :\n                buff.append(\"\\\\n\");\n                break;\n            case '\\r' :\n                buff.append(\"\\\\r\");\n                break;\n            case '\\t' :\n                buff.append(\"\\\\t\");\n                break;\n            default :\n                if (c < ' ') {\n                    buff.append(\"\\\\u00\");\n                    buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n                    buff.append(java.lang.Character.forDigit(c & 15, 16));\n                } else {\n                    buff.append(c);\n                }\n        }\n    }\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "java.lang.String s",
            "src_parent": "public static void escape(java.lang.String s, int length, java.lang.StringBuilder buff) {\n    for (int i = 0; i < length; i++) {\n        char c = s.charAt(i);\n        switch (c) {\n            case '\"' :\n                buff.append(\"\\\\\\\"\");\n                break;\n            case '\\\\' :\n                buff.append(\"\\\\\\\\\");\n                break;\n            case '\\b' :\n                buff.append(\"\\\\b\");\n                break;\n            case '\\f' :\n                buff.append(\"\\\\f\");\n                break;\n            case '\\n' :\n                buff.append(\"\\\\n\");\n                break;\n            case '\\r' :\n                buff.append(\"\\\\r\");\n                break;\n            case '\\t' :\n                buff.append(\"\\\\t\");\n                break;\n            default :\n                if (c < ' ') {\n                    buff.append(\"\\\\u00\");\n                    java.lang.String hex = java.lang.Integer.toHexString(c);\n                    if (hex.length() == 1) {\n                        buff.append('0');\n                    }\n                    buff.append(hex);\n                } else if (c >= 127) {\n                    buff.append(\"\\\\u\");\n                    java.lang.String hex = java.lang.Integer.toHexString(c);\n                    for (int len = hex.length(); len < 4; len++) {\n                        buff.append('0');\n                    }\n                    buff.append(hex);\n                } else {\n                    buff.append(c);\n                }\n        }\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "int length",
            "dst_parent": "private static void escape(java.lang.String s, int length, java.lang.StringBuilder buff) {\n    for (int i = 0; i < length; i++) {\n        char c = s.charAt(i);\n        switch (c) {\n            case '\"' :\n                buff.append(\"\\\\\\\"\");\n                break;\n            case '\\\\' :\n                buff.append(\"\\\\\\\\\");\n                break;\n            case '\\b' :\n                buff.append(\"\\\\b\");\n                break;\n            case '\\f' :\n                buff.append(\"\\\\f\");\n                break;\n            case '\\n' :\n                buff.append(\"\\\\n\");\n                break;\n            case '\\r' :\n                buff.append(\"\\\\r\");\n                break;\n            case '\\t' :\n                buff.append(\"\\\\t\");\n                break;\n            default :\n                if (c < ' ') {\n                    buff.append(\"\\\\u00\");\n                    buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n                    buff.append(java.lang.Character.forDigit(c & 15, 16));\n                } else {\n                    buff.append(c);\n                }\n        }\n    }\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "int length",
            "src_parent": "public static void escape(java.lang.String s, int length, java.lang.StringBuilder buff) {\n    for (int i = 0; i < length; i++) {\n        char c = s.charAt(i);\n        switch (c) {\n            case '\"' :\n                buff.append(\"\\\\\\\"\");\n                break;\n            case '\\\\' :\n                buff.append(\"\\\\\\\\\");\n                break;\n            case '\\b' :\n                buff.append(\"\\\\b\");\n                break;\n            case '\\f' :\n                buff.append(\"\\\\f\");\n                break;\n            case '\\n' :\n                buff.append(\"\\\\n\");\n                break;\n            case '\\r' :\n                buff.append(\"\\\\r\");\n                break;\n            case '\\t' :\n                buff.append(\"\\\\t\");\n                break;\n            default :\n                if (c < ' ') {\n                    buff.append(\"\\\\u00\");\n                    java.lang.String hex = java.lang.Integer.toHexString(c);\n                    if (hex.length() == 1) {\n                        buff.append('0');\n                    }\n                    buff.append(hex);\n                } else if (c >= 127) {\n                    buff.append(\"\\\\u\");\n                    java.lang.String hex = java.lang.Integer.toHexString(c);\n                    for (int len = hex.length(); len < 4; len++) {\n                        buff.append('0');\n                    }\n                    buff.append(hex);\n                } else {\n                    buff.append(c);\n                }\n        }\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.StringBuilder buff",
            "dst_parent": "private static void escape(java.lang.String s, int length, java.lang.StringBuilder buff) {\n    for (int i = 0; i < length; i++) {\n        char c = s.charAt(i);\n        switch (c) {\n            case '\"' :\n                buff.append(\"\\\\\\\"\");\n                break;\n            case '\\\\' :\n                buff.append(\"\\\\\\\\\");\n                break;\n            case '\\b' :\n                buff.append(\"\\\\b\");\n                break;\n            case '\\f' :\n                buff.append(\"\\\\f\");\n                break;\n            case '\\n' :\n                buff.append(\"\\\\n\");\n                break;\n            case '\\r' :\n                buff.append(\"\\\\r\");\n                break;\n            case '\\t' :\n                buff.append(\"\\\\t\");\n                break;\n            default :\n                if (c < ' ') {\n                    buff.append(\"\\\\u00\");\n                    buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n                    buff.append(java.lang.Character.forDigit(c & 15, 16));\n                } else {\n                    buff.append(c);\n                }\n        }\n    }\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "java.lang.StringBuilder buff",
            "src_parent": "public static void escape(java.lang.String s, int length, java.lang.StringBuilder buff) {\n    for (int i = 0; i < length; i++) {\n        char c = s.charAt(i);\n        switch (c) {\n            case '\"' :\n                buff.append(\"\\\\\\\"\");\n                break;\n            case '\\\\' :\n                buff.append(\"\\\\\\\\\");\n                break;\n            case '\\b' :\n                buff.append(\"\\\\b\");\n                break;\n            case '\\f' :\n                buff.append(\"\\\\f\");\n                break;\n            case '\\n' :\n                buff.append(\"\\\\n\");\n                break;\n            case '\\r' :\n                buff.append(\"\\\\r\");\n                break;\n            case '\\t' :\n                buff.append(\"\\\\t\");\n                break;\n            default :\n                if (c < ' ') {\n                    buff.append(\"\\\\u00\");\n                    java.lang.String hex = java.lang.Integer.toHexString(c);\n                    if (hex.length() == 1) {\n                        buff.append('0');\n                    }\n                    buff.append(hex);\n                } else if (c >= 127) {\n                    buff.append(\"\\\\u\");\n                    java.lang.String hex = java.lang.Integer.toHexString(c);\n                    for (int len = hex.length(); len < 4; len++) {\n                        buff.append('0');\n                    }\n                    buff.append(hex);\n                } else {\n                    buff.append(c);\n                }\n        }\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "s",
            "dst_parent": "org.apache.jackrabbit.oak.commons.json.JsopBuilder.escape(s, s.length(), buff)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "c",
            "src_parent": "java.lang.Integer.toHexString(c)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "buff",
            "dst_parent": "org.apache.jackrabbit.oak.commons.json.JsopBuilder.escape(s, s.length(), buff)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "buff",
            "src_parent": "buff.append('0')",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "int i = 0",
            "dst_parent": "for (int i = 0; i < length; i++) {\n    char c = s.charAt(i);\n    switch (c) {\n        case '\"' :\n            buff.append(\"\\\\\\\"\");\n            break;\n        case '\\\\' :\n            buff.append(\"\\\\\\\\\");\n            break;\n        case '\\b' :\n            buff.append(\"\\\\b\");\n            break;\n        case '\\f' :\n            buff.append(\"\\\\f\");\n            break;\n        case '\\n' :\n            buff.append(\"\\\\n\");\n            break;\n        case '\\r' :\n            buff.append(\"\\\\r\");\n            break;\n        case '\\t' :\n            buff.append(\"\\\\t\");\n            break;\n        default :\n            if (c < ' ') {\n                buff.append(\"\\\\u00\");\n                buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n                buff.append(java.lang.Character.forDigit(c & 15, 16));\n            } else {\n                buff.append(c);\n            }\n    }\n}",
            "dst_parent_type": "For",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "int i = 0",
            "src_parent": "for (int i = 0; i < length; i++) {\n    char c = s.charAt(i);\n    switch (c) {\n        case '\"' :\n            buff.append(\"\\\\\\\"\");\n            break;\n        case '\\\\' :\n            buff.append(\"\\\\\\\\\");\n            break;\n        case '\\b' :\n            buff.append(\"\\\\b\");\n            break;\n        case '\\f' :\n            buff.append(\"\\\\f\");\n            break;\n        case '\\n' :\n            buff.append(\"\\\\n\");\n            break;\n        case '\\r' :\n            buff.append(\"\\\\r\");\n            break;\n        case '\\t' :\n            buff.append(\"\\\\t\");\n            break;\n        default :\n            if (c < ' ') {\n                buff.append(\"\\\\u00\");\n                java.lang.String hex = java.lang.Integer.toHexString(c);\n                if (hex.length() == 1) {\n                    buff.append('0');\n                }\n                buff.append(hex);\n            } else if (c >= 127) {\n                buff.append(\"\\\\u\");\n                java.lang.String hex = java.lang.Integer.toHexString(c);\n                for (int len = hex.length(); len < 4; len++) {\n                    buff.append('0');\n                }\n                buff.append(hex);\n            } else {\n                buff.append(c);\n            }\n    }\n}",
            "src_parent_type": "For",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "i < length",
            "dst_parent": "for (int i = 0; i < length; i++) {\n    char c = s.charAt(i);\n    switch (c) {\n        case '\"' :\n            buff.append(\"\\\\\\\"\");\n            break;\n        case '\\\\' :\n            buff.append(\"\\\\\\\\\");\n            break;\n        case '\\b' :\n            buff.append(\"\\\\b\");\n            break;\n        case '\\f' :\n            buff.append(\"\\\\f\");\n            break;\n        case '\\n' :\n            buff.append(\"\\\\n\");\n            break;\n        case '\\r' :\n            buff.append(\"\\\\r\");\n            break;\n        case '\\t' :\n            buff.append(\"\\\\t\");\n            break;\n        default :\n            if (c < ' ') {\n                buff.append(\"\\\\u00\");\n                buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n                buff.append(java.lang.Character.forDigit(c & 15, 16));\n            } else {\n                buff.append(c);\n            }\n    }\n}",
            "dst_parent_type": "For",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "i < length",
            "src_parent": "for (int i = 0; i < length; i++) {\n    char c = s.charAt(i);\n    switch (c) {\n        case '\"' :\n            buff.append(\"\\\\\\\"\");\n            break;\n        case '\\\\' :\n            buff.append(\"\\\\\\\\\");\n            break;\n        case '\\b' :\n            buff.append(\"\\\\b\");\n            break;\n        case '\\f' :\n            buff.append(\"\\\\f\");\n            break;\n        case '\\n' :\n            buff.append(\"\\\\n\");\n            break;\n        case '\\r' :\n            buff.append(\"\\\\r\");\n            break;\n        case '\\t' :\n            buff.append(\"\\\\t\");\n            break;\n        default :\n            if (c < ' ') {\n                buff.append(\"\\\\u00\");\n                java.lang.String hex = java.lang.Integer.toHexString(c);\n                if (hex.length() == 1) {\n                    buff.append('0');\n                }\n                buff.append(hex);\n            } else if (c >= 127) {\n                buff.append(\"\\\\u\");\n                java.lang.String hex = java.lang.Integer.toHexString(c);\n                for (int len = hex.length(); len < 4; len++) {\n                    buff.append('0');\n                }\n                buff.append(hex);\n            } else {\n                buff.append(c);\n            }\n    }\n}",
            "src_parent_type": "For",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "i++",
            "dst_parent": "for (int i = 0; i < length; i++) {\n    char c = s.charAt(i);\n    switch (c) {\n        case '\"' :\n            buff.append(\"\\\\\\\"\");\n            break;\n        case '\\\\' :\n            buff.append(\"\\\\\\\\\");\n            break;\n        case '\\b' :\n            buff.append(\"\\\\b\");\n            break;\n        case '\\f' :\n            buff.append(\"\\\\f\");\n            break;\n        case '\\n' :\n            buff.append(\"\\\\n\");\n            break;\n        case '\\r' :\n            buff.append(\"\\\\r\");\n            break;\n        case '\\t' :\n            buff.append(\"\\\\t\");\n            break;\n        default :\n            if (c < ' ') {\n                buff.append(\"\\\\u00\");\n                buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n                buff.append(java.lang.Character.forDigit(c & 15, 16));\n            } else {\n                buff.append(c);\n            }\n    }\n}",
            "dst_parent_type": "For",
            "dst_type": "UnaryOperator",
            "operator": "MOV",
            "src": "i++",
            "src_parent": "for (int i = 0; i < length; i++) {\n    char c = s.charAt(i);\n    switch (c) {\n        case '\"' :\n            buff.append(\"\\\\\\\"\");\n            break;\n        case '\\\\' :\n            buff.append(\"\\\\\\\\\");\n            break;\n        case '\\b' :\n            buff.append(\"\\\\b\");\n            break;\n        case '\\f' :\n            buff.append(\"\\\\f\");\n            break;\n        case '\\n' :\n            buff.append(\"\\\\n\");\n            break;\n        case '\\r' :\n            buff.append(\"\\\\r\");\n            break;\n        case '\\t' :\n            buff.append(\"\\\\t\");\n            break;\n        default :\n            if (c < ' ') {\n                buff.append(\"\\\\u00\");\n                java.lang.String hex = java.lang.Integer.toHexString(c);\n                if (hex.length() == 1) {\n                    buff.append('0');\n                }\n                buff.append(hex);\n            } else if (c >= 127) {\n                buff.append(\"\\\\u\");\n                java.lang.String hex = java.lang.Integer.toHexString(c);\n                for (int len = hex.length(); len < 4; len++) {\n                    buff.append('0');\n                }\n                buff.append(hex);\n            } else {\n                buff.append(c);\n            }\n    }\n}",
            "src_parent_type": "For",
            "src_type": "UnaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "char c = s.charAt(i)",
            "dst_parent": "{\n    char c = s.charAt(i);\n    switch (c) {\n        case '\"' :\n            buff.append(\"\\\\\\\"\");\n            break;\n        case '\\\\' :\n            buff.append(\"\\\\\\\\\");\n            break;\n        case '\\b' :\n            buff.append(\"\\\\b\");\n            break;\n        case '\\f' :\n            buff.append(\"\\\\f\");\n            break;\n        case '\\n' :\n            buff.append(\"\\\\n\");\n            break;\n        case '\\r' :\n            buff.append(\"\\\\r\");\n            break;\n        case '\\t' :\n            buff.append(\"\\\\t\");\n            break;\n        default :\n            if (c < ' ') {\n                buff.append(\"\\\\u00\");\n                buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n                buff.append(java.lang.Character.forDigit(c & 15, 16));\n            } else {\n                buff.append(c);\n            }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "char c = s.charAt(i)",
            "src_parent": "{\n    char c = s.charAt(i);\n    switch (c) {\n        case '\"' :\n            buff.append(\"\\\\\\\"\");\n            break;\n        case '\\\\' :\n            buff.append(\"\\\\\\\\\");\n            break;\n        case '\\b' :\n            buff.append(\"\\\\b\");\n            break;\n        case '\\f' :\n            buff.append(\"\\\\f\");\n            break;\n        case '\\n' :\n            buff.append(\"\\\\n\");\n            break;\n        case '\\r' :\n            buff.append(\"\\\\r\");\n            break;\n        case '\\t' :\n            buff.append(\"\\\\t\");\n            break;\n        default :\n            if (c < ' ') {\n                buff.append(\"\\\\u00\");\n                java.lang.String hex = java.lang.Integer.toHexString(c);\n                if (hex.length() == 1) {\n                    buff.append('0');\n                }\n                buff.append(hex);\n            } else if (c >= 127) {\n                buff.append(\"\\\\u\");\n                java.lang.String hex = java.lang.Integer.toHexString(c);\n                for (int len = hex.length(); len < 4; len++) {\n                    buff.append('0');\n                }\n                buff.append(hex);\n            } else {\n                buff.append(c);\n            }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "((c == '\\\"') || (c == '\\\\')) || (c < ' ')",
            "dst_parent": "if (((c == '\\\"') || (c == '\\\\')) || (c < ' ')) {\n    java.lang.StringBuilder buff = new java.lang.StringBuilder((length + 2) + (length / 8));\n    buff.append('\\\"');\n    org.apache.jackrabbit.oak.commons.json.JsopBuilder.escape(s, length, buff);\n    return buff.append('\\\"').toString();\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(((c == '\\\"') || (c == '\\\\')) || (c < ' '))",
            "src_parent": "(((c == '\\\"') || (c == '\\\\')) || (c < ' ')) || (c >= 127)",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "s",
            "dst_parent": "s.length()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "hex",
            "src_parent": "hex.length()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "case '\"' :\n    buff.append(\"\\\\\\\"\");\n    break;",
            "dst_parent": "switch (c) {\n    case '\"' :\n        buff.append(\"\\\\\\\"\");\n        break;\n    case '\\\\' :\n        buff.append(\"\\\\\\\\\");\n        break;\n    case '\\b' :\n        buff.append(\"\\\\b\");\n        break;\n    case '\\f' :\n        buff.append(\"\\\\f\");\n        break;\n    case '\\n' :\n        buff.append(\"\\\\n\");\n        break;\n    case '\\r' :\n        buff.append(\"\\\\r\");\n        break;\n    case '\\t' :\n        buff.append(\"\\\\t\");\n        break;\n    default :\n        if (c < ' ') {\n            buff.append(\"\\\\u00\");\n            buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n            buff.append(java.lang.Character.forDigit(c & 15, 16));\n        } else {\n            buff.append(c);\n        }\n}",
            "dst_parent_type": "Switch",
            "dst_type": "Case",
            "operator": "MOV",
            "src": "case '\"' :\n    buff.append(\"\\\\\\\"\");\n    break;",
            "src_parent": "switch (c) {\n    case '\"' :\n        buff.append(\"\\\\\\\"\");\n        break;\n    case '\\\\' :\n        buff.append(\"\\\\\\\\\");\n        break;\n    case '\\b' :\n        buff.append(\"\\\\b\");\n        break;\n    case '\\f' :\n        buff.append(\"\\\\f\");\n        break;\n    case '\\n' :\n        buff.append(\"\\\\n\");\n        break;\n    case '\\r' :\n        buff.append(\"\\\\r\");\n        break;\n    case '\\t' :\n        buff.append(\"\\\\t\");\n        break;\n    default :\n        if (c < ' ') {\n            buff.append(\"\\\\u00\");\n            java.lang.String hex = java.lang.Integer.toHexString(c);\n            if (hex.length() == 1) {\n                buff.append('0');\n            }\n            buff.append(hex);\n        } else if (c >= 127) {\n            buff.append(\"\\\\u\");\n            java.lang.String hex = java.lang.Integer.toHexString(c);\n            for (int len = hex.length(); len < 4; len++) {\n                buff.append('0');\n            }\n            buff.append(hex);\n        } else {\n            buff.append(c);\n        }\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "case '\\\\' :\n    buff.append(\"\\\\\\\\\");\n    break;",
            "dst_parent": "switch (c) {\n    case '\"' :\n        buff.append(\"\\\\\\\"\");\n        break;\n    case '\\\\' :\n        buff.append(\"\\\\\\\\\");\n        break;\n    case '\\b' :\n        buff.append(\"\\\\b\");\n        break;\n    case '\\f' :\n        buff.append(\"\\\\f\");\n        break;\n    case '\\n' :\n        buff.append(\"\\\\n\");\n        break;\n    case '\\r' :\n        buff.append(\"\\\\r\");\n        break;\n    case '\\t' :\n        buff.append(\"\\\\t\");\n        break;\n    default :\n        if (c < ' ') {\n            buff.append(\"\\\\u00\");\n            buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n            buff.append(java.lang.Character.forDigit(c & 15, 16));\n        } else {\n            buff.append(c);\n        }\n}",
            "dst_parent_type": "Switch",
            "dst_type": "Case",
            "operator": "MOV",
            "src": "case '\\\\' :\n    buff.append(\"\\\\\\\\\");\n    break;",
            "src_parent": "switch (c) {\n    case '\"' :\n        buff.append(\"\\\\\\\"\");\n        break;\n    case '\\\\' :\n        buff.append(\"\\\\\\\\\");\n        break;\n    case '\\b' :\n        buff.append(\"\\\\b\");\n        break;\n    case '\\f' :\n        buff.append(\"\\\\f\");\n        break;\n    case '\\n' :\n        buff.append(\"\\\\n\");\n        break;\n    case '\\r' :\n        buff.append(\"\\\\r\");\n        break;\n    case '\\t' :\n        buff.append(\"\\\\t\");\n        break;\n    default :\n        if (c < ' ') {\n            buff.append(\"\\\\u00\");\n            java.lang.String hex = java.lang.Integer.toHexString(c);\n            if (hex.length() == 1) {\n                buff.append('0');\n            }\n            buff.append(hex);\n        } else if (c >= 127) {\n            buff.append(\"\\\\u\");\n            java.lang.String hex = java.lang.Integer.toHexString(c);\n            for (int len = hex.length(); len < 4; len++) {\n                buff.append('0');\n            }\n            buff.append(hex);\n        } else {\n            buff.append(c);\n        }\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "case '\\b' :\n    buff.append(\"\\\\b\");\n    break;",
            "dst_parent": "switch (c) {\n    case '\"' :\n        buff.append(\"\\\\\\\"\");\n        break;\n    case '\\\\' :\n        buff.append(\"\\\\\\\\\");\n        break;\n    case '\\b' :\n        buff.append(\"\\\\b\");\n        break;\n    case '\\f' :\n        buff.append(\"\\\\f\");\n        break;\n    case '\\n' :\n        buff.append(\"\\\\n\");\n        break;\n    case '\\r' :\n        buff.append(\"\\\\r\");\n        break;\n    case '\\t' :\n        buff.append(\"\\\\t\");\n        break;\n    default :\n        if (c < ' ') {\n            buff.append(\"\\\\u00\");\n            buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n            buff.append(java.lang.Character.forDigit(c & 15, 16));\n        } else {\n            buff.append(c);\n        }\n}",
            "dst_parent_type": "Switch",
            "dst_type": "Case",
            "operator": "MOV",
            "src": "case '\\b' :\n    buff.append(\"\\\\b\");\n    break;",
            "src_parent": "switch (c) {\n    case '\"' :\n        buff.append(\"\\\\\\\"\");\n        break;\n    case '\\\\' :\n        buff.append(\"\\\\\\\\\");\n        break;\n    case '\\b' :\n        buff.append(\"\\\\b\");\n        break;\n    case '\\f' :\n        buff.append(\"\\\\f\");\n        break;\n    case '\\n' :\n        buff.append(\"\\\\n\");\n        break;\n    case '\\r' :\n        buff.append(\"\\\\r\");\n        break;\n    case '\\t' :\n        buff.append(\"\\\\t\");\n        break;\n    default :\n        if (c < ' ') {\n            buff.append(\"\\\\u00\");\n            java.lang.String hex = java.lang.Integer.toHexString(c);\n            if (hex.length() == 1) {\n                buff.append('0');\n            }\n            buff.append(hex);\n        } else if (c >= 127) {\n            buff.append(\"\\\\u\");\n            java.lang.String hex = java.lang.Integer.toHexString(c);\n            for (int len = hex.length(); len < 4; len++) {\n                buff.append('0');\n            }\n            buff.append(hex);\n        } else {\n            buff.append(c);\n        }\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "case '\\f' :\n    buff.append(\"\\\\f\");\n    break;",
            "dst_parent": "switch (c) {\n    case '\"' :\n        buff.append(\"\\\\\\\"\");\n        break;\n    case '\\\\' :\n        buff.append(\"\\\\\\\\\");\n        break;\n    case '\\b' :\n        buff.append(\"\\\\b\");\n        break;\n    case '\\f' :\n        buff.append(\"\\\\f\");\n        break;\n    case '\\n' :\n        buff.append(\"\\\\n\");\n        break;\n    case '\\r' :\n        buff.append(\"\\\\r\");\n        break;\n    case '\\t' :\n        buff.append(\"\\\\t\");\n        break;\n    default :\n        if (c < ' ') {\n            buff.append(\"\\\\u00\");\n            buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n            buff.append(java.lang.Character.forDigit(c & 15, 16));\n        } else {\n            buff.append(c);\n        }\n}",
            "dst_parent_type": "Switch",
            "dst_type": "Case",
            "operator": "MOV",
            "src": "case '\\f' :\n    buff.append(\"\\\\f\");\n    break;",
            "src_parent": "switch (c) {\n    case '\"' :\n        buff.append(\"\\\\\\\"\");\n        break;\n    case '\\\\' :\n        buff.append(\"\\\\\\\\\");\n        break;\n    case '\\b' :\n        buff.append(\"\\\\b\");\n        break;\n    case '\\f' :\n        buff.append(\"\\\\f\");\n        break;\n    case '\\n' :\n        buff.append(\"\\\\n\");\n        break;\n    case '\\r' :\n        buff.append(\"\\\\r\");\n        break;\n    case '\\t' :\n        buff.append(\"\\\\t\");\n        break;\n    default :\n        if (c < ' ') {\n            buff.append(\"\\\\u00\");\n            java.lang.String hex = java.lang.Integer.toHexString(c);\n            if (hex.length() == 1) {\n                buff.append('0');\n            }\n            buff.append(hex);\n        } else if (c >= 127) {\n            buff.append(\"\\\\u\");\n            java.lang.String hex = java.lang.Integer.toHexString(c);\n            for (int len = hex.length(); len < 4; len++) {\n                buff.append('0');\n            }\n            buff.append(hex);\n        } else {\n            buff.append(c);\n        }\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "case '\\n' :\n    buff.append(\"\\\\n\");\n    break;",
            "dst_parent": "switch (c) {\n    case '\"' :\n        buff.append(\"\\\\\\\"\");\n        break;\n    case '\\\\' :\n        buff.append(\"\\\\\\\\\");\n        break;\n    case '\\b' :\n        buff.append(\"\\\\b\");\n        break;\n    case '\\f' :\n        buff.append(\"\\\\f\");\n        break;\n    case '\\n' :\n        buff.append(\"\\\\n\");\n        break;\n    case '\\r' :\n        buff.append(\"\\\\r\");\n        break;\n    case '\\t' :\n        buff.append(\"\\\\t\");\n        break;\n    default :\n        if (c < ' ') {\n            buff.append(\"\\\\u00\");\n            buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n            buff.append(java.lang.Character.forDigit(c & 15, 16));\n        } else {\n            buff.append(c);\n        }\n}",
            "dst_parent_type": "Switch",
            "dst_type": "Case",
            "operator": "MOV",
            "src": "case '\\n' :\n    buff.append(\"\\\\n\");\n    break;",
            "src_parent": "switch (c) {\n    case '\"' :\n        buff.append(\"\\\\\\\"\");\n        break;\n    case '\\\\' :\n        buff.append(\"\\\\\\\\\");\n        break;\n    case '\\b' :\n        buff.append(\"\\\\b\");\n        break;\n    case '\\f' :\n        buff.append(\"\\\\f\");\n        break;\n    case '\\n' :\n        buff.append(\"\\\\n\");\n        break;\n    case '\\r' :\n        buff.append(\"\\\\r\");\n        break;\n    case '\\t' :\n        buff.append(\"\\\\t\");\n        break;\n    default :\n        if (c < ' ') {\n            buff.append(\"\\\\u00\");\n            java.lang.String hex = java.lang.Integer.toHexString(c);\n            if (hex.length() == 1) {\n                buff.append('0');\n            }\n            buff.append(hex);\n        } else if (c >= 127) {\n            buff.append(\"\\\\u\");\n            java.lang.String hex = java.lang.Integer.toHexString(c);\n            for (int len = hex.length(); len < 4; len++) {\n                buff.append('0');\n            }\n            buff.append(hex);\n        } else {\n            buff.append(c);\n        }\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "case '\\r' :\n    buff.append(\"\\\\r\");\n    break;",
            "dst_parent": "switch (c) {\n    case '\"' :\n        buff.append(\"\\\\\\\"\");\n        break;\n    case '\\\\' :\n        buff.append(\"\\\\\\\\\");\n        break;\n    case '\\b' :\n        buff.append(\"\\\\b\");\n        break;\n    case '\\f' :\n        buff.append(\"\\\\f\");\n        break;\n    case '\\n' :\n        buff.append(\"\\\\n\");\n        break;\n    case '\\r' :\n        buff.append(\"\\\\r\");\n        break;\n    case '\\t' :\n        buff.append(\"\\\\t\");\n        break;\n    default :\n        if (c < ' ') {\n            buff.append(\"\\\\u00\");\n            buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n            buff.append(java.lang.Character.forDigit(c & 15, 16));\n        } else {\n            buff.append(c);\n        }\n}",
            "dst_parent_type": "Switch",
            "dst_type": "Case",
            "operator": "MOV",
            "src": "case '\\r' :\n    buff.append(\"\\\\r\");\n    break;",
            "src_parent": "switch (c) {\n    case '\"' :\n        buff.append(\"\\\\\\\"\");\n        break;\n    case '\\\\' :\n        buff.append(\"\\\\\\\\\");\n        break;\n    case '\\b' :\n        buff.append(\"\\\\b\");\n        break;\n    case '\\f' :\n        buff.append(\"\\\\f\");\n        break;\n    case '\\n' :\n        buff.append(\"\\\\n\");\n        break;\n    case '\\r' :\n        buff.append(\"\\\\r\");\n        break;\n    case '\\t' :\n        buff.append(\"\\\\t\");\n        break;\n    default :\n        if (c < ' ') {\n            buff.append(\"\\\\u00\");\n            java.lang.String hex = java.lang.Integer.toHexString(c);\n            if (hex.length() == 1) {\n                buff.append('0');\n            }\n            buff.append(hex);\n        } else if (c >= 127) {\n            buff.append(\"\\\\u\");\n            java.lang.String hex = java.lang.Integer.toHexString(c);\n            for (int len = hex.length(); len < 4; len++) {\n                buff.append('0');\n            }\n            buff.append(hex);\n        } else {\n            buff.append(c);\n        }\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "case '\\t' :\n    buff.append(\"\\\\t\");\n    break;",
            "dst_parent": "switch (c) {\n    case '\"' :\n        buff.append(\"\\\\\\\"\");\n        break;\n    case '\\\\' :\n        buff.append(\"\\\\\\\\\");\n        break;\n    case '\\b' :\n        buff.append(\"\\\\b\");\n        break;\n    case '\\f' :\n        buff.append(\"\\\\f\");\n        break;\n    case '\\n' :\n        buff.append(\"\\\\n\");\n        break;\n    case '\\r' :\n        buff.append(\"\\\\r\");\n        break;\n    case '\\t' :\n        buff.append(\"\\\\t\");\n        break;\n    default :\n        if (c < ' ') {\n            buff.append(\"\\\\u00\");\n            buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n            buff.append(java.lang.Character.forDigit(c & 15, 16));\n        } else {\n            buff.append(c);\n        }\n}",
            "dst_parent_type": "Switch",
            "dst_type": "Case",
            "operator": "MOV",
            "src": "case '\\t' :\n    buff.append(\"\\\\t\");\n    break;",
            "src_parent": "switch (c) {\n    case '\"' :\n        buff.append(\"\\\\\\\"\");\n        break;\n    case '\\\\' :\n        buff.append(\"\\\\\\\\\");\n        break;\n    case '\\b' :\n        buff.append(\"\\\\b\");\n        break;\n    case '\\f' :\n        buff.append(\"\\\\f\");\n        break;\n    case '\\n' :\n        buff.append(\"\\\\n\");\n        break;\n    case '\\r' :\n        buff.append(\"\\\\r\");\n        break;\n    case '\\t' :\n        buff.append(\"\\\\t\");\n        break;\n    default :\n        if (c < ' ') {\n            buff.append(\"\\\\u00\");\n            java.lang.String hex = java.lang.Integer.toHexString(c);\n            if (hex.length() == 1) {\n                buff.append('0');\n            }\n            buff.append(hex);\n        } else if (c >= 127) {\n            buff.append(\"\\\\u\");\n            java.lang.String hex = java.lang.Integer.toHexString(c);\n            for (int len = hex.length(); len < 4; len++) {\n                buff.append('0');\n            }\n            buff.append(hex);\n        } else {\n            buff.append(c);\n        }\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "c < ' '",
            "dst_parent": "if (c < ' ') {\n    buff.append(\"\\\\u00\");\n    buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n    buff.append(java.lang.Character.forDigit(c & 15, 16));\n} else {\n    buff.append(c);\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "c < ' '",
            "src_parent": "if (c < ' ') {\n    buff.append(\"\\\\u00\");\n    java.lang.String hex = java.lang.Integer.toHexString(c);\n    if (hex.length() == 1) {\n        buff.append('0');\n    }\n    buff.append(hex);\n} else if (c >= 127) {\n    buff.append(\"\\\\u\");\n    java.lang.String hex = java.lang.Integer.toHexString(c);\n    for (int len = hex.length(); len < 4; len++) {\n        buff.append('0');\n    }\n    buff.append(hex);\n} else {\n    buff.append(c);\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    buff.append(\"\\\\u00\");\n    buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n    buff.append(java.lang.Character.forDigit(c & 15, 16));\n}",
            "dst_parent": "if (c < ' ') {\n    buff.append(\"\\\\u00\");\n    buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n    buff.append(java.lang.Character.forDigit(c & 15, 16));\n} else {\n    buff.append(c);\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    buff.append(\"\\\\u\");\n    java.lang.String hex = java.lang.Integer.toHexString(c);\n    for (int len = hex.length(); len < 4; len++) {\n        buff.append('0');\n    }\n    buff.append(hex);\n}",
            "src_parent": "if (c >= 127) {\n    buff.append(\"\\\\u\");\n    java.lang.String hex = java.lang.Integer.toHexString(c);\n    for (int len = hex.length(); len < 4; len++) {\n        buff.append('0');\n    }\n    buff.append(hex);\n} else {\n    buff.append(c);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    buff.append(c);\n}",
            "dst_parent": "if (c < ' ') {\n    buff.append(\"\\\\u00\");\n    buff.append(java.lang.Character.forDigit(c >>> 4, 16));\n    buff.append(java.lang.Character.forDigit(c & 15, 16));\n} else {\n    buff.append(c);\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    buff.append(c);\n}",
            "src_parent": "if (c >= 127) {\n    buff.append(\"\\\\u\");\n    java.lang.String hex = java.lang.Integer.toHexString(c);\n    for (int len = hex.length(); len < 4; len++) {\n        buff.append('0');\n    }\n    buff.append(hex);\n} else {\n    buff.append(c);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "buff",
            "dst_parent": "buff.append(java.lang.Character.forDigit(c >>> 4, 16))",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "buff",
            "src_parent": "buff.append(\"\\\\u\")",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Character",
            "dst_parent": "java.lang.Character.forDigit(c >>> 4, 16)",
            "dst_parent_type": "Invocation",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "java.lang.Integer",
            "src_parent": "java.lang.Integer.toHexString(c)",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "16",
            "dst_parent": "java.lang.Character.forDigit(c >>> 4, 16)",
            "dst_parent_type": "Invocation",
            "dst_type": "Literal",
            "operator": "MOV",
            "src": "'0'",
            "src_parent": "buff.append('0')",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "4",
            "dst_parent": "c >>> 4",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Literal",
            "operator": "MOV",
            "src": "4",
            "src_parent": "len < 4",
            "src_parent_type": "BinaryOperator",
            "src_type": "Literal"
          }
        }
      ],
      "file_name": "JsopBuilder"
    }
  ],
  "id": "jackrabbit-oak_7c320b1e"
}