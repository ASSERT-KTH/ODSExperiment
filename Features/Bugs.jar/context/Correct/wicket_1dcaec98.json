{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (work.indexOf('<') == (-1)) {\n    for (java.lang.String pattern : renderStrategies.keySet()) {\n        org.apache.wicket.extensions.markup.html.basic.ILinkRenderStrategy strategy = renderStrategies.get(pattern);\n        java.util.regex.Matcher matcher = java.util.regex.Pattern.compile(pattern, java.util.regex.Pattern.DOTALL).matcher(work);\n        java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n        while (matcher.find()) {\n            java.lang.String str = matcher.group();\n            matcher.appendReplacement(buffer, strategy.buildLink(str));\n        } \n        matcher.appendTail(buffer);\n        work = buffer.toString();\n    }\n}",
            "src_parent": "{\n    if (org.apache.wicket.util.string.Strings.isEmpty(text)) {\n        return text;\n    }\n    java.lang.String work = text;\n    if (work.indexOf('<') == (-1)) {\n        for (java.lang.String pattern : renderStrategies.keySet()) {\n            org.apache.wicket.extensions.markup.html.basic.ILinkRenderStrategy strategy = renderStrategies.get(pattern);\n            java.util.regex.Matcher matcher = java.util.regex.Pattern.compile(pattern, java.util.regex.Pattern.DOTALL).matcher(work);\n            java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n            while (matcher.find()) {\n                java.lang.String str = matcher.group();\n                matcher.appendReplacement(buffer, strategy.buildLink(str));\n            } \n            matcher.appendTail(buffer);\n            work = buffer.toString();\n        }\n    }\n    return work;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "for (java.lang.String pattern : renderStrategies.keySet()) {\n    org.apache.wicket.extensions.markup.html.basic.ILinkRenderStrategy strategy = renderStrategies.get(pattern);\n    java.util.regex.Matcher matcher = java.util.regex.Pattern.compile(pattern, java.util.regex.Pattern.DOTALL).matcher(work);\n    java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n    while (matcher.find()) {\n        java.lang.String str = matcher.group();\n        matcher.appendReplacement(buffer, strategy.buildLink(str));\n    } \n    matcher.appendTail(buffer);\n    work = buffer.toString();\n}",
            "dst_parent": "{\n    for (java.lang.String pattern : renderStrategies.keySet()) {\n        org.apache.wicket.extensions.markup.html.basic.ILinkRenderStrategy strategy = renderStrategies.get(pattern);\n        java.util.regex.Matcher matcher = java.util.regex.Pattern.compile(pattern, java.util.regex.Pattern.DOTALL).matcher(work);\n        java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n        while (matcher.find()) {\n            java.lang.String str = matcher.group();\n            matcher.appendReplacement(buffer, strategy.buildLink(str));\n        } \n        matcher.appendTail(buffer);\n        work = buffer.toString();\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "ForEach",
            "operator": "MOV",
            "src": "for (java.lang.String pattern : renderStrategies.keySet()) {\n    org.apache.wicket.extensions.markup.html.basic.ILinkRenderStrategy strategy = renderStrategies.get(pattern);\n    java.util.regex.Matcher matcher = java.util.regex.Pattern.compile(pattern, java.util.regex.Pattern.DOTALL).matcher(work);\n    java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n    while (matcher.find()) {\n        java.lang.String str = matcher.group();\n        matcher.appendReplacement(buffer, strategy.buildLink(str));\n    } \n    matcher.appendTail(buffer);\n    work = buffer.toString();\n}",
            "src_parent": "{\n    if (org.apache.wicket.util.string.Strings.isEmpty(text)) {\n        return text;\n    }\n    java.lang.String work = text;\n    for (java.lang.String pattern : renderStrategies.keySet()) {\n        org.apache.wicket.extensions.markup.html.basic.ILinkRenderStrategy strategy = renderStrategies.get(pattern);\n        java.util.regex.Matcher matcher = java.util.regex.Pattern.compile(pattern, java.util.regex.Pattern.DOTALL).matcher(work);\n        java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n        while (matcher.find()) {\n            java.lang.String str = matcher.group();\n            matcher.appendReplacement(buffer, strategy.buildLink(str));\n        } \n        matcher.appendTail(buffer);\n        work = buffer.toString();\n    }\n    return work;\n}",
            "src_parent_type": "Block",
            "src_type": "ForEach"
          }
        }
      ],
      "file_name": "LinkParser"
    }
  ],
  "id": "wicket_1dcaec98"
}