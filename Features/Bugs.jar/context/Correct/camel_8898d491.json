{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(explicitMethodName == null) && (processor != null)",
            "src_parent": "if ((explicitMethodName == null) && (processor != null)) {\n    org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Using a custom adapter as bean invocation: {}\", processor);\n    try {\n        processor.process(exchange);\n    } catch (java.lang.Throwable e) {\n        exchange.setException(e);\n    }\n    callback.done(true);\n    return true;\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private boolean allowProcessor(java.lang.String explicitMethodName, org.apache.camel.component.bean.BeanInfo info) {\n    if (explicitMethodName != null) {\n        return false;\n    }\n    for (org.apache.camel.component.bean.MethodInfo method : info.getMethods()) {\n        if (method.hasHandlerAnnotation()) {\n            return false;\n        }\n    }\n    return true;\n}",
            "src_parent": "public class BeanProcessor extends org.apache.camel.support.ServiceSupport implements org.apache.camel.AsyncProcessor {\n    private static final transient org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.camel.component.bean.BeanProcessor.class);\n\n    private boolean multiParameterArray;\n\n    private java.lang.reflect.Method methodObject;\n\n    private java.lang.String method;\n\n    private org.apache.camel.component.bean.BeanHolder beanHolder;\n\n    private boolean shorthandMethod;\n\n    public BeanProcessor(java.lang.Object pojo, org.apache.camel.component.bean.BeanInfo beanInfo) {\n        this(new org.apache.camel.component.bean.ConstantBeanHolder(pojo, beanInfo));\n    }\n\n    public BeanProcessor(java.lang.Object pojo, org.apache.camel.CamelContext camelContext, org.apache.camel.component.bean.ParameterMappingStrategy parameterMappingStrategy) {\n        this(pojo, new org.apache.camel.component.bean.BeanInfo(camelContext, pojo.getClass(), parameterMappingStrategy));\n    }\n\n    public BeanProcessor(java.lang.Object pojo, org.apache.camel.CamelContext camelContext) {\n        this(pojo, camelContext, org.apache.camel.component.bean.BeanInfo.createParameterMappingStrategy(camelContext));\n    }\n\n    public BeanProcessor(org.apache.camel.component.bean.BeanHolder beanHolder) {\n        this.beanHolder = beanHolder;\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        java.lang.String description = (methodObject != null) ? \" \" + methodObject : \"\";\n        return ((\"BeanProcessor[\" + beanHolder) + description) + \"]\";\n    }\n\n    public void process(org.apache.camel.Exchange exchange) throws java.lang.Exception {\n        org.apache.camel.util.AsyncProcessorHelper.process(this, exchange);\n    }\n\n    public boolean process(org.apache.camel.Exchange exchange, org.apache.camel.AsyncCallback callback) {\n        java.lang.String explicitMethodName = exchange.getIn().getHeader(Exchange.BEAN_METHOD_NAME, method, java.lang.String.class);\n        java.lang.Object bean;\n        org.apache.camel.component.bean.BeanInfo beanInfo;\n        try {\n            bean = beanHolder.getBean();\n            beanInfo = beanHolder.getBeanInfo();\n        } catch (java.lang.Throwable e) {\n            exchange.setException(e);\n            callback.done(true);\n            return true;\n        }\n        if (allowProcessor(explicitMethodName, beanInfo)) {\n            org.apache.camel.Processor processor = getProcessor();\n            if (processor != null) {\n                org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Using a custom adapter as bean invocation: {}\", processor);\n                try {\n                    processor.process(exchange);\n                } catch (java.lang.Throwable e) {\n                    exchange.setException(e);\n                }\n                callback.done(true);\n                return true;\n            }\n        }\n        org.apache.camel.Message in = exchange.getIn();\n        org.apache.camel.component.bean.BeanInvocation beanInvoke = null;\n        if ((in.getBody() != null) && (in.getBody() instanceof org.apache.camel.component.bean.BeanInvocation)) {\n            beanInvoke = ((org.apache.camel.component.bean.BeanInvocation) (in.getBody()));\n        }\n        if (beanInvoke != null) {\n            org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Exchange IN body is a BeanInvocation instance: {}\", beanInvoke);\n            java.lang.Class<?> clazz = beanInvoke.getMethod().getDeclaringClass();\n            boolean sameBean = clazz.isInstance(bean);\n            if (org.apache.camel.component.bean.BeanProcessor.LOG.isDebugEnabled()) {\n                org.apache.camel.component.bean.BeanProcessor.LOG.debug(\"BeanHolder bean: {} and beanInvocation bean: {} is same instance: {}\", new java.lang.Object[]{ bean.getClass(), clazz, sameBean });\n            }\n            if (sameBean) {\n                beanInvoke.invoke(bean, exchange);\n                exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());\n                callback.done(true);\n                return true;\n            }\n        }\n        if (in.getHeader(Exchange.BEAN_MULTI_PARAMETER_ARRAY) == null) {\n            in.setHeader(Exchange.BEAN_MULTI_PARAMETER_ARRAY, isMultiParameterArray());\n        }\n        org.apache.camel.component.bean.MethodInvocation invocation;\n        if (explicitMethodName != null) {\n            in.setHeader(Exchange.BEAN_METHOD_NAME, explicitMethodName);\n        }\n        try {\n            invocation = beanInfo.createInvocation(bean, exchange);\n        } catch (java.lang.Throwable e) {\n            exchange.setException(e);\n            callback.done(true);\n            return true;\n        } finally {\n            in.removeHeader(Exchange.BEAN_MULTI_PARAMETER_ARRAY);\n            in.removeHeader(Exchange.BEAN_METHOD_NAME);\n        }\n        if (invocation == null) {\n            throw new java.lang.IllegalStateException(\"No method invocation could be created, no matching method could be found on: \" + bean);\n        }\n        java.lang.Object value;\n        try {\n            java.util.concurrent.atomic.AtomicBoolean sync = new java.util.concurrent.atomic.AtomicBoolean(true);\n            value = invocation.proceed(callback, sync);\n            if (!sync.get()) {\n                org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Processing exchangeId: {} is continued being processed asynchronously\", exchange.getExchangeId());\n                return false;\n            }\n            org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Processing exchangeId: {} is continued being processed synchronously\", exchange.getExchangeId());\n        } catch (java.lang.reflect.InvocationTargetException e) {\n            exchange.setException(e.getCause());\n            callback.done(true);\n            return true;\n        } catch (java.lang.Throwable e) {\n            exchange.setException(e);\n            callback.done(true);\n            return true;\n        }\n        if ((!invocation.getMethod().getReturnType().equals(java.lang.Void.TYPE)) && (value != java.lang.Void.TYPE)) {\n            if (exchange.getPattern().isOutCapable()) {\n                org.apache.camel.component.bean.BeanProcessor.LOG.debug(\"Setting bean invocation result on the OUT message: {}\", value);\n                exchange.getOut().setBody(value);\n                exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());\n            } else {\n                org.apache.camel.component.bean.BeanProcessor.LOG.debug(\"Setting bean invocation result on the IN message: {}\", value);\n                exchange.getIn().setBody(value);\n            }\n        }\n        callback.done(true);\n        return true;\n    }\n\n    protected org.apache.camel.Processor getProcessor() {\n        return beanHolder.getProcessor();\n    }\n\n    public java.lang.Object getBean() {\n        return beanHolder.getBean();\n    }\n\n    public java.lang.String getMethod() {\n        return method;\n    }\n\n    public boolean isMultiParameterArray() {\n        return multiParameterArray;\n    }\n\n    public void setMultiParameterArray(boolean mpArray) {\n        multiParameterArray = mpArray;\n    }\n\n    public void setMethod(java.lang.String method) {\n        this.method = method;\n    }\n\n    public boolean isShorthandMethod() {\n        return shorthandMethod;\n    }\n\n    public void setShorthandMethod(boolean shorthandMethod) {\n        this.shorthandMethod = shorthandMethod;\n    }\n\n    protected void doStart() throws java.lang.Exception {\n        org.apache.camel.util.ServiceHelper.startService(getProcessor());\n    }\n\n    protected void doStop() throws java.lang.Exception {\n        org.apache.camel.util.ServiceHelper.stopService(getProcessor());\n    }\n\n    private boolean allowProcessor(java.lang.String explicitMethodName, org.apache.camel.component.bean.BeanInfo info) {\n        if (explicitMethodName != null) {\n            return false;\n        }\n        for (org.apache.camel.component.bean.MethodInfo method : info.getMethods()) {\n            if (method.hasHandlerAnnotation()) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (allowProcessor(explicitMethodName, beanInfo)) {\n    org.apache.camel.Processor processor = getProcessor();\n    if (processor != null) {\n        org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Using a custom adapter as bean invocation: {}\", processor);\n        try {\n            processor.process(exchange);\n        } catch (java.lang.Throwable e) {\n            exchange.setException(e);\n        }\n        callback.done(true);\n        return true;\n    }\n}",
            "src_parent": "{\n    java.lang.String explicitMethodName = exchange.getIn().getHeader(Exchange.BEAN_METHOD_NAME, method, java.lang.String.class);\n    java.lang.Object bean;\n    org.apache.camel.component.bean.BeanInfo beanInfo;\n    try {\n        bean = beanHolder.getBean();\n        beanInfo = beanHolder.getBeanInfo();\n    } catch (java.lang.Throwable e) {\n        exchange.setException(e);\n        callback.done(true);\n        return true;\n    }\n    if (allowProcessor(explicitMethodName, beanInfo)) {\n        org.apache.camel.Processor processor = getProcessor();\n        if (processor != null) {\n            org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Using a custom adapter as bean invocation: {}\", processor);\n            try {\n                processor.process(exchange);\n            } catch (java.lang.Throwable e) {\n                exchange.setException(e);\n            }\n            callback.done(true);\n            return true;\n        }\n    }\n    org.apache.camel.Message in = exchange.getIn();\n    org.apache.camel.component.bean.BeanInvocation beanInvoke = null;\n    if ((in.getBody() != null) && (in.getBody() instanceof org.apache.camel.component.bean.BeanInvocation)) {\n        beanInvoke = ((org.apache.camel.component.bean.BeanInvocation) (in.getBody()));\n    }\n    if (beanInvoke != null) {\n        org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Exchange IN body is a BeanInvocation instance: {}\", beanInvoke);\n        java.lang.Class<?> clazz = beanInvoke.getMethod().getDeclaringClass();\n        boolean sameBean = clazz.isInstance(bean);\n        if (org.apache.camel.component.bean.BeanProcessor.LOG.isDebugEnabled()) {\n            org.apache.camel.component.bean.BeanProcessor.LOG.debug(\"BeanHolder bean: {} and beanInvocation bean: {} is same instance: {}\", new java.lang.Object[]{ bean.getClass(), clazz, sameBean });\n        }\n        if (sameBean) {\n            beanInvoke.invoke(bean, exchange);\n            exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());\n            callback.done(true);\n            return true;\n        }\n    }\n    if (in.getHeader(Exchange.BEAN_MULTI_PARAMETER_ARRAY) == null) {\n        in.setHeader(Exchange.BEAN_MULTI_PARAMETER_ARRAY, isMultiParameterArray());\n    }\n    org.apache.camel.component.bean.MethodInvocation invocation;\n    if (explicitMethodName != null) {\n        in.setHeader(Exchange.BEAN_METHOD_NAME, explicitMethodName);\n    }\n    try {\n        invocation = beanInfo.createInvocation(bean, exchange);\n    } catch (java.lang.Throwable e) {\n        exchange.setException(e);\n        callback.done(true);\n        return true;\n    } finally {\n        in.removeHeader(Exchange.BEAN_MULTI_PARAMETER_ARRAY);\n        in.removeHeader(Exchange.BEAN_METHOD_NAME);\n    }\n    if (invocation == null) {\n        throw new java.lang.IllegalStateException(\"No method invocation could be created, no matching method could be found on: \" + bean);\n    }\n    java.lang.Object value;\n    try {\n        java.util.concurrent.atomic.AtomicBoolean sync = new java.util.concurrent.atomic.AtomicBoolean(true);\n        value = invocation.proceed(callback, sync);\n        if (!sync.get()) {\n            org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Processing exchangeId: {} is continued being processed asynchronously\", exchange.getExchangeId());\n            return false;\n        }\n        org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Processing exchangeId: {} is continued being processed synchronously\", exchange.getExchangeId());\n    } catch (java.lang.reflect.InvocationTargetException e) {\n        exchange.setException(e.getCause());\n        callback.done(true);\n        return true;\n    } catch (java.lang.Throwable e) {\n        exchange.setException(e);\n        callback.done(true);\n        return true;\n    }\n    if ((!invocation.getMethod().getReturnType().equals(java.lang.Void.TYPE)) && (value != java.lang.Void.TYPE)) {\n        if (exchange.getPattern().isOutCapable()) {\n            org.apache.camel.component.bean.BeanProcessor.LOG.debug(\"Setting bean invocation result on the OUT message: {}\", value);\n            exchange.getOut().setBody(value);\n            exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());\n        } else {\n            org.apache.camel.component.bean.BeanProcessor.LOG.debug(\"Setting bean invocation result on the IN message: {}\", value);\n            exchange.getIn().setBody(value);\n        }\n    }\n    callback.done(true);\n    return true;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.camel.Processor processor = getProcessor()",
            "dst_parent": "{\n    org.apache.camel.Processor processor = getProcessor();\n    if (processor != null) {\n        org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Using a custom adapter as bean invocation: {}\", processor);\n        try {\n            processor.process(exchange);\n        } catch (java.lang.Throwable e) {\n            exchange.setException(e);\n        }\n        callback.done(true);\n        return true;\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "org.apache.camel.Processor processor = getProcessor()",
            "src_parent": "{\n    java.lang.String explicitMethodName = exchange.getIn().getHeader(Exchange.BEAN_METHOD_NAME, method, java.lang.String.class);\n    java.lang.Object bean;\n    org.apache.camel.component.bean.BeanInfo beanInfo;\n    try {\n        bean = beanHolder.getBean();\n        beanInfo = beanHolder.getBeanInfo();\n    } catch (java.lang.Throwable e) {\n        exchange.setException(e);\n        callback.done(true);\n        return true;\n    }\n    org.apache.camel.Processor processor = getProcessor();\n    if ((explicitMethodName == null) && (processor != null)) {\n        org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Using a custom adapter as bean invocation: {}\", processor);\n        try {\n            processor.process(exchange);\n        } catch (java.lang.Throwable e) {\n            exchange.setException(e);\n        }\n        callback.done(true);\n        return true;\n    }\n    org.apache.camel.Message in = exchange.getIn();\n    org.apache.camel.component.bean.BeanInvocation beanInvoke = null;\n    if ((in.getBody() != null) && (in.getBody() instanceof org.apache.camel.component.bean.BeanInvocation)) {\n        beanInvoke = ((org.apache.camel.component.bean.BeanInvocation) (in.getBody()));\n    }\n    if (beanInvoke != null) {\n        org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Exchange IN body is a BeanInvocation instance: {}\", beanInvoke);\n        java.lang.Class<?> clazz = beanInvoke.getMethod().getDeclaringClass();\n        boolean sameBean = clazz.isInstance(bean);\n        if (org.apache.camel.component.bean.BeanProcessor.LOG.isDebugEnabled()) {\n            org.apache.camel.component.bean.BeanProcessor.LOG.debug(\"BeanHolder bean: {} and beanInvocation bean: {} is same instance: {}\", new java.lang.Object[]{ bean.getClass(), clazz, sameBean });\n        }\n        if (sameBean) {\n            beanInvoke.invoke(bean, exchange);\n            exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());\n            callback.done(true);\n            return true;\n        }\n    }\n    if (in.getHeader(Exchange.BEAN_MULTI_PARAMETER_ARRAY) == null) {\n        in.setHeader(Exchange.BEAN_MULTI_PARAMETER_ARRAY, isMultiParameterArray());\n    }\n    org.apache.camel.component.bean.MethodInvocation invocation;\n    if (explicitMethodName != null) {\n        in.setHeader(Exchange.BEAN_METHOD_NAME, explicitMethodName);\n    }\n    try {\n        invocation = beanInfo.createInvocation(bean, exchange);\n    } catch (java.lang.Throwable e) {\n        exchange.setException(e);\n        callback.done(true);\n        return true;\n    } finally {\n        in.removeHeader(Exchange.BEAN_MULTI_PARAMETER_ARRAY);\n        in.removeHeader(Exchange.BEAN_METHOD_NAME);\n    }\n    if (invocation == null) {\n        throw new java.lang.IllegalStateException(\"No method invocation could be created, no matching method could be found on: \" + bean);\n    }\n    java.lang.Object value;\n    try {\n        java.util.concurrent.atomic.AtomicBoolean sync = new java.util.concurrent.atomic.AtomicBoolean(true);\n        value = invocation.proceed(callback, sync);\n        if (!sync.get()) {\n            org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Processing exchangeId: {} is continued being processed asynchronously\", exchange.getExchangeId());\n            return false;\n        }\n        org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Processing exchangeId: {} is continued being processed synchronously\", exchange.getExchangeId());\n    } catch (java.lang.reflect.InvocationTargetException e) {\n        exchange.setException(e.getCause());\n        callback.done(true);\n        return true;\n    } catch (java.lang.Throwable e) {\n        exchange.setException(e);\n        callback.done(true);\n        return true;\n    }\n    if ((!invocation.getMethod().getReturnType().equals(java.lang.Void.TYPE)) && (value != java.lang.Void.TYPE)) {\n        if (exchange.getPattern().isOutCapable()) {\n            org.apache.camel.component.bean.BeanProcessor.LOG.debug(\"Setting bean invocation result on the OUT message: {}\", value);\n            exchange.getOut().setBody(value);\n            exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());\n        } else {\n            org.apache.camel.component.bean.BeanProcessor.LOG.debug(\"Setting bean invocation result on the IN message: {}\", value);\n            exchange.getIn().setBody(value);\n        }\n    }\n    callback.done(true);\n    return true;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (processor != null) {\n    org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Using a custom adapter as bean invocation: {}\", processor);\n    try {\n        processor.process(exchange);\n    } catch (java.lang.Throwable e) {\n        exchange.setException(e);\n    }\n    callback.done(true);\n    return true;\n}",
            "dst_parent": "{\n    org.apache.camel.Processor processor = getProcessor();\n    if (processor != null) {\n        org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Using a custom adapter as bean invocation: {}\", processor);\n        try {\n            processor.process(exchange);\n        } catch (java.lang.Throwable e) {\n            exchange.setException(e);\n        }\n        callback.done(true);\n        return true;\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if ((explicitMethodName == null) && (processor != null)) {\n    org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Using a custom adapter as bean invocation: {}\", processor);\n    try {\n        processor.process(exchange);\n    } catch (java.lang.Throwable e) {\n        exchange.setException(e);\n    }\n    callback.done(true);\n    return true;\n}",
            "src_parent": "{\n    java.lang.String explicitMethodName = exchange.getIn().getHeader(Exchange.BEAN_METHOD_NAME, method, java.lang.String.class);\n    java.lang.Object bean;\n    org.apache.camel.component.bean.BeanInfo beanInfo;\n    try {\n        bean = beanHolder.getBean();\n        beanInfo = beanHolder.getBeanInfo();\n    } catch (java.lang.Throwable e) {\n        exchange.setException(e);\n        callback.done(true);\n        return true;\n    }\n    org.apache.camel.Processor processor = getProcessor();\n    if ((explicitMethodName == null) && (processor != null)) {\n        org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Using a custom adapter as bean invocation: {}\", processor);\n        try {\n            processor.process(exchange);\n        } catch (java.lang.Throwable e) {\n            exchange.setException(e);\n        }\n        callback.done(true);\n        return true;\n    }\n    org.apache.camel.Message in = exchange.getIn();\n    org.apache.camel.component.bean.BeanInvocation beanInvoke = null;\n    if ((in.getBody() != null) && (in.getBody() instanceof org.apache.camel.component.bean.BeanInvocation)) {\n        beanInvoke = ((org.apache.camel.component.bean.BeanInvocation) (in.getBody()));\n    }\n    if (beanInvoke != null) {\n        org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Exchange IN body is a BeanInvocation instance: {}\", beanInvoke);\n        java.lang.Class<?> clazz = beanInvoke.getMethod().getDeclaringClass();\n        boolean sameBean = clazz.isInstance(bean);\n        if (org.apache.camel.component.bean.BeanProcessor.LOG.isDebugEnabled()) {\n            org.apache.camel.component.bean.BeanProcessor.LOG.debug(\"BeanHolder bean: {} and beanInvocation bean: {} is same instance: {}\", new java.lang.Object[]{ bean.getClass(), clazz, sameBean });\n        }\n        if (sameBean) {\n            beanInvoke.invoke(bean, exchange);\n            exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());\n            callback.done(true);\n            return true;\n        }\n    }\n    if (in.getHeader(Exchange.BEAN_MULTI_PARAMETER_ARRAY) == null) {\n        in.setHeader(Exchange.BEAN_MULTI_PARAMETER_ARRAY, isMultiParameterArray());\n    }\n    org.apache.camel.component.bean.MethodInvocation invocation;\n    if (explicitMethodName != null) {\n        in.setHeader(Exchange.BEAN_METHOD_NAME, explicitMethodName);\n    }\n    try {\n        invocation = beanInfo.createInvocation(bean, exchange);\n    } catch (java.lang.Throwable e) {\n        exchange.setException(e);\n        callback.done(true);\n        return true;\n    } finally {\n        in.removeHeader(Exchange.BEAN_MULTI_PARAMETER_ARRAY);\n        in.removeHeader(Exchange.BEAN_METHOD_NAME);\n    }\n    if (invocation == null) {\n        throw new java.lang.IllegalStateException(\"No method invocation could be created, no matching method could be found on: \" + bean);\n    }\n    java.lang.Object value;\n    try {\n        java.util.concurrent.atomic.AtomicBoolean sync = new java.util.concurrent.atomic.AtomicBoolean(true);\n        value = invocation.proceed(callback, sync);\n        if (!sync.get()) {\n            org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Processing exchangeId: {} is continued being processed asynchronously\", exchange.getExchangeId());\n            return false;\n        }\n        org.apache.camel.component.bean.BeanProcessor.LOG.trace(\"Processing exchangeId: {} is continued being processed synchronously\", exchange.getExchangeId());\n    } catch (java.lang.reflect.InvocationTargetException e) {\n        exchange.setException(e.getCause());\n        callback.done(true);\n        return true;\n    } catch (java.lang.Throwable e) {\n        exchange.setException(e);\n        callback.done(true);\n        return true;\n    }\n    if ((!invocation.getMethod().getReturnType().equals(java.lang.Void.TYPE)) && (value != java.lang.Void.TYPE)) {\n        if (exchange.getPattern().isOutCapable()) {\n            org.apache.camel.component.bean.BeanProcessor.LOG.debug(\"Setting bean invocation result on the OUT message: {}\", value);\n            exchange.getOut().setBody(value);\n            exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());\n        } else {\n            org.apache.camel.component.bean.BeanProcessor.LOG.debug(\"Setting bean invocation result on the IN message: {}\", value);\n            exchange.getIn().setBody(value);\n        }\n    }\n    callback.done(true);\n    return true;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "BeanProcessor"
    }
  ],
  "id": "camel_8898d491"
}