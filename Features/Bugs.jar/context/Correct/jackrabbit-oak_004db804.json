{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.query.xpath.Get the;",
            "dst_parent": "public class Statement {\n    private java.lang.String xpathQuery;\n\n    private boolean explain;\n\n    private boolean measure;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector columnSelector;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> columnList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors;\n\n    org.apache.jackrabbit.oak.query.xpath.Get the;\n\n    org.apache.jackrabbit.oak.query.xpath.optimized expression;\n\n    org.apache.jackrabbit.oak.query.xpath.the optimized;\n\n    java.lang.String getCommonLeftPart() {\n        return null;\n    }\n\n    org.apache.jackrabbit.oak.query.xpath.Expression getLeft() {\n        return null;\n    }\n\n    java.util.List<org.apache.jackrabbit.oak.query.xpath.Expression> getRight() {\n        return null;\n    }\n\n    {\n    }\n\n    public void setExplain(boolean explain) {\n        this.explain = explain;\n    }\n\n    public void setMeasure(boolean measure) {\n        this.measure = measure;\n    }\n\n    public void addSelectColumn(org.apache.jackrabbit.oak.query.xpath.Expression.Property p) {\n        columnList.add(p);\n    }\n\n    public void setSelectors(java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors) {\n        this.selectors = selectors;\n    }\n\n    public void setWhere(org.apache.jackrabbit.oak.query.xpath.Expression where) {\n        this.where = where;\n    }\n\n    public void addOrderBy(org.apache.jackrabbit.oak.query.xpath.Order order) {\n        this.orderList.add(order);\n    }\n\n    public void setColumnSelector(org.apache.jackrabbit.oak.query.xpath.Selector columnSelector) {\n        this.columnSelector = columnSelector;\n    }\n\n    public void setOriginalQuery(java.lang.String xpathQuery) {\n        this.xpathQuery = xpathQuery;\n    }\n\n    static class UnionStatement extends org.apache.jackrabbit.oak.query.xpath.Statement {\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s1;\n\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s2;\n\n        UnionStatement(org.apache.jackrabbit.oak.query.xpath.Statement s1, org.apache.jackrabbit.oak.query.xpath.Statement s2) {\n            this.s1 = s1;\n            this.s2 = s2;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (s1 + \" union \") + s2;\n        }\n    }\n\n    @java.lang.Override\n    org.apache.jackrabbit.oak.query.xpath.Expression optimize() {\n        org.apache.jackrabbit.oak.query.xpath.Expression l = left.optimize();\n        org.apache.jackrabbit.oak.query.xpath.Expression r = right.optimize();\n        if ((l != left) || (r != right)) {\n            return new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(l, r);\n        }\n        return this;\n    }\n\n    {\n    }\n\n    @java.lang.Override\n    @java.lang.Override\n    boolean containsFullTextCondition() {\n        return true;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Field",
            "operator": "UPD",
            "src": "private org.apache.jackrabbit.oak.query.xpath.Expression where;",
            "src_parent": "public class Statement {\n    private java.lang.String xpathQuery;\n\n    private boolean explain;\n\n    private boolean measure;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector columnSelector;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> columnList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors;\n\n    private org.apache.jackrabbit.oak.query.xpath.Expression where;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order> orderList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order>();\n\n    public org.apache.jackrabbit.oak.query.xpath.Statement optimize() {\n        if ((explain || measure) || (orderList.size() > 0)) {\n            return this;\n        }\n        if (where == null) {\n            return this;\n        }\n        java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> unionList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n        org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(where, unionList);\n        if (unionList.size() == 1) {\n            return this;\n        }\n        org.apache.jackrabbit.oak.query.xpath.Statement union = null;\n        for (int i = 0; i < unionList.size(); i++) {\n            org.apache.jackrabbit.oak.query.xpath.Expression e = unionList.get(i);\n            org.apache.jackrabbit.oak.query.xpath.Statement s = new org.apache.jackrabbit.oak.query.xpath.Statement();\n            s.columnSelector = columnSelector;\n            s.selectors = selectors;\n            s.columnList = columnList;\n            s.where = e;\n            if (i == (unionList.size() - 1)) {\n                s.xpathQuery = xpathQuery;\n            }\n            if (union == null) {\n                union = s;\n            } else {\n                union = new org.apache.jackrabbit.oak.query.xpath.Statement.UnionStatement(union.optimize(), s.optimize());\n            }\n        }\n        return union;\n    }\n\n    private static void addToUnionList(org.apache.jackrabbit.oak.query.xpath.Expression condition, java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> unionList) {\n        if (condition instanceof org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (condition));\n            if (or.getCommonLeftPart() != null) {\n            } else if ((or.left instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains) && (or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)) {\n            } else {\n                org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.left, unionList);\n                org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.right, unionList);\n                return;\n            }\n        } else if (condition instanceof org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition and = ((org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition) (condition));\n            and = and.pullOrRight();\n            if (and.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) {\n                org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (and.right));\n                if (or.getCommonLeftPart() != null) {\n                } else if ((or.left instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains) && (or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)) {\n                } else {\n                    org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(and.left, or.left), unionList);\n                    org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(and.left, or.right), unionList);\n                    return;\n                }\n            }\n        }\n        unionList.add(condition);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        java.lang.StringBuilder buff = new java.lang.StringBuilder();\n        if (explain) {\n            buff.append(\"explain \");\n        } else if (measure) {\n            buff.append(\"measure \");\n        }\n        buff.append(\"select \");\n        buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, org.apache.jackrabbit.oak.query.QueryImpl.JCR_PATH, false).toString());\n        if (selectors.size() > 1) {\n            buff.append(\" as \").append('[').append(QueryImpl.JCR_PATH).append(']');\n        }\n        buff.append(\", \");\n        buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, org.apache.jackrabbit.oak.query.QueryImpl.JCR_SCORE, false).toString());\n        if (selectors.size() > 1) {\n            buff.append(\" as \").append('[').append(QueryImpl.JCR_SCORE).append(']');\n        }\n        if (columnList.isEmpty()) {\n            buff.append(\", \");\n            buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, \"*\", false).toString());\n        } else {\n            for (int i = 0; i < columnList.size(); i++) {\n                buff.append(\", \");\n                org.apache.jackrabbit.oak.query.xpath.Expression e = columnList.get(i);\n                java.lang.String columnName = e.toString();\n                buff.append(columnName);\n                if (selectors.size() > 1) {\n                    buff.append(\" as [\").append(e.getColumnAliasName()).append(\"]\");\n                }\n            }\n        }\n        buff.append(\" from \");\n        for (int i = 0; i < selectors.size(); i++) {\n            org.apache.jackrabbit.oak.query.xpath.Selector s = selectors.get(i);\n            if (i > 0) {\n                buff.append(\" inner join \");\n            }\n            java.lang.String nodeType = s.nodeType;\n            if (nodeType == null) {\n                nodeType = \"nt:base\";\n            }\n            buff.append(('[' + nodeType) + ']').append(\" as \").append(s.name);\n            if (s.joinCondition != null) {\n                buff.append(\" on \").append(s.joinCondition);\n            }\n        }\n        if (where != null) {\n            buff.append(\" where \").append(where.toString());\n        }\n        if (!orderList.isEmpty()) {\n            buff.append(\" order by \");\n            for (int i = 0; i < orderList.size(); i++) {\n                if (i > 0) {\n                    buff.append(\", \");\n                }\n                buff.append(orderList.get(i));\n            }\n        }\n        if (xpathQuery != null) {\n            buff.append(\" /* xpath: \");\n            buff.append(xpathQuery);\n            buff.append(\" */\");\n        }\n        return buff.toString();\n    }\n\n    public void setExplain(boolean explain) {\n        this.explain = explain;\n    }\n\n    public void setMeasure(boolean measure) {\n        this.measure = measure;\n    }\n\n    public void addSelectColumn(org.apache.jackrabbit.oak.query.xpath.Expression.Property p) {\n        columnList.add(p);\n    }\n\n    public void setSelectors(java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors) {\n        this.selectors = selectors;\n    }\n\n    public void setWhere(org.apache.jackrabbit.oak.query.xpath.Expression where) {\n        this.where = where;\n    }\n\n    public void addOrderBy(org.apache.jackrabbit.oak.query.xpath.Order order) {\n        this.orderList.add(order);\n    }\n\n    public void setColumnSelector(org.apache.jackrabbit.oak.query.xpath.Selector columnSelector) {\n        this.columnSelector = columnSelector;\n    }\n\n    public void setOriginalQuery(java.lang.String xpathQuery) {\n        this.xpathQuery = xpathQuery;\n    }\n\n    static class UnionStatement extends org.apache.jackrabbit.oak.query.xpath.Statement {\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s1;\n\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s2;\n\n        UnionStatement(org.apache.jackrabbit.oak.query.xpath.Statement s1, org.apache.jackrabbit.oak.query.xpath.Statement s2) {\n            this.s1 = s1;\n            this.s2 = s2;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (s1 + \" union \") + s2;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.query.xpath.optimized expression;",
            "dst_parent": "public class Statement {\n    private java.lang.String xpathQuery;\n\n    private boolean explain;\n\n    private boolean measure;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector columnSelector;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> columnList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors;\n\n    org.apache.jackrabbit.oak.query.xpath.Get the;\n\n    org.apache.jackrabbit.oak.query.xpath.optimized expression;\n\n    org.apache.jackrabbit.oak.query.xpath.the optimized;\n\n    java.lang.String getCommonLeftPart() {\n        return null;\n    }\n\n    org.apache.jackrabbit.oak.query.xpath.Expression getLeft() {\n        return null;\n    }\n\n    java.util.List<org.apache.jackrabbit.oak.query.xpath.Expression> getRight() {\n        return null;\n    }\n\n    {\n    }\n\n    public void setExplain(boolean explain) {\n        this.explain = explain;\n    }\n\n    public void setMeasure(boolean measure) {\n        this.measure = measure;\n    }\n\n    public void addSelectColumn(org.apache.jackrabbit.oak.query.xpath.Expression.Property p) {\n        columnList.add(p);\n    }\n\n    public void setSelectors(java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors) {\n        this.selectors = selectors;\n    }\n\n    public void setWhere(org.apache.jackrabbit.oak.query.xpath.Expression where) {\n        this.where = where;\n    }\n\n    public void addOrderBy(org.apache.jackrabbit.oak.query.xpath.Order order) {\n        this.orderList.add(order);\n    }\n\n    public void setColumnSelector(org.apache.jackrabbit.oak.query.xpath.Selector columnSelector) {\n        this.columnSelector = columnSelector;\n    }\n\n    public void setOriginalQuery(java.lang.String xpathQuery) {\n        this.xpathQuery = xpathQuery;\n    }\n\n    static class UnionStatement extends org.apache.jackrabbit.oak.query.xpath.Statement {\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s1;\n\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s2;\n\n        UnionStatement(org.apache.jackrabbit.oak.query.xpath.Statement s1, org.apache.jackrabbit.oak.query.xpath.Statement s2) {\n            this.s1 = s1;\n            this.s2 = s2;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (s1 + \" union \") + s2;\n        }\n    }\n\n    @java.lang.Override\n    org.apache.jackrabbit.oak.query.xpath.Expression optimize() {\n        org.apache.jackrabbit.oak.query.xpath.Expression l = left.optimize();\n        org.apache.jackrabbit.oak.query.xpath.Expression r = right.optimize();\n        if ((l != left) || (r != right)) {\n            return new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(l, r);\n        }\n        return this;\n    }\n\n    {\n    }\n\n    @java.lang.Override\n    @java.lang.Override\n    boolean containsFullTextCondition() {\n        return true;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Field",
            "operator": "UPD",
            "src": "private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order> orderList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order>();",
            "src_parent": "public class Statement {\n    private java.lang.String xpathQuery;\n\n    private boolean explain;\n\n    private boolean measure;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector columnSelector;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> columnList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors;\n\n    private org.apache.jackrabbit.oak.query.xpath.Expression where;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order> orderList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order>();\n\n    public org.apache.jackrabbit.oak.query.xpath.Statement optimize() {\n        if ((explain || measure) || (orderList.size() > 0)) {\n            return this;\n        }\n        if (where == null) {\n            return this;\n        }\n        java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> unionList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n        org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(where, unionList);\n        if (unionList.size() == 1) {\n            return this;\n        }\n        org.apache.jackrabbit.oak.query.xpath.Statement union = null;\n        for (int i = 0; i < unionList.size(); i++) {\n            org.apache.jackrabbit.oak.query.xpath.Expression e = unionList.get(i);\n            org.apache.jackrabbit.oak.query.xpath.Statement s = new org.apache.jackrabbit.oak.query.xpath.Statement();\n            s.columnSelector = columnSelector;\n            s.selectors = selectors;\n            s.columnList = columnList;\n            s.where = e;\n            if (i == (unionList.size() - 1)) {\n                s.xpathQuery = xpathQuery;\n            }\n            if (union == null) {\n                union = s;\n            } else {\n                union = new org.apache.jackrabbit.oak.query.xpath.Statement.UnionStatement(union.optimize(), s.optimize());\n            }\n        }\n        return union;\n    }\n\n    private static void addToUnionList(org.apache.jackrabbit.oak.query.xpath.Expression condition, java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> unionList) {\n        if (condition instanceof org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (condition));\n            if (or.getCommonLeftPart() != null) {\n            } else if ((or.left instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains) && (or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)) {\n            } else {\n                org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.left, unionList);\n                org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.right, unionList);\n                return;\n            }\n        } else if (condition instanceof org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition and = ((org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition) (condition));\n            and = and.pullOrRight();\n            if (and.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) {\n                org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (and.right));\n                if (or.getCommonLeftPart() != null) {\n                } else if ((or.left instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains) && (or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)) {\n                } else {\n                    org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(and.left, or.left), unionList);\n                    org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(and.left, or.right), unionList);\n                    return;\n                }\n            }\n        }\n        unionList.add(condition);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        java.lang.StringBuilder buff = new java.lang.StringBuilder();\n        if (explain) {\n            buff.append(\"explain \");\n        } else if (measure) {\n            buff.append(\"measure \");\n        }\n        buff.append(\"select \");\n        buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, org.apache.jackrabbit.oak.query.QueryImpl.JCR_PATH, false).toString());\n        if (selectors.size() > 1) {\n            buff.append(\" as \").append('[').append(QueryImpl.JCR_PATH).append(']');\n        }\n        buff.append(\", \");\n        buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, org.apache.jackrabbit.oak.query.QueryImpl.JCR_SCORE, false).toString());\n        if (selectors.size() > 1) {\n            buff.append(\" as \").append('[').append(QueryImpl.JCR_SCORE).append(']');\n        }\n        if (columnList.isEmpty()) {\n            buff.append(\", \");\n            buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, \"*\", false).toString());\n        } else {\n            for (int i = 0; i < columnList.size(); i++) {\n                buff.append(\", \");\n                org.apache.jackrabbit.oak.query.xpath.Expression e = columnList.get(i);\n                java.lang.String columnName = e.toString();\n                buff.append(columnName);\n                if (selectors.size() > 1) {\n                    buff.append(\" as [\").append(e.getColumnAliasName()).append(\"]\");\n                }\n            }\n        }\n        buff.append(\" from \");\n        for (int i = 0; i < selectors.size(); i++) {\n            org.apache.jackrabbit.oak.query.xpath.Selector s = selectors.get(i);\n            if (i > 0) {\n                buff.append(\" inner join \");\n            }\n            java.lang.String nodeType = s.nodeType;\n            if (nodeType == null) {\n                nodeType = \"nt:base\";\n            }\n            buff.append(('[' + nodeType) + ']').append(\" as \").append(s.name);\n            if (s.joinCondition != null) {\n                buff.append(\" on \").append(s.joinCondition);\n            }\n        }\n        if (where != null) {\n            buff.append(\" where \").append(where.toString());\n        }\n        if (!orderList.isEmpty()) {\n            buff.append(\" order by \");\n            for (int i = 0; i < orderList.size(); i++) {\n                if (i > 0) {\n                    buff.append(\", \");\n                }\n                buff.append(orderList.get(i));\n            }\n        }\n        if (xpathQuery != null) {\n            buff.append(\" /* xpath: \");\n            buff.append(xpathQuery);\n            buff.append(\" */\");\n        }\n        return buff.toString();\n    }\n\n    public void setExplain(boolean explain) {\n        this.explain = explain;\n    }\n\n    public void setMeasure(boolean measure) {\n        this.measure = measure;\n    }\n\n    public void addSelectColumn(org.apache.jackrabbit.oak.query.xpath.Expression.Property p) {\n        columnList.add(p);\n    }\n\n    public void setSelectors(java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors) {\n        this.selectors = selectors;\n    }\n\n    public void setWhere(org.apache.jackrabbit.oak.query.xpath.Expression where) {\n        this.where = where;\n    }\n\n    public void addOrderBy(org.apache.jackrabbit.oak.query.xpath.Order order) {\n        this.orderList.add(order);\n    }\n\n    public void setColumnSelector(org.apache.jackrabbit.oak.query.xpath.Selector columnSelector) {\n        this.columnSelector = columnSelector;\n    }\n\n    public void setOriginalQuery(java.lang.String xpathQuery) {\n        this.xpathQuery = xpathQuery;\n    }\n\n    static class UnionStatement extends org.apache.jackrabbit.oak.query.xpath.Statement {\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s1;\n\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s2;\n\n        UnionStatement(org.apache.jackrabbit.oak.query.xpath.Statement s1, org.apache.jackrabbit.oak.query.xpath.Statement s2) {\n            this.s1 = s1;\n            this.s2 = s2;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (s1 + \" union \") + s2;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "@java.lang.Override\norg.apache.jackrabbit.oak.query.xpath.Expression optimize() {\n    org.apache.jackrabbit.oak.query.xpath.Expression l = left.optimize();\n    org.apache.jackrabbit.oak.query.xpath.Expression r = right.optimize();\n    if ((l != left) || (r != right)) {\n        return new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(l, r);\n    }\n    return this;\n}",
            "dst_parent": "public class Statement {\n    private java.lang.String xpathQuery;\n\n    private boolean explain;\n\n    private boolean measure;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector columnSelector;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> columnList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors;\n\n    org.apache.jackrabbit.oak.query.xpath.Get the;\n\n    org.apache.jackrabbit.oak.query.xpath.optimized expression;\n\n    org.apache.jackrabbit.oak.query.xpath.the optimized;\n\n    java.lang.String getCommonLeftPart() {\n        return null;\n    }\n\n    org.apache.jackrabbit.oak.query.xpath.Expression getLeft() {\n        return null;\n    }\n\n    java.util.List<org.apache.jackrabbit.oak.query.xpath.Expression> getRight() {\n        return null;\n    }\n\n    {\n    }\n\n    public void setExplain(boolean explain) {\n        this.explain = explain;\n    }\n\n    public void setMeasure(boolean measure) {\n        this.measure = measure;\n    }\n\n    public void addSelectColumn(org.apache.jackrabbit.oak.query.xpath.Expression.Property p) {\n        columnList.add(p);\n    }\n\n    public void setSelectors(java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors) {\n        this.selectors = selectors;\n    }\n\n    public void setWhere(org.apache.jackrabbit.oak.query.xpath.Expression where) {\n        this.where = where;\n    }\n\n    public void addOrderBy(org.apache.jackrabbit.oak.query.xpath.Order order) {\n        this.orderList.add(order);\n    }\n\n    public void setColumnSelector(org.apache.jackrabbit.oak.query.xpath.Selector columnSelector) {\n        this.columnSelector = columnSelector;\n    }\n\n    public void setOriginalQuery(java.lang.String xpathQuery) {\n        this.xpathQuery = xpathQuery;\n    }\n\n    static class UnionStatement extends org.apache.jackrabbit.oak.query.xpath.Statement {\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s1;\n\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s2;\n\n        UnionStatement(org.apache.jackrabbit.oak.query.xpath.Statement s1, org.apache.jackrabbit.oak.query.xpath.Statement s2) {\n            this.s1 = s1;\n            this.s2 = s2;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (s1 + \" union \") + s2;\n        }\n    }\n\n    @java.lang.Override\n    org.apache.jackrabbit.oak.query.xpath.Expression optimize() {\n        org.apache.jackrabbit.oak.query.xpath.Expression l = left.optimize();\n        org.apache.jackrabbit.oak.query.xpath.Expression r = right.optimize();\n        if ((l != left) || (r != right)) {\n            return new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(l, r);\n        }\n        return this;\n    }\n\n    {\n    }\n\n    @java.lang.Override\n    @java.lang.Override\n    boolean containsFullTextCondition() {\n        return true;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "private static void addToUnionList(org.apache.jackrabbit.oak.query.xpath.Expression condition, java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> unionList) {\n    if (condition instanceof org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) {\n        org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (condition));\n        if (or.getCommonLeftPart() != null) {\n        } else if ((or.left instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains) && (or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)) {\n        } else {\n            org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.left, unionList);\n            org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.right, unionList);\n            return;\n        }\n    } else if (condition instanceof org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition) {\n        org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition and = ((org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition) (condition));\n        and = and.pullOrRight();\n        if (and.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (and.right));\n            if (or.getCommonLeftPart() != null) {\n            } else if ((or.left instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains) && (or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)) {\n            } else {\n                org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(and.left, or.left), unionList);\n                org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(and.left, or.right), unionList);\n                return;\n            }\n        }\n    }\n    unionList.add(condition);\n}",
            "src_parent": "public class Statement {\n    private java.lang.String xpathQuery;\n\n    private boolean explain;\n\n    private boolean measure;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector columnSelector;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> columnList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors;\n\n    private org.apache.jackrabbit.oak.query.xpath.Expression where;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order> orderList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order>();\n\n    public org.apache.jackrabbit.oak.query.xpath.Statement optimize() {\n        if ((explain || measure) || (orderList.size() > 0)) {\n            return this;\n        }\n        if (where == null) {\n            return this;\n        }\n        java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> unionList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n        org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(where, unionList);\n        if (unionList.size() == 1) {\n            return this;\n        }\n        org.apache.jackrabbit.oak.query.xpath.Statement union = null;\n        for (int i = 0; i < unionList.size(); i++) {\n            org.apache.jackrabbit.oak.query.xpath.Expression e = unionList.get(i);\n            org.apache.jackrabbit.oak.query.xpath.Statement s = new org.apache.jackrabbit.oak.query.xpath.Statement();\n            s.columnSelector = columnSelector;\n            s.selectors = selectors;\n            s.columnList = columnList;\n            s.where = e;\n            if (i == (unionList.size() - 1)) {\n                s.xpathQuery = xpathQuery;\n            }\n            if (union == null) {\n                union = s;\n            } else {\n                union = new org.apache.jackrabbit.oak.query.xpath.Statement.UnionStatement(union.optimize(), s.optimize());\n            }\n        }\n        return union;\n    }\n\n    private static void addToUnionList(org.apache.jackrabbit.oak.query.xpath.Expression condition, java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> unionList) {\n        if (condition instanceof org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (condition));\n            if (or.getCommonLeftPart() != null) {\n            } else if ((or.left instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains) && (or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)) {\n            } else {\n                org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.left, unionList);\n                org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.right, unionList);\n                return;\n            }\n        } else if (condition instanceof org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition and = ((org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition) (condition));\n            and = and.pullOrRight();\n            if (and.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) {\n                org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (and.right));\n                if (or.getCommonLeftPart() != null) {\n                } else if ((or.left instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains) && (or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)) {\n                } else {\n                    org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(and.left, or.left), unionList);\n                    org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(and.left, or.right), unionList);\n                    return;\n                }\n            }\n        }\n        unionList.add(condition);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        java.lang.StringBuilder buff = new java.lang.StringBuilder();\n        if (explain) {\n            buff.append(\"explain \");\n        } else if (measure) {\n            buff.append(\"measure \");\n        }\n        buff.append(\"select \");\n        buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, org.apache.jackrabbit.oak.query.QueryImpl.JCR_PATH, false).toString());\n        if (selectors.size() > 1) {\n            buff.append(\" as \").append('[').append(QueryImpl.JCR_PATH).append(']');\n        }\n        buff.append(\", \");\n        buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, org.apache.jackrabbit.oak.query.QueryImpl.JCR_SCORE, false).toString());\n        if (selectors.size() > 1) {\n            buff.append(\" as \").append('[').append(QueryImpl.JCR_SCORE).append(']');\n        }\n        if (columnList.isEmpty()) {\n            buff.append(\", \");\n            buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, \"*\", false).toString());\n        } else {\n            for (int i = 0; i < columnList.size(); i++) {\n                buff.append(\", \");\n                org.apache.jackrabbit.oak.query.xpath.Expression e = columnList.get(i);\n                java.lang.String columnName = e.toString();\n                buff.append(columnName);\n                if (selectors.size() > 1) {\n                    buff.append(\" as [\").append(e.getColumnAliasName()).append(\"]\");\n                }\n            }\n        }\n        buff.append(\" from \");\n        for (int i = 0; i < selectors.size(); i++) {\n            org.apache.jackrabbit.oak.query.xpath.Selector s = selectors.get(i);\n            if (i > 0) {\n                buff.append(\" inner join \");\n            }\n            java.lang.String nodeType = s.nodeType;\n            if (nodeType == null) {\n                nodeType = \"nt:base\";\n            }\n            buff.append(('[' + nodeType) + ']').append(\" as \").append(s.name);\n            if (s.joinCondition != null) {\n                buff.append(\" on \").append(s.joinCondition);\n            }\n        }\n        if (where != null) {\n            buff.append(\" where \").append(where.toString());\n        }\n        if (!orderList.isEmpty()) {\n            buff.append(\" order by \");\n            for (int i = 0; i < orderList.size(); i++) {\n                if (i > 0) {\n                    buff.append(\", \");\n                }\n                buff.append(orderList.get(i));\n            }\n        }\n        if (xpathQuery != null) {\n            buff.append(\" /* xpath: \");\n            buff.append(xpathQuery);\n            buff.append(\" */\");\n        }\n        return buff.toString();\n    }\n\n    public void setExplain(boolean explain) {\n        this.explain = explain;\n    }\n\n    public void setMeasure(boolean measure) {\n        this.measure = measure;\n    }\n\n    public void addSelectColumn(org.apache.jackrabbit.oak.query.xpath.Expression.Property p) {\n        columnList.add(p);\n    }\n\n    public void setSelectors(java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors) {\n        this.selectors = selectors;\n    }\n\n    public void setWhere(org.apache.jackrabbit.oak.query.xpath.Expression where) {\n        this.where = where;\n    }\n\n    public void addOrderBy(org.apache.jackrabbit.oak.query.xpath.Order order) {\n        this.orderList.add(order);\n    }\n\n    public void setColumnSelector(org.apache.jackrabbit.oak.query.xpath.Selector columnSelector) {\n        this.columnSelector = columnSelector;\n    }\n\n    public void setOriginalQuery(java.lang.String xpathQuery) {\n        this.xpathQuery = xpathQuery;\n    }\n\n    static class UnionStatement extends org.apache.jackrabbit.oak.query.xpath.Statement {\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s1;\n\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s2;\n\n        UnionStatement(org.apache.jackrabbit.oak.query.xpath.Statement s1, org.apache.jackrabbit.oak.query.xpath.Statement s2) {\n            this.s1 = s1;\n            this.s2 = s2;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (s1 + \" union \") + s2;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "@java.lang.Override\n@java.lang.Override\nboolean containsFullTextCondition() {\n    return true;\n}",
            "dst_parent": "public class Statement {\n    private java.lang.String xpathQuery;\n\n    private boolean explain;\n\n    private boolean measure;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector columnSelector;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> columnList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors;\n\n    org.apache.jackrabbit.oak.query.xpath.Get the;\n\n    org.apache.jackrabbit.oak.query.xpath.optimized expression;\n\n    org.apache.jackrabbit.oak.query.xpath.the optimized;\n\n    java.lang.String getCommonLeftPart() {\n        return null;\n    }\n\n    org.apache.jackrabbit.oak.query.xpath.Expression getLeft() {\n        return null;\n    }\n\n    java.util.List<org.apache.jackrabbit.oak.query.xpath.Expression> getRight() {\n        return null;\n    }\n\n    {\n    }\n\n    public void setExplain(boolean explain) {\n        this.explain = explain;\n    }\n\n    public void setMeasure(boolean measure) {\n        this.measure = measure;\n    }\n\n    public void addSelectColumn(org.apache.jackrabbit.oak.query.xpath.Expression.Property p) {\n        columnList.add(p);\n    }\n\n    public void setSelectors(java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors) {\n        this.selectors = selectors;\n    }\n\n    public void setWhere(org.apache.jackrabbit.oak.query.xpath.Expression where) {\n        this.where = where;\n    }\n\n    public void addOrderBy(org.apache.jackrabbit.oak.query.xpath.Order order) {\n        this.orderList.add(order);\n    }\n\n    public void setColumnSelector(org.apache.jackrabbit.oak.query.xpath.Selector columnSelector) {\n        this.columnSelector = columnSelector;\n    }\n\n    public void setOriginalQuery(java.lang.String xpathQuery) {\n        this.xpathQuery = xpathQuery;\n    }\n\n    static class UnionStatement extends org.apache.jackrabbit.oak.query.xpath.Statement {\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s1;\n\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s2;\n\n        UnionStatement(org.apache.jackrabbit.oak.query.xpath.Statement s1, org.apache.jackrabbit.oak.query.xpath.Statement s2) {\n            this.s1 = s1;\n            this.s2 = s2;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (s1 + \" union \") + s2;\n        }\n    }\n\n    @java.lang.Override\n    org.apache.jackrabbit.oak.query.xpath.Expression optimize() {\n        org.apache.jackrabbit.oak.query.xpath.Expression l = left.optimize();\n        org.apache.jackrabbit.oak.query.xpath.Expression r = right.optimize();\n        if ((l != left) || (r != right)) {\n            return new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(l, r);\n        }\n        return this;\n    }\n\n    {\n    }\n\n    @java.lang.Override\n    @java.lang.Override\n    boolean containsFullTextCondition() {\n        return true;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "@java.lang.Override\npublic java.lang.String toString() {\n    java.lang.StringBuilder buff = new java.lang.StringBuilder();\n    if (explain) {\n        buff.append(\"explain \");\n    } else if (measure) {\n        buff.append(\"measure \");\n    }\n    buff.append(\"select \");\n    buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, org.apache.jackrabbit.oak.query.QueryImpl.JCR_PATH, false).toString());\n    if (selectors.size() > 1) {\n        buff.append(\" as \").append('[').append(QueryImpl.JCR_PATH).append(']');\n    }\n    buff.append(\", \");\n    buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, org.apache.jackrabbit.oak.query.QueryImpl.JCR_SCORE, false).toString());\n    if (selectors.size() > 1) {\n        buff.append(\" as \").append('[').append(QueryImpl.JCR_SCORE).append(']');\n    }\n    if (columnList.isEmpty()) {\n        buff.append(\", \");\n        buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, \"*\", false).toString());\n    } else {\n        for (int i = 0; i < columnList.size(); i++) {\n            buff.append(\", \");\n            org.apache.jackrabbit.oak.query.xpath.Expression e = columnList.get(i);\n            java.lang.String columnName = e.toString();\n            buff.append(columnName);\n            if (selectors.size() > 1) {\n                buff.append(\" as [\").append(e.getColumnAliasName()).append(\"]\");\n            }\n        }\n    }\n    buff.append(\" from \");\n    for (int i = 0; i < selectors.size(); i++) {\n        org.apache.jackrabbit.oak.query.xpath.Selector s = selectors.get(i);\n        if (i > 0) {\n            buff.append(\" inner join \");\n        }\n        java.lang.String nodeType = s.nodeType;\n        if (nodeType == null) {\n            nodeType = \"nt:base\";\n        }\n        buff.append(('[' + nodeType) + ']').append(\" as \").append(s.name);\n        if (s.joinCondition != null) {\n            buff.append(\" on \").append(s.joinCondition);\n        }\n    }\n    if (where != null) {\n        buff.append(\" where \").append(where.toString());\n    }\n    if (!orderList.isEmpty()) {\n        buff.append(\" order by \");\n        for (int i = 0; i < orderList.size(); i++) {\n            if (i > 0) {\n                buff.append(\", \");\n            }\n            buff.append(orderList.get(i));\n        }\n    }\n    if (xpathQuery != null) {\n        buff.append(\" /* xpath: \");\n        buff.append(xpathQuery);\n        buff.append(\" */\");\n    }\n    return buff.toString();\n}",
            "src_parent": "public class Statement {\n    private java.lang.String xpathQuery;\n\n    private boolean explain;\n\n    private boolean measure;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector columnSelector;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> columnList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors;\n\n    private org.apache.jackrabbit.oak.query.xpath.Expression where;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order> orderList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order>();\n\n    public org.apache.jackrabbit.oak.query.xpath.Statement optimize() {\n        if ((explain || measure) || (orderList.size() > 0)) {\n            return this;\n        }\n        if (where == null) {\n            return this;\n        }\n        java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> unionList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n        org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(where, unionList);\n        if (unionList.size() == 1) {\n            return this;\n        }\n        org.apache.jackrabbit.oak.query.xpath.Statement union = null;\n        for (int i = 0; i < unionList.size(); i++) {\n            org.apache.jackrabbit.oak.query.xpath.Expression e = unionList.get(i);\n            org.apache.jackrabbit.oak.query.xpath.Statement s = new org.apache.jackrabbit.oak.query.xpath.Statement();\n            s.columnSelector = columnSelector;\n            s.selectors = selectors;\n            s.columnList = columnList;\n            s.where = e;\n            if (i == (unionList.size() - 1)) {\n                s.xpathQuery = xpathQuery;\n            }\n            if (union == null) {\n                union = s;\n            } else {\n                union = new org.apache.jackrabbit.oak.query.xpath.Statement.UnionStatement(union.optimize(), s.optimize());\n            }\n        }\n        return union;\n    }\n\n    private static void addToUnionList(org.apache.jackrabbit.oak.query.xpath.Expression condition, java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> unionList) {\n        if (condition instanceof org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (condition));\n            if (or.getCommonLeftPart() != null) {\n            } else if ((or.left instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains) && (or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)) {\n            } else {\n                org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.left, unionList);\n                org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.right, unionList);\n                return;\n            }\n        } else if (condition instanceof org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition and = ((org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition) (condition));\n            and = and.pullOrRight();\n            if (and.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) {\n                org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (and.right));\n                if (or.getCommonLeftPart() != null) {\n                } else if ((or.left instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains) && (or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)) {\n                } else {\n                    org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(and.left, or.left), unionList);\n                    org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(and.left, or.right), unionList);\n                    return;\n                }\n            }\n        }\n        unionList.add(condition);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        java.lang.StringBuilder buff = new java.lang.StringBuilder();\n        if (explain) {\n            buff.append(\"explain \");\n        } else if (measure) {\n            buff.append(\"measure \");\n        }\n        buff.append(\"select \");\n        buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, org.apache.jackrabbit.oak.query.QueryImpl.JCR_PATH, false).toString());\n        if (selectors.size() > 1) {\n            buff.append(\" as \").append('[').append(QueryImpl.JCR_PATH).append(']');\n        }\n        buff.append(\", \");\n        buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, org.apache.jackrabbit.oak.query.QueryImpl.JCR_SCORE, false).toString());\n        if (selectors.size() > 1) {\n            buff.append(\" as \").append('[').append(QueryImpl.JCR_SCORE).append(']');\n        }\n        if (columnList.isEmpty()) {\n            buff.append(\", \");\n            buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, \"*\", false).toString());\n        } else {\n            for (int i = 0; i < columnList.size(); i++) {\n                buff.append(\", \");\n                org.apache.jackrabbit.oak.query.xpath.Expression e = columnList.get(i);\n                java.lang.String columnName = e.toString();\n                buff.append(columnName);\n                if (selectors.size() > 1) {\n                    buff.append(\" as [\").append(e.getColumnAliasName()).append(\"]\");\n                }\n            }\n        }\n        buff.append(\" from \");\n        for (int i = 0; i < selectors.size(); i++) {\n            org.apache.jackrabbit.oak.query.xpath.Selector s = selectors.get(i);\n            if (i > 0) {\n                buff.append(\" inner join \");\n            }\n            java.lang.String nodeType = s.nodeType;\n            if (nodeType == null) {\n                nodeType = \"nt:base\";\n            }\n            buff.append(('[' + nodeType) + ']').append(\" as \").append(s.name);\n            if (s.joinCondition != null) {\n                buff.append(\" on \").append(s.joinCondition);\n            }\n        }\n        if (where != null) {\n            buff.append(\" where \").append(where.toString());\n        }\n        if (!orderList.isEmpty()) {\n            buff.append(\" order by \");\n            for (int i = 0; i < orderList.size(); i++) {\n                if (i > 0) {\n                    buff.append(\", \");\n                }\n                buff.append(orderList.get(i));\n            }\n        }\n        if (xpathQuery != null) {\n            buff.append(\" /* xpath: \");\n            buff.append(xpathQuery);\n            buff.append(\" */\");\n        }\n        return buff.toString();\n    }\n\n    public void setExplain(boolean explain) {\n        this.explain = explain;\n    }\n\n    public void setMeasure(boolean measure) {\n        this.measure = measure;\n    }\n\n    public void addSelectColumn(org.apache.jackrabbit.oak.query.xpath.Expression.Property p) {\n        columnList.add(p);\n    }\n\n    public void setSelectors(java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors) {\n        this.selectors = selectors;\n    }\n\n    public void setWhere(org.apache.jackrabbit.oak.query.xpath.Expression where) {\n        this.where = where;\n    }\n\n    public void addOrderBy(org.apache.jackrabbit.oak.query.xpath.Order order) {\n        this.orderList.add(order);\n    }\n\n    public void setColumnSelector(org.apache.jackrabbit.oak.query.xpath.Selector columnSelector) {\n        this.columnSelector = columnSelector;\n    }\n\n    public void setOriginalQuery(java.lang.String xpathQuery) {\n        this.xpathQuery = xpathQuery;\n    }\n\n    static class UnionStatement extends org.apache.jackrabbit.oak.query.xpath.Statement {\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s1;\n\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s2;\n\n        UnionStatement(org.apache.jackrabbit.oak.query.xpath.Statement s1, org.apache.jackrabbit.oak.query.xpath.Statement s2) {\n            this.s1 = s1;\n            this.s2 = s2;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (s1 + \" union \") + s2;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Field",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.query.xpath.Get",
            "dst_parent": "org.apache.jackrabbit.oak.query.xpath.Get the;",
            "dst_parent_type": "Field",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "org.apache.jackrabbit.oak.query.xpath.Expression",
            "src_parent": "private org.apache.jackrabbit.oak.query.xpath.Expression where;",
            "src_parent_type": "Field",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Field",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.query.xpath.optimized",
            "dst_parent": "org.apache.jackrabbit.oak.query.xpath.optimized expression;",
            "dst_parent_type": "Field",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order>",
            "src_parent": "private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order> orderList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order>();",
            "src_parent_type": "Field",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.query.xpath.Expression",
            "dst_parent": "@java.lang.Override\norg.apache.jackrabbit.oak.query.xpath.Expression optimize() {\n    org.apache.jackrabbit.oak.query.xpath.Expression l = left.optimize();\n    org.apache.jackrabbit.oak.query.xpath.Expression r = right.optimize();\n    if ((l != left) || (r != right)) {\n        return new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(l, r);\n    }\n    return this;\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "void",
            "src_parent": "private static void addToUnionList(org.apache.jackrabbit.oak.query.xpath.Expression condition, java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> unionList) {\n    if (condition instanceof org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) {\n        org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (condition));\n        if (or.getCommonLeftPart() != null) {\n        } else if ((or.left instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains) && (or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)) {\n        } else {\n            org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.left, unionList);\n            org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.right, unionList);\n            return;\n        }\n    } else if (condition instanceof org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition) {\n        org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition and = ((org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition) (condition));\n        and = and.pullOrRight();\n        if (and.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (and.right));\n            if (or.getCommonLeftPart() != null) {\n            } else if ((or.left instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains) && (or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)) {\n            } else {\n                org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(and.left, or.left), unionList);\n                org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(and.left, or.right), unionList);\n                return;\n            }\n        }\n    }\n    unionList.add(condition);\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "boolean",
            "dst_parent": "@java.lang.Override\n@java.lang.Override\nboolean containsFullTextCondition() {\n    return true;\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.lang.String",
            "src_parent": "@java.lang.Override\npublic java.lang.String toString() {\n    java.lang.StringBuilder buff = new java.lang.StringBuilder();\n    if (explain) {\n        buff.append(\"explain \");\n    } else if (measure) {\n        buff.append(\"measure \");\n    }\n    buff.append(\"select \");\n    buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, org.apache.jackrabbit.oak.query.QueryImpl.JCR_PATH, false).toString());\n    if (selectors.size() > 1) {\n        buff.append(\" as \").append('[').append(QueryImpl.JCR_PATH).append(']');\n    }\n    buff.append(\", \");\n    buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, org.apache.jackrabbit.oak.query.QueryImpl.JCR_SCORE, false).toString());\n    if (selectors.size() > 1) {\n        buff.append(\" as \").append('[').append(QueryImpl.JCR_SCORE).append(']');\n    }\n    if (columnList.isEmpty()) {\n        buff.append(\", \");\n        buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, \"*\", false).toString());\n    } else {\n        for (int i = 0; i < columnList.size(); i++) {\n            buff.append(\", \");\n            org.apache.jackrabbit.oak.query.xpath.Expression e = columnList.get(i);\n            java.lang.String columnName = e.toString();\n            buff.append(columnName);\n            if (selectors.size() > 1) {\n                buff.append(\" as [\").append(e.getColumnAliasName()).append(\"]\");\n            }\n        }\n    }\n    buff.append(\" from \");\n    for (int i = 0; i < selectors.size(); i++) {\n        org.apache.jackrabbit.oak.query.xpath.Selector s = selectors.get(i);\n        if (i > 0) {\n            buff.append(\" inner join \");\n        }\n        java.lang.String nodeType = s.nodeType;\n        if (nodeType == null) {\n            nodeType = \"nt:base\";\n        }\n        buff.append(('[' + nodeType) + ']').append(\" as \").append(s.name);\n        if (s.joinCondition != null) {\n            buff.append(\" on \").append(s.joinCondition);\n        }\n    }\n    if (where != null) {\n        buff.append(\" where \").append(where.toString());\n    }\n    if (!orderList.isEmpty()) {\n        buff.append(\" order by \");\n        for (int i = 0; i < orderList.size(); i++) {\n            if (i > 0) {\n                buff.append(\", \");\n            }\n            buff.append(orderList.get(i));\n        }\n    }\n    if (xpathQuery != null) {\n        buff.append(\" /* xpath: \");\n        buff.append(xpathQuery);\n        buff.append(\" */\");\n    }\n    return buff.toString();\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.query.xpath.Expression",
            "dst_parent": "org.apache.jackrabbit.oak.query.xpath.Expression r = right.optimize()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition",
            "src_parent": "org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (and.right))",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "union",
            "src_parent": "return union",
            "src_parent_type": "Return",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public org.apache.jackrabbit.oak.query.xpath.Statement optimize() {\n    if ((explain || measure) || (orderList.size() > 0)) {\n        return this;\n    }\n    if (where == null) {\n        return this;\n    }\n    java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> unionList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n    org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(where, unionList);\n    if (unionList.size() == 1) {\n        return this;\n    }\n    org.apache.jackrabbit.oak.query.xpath.Statement union = null;\n    for (int i = 0; i < unionList.size(); i++) {\n        org.apache.jackrabbit.oak.query.xpath.Expression e = unionList.get(i);\n        org.apache.jackrabbit.oak.query.xpath.Statement s = new org.apache.jackrabbit.oak.query.xpath.Statement();\n        s.columnSelector = columnSelector;\n        s.selectors = selectors;\n        s.columnList = columnList;\n        s.where = e;\n        if (i == (unionList.size() - 1)) {\n            s.xpathQuery = xpathQuery;\n        }\n        if (union == null) {\n            union = s;\n        } else {\n            union = new org.apache.jackrabbit.oak.query.xpath.Statement.UnionStatement(union.optimize(), s.optimize());\n        }\n    }\n    return union;\n}",
            "src_parent": "public class Statement {\n    private java.lang.String xpathQuery;\n\n    private boolean explain;\n\n    private boolean measure;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector columnSelector;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> columnList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors;\n\n    private org.apache.jackrabbit.oak.query.xpath.Expression where;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order> orderList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order>();\n\n    public org.apache.jackrabbit.oak.query.xpath.Statement optimize() {\n        if ((explain || measure) || (orderList.size() > 0)) {\n            return this;\n        }\n        if (where == null) {\n            return this;\n        }\n        java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> unionList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n        org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(where, unionList);\n        if (unionList.size() == 1) {\n            return this;\n        }\n        org.apache.jackrabbit.oak.query.xpath.Statement union = null;\n        for (int i = 0; i < unionList.size(); i++) {\n            org.apache.jackrabbit.oak.query.xpath.Expression e = unionList.get(i);\n            org.apache.jackrabbit.oak.query.xpath.Statement s = new org.apache.jackrabbit.oak.query.xpath.Statement();\n            s.columnSelector = columnSelector;\n            s.selectors = selectors;\n            s.columnList = columnList;\n            s.where = e;\n            if (i == (unionList.size() - 1)) {\n                s.xpathQuery = xpathQuery;\n            }\n            if (union == null) {\n                union = s;\n            } else {\n                union = new org.apache.jackrabbit.oak.query.xpath.Statement.UnionStatement(union.optimize(), s.optimize());\n            }\n        }\n        return union;\n    }\n\n    private static void addToUnionList(org.apache.jackrabbit.oak.query.xpath.Expression condition, java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> unionList) {\n        if (condition instanceof org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (condition));\n            if (or.getCommonLeftPart() != null) {\n            } else if ((or.left instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains) && (or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)) {\n            } else {\n                org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.left, unionList);\n                org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.right, unionList);\n                return;\n            }\n        } else if (condition instanceof org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition and = ((org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition) (condition));\n            and = and.pullOrRight();\n            if (and.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) {\n                org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (and.right));\n                if (or.getCommonLeftPart() != null) {\n                } else if ((or.left instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains) && (or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)) {\n                } else {\n                    org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(and.left, or.left), unionList);\n                    org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(and.left, or.right), unionList);\n                    return;\n                }\n            }\n        }\n        unionList.add(condition);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        java.lang.StringBuilder buff = new java.lang.StringBuilder();\n        if (explain) {\n            buff.append(\"explain \");\n        } else if (measure) {\n            buff.append(\"measure \");\n        }\n        buff.append(\"select \");\n        buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, org.apache.jackrabbit.oak.query.QueryImpl.JCR_PATH, false).toString());\n        if (selectors.size() > 1) {\n            buff.append(\" as \").append('[').append(QueryImpl.JCR_PATH).append(']');\n        }\n        buff.append(\", \");\n        buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, org.apache.jackrabbit.oak.query.QueryImpl.JCR_SCORE, false).toString());\n        if (selectors.size() > 1) {\n            buff.append(\" as \").append('[').append(QueryImpl.JCR_SCORE).append(']');\n        }\n        if (columnList.isEmpty()) {\n            buff.append(\", \");\n            buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, \"*\", false).toString());\n        } else {\n            for (int i = 0; i < columnList.size(); i++) {\n                buff.append(\", \");\n                org.apache.jackrabbit.oak.query.xpath.Expression e = columnList.get(i);\n                java.lang.String columnName = e.toString();\n                buff.append(columnName);\n                if (selectors.size() > 1) {\n                    buff.append(\" as [\").append(e.getColumnAliasName()).append(\"]\");\n                }\n            }\n        }\n        buff.append(\" from \");\n        for (int i = 0; i < selectors.size(); i++) {\n            org.apache.jackrabbit.oak.query.xpath.Selector s = selectors.get(i);\n            if (i > 0) {\n                buff.append(\" inner join \");\n            }\n            java.lang.String nodeType = s.nodeType;\n            if (nodeType == null) {\n                nodeType = \"nt:base\";\n            }\n            buff.append(('[' + nodeType) + ']').append(\" as \").append(s.name);\n            if (s.joinCondition != null) {\n                buff.append(\" on \").append(s.joinCondition);\n            }\n        }\n        if (where != null) {\n            buff.append(\" where \").append(where.toString());\n        }\n        if (!orderList.isEmpty()) {\n            buff.append(\" order by \");\n            for (int i = 0; i < orderList.size(); i++) {\n                if (i > 0) {\n                    buff.append(\", \");\n                }\n                buff.append(orderList.get(i));\n            }\n        }\n        if (xpathQuery != null) {\n            buff.append(\" /* xpath: \");\n            buff.append(xpathQuery);\n            buff.append(\" */\");\n        }\n        return buff.toString();\n    }\n\n    public void setExplain(boolean explain) {\n        this.explain = explain;\n    }\n\n    public void setMeasure(boolean measure) {\n        this.measure = measure;\n    }\n\n    public void addSelectColumn(org.apache.jackrabbit.oak.query.xpath.Expression.Property p) {\n        columnList.add(p);\n    }\n\n    public void setSelectors(java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors) {\n        this.selectors = selectors;\n    }\n\n    public void setWhere(org.apache.jackrabbit.oak.query.xpath.Expression where) {\n        this.where = where;\n    }\n\n    public void addOrderBy(org.apache.jackrabbit.oak.query.xpath.Order order) {\n        this.orderList.add(order);\n    }\n\n    public void setColumnSelector(org.apache.jackrabbit.oak.query.xpath.Selector columnSelector) {\n        this.columnSelector = columnSelector;\n    }\n\n    public void setOriginalQuery(java.lang.String xpathQuery) {\n        this.xpathQuery = xpathQuery;\n    }\n\n    static class UnionStatement extends org.apache.jackrabbit.oak.query.xpath.Statement {\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s1;\n\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s2;\n\n        UnionStatement(org.apache.jackrabbit.oak.query.xpath.Statement s1, org.apache.jackrabbit.oak.query.xpath.Statement s2) {\n            this.s1 = s1;\n            this.s2 = s2;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (s1 + \" union \") + s2;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "or",
            "src_parent": "or.left",
            "src_parent_type": "FieldRead",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "or",
            "src_parent": "or.right",
            "src_parent_type": "FieldRead",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "buff.toString()",
            "src_parent": "return buff.toString()",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.query.xpath.the optimized;",
            "src_parent": "public class Statement {\n    private java.lang.String xpathQuery;\n\n    private boolean explain;\n\n    private boolean measure;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector columnSelector;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> columnList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors;\n\n    org.apache.jackrabbit.oak.query.xpath.Get the;\n\n    org.apache.jackrabbit.oak.query.xpath.optimized expression;\n\n    org.apache.jackrabbit.oak.query.xpath.the optimized;\n\n    java.lang.String getCommonLeftPart() {\n        return null;\n    }\n\n    org.apache.jackrabbit.oak.query.xpath.Expression getLeft() {\n        return null;\n    }\n\n    java.util.List<org.apache.jackrabbit.oak.query.xpath.Expression> getRight() {\n        return null;\n    }\n\n    {\n    }\n\n    public void setExplain(boolean explain) {\n        this.explain = explain;\n    }\n\n    public void setMeasure(boolean measure) {\n        this.measure = measure;\n    }\n\n    public void addSelectColumn(org.apache.jackrabbit.oak.query.xpath.Expression.Property p) {\n        columnList.add(p);\n    }\n\n    public void setSelectors(java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors) {\n        this.selectors = selectors;\n    }\n\n    public void setWhere(org.apache.jackrabbit.oak.query.xpath.Expression where) {\n        this.where = where;\n    }\n\n    public void addOrderBy(org.apache.jackrabbit.oak.query.xpath.Order order) {\n        this.orderList.add(order);\n    }\n\n    public void setColumnSelector(org.apache.jackrabbit.oak.query.xpath.Selector columnSelector) {\n        this.columnSelector = columnSelector;\n    }\n\n    public void setOriginalQuery(java.lang.String xpathQuery) {\n        this.xpathQuery = xpathQuery;\n    }\n\n    static class UnionStatement extends org.apache.jackrabbit.oak.query.xpath.Statement {\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s1;\n\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s2;\n\n        UnionStatement(org.apache.jackrabbit.oak.query.xpath.Statement s1, org.apache.jackrabbit.oak.query.xpath.Statement s2) {\n            this.s1 = s1;\n            this.s2 = s2;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (s1 + \" union \") + s2;\n        }\n    }\n\n    @java.lang.Override\n    org.apache.jackrabbit.oak.query.xpath.Expression optimize() {\n        org.apache.jackrabbit.oak.query.xpath.Expression l = left.optimize();\n        org.apache.jackrabbit.oak.query.xpath.Expression r = right.optimize();\n        if ((l != left) || (r != right)) {\n            return new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(l, r);\n        }\n        return this;\n    }\n\n    {\n    }\n\n    @java.lang.Override\n    @java.lang.Override\n    boolean containsFullTextCondition() {\n        return true;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.lang.String getCommonLeftPart() {\n    return null;\n}",
            "src_parent": "public class Statement {\n    private java.lang.String xpathQuery;\n\n    private boolean explain;\n\n    private boolean measure;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector columnSelector;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> columnList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors;\n\n    org.apache.jackrabbit.oak.query.xpath.Get the;\n\n    org.apache.jackrabbit.oak.query.xpath.optimized expression;\n\n    org.apache.jackrabbit.oak.query.xpath.the optimized;\n\n    java.lang.String getCommonLeftPart() {\n        return null;\n    }\n\n    org.apache.jackrabbit.oak.query.xpath.Expression getLeft() {\n        return null;\n    }\n\n    java.util.List<org.apache.jackrabbit.oak.query.xpath.Expression> getRight() {\n        return null;\n    }\n\n    {\n    }\n\n    public void setExplain(boolean explain) {\n        this.explain = explain;\n    }\n\n    public void setMeasure(boolean measure) {\n        this.measure = measure;\n    }\n\n    public void addSelectColumn(org.apache.jackrabbit.oak.query.xpath.Expression.Property p) {\n        columnList.add(p);\n    }\n\n    public void setSelectors(java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors) {\n        this.selectors = selectors;\n    }\n\n    public void setWhere(org.apache.jackrabbit.oak.query.xpath.Expression where) {\n        this.where = where;\n    }\n\n    public void addOrderBy(org.apache.jackrabbit.oak.query.xpath.Order order) {\n        this.orderList.add(order);\n    }\n\n    public void setColumnSelector(org.apache.jackrabbit.oak.query.xpath.Selector columnSelector) {\n        this.columnSelector = columnSelector;\n    }\n\n    public void setOriginalQuery(java.lang.String xpathQuery) {\n        this.xpathQuery = xpathQuery;\n    }\n\n    static class UnionStatement extends org.apache.jackrabbit.oak.query.xpath.Statement {\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s1;\n\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s2;\n\n        UnionStatement(org.apache.jackrabbit.oak.query.xpath.Statement s1, org.apache.jackrabbit.oak.query.xpath.Statement s2) {\n            this.s1 = s1;\n            this.s2 = s2;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (s1 + \" union \") + s2;\n        }\n    }\n\n    @java.lang.Override\n    org.apache.jackrabbit.oak.query.xpath.Expression optimize() {\n        org.apache.jackrabbit.oak.query.xpath.Expression l = left.optimize();\n        org.apache.jackrabbit.oak.query.xpath.Expression r = right.optimize();\n        if ((l != left) || (r != right)) {\n            return new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(l, r);\n        }\n        return this;\n    }\n\n    {\n    }\n\n    @java.lang.Override\n    @java.lang.Override\n    boolean containsFullTextCondition() {\n        return true;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.query.xpath.Expression getLeft() {\n    return null;\n}",
            "src_parent": "public class Statement {\n    private java.lang.String xpathQuery;\n\n    private boolean explain;\n\n    private boolean measure;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector columnSelector;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> columnList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors;\n\n    org.apache.jackrabbit.oak.query.xpath.Get the;\n\n    org.apache.jackrabbit.oak.query.xpath.optimized expression;\n\n    org.apache.jackrabbit.oak.query.xpath.the optimized;\n\n    java.lang.String getCommonLeftPart() {\n        return null;\n    }\n\n    org.apache.jackrabbit.oak.query.xpath.Expression getLeft() {\n        return null;\n    }\n\n    java.util.List<org.apache.jackrabbit.oak.query.xpath.Expression> getRight() {\n        return null;\n    }\n\n    {\n    }\n\n    public void setExplain(boolean explain) {\n        this.explain = explain;\n    }\n\n    public void setMeasure(boolean measure) {\n        this.measure = measure;\n    }\n\n    public void addSelectColumn(org.apache.jackrabbit.oak.query.xpath.Expression.Property p) {\n        columnList.add(p);\n    }\n\n    public void setSelectors(java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors) {\n        this.selectors = selectors;\n    }\n\n    public void setWhere(org.apache.jackrabbit.oak.query.xpath.Expression where) {\n        this.where = where;\n    }\n\n    public void addOrderBy(org.apache.jackrabbit.oak.query.xpath.Order order) {\n        this.orderList.add(order);\n    }\n\n    public void setColumnSelector(org.apache.jackrabbit.oak.query.xpath.Selector columnSelector) {\n        this.columnSelector = columnSelector;\n    }\n\n    public void setOriginalQuery(java.lang.String xpathQuery) {\n        this.xpathQuery = xpathQuery;\n    }\n\n    static class UnionStatement extends org.apache.jackrabbit.oak.query.xpath.Statement {\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s1;\n\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s2;\n\n        UnionStatement(org.apache.jackrabbit.oak.query.xpath.Statement s1, org.apache.jackrabbit.oak.query.xpath.Statement s2) {\n            this.s1 = s1;\n            this.s2 = s2;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (s1 + \" union \") + s2;\n        }\n    }\n\n    @java.lang.Override\n    org.apache.jackrabbit.oak.query.xpath.Expression optimize() {\n        org.apache.jackrabbit.oak.query.xpath.Expression l = left.optimize();\n        org.apache.jackrabbit.oak.query.xpath.Expression r = right.optimize();\n        if ((l != left) || (r != right)) {\n            return new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(l, r);\n        }\n        return this;\n    }\n\n    {\n    }\n\n    @java.lang.Override\n    @java.lang.Override\n    boolean containsFullTextCondition() {\n        return true;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.util.List<org.apache.jackrabbit.oak.query.xpath.Expression> getRight() {\n    return null;\n}",
            "src_parent": "public class Statement {\n    private java.lang.String xpathQuery;\n\n    private boolean explain;\n\n    private boolean measure;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector columnSelector;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> columnList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors;\n\n    org.apache.jackrabbit.oak.query.xpath.Get the;\n\n    org.apache.jackrabbit.oak.query.xpath.optimized expression;\n\n    org.apache.jackrabbit.oak.query.xpath.the optimized;\n\n    java.lang.String getCommonLeftPart() {\n        return null;\n    }\n\n    org.apache.jackrabbit.oak.query.xpath.Expression getLeft() {\n        return null;\n    }\n\n    java.util.List<org.apache.jackrabbit.oak.query.xpath.Expression> getRight() {\n        return null;\n    }\n\n    {\n    }\n\n    public void setExplain(boolean explain) {\n        this.explain = explain;\n    }\n\n    public void setMeasure(boolean measure) {\n        this.measure = measure;\n    }\n\n    public void addSelectColumn(org.apache.jackrabbit.oak.query.xpath.Expression.Property p) {\n        columnList.add(p);\n    }\n\n    public void setSelectors(java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors) {\n        this.selectors = selectors;\n    }\n\n    public void setWhere(org.apache.jackrabbit.oak.query.xpath.Expression where) {\n        this.where = where;\n    }\n\n    public void addOrderBy(org.apache.jackrabbit.oak.query.xpath.Order order) {\n        this.orderList.add(order);\n    }\n\n    public void setColumnSelector(org.apache.jackrabbit.oak.query.xpath.Selector columnSelector) {\n        this.columnSelector = columnSelector;\n    }\n\n    public void setOriginalQuery(java.lang.String xpathQuery) {\n        this.xpathQuery = xpathQuery;\n    }\n\n    static class UnionStatement extends org.apache.jackrabbit.oak.query.xpath.Statement {\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s1;\n\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s2;\n\n        UnionStatement(org.apache.jackrabbit.oak.query.xpath.Statement s1, org.apache.jackrabbit.oak.query.xpath.Statement s2) {\n            this.s1 = s1;\n            this.s2 = s2;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (s1 + \" union \") + s2;\n        }\n    }\n\n    @java.lang.Override\n    org.apache.jackrabbit.oak.query.xpath.Expression optimize() {\n        org.apache.jackrabbit.oak.query.xpath.Expression l = left.optimize();\n        org.apache.jackrabbit.oak.query.xpath.Expression r = right.optimize();\n        if ((l != left) || (r != right)) {\n            return new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(l, r);\n        }\n        return this;\n    }\n\n    {\n    }\n\n    @java.lang.Override\n    @java.lang.Override\n    boolean containsFullTextCondition() {\n        return true;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n}",
            "src_parent": "public class Statement {\n    private java.lang.String xpathQuery;\n\n    private boolean explain;\n\n    private boolean measure;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector columnSelector;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> columnList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors;\n\n    org.apache.jackrabbit.oak.query.xpath.Get the;\n\n    org.apache.jackrabbit.oak.query.xpath.optimized expression;\n\n    org.apache.jackrabbit.oak.query.xpath.the optimized;\n\n    java.lang.String getCommonLeftPart() {\n        return null;\n    }\n\n    org.apache.jackrabbit.oak.query.xpath.Expression getLeft() {\n        return null;\n    }\n\n    java.util.List<org.apache.jackrabbit.oak.query.xpath.Expression> getRight() {\n        return null;\n    }\n\n    {\n    }\n\n    public void setExplain(boolean explain) {\n        this.explain = explain;\n    }\n\n    public void setMeasure(boolean measure) {\n        this.measure = measure;\n    }\n\n    public void addSelectColumn(org.apache.jackrabbit.oak.query.xpath.Expression.Property p) {\n        columnList.add(p);\n    }\n\n    public void setSelectors(java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors) {\n        this.selectors = selectors;\n    }\n\n    public void setWhere(org.apache.jackrabbit.oak.query.xpath.Expression where) {\n        this.where = where;\n    }\n\n    public void addOrderBy(org.apache.jackrabbit.oak.query.xpath.Order order) {\n        this.orderList.add(order);\n    }\n\n    public void setColumnSelector(org.apache.jackrabbit.oak.query.xpath.Selector columnSelector) {\n        this.columnSelector = columnSelector;\n    }\n\n    public void setOriginalQuery(java.lang.String xpathQuery) {\n        this.xpathQuery = xpathQuery;\n    }\n\n    static class UnionStatement extends org.apache.jackrabbit.oak.query.xpath.Statement {\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s1;\n\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s2;\n\n        UnionStatement(org.apache.jackrabbit.oak.query.xpath.Statement s1, org.apache.jackrabbit.oak.query.xpath.Statement s2) {\n            this.s1 = s1;\n            this.s2 = s2;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (s1 + \" union \") + s2;\n        }\n    }\n\n    @java.lang.Override\n    org.apache.jackrabbit.oak.query.xpath.Expression optimize() {\n        org.apache.jackrabbit.oak.query.xpath.Expression l = left.optimize();\n        org.apache.jackrabbit.oak.query.xpath.Expression r = right.optimize();\n        if ((l != left) || (r != right)) {\n            return new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(l, r);\n        }\n        return this;\n    }\n\n    {\n    }\n\n    @java.lang.Override\n    @java.lang.Override\n    boolean containsFullTextCondition() {\n        return true;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "AnonymousExecutable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n}",
            "src_parent": "public class Statement {\n    private java.lang.String xpathQuery;\n\n    private boolean explain;\n\n    private boolean measure;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector columnSelector;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> columnList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors;\n\n    org.apache.jackrabbit.oak.query.xpath.Get the;\n\n    org.apache.jackrabbit.oak.query.xpath.optimized expression;\n\n    org.apache.jackrabbit.oak.query.xpath.the optimized;\n\n    java.lang.String getCommonLeftPart() {\n        return null;\n    }\n\n    org.apache.jackrabbit.oak.query.xpath.Expression getLeft() {\n        return null;\n    }\n\n    java.util.List<org.apache.jackrabbit.oak.query.xpath.Expression> getRight() {\n        return null;\n    }\n\n    {\n    }\n\n    public void setExplain(boolean explain) {\n        this.explain = explain;\n    }\n\n    public void setMeasure(boolean measure) {\n        this.measure = measure;\n    }\n\n    public void addSelectColumn(org.apache.jackrabbit.oak.query.xpath.Expression.Property p) {\n        columnList.add(p);\n    }\n\n    public void setSelectors(java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors) {\n        this.selectors = selectors;\n    }\n\n    public void setWhere(org.apache.jackrabbit.oak.query.xpath.Expression where) {\n        this.where = where;\n    }\n\n    public void addOrderBy(org.apache.jackrabbit.oak.query.xpath.Order order) {\n        this.orderList.add(order);\n    }\n\n    public void setColumnSelector(org.apache.jackrabbit.oak.query.xpath.Selector columnSelector) {\n        this.columnSelector = columnSelector;\n    }\n\n    public void setOriginalQuery(java.lang.String xpathQuery) {\n        this.xpathQuery = xpathQuery;\n    }\n\n    static class UnionStatement extends org.apache.jackrabbit.oak.query.xpath.Statement {\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s1;\n\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s2;\n\n        UnionStatement(org.apache.jackrabbit.oak.query.xpath.Statement s1, org.apache.jackrabbit.oak.query.xpath.Statement s2) {\n            this.s1 = s1;\n            this.s2 = s2;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (s1 + \" union \") + s2;\n        }\n    }\n\n    @java.lang.Override\n    org.apache.jackrabbit.oak.query.xpath.Expression optimize() {\n        org.apache.jackrabbit.oak.query.xpath.Expression l = left.optimize();\n        org.apache.jackrabbit.oak.query.xpath.Expression r = right.optimize();\n        if ((l != left) || (r != right)) {\n            return new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(l, r);\n        }\n        return this;\n    }\n\n    {\n    }\n\n    @java.lang.Override\n    @java.lang.Override\n    boolean containsFullTextCondition() {\n        return true;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "AnonymousExecutable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "null",
            "src_parent": "return null",
            "src_parent_type": "Return",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "true",
            "src_parent": "return true",
            "src_parent_type": "Return",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "@java.lang.Override\norg.apache.jackrabbit.oak.query.xpath.Expression optimize() {\n    org.apache.jackrabbit.oak.query.xpath.Expression l = left.optimize();\n    org.apache.jackrabbit.oak.query.xpath.Expression r = right.optimize();\n    if ((l != left) || (r != right)) {\n        return new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(l, r);\n    }\n    return this;\n}",
            "dst_parent": "public class Statement {\n    private java.lang.String xpathQuery;\n\n    private boolean explain;\n\n    private boolean measure;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector columnSelector;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> columnList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors;\n\n    org.apache.jackrabbit.oak.query.xpath.Get the;\n\n    org.apache.jackrabbit.oak.query.xpath.optimized expression;\n\n    org.apache.jackrabbit.oak.query.xpath.the optimized;\n\n    java.lang.String getCommonLeftPart() {\n        return null;\n    }\n\n    org.apache.jackrabbit.oak.query.xpath.Expression getLeft() {\n        return null;\n    }\n\n    java.util.List<org.apache.jackrabbit.oak.query.xpath.Expression> getRight() {\n        return null;\n    }\n\n    {\n    }\n\n    public void setExplain(boolean explain) {\n        this.explain = explain;\n    }\n\n    public void setMeasure(boolean measure) {\n        this.measure = measure;\n    }\n\n    public void addSelectColumn(org.apache.jackrabbit.oak.query.xpath.Expression.Property p) {\n        columnList.add(p);\n    }\n\n    public void setSelectors(java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors) {\n        this.selectors = selectors;\n    }\n\n    public void setWhere(org.apache.jackrabbit.oak.query.xpath.Expression where) {\n        this.where = where;\n    }\n\n    public void addOrderBy(org.apache.jackrabbit.oak.query.xpath.Order order) {\n        this.orderList.add(order);\n    }\n\n    public void setColumnSelector(org.apache.jackrabbit.oak.query.xpath.Selector columnSelector) {\n        this.columnSelector = columnSelector;\n    }\n\n    public void setOriginalQuery(java.lang.String xpathQuery) {\n        this.xpathQuery = xpathQuery;\n    }\n\n    static class UnionStatement extends org.apache.jackrabbit.oak.query.xpath.Statement {\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s1;\n\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s2;\n\n        UnionStatement(org.apache.jackrabbit.oak.query.xpath.Statement s1, org.apache.jackrabbit.oak.query.xpath.Statement s2) {\n            this.s1 = s1;\n            this.s2 = s2;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (s1 + \" union \") + s2;\n        }\n    }\n\n    @java.lang.Override\n    org.apache.jackrabbit.oak.query.xpath.Expression optimize() {\n        org.apache.jackrabbit.oak.query.xpath.Expression l = left.optimize();\n        org.apache.jackrabbit.oak.query.xpath.Expression r = right.optimize();\n        if ((l != left) || (r != right)) {\n            return new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(l, r);\n        }\n        return this;\n    }\n\n    {\n    }\n\n    @java.lang.Override\n    @java.lang.Override\n    boolean containsFullTextCondition() {\n        return true;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "MOV",
            "src": "private static void addToUnionList(org.apache.jackrabbit.oak.query.xpath.Expression condition, java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> unionList) {\n    if (condition instanceof org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) {\n        org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (condition));\n        if (or.getCommonLeftPart() != null) {\n        } else if ((or.left instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains) && (or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)) {\n        } else {\n            org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.left, unionList);\n            org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.right, unionList);\n            return;\n        }\n    } else if (condition instanceof org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition) {\n        org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition and = ((org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition) (condition));\n        and = and.pullOrRight();\n        if (and.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (and.right));\n            if (or.getCommonLeftPart() != null) {\n            } else if ((or.left instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains) && (or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)) {\n            } else {\n                org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(and.left, or.left), unionList);\n                org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(and.left, or.right), unionList);\n                return;\n            }\n        }\n    }\n    unionList.add(condition);\n}",
            "src_parent": "public class Statement {\n    private java.lang.String xpathQuery;\n\n    private boolean explain;\n\n    private boolean measure;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector columnSelector;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> columnList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors;\n\n    private org.apache.jackrabbit.oak.query.xpath.Expression where;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order> orderList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order>();\n\n    public org.apache.jackrabbit.oak.query.xpath.Statement optimize() {\n        if ((explain || measure) || (orderList.size() > 0)) {\n            return this;\n        }\n        if (where == null) {\n            return this;\n        }\n        java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> unionList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n        org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(where, unionList);\n        if (unionList.size() == 1) {\n            return this;\n        }\n        org.apache.jackrabbit.oak.query.xpath.Statement union = null;\n        for (int i = 0; i < unionList.size(); i++) {\n            org.apache.jackrabbit.oak.query.xpath.Expression e = unionList.get(i);\n            org.apache.jackrabbit.oak.query.xpath.Statement s = new org.apache.jackrabbit.oak.query.xpath.Statement();\n            s.columnSelector = columnSelector;\n            s.selectors = selectors;\n            s.columnList = columnList;\n            s.where = e;\n            if (i == (unionList.size() - 1)) {\n                s.xpathQuery = xpathQuery;\n            }\n            if (union == null) {\n                union = s;\n            } else {\n                union = new org.apache.jackrabbit.oak.query.xpath.Statement.UnionStatement(union.optimize(), s.optimize());\n            }\n        }\n        return union;\n    }\n\n    private static void addToUnionList(org.apache.jackrabbit.oak.query.xpath.Expression condition, java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> unionList) {\n        if (condition instanceof org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (condition));\n            if (or.getCommonLeftPart() != null) {\n            } else if ((or.left instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains) && (or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)) {\n            } else {\n                org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.left, unionList);\n                org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.right, unionList);\n                return;\n            }\n        } else if (condition instanceof org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition and = ((org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition) (condition));\n            and = and.pullOrRight();\n            if (and.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) {\n                org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (and.right));\n                if (or.getCommonLeftPart() != null) {\n                } else if ((or.left instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains) && (or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)) {\n                } else {\n                    org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(and.left, or.left), unionList);\n                    org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(and.left, or.right), unionList);\n                    return;\n                }\n            }\n        }\n        unionList.add(condition);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        java.lang.StringBuilder buff = new java.lang.StringBuilder();\n        if (explain) {\n            buff.append(\"explain \");\n        } else if (measure) {\n            buff.append(\"measure \");\n        }\n        buff.append(\"select \");\n        buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, org.apache.jackrabbit.oak.query.QueryImpl.JCR_PATH, false).toString());\n        if (selectors.size() > 1) {\n            buff.append(\" as \").append('[').append(QueryImpl.JCR_PATH).append(']');\n        }\n        buff.append(\", \");\n        buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, org.apache.jackrabbit.oak.query.QueryImpl.JCR_SCORE, false).toString());\n        if (selectors.size() > 1) {\n            buff.append(\" as \").append('[').append(QueryImpl.JCR_SCORE).append(']');\n        }\n        if (columnList.isEmpty()) {\n            buff.append(\", \");\n            buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, \"*\", false).toString());\n        } else {\n            for (int i = 0; i < columnList.size(); i++) {\n                buff.append(\", \");\n                org.apache.jackrabbit.oak.query.xpath.Expression e = columnList.get(i);\n                java.lang.String columnName = e.toString();\n                buff.append(columnName);\n                if (selectors.size() > 1) {\n                    buff.append(\" as [\").append(e.getColumnAliasName()).append(\"]\");\n                }\n            }\n        }\n        buff.append(\" from \");\n        for (int i = 0; i < selectors.size(); i++) {\n            org.apache.jackrabbit.oak.query.xpath.Selector s = selectors.get(i);\n            if (i > 0) {\n                buff.append(\" inner join \");\n            }\n            java.lang.String nodeType = s.nodeType;\n            if (nodeType == null) {\n                nodeType = \"nt:base\";\n            }\n            buff.append(('[' + nodeType) + ']').append(\" as \").append(s.name);\n            if (s.joinCondition != null) {\n                buff.append(\" on \").append(s.joinCondition);\n            }\n        }\n        if (where != null) {\n            buff.append(\" where \").append(where.toString());\n        }\n        if (!orderList.isEmpty()) {\n            buff.append(\" order by \");\n            for (int i = 0; i < orderList.size(); i++) {\n                if (i > 0) {\n                    buff.append(\", \");\n                }\n                buff.append(orderList.get(i));\n            }\n        }\n        if (xpathQuery != null) {\n            buff.append(\" /* xpath: \");\n            buff.append(xpathQuery);\n            buff.append(\" */\");\n        }\n        return buff.toString();\n    }\n\n    public void setExplain(boolean explain) {\n        this.explain = explain;\n    }\n\n    public void setMeasure(boolean measure) {\n        this.measure = measure;\n    }\n\n    public void addSelectColumn(org.apache.jackrabbit.oak.query.xpath.Expression.Property p) {\n        columnList.add(p);\n    }\n\n    public void setSelectors(java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors) {\n        this.selectors = selectors;\n    }\n\n    public void setWhere(org.apache.jackrabbit.oak.query.xpath.Expression where) {\n        this.where = where;\n    }\n\n    public void addOrderBy(org.apache.jackrabbit.oak.query.xpath.Order order) {\n        this.orderList.add(order);\n    }\n\n    public void setColumnSelector(org.apache.jackrabbit.oak.query.xpath.Selector columnSelector) {\n        this.columnSelector = columnSelector;\n    }\n\n    public void setOriginalQuery(java.lang.String xpathQuery) {\n        this.xpathQuery = xpathQuery;\n    }\n\n    static class UnionStatement extends org.apache.jackrabbit.oak.query.xpath.Statement {\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s1;\n\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s2;\n\n        UnionStatement(org.apache.jackrabbit.oak.query.xpath.Statement s1, org.apache.jackrabbit.oak.query.xpath.Statement s2) {\n            this.s1 = s1;\n            this.s2 = s2;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (s1 + \" union \") + s2;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "@java.lang.Override\n@java.lang.Override\nboolean containsFullTextCondition() {\n    return true;\n}",
            "dst_parent": "public class Statement {\n    private java.lang.String xpathQuery;\n\n    private boolean explain;\n\n    private boolean measure;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector columnSelector;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> columnList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors;\n\n    org.apache.jackrabbit.oak.query.xpath.Get the;\n\n    org.apache.jackrabbit.oak.query.xpath.optimized expression;\n\n    org.apache.jackrabbit.oak.query.xpath.the optimized;\n\n    java.lang.String getCommonLeftPart() {\n        return null;\n    }\n\n    org.apache.jackrabbit.oak.query.xpath.Expression getLeft() {\n        return null;\n    }\n\n    java.util.List<org.apache.jackrabbit.oak.query.xpath.Expression> getRight() {\n        return null;\n    }\n\n    {\n    }\n\n    public void setExplain(boolean explain) {\n        this.explain = explain;\n    }\n\n    public void setMeasure(boolean measure) {\n        this.measure = measure;\n    }\n\n    public void addSelectColumn(org.apache.jackrabbit.oak.query.xpath.Expression.Property p) {\n        columnList.add(p);\n    }\n\n    public void setSelectors(java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors) {\n        this.selectors = selectors;\n    }\n\n    public void setWhere(org.apache.jackrabbit.oak.query.xpath.Expression where) {\n        this.where = where;\n    }\n\n    public void addOrderBy(org.apache.jackrabbit.oak.query.xpath.Order order) {\n        this.orderList.add(order);\n    }\n\n    public void setColumnSelector(org.apache.jackrabbit.oak.query.xpath.Selector columnSelector) {\n        this.columnSelector = columnSelector;\n    }\n\n    public void setOriginalQuery(java.lang.String xpathQuery) {\n        this.xpathQuery = xpathQuery;\n    }\n\n    static class UnionStatement extends org.apache.jackrabbit.oak.query.xpath.Statement {\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s1;\n\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s2;\n\n        UnionStatement(org.apache.jackrabbit.oak.query.xpath.Statement s1, org.apache.jackrabbit.oak.query.xpath.Statement s2) {\n            this.s1 = s1;\n            this.s2 = s2;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (s1 + \" union \") + s2;\n        }\n    }\n\n    @java.lang.Override\n    org.apache.jackrabbit.oak.query.xpath.Expression optimize() {\n        org.apache.jackrabbit.oak.query.xpath.Expression l = left.optimize();\n        org.apache.jackrabbit.oak.query.xpath.Expression r = right.optimize();\n        if ((l != left) || (r != right)) {\n            return new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(l, r);\n        }\n        return this;\n    }\n\n    {\n    }\n\n    @java.lang.Override\n    @java.lang.Override\n    boolean containsFullTextCondition() {\n        return true;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "MOV",
            "src": "@java.lang.Override\npublic java.lang.String toString() {\n    java.lang.StringBuilder buff = new java.lang.StringBuilder();\n    if (explain) {\n        buff.append(\"explain \");\n    } else if (measure) {\n        buff.append(\"measure \");\n    }\n    buff.append(\"select \");\n    buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, org.apache.jackrabbit.oak.query.QueryImpl.JCR_PATH, false).toString());\n    if (selectors.size() > 1) {\n        buff.append(\" as \").append('[').append(QueryImpl.JCR_PATH).append(']');\n    }\n    buff.append(\", \");\n    buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, org.apache.jackrabbit.oak.query.QueryImpl.JCR_SCORE, false).toString());\n    if (selectors.size() > 1) {\n        buff.append(\" as \").append('[').append(QueryImpl.JCR_SCORE).append(']');\n    }\n    if (columnList.isEmpty()) {\n        buff.append(\", \");\n        buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, \"*\", false).toString());\n    } else {\n        for (int i = 0; i < columnList.size(); i++) {\n            buff.append(\", \");\n            org.apache.jackrabbit.oak.query.xpath.Expression e = columnList.get(i);\n            java.lang.String columnName = e.toString();\n            buff.append(columnName);\n            if (selectors.size() > 1) {\n                buff.append(\" as [\").append(e.getColumnAliasName()).append(\"]\");\n            }\n        }\n    }\n    buff.append(\" from \");\n    for (int i = 0; i < selectors.size(); i++) {\n        org.apache.jackrabbit.oak.query.xpath.Selector s = selectors.get(i);\n        if (i > 0) {\n            buff.append(\" inner join \");\n        }\n        java.lang.String nodeType = s.nodeType;\n        if (nodeType == null) {\n            nodeType = \"nt:base\";\n        }\n        buff.append(('[' + nodeType) + ']').append(\" as \").append(s.name);\n        if (s.joinCondition != null) {\n            buff.append(\" on \").append(s.joinCondition);\n        }\n    }\n    if (where != null) {\n        buff.append(\" where \").append(where.toString());\n    }\n    if (!orderList.isEmpty()) {\n        buff.append(\" order by \");\n        for (int i = 0; i < orderList.size(); i++) {\n            if (i > 0) {\n                buff.append(\", \");\n            }\n            buff.append(orderList.get(i));\n        }\n    }\n    if (xpathQuery != null) {\n        buff.append(\" /* xpath: \");\n        buff.append(xpathQuery);\n        buff.append(\" */\");\n    }\n    return buff.toString();\n}",
            "src_parent": "public class Statement {\n    private java.lang.String xpathQuery;\n\n    private boolean explain;\n\n    private boolean measure;\n\n    private org.apache.jackrabbit.oak.query.xpath.Selector columnSelector;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> columnList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors;\n\n    private org.apache.jackrabbit.oak.query.xpath.Expression where;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order> orderList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Order>();\n\n    public org.apache.jackrabbit.oak.query.xpath.Statement optimize() {\n        if ((explain || measure) || (orderList.size() > 0)) {\n            return this;\n        }\n        if (where == null) {\n            return this;\n        }\n        java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> unionList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n        org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(where, unionList);\n        if (unionList.size() == 1) {\n            return this;\n        }\n        org.apache.jackrabbit.oak.query.xpath.Statement union = null;\n        for (int i = 0; i < unionList.size(); i++) {\n            org.apache.jackrabbit.oak.query.xpath.Expression e = unionList.get(i);\n            org.apache.jackrabbit.oak.query.xpath.Statement s = new org.apache.jackrabbit.oak.query.xpath.Statement();\n            s.columnSelector = columnSelector;\n            s.selectors = selectors;\n            s.columnList = columnList;\n            s.where = e;\n            if (i == (unionList.size() - 1)) {\n                s.xpathQuery = xpathQuery;\n            }\n            if (union == null) {\n                union = s;\n            } else {\n                union = new org.apache.jackrabbit.oak.query.xpath.Statement.UnionStatement(union.optimize(), s.optimize());\n            }\n        }\n        return union;\n    }\n\n    private static void addToUnionList(org.apache.jackrabbit.oak.query.xpath.Expression condition, java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> unionList) {\n        if (condition instanceof org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (condition));\n            if (or.getCommonLeftPart() != null) {\n            } else if ((or.left instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains) && (or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)) {\n            } else {\n                org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.left, unionList);\n                org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.right, unionList);\n                return;\n            }\n        } else if (condition instanceof org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition) {\n            org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition and = ((org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition) (condition));\n            and = and.pullOrRight();\n            if (and.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) {\n                org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (and.right));\n                if (or.getCommonLeftPart() != null) {\n                } else if ((or.left instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains) && (or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)) {\n                } else {\n                    org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(and.left, or.left), unionList);\n                    org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(new org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition(and.left, or.right), unionList);\n                    return;\n                }\n            }\n        }\n        unionList.add(condition);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        java.lang.StringBuilder buff = new java.lang.StringBuilder();\n        if (explain) {\n            buff.append(\"explain \");\n        } else if (measure) {\n            buff.append(\"measure \");\n        }\n        buff.append(\"select \");\n        buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, org.apache.jackrabbit.oak.query.QueryImpl.JCR_PATH, false).toString());\n        if (selectors.size() > 1) {\n            buff.append(\" as \").append('[').append(QueryImpl.JCR_PATH).append(']');\n        }\n        buff.append(\", \");\n        buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, org.apache.jackrabbit.oak.query.QueryImpl.JCR_SCORE, false).toString());\n        if (selectors.size() > 1) {\n            buff.append(\" as \").append('[').append(QueryImpl.JCR_SCORE).append(']');\n        }\n        if (columnList.isEmpty()) {\n            buff.append(\", \");\n            buff.append(new org.apache.jackrabbit.oak.query.xpath.Expression.Property(columnSelector, \"*\", false).toString());\n        } else {\n            for (int i = 0; i < columnList.size(); i++) {\n                buff.append(\", \");\n                org.apache.jackrabbit.oak.query.xpath.Expression e = columnList.get(i);\n                java.lang.String columnName = e.toString();\n                buff.append(columnName);\n                if (selectors.size() > 1) {\n                    buff.append(\" as [\").append(e.getColumnAliasName()).append(\"]\");\n                }\n            }\n        }\n        buff.append(\" from \");\n        for (int i = 0; i < selectors.size(); i++) {\n            org.apache.jackrabbit.oak.query.xpath.Selector s = selectors.get(i);\n            if (i > 0) {\n                buff.append(\" inner join \");\n            }\n            java.lang.String nodeType = s.nodeType;\n            if (nodeType == null) {\n                nodeType = \"nt:base\";\n            }\n            buff.append(('[' + nodeType) + ']').append(\" as \").append(s.name);\n            if (s.joinCondition != null) {\n                buff.append(\" on \").append(s.joinCondition);\n            }\n        }\n        if (where != null) {\n            buff.append(\" where \").append(where.toString());\n        }\n        if (!orderList.isEmpty()) {\n            buff.append(\" order by \");\n            for (int i = 0; i < orderList.size(); i++) {\n                if (i > 0) {\n                    buff.append(\", \");\n                }\n                buff.append(orderList.get(i));\n            }\n        }\n        if (xpathQuery != null) {\n            buff.append(\" /* xpath: \");\n            buff.append(xpathQuery);\n            buff.append(\" */\");\n        }\n        return buff.toString();\n    }\n\n    public void setExplain(boolean explain) {\n        this.explain = explain;\n    }\n\n    public void setMeasure(boolean measure) {\n        this.measure = measure;\n    }\n\n    public void addSelectColumn(org.apache.jackrabbit.oak.query.xpath.Expression.Property p) {\n        columnList.add(p);\n    }\n\n    public void setSelectors(java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Selector> selectors) {\n        this.selectors = selectors;\n    }\n\n    public void setWhere(org.apache.jackrabbit.oak.query.xpath.Expression where) {\n        this.where = where;\n    }\n\n    public void addOrderBy(org.apache.jackrabbit.oak.query.xpath.Order order) {\n        this.orderList.add(order);\n    }\n\n    public void setColumnSelector(org.apache.jackrabbit.oak.query.xpath.Selector columnSelector) {\n        this.columnSelector = columnSelector;\n    }\n\n    public void setOriginalQuery(java.lang.String xpathQuery) {\n        this.xpathQuery = xpathQuery;\n    }\n\n    static class UnionStatement extends org.apache.jackrabbit.oak.query.xpath.Statement {\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s1;\n\n        private final org.apache.jackrabbit.oak.query.xpath.Statement s2;\n\n        UnionStatement(org.apache.jackrabbit.oak.query.xpath.Statement s1, org.apache.jackrabbit.oak.query.xpath.Statement s2) {\n            this.s1 = s1;\n            this.s2 = s2;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (s1 + \" union \") + s2;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return null",
            "dst_parent": "{\n    return null;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return union",
            "src_parent": "{\n    if ((explain || measure) || (orderList.size() > 0)) {\n        return this;\n    }\n    if (where == null) {\n        return this;\n    }\n    java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression> unionList = new java.util.ArrayList<org.apache.jackrabbit.oak.query.xpath.Expression>();\n    org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(where, unionList);\n    if (unionList.size() == 1) {\n        return this;\n    }\n    org.apache.jackrabbit.oak.query.xpath.Statement union = null;\n    for (int i = 0; i < unionList.size(); i++) {\n        org.apache.jackrabbit.oak.query.xpath.Expression e = unionList.get(i);\n        org.apache.jackrabbit.oak.query.xpath.Statement s = new org.apache.jackrabbit.oak.query.xpath.Statement();\n        s.columnSelector = columnSelector;\n        s.selectors = selectors;\n        s.columnList = columnList;\n        s.where = e;\n        if (i == (unionList.size() - 1)) {\n            s.xpathQuery = xpathQuery;\n        }\n        if (union == null) {\n            union = s;\n        } else {\n            union = new org.apache.jackrabbit.oak.query.xpath.Statement.UnionStatement(union.optimize(), s.optimize());\n        }\n    }\n    return union;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.query.xpath.Expression",
            "dst_parent": "org.apache.jackrabbit.oak.query.xpath.Expression r = right.optimize()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition",
            "src_parent": "org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition or = ((org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition) (and.right))",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "left",
            "dst_parent": "left.optimize()",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "or.left",
            "src_parent": "org.apache.jackrabbit.oak.query.xpath.Statement.addToUnionList(or.left, unionList)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "right",
            "dst_parent": "(r != right)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "or.right",
            "src_parent": "(or.right instanceof org.apache.jackrabbit.oak.query.xpath.Expression.Contains)",
            "src_parent_type": "BinaryOperator",
            "src_type": "FieldRead"
          }
        }
      ],
      "file_name": "Statement"
    }
  ],
  "id": "jackrabbit-oak_004db804"
}