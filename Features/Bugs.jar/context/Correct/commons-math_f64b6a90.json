{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "private static double deltaMinusDeltaSum(final double a, final double b) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException {\n    if ((a < 0) || (a > b)) {\n        throw new org.apache.commons.math3.exception.OutOfRangeException(a, 0, b);\n    }\n    if (b < 10) {\n        throw new org.apache.commons.math3.exception.NumberIsTooSmallException(b, 10, true);\n    }\n    final double h = a / b;\n    final double p = h / (1.0 + h);\n    final double q = 1.0 / (1.0 + h);\n    final double q2 = q * q;\n    final double[] s = new double[org.apache.commons.math3.special.Beta.DELTA.length];\n    s[0] = 1.0;\n    for (int i = 1; i < s.length; i++) {\n        s[i] = 1.0 + (q + (q2 * s[i - 1]));\n    }\n    final double sqrtT = 10.0 / b;\n    final double t = sqrtT * sqrtT;\n    double w = org.apache.commons.math3.special.Beta.DELTA[org.apache.commons.math3.special.Beta.DELTA.length - 1] * s[s.length - 1];\n    for (int i = org.apache.commons.math3.special.Beta.DELTA.length - 2; i >= 0; i--) {\n        w = (t * w) + (org.apache.commons.math3.special.Beta.DELTA[i] * s[i]);\n    }\n    return (w * p) / b;\n}",
            "dst_parent": "public class Beta {\n    private static final double DEFAULT_EPSILON = 1.0E-14;\n\n    private static final double HALF_LOG_TWO_PI = 0.9189385332046727;\n\n    private static final double[] DELTA = new double[]{ 0.08333333333333333, -2.777777777777778E-5, 7.936507936507937E-8, -5.952380952380953E-10, 8.417508417508329E-12, -1.917526917518546E-13, 6.410256405103255E-15, -2.955065141253382E-16, 1.7964371635940225E-17, -1.3922896466162779E-18, 1.338028550140209E-19, -1.542460098679661E-20, 1.9770199298095743E-21, -2.3406566479399704E-22, 1.713480149663986E-23 };\n\n    private Beta() {\n    }\n\n    public static double regularizedBeta(double x, double a, double b) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);\n    }\n\n    public static double regularizedBeta(double x, double a, double b, double epsilon) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);\n    }\n\n    public static double regularizedBeta(double x, double a, double b, int maxIterations) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, maxIterations);\n    }\n\n    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) {\n        double ret;\n        if ((((((java.lang.Double.isNaN(x) || java.lang.Double.isNaN(a)) || java.lang.Double.isNaN(b)) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {\n            ret = java.lang.Double.NaN;\n        } else if (x > ((a + 1.0) / ((a + b) + 2.0))) {\n            ret = 1.0 - org.apache.commons.math3.special.Beta.regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\n        } else {\n            org.apache.commons.math3.util.ContinuedFraction fraction = new org.apache.commons.math3.util.ContinuedFraction() {\n                @java.lang.Override\n                protected double getB(int n, double x) {\n                    double ret;\n                    double m;\n                    if ((n % 2) == 0) {\n                        m = n / 2.0;\n                        ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));\n                    } else {\n                        m = (n - 1.0) / 2.0;\n                        ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));\n                    }\n                    return ret;\n                }\n\n                @java.lang.Override\n                protected double getA(int n, double x) {\n                    return 1.0;\n                }\n            };\n            ret = (org.apache.commons.math3.util.FastMath.exp((((a * org.apache.commons.math3.util.FastMath.log(x)) + (b * org.apache.commons.math3.util.FastMath.log(1.0 - x))) - org.apache.commons.math3.util.FastMath.log(a)) - org.apache.commons.math3.special.Beta.logBeta(a, b, epsilon, maxIterations)) * 1.0) / fraction.evaluate(x, epsilon, maxIterations);\n        }\n        return ret;\n    }\n\n    @java.lang.Deprecated\n    public static double logBeta(double a, double b, double epsilon, int maxIterations) {\n        return org.apache.commons.math3.special.Beta.logBeta(a, b);\n    }\n\n    private static double logGammaSum(final double a, final double b) throws org.apache.commons.math3.exception.OutOfRangeException {\n        if ((a < 1.0) || (a > 2.0)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(a, 1.0, 2.0);\n        }\n        if ((b < 1.0) || (b > 2.0)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(b, 1.0, 2.0);\n        }\n        final double x = (a - 1.0) + (b - 1.0);\n        if (x <= 0.5) {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(1.0 + x);\n        } else if (x <= 1.5) {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(x) + org.apache.commons.math3.util.FastMath.log1p(x);\n        } else {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(x - 1.0) + org.apache.commons.math3.util.FastMath.log(x * (1.0 + x));\n        }\n    }\n\n    private static double logGammaMinusLogGammaSum(final double a, final double b) throws org.apache.commons.math3.exception.NumberIsTooSmallException {\n        if (a < 0.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(a, 0.0, true);\n        }\n        if (b < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(b, 10.0, true);\n        }\n        final double p;\n        final double q;\n        final double d;\n        final double w;\n        if (a <= b) {\n            d = b + (a - 0.5);\n            w = org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(a, b);\n        } else {\n            d = a + (b - 0.5);\n            w = org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(b, a);\n        }\n        final double u = d * org.apache.commons.math3.util.FastMath.log1p(a / b);\n        final double v = a * (org.apache.commons.math3.util.FastMath.log(b) - 1.0);\n        return u <= v ? (w - u) - v : (w - v) - u;\n    }\n\n    private static double deltaMinusDeltaSum(final double a, final double b) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException {\n        if ((a < 0) || (a > b)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(a, 0, b);\n        }\n        if (b < 10) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(b, 10, true);\n        }\n        final double h = a / b;\n        final double p = h / (1.0 + h);\n        final double q = 1.0 / (1.0 + h);\n        final double q2 = q * q;\n        final double[] s = new double[org.apache.commons.math3.special.Beta.DELTA.length];\n        s[0] = 1.0;\n        for (int i = 1; i < s.length; i++) {\n            s[i] = 1.0 + (q + (q2 * s[i - 1]));\n        }\n        final double sqrtT = 10.0 / b;\n        final double t = sqrtT * sqrtT;\n        double w = org.apache.commons.math3.special.Beta.DELTA[org.apache.commons.math3.special.Beta.DELTA.length - 1] * s[s.length - 1];\n        for (int i = org.apache.commons.math3.special.Beta.DELTA.length - 2; i >= 0; i--) {\n            w = (t * w) + (org.apache.commons.math3.special.Beta.DELTA[i] * s[i]);\n        }\n        return (w * p) / b;\n    }\n\n    private static double sumDeltaMinusDeltaSum(final double p, final double q) {\n        if (p < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(p, 10.0, true);\n        }\n        if (q < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(q, 10.0, true);\n        }\n        final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n        final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n        final double sqrtT = 10.0 / a;\n        final double t = sqrtT * sqrtT;\n        double z = org.apache.commons.math3.special.Beta.DELTA[org.apache.commons.math3.special.Beta.DELTA.length - 1];\n        for (int i = org.apache.commons.math3.special.Beta.DELTA.length - 2; i >= 0; i--) {\n            z = (t * z) + org.apache.commons.math3.special.Beta.DELTA[i];\n        }\n        return (z / a) + org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(a, b);\n    }\n\n    public static final double logBeta(final double p, final double q) {\n        if (((java.lang.Double.isNaN(p) || java.lang.Double.isNaN(q)) || (p <= 0.0)) || (q <= 0.0)) {\n            return java.lang.Double.NaN;\n        }\n        final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n        final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n        if (a >= 10.0) {\n            final double w = org.apache.commons.math3.special.Beta.sumDeltaMinusDeltaSum(a, b);\n            final double h = a / b;\n            final double c = h / (1.0 + h);\n            final double u = (-(a - 0.5)) * org.apache.commons.math3.util.FastMath.log(c);\n            final double v = b * org.apache.commons.math3.util.FastMath.log1p(h);\n            if (u <= v) {\n                return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - u) - v;\n            } else {\n                return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - v) - u;\n            }\n        } else if (a > 2.0) {\n            if (b > 1000.0) {\n                final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n                double prod = 1.0;\n                double ared = a;\n                for (int i = 0; i < n; i++) {\n                    ared -= 1.0;\n                    prod *= ared / (1.0 + (ared / b));\n                }\n                return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n            } else {\n                double prod1 = 1.0;\n                double ared = a;\n                while (ared > 2.0) {\n                    ared -= 1.0;\n                    final double h = ared / b;\n                    prod1 *= h / (1.0 + h);\n                } \n                if (b < 10.0) {\n                    double prod2 = 1.0;\n                    double bred = b;\n                    while (bred > 2.0) {\n                        bred -= 1.0;\n                        prod2 *= bred / (ared + bred);\n                    } \n                    return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n                } else {\n                    return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n                }\n            }\n        } else if (a >= 1.0) {\n            if (b > 2.0) {\n                if (b < 10.0) {\n                    double prod = 1.0;\n                    double bred = b;\n                    while (bred > 2.0) {\n                        bred -= 1.0;\n                        prod *= bred / (a + bred);\n                    } \n                    return org.apache.commons.math3.util.FastMath.log(prod) + (org.apache.commons.math3.special.Gamma.logGamma(a) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(a, bred)));\n                } else {\n                    return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n                }\n            } else {\n                return (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Beta.logGammaSum(a, b);\n            }\n        } else if (b >= 10.0) {\n            return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n        } else {\n            return org.apache.commons.math3.util.FastMath.log((org.apache.commons.math3.special.Gamma.gamma(a) * org.apache.commons.math3.special.Gamma.gamma(b)) / org.apache.commons.math3.special.Gamma.gamma(a + b));\n        }\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "public static double logBeta(double a, double b) {\n    return org.apache.commons.math3.special.Beta.logBeta(a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);\n}",
            "src_parent": "public class Beta {\n    private static final double DEFAULT_EPSILON = 1.0E-14;\n\n    private Beta() {\n    }\n\n    public static double regularizedBeta(double x, double a, double b) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);\n    }\n\n    public static double regularizedBeta(double x, double a, double b, double epsilon) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);\n    }\n\n    public static double regularizedBeta(double x, double a, double b, int maxIterations) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, maxIterations);\n    }\n\n    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) {\n        double ret;\n        if ((((((java.lang.Double.isNaN(x) || java.lang.Double.isNaN(a)) || java.lang.Double.isNaN(b)) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {\n            ret = java.lang.Double.NaN;\n        } else if (x > ((a + 1.0) / ((a + b) + 2.0))) {\n            ret = 1.0 - org.apache.commons.math3.special.Beta.regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\n        } else {\n            org.apache.commons.math3.util.ContinuedFraction fraction = new org.apache.commons.math3.util.ContinuedFraction() {\n                @java.lang.Override\n                protected double getB(int n, double x) {\n                    double ret;\n                    double m;\n                    if ((n % 2) == 0) {\n                        m = n / 2.0;\n                        ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));\n                    } else {\n                        m = (n - 1.0) / 2.0;\n                        ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));\n                    }\n                    return ret;\n                }\n\n                @java.lang.Override\n                protected double getA(int n, double x) {\n                    return 1.0;\n                }\n            };\n            ret = (org.apache.commons.math3.util.FastMath.exp((((a * org.apache.commons.math3.util.FastMath.log(x)) + (b * org.apache.commons.math3.util.FastMath.log(1.0 - x))) - org.apache.commons.math3.util.FastMath.log(a)) - org.apache.commons.math3.special.Beta.logBeta(a, b, epsilon, maxIterations)) * 1.0) / fraction.evaluate(x, epsilon, maxIterations);\n        }\n        return ret;\n    }\n\n    public static double logBeta(double a, double b) {\n        return org.apache.commons.math3.special.Beta.logBeta(a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);\n    }\n\n    public static double logBeta(double a, double b, double epsilon, int maxIterations) {\n        double ret;\n        if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {\n            ret = java.lang.Double.NaN;\n        } else {\n            ret = (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Gamma.logGamma(a + b);\n        }\n        return ret;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Wrapper",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "private",
            "dst_parent": "private static double deltaMinusDeltaSum(final double a, final double b) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException {\n    if ((a < 0) || (a > b)) {\n        throw new org.apache.commons.math3.exception.OutOfRangeException(a, 0, b);\n    }\n    if (b < 10) {\n        throw new org.apache.commons.math3.exception.NumberIsTooSmallException(b, 10, true);\n    }\n    final double h = a / b;\n    final double p = h / (1.0 + h);\n    final double q = 1.0 / (1.0 + h);\n    final double q2 = q * q;\n    final double[] s = new double[org.apache.commons.math3.special.Beta.DELTA.length];\n    s[0] = 1.0;\n    for (int i = 1; i < s.length; i++) {\n        s[i] = 1.0 + (q + (q2 * s[i - 1]));\n    }\n    final double sqrtT = 10.0 / b;\n    final double t = sqrtT * sqrtT;\n    double w = org.apache.commons.math3.special.Beta.DELTA[org.apache.commons.math3.special.Beta.DELTA.length - 1] * s[s.length - 1];\n    for (int i = org.apache.commons.math3.special.Beta.DELTA.length - 2; i >= 0; i--) {\n        w = (t * w) + (org.apache.commons.math3.special.Beta.DELTA[i] * s[i]);\n    }\n    return (w * p) / b;\n}",
            "dst_parent_type": "Method",
            "dst_type": "Wra",
            "operator": "UPD",
            "src": "public",
            "src_parent": "public static double logBeta(double a, double b) {\n    return org.apache.commons.math3.special.Beta.logBeta(a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);\n}",
            "src_parent_type": "Method",
            "src_type": "Wra"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "q",
            "dst_parent": "(q <= 0.0)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "b",
            "src_parent": "(b <= 0.0)",
            "src_parent_type": "BinaryOperator",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "p",
            "dst_parent": "(p <= 0.0)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "a",
            "src_parent": "(a <= 0.0)",
            "src_parent_type": "BinaryOperator",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "p",
            "dst_parent": "java.lang.Double.isNaN(p)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "a",
            "src_parent": "java.lang.Double.isNaN(a)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "q",
            "dst_parent": "java.lang.Double.isNaN(q)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "b",
            "src_parent": "java.lang.Double.isNaN(b)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.commons.math3.special.Beta",
            "dst_parent": "org.apache.commons.math3.special.Beta.DELTA",
            "dst_parent_type": "FieldRead",
            "dst_type": "TypeAccess",
            "operator": "UPD",
            "src": "java.lang.Integer",
            "src_parent": "java.lang.Integer.MAX_VALUE",
            "src_parent_type": "FieldRead",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.commons.math3.special.Gamma.gamma(a + b)",
            "dst_parent": "(org.apache.commons.math3.special.Gamma.gamma(a) * org.apache.commons.math3.special.Gamma.gamma(b)) / org.apache.commons.math3.special.Gamma.gamma(a + b)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "org.apache.commons.math3.special.Gamma.logGamma(a + b)",
            "src_parent": "(org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Gamma.logGamma(a + b)",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "ret = java.lang.Double.NaN",
            "src_parent": "{\n    ret = java.lang.Double.NaN;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "ret = (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Gamma.logGamma(a + b)",
            "src_parent": "{\n    ret = (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Gamma.logGamma(a + b);\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "double ret",
            "src_parent": "{\n    double ret;\n    if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {\n        ret = java.lang.Double.NaN;\n    } else {\n        ret = (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Gamma.logGamma(a + b);\n    }\n    return ret;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {\n    ret = java.lang.Double.NaN;\n} else {\n    ret = (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Gamma.logGamma(a + b);\n}",
            "src_parent": "{\n    double ret;\n    if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {\n        ret = java.lang.Double.NaN;\n    } else {\n        ret = (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Gamma.logGamma(a + b);\n    }\n    return ret;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "return ret",
            "src_parent": "{\n    double ret;\n    if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {\n        ret = java.lang.Double.NaN;\n    } else {\n        ret = (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Gamma.logGamma(a + b);\n    }\n    return ret;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static final double HALF_LOG_TWO_PI = 0.9189385332046727;",
            "src_parent": "public class Beta {\n    private static final double DEFAULT_EPSILON = 1.0E-14;\n\n    private static final double HALF_LOG_TWO_PI = 0.9189385332046727;\n\n    private static final double[] DELTA = new double[]{ 0.08333333333333333, -2.777777777777778E-5, 7.936507936507937E-8, -5.952380952380953E-10, 8.417508417508329E-12, -1.917526917518546E-13, 6.410256405103255E-15, -2.955065141253382E-16, 1.7964371635940225E-17, -1.3922896466162779E-18, 1.338028550140209E-19, -1.542460098679661E-20, 1.9770199298095743E-21, -2.3406566479399704E-22, 1.713480149663986E-23 };\n\n    private Beta() {\n    }\n\n    public static double regularizedBeta(double x, double a, double b) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);\n    }\n\n    public static double regularizedBeta(double x, double a, double b, double epsilon) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);\n    }\n\n    public static double regularizedBeta(double x, double a, double b, int maxIterations) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, maxIterations);\n    }\n\n    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) {\n        double ret;\n        if ((((((java.lang.Double.isNaN(x) || java.lang.Double.isNaN(a)) || java.lang.Double.isNaN(b)) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {\n            ret = java.lang.Double.NaN;\n        } else if (x > ((a + 1.0) / ((a + b) + 2.0))) {\n            ret = 1.0 - org.apache.commons.math3.special.Beta.regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\n        } else {\n            org.apache.commons.math3.util.ContinuedFraction fraction = new org.apache.commons.math3.util.ContinuedFraction() {\n                @java.lang.Override\n                protected double getB(int n, double x) {\n                    double ret;\n                    double m;\n                    if ((n % 2) == 0) {\n                        m = n / 2.0;\n                        ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));\n                    } else {\n                        m = (n - 1.0) / 2.0;\n                        ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));\n                    }\n                    return ret;\n                }\n\n                @java.lang.Override\n                protected double getA(int n, double x) {\n                    return 1.0;\n                }\n            };\n            ret = (org.apache.commons.math3.util.FastMath.exp((((a * org.apache.commons.math3.util.FastMath.log(x)) + (b * org.apache.commons.math3.util.FastMath.log(1.0 - x))) - org.apache.commons.math3.util.FastMath.log(a)) - org.apache.commons.math3.special.Beta.logBeta(a, b, epsilon, maxIterations)) * 1.0) / fraction.evaluate(x, epsilon, maxIterations);\n        }\n        return ret;\n    }\n\n    @java.lang.Deprecated\n    public static double logBeta(double a, double b, double epsilon, int maxIterations) {\n        return org.apache.commons.math3.special.Beta.logBeta(a, b);\n    }\n\n    private static double logGammaSum(final double a, final double b) throws org.apache.commons.math3.exception.OutOfRangeException {\n        if ((a < 1.0) || (a > 2.0)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(a, 1.0, 2.0);\n        }\n        if ((b < 1.0) || (b > 2.0)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(b, 1.0, 2.0);\n        }\n        final double x = (a - 1.0) + (b - 1.0);\n        if (x <= 0.5) {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(1.0 + x);\n        } else if (x <= 1.5) {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(x) + org.apache.commons.math3.util.FastMath.log1p(x);\n        } else {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(x - 1.0) + org.apache.commons.math3.util.FastMath.log(x * (1.0 + x));\n        }\n    }\n\n    private static double logGammaMinusLogGammaSum(final double a, final double b) throws org.apache.commons.math3.exception.NumberIsTooSmallException {\n        if (a < 0.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(a, 0.0, true);\n        }\n        if (b < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(b, 10.0, true);\n        }\n        final double p;\n        final double q;\n        final double d;\n        final double w;\n        if (a <= b) {\n            d = b + (a - 0.5);\n            w = org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(a, b);\n        } else {\n            d = a + (b - 0.5);\n            w = org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(b, a);\n        }\n        final double u = d * org.apache.commons.math3.util.FastMath.log1p(a / b);\n        final double v = a * (org.apache.commons.math3.util.FastMath.log(b) - 1.0);\n        return u <= v ? (w - u) - v : (w - v) - u;\n    }\n\n    private static double deltaMinusDeltaSum(final double a, final double b) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException {\n        if ((a < 0) || (a > b)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(a, 0, b);\n        }\n        if (b < 10) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(b, 10, true);\n        }\n        final double h = a / b;\n        final double p = h / (1.0 + h);\n        final double q = 1.0 / (1.0 + h);\n        final double q2 = q * q;\n        final double[] s = new double[org.apache.commons.math3.special.Beta.DELTA.length];\n        s[0] = 1.0;\n        for (int i = 1; i < s.length; i++) {\n            s[i] = 1.0 + (q + (q2 * s[i - 1]));\n        }\n        final double sqrtT = 10.0 / b;\n        final double t = sqrtT * sqrtT;\n        double w = org.apache.commons.math3.special.Beta.DELTA[org.apache.commons.math3.special.Beta.DELTA.length - 1] * s[s.length - 1];\n        for (int i = org.apache.commons.math3.special.Beta.DELTA.length - 2; i >= 0; i--) {\n            w = (t * w) + (org.apache.commons.math3.special.Beta.DELTA[i] * s[i]);\n        }\n        return (w * p) / b;\n    }\n\n    private static double sumDeltaMinusDeltaSum(final double p, final double q) {\n        if (p < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(p, 10.0, true);\n        }\n        if (q < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(q, 10.0, true);\n        }\n        final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n        final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n        final double sqrtT = 10.0 / a;\n        final double t = sqrtT * sqrtT;\n        double z = org.apache.commons.math3.special.Beta.DELTA[org.apache.commons.math3.special.Beta.DELTA.length - 1];\n        for (int i = org.apache.commons.math3.special.Beta.DELTA.length - 2; i >= 0; i--) {\n            z = (t * z) + org.apache.commons.math3.special.Beta.DELTA[i];\n        }\n        return (z / a) + org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(a, b);\n    }\n\n    public static final double logBeta(final double p, final double q) {\n        if (((java.lang.Double.isNaN(p) || java.lang.Double.isNaN(q)) || (p <= 0.0)) || (q <= 0.0)) {\n            return java.lang.Double.NaN;\n        }\n        final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n        final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n        if (a >= 10.0) {\n            final double w = org.apache.commons.math3.special.Beta.sumDeltaMinusDeltaSum(a, b);\n            final double h = a / b;\n            final double c = h / (1.0 + h);\n            final double u = (-(a - 0.5)) * org.apache.commons.math3.util.FastMath.log(c);\n            final double v = b * org.apache.commons.math3.util.FastMath.log1p(h);\n            if (u <= v) {\n                return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - u) - v;\n            } else {\n                return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - v) - u;\n            }\n        } else if (a > 2.0) {\n            if (b > 1000.0) {\n                final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n                double prod = 1.0;\n                double ared = a;\n                for (int i = 0; i < n; i++) {\n                    ared -= 1.0;\n                    prod *= ared / (1.0 + (ared / b));\n                }\n                return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n            } else {\n                double prod1 = 1.0;\n                double ared = a;\n                while (ared > 2.0) {\n                    ared -= 1.0;\n                    final double h = ared / b;\n                    prod1 *= h / (1.0 + h);\n                } \n                if (b < 10.0) {\n                    double prod2 = 1.0;\n                    double bred = b;\n                    while (bred > 2.0) {\n                        bred -= 1.0;\n                        prod2 *= bred / (ared + bred);\n                    } \n                    return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n                } else {\n                    return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n                }\n            }\n        } else if (a >= 1.0) {\n            if (b > 2.0) {\n                if (b < 10.0) {\n                    double prod = 1.0;\n                    double bred = b;\n                    while (bred > 2.0) {\n                        bred -= 1.0;\n                        prod *= bred / (a + bred);\n                    } \n                    return org.apache.commons.math3.util.FastMath.log(prod) + (org.apache.commons.math3.special.Gamma.logGamma(a) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(a, bred)));\n                } else {\n                    return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n                }\n            } else {\n                return (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Beta.logGammaSum(a, b);\n            }\n        } else if (b >= 10.0) {\n            return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n        } else {\n            return org.apache.commons.math3.util.FastMath.log((org.apache.commons.math3.special.Gamma.gamma(a) * org.apache.commons.math3.special.Gamma.gamma(b)) / org.apache.commons.math3.special.Gamma.gamma(a + b));\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static final double[] DELTA = new double[]{ 0.08333333333333333, -2.777777777777778E-5, 7.936507936507937E-8, -5.952380952380953E-10, 8.417508417508329E-12, -1.917526917518546E-13, 6.410256405103255E-15, -2.955065141253382E-16, 1.7964371635940225E-17, -1.3922896466162779E-18, 1.338028550140209E-19, -1.542460098679661E-20, 1.9770199298095743E-21, -2.3406566479399704E-22, 1.713480149663986E-23 };",
            "src_parent": "public class Beta {\n    private static final double DEFAULT_EPSILON = 1.0E-14;\n\n    private static final double HALF_LOG_TWO_PI = 0.9189385332046727;\n\n    private static final double[] DELTA = new double[]{ 0.08333333333333333, -2.777777777777778E-5, 7.936507936507937E-8, -5.952380952380953E-10, 8.417508417508329E-12, -1.917526917518546E-13, 6.410256405103255E-15, -2.955065141253382E-16, 1.7964371635940225E-17, -1.3922896466162779E-18, 1.338028550140209E-19, -1.542460098679661E-20, 1.9770199298095743E-21, -2.3406566479399704E-22, 1.713480149663986E-23 };\n\n    private Beta() {\n    }\n\n    public static double regularizedBeta(double x, double a, double b) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);\n    }\n\n    public static double regularizedBeta(double x, double a, double b, double epsilon) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);\n    }\n\n    public static double regularizedBeta(double x, double a, double b, int maxIterations) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, maxIterations);\n    }\n\n    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) {\n        double ret;\n        if ((((((java.lang.Double.isNaN(x) || java.lang.Double.isNaN(a)) || java.lang.Double.isNaN(b)) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {\n            ret = java.lang.Double.NaN;\n        } else if (x > ((a + 1.0) / ((a + b) + 2.0))) {\n            ret = 1.0 - org.apache.commons.math3.special.Beta.regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\n        } else {\n            org.apache.commons.math3.util.ContinuedFraction fraction = new org.apache.commons.math3.util.ContinuedFraction() {\n                @java.lang.Override\n                protected double getB(int n, double x) {\n                    double ret;\n                    double m;\n                    if ((n % 2) == 0) {\n                        m = n / 2.0;\n                        ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));\n                    } else {\n                        m = (n - 1.0) / 2.0;\n                        ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));\n                    }\n                    return ret;\n                }\n\n                @java.lang.Override\n                protected double getA(int n, double x) {\n                    return 1.0;\n                }\n            };\n            ret = (org.apache.commons.math3.util.FastMath.exp((((a * org.apache.commons.math3.util.FastMath.log(x)) + (b * org.apache.commons.math3.util.FastMath.log(1.0 - x))) - org.apache.commons.math3.util.FastMath.log(a)) - org.apache.commons.math3.special.Beta.logBeta(a, b, epsilon, maxIterations)) * 1.0) / fraction.evaluate(x, epsilon, maxIterations);\n        }\n        return ret;\n    }\n\n    @java.lang.Deprecated\n    public static double logBeta(double a, double b, double epsilon, int maxIterations) {\n        return org.apache.commons.math3.special.Beta.logBeta(a, b);\n    }\n\n    private static double logGammaSum(final double a, final double b) throws org.apache.commons.math3.exception.OutOfRangeException {\n        if ((a < 1.0) || (a > 2.0)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(a, 1.0, 2.0);\n        }\n        if ((b < 1.0) || (b > 2.0)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(b, 1.0, 2.0);\n        }\n        final double x = (a - 1.0) + (b - 1.0);\n        if (x <= 0.5) {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(1.0 + x);\n        } else if (x <= 1.5) {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(x) + org.apache.commons.math3.util.FastMath.log1p(x);\n        } else {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(x - 1.0) + org.apache.commons.math3.util.FastMath.log(x * (1.0 + x));\n        }\n    }\n\n    private static double logGammaMinusLogGammaSum(final double a, final double b) throws org.apache.commons.math3.exception.NumberIsTooSmallException {\n        if (a < 0.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(a, 0.0, true);\n        }\n        if (b < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(b, 10.0, true);\n        }\n        final double p;\n        final double q;\n        final double d;\n        final double w;\n        if (a <= b) {\n            d = b + (a - 0.5);\n            w = org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(a, b);\n        } else {\n            d = a + (b - 0.5);\n            w = org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(b, a);\n        }\n        final double u = d * org.apache.commons.math3.util.FastMath.log1p(a / b);\n        final double v = a * (org.apache.commons.math3.util.FastMath.log(b) - 1.0);\n        return u <= v ? (w - u) - v : (w - v) - u;\n    }\n\n    private static double deltaMinusDeltaSum(final double a, final double b) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException {\n        if ((a < 0) || (a > b)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(a, 0, b);\n        }\n        if (b < 10) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(b, 10, true);\n        }\n        final double h = a / b;\n        final double p = h / (1.0 + h);\n        final double q = 1.0 / (1.0 + h);\n        final double q2 = q * q;\n        final double[] s = new double[org.apache.commons.math3.special.Beta.DELTA.length];\n        s[0] = 1.0;\n        for (int i = 1; i < s.length; i++) {\n            s[i] = 1.0 + (q + (q2 * s[i - 1]));\n        }\n        final double sqrtT = 10.0 / b;\n        final double t = sqrtT * sqrtT;\n        double w = org.apache.commons.math3.special.Beta.DELTA[org.apache.commons.math3.special.Beta.DELTA.length - 1] * s[s.length - 1];\n        for (int i = org.apache.commons.math3.special.Beta.DELTA.length - 2; i >= 0; i--) {\n            w = (t * w) + (org.apache.commons.math3.special.Beta.DELTA[i] * s[i]);\n        }\n        return (w * p) / b;\n    }\n\n    private static double sumDeltaMinusDeltaSum(final double p, final double q) {\n        if (p < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(p, 10.0, true);\n        }\n        if (q < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(q, 10.0, true);\n        }\n        final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n        final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n        final double sqrtT = 10.0 / a;\n        final double t = sqrtT * sqrtT;\n        double z = org.apache.commons.math3.special.Beta.DELTA[org.apache.commons.math3.special.Beta.DELTA.length - 1];\n        for (int i = org.apache.commons.math3.special.Beta.DELTA.length - 2; i >= 0; i--) {\n            z = (t * z) + org.apache.commons.math3.special.Beta.DELTA[i];\n        }\n        return (z / a) + org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(a, b);\n    }\n\n    public static final double logBeta(final double p, final double q) {\n        if (((java.lang.Double.isNaN(p) || java.lang.Double.isNaN(q)) || (p <= 0.0)) || (q <= 0.0)) {\n            return java.lang.Double.NaN;\n        }\n        final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n        final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n        if (a >= 10.0) {\n            final double w = org.apache.commons.math3.special.Beta.sumDeltaMinusDeltaSum(a, b);\n            final double h = a / b;\n            final double c = h / (1.0 + h);\n            final double u = (-(a - 0.5)) * org.apache.commons.math3.util.FastMath.log(c);\n            final double v = b * org.apache.commons.math3.util.FastMath.log1p(h);\n            if (u <= v) {\n                return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - u) - v;\n            } else {\n                return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - v) - u;\n            }\n        } else if (a > 2.0) {\n            if (b > 1000.0) {\n                final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n                double prod = 1.0;\n                double ared = a;\n                for (int i = 0; i < n; i++) {\n                    ared -= 1.0;\n                    prod *= ared / (1.0 + (ared / b));\n                }\n                return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n            } else {\n                double prod1 = 1.0;\n                double ared = a;\n                while (ared > 2.0) {\n                    ared -= 1.0;\n                    final double h = ared / b;\n                    prod1 *= h / (1.0 + h);\n                } \n                if (b < 10.0) {\n                    double prod2 = 1.0;\n                    double bred = b;\n                    while (bred > 2.0) {\n                        bred -= 1.0;\n                        prod2 *= bred / (ared + bred);\n                    } \n                    return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n                } else {\n                    return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n                }\n            }\n        } else if (a >= 1.0) {\n            if (b > 2.0) {\n                if (b < 10.0) {\n                    double prod = 1.0;\n                    double bred = b;\n                    while (bred > 2.0) {\n                        bred -= 1.0;\n                        prod *= bred / (a + bred);\n                    } \n                    return org.apache.commons.math3.util.FastMath.log(prod) + (org.apache.commons.math3.special.Gamma.logGamma(a) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(a, bred)));\n                } else {\n                    return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n                }\n            } else {\n                return (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Beta.logGammaSum(a, b);\n            }\n        } else if (b >= 10.0) {\n            return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n        } else {\n            return org.apache.commons.math3.util.FastMath.log((org.apache.commons.math3.special.Gamma.gamma(a) * org.apache.commons.math3.special.Gamma.gamma(b)) / org.apache.commons.math3.special.Gamma.gamma(a + b));\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "@java.lang.Deprecated\npublic static double logBeta(double a, double b, double epsilon, int maxIterations) {\n    return org.apache.commons.math3.special.Beta.logBeta(a, b);\n}",
            "src_parent": "public class Beta {\n    private static final double DEFAULT_EPSILON = 1.0E-14;\n\n    private static final double HALF_LOG_TWO_PI = 0.9189385332046727;\n\n    private static final double[] DELTA = new double[]{ 0.08333333333333333, -2.777777777777778E-5, 7.936507936507937E-8, -5.952380952380953E-10, 8.417508417508329E-12, -1.917526917518546E-13, 6.410256405103255E-15, -2.955065141253382E-16, 1.7964371635940225E-17, -1.3922896466162779E-18, 1.338028550140209E-19, -1.542460098679661E-20, 1.9770199298095743E-21, -2.3406566479399704E-22, 1.713480149663986E-23 };\n\n    private Beta() {\n    }\n\n    public static double regularizedBeta(double x, double a, double b) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);\n    }\n\n    public static double regularizedBeta(double x, double a, double b, double epsilon) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);\n    }\n\n    public static double regularizedBeta(double x, double a, double b, int maxIterations) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, maxIterations);\n    }\n\n    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) {\n        double ret;\n        if ((((((java.lang.Double.isNaN(x) || java.lang.Double.isNaN(a)) || java.lang.Double.isNaN(b)) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {\n            ret = java.lang.Double.NaN;\n        } else if (x > ((a + 1.0) / ((a + b) + 2.0))) {\n            ret = 1.0 - org.apache.commons.math3.special.Beta.regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\n        } else {\n            org.apache.commons.math3.util.ContinuedFraction fraction = new org.apache.commons.math3.util.ContinuedFraction() {\n                @java.lang.Override\n                protected double getB(int n, double x) {\n                    double ret;\n                    double m;\n                    if ((n % 2) == 0) {\n                        m = n / 2.0;\n                        ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));\n                    } else {\n                        m = (n - 1.0) / 2.0;\n                        ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));\n                    }\n                    return ret;\n                }\n\n                @java.lang.Override\n                protected double getA(int n, double x) {\n                    return 1.0;\n                }\n            };\n            ret = (org.apache.commons.math3.util.FastMath.exp((((a * org.apache.commons.math3.util.FastMath.log(x)) + (b * org.apache.commons.math3.util.FastMath.log(1.0 - x))) - org.apache.commons.math3.util.FastMath.log(a)) - org.apache.commons.math3.special.Beta.logBeta(a, b, epsilon, maxIterations)) * 1.0) / fraction.evaluate(x, epsilon, maxIterations);\n        }\n        return ret;\n    }\n\n    @java.lang.Deprecated\n    public static double logBeta(double a, double b, double epsilon, int maxIterations) {\n        return org.apache.commons.math3.special.Beta.logBeta(a, b);\n    }\n\n    private static double logGammaSum(final double a, final double b) throws org.apache.commons.math3.exception.OutOfRangeException {\n        if ((a < 1.0) || (a > 2.0)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(a, 1.0, 2.0);\n        }\n        if ((b < 1.0) || (b > 2.0)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(b, 1.0, 2.0);\n        }\n        final double x = (a - 1.0) + (b - 1.0);\n        if (x <= 0.5) {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(1.0 + x);\n        } else if (x <= 1.5) {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(x) + org.apache.commons.math3.util.FastMath.log1p(x);\n        } else {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(x - 1.0) + org.apache.commons.math3.util.FastMath.log(x * (1.0 + x));\n        }\n    }\n\n    private static double logGammaMinusLogGammaSum(final double a, final double b) throws org.apache.commons.math3.exception.NumberIsTooSmallException {\n        if (a < 0.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(a, 0.0, true);\n        }\n        if (b < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(b, 10.0, true);\n        }\n        final double p;\n        final double q;\n        final double d;\n        final double w;\n        if (a <= b) {\n            d = b + (a - 0.5);\n            w = org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(a, b);\n        } else {\n            d = a + (b - 0.5);\n            w = org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(b, a);\n        }\n        final double u = d * org.apache.commons.math3.util.FastMath.log1p(a / b);\n        final double v = a * (org.apache.commons.math3.util.FastMath.log(b) - 1.0);\n        return u <= v ? (w - u) - v : (w - v) - u;\n    }\n\n    private static double deltaMinusDeltaSum(final double a, final double b) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException {\n        if ((a < 0) || (a > b)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(a, 0, b);\n        }\n        if (b < 10) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(b, 10, true);\n        }\n        final double h = a / b;\n        final double p = h / (1.0 + h);\n        final double q = 1.0 / (1.0 + h);\n        final double q2 = q * q;\n        final double[] s = new double[org.apache.commons.math3.special.Beta.DELTA.length];\n        s[0] = 1.0;\n        for (int i = 1; i < s.length; i++) {\n            s[i] = 1.0 + (q + (q2 * s[i - 1]));\n        }\n        final double sqrtT = 10.0 / b;\n        final double t = sqrtT * sqrtT;\n        double w = org.apache.commons.math3.special.Beta.DELTA[org.apache.commons.math3.special.Beta.DELTA.length - 1] * s[s.length - 1];\n        for (int i = org.apache.commons.math3.special.Beta.DELTA.length - 2; i >= 0; i--) {\n            w = (t * w) + (org.apache.commons.math3.special.Beta.DELTA[i] * s[i]);\n        }\n        return (w * p) / b;\n    }\n\n    private static double sumDeltaMinusDeltaSum(final double p, final double q) {\n        if (p < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(p, 10.0, true);\n        }\n        if (q < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(q, 10.0, true);\n        }\n        final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n        final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n        final double sqrtT = 10.0 / a;\n        final double t = sqrtT * sqrtT;\n        double z = org.apache.commons.math3.special.Beta.DELTA[org.apache.commons.math3.special.Beta.DELTA.length - 1];\n        for (int i = org.apache.commons.math3.special.Beta.DELTA.length - 2; i >= 0; i--) {\n            z = (t * z) + org.apache.commons.math3.special.Beta.DELTA[i];\n        }\n        return (z / a) + org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(a, b);\n    }\n\n    public static final double logBeta(final double p, final double q) {\n        if (((java.lang.Double.isNaN(p) || java.lang.Double.isNaN(q)) || (p <= 0.0)) || (q <= 0.0)) {\n            return java.lang.Double.NaN;\n        }\n        final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n        final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n        if (a >= 10.0) {\n            final double w = org.apache.commons.math3.special.Beta.sumDeltaMinusDeltaSum(a, b);\n            final double h = a / b;\n            final double c = h / (1.0 + h);\n            final double u = (-(a - 0.5)) * org.apache.commons.math3.util.FastMath.log(c);\n            final double v = b * org.apache.commons.math3.util.FastMath.log1p(h);\n            if (u <= v) {\n                return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - u) - v;\n            } else {\n                return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - v) - u;\n            }\n        } else if (a > 2.0) {\n            if (b > 1000.0) {\n                final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n                double prod = 1.0;\n                double ared = a;\n                for (int i = 0; i < n; i++) {\n                    ared -= 1.0;\n                    prod *= ared / (1.0 + (ared / b));\n                }\n                return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n            } else {\n                double prod1 = 1.0;\n                double ared = a;\n                while (ared > 2.0) {\n                    ared -= 1.0;\n                    final double h = ared / b;\n                    prod1 *= h / (1.0 + h);\n                } \n                if (b < 10.0) {\n                    double prod2 = 1.0;\n                    double bred = b;\n                    while (bred > 2.0) {\n                        bred -= 1.0;\n                        prod2 *= bred / (ared + bred);\n                    } \n                    return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n                } else {\n                    return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n                }\n            }\n        } else if (a >= 1.0) {\n            if (b > 2.0) {\n                if (b < 10.0) {\n                    double prod = 1.0;\n                    double bred = b;\n                    while (bred > 2.0) {\n                        bred -= 1.0;\n                        prod *= bred / (a + bred);\n                    } \n                    return org.apache.commons.math3.util.FastMath.log(prod) + (org.apache.commons.math3.special.Gamma.logGamma(a) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(a, bred)));\n                } else {\n                    return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n                }\n            } else {\n                return (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Beta.logGammaSum(a, b);\n            }\n        } else if (b >= 10.0) {\n            return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n        } else {\n            return org.apache.commons.math3.util.FastMath.log((org.apache.commons.math3.special.Gamma.gamma(a) * org.apache.commons.math3.special.Gamma.gamma(b)) / org.apache.commons.math3.special.Gamma.gamma(a + b));\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static double logGammaSum(final double a, final double b) throws org.apache.commons.math3.exception.OutOfRangeException {\n    if ((a < 1.0) || (a > 2.0)) {\n        throw new org.apache.commons.math3.exception.OutOfRangeException(a, 1.0, 2.0);\n    }\n    if ((b < 1.0) || (b > 2.0)) {\n        throw new org.apache.commons.math3.exception.OutOfRangeException(b, 1.0, 2.0);\n    }\n    final double x = (a - 1.0) + (b - 1.0);\n    if (x <= 0.5) {\n        return org.apache.commons.math3.special.Gamma.logGamma1p(1.0 + x);\n    } else if (x <= 1.5) {\n        return org.apache.commons.math3.special.Gamma.logGamma1p(x) + org.apache.commons.math3.util.FastMath.log1p(x);\n    } else {\n        return org.apache.commons.math3.special.Gamma.logGamma1p(x - 1.0) + org.apache.commons.math3.util.FastMath.log(x * (1.0 + x));\n    }\n}",
            "src_parent": "public class Beta {\n    private static final double DEFAULT_EPSILON = 1.0E-14;\n\n    private static final double HALF_LOG_TWO_PI = 0.9189385332046727;\n\n    private static final double[] DELTA = new double[]{ 0.08333333333333333, -2.777777777777778E-5, 7.936507936507937E-8, -5.952380952380953E-10, 8.417508417508329E-12, -1.917526917518546E-13, 6.410256405103255E-15, -2.955065141253382E-16, 1.7964371635940225E-17, -1.3922896466162779E-18, 1.338028550140209E-19, -1.542460098679661E-20, 1.9770199298095743E-21, -2.3406566479399704E-22, 1.713480149663986E-23 };\n\n    private Beta() {\n    }\n\n    public static double regularizedBeta(double x, double a, double b) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);\n    }\n\n    public static double regularizedBeta(double x, double a, double b, double epsilon) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);\n    }\n\n    public static double regularizedBeta(double x, double a, double b, int maxIterations) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, maxIterations);\n    }\n\n    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) {\n        double ret;\n        if ((((((java.lang.Double.isNaN(x) || java.lang.Double.isNaN(a)) || java.lang.Double.isNaN(b)) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {\n            ret = java.lang.Double.NaN;\n        } else if (x > ((a + 1.0) / ((a + b) + 2.0))) {\n            ret = 1.0 - org.apache.commons.math3.special.Beta.regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\n        } else {\n            org.apache.commons.math3.util.ContinuedFraction fraction = new org.apache.commons.math3.util.ContinuedFraction() {\n                @java.lang.Override\n                protected double getB(int n, double x) {\n                    double ret;\n                    double m;\n                    if ((n % 2) == 0) {\n                        m = n / 2.0;\n                        ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));\n                    } else {\n                        m = (n - 1.0) / 2.0;\n                        ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));\n                    }\n                    return ret;\n                }\n\n                @java.lang.Override\n                protected double getA(int n, double x) {\n                    return 1.0;\n                }\n            };\n            ret = (org.apache.commons.math3.util.FastMath.exp((((a * org.apache.commons.math3.util.FastMath.log(x)) + (b * org.apache.commons.math3.util.FastMath.log(1.0 - x))) - org.apache.commons.math3.util.FastMath.log(a)) - org.apache.commons.math3.special.Beta.logBeta(a, b, epsilon, maxIterations)) * 1.0) / fraction.evaluate(x, epsilon, maxIterations);\n        }\n        return ret;\n    }\n\n    @java.lang.Deprecated\n    public static double logBeta(double a, double b, double epsilon, int maxIterations) {\n        return org.apache.commons.math3.special.Beta.logBeta(a, b);\n    }\n\n    private static double logGammaSum(final double a, final double b) throws org.apache.commons.math3.exception.OutOfRangeException {\n        if ((a < 1.0) || (a > 2.0)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(a, 1.0, 2.0);\n        }\n        if ((b < 1.0) || (b > 2.0)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(b, 1.0, 2.0);\n        }\n        final double x = (a - 1.0) + (b - 1.0);\n        if (x <= 0.5) {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(1.0 + x);\n        } else if (x <= 1.5) {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(x) + org.apache.commons.math3.util.FastMath.log1p(x);\n        } else {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(x - 1.0) + org.apache.commons.math3.util.FastMath.log(x * (1.0 + x));\n        }\n    }\n\n    private static double logGammaMinusLogGammaSum(final double a, final double b) throws org.apache.commons.math3.exception.NumberIsTooSmallException {\n        if (a < 0.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(a, 0.0, true);\n        }\n        if (b < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(b, 10.0, true);\n        }\n        final double p;\n        final double q;\n        final double d;\n        final double w;\n        if (a <= b) {\n            d = b + (a - 0.5);\n            w = org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(a, b);\n        } else {\n            d = a + (b - 0.5);\n            w = org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(b, a);\n        }\n        final double u = d * org.apache.commons.math3.util.FastMath.log1p(a / b);\n        final double v = a * (org.apache.commons.math3.util.FastMath.log(b) - 1.0);\n        return u <= v ? (w - u) - v : (w - v) - u;\n    }\n\n    private static double deltaMinusDeltaSum(final double a, final double b) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException {\n        if ((a < 0) || (a > b)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(a, 0, b);\n        }\n        if (b < 10) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(b, 10, true);\n        }\n        final double h = a / b;\n        final double p = h / (1.0 + h);\n        final double q = 1.0 / (1.0 + h);\n        final double q2 = q * q;\n        final double[] s = new double[org.apache.commons.math3.special.Beta.DELTA.length];\n        s[0] = 1.0;\n        for (int i = 1; i < s.length; i++) {\n            s[i] = 1.0 + (q + (q2 * s[i - 1]));\n        }\n        final double sqrtT = 10.0 / b;\n        final double t = sqrtT * sqrtT;\n        double w = org.apache.commons.math3.special.Beta.DELTA[org.apache.commons.math3.special.Beta.DELTA.length - 1] * s[s.length - 1];\n        for (int i = org.apache.commons.math3.special.Beta.DELTA.length - 2; i >= 0; i--) {\n            w = (t * w) + (org.apache.commons.math3.special.Beta.DELTA[i] * s[i]);\n        }\n        return (w * p) / b;\n    }\n\n    private static double sumDeltaMinusDeltaSum(final double p, final double q) {\n        if (p < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(p, 10.0, true);\n        }\n        if (q < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(q, 10.0, true);\n        }\n        final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n        final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n        final double sqrtT = 10.0 / a;\n        final double t = sqrtT * sqrtT;\n        double z = org.apache.commons.math3.special.Beta.DELTA[org.apache.commons.math3.special.Beta.DELTA.length - 1];\n        for (int i = org.apache.commons.math3.special.Beta.DELTA.length - 2; i >= 0; i--) {\n            z = (t * z) + org.apache.commons.math3.special.Beta.DELTA[i];\n        }\n        return (z / a) + org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(a, b);\n    }\n\n    public static final double logBeta(final double p, final double q) {\n        if (((java.lang.Double.isNaN(p) || java.lang.Double.isNaN(q)) || (p <= 0.0)) || (q <= 0.0)) {\n            return java.lang.Double.NaN;\n        }\n        final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n        final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n        if (a >= 10.0) {\n            final double w = org.apache.commons.math3.special.Beta.sumDeltaMinusDeltaSum(a, b);\n            final double h = a / b;\n            final double c = h / (1.0 + h);\n            final double u = (-(a - 0.5)) * org.apache.commons.math3.util.FastMath.log(c);\n            final double v = b * org.apache.commons.math3.util.FastMath.log1p(h);\n            if (u <= v) {\n                return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - u) - v;\n            } else {\n                return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - v) - u;\n            }\n        } else if (a > 2.0) {\n            if (b > 1000.0) {\n                final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n                double prod = 1.0;\n                double ared = a;\n                for (int i = 0; i < n; i++) {\n                    ared -= 1.0;\n                    prod *= ared / (1.0 + (ared / b));\n                }\n                return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n            } else {\n                double prod1 = 1.0;\n                double ared = a;\n                while (ared > 2.0) {\n                    ared -= 1.0;\n                    final double h = ared / b;\n                    prod1 *= h / (1.0 + h);\n                } \n                if (b < 10.0) {\n                    double prod2 = 1.0;\n                    double bred = b;\n                    while (bred > 2.0) {\n                        bred -= 1.0;\n                        prod2 *= bred / (ared + bred);\n                    } \n                    return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n                } else {\n                    return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n                }\n            }\n        } else if (a >= 1.0) {\n            if (b > 2.0) {\n                if (b < 10.0) {\n                    double prod = 1.0;\n                    double bred = b;\n                    while (bred > 2.0) {\n                        bred -= 1.0;\n                        prod *= bred / (a + bred);\n                    } \n                    return org.apache.commons.math3.util.FastMath.log(prod) + (org.apache.commons.math3.special.Gamma.logGamma(a) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(a, bred)));\n                } else {\n                    return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n                }\n            } else {\n                return (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Beta.logGammaSum(a, b);\n            }\n        } else if (b >= 10.0) {\n            return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n        } else {\n            return org.apache.commons.math3.util.FastMath.log((org.apache.commons.math3.special.Gamma.gamma(a) * org.apache.commons.math3.special.Gamma.gamma(b)) / org.apache.commons.math3.special.Gamma.gamma(a + b));\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static double logGammaMinusLogGammaSum(final double a, final double b) throws org.apache.commons.math3.exception.NumberIsTooSmallException {\n    if (a < 0.0) {\n        throw new org.apache.commons.math3.exception.NumberIsTooSmallException(a, 0.0, true);\n    }\n    if (b < 10.0) {\n        throw new org.apache.commons.math3.exception.NumberIsTooSmallException(b, 10.0, true);\n    }\n    final double p;\n    final double q;\n    final double d;\n    final double w;\n    if (a <= b) {\n        d = b + (a - 0.5);\n        w = org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(a, b);\n    } else {\n        d = a + (b - 0.5);\n        w = org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(b, a);\n    }\n    final double u = d * org.apache.commons.math3.util.FastMath.log1p(a / b);\n    final double v = a * (org.apache.commons.math3.util.FastMath.log(b) - 1.0);\n    return u <= v ? (w - u) - v : (w - v) - u;\n}",
            "src_parent": "public class Beta {\n    private static final double DEFAULT_EPSILON = 1.0E-14;\n\n    private static final double HALF_LOG_TWO_PI = 0.9189385332046727;\n\n    private static final double[] DELTA = new double[]{ 0.08333333333333333, -2.777777777777778E-5, 7.936507936507937E-8, -5.952380952380953E-10, 8.417508417508329E-12, -1.917526917518546E-13, 6.410256405103255E-15, -2.955065141253382E-16, 1.7964371635940225E-17, -1.3922896466162779E-18, 1.338028550140209E-19, -1.542460098679661E-20, 1.9770199298095743E-21, -2.3406566479399704E-22, 1.713480149663986E-23 };\n\n    private Beta() {\n    }\n\n    public static double regularizedBeta(double x, double a, double b) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);\n    }\n\n    public static double regularizedBeta(double x, double a, double b, double epsilon) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);\n    }\n\n    public static double regularizedBeta(double x, double a, double b, int maxIterations) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, maxIterations);\n    }\n\n    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) {\n        double ret;\n        if ((((((java.lang.Double.isNaN(x) || java.lang.Double.isNaN(a)) || java.lang.Double.isNaN(b)) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {\n            ret = java.lang.Double.NaN;\n        } else if (x > ((a + 1.0) / ((a + b) + 2.0))) {\n            ret = 1.0 - org.apache.commons.math3.special.Beta.regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\n        } else {\n            org.apache.commons.math3.util.ContinuedFraction fraction = new org.apache.commons.math3.util.ContinuedFraction() {\n                @java.lang.Override\n                protected double getB(int n, double x) {\n                    double ret;\n                    double m;\n                    if ((n % 2) == 0) {\n                        m = n / 2.0;\n                        ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));\n                    } else {\n                        m = (n - 1.0) / 2.0;\n                        ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));\n                    }\n                    return ret;\n                }\n\n                @java.lang.Override\n                protected double getA(int n, double x) {\n                    return 1.0;\n                }\n            };\n            ret = (org.apache.commons.math3.util.FastMath.exp((((a * org.apache.commons.math3.util.FastMath.log(x)) + (b * org.apache.commons.math3.util.FastMath.log(1.0 - x))) - org.apache.commons.math3.util.FastMath.log(a)) - org.apache.commons.math3.special.Beta.logBeta(a, b, epsilon, maxIterations)) * 1.0) / fraction.evaluate(x, epsilon, maxIterations);\n        }\n        return ret;\n    }\n\n    @java.lang.Deprecated\n    public static double logBeta(double a, double b, double epsilon, int maxIterations) {\n        return org.apache.commons.math3.special.Beta.logBeta(a, b);\n    }\n\n    private static double logGammaSum(final double a, final double b) throws org.apache.commons.math3.exception.OutOfRangeException {\n        if ((a < 1.0) || (a > 2.0)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(a, 1.0, 2.0);\n        }\n        if ((b < 1.0) || (b > 2.0)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(b, 1.0, 2.0);\n        }\n        final double x = (a - 1.0) + (b - 1.0);\n        if (x <= 0.5) {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(1.0 + x);\n        } else if (x <= 1.5) {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(x) + org.apache.commons.math3.util.FastMath.log1p(x);\n        } else {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(x - 1.0) + org.apache.commons.math3.util.FastMath.log(x * (1.0 + x));\n        }\n    }\n\n    private static double logGammaMinusLogGammaSum(final double a, final double b) throws org.apache.commons.math3.exception.NumberIsTooSmallException {\n        if (a < 0.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(a, 0.0, true);\n        }\n        if (b < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(b, 10.0, true);\n        }\n        final double p;\n        final double q;\n        final double d;\n        final double w;\n        if (a <= b) {\n            d = b + (a - 0.5);\n            w = org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(a, b);\n        } else {\n            d = a + (b - 0.5);\n            w = org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(b, a);\n        }\n        final double u = d * org.apache.commons.math3.util.FastMath.log1p(a / b);\n        final double v = a * (org.apache.commons.math3.util.FastMath.log(b) - 1.0);\n        return u <= v ? (w - u) - v : (w - v) - u;\n    }\n\n    private static double deltaMinusDeltaSum(final double a, final double b) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException {\n        if ((a < 0) || (a > b)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(a, 0, b);\n        }\n        if (b < 10) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(b, 10, true);\n        }\n        final double h = a / b;\n        final double p = h / (1.0 + h);\n        final double q = 1.0 / (1.0 + h);\n        final double q2 = q * q;\n        final double[] s = new double[org.apache.commons.math3.special.Beta.DELTA.length];\n        s[0] = 1.0;\n        for (int i = 1; i < s.length; i++) {\n            s[i] = 1.0 + (q + (q2 * s[i - 1]));\n        }\n        final double sqrtT = 10.0 / b;\n        final double t = sqrtT * sqrtT;\n        double w = org.apache.commons.math3.special.Beta.DELTA[org.apache.commons.math3.special.Beta.DELTA.length - 1] * s[s.length - 1];\n        for (int i = org.apache.commons.math3.special.Beta.DELTA.length - 2; i >= 0; i--) {\n            w = (t * w) + (org.apache.commons.math3.special.Beta.DELTA[i] * s[i]);\n        }\n        return (w * p) / b;\n    }\n\n    private static double sumDeltaMinusDeltaSum(final double p, final double q) {\n        if (p < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(p, 10.0, true);\n        }\n        if (q < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(q, 10.0, true);\n        }\n        final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n        final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n        final double sqrtT = 10.0 / a;\n        final double t = sqrtT * sqrtT;\n        double z = org.apache.commons.math3.special.Beta.DELTA[org.apache.commons.math3.special.Beta.DELTA.length - 1];\n        for (int i = org.apache.commons.math3.special.Beta.DELTA.length - 2; i >= 0; i--) {\n            z = (t * z) + org.apache.commons.math3.special.Beta.DELTA[i];\n        }\n        return (z / a) + org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(a, b);\n    }\n\n    public static final double logBeta(final double p, final double q) {\n        if (((java.lang.Double.isNaN(p) || java.lang.Double.isNaN(q)) || (p <= 0.0)) || (q <= 0.0)) {\n            return java.lang.Double.NaN;\n        }\n        final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n        final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n        if (a >= 10.0) {\n            final double w = org.apache.commons.math3.special.Beta.sumDeltaMinusDeltaSum(a, b);\n            final double h = a / b;\n            final double c = h / (1.0 + h);\n            final double u = (-(a - 0.5)) * org.apache.commons.math3.util.FastMath.log(c);\n            final double v = b * org.apache.commons.math3.util.FastMath.log1p(h);\n            if (u <= v) {\n                return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - u) - v;\n            } else {\n                return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - v) - u;\n            }\n        } else if (a > 2.0) {\n            if (b > 1000.0) {\n                final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n                double prod = 1.0;\n                double ared = a;\n                for (int i = 0; i < n; i++) {\n                    ared -= 1.0;\n                    prod *= ared / (1.0 + (ared / b));\n                }\n                return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n            } else {\n                double prod1 = 1.0;\n                double ared = a;\n                while (ared > 2.0) {\n                    ared -= 1.0;\n                    final double h = ared / b;\n                    prod1 *= h / (1.0 + h);\n                } \n                if (b < 10.0) {\n                    double prod2 = 1.0;\n                    double bred = b;\n                    while (bred > 2.0) {\n                        bred -= 1.0;\n                        prod2 *= bred / (ared + bred);\n                    } \n                    return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n                } else {\n                    return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n                }\n            }\n        } else if (a >= 1.0) {\n            if (b > 2.0) {\n                if (b < 10.0) {\n                    double prod = 1.0;\n                    double bred = b;\n                    while (bred > 2.0) {\n                        bred -= 1.0;\n                        prod *= bred / (a + bred);\n                    } \n                    return org.apache.commons.math3.util.FastMath.log(prod) + (org.apache.commons.math3.special.Gamma.logGamma(a) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(a, bred)));\n                } else {\n                    return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n                }\n            } else {\n                return (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Beta.logGammaSum(a, b);\n            }\n        } else if (b >= 10.0) {\n            return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n        } else {\n            return org.apache.commons.math3.util.FastMath.log((org.apache.commons.math3.special.Gamma.gamma(a) * org.apache.commons.math3.special.Gamma.gamma(b)) / org.apache.commons.math3.special.Gamma.gamma(a + b));\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static double sumDeltaMinusDeltaSum(final double p, final double q) {\n    if (p < 10.0) {\n        throw new org.apache.commons.math3.exception.NumberIsTooSmallException(p, 10.0, true);\n    }\n    if (q < 10.0) {\n        throw new org.apache.commons.math3.exception.NumberIsTooSmallException(q, 10.0, true);\n    }\n    final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n    final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n    final double sqrtT = 10.0 / a;\n    final double t = sqrtT * sqrtT;\n    double z = org.apache.commons.math3.special.Beta.DELTA[org.apache.commons.math3.special.Beta.DELTA.length - 1];\n    for (int i = org.apache.commons.math3.special.Beta.DELTA.length - 2; i >= 0; i--) {\n        z = (t * z) + org.apache.commons.math3.special.Beta.DELTA[i];\n    }\n    return (z / a) + org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(a, b);\n}",
            "src_parent": "public class Beta {\n    private static final double DEFAULT_EPSILON = 1.0E-14;\n\n    private static final double HALF_LOG_TWO_PI = 0.9189385332046727;\n\n    private static final double[] DELTA = new double[]{ 0.08333333333333333, -2.777777777777778E-5, 7.936507936507937E-8, -5.952380952380953E-10, 8.417508417508329E-12, -1.917526917518546E-13, 6.410256405103255E-15, -2.955065141253382E-16, 1.7964371635940225E-17, -1.3922896466162779E-18, 1.338028550140209E-19, -1.542460098679661E-20, 1.9770199298095743E-21, -2.3406566479399704E-22, 1.713480149663986E-23 };\n\n    private Beta() {\n    }\n\n    public static double regularizedBeta(double x, double a, double b) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);\n    }\n\n    public static double regularizedBeta(double x, double a, double b, double epsilon) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);\n    }\n\n    public static double regularizedBeta(double x, double a, double b, int maxIterations) {\n        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, maxIterations);\n    }\n\n    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) {\n        double ret;\n        if ((((((java.lang.Double.isNaN(x) || java.lang.Double.isNaN(a)) || java.lang.Double.isNaN(b)) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {\n            ret = java.lang.Double.NaN;\n        } else if (x > ((a + 1.0) / ((a + b) + 2.0))) {\n            ret = 1.0 - org.apache.commons.math3.special.Beta.regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\n        } else {\n            org.apache.commons.math3.util.ContinuedFraction fraction = new org.apache.commons.math3.util.ContinuedFraction() {\n                @java.lang.Override\n                protected double getB(int n, double x) {\n                    double ret;\n                    double m;\n                    if ((n % 2) == 0) {\n                        m = n / 2.0;\n                        ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));\n                    } else {\n                        m = (n - 1.0) / 2.0;\n                        ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));\n                    }\n                    return ret;\n                }\n\n                @java.lang.Override\n                protected double getA(int n, double x) {\n                    return 1.0;\n                }\n            };\n            ret = (org.apache.commons.math3.util.FastMath.exp((((a * org.apache.commons.math3.util.FastMath.log(x)) + (b * org.apache.commons.math3.util.FastMath.log(1.0 - x))) - org.apache.commons.math3.util.FastMath.log(a)) - org.apache.commons.math3.special.Beta.logBeta(a, b, epsilon, maxIterations)) * 1.0) / fraction.evaluate(x, epsilon, maxIterations);\n        }\n        return ret;\n    }\n\n    @java.lang.Deprecated\n    public static double logBeta(double a, double b, double epsilon, int maxIterations) {\n        return org.apache.commons.math3.special.Beta.logBeta(a, b);\n    }\n\n    private static double logGammaSum(final double a, final double b) throws org.apache.commons.math3.exception.OutOfRangeException {\n        if ((a < 1.0) || (a > 2.0)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(a, 1.0, 2.0);\n        }\n        if ((b < 1.0) || (b > 2.0)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(b, 1.0, 2.0);\n        }\n        final double x = (a - 1.0) + (b - 1.0);\n        if (x <= 0.5) {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(1.0 + x);\n        } else if (x <= 1.5) {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(x) + org.apache.commons.math3.util.FastMath.log1p(x);\n        } else {\n            return org.apache.commons.math3.special.Gamma.logGamma1p(x - 1.0) + org.apache.commons.math3.util.FastMath.log(x * (1.0 + x));\n        }\n    }\n\n    private static double logGammaMinusLogGammaSum(final double a, final double b) throws org.apache.commons.math3.exception.NumberIsTooSmallException {\n        if (a < 0.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(a, 0.0, true);\n        }\n        if (b < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(b, 10.0, true);\n        }\n        final double p;\n        final double q;\n        final double d;\n        final double w;\n        if (a <= b) {\n            d = b + (a - 0.5);\n            w = org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(a, b);\n        } else {\n            d = a + (b - 0.5);\n            w = org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(b, a);\n        }\n        final double u = d * org.apache.commons.math3.util.FastMath.log1p(a / b);\n        final double v = a * (org.apache.commons.math3.util.FastMath.log(b) - 1.0);\n        return u <= v ? (w - u) - v : (w - v) - u;\n    }\n\n    private static double deltaMinusDeltaSum(final double a, final double b) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException {\n        if ((a < 0) || (a > b)) {\n            throw new org.apache.commons.math3.exception.OutOfRangeException(a, 0, b);\n        }\n        if (b < 10) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(b, 10, true);\n        }\n        final double h = a / b;\n        final double p = h / (1.0 + h);\n        final double q = 1.0 / (1.0 + h);\n        final double q2 = q * q;\n        final double[] s = new double[org.apache.commons.math3.special.Beta.DELTA.length];\n        s[0] = 1.0;\n        for (int i = 1; i < s.length; i++) {\n            s[i] = 1.0 + (q + (q2 * s[i - 1]));\n        }\n        final double sqrtT = 10.0 / b;\n        final double t = sqrtT * sqrtT;\n        double w = org.apache.commons.math3.special.Beta.DELTA[org.apache.commons.math3.special.Beta.DELTA.length - 1] * s[s.length - 1];\n        for (int i = org.apache.commons.math3.special.Beta.DELTA.length - 2; i >= 0; i--) {\n            w = (t * w) + (org.apache.commons.math3.special.Beta.DELTA[i] * s[i]);\n        }\n        return (w * p) / b;\n    }\n\n    private static double sumDeltaMinusDeltaSum(final double p, final double q) {\n        if (p < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(p, 10.0, true);\n        }\n        if (q < 10.0) {\n            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(q, 10.0, true);\n        }\n        final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n        final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n        final double sqrtT = 10.0 / a;\n        final double t = sqrtT * sqrtT;\n        double z = org.apache.commons.math3.special.Beta.DELTA[org.apache.commons.math3.special.Beta.DELTA.length - 1];\n        for (int i = org.apache.commons.math3.special.Beta.DELTA.length - 2; i >= 0; i--) {\n            z = (t * z) + org.apache.commons.math3.special.Beta.DELTA[i];\n        }\n        return (z / a) + org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(a, b);\n    }\n\n    public static final double logBeta(final double p, final double q) {\n        if (((java.lang.Double.isNaN(p) || java.lang.Double.isNaN(q)) || (p <= 0.0)) || (q <= 0.0)) {\n            return java.lang.Double.NaN;\n        }\n        final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n        final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n        if (a >= 10.0) {\n            final double w = org.apache.commons.math3.special.Beta.sumDeltaMinusDeltaSum(a, b);\n            final double h = a / b;\n            final double c = h / (1.0 + h);\n            final double u = (-(a - 0.5)) * org.apache.commons.math3.util.FastMath.log(c);\n            final double v = b * org.apache.commons.math3.util.FastMath.log1p(h);\n            if (u <= v) {\n                return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - u) - v;\n            } else {\n                return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - v) - u;\n            }\n        } else if (a > 2.0) {\n            if (b > 1000.0) {\n                final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n                double prod = 1.0;\n                double ared = a;\n                for (int i = 0; i < n; i++) {\n                    ared -= 1.0;\n                    prod *= ared / (1.0 + (ared / b));\n                }\n                return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n            } else {\n                double prod1 = 1.0;\n                double ared = a;\n                while (ared > 2.0) {\n                    ared -= 1.0;\n                    final double h = ared / b;\n                    prod1 *= h / (1.0 + h);\n                } \n                if (b < 10.0) {\n                    double prod2 = 1.0;\n                    double bred = b;\n                    while (bred > 2.0) {\n                        bred -= 1.0;\n                        prod2 *= bred / (ared + bred);\n                    } \n                    return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n                } else {\n                    return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n                }\n            }\n        } else if (a >= 1.0) {\n            if (b > 2.0) {\n                if (b < 10.0) {\n                    double prod = 1.0;\n                    double bred = b;\n                    while (bred > 2.0) {\n                        bred -= 1.0;\n                        prod *= bred / (a + bred);\n                    } \n                    return org.apache.commons.math3.util.FastMath.log(prod) + (org.apache.commons.math3.special.Gamma.logGamma(a) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(a, bred)));\n                } else {\n                    return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n                }\n            } else {\n                return (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Beta.logGammaSum(a, b);\n            }\n        } else if (b >= 10.0) {\n            return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n        } else {\n            return org.apache.commons.math3.util.FastMath.log((org.apache.commons.math3.special.Gamma.gamma(a) * org.apache.commons.math3.special.Gamma.gamma(b)) / org.apache.commons.math3.special.Gamma.gamma(a + b));\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "VE: Modifiers_Method",
            "src_parent": "public static final double logBeta(final double p, final double q) {\n    if (((java.lang.Double.isNaN(p) || java.lang.Double.isNaN(q)) || (p <= 0.0)) || (q <= 0.0)) {\n        return java.lang.Double.NaN;\n    }\n    final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n    final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n    if (a >= 10.0) {\n        final double w = org.apache.commons.math3.special.Beta.sumDeltaMinusDeltaSum(a, b);\n        final double h = a / b;\n        final double c = h / (1.0 + h);\n        final double u = (-(a - 0.5)) * org.apache.commons.math3.util.FastMath.log(c);\n        final double v = b * org.apache.commons.math3.util.FastMath.log1p(h);\n        if (u <= v) {\n            return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - u) - v;\n        } else {\n            return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - v) - u;\n        }\n    } else if (a > 2.0) {\n        if (b > 1000.0) {\n            final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n            double prod = 1.0;\n            double ared = a;\n            for (int i = 0; i < n; i++) {\n                ared -= 1.0;\n                prod *= ared / (1.0 + (ared / b));\n            }\n            return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n        } else {\n            double prod1 = 1.0;\n            double ared = a;\n            while (ared > 2.0) {\n                ared -= 1.0;\n                final double h = ared / b;\n                prod1 *= h / (1.0 + h);\n            } \n            if (b < 10.0) {\n                double prod2 = 1.0;\n                double bred = b;\n                while (bred > 2.0) {\n                    bred -= 1.0;\n                    prod2 *= bred / (ared + bred);\n                } \n                return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n            } else {\n                return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n            }\n        }\n    } else if (a >= 1.0) {\n        if (b > 2.0) {\n            if (b < 10.0) {\n                double prod = 1.0;\n                double bred = b;\n                while (bred > 2.0) {\n                    bred -= 1.0;\n                    prod *= bred / (a + bred);\n                } \n                return org.apache.commons.math3.util.FastMath.log(prod) + (org.apache.commons.math3.special.Gamma.logGamma(a) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(a, bred)));\n            } else {\n                return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n            }\n        } else {\n            return (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Beta.logGammaSum(a, b);\n        }\n    } else if (b >= 10.0) {\n        return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n    } else {\n        return org.apache.commons.math3.util.FastMath.log((org.apache.commons.math3.special.Gamma.gamma(a) * org.apache.commons.math3.special.Gamma.gamma(b)) / org.apache.commons.math3.special.Gamma.gamma(a + b));\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "final double p",
            "src_parent": "public static final double logBeta(final double p, final double q) {\n    if (((java.lang.Double.isNaN(p) || java.lang.Double.isNaN(q)) || (p <= 0.0)) || (q <= 0.0)) {\n        return java.lang.Double.NaN;\n    }\n    final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n    final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n    if (a >= 10.0) {\n        final double w = org.apache.commons.math3.special.Beta.sumDeltaMinusDeltaSum(a, b);\n        final double h = a / b;\n        final double c = h / (1.0 + h);\n        final double u = (-(a - 0.5)) * org.apache.commons.math3.util.FastMath.log(c);\n        final double v = b * org.apache.commons.math3.util.FastMath.log1p(h);\n        if (u <= v) {\n            return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - u) - v;\n        } else {\n            return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - v) - u;\n        }\n    } else if (a > 2.0) {\n        if (b > 1000.0) {\n            final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n            double prod = 1.0;\n            double ared = a;\n            for (int i = 0; i < n; i++) {\n                ared -= 1.0;\n                prod *= ared / (1.0 + (ared / b));\n            }\n            return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n        } else {\n            double prod1 = 1.0;\n            double ared = a;\n            while (ared > 2.0) {\n                ared -= 1.0;\n                final double h = ared / b;\n                prod1 *= h / (1.0 + h);\n            } \n            if (b < 10.0) {\n                double prod2 = 1.0;\n                double bred = b;\n                while (bred > 2.0) {\n                    bred -= 1.0;\n                    prod2 *= bred / (ared + bred);\n                } \n                return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n            } else {\n                return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n            }\n        }\n    } else if (a >= 1.0) {\n        if (b > 2.0) {\n            if (b < 10.0) {\n                double prod = 1.0;\n                double bred = b;\n                while (bred > 2.0) {\n                    bred -= 1.0;\n                    prod *= bred / (a + bred);\n                } \n                return org.apache.commons.math3.util.FastMath.log(prod) + (org.apache.commons.math3.special.Gamma.logGamma(a) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(a, bred)));\n            } else {\n                return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n            }\n        } else {\n            return (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Beta.logGammaSum(a, b);\n        }\n    } else if (b >= 10.0) {\n        return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n    } else {\n        return org.apache.commons.math3.util.FastMath.log((org.apache.commons.math3.special.Gamma.gamma(a) * org.apache.commons.math3.special.Gamma.gamma(b)) / org.apache.commons.math3.special.Gamma.gamma(a + b));\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "final double q",
            "src_parent": "public static final double logBeta(final double p, final double q) {\n    if (((java.lang.Double.isNaN(p) || java.lang.Double.isNaN(q)) || (p <= 0.0)) || (q <= 0.0)) {\n        return java.lang.Double.NaN;\n    }\n    final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n    final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n    if (a >= 10.0) {\n        final double w = org.apache.commons.math3.special.Beta.sumDeltaMinusDeltaSum(a, b);\n        final double h = a / b;\n        final double c = h / (1.0 + h);\n        final double u = (-(a - 0.5)) * org.apache.commons.math3.util.FastMath.log(c);\n        final double v = b * org.apache.commons.math3.util.FastMath.log1p(h);\n        if (u <= v) {\n            return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - u) - v;\n        } else {\n            return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - v) - u;\n        }\n    } else if (a > 2.0) {\n        if (b > 1000.0) {\n            final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n            double prod = 1.0;\n            double ared = a;\n            for (int i = 0; i < n; i++) {\n                ared -= 1.0;\n                prod *= ared / (1.0 + (ared / b));\n            }\n            return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n        } else {\n            double prod1 = 1.0;\n            double ared = a;\n            while (ared > 2.0) {\n                ared -= 1.0;\n                final double h = ared / b;\n                prod1 *= h / (1.0 + h);\n            } \n            if (b < 10.0) {\n                double prod2 = 1.0;\n                double bred = b;\n                while (bred > 2.0) {\n                    bred -= 1.0;\n                    prod2 *= bred / (ared + bred);\n                } \n                return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n            } else {\n                return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n            }\n        }\n    } else if (a >= 1.0) {\n        if (b > 2.0) {\n            if (b < 10.0) {\n                double prod = 1.0;\n                double bred = b;\n                while (bred > 2.0) {\n                    bred -= 1.0;\n                    prod *= bred / (a + bred);\n                } \n                return org.apache.commons.math3.util.FastMath.log(prod) + (org.apache.commons.math3.special.Gamma.logGamma(a) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(a, bred)));\n            } else {\n                return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n            }\n        } else {\n            return (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Beta.logGammaSum(a, b);\n        }\n    } else if (b >= 10.0) {\n        return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n    } else {\n        return org.apache.commons.math3.util.FastMath.log((org.apache.commons.math3.special.Gamma.gamma(a) * org.apache.commons.math3.special.Gamma.gamma(b)) / org.apache.commons.math3.special.Gamma.gamma(a + b));\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (((java.lang.Double.isNaN(p) || java.lang.Double.isNaN(q)) || (p <= 0.0)) || (q <= 0.0)) {\n    return java.lang.Double.NaN;\n}",
            "src_parent": "{\n    if (((java.lang.Double.isNaN(p) || java.lang.Double.isNaN(q)) || (p <= 0.0)) || (q <= 0.0)) {\n        return java.lang.Double.NaN;\n    }\n    final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n    final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n    if (a >= 10.0) {\n        final double w = org.apache.commons.math3.special.Beta.sumDeltaMinusDeltaSum(a, b);\n        final double h = a / b;\n        final double c = h / (1.0 + h);\n        final double u = (-(a - 0.5)) * org.apache.commons.math3.util.FastMath.log(c);\n        final double v = b * org.apache.commons.math3.util.FastMath.log1p(h);\n        if (u <= v) {\n            return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - u) - v;\n        } else {\n            return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - v) - u;\n        }\n    } else if (a > 2.0) {\n        if (b > 1000.0) {\n            final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n            double prod = 1.0;\n            double ared = a;\n            for (int i = 0; i < n; i++) {\n                ared -= 1.0;\n                prod *= ared / (1.0 + (ared / b));\n            }\n            return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n        } else {\n            double prod1 = 1.0;\n            double ared = a;\n            while (ared > 2.0) {\n                ared -= 1.0;\n                final double h = ared / b;\n                prod1 *= h / (1.0 + h);\n            } \n            if (b < 10.0) {\n                double prod2 = 1.0;\n                double bred = b;\n                while (bred > 2.0) {\n                    bred -= 1.0;\n                    prod2 *= bred / (ared + bred);\n                } \n                return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n            } else {\n                return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n            }\n        }\n    } else if (a >= 1.0) {\n        if (b > 2.0) {\n            if (b < 10.0) {\n                double prod = 1.0;\n                double bred = b;\n                while (bred > 2.0) {\n                    bred -= 1.0;\n                    prod *= bred / (a + bred);\n                } \n                return org.apache.commons.math3.util.FastMath.log(prod) + (org.apache.commons.math3.special.Gamma.logGamma(a) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(a, bred)));\n            } else {\n                return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n            }\n        } else {\n            return (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Beta.logGammaSum(a, b);\n        }\n    } else if (b >= 10.0) {\n        return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n    } else {\n        return org.apache.commons.math3.util.FastMath.log((org.apache.commons.math3.special.Gamma.gamma(a) * org.apache.commons.math3.special.Gamma.gamma(b)) / org.apache.commons.math3.special.Gamma.gamma(a + b));\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "final double a = org.apache.commons.math3.util.FastMath.min(p, q)",
            "src_parent": "{\n    if (((java.lang.Double.isNaN(p) || java.lang.Double.isNaN(q)) || (p <= 0.0)) || (q <= 0.0)) {\n        return java.lang.Double.NaN;\n    }\n    final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n    final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n    if (a >= 10.0) {\n        final double w = org.apache.commons.math3.special.Beta.sumDeltaMinusDeltaSum(a, b);\n        final double h = a / b;\n        final double c = h / (1.0 + h);\n        final double u = (-(a - 0.5)) * org.apache.commons.math3.util.FastMath.log(c);\n        final double v = b * org.apache.commons.math3.util.FastMath.log1p(h);\n        if (u <= v) {\n            return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - u) - v;\n        } else {\n            return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - v) - u;\n        }\n    } else if (a > 2.0) {\n        if (b > 1000.0) {\n            final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n            double prod = 1.0;\n            double ared = a;\n            for (int i = 0; i < n; i++) {\n                ared -= 1.0;\n                prod *= ared / (1.0 + (ared / b));\n            }\n            return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n        } else {\n            double prod1 = 1.0;\n            double ared = a;\n            while (ared > 2.0) {\n                ared -= 1.0;\n                final double h = ared / b;\n                prod1 *= h / (1.0 + h);\n            } \n            if (b < 10.0) {\n                double prod2 = 1.0;\n                double bred = b;\n                while (bred > 2.0) {\n                    bred -= 1.0;\n                    prod2 *= bred / (ared + bred);\n                } \n                return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n            } else {\n                return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n            }\n        }\n    } else if (a >= 1.0) {\n        if (b > 2.0) {\n            if (b < 10.0) {\n                double prod = 1.0;\n                double bred = b;\n                while (bred > 2.0) {\n                    bred -= 1.0;\n                    prod *= bred / (a + bred);\n                } \n                return org.apache.commons.math3.util.FastMath.log(prod) + (org.apache.commons.math3.special.Gamma.logGamma(a) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(a, bred)));\n            } else {\n                return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n            }\n        } else {\n            return (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Beta.logGammaSum(a, b);\n        }\n    } else if (b >= 10.0) {\n        return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n    } else {\n        return org.apache.commons.math3.util.FastMath.log((org.apache.commons.math3.special.Gamma.gamma(a) * org.apache.commons.math3.special.Gamma.gamma(b)) / org.apache.commons.math3.special.Gamma.gamma(a + b));\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "final double b = org.apache.commons.math3.util.FastMath.max(p, q)",
            "src_parent": "{\n    if (((java.lang.Double.isNaN(p) || java.lang.Double.isNaN(q)) || (p <= 0.0)) || (q <= 0.0)) {\n        return java.lang.Double.NaN;\n    }\n    final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n    final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n    if (a >= 10.0) {\n        final double w = org.apache.commons.math3.special.Beta.sumDeltaMinusDeltaSum(a, b);\n        final double h = a / b;\n        final double c = h / (1.0 + h);\n        final double u = (-(a - 0.5)) * org.apache.commons.math3.util.FastMath.log(c);\n        final double v = b * org.apache.commons.math3.util.FastMath.log1p(h);\n        if (u <= v) {\n            return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - u) - v;\n        } else {\n            return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - v) - u;\n        }\n    } else if (a > 2.0) {\n        if (b > 1000.0) {\n            final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n            double prod = 1.0;\n            double ared = a;\n            for (int i = 0; i < n; i++) {\n                ared -= 1.0;\n                prod *= ared / (1.0 + (ared / b));\n            }\n            return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n        } else {\n            double prod1 = 1.0;\n            double ared = a;\n            while (ared > 2.0) {\n                ared -= 1.0;\n                final double h = ared / b;\n                prod1 *= h / (1.0 + h);\n            } \n            if (b < 10.0) {\n                double prod2 = 1.0;\n                double bred = b;\n                while (bred > 2.0) {\n                    bred -= 1.0;\n                    prod2 *= bred / (ared + bred);\n                } \n                return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n            } else {\n                return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n            }\n        }\n    } else if (a >= 1.0) {\n        if (b > 2.0) {\n            if (b < 10.0) {\n                double prod = 1.0;\n                double bred = b;\n                while (bred > 2.0) {\n                    bred -= 1.0;\n                    prod *= bred / (a + bred);\n                } \n                return org.apache.commons.math3.util.FastMath.log(prod) + (org.apache.commons.math3.special.Gamma.logGamma(a) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(a, bred)));\n            } else {\n                return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n            }\n        } else {\n            return (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Beta.logGammaSum(a, b);\n        }\n    } else if (b >= 10.0) {\n        return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n    } else {\n        return org.apache.commons.math3.util.FastMath.log((org.apache.commons.math3.special.Gamma.gamma(a) * org.apache.commons.math3.special.Gamma.gamma(b)) / org.apache.commons.math3.special.Gamma.gamma(a + b));\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (a >= 10.0) {\n    final double w = org.apache.commons.math3.special.Beta.sumDeltaMinusDeltaSum(a, b);\n    final double h = a / b;\n    final double c = h / (1.0 + h);\n    final double u = (-(a - 0.5)) * org.apache.commons.math3.util.FastMath.log(c);\n    final double v = b * org.apache.commons.math3.util.FastMath.log1p(h);\n    if (u <= v) {\n        return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - u) - v;\n    } else {\n        return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - v) - u;\n    }\n} else if (a > 2.0) {\n    if (b > 1000.0) {\n        final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n        double prod = 1.0;\n        double ared = a;\n        for (int i = 0; i < n; i++) {\n            ared -= 1.0;\n            prod *= ared / (1.0 + (ared / b));\n        }\n        return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n    } else {\n        double prod1 = 1.0;\n        double ared = a;\n        while (ared > 2.0) {\n            ared -= 1.0;\n            final double h = ared / b;\n            prod1 *= h / (1.0 + h);\n        } \n        if (b < 10.0) {\n            double prod2 = 1.0;\n            double bred = b;\n            while (bred > 2.0) {\n                bred -= 1.0;\n                prod2 *= bred / (ared + bred);\n            } \n            return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n        } else {\n            return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n        }\n    }\n} else if (a >= 1.0) {\n    if (b > 2.0) {\n        if (b < 10.0) {\n            double prod = 1.0;\n            double bred = b;\n            while (bred > 2.0) {\n                bred -= 1.0;\n                prod *= bred / (a + bred);\n            } \n            return org.apache.commons.math3.util.FastMath.log(prod) + (org.apache.commons.math3.special.Gamma.logGamma(a) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(a, bred)));\n        } else {\n            return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n        }\n    } else {\n        return (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Beta.logGammaSum(a, b);\n    }\n} else if (b >= 10.0) {\n    return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n} else {\n    return org.apache.commons.math3.util.FastMath.log((org.apache.commons.math3.special.Gamma.gamma(a) * org.apache.commons.math3.special.Gamma.gamma(b)) / org.apache.commons.math3.special.Gamma.gamma(a + b));\n}",
            "src_parent": "{\n    if (((java.lang.Double.isNaN(p) || java.lang.Double.isNaN(q)) || (p <= 0.0)) || (q <= 0.0)) {\n        return java.lang.Double.NaN;\n    }\n    final double a = org.apache.commons.math3.util.FastMath.min(p, q);\n    final double b = org.apache.commons.math3.util.FastMath.max(p, q);\n    if (a >= 10.0) {\n        final double w = org.apache.commons.math3.special.Beta.sumDeltaMinusDeltaSum(a, b);\n        final double h = a / b;\n        final double c = h / (1.0 + h);\n        final double u = (-(a - 0.5)) * org.apache.commons.math3.util.FastMath.log(c);\n        final double v = b * org.apache.commons.math3.util.FastMath.log1p(h);\n        if (u <= v) {\n            return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - u) - v;\n        } else {\n            return (((((-0.5) * org.apache.commons.math3.util.FastMath.log(b)) + org.apache.commons.math3.special.Beta.HALF_LOG_TWO_PI) + w) - v) - u;\n        }\n    } else if (a > 2.0) {\n        if (b > 1000.0) {\n            final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n            double prod = 1.0;\n            double ared = a;\n            for (int i = 0; i < n; i++) {\n                ared -= 1.0;\n                prod *= ared / (1.0 + (ared / b));\n            }\n            return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n        } else {\n            double prod1 = 1.0;\n            double ared = a;\n            while (ared > 2.0) {\n                ared -= 1.0;\n                final double h = ared / b;\n                prod1 *= h / (1.0 + h);\n            } \n            if (b < 10.0) {\n                double prod2 = 1.0;\n                double bred = b;\n                while (bred > 2.0) {\n                    bred -= 1.0;\n                    prod2 *= bred / (ared + bred);\n                } \n                return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n            } else {\n                return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n            }\n        }\n    } else if (a >= 1.0) {\n        if (b > 2.0) {\n            if (b < 10.0) {\n                double prod = 1.0;\n                double bred = b;\n                while (bred > 2.0) {\n                    bred -= 1.0;\n                    prod *= bred / (a + bred);\n                } \n                return org.apache.commons.math3.util.FastMath.log(prod) + (org.apache.commons.math3.special.Gamma.logGamma(a) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(a, bred)));\n            } else {\n                return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n            }\n        } else {\n            return (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Beta.logGammaSum(a, b);\n        }\n    } else if (b >= 10.0) {\n        return org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(a, b);\n    } else {\n        return org.apache.commons.math3.util.FastMath.log((org.apache.commons.math3.special.Gamma.gamma(a) * org.apache.commons.math3.special.Gamma.gamma(b)) / org.apache.commons.math3.special.Gamma.gamma(a + b));\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "VE: Modifiers_Parameter",
            "src_parent": "final double a",
            "src_parent_type": "Parameter",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "VE: Modifiers_Parameter",
            "src_parent": "final double b",
            "src_parent_type": "Parameter",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)))",
            "src_parent": "{\n    final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n    double prod = 1.0;\n    double ared = a;\n    for (int i = 0; i < n; i++) {\n        ared -= 1.0;\n        prod *= ared / (1.0 + (ared / b));\n    }\n    return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "double prod = 1.0",
            "src_parent": "{\n    final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n    double prod = 1.0;\n    double ared = a;\n    for (int i = 0; i < n; i++) {\n        ared -= 1.0;\n        prod *= ared / (1.0 + (ared / b));\n    }\n    return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "double ared = a",
            "src_parent": "{\n    final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n    double prod = 1.0;\n    double ared = a;\n    for (int i = 0; i < n; i++) {\n        ared -= 1.0;\n        prod *= ared / (1.0 + (ared / b));\n    }\n    return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "for (int i = 0; i < n; i++) {\n    ared -= 1.0;\n    prod *= ared / (1.0 + (ared / b));\n}",
            "src_parent": "{\n    final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n    double prod = 1.0;\n    double ared = a;\n    for (int i = 0; i < n; i++) {\n        ared -= 1.0;\n        prod *= ared / (1.0 + (ared / b));\n    }\n    return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n}",
            "src_parent_type": "Block",
            "src_type": "For"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b))",
            "src_parent": "{\n    final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n    double prod = 1.0;\n    double ared = a;\n    for (int i = 0; i < n; i++) {\n        ared -= 1.0;\n        prod *= ared / (1.0 + (ared / b));\n    }\n    return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "double prod1 = 1.0",
            "src_parent": "{\n    double prod1 = 1.0;\n    double ared = a;\n    while (ared > 2.0) {\n        ared -= 1.0;\n        final double h = ared / b;\n        prod1 *= h / (1.0 + h);\n    } \n    if (b < 10.0) {\n        double prod2 = 1.0;\n        double bred = b;\n        while (bred > 2.0) {\n            bred -= 1.0;\n            prod2 *= bred / (ared + bred);\n        } \n        return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n    } else {\n        return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "double ared = a",
            "src_parent": "{\n    double prod1 = 1.0;\n    double ared = a;\n    while (ared > 2.0) {\n        ared -= 1.0;\n        final double h = ared / b;\n        prod1 *= h / (1.0 + h);\n    } \n    if (b < 10.0) {\n        double prod2 = 1.0;\n        double bred = b;\n        while (bred > 2.0) {\n            bred -= 1.0;\n            prod2 *= bred / (ared + bred);\n        } \n        return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n    } else {\n        return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "while (ared > 2.0) {\n    ared -= 1.0;\n    final double h = ared / b;\n    prod1 *= h / (1.0 + h);\n} ",
            "src_parent": "{\n    double prod1 = 1.0;\n    double ared = a;\n    while (ared > 2.0) {\n        ared -= 1.0;\n        final double h = ared / b;\n        prod1 *= h / (1.0 + h);\n    } \n    if (b < 10.0) {\n        double prod2 = 1.0;\n        double bred = b;\n        while (bred > 2.0) {\n            bred -= 1.0;\n            prod2 *= bred / (ared + bred);\n        } \n        return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n    } else {\n        return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "While"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (b < 10.0) {\n    double prod2 = 1.0;\n    double bred = b;\n    while (bred > 2.0) {\n        bred -= 1.0;\n        prod2 *= bred / (ared + bred);\n    } \n    return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n} else {\n    return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n}",
            "src_parent": "{\n    double prod1 = 1.0;\n    double ared = a;\n    while (ared > 2.0) {\n        ared -= 1.0;\n        final double h = ared / b;\n        prod1 *= h / (1.0 + h);\n    } \n    if (b < 10.0) {\n        double prod2 = 1.0;\n        double bred = b;\n        while (bred > 2.0) {\n            bred -= 1.0;\n            prod2 *= bred / (ared + bred);\n        } \n        return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n    } else {\n        return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Method",
            "dst_parent": "@java.lang.Deprecated\npublic static double logBeta(double a, double b, double epsilon, int maxIterations) {\n    return org.apache.commons.math3.special.Beta.logBeta(a, b);\n}",
            "dst_parent_type": "Method",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Method",
            "src_parent": "public static double logBeta(double a, double b, double epsilon, int maxIterations) {\n    double ret;\n    if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {\n        ret = java.lang.Double.NaN;\n    } else {\n        ret = (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Gamma.logGamma(a + b);\n    }\n    return ret;\n}",
            "src_parent_type": "Method",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "double a",
            "dst_parent": "@java.lang.Deprecated\npublic static double logBeta(double a, double b, double epsilon, int maxIterations) {\n    return org.apache.commons.math3.special.Beta.logBeta(a, b);\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "double a",
            "src_parent": "public static double logBeta(double a, double b, double epsilon, int maxIterations) {\n    double ret;\n    if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {\n        ret = java.lang.Double.NaN;\n    } else {\n        ret = (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Gamma.logGamma(a + b);\n    }\n    return ret;\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "double b",
            "dst_parent": "@java.lang.Deprecated\npublic static double logBeta(double a, double b, double epsilon, int maxIterations) {\n    return org.apache.commons.math3.special.Beta.logBeta(a, b);\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "double b",
            "src_parent": "public static double logBeta(double a, double b, double epsilon, int maxIterations) {\n    double ret;\n    if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {\n        ret = java.lang.Double.NaN;\n    } else {\n        ret = (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Gamma.logGamma(a + b);\n    }\n    return ret;\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "double epsilon",
            "dst_parent": "@java.lang.Deprecated\npublic static double logBeta(double a, double b, double epsilon, int maxIterations) {\n    return org.apache.commons.math3.special.Beta.logBeta(a, b);\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "double epsilon",
            "src_parent": "public static double logBeta(double a, double b, double epsilon, int maxIterations) {\n    double ret;\n    if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {\n        ret = java.lang.Double.NaN;\n    } else {\n        ret = (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Gamma.logGamma(a + b);\n    }\n    return ret;\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "int maxIterations",
            "dst_parent": "@java.lang.Deprecated\npublic static double logBeta(double a, double b, double epsilon, int maxIterations) {\n    return org.apache.commons.math3.special.Beta.logBeta(a, b);\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "int maxIterations",
            "src_parent": "public static double logBeta(double a, double b, double epsilon, int maxIterations) {\n    double ret;\n    if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {\n        ret = java.lang.Double.NaN;\n    } else {\n        ret = (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Gamma.logGamma(a + b);\n    }\n    return ret;\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "((java.lang.Double.isNaN(p) || java.lang.Double.isNaN(q)) || (p <= 0.0)) || (q <= 0.0)",
            "dst_parent": "if (((java.lang.Double.isNaN(p) || java.lang.Double.isNaN(q)) || (p <= 0.0)) || (q <= 0.0)) {\n    return java.lang.Double.NaN;\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)",
            "src_parent": "if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {\n    ret = java.lang.Double.NaN;\n} else {\n    ret = (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Gamma.logGamma(a + b);\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Double.NaN",
            "dst_parent": "return java.lang.Double.NaN",
            "dst_parent_type": "Return",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "java.lang.Double.NaN",
            "src_parent": "ret = java.lang.Double.NaN",
            "src_parent_type": "Assignment",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n    double prod = 1.0;\n    double ared = a;\n    for (int i = 0; i < n; i++) {\n        ared -= 1.0;\n        prod *= ared / (1.0 + (ared / b));\n    }\n    return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n}",
            "dst_parent": "if (b > 1000.0) {\n    final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n    double prod = 1.0;\n    double ared = a;\n    for (int i = 0; i < n; i++) {\n        ared -= 1.0;\n        prod *= ared / (1.0 + (ared / b));\n    }\n    return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n} else {\n    double prod1 = 1.0;\n    double ared = a;\n    while (ared > 2.0) {\n        ared -= 1.0;\n        final double h = ared / b;\n        prod1 *= h / (1.0 + h);\n    } \n    if (b < 10.0) {\n        double prod2 = 1.0;\n        double bred = b;\n        while (bred > 2.0) {\n            bred -= 1.0;\n            prod2 *= bred / (ared + bred);\n        } \n        return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n    } else {\n        return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    ret = java.lang.Double.NaN;\n}",
            "src_parent": "if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {\n    ret = java.lang.Double.NaN;\n} else {\n    ret = (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Gamma.logGamma(a + b);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    double prod1 = 1.0;\n    double ared = a;\n    while (ared > 2.0) {\n        ared -= 1.0;\n        final double h = ared / b;\n        prod1 *= h / (1.0 + h);\n    } \n    if (b < 10.0) {\n        double prod2 = 1.0;\n        double bred = b;\n        while (bred > 2.0) {\n            bred -= 1.0;\n            prod2 *= bred / (ared + bred);\n        } \n        return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n    } else {\n        return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n    }\n}",
            "dst_parent": "if (b > 1000.0) {\n    final int n = ((int) (org.apache.commons.math3.util.FastMath.floor(a - 1.0)));\n    double prod = 1.0;\n    double ared = a;\n    for (int i = 0; i < n; i++) {\n        ared -= 1.0;\n        prod *= ared / (1.0 + (ared / b));\n    }\n    return (org.apache.commons.math3.util.FastMath.log(prod) - (n * org.apache.commons.math3.util.FastMath.log(b))) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b));\n} else {\n    double prod1 = 1.0;\n    double ared = a;\n    while (ared > 2.0) {\n        ared -= 1.0;\n        final double h = ared / b;\n        prod1 *= h / (1.0 + h);\n    } \n    if (b < 10.0) {\n        double prod2 = 1.0;\n        double bred = b;\n        while (bred > 2.0) {\n            bred -= 1.0;\n            prod2 *= bred / (ared + bred);\n        } \n        return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.util.FastMath.log(prod2)) + (org.apache.commons.math3.special.Gamma.logGamma(ared) + (org.apache.commons.math3.special.Gamma.logGamma(bred) - org.apache.commons.math3.special.Beta.logGammaSum(ared, bred)));\n    } else {\n        return (org.apache.commons.math3.util.FastMath.log(prod1) + org.apache.commons.math3.special.Gamma.logGamma(ared)) + org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(ared, b);\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    ret = (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Gamma.logGamma(a + b);\n}",
            "src_parent": "if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {\n    ret = java.lang.Double.NaN;\n} else {\n    ret = (org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Gamma.logGamma(a + b);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.commons.math3.special.Beta",
            "dst_parent": "org.apache.commons.math3.special.Beta.DELTA",
            "dst_parent_type": "FieldRead",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "java.lang.Integer",
            "src_parent": "java.lang.Integer.MAX_VALUE",
            "src_parent_type": "FieldRead",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b))",
            "dst_parent": "(org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Beta.logGammaSum(a, b)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b))",
            "src_parent": "(org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Gamma.logGamma(a + b)",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.commons.math3.special.Gamma.gamma(a + b)",
            "dst_parent": "(org.apache.commons.math3.special.Gamma.gamma(a) * org.apache.commons.math3.special.Gamma.gamma(b)) / org.apache.commons.math3.special.Gamma.gamma(a + b)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "org.apache.commons.math3.special.Gamma.logGamma(a + b)",
            "src_parent": "(org.apache.commons.math3.special.Gamma.logGamma(a) + org.apache.commons.math3.special.Gamma.logGamma(b)) - org.apache.commons.math3.special.Gamma.logGamma(a + b)",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "Beta"
    }
  ],
  "id": "commons-math_f64b6a90"
}