{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "container",
            "dst_parent": "container.lookup(org.apache.maven.wagon.Wagon.class, hint)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "UPD",
            "src": "wagons",
            "src_parent": "((org.apache.maven.wagon.Wagon) (wagons.get(hint)))",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Throw",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "new org.apache.maven.wagon.UnsupportedProtocolException(\"Cannot find wagon which supports the requested protocol: \" + protocol, e)",
            "dst_parent": "throw new org.apache.maven.wagon.UnsupportedProtocolException(\"Cannot find wagon which supports the requested protocol: \" + protocol, e)",
            "dst_parent_type": "Throw",
            "dst_type": "ConstructorCall",
            "operator": "UPD",
            "src": "new org.apache.maven.wagon.UnsupportedProtocolException(\"Cannot find wagon which supports the requested protocol: \" + protocol)",
            "src_parent": "throw new org.apache.maven.wagon.UnsupportedProtocolException(\"Cannot find wagon which supports the requested protocol: \" + protocol)",
            "src_parent_type": "Throw",
            "src_type": "ConstructorCall"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "@org.codehaus.plexus.component.annotations.Requirement(role = org.apache.maven.wagon.Wagon.class)\nprivate java.util.Map<java.lang.String, org.apache.maven.wagon.Wagon> wagons;",
            "src_parent": "@org.codehaus.plexus.component.annotations.Component(role = org.apache.maven.repository.legacy.WagonManager.class)\npublic class DefaultWagonManager implements org.apache.maven.repository.legacy.WagonManager {\n    private static final java.lang.String[] CHECKSUM_IDS = new java.lang.String[]{ \"md5\", \"sha1\" };\n\n    private static final java.lang.String[] CHECKSUM_ALGORITHMS = new java.lang.String[]{ \"MD5\", \"SHA-1\" };\n\n    @org.codehaus.plexus.component.annotations.Requirement\n    private org.codehaus.plexus.logging.Logger logger;\n\n    @org.codehaus.plexus.component.annotations.Requirement\n    private org.codehaus.plexus.PlexusContainer container;\n\n    @org.codehaus.plexus.component.annotations.Requirement(role = org.apache.maven.wagon.Wagon.class)\n    private java.util.Map<java.lang.String, org.apache.maven.wagon.Wagon> wagons;\n\n    @org.codehaus.plexus.component.annotations.Requirement\n    private org.apache.maven.repository.legacy.UpdateCheckManager updateCheckManager;\n\n    public void getArtifact(org.apache.maven.artifact.Artifact artifact, org.apache.maven.artifact.repository.ArtifactRepository repository, org.apache.maven.wagon.events.TransferListener downloadMonitor, boolean force) throws org.apache.maven.wagon.ResourceDoesNotExistException, org.apache.maven.wagon.TransferFailedException {\n        java.lang.String remotePath = repository.pathOf(artifact);\n        org.apache.maven.artifact.repository.ArtifactRepositoryPolicy policy = (artifact.isSnapshot()) ? repository.getSnapshots() : repository.getReleases();\n        if (!policy.isEnabled()) {\n            logger.debug(((\"Skipping disabled repository \" + repository.getId()) + \" for resolution of \") + artifact.getId());\n        } else if (artifact.isSnapshot() || (!artifact.getFile().exists())) {\n            if (force || updateCheckManager.isUpdateRequired(artifact, repository)) {\n                logger.debug(((((\"Trying repository \" + repository.getId()) + \" for resolution of \") + artifact.getId()) + \" from \") + remotePath);\n                try {\n                    getRemoteFile(repository, artifact.getFile(), remotePath, downloadMonitor, policy.getChecksumPolicy(), false);\n                } finally {\n                    updateCheckManager.touch(artifact, repository);\n                }\n                logger.debug(((\"  Artifact \" + artifact.getId()) + \" resolved to \") + artifact.getFile());\n                artifact.setResolved(true);\n            } else if (!artifact.getFile().exists()) {\n                throw new org.apache.maven.wagon.ResourceDoesNotExistException(((((((\"Failure to resolve \" + remotePath) + \" from \") + repository.getUrl()) + \" was cached in the local repository. \") + \"Resolution will not be reattempted until the update interval of \") + repository.getId()) + \" has elapsed or updates are forced.\");\n            }\n        }\n    }\n\n    public void getArtifact(org.apache.maven.artifact.Artifact artifact, java.util.List<org.apache.maven.artifact.repository.ArtifactRepository> remoteRepositories, org.apache.maven.wagon.events.TransferListener downloadMonitor, boolean force) throws org.apache.maven.wagon.ResourceDoesNotExistException, org.apache.maven.wagon.TransferFailedException {\n        org.apache.maven.wagon.TransferFailedException tfe = null;\n        for (org.apache.maven.artifact.repository.ArtifactRepository repository : remoteRepositories) {\n            try {\n                getArtifact(artifact, repository, downloadMonitor, force);\n                if (artifact.isResolved()) {\n                    artifact.setRepository(repository);\n                    break;\n                }\n            } catch (org.apache.maven.wagon.ResourceDoesNotExistException e) {\n                logger.debug((((((\"Unable to find resource '\" + artifact.getId()) + \"' in repository \") + repository.getId()) + \" (\") + repository.getUrl()) + \")\", e);\n            } catch (org.apache.maven.wagon.TransferFailedException e) {\n                tfe = e;\n                logger.debug((((((\"Unable to get resource '\" + artifact.getId()) + \"' from repository \") + repository.getId()) + \" (\") + repository.getUrl()) + \")\", e);\n            }\n        }\n        if (!artifact.getFile().exists()) {\n            if (tfe != null) {\n                throw tfe;\n            } else {\n                throw new org.apache.maven.wagon.ResourceDoesNotExistException(\"Unable to download the artifact from any repository\");\n            }\n        }\n    }\n\n    public void getArtifactMetadata(org.apache.maven.artifact.metadata.ArtifactMetadata metadata, org.apache.maven.artifact.repository.ArtifactRepository repository, java.io.File destination, java.lang.String checksumPolicy) throws org.apache.maven.wagon.ResourceDoesNotExistException, org.apache.maven.wagon.TransferFailedException {\n        java.lang.String remotePath = repository.pathOfRemoteRepositoryMetadata(metadata);\n        getRemoteFile(repository, destination, remotePath, null, checksumPolicy, true);\n    }\n\n    public void getArtifactMetadataFromDeploymentRepository(org.apache.maven.artifact.metadata.ArtifactMetadata metadata, org.apache.maven.artifact.repository.ArtifactRepository repository, java.io.File destination, java.lang.String checksumPolicy) throws org.apache.maven.wagon.ResourceDoesNotExistException, org.apache.maven.wagon.TransferFailedException {\n        java.lang.String remotePath = repository.pathOfRemoteRepositoryMetadata(metadata);\n        getRemoteFile(repository, destination, remotePath, null, checksumPolicy, true);\n    }\n\n    private void connectWagon(org.apache.maven.wagon.Wagon wagon, org.apache.maven.artifact.repository.ArtifactRepository repository) throws org.apache.maven.wagon.ConnectionException, org.apache.maven.wagon.authentication.AuthenticationException {\n        if ((repository.getAuthentication() != null) && (repository.getProxy() != null)) {\n            wagon.connect(new org.apache.maven.wagon.repository.Repository(repository.getId(), repository.getUrl()), authenticationInfo(repository), proxyInfo(repository));\n        } else if (repository.getAuthentication() != null) {\n            wagon.connect(new org.apache.maven.wagon.repository.Repository(repository.getId(), repository.getUrl()), authenticationInfo(repository));\n        } else if (repository.getProxy() != null) {\n            wagon.connect(new org.apache.maven.wagon.repository.Repository(repository.getId(), repository.getUrl()), proxyInfo(repository));\n        } else {\n            wagon.connect(new org.apache.maven.wagon.repository.Repository(repository.getId(), repository.getUrl()));\n        }\n    }\n\n    private org.apache.maven.wagon.authentication.AuthenticationInfo authenticationInfo(org.apache.maven.artifact.repository.ArtifactRepository repository) {\n        org.apache.maven.wagon.authentication.AuthenticationInfo ai = new org.apache.maven.wagon.authentication.AuthenticationInfo();\n        ai.setUserName(repository.getAuthentication().getUsername());\n        ai.setPassword(repository.getAuthentication().getPassword());\n        return ai;\n    }\n\n    private org.apache.maven.wagon.proxy.ProxyInfo proxyInfo(org.apache.maven.artifact.repository.ArtifactRepository repository) {\n        org.apache.maven.wagon.proxy.ProxyInfo proxyInfo = new org.apache.maven.wagon.proxy.ProxyInfo();\n        proxyInfo.setHost(repository.getProxy().getHost());\n        proxyInfo.setType(repository.getProxy().getProtocol());\n        proxyInfo.setPort(repository.getProxy().getPort());\n        proxyInfo.setNonProxyHosts(repository.getProxy().getNonProxyHosts());\n        proxyInfo.setUserName(repository.getProxy().getUserName());\n        proxyInfo.setPassword(repository.getProxy().getPassword());\n        return proxyInfo;\n    }\n\n    public void getRemoteFile(org.apache.maven.artifact.repository.ArtifactRepository repository, java.io.File destination, java.lang.String remotePath, org.apache.maven.wagon.events.TransferListener downloadMonitor, java.lang.String checksumPolicy, boolean force) throws org.apache.maven.wagon.ResourceDoesNotExistException, org.apache.maven.wagon.TransferFailedException {\n        java.lang.String protocol = repository.getProtocol();\n        org.apache.maven.wagon.Wagon wagon;\n        try {\n            wagon = getWagon(protocol);\n        } catch (org.apache.maven.wagon.UnsupportedProtocolException e) {\n            throw new org.apache.maven.wagon.TransferFailedException(((\"Unsupported Protocol: '\" + protocol) + \"': \") + e.getMessage(), e);\n        }\n        if (downloadMonitor != null) {\n            wagon.addTransferListener(downloadMonitor);\n        }\n        java.io.File temp = new java.io.File(destination + \".tmp\");\n        temp.deleteOnExit();\n        boolean downloaded = false;\n        try {\n            connectWagon(wagon, repository);\n            boolean firstRun = true;\n            boolean retry = true;\n            while (firstRun || retry) {\n                org.apache.maven.wagon.observers.ChecksumObserver md5ChecksumObserver = null;\n                org.apache.maven.wagon.observers.ChecksumObserver sha1ChecksumObserver = null;\n                try {\n                    int i = 0;\n                    md5ChecksumObserver = addChecksumObserver(wagon, org.apache.maven.repository.legacy.DefaultWagonManager.CHECKSUM_ALGORITHMS[i++]);\n                    sha1ChecksumObserver = addChecksumObserver(wagon, org.apache.maven.repository.legacy.DefaultWagonManager.CHECKSUM_ALGORITHMS[i++]);\n                    retry = false;\n                    if (destination.exists() && (!force)) {\n                        try {\n                            downloaded = wagon.getIfNewer(remotePath, temp, destination.lastModified());\n                            if (!downloaded) {\n                                destination.setLastModified(java.lang.System.currentTimeMillis());\n                            }\n                        } catch (java.lang.UnsupportedOperationException e) {\n                            wagon.get(remotePath, temp);\n                            downloaded = true;\n                        }\n                    } else {\n                        wagon.get(remotePath, temp);\n                        downloaded = true;\n                    }\n                } finally {\n                    wagon.removeTransferListener(md5ChecksumObserver);\n                    wagon.removeTransferListener(sha1ChecksumObserver);\n                }\n                if (downloaded) {\n                    if (downloadMonitor != null) {\n                        wagon.removeTransferListener(downloadMonitor);\n                    }\n                    try {\n                        verifyChecksum(sha1ChecksumObserver, destination, temp, remotePath, \".sha1\", wagon);\n                    } catch (org.apache.maven.repository.legacy.ChecksumFailedException e) {\n                        if (firstRun) {\n                            logger.warn((\"*** CHECKSUM FAILED - \" + e.getMessage()) + \" - RETRYING\");\n                            retry = true;\n                        } else {\n                            handleChecksumFailure(checksumPolicy, e.getMessage(), e.getCause());\n                        }\n                    } catch (org.apache.maven.wagon.ResourceDoesNotExistException sha1TryException) {\n                        logger.debug(\"SHA1 not found, trying MD5: \" + sha1TryException.getMessage());\n                        try {\n                            verifyChecksum(md5ChecksumObserver, destination, temp, remotePath, \".md5\", wagon);\n                        } catch (org.apache.maven.repository.legacy.ChecksumFailedException e) {\n                            if (firstRun) {\n                                retry = true;\n                            } else {\n                                handleChecksumFailure(checksumPolicy, e.getMessage(), e.getCause());\n                            }\n                        } catch (org.apache.maven.wagon.ResourceDoesNotExistException md5TryException) {\n                            handleChecksumFailure(checksumPolicy, \"Error retrieving checksum file for \" + remotePath, md5TryException);\n                        }\n                    }\n                    if (downloadMonitor != null) {\n                        wagon.addTransferListener(downloadMonitor);\n                    }\n                }\n                firstRun = false;\n            } \n        } catch (org.apache.maven.wagon.ConnectionException e) {\n            throw new org.apache.maven.wagon.TransferFailedException(\"Connection failed: \" + e.getMessage(), e);\n        } catch (org.apache.maven.wagon.authentication.AuthenticationException e) {\n            throw new org.apache.maven.wagon.TransferFailedException(\"Authentication failed: \" + e.getMessage(), e);\n        } catch (org.apache.maven.wagon.authorization.AuthorizationException e) {\n            throw new org.apache.maven.wagon.TransferFailedException(\"Authorization failed: \" + e.getMessage(), e);\n        } finally {\n            if (downloadMonitor != null) {\n                wagon.removeTransferListener(downloadMonitor);\n            }\n            disconnectWagon(wagon);\n            releaseWagon(protocol, wagon);\n        }\n        if (downloaded) {\n            if (!temp.exists()) {\n                throw new org.apache.maven.wagon.ResourceDoesNotExistException(\"Downloaded file does not exist: \" + temp);\n            }\n            if (!temp.renameTo(destination)) {\n                try {\n                    org.codehaus.plexus.util.FileUtils.copyFile(temp, destination);\n                    temp.delete();\n                } catch (java.io.IOException e) {\n                    throw new org.apache.maven.wagon.TransferFailedException(\"Error copying temporary file to the final destination: \" + e.getMessage(), e);\n                }\n            }\n        }\n    }\n\n    public void putArtifact(java.io.File source, org.apache.maven.artifact.Artifact artifact, org.apache.maven.artifact.repository.ArtifactRepository deploymentRepository, org.apache.maven.wagon.events.TransferListener downloadMonitor) throws org.apache.maven.wagon.TransferFailedException {\n        putRemoteFile(deploymentRepository, source, deploymentRepository.pathOf(artifact), downloadMonitor);\n    }\n\n    public void putArtifactMetadata(java.io.File source, org.apache.maven.artifact.metadata.ArtifactMetadata artifactMetadata, org.apache.maven.artifact.repository.ArtifactRepository repository) throws org.apache.maven.wagon.TransferFailedException {\n        logger.info(\"Uploading \" + artifactMetadata);\n        putRemoteFile(repository, source, repository.pathOfRemoteRepositoryMetadata(artifactMetadata), null);\n    }\n\n    public void putRemoteFile(org.apache.maven.artifact.repository.ArtifactRepository repository, java.io.File source, java.lang.String remotePath, org.apache.maven.wagon.events.TransferListener downloadMonitor) throws org.apache.maven.wagon.TransferFailedException {\n        java.lang.String protocol = repository.getProtocol();\n        org.apache.maven.wagon.Wagon wagon;\n        try {\n            wagon = getWagon(protocol);\n        } catch (org.apache.maven.wagon.UnsupportedProtocolException e) {\n            throw new org.apache.maven.wagon.TransferFailedException(((\"Unsupported Protocol: '\" + protocol) + \"': \") + e.getMessage(), e);\n        }\n        if (downloadMonitor != null) {\n            wagon.addTransferListener(downloadMonitor);\n        }\n        java.util.Map<java.lang.String, org.apache.maven.wagon.observers.ChecksumObserver> checksums = new java.util.HashMap<java.lang.String, org.apache.maven.wagon.observers.ChecksumObserver>(2);\n        java.util.Map<java.lang.String, java.lang.String> sums = new java.util.HashMap<java.lang.String, java.lang.String>(2);\n        for (int i = 0; i < org.apache.maven.repository.legacy.DefaultWagonManager.CHECKSUM_IDS.length; i++) {\n            checksums.put(org.apache.maven.repository.legacy.DefaultWagonManager.CHECKSUM_IDS[i], addChecksumObserver(wagon, org.apache.maven.repository.legacy.DefaultWagonManager.CHECKSUM_ALGORITHMS[i]));\n        }\n        try {\n            try {\n                connectWagon(wagon, repository);\n                wagon.put(source, remotePath);\n            } finally {\n                if (downloadMonitor != null) {\n                    wagon.removeTransferListener(downloadMonitor);\n                }\n            }\n            for (java.lang.String extension : checksums.keySet()) {\n                org.apache.maven.wagon.observers.ChecksumObserver observer = checksums.get(extension);\n                sums.put(extension, observer.getActualChecksum());\n            }\n            for (java.lang.String extension : checksums.keySet()) {\n                java.io.File temp = java.io.File.createTempFile(\"maven-artifact\", null);\n                temp.deleteOnExit();\n                org.codehaus.plexus.util.FileUtils.fileWrite(temp.getAbsolutePath(), \"UTF-8\", sums.get(extension));\n                wagon.put(temp, (remotePath + \".\") + extension);\n            }\n        } catch (org.apache.maven.wagon.ConnectionException e) {\n            throw new org.apache.maven.wagon.TransferFailedException(\"Connection failed: \" + e.getMessage(), e);\n        } catch (org.apache.maven.wagon.authentication.AuthenticationException e) {\n            throw new org.apache.maven.wagon.TransferFailedException(\"Authentication failed: \" + e.getMessage(), e);\n        } catch (org.apache.maven.wagon.authorization.AuthorizationException e) {\n            throw new org.apache.maven.wagon.TransferFailedException(\"Authorization failed: \" + e.getMessage(), e);\n        } catch (org.apache.maven.wagon.ResourceDoesNotExistException e) {\n            throw new org.apache.maven.wagon.TransferFailedException(\"Resource to deploy not found: \" + e.getMessage(), e);\n        } catch (java.io.IOException e) {\n            throw new org.apache.maven.wagon.TransferFailedException(\"Error creating temporary file for deployment: \" + e.getMessage(), e);\n        } finally {\n            for (java.lang.String aCHECKSUM_IDS : org.apache.maven.repository.legacy.DefaultWagonManager.CHECKSUM_IDS) {\n                org.apache.maven.wagon.events.TransferListener checksumListener = checksums.get(aCHECKSUM_IDS);\n                if (checksumListener != null) {\n                    wagon.removeTransferListener(checksumListener);\n                }\n            }\n            disconnectWagon(wagon);\n            releaseWagon(protocol, wagon);\n        }\n    }\n\n    private org.apache.maven.wagon.observers.ChecksumObserver addChecksumObserver(org.apache.maven.wagon.Wagon wagon, java.lang.String algorithm) throws org.apache.maven.wagon.TransferFailedException {\n        try {\n            org.apache.maven.wagon.observers.ChecksumObserver checksumObserver = new org.apache.maven.wagon.observers.ChecksumObserver(algorithm);\n            wagon.addTransferListener(checksumObserver);\n            return checksumObserver;\n        } catch (java.security.NoSuchAlgorithmException e) {\n            throw new org.apache.maven.wagon.TransferFailedException(\"Unable to add checksum for unsupported algorithm \" + algorithm, e);\n        }\n    }\n\n    private void handleChecksumFailure(java.lang.String checksumPolicy, java.lang.String message, java.lang.Throwable cause) throws org.apache.maven.repository.legacy.ChecksumFailedException {\n        if (ArtifactRepositoryPolicy.CHECKSUM_POLICY_FAIL.equals(checksumPolicy)) {\n            throw new org.apache.maven.repository.legacy.ChecksumFailedException(message, cause);\n        } else if (!ArtifactRepositoryPolicy.CHECKSUM_POLICY_IGNORE.equals(checksumPolicy)) {\n            logger.warn((\"*** CHECKSUM FAILED - \" + message) + \" - IGNORING\");\n        }\n    }\n\n    private void verifyChecksum(org.apache.maven.wagon.observers.ChecksumObserver checksumObserver, java.io.File destination, java.io.File tempDestination, java.lang.String remotePath, java.lang.String checksumFileExtension, org.apache.maven.wagon.Wagon wagon) throws org.apache.maven.wagon.ResourceDoesNotExistException, org.apache.maven.wagon.TransferFailedException, org.apache.maven.wagon.authorization.AuthorizationException {\n        try {\n            java.lang.String actualChecksum = checksumObserver.getActualChecksum();\n            java.io.File tempChecksumFile = new java.io.File((tempDestination + checksumFileExtension) + \".tmp\");\n            tempChecksumFile.deleteOnExit();\n            wagon.get(remotePath + checksumFileExtension, tempChecksumFile);\n            java.lang.String expectedChecksum = org.codehaus.plexus.util.FileUtils.fileRead(tempChecksumFile, \"UTF-8\");\n            expectedChecksum = expectedChecksum.trim();\n            if (expectedChecksum.regionMatches(true, 0, \"MD\", 0, 2) || expectedChecksum.regionMatches(true, 0, \"SHA\", 0, 3)) {\n                int lastSpacePos = expectedChecksum.lastIndexOf(' ');\n                expectedChecksum = expectedChecksum.substring(lastSpacePos + 1);\n            } else {\n                int spacePos = expectedChecksum.indexOf(' ');\n                if (spacePos != (-1)) {\n                    expectedChecksum = expectedChecksum.substring(0, spacePos);\n                }\n            }\n            if (expectedChecksum.equalsIgnoreCase(actualChecksum)) {\n                java.io.File checksumFile = new java.io.File(destination + checksumFileExtension);\n                if (checksumFile.exists()) {\n                    checksumFile.delete();\n                }\n                org.codehaus.plexus.util.FileUtils.copyFile(tempChecksumFile, checksumFile);\n                tempChecksumFile.delete();\n            } else {\n                throw new org.apache.maven.repository.legacy.ChecksumFailedException((((\"Checksum failed on download: local = '\" + actualChecksum) + \"'; remote = '\") + expectedChecksum) + \"'\");\n            }\n        } catch (java.io.IOException e) {\n            throw new org.apache.maven.repository.legacy.ChecksumFailedException(\"Invalid checksum file\", e);\n        }\n    }\n\n    private void disconnectWagon(org.apache.maven.wagon.Wagon wagon) {\n        try {\n            wagon.disconnect();\n        } catch (org.apache.maven.wagon.ConnectionException e) {\n            logger.error(\"Problem disconnecting from wagon - ignoring: \" + e.getMessage());\n        }\n    }\n\n    private void releaseWagon(java.lang.String protocol, org.apache.maven.wagon.Wagon wagon) {\n        try {\n            container.release(wagon);\n        } catch (org.codehaus.plexus.component.repository.exception.ComponentLifecycleException e) {\n            logger.error(\"Problem releasing wagon - ignoring: \" + e.getMessage());\n            logger.debug(\"\", e);\n        }\n    }\n\n    @java.lang.Deprecated\n    public org.apache.maven.wagon.Wagon getWagon(org.apache.maven.wagon.repository.Repository repository) throws org.apache.maven.wagon.UnsupportedProtocolException {\n        return getWagon(repository.getProtocol());\n    }\n\n    @java.lang.Deprecated\n    public org.apache.maven.wagon.Wagon getWagon(java.lang.String protocol) throws org.apache.maven.wagon.UnsupportedProtocolException {\n        if (protocol == null) {\n            throw new org.apache.maven.wagon.UnsupportedProtocolException(\"Unspecified protocol\");\n        }\n        java.lang.String hint = protocol.toLowerCase(java.util.Locale.ENGLISH);\n        org.apache.maven.wagon.Wagon wagon = ((org.apache.maven.wagon.Wagon) (wagons.get(hint)));\n        if (wagon == null) {\n            throw new org.apache.maven.wagon.UnsupportedProtocolException(\"Cannot find wagon which supports the requested protocol: \" + protocol);\n        }\n        return wagon;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "org.apache.maven.wagon.Wagon wagon = ((org.apache.maven.wagon.Wagon) (wagons.get(hint)))",
            "src_parent": "{\n    if (protocol == null) {\n        throw new org.apache.maven.wagon.UnsupportedProtocolException(\"Unspecified protocol\");\n    }\n    java.lang.String hint = protocol.toLowerCase(java.util.Locale.ENGLISH);\n    org.apache.maven.wagon.Wagon wagon = ((org.apache.maven.wagon.Wagon) (wagons.get(hint)));\n    if (wagon == null) {\n        throw new org.apache.maven.wagon.UnsupportedProtocolException(\"Cannot find wagon which supports the requested protocol: \" + protocol);\n    }\n    return wagon;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (wagon == null) {\n    throw new org.apache.maven.wagon.UnsupportedProtocolException(\"Cannot find wagon which supports the requested protocol: \" + protocol);\n}",
            "src_parent": "{\n    if (protocol == null) {\n        throw new org.apache.maven.wagon.UnsupportedProtocolException(\"Unspecified protocol\");\n    }\n    java.lang.String hint = protocol.toLowerCase(java.util.Locale.ENGLISH);\n    org.apache.maven.wagon.Wagon wagon = ((org.apache.maven.wagon.Wagon) (wagons.get(hint)));\n    if (wagon == null) {\n        throw new org.apache.maven.wagon.UnsupportedProtocolException(\"Cannot find wagon which supports the requested protocol: \" + protocol);\n    }\n    return wagon;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.maven.wagon.Wagon wagon",
            "src_parent": "{\n    if (protocol == null) {\n        throw new org.apache.maven.wagon.UnsupportedProtocolException(\"Unspecified protocol\");\n    }\n    java.lang.String hint = protocol.toLowerCase(java.util.Locale.ENGLISH);\n    org.apache.maven.wagon.Wagon wagon;\n    try {\n        wagon = container.lookup(org.apache.maven.wagon.Wagon.class, hint);\n    } catch (org.codehaus.plexus.component.repository.exception.ComponentLookupException e) {\n        throw new org.apache.maven.wagon.UnsupportedProtocolException(\"Cannot find wagon which supports the requested protocol: \" + protocol, e);\n    }\n    return wagon;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "try {\n    wagon = container.lookup(org.apache.maven.wagon.Wagon.class, hint);\n} catch (org.codehaus.plexus.component.repository.exception.ComponentLookupException e) {\n    throw new org.apache.maven.wagon.UnsupportedProtocolException(\"Cannot find wagon which supports the requested protocol: \" + protocol, e);\n}",
            "src_parent": "{\n    if (protocol == null) {\n        throw new org.apache.maven.wagon.UnsupportedProtocolException(\"Unspecified protocol\");\n    }\n    java.lang.String hint = protocol.toLowerCase(java.util.Locale.ENGLISH);\n    org.apache.maven.wagon.Wagon wagon;\n    try {\n        wagon = container.lookup(org.apache.maven.wagon.Wagon.class, hint);\n    } catch (org.codehaus.plexus.component.repository.exception.ComponentLookupException e) {\n        throw new org.apache.maven.wagon.UnsupportedProtocolException(\"Cannot find wagon which supports the requested protocol: \" + protocol, e);\n    }\n    return wagon;\n}",
            "src_parent_type": "Block",
            "src_type": "Try"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.maven.wagon.Wagon",
            "dst_parent": "org.apache.maven.wagon.Wagon wagon",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "org.apache.maven.wagon.Wagon",
            "src_parent": "org.apache.maven.wagon.Wagon wagon = ((org.apache.maven.wagon.Wagon) (wagons.get(hint)))",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "throw new org.apache.maven.wagon.UnsupportedProtocolException(\"Cannot find wagon which supports the requested protocol: \" + protocol, e)",
            "dst_parent": "{\n    throw new org.apache.maven.wagon.UnsupportedProtocolException(\"Cannot find wagon which supports the requested protocol: \" + protocol, e);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Throw",
            "operator": "MOV",
            "src": "throw new org.apache.maven.wagon.UnsupportedProtocolException(\"Cannot find wagon which supports the requested protocol: \" + protocol)",
            "src_parent": "{\n    throw new org.apache.maven.wagon.UnsupportedProtocolException(\"Cannot find wagon which supports the requested protocol: \" + protocol);\n}",
            "src_parent_type": "Block",
            "src_type": "Throw"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "container",
            "dst_parent": "container.lookup(org.apache.maven.wagon.Wagon.class, hint)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "wagons",
            "src_parent": "((org.apache.maven.wagon.Wagon) (wagons.get(hint)))",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Annotation",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "FieldRead",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.maven.wagon.Wagon.class",
            "dst_parent": "container.lookup(org.apache.maven.wagon.Wagon.class, hint)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "org.apache.maven.wagon.Wagon.class",
            "src_parent": "@org.codehaus.plexus.component.annotations.Requirement(role = org.apache.maven.wagon.Wagon.class)",
            "src_parent_type": "Annotation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "hint",
            "dst_parent": "container.lookup(org.apache.maven.wagon.Wagon.class, hint)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "hint",
            "src_parent": "((org.apache.maven.wagon.Wagon) (wagons.get(hint)))",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        }
      ],
      "file_name": "DefaultWagonManager"
    }
  ],
  "id": "maven_269c956e"
}