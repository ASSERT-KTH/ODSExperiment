{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if ((future == null) && timedOut) {\n    break;\n} else if (future == null) {\n    org.apache.camel.processor.aggregate.AggregationStrategy strategy = getAggregationStrategy(null);\n    if (strategy instanceof org.apache.camel.processor.aggregate.TimeoutAwareAggregationStrategy) {\n        org.apache.camel.Exchange oldExchange = result.get();\n        if (oldExchange == null) {\n            oldExchange = original;\n        }\n        ((org.apache.camel.processor.aggregate.TimeoutAwareAggregationStrategy) (strategy)).timeout(oldExchange, aggregated, total.intValue(), timeout);\n    } else {\n        org.apache.camel.processor.MulticastProcessor.LOG.warn(\"Parallel processing timed out after {} millis for number {}. This task will be cancelled and will not be aggregated.\", timeout, aggregated);\n    }\n    org.apache.camel.processor.MulticastProcessor.LOG.debug(\"Timeout occurred after {} millis for number {} task.\", timeout, aggregated);\n    timedOut = true;\n    if (completion instanceof org.apache.camel.util.concurrent.SubmitOrderedCompletionService) {\n        ((org.apache.camel.util.concurrent.SubmitOrderedCompletionService<?>) (completion)).timeoutTask();\n    }\n} else {\n    org.apache.camel.Exchange subExchange = future.get();\n    java.lang.Integer number = getExchangeIndex(subExchange);\n    boolean continueProcessing = org.apache.camel.processor.PipelineHelper.continueProcessing(subExchange, \"Parallel processing failed for number \" + number, org.apache.camel.processor.MulticastProcessor.LOG);\n    if (stopOnException && (!continueProcessing)) {\n        result.set(subExchange);\n        stoppedOnException = true;\n        break;\n    }\n    org.apache.camel.processor.aggregate.AggregationStrategy strategy = getAggregationStrategy(subExchange);\n    doAggregate(strategy, result, subExchange);\n}",
            "src_parent": "{\n    if (allTasksSubmitted.get() && (aggregated >= total.get())) {\n        org.apache.camel.processor.MulticastProcessor.LOG.debug(\"Done aggregating {} exchanges on the fly.\", aggregated);\n        break;\n    }\n    java.util.concurrent.Future<org.apache.camel.Exchange> future;\n    if (timedOut) {\n        future = completion.poll();\n        org.apache.camel.processor.MulticastProcessor.LOG.trace(\"Polled completion task #{} after timeout to grab already completed tasks: {}\", aggregated, future);\n    } else if (timeout > 0) {\n        long left = timeout - watch.taken();\n        if (left < 0) {\n            left = 0;\n        }\n        org.apache.camel.processor.MulticastProcessor.LOG.trace(\"Polling completion task #{} using timeout {} millis.\", aggregated, left);\n        future = completion.poll(left, java.util.concurrent.TimeUnit.MILLISECONDS);\n    } else {\n        org.apache.camel.processor.MulticastProcessor.LOG.trace(\"Polling completion task #{}\", aggregated);\n        future = completion.poll(1, java.util.concurrent.TimeUnit.SECONDS);\n        if (future == null) {\n            continue;\n        }\n    }\n    if ((future == null) && timedOut) {\n        break;\n    } else if (future == null) {\n        org.apache.camel.processor.aggregate.AggregationStrategy strategy = getAggregationStrategy(null);\n        if (strategy instanceof org.apache.camel.processor.aggregate.TimeoutAwareAggregationStrategy) {\n            org.apache.camel.Exchange oldExchange = result.get();\n            if (oldExchange == null) {\n                oldExchange = original;\n            }\n            ((org.apache.camel.processor.aggregate.TimeoutAwareAggregationStrategy) (strategy)).timeout(oldExchange, aggregated, total.intValue(), timeout);\n        } else {\n            org.apache.camel.processor.MulticastProcessor.LOG.warn(\"Parallel processing timed out after {} millis for number {}. This task will be cancelled and will not be aggregated.\", timeout, aggregated);\n        }\n        org.apache.camel.processor.MulticastProcessor.LOG.debug(\"Timeout occurred after {} millis for number {} task.\", timeout, aggregated);\n        timedOut = true;\n        if (completion instanceof org.apache.camel.util.concurrent.SubmitOrderedCompletionService) {\n            ((org.apache.camel.util.concurrent.SubmitOrderedCompletionService<?>) (completion)).timeoutTask();\n        }\n    } else {\n        org.apache.camel.Exchange subExchange = future.get();\n        java.lang.Integer number = getExchangeIndex(subExchange);\n        boolean continueProcessing = org.apache.camel.processor.PipelineHelper.continueProcessing(subExchange, \"Parallel processing failed for number \" + number, org.apache.camel.processor.MulticastProcessor.LOG);\n        if (stopOnException && (!continueProcessing)) {\n            result.set(subExchange);\n            stoppedOnException = true;\n            break;\n        }\n        org.apache.camel.processor.aggregate.AggregationStrategy strategy = getAggregationStrategy(subExchange);\n        doAggregate(strategy, result, subExchange);\n    }\n    aggregated++;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "UnaryOperator",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (future == null) {\n    org.apache.camel.processor.aggregate.AggregationStrategy strategy = getAggregationStrategy(null);\n    if (strategy instanceof org.apache.camel.processor.aggregate.TimeoutAwareAggregationStrategy) {\n        org.apache.camel.Exchange oldExchange = result.get();\n        if (oldExchange == null) {\n            oldExchange = original;\n        }\n        ((org.apache.camel.processor.aggregate.TimeoutAwareAggregationStrategy) (strategy)).timeout(oldExchange, aggregated, total.intValue(), timeout);\n    } else {\n        org.apache.camel.processor.MulticastProcessor.LOG.warn(\"Parallel processing timed out after {} millis for number {}. This task will be cancelled and will not be aggregated.\", timeout, aggregated);\n    }\n    org.apache.camel.processor.MulticastProcessor.LOG.debug(\"Timeout occurred after {} millis for number {} task.\", timeout, aggregated);\n    timedOut = true;\n    if (completion instanceof org.apache.camel.util.concurrent.SubmitOrderedCompletionService) {\n        ((org.apache.camel.util.concurrent.SubmitOrderedCompletionService<?>) (completion)).timeoutTask();\n    }\n} else {\n    org.apache.camel.Exchange subExchange = future.get();\n    java.lang.Integer number = getExchangeIndex(subExchange);\n    boolean continueProcessing = org.apache.camel.processor.PipelineHelper.continueProcessing(subExchange, \"Parallel processing failed for number \" + number, org.apache.camel.processor.MulticastProcessor.LOG);\n    if (stopOnException && (!continueProcessing)) {\n        result.set(subExchange);\n        stoppedOnException = true;\n        break;\n    }\n    org.apache.camel.processor.aggregate.AggregationStrategy strategy = getAggregationStrategy(subExchange);\n    doAggregate(strategy, result, subExchange);\n}",
            "dst_parent": "{\n    if (allTasksSubmitted.get() && (aggregated >= total.get())) {\n        org.apache.camel.processor.MulticastProcessor.LOG.debug(\"Done aggregating {} exchanges on the fly.\", aggregated);\n        break;\n    }\n    java.util.concurrent.Future<org.apache.camel.Exchange> future;\n    if (timedOut) {\n        future = completion.poll();\n        org.apache.camel.processor.MulticastProcessor.LOG.trace(\"Polled completion task #{} after timeout to grab already completed tasks: {}\", aggregated, future);\n    } else if (timeout > 0) {\n        long left = timeout - watch.taken();\n        if (left < 0) {\n            left = 0;\n        }\n        org.apache.camel.processor.MulticastProcessor.LOG.trace(\"Polling completion task #{} using timeout {} millis.\", aggregated, left);\n        future = completion.poll(left, java.util.concurrent.TimeUnit.MILLISECONDS);\n    } else {\n        org.apache.camel.processor.MulticastProcessor.LOG.trace(\"Polling completion task #{}\", aggregated);\n        future = completion.poll(1, java.util.concurrent.TimeUnit.SECONDS);\n        if (future == null) {\n            continue;\n        }\n    }\n    if (future == null) {\n        org.apache.camel.processor.aggregate.AggregationStrategy strategy = getAggregationStrategy(null);\n        if (strategy instanceof org.apache.camel.processor.aggregate.TimeoutAwareAggregationStrategy) {\n            org.apache.camel.Exchange oldExchange = result.get();\n            if (oldExchange == null) {\n                oldExchange = original;\n            }\n            ((org.apache.camel.processor.aggregate.TimeoutAwareAggregationStrategy) (strategy)).timeout(oldExchange, aggregated, total.intValue(), timeout);\n        } else {\n            org.apache.camel.processor.MulticastProcessor.LOG.warn(\"Parallel processing timed out after {} millis for number {}. This task will be cancelled and will not be aggregated.\", timeout, aggregated);\n        }\n        org.apache.camel.processor.MulticastProcessor.LOG.debug(\"Timeout occurred after {} millis for number {} task.\", timeout, aggregated);\n        timedOut = true;\n        if (completion instanceof org.apache.camel.util.concurrent.SubmitOrderedCompletionService) {\n            ((org.apache.camel.util.concurrent.SubmitOrderedCompletionService<?>) (completion)).timeoutTask();\n        }\n    } else {\n        org.apache.camel.Exchange subExchange = future.get();\n        java.lang.Integer number = getExchangeIndex(subExchange);\n        boolean continueProcessing = org.apache.camel.processor.PipelineHelper.continueProcessing(subExchange, \"Parallel processing failed for number \" + number, org.apache.camel.processor.MulticastProcessor.LOG);\n        if (stopOnException && (!continueProcessing)) {\n            result.set(subExchange);\n            stoppedOnException = true;\n            break;\n        }\n        org.apache.camel.processor.aggregate.AggregationStrategy strategy = getAggregationStrategy(subExchange);\n        doAggregate(strategy, result, subExchange);\n    }\n    aggregated++;\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (future == null) {\n    org.apache.camel.processor.aggregate.AggregationStrategy strategy = getAggregationStrategy(null);\n    if (strategy instanceof org.apache.camel.processor.aggregate.TimeoutAwareAggregationStrategy) {\n        org.apache.camel.Exchange oldExchange = result.get();\n        if (oldExchange == null) {\n            oldExchange = original;\n        }\n        ((org.apache.camel.processor.aggregate.TimeoutAwareAggregationStrategy) (strategy)).timeout(oldExchange, aggregated, total.intValue(), timeout);\n    } else {\n        org.apache.camel.processor.MulticastProcessor.LOG.warn(\"Parallel processing timed out after {} millis for number {}. This task will be cancelled and will not be aggregated.\", timeout, aggregated);\n    }\n    org.apache.camel.processor.MulticastProcessor.LOG.debug(\"Timeout occurred after {} millis for number {} task.\", timeout, aggregated);\n    timedOut = true;\n    if (completion instanceof org.apache.camel.util.concurrent.SubmitOrderedCompletionService) {\n        ((org.apache.camel.util.concurrent.SubmitOrderedCompletionService<?>) (completion)).timeoutTask();\n    }\n} else {\n    org.apache.camel.Exchange subExchange = future.get();\n    java.lang.Integer number = getExchangeIndex(subExchange);\n    boolean continueProcessing = org.apache.camel.processor.PipelineHelper.continueProcessing(subExchange, \"Parallel processing failed for number \" + number, org.apache.camel.processor.MulticastProcessor.LOG);\n    if (stopOnException && (!continueProcessing)) {\n        result.set(subExchange);\n        stoppedOnException = true;\n        break;\n    }\n    org.apache.camel.processor.aggregate.AggregationStrategy strategy = getAggregationStrategy(subExchange);\n    doAggregate(strategy, result, subExchange);\n}",
            "src_parent": "{\n    if (future == null) {\n        org.apache.camel.processor.aggregate.AggregationStrategy strategy = getAggregationStrategy(null);\n        if (strategy instanceof org.apache.camel.processor.aggregate.TimeoutAwareAggregationStrategy) {\n            org.apache.camel.Exchange oldExchange = result.get();\n            if (oldExchange == null) {\n                oldExchange = original;\n            }\n            ((org.apache.camel.processor.aggregate.TimeoutAwareAggregationStrategy) (strategy)).timeout(oldExchange, aggregated, total.intValue(), timeout);\n        } else {\n            org.apache.camel.processor.MulticastProcessor.LOG.warn(\"Parallel processing timed out after {} millis for number {}. This task will be cancelled and will not be aggregated.\", timeout, aggregated);\n        }\n        org.apache.camel.processor.MulticastProcessor.LOG.debug(\"Timeout occurred after {} millis for number {} task.\", timeout, aggregated);\n        timedOut = true;\n        if (completion instanceof org.apache.camel.util.concurrent.SubmitOrderedCompletionService) {\n            ((org.apache.camel.util.concurrent.SubmitOrderedCompletionService<?>) (completion)).timeoutTask();\n        }\n    } else {\n        org.apache.camel.Exchange subExchange = future.get();\n        java.lang.Integer number = getExchangeIndex(subExchange);\n        boolean continueProcessing = org.apache.camel.processor.PipelineHelper.continueProcessing(subExchange, \"Parallel processing failed for number \" + number, org.apache.camel.processor.MulticastProcessor.LOG);\n        if (stopOnException && (!continueProcessing)) {\n            result.set(subExchange);\n            stoppedOnException = true;\n            break;\n        }\n        org.apache.camel.processor.aggregate.AggregationStrategy strategy = getAggregationStrategy(subExchange);\n        doAggregate(strategy, result, subExchange);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "MulticastProcessor"
    }
  ],
  "id": "camel_2e985f9b"
}