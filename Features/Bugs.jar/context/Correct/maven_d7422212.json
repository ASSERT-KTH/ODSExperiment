{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "((managedVersions != null) && (managedVersions instanceof org.apache.maven.artifact.versioning.ManagedVersionMap)) ? ((org.apache.maven.artifact.versioning.ManagedVersionMap) (managedVersions)) : new org.apache.maven.artifact.versioning.ManagedVersionMap(managedVersions)",
            "src_parent": "org.apache.maven.artifact.versioning.ManagedVersionMap versionMap = ((managedVersions != null) && (managedVersions instanceof org.apache.maven.artifact.versioning.ManagedVersionMap)) ? ((org.apache.maven.artifact.versioning.ManagedVersionMap) (managedVersions)) : new org.apache.maven.artifact.versioning.ManagedVersionMap(managedVersions)",
            "src_parent_type": "LocalVariable",
            "src_type": "Conditional"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private org.apache.maven.artifact.versioning.ManagedVersionMap getManagedVersionsMap(org.apache.maven.artifact.Artifact originatingArtifact, java.util.Map managedVersions) {\n    org.apache.maven.artifact.versioning.ManagedVersionMap versionMap;\n    if ((managedVersions != null) && (managedVersions instanceof org.apache.maven.artifact.versioning.ManagedVersionMap)) {\n        versionMap = ((org.apache.maven.artifact.versioning.ManagedVersionMap) (managedVersions));\n    } else {\n        versionMap = new org.apache.maven.artifact.versioning.ManagedVersionMap(managedVersions);\n    }\n    org.apache.maven.artifact.Artifact managedOriginatingArtifact = ((org.apache.maven.artifact.Artifact) (versionMap.get(originatingArtifact.getDependencyConflictId())));\n    if (managedOriginatingArtifact != null) {\n        java.lang.String managedVersion = managedOriginatingArtifact.getVersion();\n        java.lang.String version = originatingArtifact.getVersion();\n        if (!managedVersion.equals(version)) {\n            if (managedVersions instanceof org.apache.maven.artifact.versioning.ManagedVersionMap) {\n                versionMap = new org.apache.maven.artifact.versioning.ManagedVersionMap(managedVersions);\n            }\n            versionMap.remove(originatingArtifact.getDependencyConflictId());\n        }\n    }\n    return versionMap;\n}",
            "src_parent": "public class DefaultArtifactCollector implements org.apache.maven.artifact.resolver.ArtifactCollector {\n    public org.apache.maven.artifact.resolver.ArtifactResolutionResult collect(java.util.Set artifacts, org.apache.maven.artifact.Artifact originatingArtifact, org.apache.maven.artifact.repository.ArtifactRepository localRepository, java.util.List remoteRepositories, org.apache.maven.artifact.metadata.ArtifactMetadataSource source, org.apache.maven.artifact.resolver.filter.ArtifactFilter filter, java.util.List listeners) throws org.apache.maven.artifact.resolver.ArtifactResolutionException {\n        return collect(artifacts, originatingArtifact, java.util.Collections.EMPTY_MAP, localRepository, remoteRepositories, source, filter, listeners);\n    }\n\n    public org.apache.maven.artifact.resolver.ArtifactResolutionResult collect(java.util.Set artifacts, org.apache.maven.artifact.Artifact originatingArtifact, java.util.Map managedVersions, org.apache.maven.artifact.repository.ArtifactRepository localRepository, java.util.List remoteRepositories, org.apache.maven.artifact.metadata.ArtifactMetadataSource source, org.apache.maven.artifact.resolver.filter.ArtifactFilter filter, java.util.List listeners) throws org.apache.maven.artifact.resolver.ArtifactResolutionException {\n        java.util.Map resolvedArtifacts = new java.util.LinkedHashMap();\n        org.apache.maven.artifact.resolver.ResolutionNode root = new org.apache.maven.artifact.resolver.ResolutionNode(originatingArtifact, remoteRepositories);\n        root.addDependencies(artifacts, remoteRepositories, filter);\n        org.apache.maven.artifact.versioning.ManagedVersionMap versionMap = getManagedVersionsMap(originatingArtifact, managedVersions);\n        recurse(root, resolvedArtifacts, versionMap, localRepository, remoteRepositories, source, filter, listeners);\n        java.util.Set set = new java.util.LinkedHashSet();\n        for (java.util.Iterator i = resolvedArtifacts.values().iterator(); i.hasNext();) {\n            java.util.List nodes = ((java.util.List) (i.next()));\n            for (java.util.Iterator j = nodes.iterator(); j.hasNext();) {\n                org.apache.maven.artifact.resolver.ResolutionNode node = ((org.apache.maven.artifact.resolver.ResolutionNode) (j.next()));\n                if ((!node.equals(root)) && node.isActive()) {\n                    org.apache.maven.artifact.Artifact artifact = node.getArtifact();\n                    if (node.filterTrail(filter)) {\n                        if (node.isChildOfRootNode() || (!artifact.isOptional())) {\n                            artifact.setDependencyTrail(node.getDependencyTrail());\n                            set.add(node);\n                        }\n                    }\n                }\n            }\n        }\n        org.apache.maven.artifact.resolver.ArtifactResolutionResult result = new org.apache.maven.artifact.resolver.ArtifactResolutionResult();\n        result.setArtifactResolutionNodes(set);\n        return result;\n    }\n\n    private org.apache.maven.artifact.versioning.ManagedVersionMap getManagedVersionsMap(org.apache.maven.artifact.Artifact originatingArtifact, java.util.Map managedVersions) {\n        org.apache.maven.artifact.versioning.ManagedVersionMap versionMap;\n        if ((managedVersions != null) && (managedVersions instanceof org.apache.maven.artifact.versioning.ManagedVersionMap)) {\n            versionMap = ((org.apache.maven.artifact.versioning.ManagedVersionMap) (managedVersions));\n        } else {\n            versionMap = new org.apache.maven.artifact.versioning.ManagedVersionMap(managedVersions);\n        }\n        org.apache.maven.artifact.Artifact managedOriginatingArtifact = ((org.apache.maven.artifact.Artifact) (versionMap.get(originatingArtifact.getDependencyConflictId())));\n        if (managedOriginatingArtifact != null) {\n            java.lang.String managedVersion = managedOriginatingArtifact.getVersion();\n            java.lang.String version = originatingArtifact.getVersion();\n            if (!managedVersion.equals(version)) {\n                if (managedVersions instanceof org.apache.maven.artifact.versioning.ManagedVersionMap) {\n                    versionMap = new org.apache.maven.artifact.versioning.ManagedVersionMap(managedVersions);\n                }\n                versionMap.remove(originatingArtifact.getDependencyConflictId());\n            }\n        }\n        return versionMap;\n    }\n\n    private void recurse(org.apache.maven.artifact.resolver.ResolutionNode node, java.util.Map resolvedArtifacts, org.apache.maven.artifact.versioning.ManagedVersionMap managedVersions, org.apache.maven.artifact.repository.ArtifactRepository localRepository, java.util.List remoteRepositories, org.apache.maven.artifact.metadata.ArtifactMetadataSource source, org.apache.maven.artifact.resolver.filter.ArtifactFilter filter, java.util.List listeners) throws org.apache.maven.artifact.resolver.ArtifactResolutionException, org.apache.maven.artifact.resolver.CyclicDependencyException, org.apache.maven.artifact.versioning.OverConstrainedVersionException {\n        fireEvent(ResolutionListener.TEST_ARTIFACT, listeners, node);\n        java.lang.Object key = node.getKey();\n        if (managedVersions.containsKey(key)) {\n            manageArtifact(node, managedVersions, listeners);\n        }\n        java.util.List previousNodes = ((java.util.List) (resolvedArtifacts.get(key)));\n        if (previousNodes != null) {\n            for (java.util.Iterator i = previousNodes.iterator(); i.hasNext();) {\n                org.apache.maven.artifact.resolver.ResolutionNode previous = ((org.apache.maven.artifact.resolver.ResolutionNode) (i.next()));\n                if (previous.isActive()) {\n                    org.apache.maven.artifact.versioning.VersionRange previousRange = previous.getArtifact().getVersionRange();\n                    org.apache.maven.artifact.versioning.VersionRange currentRange = node.getArtifact().getVersionRange();\n                    if ((previousRange != null) && (currentRange != null)) {\n                        org.apache.maven.artifact.versioning.VersionRange newRange = previousRange.restrict(currentRange);\n                        if (newRange.isSelectedVersionKnown(previous.getArtifact())) {\n                            fireEvent(ResolutionListener.RESTRICT_RANGE, listeners, node, previous.getArtifact(), newRange);\n                        }\n                        previous.getArtifact().setVersionRange(newRange);\n                        node.getArtifact().setVersionRange(currentRange.restrict(previousRange));\n                        org.apache.maven.artifact.resolver.ResolutionNode[] resetNodes = new org.apache.maven.artifact.resolver.ResolutionNode[]{ previous, node };\n                        for (int j = 0; j < 2; j++) {\n                            org.apache.maven.artifact.Artifact resetArtifact = resetNodes[j].getArtifact();\n                            if (((resetArtifact.getVersion() == null) && (resetArtifact.getVersionRange() != null)) && (resetArtifact.getAvailableVersions() != null)) {\n                                resetArtifact.selectVersion(resetArtifact.getVersionRange().matchVersion(resetArtifact.getAvailableVersions()).toString());\n                                fireEvent(ResolutionListener.SELECT_VERSION_FROM_RANGE, listeners, resetNodes[j]);\n                            }\n                        }\n                    }\n                    org.apache.maven.artifact.resolver.ResolutionNode nearest;\n                    org.apache.maven.artifact.resolver.ResolutionNode farthest;\n                    if (previous.getDepth() <= node.getDepth()) {\n                        nearest = previous;\n                        farthest = node;\n                    } else {\n                        nearest = node;\n                        farthest = previous;\n                    }\n                    if (checkScopeUpdate(farthest, nearest, listeners)) {\n                        nearest.disable();\n                        farthest.getArtifact().setVersion(nearest.getArtifact().getVersion());\n                    } else {\n                        farthest.disable();\n                    }\n                    fireEvent(ResolutionListener.OMIT_FOR_NEARER, listeners, farthest, nearest.getArtifact());\n                }\n            }\n        } else {\n            previousNodes = new java.util.ArrayList();\n            resolvedArtifacts.put(key, previousNodes);\n        }\n        previousNodes.add(node);\n        if (node.isActive()) {\n            fireEvent(ResolutionListener.INCLUDE_ARTIFACT, listeners, node);\n        }\n        if (node.isActive() && (!Artifact.SCOPE_SYSTEM.equals(node.getArtifact().getScope()))) {\n            fireEvent(ResolutionListener.PROCESS_CHILDREN, listeners, node);\n            for (java.util.Iterator i = node.getChildrenIterator(); i.hasNext();) {\n                org.apache.maven.artifact.resolver.ResolutionNode child = ((org.apache.maven.artifact.resolver.ResolutionNode) (i.next()));\n                if ((!child.isResolved()) && ((!child.getArtifact().isOptional()) || child.isChildOfRootNode())) {\n                    org.apache.maven.artifact.Artifact artifact = child.getArtifact();\n                    try {\n                        if (artifact.getVersion() == null) {\n                            org.apache.maven.artifact.versioning.ArtifactVersion version;\n                            if (!artifact.isSelectedVersionKnown()) {\n                                java.util.List versions = artifact.getAvailableVersions();\n                                if (versions == null) {\n                                    versions = source.retrieveAvailableVersions(artifact, localRepository, remoteRepositories);\n                                    artifact.setAvailableVersions(versions);\n                                }\n                                org.apache.maven.artifact.versioning.VersionRange versionRange = artifact.getVersionRange();\n                                version = versionRange.matchVersion(versions);\n                                if (version == null) {\n                                    if (versions.isEmpty()) {\n                                        throw new org.apache.maven.artifact.versioning.OverConstrainedVersionException(\"No versions are present in the repository for the artifact with a range \" + versionRange, artifact, remoteRepositories);\n                                    } else {\n                                        throw new org.apache.maven.artifact.versioning.OverConstrainedVersionException(((\"Couldn't find a version in \" + versions) + \" to match range \") + versionRange, artifact, remoteRepositories);\n                                    }\n                                }\n                            } else {\n                                version = artifact.getSelectedVersion();\n                            }\n                            artifact.selectVersion(version.toString());\n                            fireEvent(ResolutionListener.SELECT_VERSION_FROM_RANGE, listeners, child);\n                        }\n                        java.lang.Object childKey = child.getKey();\n                        if (managedVersions.containsKey(childKey)) {\n                            manageArtifact(child, managedVersions, listeners);\n                            org.apache.maven.artifact.Artifact ma = ((org.apache.maven.artifact.Artifact) (managedVersions.get(childKey)));\n                            org.apache.maven.artifact.resolver.filter.ArtifactFilter managedExclusionFilter = ma.getDependencyFilter();\n                            if (null != managedExclusionFilter) {\n                                if (null != artifact.getDependencyFilter()) {\n                                    org.apache.maven.artifact.resolver.filter.AndArtifactFilter aaf = new org.apache.maven.artifact.resolver.filter.AndArtifactFilter();\n                                    aaf.add(artifact.getDependencyFilter());\n                                    aaf.add(managedExclusionFilter);\n                                    artifact.setDependencyFilter(aaf);\n                                } else {\n                                    artifact.setDependencyFilter(managedExclusionFilter);\n                                }\n                            }\n                        }\n                        artifact.setDependencyTrail(node.getDependencyTrail());\n                        org.apache.maven.artifact.metadata.ResolutionGroup rGroup = source.retrieve(artifact, localRepository, remoteRepositories);\n                        if (rGroup == null) {\n                            continue;\n                        }\n                        child.addDependencies(rGroup.getArtifacts(), rGroup.getResolutionRepositories(), filter);\n                    } catch (org.apache.maven.artifact.resolver.CyclicDependencyException e) {\n                        fireEvent(ResolutionListener.OMIT_FOR_CYCLE, listeners, new org.apache.maven.artifact.resolver.ResolutionNode(e.getArtifact(), remoteRepositories, child));\n                    } catch (org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException e) {\n                        artifact.setDependencyTrail(node.getDependencyTrail());\n                        throw new org.apache.maven.artifact.resolver.ArtifactResolutionException(\"Unable to get dependency information: \" + e.getMessage(), artifact, remoteRepositories, e);\n                    }\n                    recurse(child, resolvedArtifacts, managedVersions, localRepository, remoteRepositories, source, filter, listeners);\n                }\n            }\n            fireEvent(ResolutionListener.FINISH_PROCESSING_CHILDREN, listeners, node);\n        }\n    }\n\n    private void manageArtifact(org.apache.maven.artifact.resolver.ResolutionNode node, org.apache.maven.artifact.versioning.ManagedVersionMap managedVersions, java.util.List listeners) {\n        org.apache.maven.artifact.Artifact artifact = ((org.apache.maven.artifact.Artifact) (managedVersions.get(node.getKey())));\n        if ((artifact.getVersion() != null) && (node.isChildOfRootNode() ? node.getArtifact().getVersion() == null : true)) {\n            fireEvent(ResolutionListener.MANAGE_ARTIFACT_VERSION, listeners, node, artifact);\n            node.getArtifact().setVersion(artifact.getVersion());\n        }\n        if ((artifact.getScope() != null) && (node.isChildOfRootNode() ? node.getArtifact().getScope() == null : true)) {\n            fireEvent(ResolutionListener.MANAGE_ARTIFACT_SCOPE, listeners, node, artifact);\n            node.getArtifact().setScope(artifact.getScope());\n        }\n    }\n\n    boolean checkScopeUpdate(org.apache.maven.artifact.resolver.ResolutionNode farthest, org.apache.maven.artifact.resolver.ResolutionNode nearest, java.util.List listeners) {\n        boolean updateScope = false;\n        org.apache.maven.artifact.Artifact farthestArtifact = farthest.getArtifact();\n        org.apache.maven.artifact.Artifact nearestArtifact = nearest.getArtifact();\n        if (Artifact.SCOPE_RUNTIME.equals(farthestArtifact.getScope()) && (Artifact.SCOPE_TEST.equals(nearestArtifact.getScope()) || Artifact.SCOPE_PROVIDED.equals(nearestArtifact.getScope()))) {\n            updateScope = true;\n        }\n        if (Artifact.SCOPE_COMPILE.equals(farthestArtifact.getScope()) && (!Artifact.SCOPE_COMPILE.equals(nearestArtifact.getScope()))) {\n            updateScope = true;\n        }\n        if ((nearest.getDepth() < 2) && updateScope) {\n            updateScope = false;\n            fireEvent(ResolutionListener.UPDATE_SCOPE_CURRENT_POM, listeners, nearest, farthestArtifact);\n        }\n        if (updateScope) {\n            fireEvent(ResolutionListener.UPDATE_SCOPE, listeners, nearest, farthestArtifact);\n            nearestArtifact.setScope(farthestArtifact.getScope());\n        }\n        return updateScope;\n    }\n\n    private void fireEvent(int event, java.util.List listeners, org.apache.maven.artifact.resolver.ResolutionNode node) {\n        fireEvent(event, listeners, node, null);\n    }\n\n    private void fireEvent(int event, java.util.List listeners, org.apache.maven.artifact.resolver.ResolutionNode node, org.apache.maven.artifact.Artifact replacement) {\n        fireEvent(event, listeners, node, replacement, null);\n    }\n\n    private void fireEvent(int event, java.util.List listeners, org.apache.maven.artifact.resolver.ResolutionNode node, org.apache.maven.artifact.Artifact replacement, org.apache.maven.artifact.versioning.VersionRange newRange) {\n        for (java.util.Iterator i = listeners.iterator(); i.hasNext();) {\n            org.apache.maven.artifact.resolver.ResolutionListener listener = ((org.apache.maven.artifact.resolver.ResolutionListener) (i.next()));\n            switch (event) {\n                case ResolutionListener.TEST_ARTIFACT :\n                    listener.testArtifact(node.getArtifact());\n                    break;\n                case ResolutionListener.PROCESS_CHILDREN :\n                    listener.startProcessChildren(node.getArtifact());\n                    break;\n                case ResolutionListener.FINISH_PROCESSING_CHILDREN :\n                    listener.endProcessChildren(node.getArtifact());\n                    break;\n                case ResolutionListener.INCLUDE_ARTIFACT :\n                    listener.includeArtifact(node.getArtifact());\n                    break;\n                case ResolutionListener.OMIT_FOR_NEARER :\n                    java.lang.String version = node.getArtifact().getVersion();\n                    java.lang.String replacementVersion = replacement.getVersion();\n                    if (version != null ? !version.equals(replacementVersion) : replacementVersion != null) {\n                        listener.omitForNearer(node.getArtifact(), replacement);\n                    }\n                    break;\n                case ResolutionListener.OMIT_FOR_CYCLE :\n                    listener.omitForCycle(node.getArtifact());\n                    break;\n                case ResolutionListener.UPDATE_SCOPE :\n                    listener.updateScope(node.getArtifact(), replacement.getScope());\n                    break;\n                case ResolutionListener.UPDATE_SCOPE_CURRENT_POM :\n                    listener.updateScopeCurrentPom(node.getArtifact(), replacement.getScope());\n                    break;\n                case ResolutionListener.MANAGE_ARTIFACT_VERSION :\n                    if (listener instanceof org.apache.maven.artifact.resolver.ResolutionListenerForDepMgmt) {\n                        org.apache.maven.artifact.resolver.ResolutionListenerForDepMgmt asImpl = ((org.apache.maven.artifact.resolver.ResolutionListenerForDepMgmt) (listener));\n                        asImpl.manageArtifactVersion(node.getArtifact(), replacement);\n                    } else {\n                        listener.manageArtifact(node.getArtifact(), replacement);\n                    }\n                    break;\n                case ResolutionListener.MANAGE_ARTIFACT_SCOPE :\n                    if (listener instanceof org.apache.maven.artifact.resolver.ResolutionListenerForDepMgmt) {\n                        org.apache.maven.artifact.resolver.ResolutionListenerForDepMgmt asImpl = ((org.apache.maven.artifact.resolver.ResolutionListenerForDepMgmt) (listener));\n                        asImpl.manageArtifactScope(node.getArtifact(), replacement);\n                    } else {\n                        listener.manageArtifact(node.getArtifact(), replacement);\n                    }\n                    break;\n                case ResolutionListener.SELECT_VERSION_FROM_RANGE :\n                    listener.selectVersionFromRange(node.getArtifact());\n                    break;\n                case ResolutionListener.RESTRICT_RANGE :\n                    if (node.getArtifact().getVersionRange().hasRestrictions() || replacement.getVersionRange().hasRestrictions()) {\n                        listener.restrictRange(node.getArtifact(), replacement, newRange);\n                    }\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Unknown event: \" + event);\n            }\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "getManagedVersionsMap(originatingArtifact, managedVersions)",
            "src_parent": "org.apache.maven.artifact.versioning.ManagedVersionMap versionMap = getManagedVersionsMap(originatingArtifact, managedVersions)",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(managedVersions != null) && (managedVersions instanceof org.apache.maven.artifact.versioning.ManagedVersionMap)",
            "dst_parent": "if ((managedVersions != null) && (managedVersions instanceof org.apache.maven.artifact.versioning.ManagedVersionMap)) {\n    versionMap = ((org.apache.maven.artifact.versioning.ManagedVersionMap) (managedVersions));\n} else {\n    versionMap = new org.apache.maven.artifact.versioning.ManagedVersionMap(managedVersions);\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(managedVersions != null) && (managedVersions instanceof org.apache.maven.artifact.versioning.ManagedVersionMap)",
            "src_parent": "((managedVersions != null) && (managedVersions instanceof org.apache.maven.artifact.versioning.ManagedVersionMap)) ? ((org.apache.maven.artifact.versioning.ManagedVersionMap) (managedVersions)) : new org.apache.maven.artifact.versioning.ManagedVersionMap(managedVersions)",
            "src_parent_type": "Conditional",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "new org.apache.maven.artifact.versioning.ManagedVersionMap(managedVersions)",
            "dst_parent": "versionMap = new org.apache.maven.artifact.versioning.ManagedVersionMap(managedVersions)",
            "dst_parent_type": "Assignment",
            "dst_type": "ConstructorCall",
            "operator": "MOV",
            "src": "new org.apache.maven.artifact.versioning.ManagedVersionMap(managedVersions)",
            "src_parent": "((managedVersions != null) && (managedVersions instanceof org.apache.maven.artifact.versioning.ManagedVersionMap)) ? ((org.apache.maven.artifact.versioning.ManagedVersionMap) (managedVersions)) : new org.apache.maven.artifact.versioning.ManagedVersionMap(managedVersions)",
            "src_parent_type": "Conditional",
            "src_type": "ConstructorCall"
          }
        }
      ],
      "file_name": "DefaultArtifactCollector"
    }
  ],
  "id": "maven_d7422212"
}