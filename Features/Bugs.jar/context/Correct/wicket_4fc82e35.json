{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public static final java.lang.String ENCTYPE_MULTIPART_FORM_DATA = \"multipart/form-data\";",
            "src_parent": "public abstract class WebApplication extends org.apache.wicket.Application {\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.protocol.http.WebApplication.class);\n\n    public static final java.lang.String META_INF_RESOURCES = \"META-INF/resources\";\n\n    private javax.servlet.ServletContext servletContext;\n\n    private final org.apache.wicket.ajax.AjaxRequestTargetListenerCollection ajaxRequestTargetListeners;\n\n    private org.apache.wicket.util.IContextProvider<org.apache.wicket.ajax.AjaxRequestTarget, org.apache.wicket.Page> ajaxRequestTargetProvider;\n\n    private org.apache.wicket.protocol.http.servlet.FilterFactoryManager filterFactoryManager;\n\n    private org.apache.wicket.RuntimeConfigurationType configurationType;\n\n    public static final java.lang.String ENCTYPE_MULTIPART_FORM_DATA = \"multipart/form-data\";\n\n    public static org.apache.wicket.protocol.http.WebApplication get() {\n        org.apache.wicket.Application application = org.apache.wicket.Application.get();\n        if ((application instanceof org.apache.wicket.protocol.http.WebApplication) == false) {\n            throw new org.apache.wicket.WicketRuntimeException(\"The application attached to the current thread is not a \" + org.apache.wicket.protocol.http.WebApplication.class.getSimpleName());\n        }\n        return ((org.apache.wicket.protocol.http.WebApplication) (application));\n    }\n\n    private java.lang.String sessionAttributePrefix;\n\n    private org.apache.wicket.protocol.http.WicketFilter wicketFilter;\n\n    public WebApplication() {\n        ajaxRequestTargetListeners = new org.apache.wicket.ajax.AjaxRequestTargetListenerCollection();\n    }\n\n    @java.lang.Override\n    public final java.lang.String getApplicationKey() {\n        return getName();\n    }\n\n    public java.lang.String getInitParameter(java.lang.String key) {\n        if (wicketFilter != null) {\n            return wicketFilter.getFilterConfig().getInitParameter(key);\n        }\n        throw new java.lang.IllegalStateException((((\"init parameter '\" + key) + \"' is not set yet. Any code in your\") + \" Application object that uses the wicketServlet/Filter instance should be put\") + \" in the init() method instead of your constructor\");\n    }\n\n    public void setServletContext(javax.servlet.ServletContext servletContext) {\n        this.servletContext = servletContext;\n    }\n\n    public javax.servlet.ServletContext getServletContext() {\n        if (servletContext == null) {\n            throw new java.lang.IllegalStateException(\"servletContext is not set yet. Any code in your\" + (\" Application object that uses the wicket filter instance should be put\" + \" in the init() method instead of your constructor\"));\n        }\n        return servletContext;\n    }\n\n    public java.lang.String getSessionAttributePrefix(final org.apache.wicket.request.http.WebRequest request, java.lang.String filterName) {\n        if (sessionAttributePrefix == null) {\n            if (filterName == null) {\n                filterName = getWicketFilter().getFilterConfig().getFilterName();\n            }\n            java.lang.String namespace = getMapperContext().getNamespace();\n            sessionAttributePrefix = ((namespace + ':') + filterName) + ':';\n        }\n        return sessionAttributePrefix;\n    }\n\n    public final org.apache.wicket.protocol.http.WicketFilter getWicketFilter() {\n        return wicketFilter;\n    }\n\n    @java.lang.Override\n    public void logEventTarget(org.apache.wicket.request.IRequestHandler target) {\n        super.logEventTarget(target);\n        org.apache.wicket.protocol.http.IRequestLogger rl = getRequestLogger();\n        if (rl != null) {\n            rl.logEventTarget(target);\n        }\n    }\n\n    @java.lang.Override\n    public void logResponseTarget(org.apache.wicket.request.IRequestHandler target) {\n        super.logResponseTarget(target);\n        org.apache.wicket.protocol.http.IRequestLogger rl = getRequestLogger();\n        if (rl != null) {\n            rl.logResponseTarget(target);\n        }\n    }\n\n    public final void mount(final org.apache.wicket.request.IRequestMapper mapper) {\n        org.apache.wicket.util.lang.Args.notNull(mapper, \"mapper\");\n        getRootRequestMapperAsCompound().add(mapper);\n    }\n\n    public final <T extends org.apache.wicket.Page> void mountPage(final java.lang.String path, final java.lang.Class<T> pageClass) {\n        mount(new org.apache.wicket.core.request.mapper.MountedMapper(path, pageClass));\n    }\n\n    public final void mountResource(final java.lang.String path, final org.apache.wicket.request.resource.ResourceReference reference) {\n        if (reference.canBeRegistered()) {\n            getResourceReferenceRegistry().registerResourceReference(reference);\n        }\n        mount(new org.apache.wicket.core.request.mapper.ResourceMapper(path, reference));\n    }\n\n    public final <P extends org.apache.wicket.Page> void mountPackage(final java.lang.String path, final java.lang.Class<P> pageClass) {\n        org.apache.wicket.core.request.mapper.PackageMapper packageMapper = new org.apache.wicket.core.request.mapper.PackageMapper(org.apache.wicket.util.lang.PackageName.forClass(pageClass));\n        org.apache.wicket.request.mapper.mount.MountMapper mountMapper = new org.apache.wicket.request.mapper.mount.MountMapper(path, packageMapper);\n        mount(mountMapper);\n    }\n\n    public final void unmount(final java.lang.String path) {\n        getRootRequestMapperAsCompound().unmount(path);\n    }\n\n    public final void addResourceReplacement(org.apache.wicket.request.resource.JavaScriptResourceReference base, org.apache.wicket.request.resource.ResourceReference replacement) {\n        org.apache.wicket.resource.bundles.ResourceBundleReference bundle = new org.apache.wicket.resource.bundles.ResourceBundleReference(replacement);\n        bundle.addProvidedResources(org.apache.wicket.markup.head.JavaScriptHeaderItem.forReference(base));\n        getResourceBundles().addBundle(org.apache.wicket.markup.head.JavaScriptHeaderItem.forReference(bundle));\n    }\n\n    public final void addResourceReplacement(org.apache.wicket.request.resource.CssResourceReference base, org.apache.wicket.request.resource.ResourceReference replacement) {\n        org.apache.wicket.resource.bundles.ResourceBundleReference bundle = new org.apache.wicket.resource.bundles.ResourceBundleReference(replacement);\n        bundle.addProvidedResources(org.apache.wicket.markup.head.CssHeaderItem.forReference(base));\n        getResourceBundles().addBundle(org.apache.wicket.markup.head.CssHeaderItem.forReference(bundle));\n    }\n\n    public org.apache.wicket.request.http.WebRequest newWebRequest(javax.servlet.http.HttpServletRequest servletRequest, final java.lang.String filterPath) {\n        return new org.apache.wicket.protocol.http.servlet.ServletWebRequest(servletRequest, filterPath);\n    }\n\n    org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest servletRequest, final java.lang.String filterPath) {\n        if (servletRequest.getCharacterEncoding() == null) {\n            try {\n                java.lang.String wicketAjaxHeader = servletRequest.getHeader(WebRequest.HEADER_AJAX);\n                if (org.apache.wicket.util.string.Strings.isTrue(wicketAjaxHeader)) {\n                    servletRequest.setCharacterEncoding(CharEncoding.UTF_8);\n                } else {\n                    java.lang.String requestEncoding = getRequestCycleSettings().getResponseRequestEncoding();\n                    servletRequest.setCharacterEncoding(requestEncoding);\n                }\n            } catch (java.io.UnsupportedEncodingException e) {\n                throw new org.apache.wicket.WicketRuntimeException(e);\n            }\n        }\n        if (hasFilterFactoryManager()) {\n            for (org.apache.wicket.protocol.http.servlet.AbstractRequestWrapperFactory factory : getFilterFactoryManager()) {\n                servletRequest = factory.getWrapper(servletRequest);\n            }\n        }\n        org.apache.wicket.request.http.WebRequest webRequest = newWebRequest(servletRequest, filterPath);\n        return webRequest;\n    }\n\n    protected org.apache.wicket.request.http.WebResponse newWebResponse(final org.apache.wicket.request.http.WebRequest webRequest, final javax.servlet.http.HttpServletResponse httpServletResponse) {\n        return new org.apache.wicket.protocol.http.servlet.ServletWebResponse(((org.apache.wicket.protocol.http.servlet.ServletWebRequest) (webRequest)), httpServletResponse);\n    }\n\n    org.apache.wicket.request.http.WebResponse createWebResponse(final org.apache.wicket.request.http.WebRequest webRequest, final javax.servlet.http.HttpServletResponse httpServletResponse) {\n        org.apache.wicket.request.http.WebResponse webResponse = newWebResponse(webRequest, httpServletResponse);\n        boolean shouldBufferResponse = getRequestCycleSettings().getBufferResponse();\n        return shouldBufferResponse ? new org.apache.wicket.protocol.http.HeaderBufferingWebResponse(webResponse) : webResponse;\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.Session newSession(org.apache.wicket.request.Request request, org.apache.wicket.request.Response response) {\n        return new org.apache.wicket.protocol.http.WebSession(request);\n    }\n\n    @java.lang.Override\n    public void sessionUnbound(final java.lang.String sessionId) {\n        super.sessionUnbound(sessionId);\n        org.apache.wicket.protocol.http.IRequestLogger logger = getRequestLogger();\n        if (logger != null) {\n            logger.sessionDestroyed(sessionId);\n        }\n    }\n\n    public final void setWicketFilter(final org.apache.wicket.protocol.http.WicketFilter wicketFilter) {\n        org.apache.wicket.util.lang.Args.notNull(wicketFilter, \"wicketFilter\");\n        this.wicketFilter = wicketFilter;\n        servletContext = wicketFilter.getFilterConfig().getServletContext();\n    }\n\n    @java.lang.Override\n    protected void init() {\n        super.init();\n    }\n\n    @java.lang.Override\n    public void internalDestroy() {\n        org.apache.wicket.util.watch.IModificationWatcher resourceWatcher = getResourceSettings().getResourceWatcher(false);\n        if (resourceWatcher != null) {\n            resourceWatcher.destroy();\n        }\n        org.apache.wicket.util.file.IFileCleaner fileCleaner = getResourceSettings().getFileCleaner();\n        if (fileCleaner != null) {\n            fileCleaner.destroy();\n        }\n        super.internalDestroy();\n    }\n\n    @java.lang.Override\n    protected void internalInit() {\n        super.internalInit();\n        getResourceSettings().getResourceFinders().add(new org.apache.wicket.core.util.file.WebApplicationPath(getServletContext(), \"\"));\n        getResourceSettings().getResourceFinders().add(new org.apache.wicket.core.util.resource.ClassPathResourceFinder(org.apache.wicket.protocol.http.WebApplication.META_INF_RESOURCES));\n        getApplicationSettings().setPageExpiredErrorPage(org.apache.wicket.markup.html.pages.PageExpiredErrorPage.class);\n        getApplicationSettings().setInternalErrorPage(org.apache.wicket.markup.html.pages.InternalErrorPage.class);\n        getApplicationSettings().setAccessDeniedPage(org.apache.wicket.markup.html.pages.AccessDeniedPage.class);\n        getPageSettings().addComponentResolver(new org.apache.wicket.markup.resolver.AutoLinkResolver());\n        getPageSettings().addComponentResolver(new org.apache.wicket.markup.html.form.AutoLabelResolver());\n        getPageSettings().addComponentResolver(new org.apache.wicket.markup.html.form.AutoLabelTextResolver());\n        getResourceSettings().setFileCleaner(new org.apache.wicket.util.file.FileCleaner());\n        if (getConfigurationType() == org.apache.wicket.RuntimeConfigurationType.DEVELOPMENT) {\n            java.lang.String resourceFolder = getInitParameter(\"sourceFolder\");\n            if (resourceFolder != null) {\n                getResourceSettings().getResourceFinders().add(new org.apache.wicket.util.file.Path(resourceFolder));\n            }\n        }\n        setPageRendererProvider(new org.apache.wicket.protocol.http.WebApplication.WebPageRendererProvider());\n        setSessionStoreProvider(new org.apache.wicket.protocol.http.WebApplication.WebSessionStoreProvider());\n        setAjaxRequestTargetProvider(new org.apache.wicket.protocol.http.WebApplication.DefaultAjaxRequestTargetProvider());\n        getAjaxRequestTargetListeners().add(new org.apache.wicket.protocol.http.AjaxEnclosureListener());\n        configure();\n    }\n\n    public void setConfigurationType(org.apache.wicket.RuntimeConfigurationType configurationType) {\n        if (this.configurationType != null) {\n            throw new java.lang.IllegalStateException(((\"Configuration type is write-once. You can not change it. \" + (\"\" + \"Current value='\")) + configurationType) + \"'\");\n        }\n        this.configurationType = org.apache.wicket.util.lang.Args.notNull(configurationType, \"configurationType\");\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.RuntimeConfigurationType getConfigurationType() {\n        if (configurationType == null) {\n            java.lang.String result = null;\n            try {\n                result = java.lang.System.getProperty(\"wicket.\" + org.apache.wicket.Application.CONFIGURATION);\n            } catch (java.lang.SecurityException e) {\n            }\n            if (result == null) {\n                result = getInitParameter(\"wicket.\" + org.apache.wicket.Application.CONFIGURATION);\n            }\n            if (result == null) {\n                result = getServletContext().getInitParameter(\"wicket.\" + org.apache.wicket.Application.CONFIGURATION);\n            }\n            if (result == null) {\n                result = getInitParameter(Application.CONFIGURATION);\n            }\n            if (result == null) {\n                result = getServletContext().getInitParameter(Application.CONFIGURATION);\n            }\n            if (result != null) {\n                try {\n                    configurationType = org.apache.wicket.RuntimeConfigurationType.valueOf(result.toUpperCase());\n                } catch (java.lang.IllegalArgumentException e) {\n                    throw new java.lang.IllegalArgumentException((\"Invalid configuration type: '\" + result) + \"\\'.  Must be \\\"development\\\" or \\\"deployment\\\".\");\n                }\n            }\n        }\n        if (configurationType == null) {\n            configurationType = org.apache.wicket.RuntimeConfigurationType.DEVELOPMENT;\n        }\n        return configurationType;\n    }\n\n    public void renderXmlDecl(final org.apache.wicket.markup.html.WebPage page, boolean insert) {\n        if (insert || MarkupType.XML_MIME.equalsIgnoreCase(page.getMarkupType().getMimeType())) {\n            final org.apache.wicket.request.cycle.RequestCycle cycle = org.apache.wicket.request.cycle.RequestCycle.get();\n            if (insert == false) {\n                org.apache.wicket.request.http.WebRequest request = ((org.apache.wicket.request.http.WebRequest) (cycle.getRequest()));\n                java.lang.String accept = request.getHeader(\"Accept\");\n                insert = (accept == null) || (accept.indexOf(MarkupType.XML_MIME) != (-1));\n            }\n            if (insert) {\n                org.apache.wicket.request.http.WebResponse response = ((org.apache.wicket.request.http.WebResponse) (cycle.getResponse()));\n                response.write(\"<?xml version='1.0'\");\n                java.lang.String encoding = getRequestCycleSettings().getResponseRequestEncoding();\n                if (org.apache.wicket.util.string.Strings.isEmpty(encoding) == false) {\n                    response.write(\" encoding='\");\n                    response.write(encoding);\n                    response.write(\"'\");\n                }\n                response.write(\" ?>\");\n            }\n        }\n    }\n\n    public final org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(final org.apache.wicket.Page page) {\n        org.apache.wicket.ajax.AjaxRequestTarget target = getAjaxRequestTargetProvider().get(page);\n        for (org.apache.wicket.ajax.AjaxRequestTarget.IListener listener : ajaxRequestTargetListeners) {\n            target.addListener(listener);\n        }\n        return target;\n    }\n\n    final void logStarted() {\n        if (org.apache.wicket.protocol.http.WebApplication.log.isInfoEnabled()) {\n            java.lang.String version = getFrameworkSettings().getVersion();\n            java.lang.StringBuilder b = new java.lang.StringBuilder();\n            b.append(\"[\").append(getName()).append(\"] Started Wicket \");\n            if (!\"n/a\".equals(version)) {\n                b.append(\"version \").append(version).append(\" \");\n            }\n            b.append(\"in \").append(getConfigurationType()).append(\" mode\");\n            org.apache.wicket.protocol.http.WebApplication.log.info(b.toString());\n        }\n        if (usesDevelopmentConfig()) {\n            outputDevelopmentModeWarning();\n        }\n    }\n\n    protected void outputDevelopmentModeWarning() {\n        java.lang.System.err.print(\"********************************************************************\\n\" + ((((\"*** WARNING: Wicket is running in DEVELOPMENT mode.              ***\\n\" + \"***                               ^^^^^^^^^^^                    ***\\n\") + \"*** Do NOT deploy to your live server(s) without changing this.  ***\\n\") + \"*** See Application#getConfigurationType() for more information. ***\\n\") + \"********************************************************************\\n\"));\n    }\n\n    private final org.apache.wicket.protocol.http.StoredResponsesMap storedResponses = new org.apache.wicket.protocol.http.StoredResponsesMap(1000, org.apache.wicket.util.time.Duration.seconds(60));\n\n    public boolean hasBufferedResponse(java.lang.String sessionId, org.apache.wicket.request.Url url) {\n        java.lang.String key = sessionId + url.toString();\n        return storedResponses.containsKey(key);\n    }\n\n    public org.apache.wicket.protocol.http.BufferedWebResponse getAndRemoveBufferedResponse(java.lang.String sessionId, org.apache.wicket.request.Url url) {\n        java.lang.String key = sessionId + url.toString();\n        return storedResponses.remove(key);\n    }\n\n    public void storeBufferedResponse(java.lang.String sessionId, org.apache.wicket.request.Url url, org.apache.wicket.protocol.http.BufferedWebResponse response) {\n        java.lang.String key = sessionId + url.toString();\n        storedResponses.put(key, response);\n    }\n\n    @java.lang.Override\n    public java.lang.String getMimeType(java.lang.String fileName) {\n        java.lang.String mimeType = getServletContext().getMimeType(fileName);\n        return mimeType != null ? mimeType : super.getMimeType(fileName);\n    }\n\n    private static class WebPageRendererProvider implements org.apache.wicket.IPageRendererProvider {\n        @java.lang.Override\n        public org.apache.wicket.request.handler.render.PageRenderer get(org.apache.wicket.core.request.handler.RenderPageRequestHandler handler) {\n            return new org.apache.wicket.request.handler.render.WebPageRenderer(handler);\n        }\n    }\n\n    private static class WebSessionStoreProvider implements org.apache.wicket.util.IProvider<org.apache.wicket.session.ISessionStore> {\n        @java.lang.Override\n        public org.apache.wicket.session.ISessionStore get() {\n            return new org.apache.wicket.session.HttpSessionStore();\n        }\n    }\n\n    public org.apache.wicket.util.IContextProvider<org.apache.wicket.ajax.AjaxRequestTarget, org.apache.wicket.Page> getAjaxRequestTargetProvider() {\n        return ajaxRequestTargetProvider;\n    }\n\n    public void setAjaxRequestTargetProvider(org.apache.wicket.util.IContextProvider<org.apache.wicket.ajax.AjaxRequestTarget, org.apache.wicket.Page> ajaxRequestTargetProvider) {\n        this.ajaxRequestTargetProvider = ajaxRequestTargetProvider;\n    }\n\n    public org.apache.wicket.ajax.AjaxRequestTargetListenerCollection getAjaxRequestTargetListeners() {\n        return ajaxRequestTargetListeners;\n    }\n\n    private static class DefaultAjaxRequestTargetProvider implements org.apache.wicket.util.IContextProvider<org.apache.wicket.ajax.AjaxRequestTarget, org.apache.wicket.Page> {\n        @java.lang.Override\n        public org.apache.wicket.ajax.AjaxRequestTarget get(org.apache.wicket.Page page) {\n            return new org.apache.wicket.ajax.AjaxRequestHandler(page);\n        }\n    }\n\n    public final boolean hasFilterFactoryManager() {\n        return filterFactoryManager != null;\n    }\n\n    public final org.apache.wicket.protocol.http.servlet.FilterFactoryManager getFilterFactoryManager() {\n        if (filterFactoryManager == null) {\n            filterFactoryManager = new org.apache.wicket.protocol.http.servlet.FilterFactoryManager();\n        }\n        return filterFactoryManager;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        }
      ],
      "file_name": "WebApplication"
    }
  ],
  "id": "wicket_4fc82e35"
}