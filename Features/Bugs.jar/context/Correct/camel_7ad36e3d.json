{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.camel.Producer target",
            "dst_parent": "{\n    org.apache.camel.Producer target;\n    try {\n        target = doGetProducer(endpoint, true);\n        if (target == null) {\n            if (isStopped()) {\n                org.apache.camel.impl.ProducerCache.LOG.warn(\"Ignoring exchange sent after processor is stopped: \" + exchange);\n                callback.done(true);\n                return true;\n            } else {\n                exchange.setException(new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this));\n                callback.done(true);\n                return true;\n            }\n        }\n    } catch (java.lang.Throwable e) {\n        exchange.setException(e);\n        callback.done(true);\n        return true;\n    }\n    final org.apache.camel.Producer producer = target;\n    final org.apache.camel.util.StopWatch watch = (eventNotifierEnabled && (exchange != null)) ? new org.apache.camel.util.StopWatch() : null;\n    try {\n        if (eventNotifierEnabled && (exchange != null)) {\n            org.apache.camel.util.EventHelper.notifyExchangeSending(exchange.getContext(), exchange, endpoint);\n        }\n        org.apache.camel.AsyncProcessor asyncProcessor = org.apache.camel.util.AsyncProcessorConverterHelper.convert(producer);\n        return producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, new org.apache.camel.AsyncCallback() {\n            @java.lang.Override\n            public void done(boolean doneSync) {\n                try {\n                    if (eventNotifierEnabled && (watch != null)) {\n                        long timeTaken = watch.stop();\n                        org.apache.camel.util.EventHelper.notifyExchangeSent(exchange.getContext(), exchange, endpoint, timeTaken);\n                    }\n                    if (producer instanceof org.apache.camel.ServicePoolAware) {\n                        pool.release(endpoint, producer);\n                    } else if (!producer.isSingleton()) {\n                        try {\n                            org.apache.camel.util.ServiceHelper.stopAndShutdownService(producer);\n                        } catch (java.lang.Exception e) {\n                            org.apache.camel.impl.ProducerCache.LOG.warn(\"Error stopping/shutting down producer: \" + producer, e);\n                        }\n                    }\n                } finally {\n                    callback.done(doneSync);\n                }\n            }\n        });\n    } catch (java.lang.Throwable e) {\n        if (exchange != null) {\n            exchange.setException(e);\n        }\n        callback.done(true);\n        return true;\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "UPD",
            "src": "final org.apache.camel.Producer producer = doGetProducer(endpoint, true)",
            "src_parent": "{\n    boolean sync = true;\n    final org.apache.camel.Producer producer = doGetProducer(endpoint, true);\n    if (producer == null) {\n        if (isStopped()) {\n            org.apache.camel.impl.ProducerCache.LOG.warn(\"Ignoring exchange sent after processor is stopped: \" + exchange);\n            return false;\n        } else {\n            throw new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this);\n        }\n    }\n    final org.apache.camel.util.StopWatch watch = (eventNotifierEnabled && (exchange != null)) ? new org.apache.camel.util.StopWatch() : null;\n    try {\n        if (eventNotifierEnabled && (exchange != null)) {\n            org.apache.camel.util.EventHelper.notifyExchangeSending(exchange.getContext(), exchange, endpoint);\n        }\n        org.apache.camel.AsyncProcessor asyncProcessor = org.apache.camel.util.AsyncProcessorConverterHelper.convert(producer);\n        sync = producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, new org.apache.camel.AsyncCallback() {\n            @java.lang.Override\n            public void done(boolean doneSync) {\n                try {\n                    if (eventNotifierEnabled && (watch != null)) {\n                        long timeTaken = watch.stop();\n                        org.apache.camel.util.EventHelper.notifyExchangeSent(exchange.getContext(), exchange, endpoint, timeTaken);\n                    }\n                    if (producer instanceof org.apache.camel.ServicePoolAware) {\n                        pool.release(endpoint, producer);\n                    } else if (!producer.isSingleton()) {\n                        try {\n                            org.apache.camel.util.ServiceHelper.stopAndShutdownService(producer);\n                        } catch (java.lang.Exception e) {\n                            org.apache.camel.impl.ProducerCache.LOG.warn(\"Error stopping/shutting down producer: \" + producer, e);\n                        }\n                    }\n                } finally {\n                    callback.done(doneSync);\n                }\n            }\n        });\n    } catch (java.lang.Throwable e) {\n        if (exchange != null) {\n            exchange.setException(e);\n        }\n    }\n    return sync;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "target",
            "dst_parent": "target == null",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "producer",
            "src_parent": "producer == null",
            "src_parent_type": "BinaryOperator",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "true",
            "dst_parent": "return true",
            "dst_parent_type": "Return",
            "dst_type": "Literal",
            "operator": "UPD",
            "src": "false",
            "src_parent": "return false",
            "src_parent_type": "Return",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "boolean sync = true",
            "src_parent": "{\n    boolean sync = true;\n    final org.apache.camel.Producer producer = doGetProducer(endpoint, true);\n    if (producer == null) {\n        if (isStopped()) {\n            org.apache.camel.impl.ProducerCache.LOG.warn(\"Ignoring exchange sent after processor is stopped: \" + exchange);\n            return false;\n        } else {\n            throw new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this);\n        }\n    }\n    final org.apache.camel.util.StopWatch watch = (eventNotifierEnabled && (exchange != null)) ? new org.apache.camel.util.StopWatch() : null;\n    try {\n        if (eventNotifierEnabled && (exchange != null)) {\n            org.apache.camel.util.EventHelper.notifyExchangeSending(exchange.getContext(), exchange, endpoint);\n        }\n        org.apache.camel.AsyncProcessor asyncProcessor = org.apache.camel.util.AsyncProcessorConverterHelper.convert(producer);\n        sync = producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, new org.apache.camel.AsyncCallback() {\n            @java.lang.Override\n            public void done(boolean doneSync) {\n                try {\n                    if (eventNotifierEnabled && (watch != null)) {\n                        long timeTaken = watch.stop();\n                        org.apache.camel.util.EventHelper.notifyExchangeSent(exchange.getContext(), exchange, endpoint, timeTaken);\n                    }\n                    if (producer instanceof org.apache.camel.ServicePoolAware) {\n                        pool.release(endpoint, producer);\n                    } else if (!producer.isSingleton()) {\n                        try {\n                            org.apache.camel.util.ServiceHelper.stopAndShutdownService(producer);\n                        } catch (java.lang.Exception e) {\n                            org.apache.camel.impl.ProducerCache.LOG.warn(\"Error stopping/shutting down producer: \" + producer, e);\n                        }\n                    }\n                } finally {\n                    callback.done(doneSync);\n                }\n            }\n        });\n    } catch (java.lang.Throwable e) {\n        if (exchange != null) {\n            exchange.setException(e);\n        }\n    }\n    return sync;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "throw new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this)",
            "src_parent": "{\n    throw new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this);\n}",
            "src_parent_type": "Block",
            "src_type": "Throw"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (producer == null) {\n    if (isStopped()) {\n        org.apache.camel.impl.ProducerCache.LOG.warn(\"Ignoring exchange sent after processor is stopped: \" + exchange);\n        return false;\n    } else {\n        throw new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this);\n    }\n}",
            "src_parent": "{\n    boolean sync = true;\n    final org.apache.camel.Producer producer = doGetProducer(endpoint, true);\n    if (producer == null) {\n        if (isStopped()) {\n            org.apache.camel.impl.ProducerCache.LOG.warn(\"Ignoring exchange sent after processor is stopped: \" + exchange);\n            return false;\n        } else {\n            throw new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this);\n        }\n    }\n    final org.apache.camel.util.StopWatch watch = (eventNotifierEnabled && (exchange != null)) ? new org.apache.camel.util.StopWatch() : null;\n    try {\n        if (eventNotifierEnabled && (exchange != null)) {\n            org.apache.camel.util.EventHelper.notifyExchangeSending(exchange.getContext(), exchange, endpoint);\n        }\n        org.apache.camel.AsyncProcessor asyncProcessor = org.apache.camel.util.AsyncProcessorConverterHelper.convert(producer);\n        sync = producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, new org.apache.camel.AsyncCallback() {\n            @java.lang.Override\n            public void done(boolean doneSync) {\n                try {\n                    if (eventNotifierEnabled && (watch != null)) {\n                        long timeTaken = watch.stop();\n                        org.apache.camel.util.EventHelper.notifyExchangeSent(exchange.getContext(), exchange, endpoint, timeTaken);\n                    }\n                    if (producer instanceof org.apache.camel.ServicePoolAware) {\n                        pool.release(endpoint, producer);\n                    } else if (!producer.isSingleton()) {\n                        try {\n                            org.apache.camel.util.ServiceHelper.stopAndShutdownService(producer);\n                        } catch (java.lang.Exception e) {\n                            org.apache.camel.impl.ProducerCache.LOG.warn(\"Error stopping/shutting down producer: \" + producer, e);\n                        }\n                    }\n                } finally {\n                    callback.done(doneSync);\n                }\n            }\n        });\n    } catch (java.lang.Throwable e) {\n        if (exchange != null) {\n            exchange.setException(e);\n        }\n    }\n    return sync;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "sync = producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, new org.apache.camel.AsyncCallback() {\n    @java.lang.Override\n    public void done(boolean doneSync) {\n        try {\n            if (eventNotifierEnabled && (watch != null)) {\n                long timeTaken = watch.stop();\n                org.apache.camel.util.EventHelper.notifyExchangeSent(exchange.getContext(), exchange, endpoint, timeTaken);\n            }\n            if (producer instanceof org.apache.camel.ServicePoolAware) {\n                pool.release(endpoint, producer);\n            } else if (!producer.isSingleton()) {\n                try {\n                    org.apache.camel.util.ServiceHelper.stopAndShutdownService(producer);\n                } catch (java.lang.Exception e) {\n                    org.apache.camel.impl.ProducerCache.LOG.warn(\"Error stopping/shutting down producer: \" + producer, e);\n                }\n            }\n        } finally {\n            callback.done(doneSync);\n        }\n    }\n})",
            "src_parent": "{\n    if (eventNotifierEnabled && (exchange != null)) {\n        org.apache.camel.util.EventHelper.notifyExchangeSending(exchange.getContext(), exchange, endpoint);\n    }\n    org.apache.camel.AsyncProcessor asyncProcessor = org.apache.camel.util.AsyncProcessorConverterHelper.convert(producer);\n    sync = producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, new org.apache.camel.AsyncCallback() {\n        @java.lang.Override\n        public void done(boolean doneSync) {\n            try {\n                if (eventNotifierEnabled && (watch != null)) {\n                    long timeTaken = watch.stop();\n                    org.apache.camel.util.EventHelper.notifyExchangeSent(exchange.getContext(), exchange, endpoint, timeTaken);\n                }\n                if (producer instanceof org.apache.camel.ServicePoolAware) {\n                    pool.release(endpoint, producer);\n                } else if (!producer.isSingleton()) {\n                    try {\n                        org.apache.camel.util.ServiceHelper.stopAndShutdownService(producer);\n                    } catch (java.lang.Exception e) {\n                        org.apache.camel.impl.ProducerCache.LOG.warn(\"Error stopping/shutting down producer: \" + producer, e);\n                    }\n                }\n            } finally {\n                callback.done(doneSync);\n            }\n        }\n    });\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "return sync",
            "src_parent": "{\n    boolean sync = true;\n    final org.apache.camel.Producer producer = doGetProducer(endpoint, true);\n    if (producer == null) {\n        if (isStopped()) {\n            org.apache.camel.impl.ProducerCache.LOG.warn(\"Ignoring exchange sent after processor is stopped: \" + exchange);\n            return false;\n        } else {\n            throw new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this);\n        }\n    }\n    final org.apache.camel.util.StopWatch watch = (eventNotifierEnabled && (exchange != null)) ? new org.apache.camel.util.StopWatch() : null;\n    try {\n        if (eventNotifierEnabled && (exchange != null)) {\n            org.apache.camel.util.EventHelper.notifyExchangeSending(exchange.getContext(), exchange, endpoint);\n        }\n        org.apache.camel.AsyncProcessor asyncProcessor = org.apache.camel.util.AsyncProcessorConverterHelper.convert(producer);\n        sync = producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, new org.apache.camel.AsyncCallback() {\n            @java.lang.Override\n            public void done(boolean doneSync) {\n                try {\n                    if (eventNotifierEnabled && (watch != null)) {\n                        long timeTaken = watch.stop();\n                        org.apache.camel.util.EventHelper.notifyExchangeSent(exchange.getContext(), exchange, endpoint, timeTaken);\n                    }\n                    if (producer instanceof org.apache.camel.ServicePoolAware) {\n                        pool.release(endpoint, producer);\n                    } else if (!producer.isSingleton()) {\n                        try {\n                            org.apache.camel.util.ServiceHelper.stopAndShutdownService(producer);\n                        } catch (java.lang.Exception e) {\n                            org.apache.camel.impl.ProducerCache.LOG.warn(\"Error stopping/shutting down producer: \" + producer, e);\n                        }\n                    }\n                } finally {\n                    callback.done(doneSync);\n                }\n            }\n        });\n    } catch (java.lang.Throwable e) {\n        if (exchange != null) {\n            exchange.setException(e);\n        }\n    }\n    return sync;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "try {\n    target = doGetProducer(endpoint, true);\n    if (target == null) {\n        if (isStopped()) {\n            org.apache.camel.impl.ProducerCache.LOG.warn(\"Ignoring exchange sent after processor is stopped: \" + exchange);\n            callback.done(true);\n            return true;\n        } else {\n            exchange.setException(new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this));\n            callback.done(true);\n            return true;\n        }\n    }\n} catch (java.lang.Throwable e) {\n    exchange.setException(e);\n    callback.done(true);\n    return true;\n}",
            "src_parent": "{\n    org.apache.camel.Producer target;\n    try {\n        target = doGetProducer(endpoint, true);\n        if (target == null) {\n            if (isStopped()) {\n                org.apache.camel.impl.ProducerCache.LOG.warn(\"Ignoring exchange sent after processor is stopped: \" + exchange);\n                callback.done(true);\n                return true;\n            } else {\n                exchange.setException(new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this));\n                callback.done(true);\n                return true;\n            }\n        }\n    } catch (java.lang.Throwable e) {\n        exchange.setException(e);\n        callback.done(true);\n        return true;\n    }\n    final org.apache.camel.Producer producer = target;\n    final org.apache.camel.util.StopWatch watch = (eventNotifierEnabled && (exchange != null)) ? new org.apache.camel.util.StopWatch() : null;\n    try {\n        if (eventNotifierEnabled && (exchange != null)) {\n            org.apache.camel.util.EventHelper.notifyExchangeSending(exchange.getContext(), exchange, endpoint);\n        }\n        org.apache.camel.AsyncProcessor asyncProcessor = org.apache.camel.util.AsyncProcessorConverterHelper.convert(producer);\n        return producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, new org.apache.camel.AsyncCallback() {\n            @java.lang.Override\n            public void done(boolean doneSync) {\n                try {\n                    if (eventNotifierEnabled && (watch != null)) {\n                        long timeTaken = watch.stop();\n                        org.apache.camel.util.EventHelper.notifyExchangeSent(exchange.getContext(), exchange, endpoint, timeTaken);\n                    }\n                    if (producer instanceof org.apache.camel.ServicePoolAware) {\n                        pool.release(endpoint, producer);\n                    } else if (!producer.isSingleton()) {\n                        try {\n                            org.apache.camel.util.ServiceHelper.stopAndShutdownService(producer);\n                        } catch (java.lang.Exception e) {\n                            org.apache.camel.impl.ProducerCache.LOG.warn(\"Error stopping/shutting down producer: \" + producer, e);\n                        }\n                    }\n                } finally {\n                    callback.done(doneSync);\n                }\n            }\n        });\n    } catch (java.lang.Throwable e) {\n        if (exchange != null) {\n            exchange.setException(e);\n        }\n        callback.done(true);\n        return true;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Try"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "final org.apache.camel.Producer producer = target",
            "src_parent": "{\n    org.apache.camel.Producer target;\n    try {\n        target = doGetProducer(endpoint, true);\n        if (target == null) {\n            if (isStopped()) {\n                org.apache.camel.impl.ProducerCache.LOG.warn(\"Ignoring exchange sent after processor is stopped: \" + exchange);\n                callback.done(true);\n                return true;\n            } else {\n                exchange.setException(new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this));\n                callback.done(true);\n                return true;\n            }\n        }\n    } catch (java.lang.Throwable e) {\n        exchange.setException(e);\n        callback.done(true);\n        return true;\n    }\n    final org.apache.camel.Producer producer = target;\n    final org.apache.camel.util.StopWatch watch = (eventNotifierEnabled && (exchange != null)) ? new org.apache.camel.util.StopWatch() : null;\n    try {\n        if (eventNotifierEnabled && (exchange != null)) {\n            org.apache.camel.util.EventHelper.notifyExchangeSending(exchange.getContext(), exchange, endpoint);\n        }\n        org.apache.camel.AsyncProcessor asyncProcessor = org.apache.camel.util.AsyncProcessorConverterHelper.convert(producer);\n        return producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, new org.apache.camel.AsyncCallback() {\n            @java.lang.Override\n            public void done(boolean doneSync) {\n                try {\n                    if (eventNotifierEnabled && (watch != null)) {\n                        long timeTaken = watch.stop();\n                        org.apache.camel.util.EventHelper.notifyExchangeSent(exchange.getContext(), exchange, endpoint, timeTaken);\n                    }\n                    if (producer instanceof org.apache.camel.ServicePoolAware) {\n                        pool.release(endpoint, producer);\n                    } else if (!producer.isSingleton()) {\n                        try {\n                            org.apache.camel.util.ServiceHelper.stopAndShutdownService(producer);\n                        } catch (java.lang.Exception e) {\n                            org.apache.camel.impl.ProducerCache.LOG.warn(\"Error stopping/shutting down producer: \" + producer, e);\n                        }\n                    }\n                } finally {\n                    callback.done(doneSync);\n                }\n            }\n        });\n    } catch (java.lang.Throwable e) {\n        if (exchange != null) {\n            exchange.setException(e);\n        }\n        callback.done(true);\n        return true;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "return producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, new org.apache.camel.AsyncCallback() {\n    @java.lang.Override\n    public void done(boolean doneSync) {\n        try {\n            if (eventNotifierEnabled && (watch != null)) {\n                long timeTaken = watch.stop();\n                org.apache.camel.util.EventHelper.notifyExchangeSent(exchange.getContext(), exchange, endpoint, timeTaken);\n            }\n            if (producer instanceof org.apache.camel.ServicePoolAware) {\n                pool.release(endpoint, producer);\n            } else if (!producer.isSingleton()) {\n                try {\n                    org.apache.camel.util.ServiceHelper.stopAndShutdownService(producer);\n                } catch (java.lang.Exception e) {\n                    org.apache.camel.impl.ProducerCache.LOG.warn(\"Error stopping/shutting down producer: \" + producer, e);\n                }\n            }\n        } finally {\n            callback.done(doneSync);\n        }\n    }\n})",
            "src_parent": "{\n    if (eventNotifierEnabled && (exchange != null)) {\n        org.apache.camel.util.EventHelper.notifyExchangeSending(exchange.getContext(), exchange, endpoint);\n    }\n    org.apache.camel.AsyncProcessor asyncProcessor = org.apache.camel.util.AsyncProcessorConverterHelper.convert(producer);\n    return producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, new org.apache.camel.AsyncCallback() {\n        @java.lang.Override\n        public void done(boolean doneSync) {\n            try {\n                if (eventNotifierEnabled && (watch != null)) {\n                    long timeTaken = watch.stop();\n                    org.apache.camel.util.EventHelper.notifyExchangeSent(exchange.getContext(), exchange, endpoint, timeTaken);\n                }\n                if (producer instanceof org.apache.camel.ServicePoolAware) {\n                    pool.release(endpoint, producer);\n                } else if (!producer.isSingleton()) {\n                    try {\n                        org.apache.camel.util.ServiceHelper.stopAndShutdownService(producer);\n                    } catch (java.lang.Exception e) {\n                        org.apache.camel.impl.ProducerCache.LOG.warn(\"Error stopping/shutting down producer: \" + producer, e);\n                    }\n                }\n            } finally {\n                callback.done(doneSync);\n            }\n        }\n    });\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "callback.done(true)",
            "src_parent": "{\n    if (exchange != null) {\n        exchange.setException(e);\n    }\n    callback.done(true);\n    return true;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "return true",
            "src_parent": "{\n    if (exchange != null) {\n        exchange.setException(e);\n    }\n    callback.done(true);\n    return true;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "callback.done(true)",
            "src_parent": "{\n    org.apache.camel.impl.ProducerCache.LOG.warn(\"Ignoring exchange sent after processor is stopped: \" + exchange);\n    callback.done(true);\n    return true;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "exchange.setException(new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this))",
            "src_parent": "{\n    exchange.setException(new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this));\n    callback.done(true);\n    return true;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "callback.done(true)",
            "src_parent": "{\n    exchange.setException(new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this));\n    callback.done(true);\n    return true;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "return true",
            "src_parent": "{\n    exchange.setException(new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this));\n    callback.done(true);\n    return true;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_LocalVariable",
            "dst_parent": "final org.apache.camel.Producer producer = target",
            "dst_parent_type": "LocalVariable",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_LocalVariable",
            "src_parent": "final org.apache.camel.Producer producer = doGetProducer(endpoint, true)",
            "src_parent_type": "LocalVariable",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "doGetProducer(endpoint, true)",
            "dst_parent": "target = doGetProducer(endpoint, true)",
            "dst_parent_type": "Assignment",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "doGetProducer(endpoint, true)",
            "src_parent": "final org.apache.camel.Producer producer = doGetProducer(endpoint, true)",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "target == null",
            "dst_parent": "if (target == null) {\n    if (isStopped()) {\n        org.apache.camel.impl.ProducerCache.LOG.warn(\"Ignoring exchange sent after processor is stopped: \" + exchange);\n        callback.done(true);\n        return true;\n    } else {\n        exchange.setException(new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this));\n        callback.done(true);\n        return true;\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "producer == null",
            "src_parent": "if (producer == null) {\n    if (isStopped()) {\n        org.apache.camel.impl.ProducerCache.LOG.warn(\"Ignoring exchange sent after processor is stopped: \" + exchange);\n        return false;\n    } else {\n        throw new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this);\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    if (isStopped()) {\n        org.apache.camel.impl.ProducerCache.LOG.warn(\"Ignoring exchange sent after processor is stopped: \" + exchange);\n        callback.done(true);\n        return true;\n    } else {\n        exchange.setException(new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this));\n        callback.done(true);\n        return true;\n    }\n}",
            "dst_parent": "if (target == null) {\n    if (isStopped()) {\n        org.apache.camel.impl.ProducerCache.LOG.warn(\"Ignoring exchange sent after processor is stopped: \" + exchange);\n        callback.done(true);\n        return true;\n    } else {\n        exchange.setException(new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this));\n        callback.done(true);\n        return true;\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    if (isStopped()) {\n        org.apache.camel.impl.ProducerCache.LOG.warn(\"Ignoring exchange sent after processor is stopped: \" + exchange);\n        return false;\n    } else {\n        throw new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this);\n    }\n}",
            "src_parent": "if (producer == null) {\n    if (isStopped()) {\n        org.apache.camel.impl.ProducerCache.LOG.warn(\"Ignoring exchange sent after processor is stopped: \" + exchange);\n        return false;\n    } else {\n        throw new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this);\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, new org.apache.camel.AsyncCallback() {\n    @java.lang.Override\n    public void done(boolean doneSync) {\n        try {\n            if (eventNotifierEnabled && (watch != null)) {\n                long timeTaken = watch.stop();\n                org.apache.camel.util.EventHelper.notifyExchangeSent(exchange.getContext(), exchange, endpoint, timeTaken);\n            }\n            if (producer instanceof org.apache.camel.ServicePoolAware) {\n                pool.release(endpoint, producer);\n            } else if (!producer.isSingleton()) {\n                try {\n                    org.apache.camel.util.ServiceHelper.stopAndShutdownService(producer);\n                } catch (java.lang.Exception e) {\n                    org.apache.camel.impl.ProducerCache.LOG.warn(\"Error stopping/shutting down producer: \" + producer, e);\n                }\n            }\n        } finally {\n            callback.done(doneSync);\n        }\n    }\n})",
            "dst_parent": "return producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, new org.apache.camel.AsyncCallback() {\n    @java.lang.Override\n    public void done(boolean doneSync) {\n        try {\n            if (eventNotifierEnabled && (watch != null)) {\n                long timeTaken = watch.stop();\n                org.apache.camel.util.EventHelper.notifyExchangeSent(exchange.getContext(), exchange, endpoint, timeTaken);\n            }\n            if (producer instanceof org.apache.camel.ServicePoolAware) {\n                pool.release(endpoint, producer);\n            } else if (!producer.isSingleton()) {\n                try {\n                    org.apache.camel.util.ServiceHelper.stopAndShutdownService(producer);\n                } catch (java.lang.Exception e) {\n                    org.apache.camel.impl.ProducerCache.LOG.warn(\"Error stopping/shutting down producer: \" + producer, e);\n                }\n            }\n        } finally {\n            callback.done(doneSync);\n        }\n    }\n})",
            "dst_parent_type": "Return",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, new org.apache.camel.AsyncCallback() {\n    @java.lang.Override\n    public void done(boolean doneSync) {\n        try {\n            if (eventNotifierEnabled && (watch != null)) {\n                long timeTaken = watch.stop();\n                org.apache.camel.util.EventHelper.notifyExchangeSent(exchange.getContext(), exchange, endpoint, timeTaken);\n            }\n            if (producer instanceof org.apache.camel.ServicePoolAware) {\n                pool.release(endpoint, producer);\n            } else if (!producer.isSingleton()) {\n                try {\n                    org.apache.camel.util.ServiceHelper.stopAndShutdownService(producer);\n                } catch (java.lang.Exception e) {\n                    org.apache.camel.impl.ProducerCache.LOG.warn(\"Error stopping/shutting down producer: \" + producer, e);\n                }\n            }\n        } finally {\n            callback.done(doneSync);\n        }\n    }\n})",
            "src_parent": "sync = producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, new org.apache.camel.AsyncCallback() {\n    @java.lang.Override\n    public void done(boolean doneSync) {\n        try {\n            if (eventNotifierEnabled && (watch != null)) {\n                long timeTaken = watch.stop();\n                org.apache.camel.util.EventHelper.notifyExchangeSent(exchange.getContext(), exchange, endpoint, timeTaken);\n            }\n            if (producer instanceof org.apache.camel.ServicePoolAware) {\n                pool.release(endpoint, producer);\n            } else if (!producer.isSingleton()) {\n                try {\n                    org.apache.camel.util.ServiceHelper.stopAndShutdownService(producer);\n                } catch (java.lang.Exception e) {\n                    org.apache.camel.impl.ProducerCache.LOG.warn(\"Error stopping/shutting down producer: \" + producer, e);\n                }\n            }\n        } finally {\n            callback.done(doneSync);\n        }\n    }\n})",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Throw",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this)",
            "dst_parent": "exchange.setException(new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this))",
            "dst_parent_type": "Invocation",
            "dst_type": "ConstructorCall",
            "operator": "MOV",
            "src": "new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this)",
            "src_parent": "throw new java.lang.IllegalStateException(\"No producer, this processor has not been started: \" + this)",
            "src_parent_type": "Throw",
            "src_type": "ConstructorCall"
          }
        }
      ],
      "file_name": "ProducerCache"
    }
  ],
  "id": "camel_7ad36e3d"
}