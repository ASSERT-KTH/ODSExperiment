{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "v",
            "dst_parent": "map.put(k, v)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "k",
            "src_parent": "find(k)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "this.peek(((K) (key)))",
            "dst_parent": "return this.peek(((K) (key)))",
            "dst_parent_type": "Return",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "this.getUnchecked(((K) (key)))",
            "src_parent": "return this.getUnchecked(((K) (key)))",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> find(java.lang.Object key) {\n    int hash = org.apache.jackrabbit.oak.cache.CacheLIRS.getHash(key);\n    return getSegment(hash).find(key, hash);\n}",
            "src_parent": "public class CacheLIRS<K, V> implements com.google.common.cache.LoadingCache<K, V> {\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.cache.CacheLIRS.class);\n\n    private long maxMemory;\n\n    private int averageMemory;\n\n    private final org.apache.jackrabbit.oak.cache.CacheLIRS.Segment<K, V>[] segments;\n\n    private final int segmentCount;\n\n    private final int segmentShift;\n\n    private final int segmentMask;\n\n    private final int stackMoveDistance;\n\n    private final com.google.common.cache.Weigher<K, V> weigher;\n\n    private final com.google.common.cache.CacheLoader<K, V> loader;\n\n    public CacheLIRS(int maxEntries) {\n        this(null, maxEntries, 1, 16, maxEntries / 100, null);\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    CacheLIRS(com.google.common.cache.Weigher<K, V> weigher, long maxMemory, int averageMemory, int segmentCount, int stackMoveDistance, final com.google.common.cache.CacheLoader<K, V> loader) {\n        this.weigher = weigher;\n        setMaxMemory(maxMemory);\n        setAverageMemory(averageMemory);\n        if (java.lang.Integer.bitCount(segmentCount) != 1) {\n            throw new java.lang.IllegalArgumentException(\"The segment count must be a power of 2, is \" + segmentCount);\n        }\n        this.segmentCount = segmentCount;\n        this.segmentMask = segmentCount - 1;\n        this.stackMoveDistance = stackMoveDistance;\n        segments = new org.apache.jackrabbit.oak.cache.CacheLIRS.Segment[segmentCount];\n        invalidateAll();\n        this.segmentShift = java.lang.Integer.numberOfTrailingZeros(segments[0].entries.length);\n        this.loader = loader;\n    }\n\n    @java.lang.Override\n    public void invalidateAll() {\n        long max = java.lang.Math.max(1, maxMemory / segmentCount);\n        for (int i = 0; i < segmentCount; i++) {\n            org.apache.jackrabbit.oak.cache.CacheLIRS.Segment<K, V> old = segments[i];\n            org.apache.jackrabbit.oak.cache.CacheLIRS.Segment<K, V> s = new org.apache.jackrabbit.oak.cache.CacheLIRS.Segment<K, V>(this, max, averageMemory, stackMoveDistance);\n            if (old != null) {\n                s.hitCount = old.hitCount;\n                s.missCount = old.missCount;\n                s.loadSuccessCount = old.loadSuccessCount;\n                s.loadExceptionCount = old.loadExceptionCount;\n                s.totalLoadTime = old.totalLoadTime;\n                s.evictionCount = old.evictionCount;\n            }\n            segments[i] = s;\n        }\n    }\n\n    private org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> find(java.lang.Object key) {\n        int hash = org.apache.jackrabbit.oak.cache.CacheLIRS.getHash(key);\n        return getSegment(hash).find(key, hash);\n    }\n\n    public boolean containsKey(java.lang.Object key) {\n        int hash = org.apache.jackrabbit.oak.cache.CacheLIRS.getHash(key);\n        return getSegment(hash).containsKey(key, hash);\n    }\n\n    public V peek(K key) {\n        org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e = find(key);\n        return e == null ? null : e.value;\n    }\n\n    public V put(K key, V value, int memory) {\n        int hash = org.apache.jackrabbit.oak.cache.CacheLIRS.getHash(key);\n        return getSegment(hash).put(key, hash, value, memory);\n    }\n\n    @java.lang.Override\n    public void put(K key, V value) {\n        put(key, value, sizeOf(key, value));\n    }\n\n    @java.lang.Override\n    public V get(K key, java.util.concurrent.Callable<? extends V> valueLoader) throws java.util.concurrent.ExecutionException {\n        int hash = org.apache.jackrabbit.oak.cache.CacheLIRS.getHash(key);\n        return getSegment(hash).get(key, hash, valueLoader);\n    }\n\n    @java.lang.Override\n    public V getUnchecked(K key) {\n        try {\n            return get(key);\n        } catch (java.util.concurrent.ExecutionException e) {\n            throw new com.google.common.util.concurrent.UncheckedExecutionException(e);\n        }\n    }\n\n    @java.lang.Override\n    public V get(K key) throws java.util.concurrent.ExecutionException {\n        int hash = org.apache.jackrabbit.oak.cache.CacheLIRS.getHash(key);\n        return getSegment(hash).get(key, hash, loader);\n    }\n\n    @java.lang.Override\n    public void refresh(K key) {\n        int hash = org.apache.jackrabbit.oak.cache.CacheLIRS.getHash(key);\n        try {\n            getSegment(hash).refresh(key, hash, loader);\n        } catch (java.util.concurrent.ExecutionException e) {\n            org.apache.jackrabbit.oak.cache.CacheLIRS.LOG.warn(\"Could not refresh value for key \" + key, e);\n        }\n    }\n\n    V replace(K key, V value) {\n        int hash = org.apache.jackrabbit.oak.cache.CacheLIRS.getHash(key);\n        return getSegment(hash).replace(key, hash, value, sizeOf(key, value));\n    }\n\n    boolean replace(K key, V oldValue, V newValue) {\n        int hash = org.apache.jackrabbit.oak.cache.CacheLIRS.getHash(key);\n        return getSegment(hash).replace(key, hash, oldValue, newValue, sizeOf(key, newValue));\n    }\n\n    boolean remove(java.lang.Object key, java.lang.Object value) {\n        int hash = org.apache.jackrabbit.oak.cache.CacheLIRS.getHash(key);\n        return getSegment(hash).remove(key, hash, value);\n    }\n\n    protected V putIfAbsent(K key, V value) {\n        int hash = org.apache.jackrabbit.oak.cache.CacheLIRS.getHash(key);\n        return getSegment(hash).putIfAbsent(key, hash, value, sizeOf(key, value));\n    }\n\n    @java.lang.Override\n    @javax.annotation.Nullable\n    public V getIfPresent(java.lang.Object key) {\n        int hash = org.apache.jackrabbit.oak.cache.CacheLIRS.getHash(key);\n        return getSegment(hash).get(key, hash);\n    }\n\n    protected int sizeOf(K key, V value) {\n        if (weigher == null) {\n            return averageMemory;\n        }\n        return weigher.weigh(key, value);\n    }\n\n    @java.lang.Override\n    public void invalidate(java.lang.Object key) {\n        int hash = org.apache.jackrabbit.oak.cache.CacheLIRS.getHash(key);\n        getSegment(hash).invalidate(key, hash);\n    }\n\n    public V remove(java.lang.Object key) {\n        int hash = org.apache.jackrabbit.oak.cache.CacheLIRS.getHash(key);\n        return getSegment(hash).remove(key, hash);\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    @java.lang.Override\n    public void invalidateAll(java.lang.Iterable<?> keys) {\n        for (K k : ((java.lang.Iterable<K>) (keys))) {\n            invalidate(k);\n        }\n    }\n\n    public int getMemory(K key) {\n        int hash = org.apache.jackrabbit.oak.cache.CacheLIRS.getHash(key);\n        return getSegment(hash).getMemory(key, hash);\n    }\n\n    private org.apache.jackrabbit.oak.cache.CacheLIRS.Segment<K, V> getSegment(int hash) {\n        int segmentIndex = (hash >>> segmentShift) & segmentMask;\n        return segments[segmentIndex];\n    }\n\n    static int getHash(java.lang.Object key) {\n        int hash = key.hashCode();\n        hash = ((hash >>> 16) ^ hash) * 0x45d9f3b;\n        hash = ((hash >>> 16) ^ hash) * 0x45d9f3b;\n        hash = (hash >>> 16) ^ hash;\n        return hash;\n    }\n\n    public long getUsedMemory() {\n        long x = 0;\n        for (org.apache.jackrabbit.oak.cache.CacheLIRS.Segment<K, V> s : segments) {\n            x += s.usedMemory;\n        }\n        return x;\n    }\n\n    public void setMaxMemory(long maxMemory) {\n        if (maxMemory <= 0) {\n            throw new java.lang.IllegalArgumentException(\"Max memory must be larger than 0\");\n        }\n        this.maxMemory = maxMemory;\n        if (segments != null) {\n            long max = 1 + (maxMemory / segments.length);\n            for (org.apache.jackrabbit.oak.cache.CacheLIRS.Segment<K, V> s : segments) {\n                s.setMaxMemory(max);\n            }\n        }\n    }\n\n    public void setAverageMemory(int averageMemory) {\n        if (averageMemory <= 0) {\n            throw new java.lang.IllegalArgumentException(\"Average memory must be larger than 0\");\n        }\n        this.averageMemory = averageMemory;\n        if (segments != null) {\n            for (org.apache.jackrabbit.oak.cache.CacheLIRS.Segment<K, V> s : segments) {\n                s.setAverageMemory(averageMemory);\n            }\n        }\n    }\n\n    public int getAverageMemory() {\n        return averageMemory;\n    }\n\n    public long getMaxMemory() {\n        return maxMemory;\n    }\n\n    public synchronized java.util.Set<java.util.Map.Entry<K, V>> entrySet() {\n        java.util.HashMap<K, V> map = new java.util.HashMap<K, V>();\n        for (K k : keySet()) {\n            map.put(k, find(k).value);\n        }\n        return map.entrySet();\n    }\n\n    protected java.util.Collection<V> values() {\n        java.util.ArrayList<V> list = new java.util.ArrayList<V>();\n        for (K k : keySet()) {\n            V v = find(k).value;\n            if (v != null) {\n                list.add(v);\n            }\n        }\n        return list;\n    }\n\n    boolean containsValue(java.lang.Object value) {\n        for (org.apache.jackrabbit.oak.cache.CacheLIRS.Segment<K, V> s : segments) {\n            for (K k : s.keySet()) {\n                V v = find(k).value;\n                if ((v != null) && v.equals(value)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public synchronized java.util.Set<K> keySet() {\n        java.util.HashSet<K> set = new java.util.HashSet<K>();\n        for (org.apache.jackrabbit.oak.cache.CacheLIRS.Segment<K, V> s : segments) {\n            set.addAll(s.keySet());\n        }\n        return set;\n    }\n\n    public int sizeNonResident() {\n        int x = 0;\n        for (org.apache.jackrabbit.oak.cache.CacheLIRS.Segment<K, V> s : segments) {\n            x += s.queue2Size;\n        }\n        return x;\n    }\n\n    public int sizeMapArray() {\n        int x = 0;\n        for (org.apache.jackrabbit.oak.cache.CacheLIRS.Segment<K, V> s : segments) {\n            x += s.entries.length;\n        }\n        return x;\n    }\n\n    public int sizeHot() {\n        int x = 0;\n        for (org.apache.jackrabbit.oak.cache.CacheLIRS.Segment<K, V> s : segments) {\n            x += (s.mapSize - s.queueSize) - s.queue2Size;\n        }\n        return x;\n    }\n\n    @java.lang.Override\n    public long size() {\n        int x = 0;\n        for (org.apache.jackrabbit.oak.cache.CacheLIRS.Segment<K, V> s : segments) {\n            x += s.mapSize - s.queue2Size;\n        }\n        return x;\n    }\n\n    void clear() {\n        for (org.apache.jackrabbit.oak.cache.CacheLIRS.Segment<K, V> s : segments) {\n            s.clear();\n        }\n    }\n\n    public synchronized java.util.List<K> keys(boolean cold, boolean nonResident) {\n        java.util.ArrayList<K> keys = new java.util.ArrayList<K>();\n        for (org.apache.jackrabbit.oak.cache.CacheLIRS.Segment<K, V> s : segments) {\n            keys.addAll(s.keys(cold, nonResident));\n        }\n        return keys;\n    }\n\n    @java.lang.Override\n    public com.google.common.cache.CacheStats stats() {\n        long hitCount = 0;\n        long missCount = 0;\n        long loadSuccessCount = 0;\n        long loadExceptionCount = 0;\n        long totalLoadTime = 0;\n        long evictionCount = 0;\n        for (org.apache.jackrabbit.oak.cache.CacheLIRS.Segment<K, V> s : segments) {\n            hitCount += s.hitCount;\n            missCount += s.missCount;\n            loadSuccessCount += s.loadSuccessCount;\n            loadExceptionCount += s.loadExceptionCount;\n            totalLoadTime += s.totalLoadTime;\n            evictionCount += s.evictionCount;\n        }\n        com.google.common.cache.CacheStats stats = new com.google.common.cache.CacheStats(hitCount, missCount, loadSuccessCount, loadExceptionCount, totalLoadTime, evictionCount);\n        return stats;\n    }\n\n    static class Segment<K, V> {\n        int mapSize;\n\n        int queueSize;\n\n        int queue2Size;\n\n        org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V>[] entries;\n\n        long usedMemory;\n\n        long hitCount;\n\n        long missCount;\n\n        long loadSuccessCount;\n\n        long loadExceptionCount;\n\n        long totalLoadTime;\n\n        long evictionCount;\n\n        private final org.apache.jackrabbit.oak.cache.CacheLIRS<K, V> cache;\n\n        private final int stackMoveDistance;\n\n        private long maxMemory;\n\n        private int averageMemory;\n\n        private int mask;\n\n        private int stackSize;\n\n        private org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> stack;\n\n        private org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> queue;\n\n        private org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> queue2;\n\n        private int stackMoveCounter;\n\n        Segment(org.apache.jackrabbit.oak.cache.CacheLIRS<K, V> cache, long maxMemory, int averageMemory, int stackMoveDistance) {\n            this.cache = cache;\n            setMaxMemory(maxMemory);\n            setAverageMemory(averageMemory);\n            this.stackMoveDistance = stackMoveDistance;\n            clear();\n        }\n\n        synchronized void clear() {\n            long maxLen = ((long) ((maxMemory / averageMemory) / 0.75));\n            long l = 8;\n            while (l < maxLen) {\n                l += l;\n            } \n            int len = ((int) (java.lang.Math.min(1L << 31, l)));\n            mask = len - 1;\n            stack = new org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V>();\n            stack.stackPrev = stack.stackNext = stack;\n            queue = new org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V>();\n            queue.queuePrev = queue.queueNext = queue;\n            queue2 = new org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V>();\n            queue2.queuePrev = queue2.queueNext = queue2;\n            entries = null;\n            @java.lang.SuppressWarnings(\"unchecked\")\n            org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V>[] e = new org.apache.jackrabbit.oak.cache.CacheLIRS.Entry[len];\n            entries = e;\n            mapSize = 0;\n            usedMemory = 0;\n            stackSize = queueSize = queue2Size = 0;\n        }\n\n        int getMemory(K key, int hash) {\n            org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e = find(key, hash);\n            return e == null ? 0 : e.memory;\n        }\n\n        V get(java.lang.Object key, int hash) {\n            org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e = find(key, hash);\n            if (e == null) {\n                missCount++;\n                return null;\n            }\n            V value = e.value;\n            if (value == null) {\n                missCount++;\n                return null;\n            }\n            if (e.isHot()) {\n                if (e != stack.stackNext) {\n                    if ((stackMoveDistance == 0) || ((stackMoveCounter - e.topMove) > stackMoveDistance)) {\n                        access(key, hash);\n                    }\n                }\n            } else {\n                access(key, hash);\n            }\n            hitCount++;\n            return value;\n        }\n\n        private synchronized void access(java.lang.Object key, int hash) {\n            org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e = find(key, hash);\n            if ((e == null) || (e.value == null)) {\n                return;\n            }\n            if (e.isHot()) {\n                if (e != stack.stackNext) {\n                    if ((stackMoveDistance == 0) || ((stackMoveCounter - e.topMove) > stackMoveDistance)) {\n                        boolean wasEnd = e == stack.stackPrev;\n                        removeFromStack(e);\n                        if (wasEnd) {\n                            pruneStack();\n                        }\n                        addToStack(e);\n                    }\n                }\n            } else {\n                removeFromQueue(e);\n                if (e.stackNext != null) {\n                    removeFromStack(e);\n                    convertOldestHotToCold();\n                } else {\n                    addToQueue(queue, e);\n                }\n                addToStack(e);\n            }\n        }\n\n        synchronized V get(K key, int hash, java.util.concurrent.Callable<? extends V> valueLoader) throws java.util.concurrent.ExecutionException {\n            V value = get(key, hash);\n            if (value == null) {\n                long start = java.lang.System.nanoTime();\n                try {\n                    value = valueLoader.call();\n                    loadSuccessCount++;\n                } catch (java.lang.Exception e) {\n                    loadExceptionCount++;\n                    throw new java.util.concurrent.ExecutionException(e);\n                } finally {\n                    long time = java.lang.System.nanoTime() - start;\n                    totalLoadTime += time;\n                }\n                put(key, hash, value, cache.sizeOf(key, value));\n            }\n            return value;\n        }\n\n        synchronized V get(K key, int hash, com.google.common.cache.CacheLoader<K, V> loader) throws java.util.concurrent.ExecutionException {\n            V value = get(key, hash);\n            if (value == null) {\n                long start = java.lang.System.nanoTime();\n                try {\n                    value = loader.load(key);\n                    loadSuccessCount++;\n                } catch (java.lang.Exception e) {\n                    loadExceptionCount++;\n                    throw new java.util.concurrent.ExecutionException(e);\n                } finally {\n                    long time = java.lang.System.nanoTime() - start;\n                    totalLoadTime += time;\n                }\n                put(key, hash, value, cache.sizeOf(key, value));\n            }\n            return value;\n        }\n\n        synchronized V replace(K key, int hash, V value, int memory) {\n            if (containsKey(key, hash)) {\n                return put(key, hash, value, memory);\n            }\n            return null;\n        }\n\n        synchronized boolean replace(K key, int hash, V oldValue, V newValue, int memory) {\n            V old = get(key, hash);\n            if ((old != null) && old.equals(oldValue)) {\n                put(key, hash, newValue, memory);\n                return true;\n            }\n            return false;\n        }\n\n        synchronized boolean remove(java.lang.Object key, int hash, java.lang.Object value) {\n            V old = get(key, hash);\n            if ((old != null) && old.equals(value)) {\n                invalidate(key, hash);\n                return true;\n            }\n            return false;\n        }\n\n        synchronized V remove(java.lang.Object key, int hash) {\n            V old = get(key, hash);\n            invalidate(key, hash);\n            return old;\n        }\n\n        synchronized V putIfAbsent(K key, int hash, V value, int memory) {\n            V old = get(key, hash);\n            if (old == null) {\n                put(key, hash, value, memory);\n                return null;\n            }\n            return old;\n        }\n\n        synchronized void refresh(K key, int hash, com.google.common.cache.CacheLoader<K, V> loader) throws java.util.concurrent.ExecutionException {\n            V value;\n            V old = get(key, hash);\n            long start = java.lang.System.nanoTime();\n            try {\n                if (old == null) {\n                    value = loader.load(key);\n                } else {\n                    com.google.common.util.concurrent.ListenableFuture<V> future = loader.reload(key, old);\n                    value = future.get();\n                }\n                loadSuccessCount++;\n            } catch (java.lang.Exception e) {\n                loadExceptionCount++;\n                throw new java.util.concurrent.ExecutionException(e);\n            } finally {\n                long time = java.lang.System.nanoTime() - start;\n                totalLoadTime += time;\n            }\n            put(key, hash, value, cache.sizeOf(key, value));\n        }\n\n        synchronized V put(K key, int hash, V value, int memory) {\n            if (value == null) {\n                throw new java.lang.NullPointerException(\"The value may not be null\");\n            }\n            V old;\n            org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e = find(key, hash);\n            if (e == null) {\n                old = null;\n            } else {\n                old = e.value;\n                invalidate(key, hash);\n            }\n            e = new org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V>();\n            e.key = key;\n            e.value = value;\n            e.memory = memory;\n            int index = hash & mask;\n            e.mapNext = entries[index];\n            entries[index] = e;\n            usedMemory += memory;\n            if ((usedMemory > maxMemory) && (mapSize > 0)) {\n                evict(e);\n            }\n            mapSize++;\n            addToStack(e);\n            return old;\n        }\n\n        synchronized void invalidate(java.lang.Object key, int hash) {\n            int index = hash & mask;\n            org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e = entries[index];\n            if (e == null) {\n                return;\n            }\n            if (e.key.equals(key)) {\n                entries[index] = e.mapNext;\n            } else {\n                org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> last;\n                do {\n                    last = e;\n                    e = e.mapNext;\n                    if (e == null) {\n                        return;\n                    }\n                } while (!e.key.equals(key) );\n                last.mapNext = e.mapNext;\n            }\n            mapSize--;\n            usedMemory -= e.memory;\n            if (e.stackNext != null) {\n                removeFromStack(e);\n            }\n            if (e.isHot()) {\n                e = queue.queueNext;\n                if (e != queue) {\n                    removeFromQueue(e);\n                    if (e.stackNext == null) {\n                        addToStackBottom(e);\n                    }\n                }\n            } else {\n                removeFromQueue(e);\n            }\n            pruneStack();\n        }\n\n        private void evict(org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> newCold) {\n            while ((queueSize <= (mapSize >>> 5)) && (stackSize > 0)) {\n                convertOldestHotToCold();\n            } \n            if (stackSize > 0) {\n                addToQueue(queue, newCold);\n            }\n            while ((usedMemory > maxMemory) && (queueSize > 1)) {\n                org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e = queue.queuePrev;\n                usedMemory -= e.memory;\n                evictionCount++;\n                removeFromQueue(e);\n                e.value = null;\n                e.memory = 0;\n                addToQueue(queue2, e);\n                while ((queue2Size + queue2Size) > stackSize) {\n                    e = queue2.queuePrev;\n                    int hash = org.apache.jackrabbit.oak.cache.CacheLIRS.getHash(e.key);\n                    invalidate(e.key, hash);\n                } \n            } \n        }\n\n        private void convertOldestHotToCold() {\n            org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> last = stack.stackPrev;\n            if (last == stack) {\n                throw new java.lang.IllegalStateException();\n            }\n            removeFromStack(last);\n            addToQueue(queue, last);\n            pruneStack();\n        }\n\n        private void pruneStack() {\n            while (true) {\n                org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> last = stack.stackPrev;\n                if (last.isHot()) {\n                    break;\n                }\n                removeFromStack(last);\n            } \n        }\n\n        org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> find(java.lang.Object key, int hash) {\n            int index = hash & mask;\n            org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e = entries[index];\n            while ((e != null) && (!e.key.equals(key))) {\n                e = e.mapNext;\n            } \n            return e;\n        }\n\n        private void addToStack(org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e) {\n            e.stackPrev = stack;\n            e.stackNext = stack.stackNext;\n            e.stackNext.stackPrev = e;\n            stack.stackNext = e;\n            stackSize++;\n            e.topMove = stackMoveCounter++;\n        }\n\n        private void addToStackBottom(org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e) {\n            e.stackNext = stack;\n            e.stackPrev = stack.stackPrev;\n            e.stackPrev.stackNext = e;\n            stack.stackPrev = e;\n            stackSize++;\n        }\n\n        private void removeFromStack(org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e) {\n            e.stackPrev.stackNext = e.stackNext;\n            e.stackNext.stackPrev = e.stackPrev;\n            e.stackPrev = e.stackNext = null;\n            stackSize--;\n        }\n\n        private void addToQueue(org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> q, org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e) {\n            e.queuePrev = q;\n            e.queueNext = q.queueNext;\n            e.queueNext.queuePrev = e;\n            q.queueNext = e;\n            if (e.value != null) {\n                queueSize++;\n            } else {\n                queue2Size++;\n            }\n        }\n\n        private void removeFromQueue(org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e) {\n            e.queuePrev.queueNext = e.queueNext;\n            e.queueNext.queuePrev = e.queuePrev;\n            e.queuePrev = e.queueNext = null;\n            if (e.value != null) {\n                queueSize--;\n            } else {\n                queue2Size--;\n            }\n        }\n\n        synchronized java.util.List<K> keys(boolean cold, boolean nonResident) {\n            java.util.ArrayList<K> keys = new java.util.ArrayList<K>();\n            if (cold) {\n                org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> start = (nonResident) ? queue2 : queue;\n                for (org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e = start.queueNext; e != start; e = e.queueNext) {\n                    keys.add(e.key);\n                }\n            } else {\n                for (org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e = stack.stackNext; e != stack; e = e.stackNext) {\n                    keys.add(e.key);\n                }\n            }\n            return keys;\n        }\n\n        boolean containsKey(java.lang.Object key, int hash) {\n            org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e = find(key, hash);\n            return (e != null) && (e.value != null);\n        }\n\n        synchronized java.util.Set<K> keySet() {\n            java.util.HashSet<K> set = new java.util.HashSet<K>();\n            for (org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e = stack.stackNext; e != stack; e = e.stackNext) {\n                set.add(e.key);\n            }\n            for (org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e = queue.queueNext; e != queue; e = e.queueNext) {\n                set.add(e.key);\n            }\n            return set;\n        }\n\n        void setMaxMemory(long maxMemory) {\n            if (maxMemory <= 0) {\n                throw new java.lang.IllegalArgumentException(\"Max memory must be larger than 0\");\n            }\n            this.maxMemory = maxMemory;\n        }\n\n        void setAverageMemory(int averageMemory) {\n            if (averageMemory <= 0) {\n                throw new java.lang.IllegalArgumentException(\"Average memory must be larger than 0\");\n            }\n            this.averageMemory = averageMemory;\n        }\n    }\n\n    static class Entry<K, V> {\n        K key;\n\n        V value;\n\n        int memory;\n\n        int topMove;\n\n        org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> stackNext;\n\n        org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> stackPrev;\n\n        org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> queueNext;\n\n        org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> queuePrev;\n\n        org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> mapNext;\n\n        boolean isHot() {\n            return queueNext == null;\n        }\n    }\n\n    public static class Builder {\n        private com.google.common.cache.Weigher<?, ?> weigher;\n\n        private long maxWeight;\n\n        private int averageWeight = 100;\n\n        public org.apache.jackrabbit.oak.cache.CacheLIRS.Builder recordStats() {\n            return this;\n        }\n\n        public <K, V> org.apache.jackrabbit.oak.cache.CacheLIRS.Builder weigher(com.google.common.cache.Weigher<K, V> weigher) {\n            this.weigher = weigher;\n            return this;\n        }\n\n        public org.apache.jackrabbit.oak.cache.CacheLIRS.Builder maximumWeight(long maxWeight) {\n            this.maxWeight = maxWeight;\n            return this;\n        }\n\n        public org.apache.jackrabbit.oak.cache.CacheLIRS.Builder maximumSize(int maxSize) {\n            this.maxWeight = maxSize;\n            this.averageWeight = 1;\n            return this;\n        }\n\n        public <K, V> org.apache.jackrabbit.oak.cache.CacheLIRS<K, V> build() {\n            return build(null);\n        }\n\n        public <K, V> org.apache.jackrabbit.oak.cache.CacheLIRS<K, V> build(com.google.common.cache.CacheLoader<K, V> cacheLoader) {\n            @java.lang.SuppressWarnings(\"unchecked\")\n            com.google.common.cache.Weigher<K, V> w = ((com.google.common.cache.Weigher<K, V>) (weigher));\n            return new org.apache.jackrabbit.oak.cache.CacheLIRS<K, V>(w, maxWeight, averageWeight, 16, 16, cacheLoader);\n        }\n    }\n\n    public static org.apache.jackrabbit.oak.cache.CacheLIRS.Builder newBuilder() {\n        return new org.apache.jackrabbit.oak.cache.CacheLIRS.Builder();\n    }\n\n    @java.lang.Override\n    public com.google.common.collect.ImmutableMap<K, V> getAllPresent(java.lang.Iterable<?> keys) {\n        throw new java.lang.UnsupportedOperationException();\n    }\n\n    @java.lang.Override\n    public java.util.concurrent.ConcurrentMap<K, V> asMap() {\n        return new java.util.concurrent.ConcurrentMap<K, V>() {\n            @java.lang.Override\n            public int size() {\n                long size = CacheLIRS.this.size();\n                return ((int) (java.lang.Math.min(size, java.lang.Integer.MAX_VALUE)));\n            }\n\n            @java.lang.Override\n            public boolean isEmpty() {\n                return CacheLIRS.this.size() == 0;\n            }\n\n            @java.lang.Override\n            public boolean containsKey(java.lang.Object key) {\n                return CacheLIRS.this.containsKey(key);\n            }\n\n            @java.lang.Override\n            public boolean containsValue(java.lang.Object value) {\n                return CacheLIRS.this.containsValue(value);\n            }\n\n            @java.lang.SuppressWarnings(\"unchecked\")\n            @java.lang.Override\n            public V get(java.lang.Object key) {\n                return CacheLIRS.this.getUnchecked(((K) (key)));\n            }\n\n            @java.lang.Override\n            public V put(K key, V value) {\n                return CacheLIRS.this.put(key, value, sizeOf(key, value));\n            }\n\n            @java.lang.Override\n            public V remove(java.lang.Object key) {\n                @java.lang.SuppressWarnings(\"unchecked\")\n                V old = CacheLIRS.this.getUnchecked(((K) (key)));\n                CacheLIRS.this.invalidate(key);\n                return old;\n            }\n\n            @java.lang.Override\n            public void putAll(java.util.Map<? extends K, ? extends V> m) {\n                for (java.util.Map.Entry<? extends K, ? extends V> e : m.entrySet()) {\n                    put(e.getKey(), e.getValue());\n                }\n            }\n\n            @java.lang.Override\n            public void clear() {\n                CacheLIRS.this.clear();\n            }\n\n            @java.lang.Override\n            public java.util.Set<K> keySet() {\n                return CacheLIRS.this.keySet();\n            }\n\n            @java.lang.Override\n            public java.util.Collection<V> values() {\n                return CacheLIRS.this.values();\n            }\n\n            @java.lang.Override\n            public java.util.Set<java.util.Map.Entry<K, V>> entrySet() {\n                return CacheLIRS.this.entrySet();\n            }\n\n            @java.lang.Override\n            public V putIfAbsent(K key, V value) {\n                return CacheLIRS.this.putIfAbsent(key, value);\n            }\n\n            @java.lang.Override\n            public boolean remove(java.lang.Object key, java.lang.Object value) {\n                return CacheLIRS.this.remove(key, value);\n            }\n\n            @java.lang.Override\n            public boolean replace(K key, V oldValue, V newValue) {\n                return CacheLIRS.this.replace(key, oldValue, newValue);\n            }\n\n            @java.lang.Override\n            public V replace(K key, V value) {\n                return CacheLIRS.this.replace(key, value);\n            }\n        };\n    }\n\n    @java.lang.Override\n    public void cleanUp() {\n    }\n\n    @java.lang.Override\n    public void putAll(java.util.Map<? extends K, ? extends V> m) {\n        for (java.util.Map.Entry<? extends K, ? extends V> e : m.entrySet()) {\n            put(e.getKey(), e.getValue());\n        }\n    }\n\n    @java.lang.Override\n    public com.google.common.collect.ImmutableMap<K, V> getAll(java.lang.Iterable<? extends K> keys) throws java.util.concurrent.ExecutionException {\n        throw new java.lang.UnsupportedOperationException();\n    }\n\n    @java.lang.Override\n    public V apply(K key) {\n        throw new java.lang.UnsupportedOperationException();\n    }\n\n    public boolean isEmpty() {\n        return size() == 0;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "find(key)",
            "src_parent": "org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e = find(key)",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "map.put(k, find(k).value)",
            "src_parent": "{\n    map.put(k, find(k).value);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "find(k).value",
            "src_parent": "V v = find(k).value",
            "src_parent_type": "LocalVariable",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "find(k).value",
            "src_parent": "V v = find(k).value",
            "src_parent_type": "LocalVariable",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "V v = peek(k)",
            "src_parent": "{\n    V v = peek(k);\n    if (v != null) {\n        map.put(k, v);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (v != null) {\n    map.put(k, v);\n}",
            "src_parent": "{\n    V v = peek(k);\n    if (v != null) {\n        map.put(k, v);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "peek(k)",
            "src_parent": "V v = peek(k)",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "peek(k)",
            "src_parent": "V v = peek(k)",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (loader == null) {\n    return null;\n}",
            "src_parent": "{\n    if (loader == null) {\n        return null;\n    }\n    long start = java.lang.System.nanoTime();\n    try {\n        value = loader.load(key);\n        loadSuccessCount++;\n    } catch (java.lang.Exception e) {\n        loadExceptionCount++;\n        throw new java.util.concurrent.ExecutionException(e);\n    } finally {\n        long time = java.lang.System.nanoTime() - start;\n        totalLoadTime += time;\n    }\n    put(key, hash, value, cache.sizeOf(key, value));\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "int hash = org.apache.jackrabbit.oak.cache.CacheLIRS.getHash(key)",
            "dst_parent": "{\n    int hash = org.apache.jackrabbit.oak.cache.CacheLIRS.getHash(key);\n    org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e = getSegment(hash).find(key, hash);\n    return e == null ? null : e.value;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "int hash = org.apache.jackrabbit.oak.cache.CacheLIRS.getHash(key)",
            "src_parent": "{\n    int hash = org.apache.jackrabbit.oak.cache.CacheLIRS.getHash(key);\n    return getSegment(hash).find(key, hash);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "getSegment(hash).find(key, hash)",
            "dst_parent": "org.apache.jackrabbit.oak.cache.CacheLIRS.Entry<K, V> e = getSegment(hash).find(key, hash)",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "getSegment(hash).find(key, hash)",
            "src_parent": "return getSegment(hash).find(key, hash)",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.cache.CacheLIRS",
            "dst_parent": "",
            "dst_parent_type": "ThisAccess",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "org.apache.jackrabbit.oak.cache.CacheLIRS",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "k",
            "dst_parent": "peek(k)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "k",
            "src_parent": "find(k)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "map",
            "dst_parent": "map.put(k, v)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "map",
            "src_parent": "map.put(k, find(k).value)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "k",
            "dst_parent": "map.put(k, v)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "k",
            "src_parent": "map.put(k, find(k).value)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "v",
            "dst_parent": "map.put(k, v)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "k",
            "src_parent": "find(k)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.cache.CacheLIRS",
            "dst_parent": "",
            "dst_parent_type": "ThisAccess",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "org.apache.jackrabbit.oak.cache.CacheLIRS",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "k",
            "dst_parent": "peek(k)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "k",
            "src_parent": "find(k)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        }
      ],
      "file_name": "CacheLIRS"
    }
  ],
  "id": "jackrabbit-oak_05c89637"
}