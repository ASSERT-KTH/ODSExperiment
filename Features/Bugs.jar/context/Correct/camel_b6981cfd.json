{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (original != null) {\n    aggregationRepository.remove(aggregated.getContext(), key, original);\n}",
            "src_parent": "{\n    if (original != null) {\n        original.setProperty(Exchange.AGGREGATED_CORRELATION_KEY, key);\n    }\n    aggregated.setProperty(Exchange.AGGREGATED_CORRELATION_KEY, key);\n    if (original != null) {\n        aggregationRepository.remove(aggregated.getContext(), key, original);\n    }\n    if ((!fromTimeout) && (timeoutMap != null)) {\n        timeoutMap.remove(key);\n    }\n    if (closedCorrelationKeys != null) {\n        closedCorrelationKeys.put(key, key);\n    }\n    if (fromTimeout) {\n        if (aggregationStrategy instanceof org.apache.camel.processor.aggregate.TimeoutAwareAggregationStrategy) {\n            long timeout = (getCompletionTimeout() > 0) ? getCompletionTimeout() : -1;\n            ((org.apache.camel.processor.aggregate.TimeoutAwareAggregationStrategy) (aggregationStrategy)).timeout(aggregated, -1, -1, timeout);\n        }\n    }\n    org.apache.camel.Exchange answer;\n    if (fromTimeout && isDiscardOnCompletionTimeout()) {\n        org.apache.camel.processor.aggregate.AggregateProcessor.LOG.debug(\"Aggregation for correlation key {} discarding aggregated exchange: {}\", key, aggregated);\n        aggregationRepository.confirm(aggregated.getContext(), aggregated.getExchangeId());\n        redeliveryState.remove(aggregated.getExchangeId());\n        answer = null;\n    } else {\n        answer = aggregated;\n    }\n    return answer;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "aggregationRepository.remove(aggregated.getContext(), key, original)",
            "dst_parent": "{\n    aggregationRepository.remove(aggregated.getContext(), key, original);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "aggregationRepository.remove(aggregated.getContext(), key, original)",
            "src_parent": "{\n    if (original != null) {\n        original.setProperty(Exchange.AGGREGATED_CORRELATION_KEY, key);\n    }\n    aggregated.setProperty(Exchange.AGGREGATED_CORRELATION_KEY, key);\n    aggregationRepository.remove(aggregated.getContext(), key, original);\n    if ((!fromTimeout) && (timeoutMap != null)) {\n        timeoutMap.remove(key);\n    }\n    if (closedCorrelationKeys != null) {\n        closedCorrelationKeys.put(key, key);\n    }\n    if (fromTimeout) {\n        if (aggregationStrategy instanceof org.apache.camel.processor.aggregate.TimeoutAwareAggregationStrategy) {\n            long timeout = (getCompletionTimeout() > 0) ? getCompletionTimeout() : -1;\n            ((org.apache.camel.processor.aggregate.TimeoutAwareAggregationStrategy) (aggregationStrategy)).timeout(aggregated, -1, -1, timeout);\n        }\n    }\n    org.apache.camel.Exchange answer;\n    if (fromTimeout && isDiscardOnCompletionTimeout()) {\n        org.apache.camel.processor.aggregate.AggregateProcessor.LOG.debug(\"Aggregation for correlation key {} discarding aggregated exchange: {}\", key, aggregated);\n        aggregationRepository.confirm(aggregated.getContext(), aggregated.getExchangeId());\n        redeliveryState.remove(aggregated.getExchangeId());\n        answer = null;\n    } else {\n        answer = aggregated;\n    }\n    return answer;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "AggregateProcessor"
    }
  ],
  "id": "camel_b6981cfd"
}