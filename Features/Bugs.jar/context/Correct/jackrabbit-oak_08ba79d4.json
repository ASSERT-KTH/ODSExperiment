{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Wrapper",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "private",
            "dst_parent": "private java.util.Map<java.lang.String, org.apache.jackrabbit.oak.api.PropertyState> createProperties(org.apache.jackrabbit.core.persistence.util.NodePropBundle bundle) {\n    java.util.Map<java.lang.String, org.apache.jackrabbit.oak.api.PropertyState> properties = com.google.common.collect.Maps.newHashMap();\n    java.lang.String primary;\n    if (bundle.getNodeTypeName() != null) {\n        primary = createName(bundle.getNodeTypeName());\n    } else {\n        warn(\"Missing primary node type; defaulting to nt:unstructured\");\n        primary = org.apache.jackrabbit.JcrConstants.NT_UNSTRUCTURED;\n    }\n    properties.put(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, primary, Type.NAME));\n    java.util.Set<java.lang.String> mixins = com.google.common.collect.Sets.newLinkedHashSet();\n    if (bundle.getMixinTypeNames() != null) {\n        for (org.apache.jackrabbit.spi.Name mixin : bundle.getMixinTypeNames()) {\n            mixins.add(createName(mixin));\n        }\n    }\n    if (!mixins.isEmpty()) {\n        properties.put(org.apache.jackrabbit.JcrConstants.JCR_MIXINTYPES, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.JcrConstants.JCR_MIXINTYPES, mixins, Type.NAMES));\n    }\n    if (bundle.isReferenceable() || isReferenceable.apply(primary, mixins)) {\n        properties.put(org.apache.jackrabbit.JcrConstants.JCR_UUID, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.JcrConstants.JCR_UUID, bundle.getId().toString()));\n    }\n    if (isOrderable.apply(primary, mixins)) {\n        properties.put(org.apache.jackrabbit.oak.upgrade.OAK_CHILD_ORDER, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.oak.upgrade.OAK_CHILD_ORDER, nodes.keySet(), Type.NAMES));\n    }\n    for (org.apache.jackrabbit.core.persistence.util.NodePropBundle.PropertyEntry property : bundle.getPropertyEntries()) {\n        java.lang.String name = createName(property.getName());\n        try {\n            int type = property.getType();\n            if (property.isMultiValued()) {\n                properties.put(name, createProperty(name, type, property.getValues()));\n            } else {\n                properties.put(name, createProperty(name, type, property.getValues()[0]));\n            }\n        } catch (java.lang.Exception e) {\n            warn(\"Skipping broken property entry \" + name, e);\n        }\n    }\n    org.apache.jackrabbit.oak.api.PropertyState frozenUuid = properties.get(org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID);\n    if (((frozenUuid != null) && (frozenUuid.getType() == org.apache.jackrabbit.oak.api.Type.STRING)) && isFrozenNode.apply(primary, mixins)) {\n        java.lang.String frozenPrimary = org.apache.jackrabbit.JcrConstants.NT_UNSTRUCTURED;\n        java.util.Set<java.lang.String> frozenMixins = com.google.common.collect.Sets.newHashSet();\n        org.apache.jackrabbit.oak.api.PropertyState property = properties.get(org.apache.jackrabbit.JcrConstants.JCR_FROZENPRIMARYTYPE);\n        if ((property != null) && (property.getType() == org.apache.jackrabbit.oak.api.Type.NAME)) {\n            primary = property.getValue(org.apache.jackrabbit.oak.api.Type.NAME);\n        }\n        property = properties.get(org.apache.jackrabbit.JcrConstants.JCR_FROZENMIXINTYPES);\n        if ((property != null) && (property.getType() == org.apache.jackrabbit.oak.api.Type.NAMES)) {\n            com.google.common.collect.Iterables.addAll(frozenMixins, property.getValue(org.apache.jackrabbit.oak.api.Type.NAMES));\n        }\n        if (!isReferenceable.apply(frozenPrimary, frozenMixins)) {\n            frozenUuid = org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID, (parent.getString(org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID) + \"/\") + name);\n            properties.put(org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID, frozenUuid);\n        }\n    }\n    return properties;\n}",
            "dst_parent_type": "Method",
            "dst_type": "Wra",
            "operator": "UPD",
            "src": "public",
            "src_parent": "public java.util.Map<java.lang.String, org.apache.jackrabbit.oak.api.PropertyState> createProperties(org.apache.jackrabbit.core.persistence.util.NodePropBundle bundle) {\n    java.util.Map<java.lang.String, org.apache.jackrabbit.oak.api.PropertyState> properties = com.google.common.collect.Maps.newHashMap();\n    java.lang.String primary;\n    if (bundle.getNodeTypeName() != null) {\n        primary = createName(bundle.getNodeTypeName());\n    } else {\n        warn(\"Missing primary node type; defaulting to nt:unstructured\");\n        primary = org.apache.jackrabbit.JcrConstants.NT_UNSTRUCTURED;\n    }\n    properties.put(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, primary, Type.NAME));\n    java.util.Set<java.lang.String> mixins = com.google.common.collect.Sets.newLinkedHashSet();\n    if (bundle.getMixinTypeNames() != null) {\n        for (org.apache.jackrabbit.spi.Name mixin : bundle.getMixinTypeNames()) {\n            mixins.add(createName(mixin));\n        }\n    }\n    if (!mixins.isEmpty()) {\n        properties.put(org.apache.jackrabbit.JcrConstants.JCR_MIXINTYPES, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.JcrConstants.JCR_MIXINTYPES, mixins, Type.NAMES));\n    }\n    if (bundle.isReferenceable() || isReferenceable.apply(primary, mixins)) {\n        properties.put(org.apache.jackrabbit.JcrConstants.JCR_UUID, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.JcrConstants.JCR_UUID, bundle.getId().toString()));\n    }\n    if (isOrderable.apply(primary, mixins)) {\n        properties.put(org.apache.jackrabbit.oak.upgrade.OAK_CHILD_ORDER, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.oak.upgrade.OAK_CHILD_ORDER, nodes.keySet(), Type.NAMES));\n    }\n    for (org.apache.jackrabbit.core.persistence.util.NodePropBundle.PropertyEntry property : bundle.getPropertyEntries()) {\n        java.lang.String name = createName(property.getName());\n        try {\n            int type = property.getType();\n            if (property.isMultiValued()) {\n                properties.put(name, createProperty(name, type, property.getValues()));\n            } else {\n                properties.put(name, createProperty(name, type, property.getValues()[0]));\n            }\n        } catch (java.lang.Exception e) {\n            warn(\"Skipping broken property entry \" + name, e);\n        }\n    }\n    return properties;\n}",
            "src_parent_type": "Method",
            "src_type": "Wra"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private final org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate isFrozenNode;",
            "src_parent": "class JackrabbitNodeState extends org.apache.jackrabbit.oak.spi.state.AbstractNodeState {\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState.class);\n\n    private static long count = 0;\n\n    private static void logNewNode(org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState state) {\n        org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState.count++;\n        if ((org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState.count % 10000) == 0) {\n            org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState.log.info(((\"Migrating node #\" + org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState.count) + \": \") + state.getPath());\n        }\n    }\n\n    private final org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState parent;\n\n    private final java.lang.String name;\n\n    private java.lang.String path;\n\n    private final org.apache.jackrabbit.oak.upgrade.BundleLoader loader;\n\n    private final org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate isReferenceable;\n\n    private final org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate isOrderable;\n\n    private final org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate isFrozenNode;\n\n    private final java.util.Map<java.lang.String, java.lang.String> uriToPrefix;\n\n    private final java.util.Map<java.lang.String, org.apache.jackrabbit.core.id.NodeId> nodes;\n\n    private final java.util.Map<java.lang.String, org.apache.jackrabbit.oak.api.PropertyState> properties;\n\n    private final boolean useBinaryReferences;\n\n    private JackrabbitNodeState(org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState parent, java.lang.String name, org.apache.jackrabbit.core.persistence.util.NodePropBundle bundle) {\n        this.parent = parent;\n        this.name = name;\n        this.path = null;\n        this.loader = parent.loader;\n        this.isReferenceable = parent.isReferenceable;\n        this.isOrderable = parent.isOrderable;\n        this.isFrozenNode = parent.isFrozenNode;\n        this.uriToPrefix = parent.uriToPrefix;\n        this.nodes = createNodes(bundle);\n        this.properties = createProperties(bundle);\n        this.useBinaryReferences = parent.useBinaryReferences;\n        org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState.logNewNode(this);\n    }\n\n    JackrabbitNodeState(org.apache.jackrabbit.core.persistence.PersistenceManager source, org.apache.jackrabbit.oak.spi.state.NodeState root, java.util.Map<java.lang.String, java.lang.String> uriToPrefix, org.apache.jackrabbit.core.id.NodeId id, java.lang.String path, boolean useBinaryReferences) {\n        this.parent = null;\n        this.name = null;\n        this.path = path;\n        this.loader = new org.apache.jackrabbit.oak.upgrade.BundleLoader(source);\n        this.isReferenceable = new org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate(root, org.apache.jackrabbit.JcrConstants.MIX_REFERENCEABLE);\n        this.isOrderable = org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate.isOrderable(root);\n        this.isFrozenNode = new org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate(root, org.apache.jackrabbit.JcrConstants.NT_FROZENNODE);\n        this.uriToPrefix = uriToPrefix;\n        try {\n            org.apache.jackrabbit.core.persistence.util.NodePropBundle bundle = loader.loadBundle(id);\n            this.nodes = createNodes(bundle);\n            this.properties = createProperties(bundle);\n        } catch (org.apache.jackrabbit.core.state.ItemStateException e) {\n            throw new java.lang.IllegalStateException(\"Unable to access node \" + id, e);\n        }\n        this.useBinaryReferences = useBinaryReferences;\n        org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState.logNewNode(this);\n    }\n\n    @java.lang.Override\n    public boolean exists() {\n        return true;\n    }\n\n    @java.lang.Override\n    public long getPropertyCount() {\n        return properties.size();\n    }\n\n    @java.lang.Override\n    public boolean hasProperty(java.lang.String name) {\n        return properties.containsKey(name);\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.api.PropertyState getProperty(java.lang.String name) {\n        return properties.get(name);\n    }\n\n    @java.lang.Override\n    public java.lang.Iterable<org.apache.jackrabbit.oak.api.PropertyState> getProperties() {\n        return properties.values();\n    }\n\n    @java.lang.Override\n    public long getChildNodeCount(long max) {\n        return nodes.size();\n    }\n\n    @java.lang.Override\n    public boolean hasChildNode(java.lang.String name) {\n        return nodes.containsKey(name);\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String name) {\n        org.apache.jackrabbit.core.id.NodeId id = nodes.get(name);\n        if (id != null) {\n            try {\n                return new org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState(this, name, loader.loadBundle(id));\n            } catch (org.apache.jackrabbit.core.state.ItemStateException e) {\n                throw new java.lang.IllegalStateException(\"Unable to access child node \" + name, e);\n            }\n        }\n        checkValidName(name);\n        return org.apache.jackrabbit.oak.plugins.memory.EmptyNodeState.MISSING_NODE;\n    }\n\n    @java.lang.Override\n    public java.lang.Iterable<java.lang.String> getChildNodeNames() {\n        return nodes.keySet();\n    }\n\n    @java.lang.Override\n    public java.lang.Iterable<org.apache.jackrabbit.oak.plugins.memory.MemoryChildNodeEntry> getChildNodeEntries() {\n        java.util.List<org.apache.jackrabbit.oak.plugins.memory.MemoryChildNodeEntry> entries = com.google.common.collect.Lists.newArrayList();\n        for (java.util.Map.Entry<java.lang.String, org.apache.jackrabbit.core.id.NodeId> entry : nodes.entrySet()) {\n            java.lang.String name = entry.getKey();\n            try {\n                org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState child = new org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState(this, name, loader.loadBundle(entry.getValue()));\n                entries.add(new org.apache.jackrabbit.oak.plugins.memory.MemoryChildNodeEntry(name, child));\n            } catch (org.apache.jackrabbit.core.state.ItemStateException e) {\n                warn(\"Skipping broken child node entry \" + name, e);\n            }\n        }\n        return entries;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.state.NodeBuilder builder() {\n        return new org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder(this);\n    }\n\n    private java.util.Map<java.lang.String, org.apache.jackrabbit.core.id.NodeId> createNodes(org.apache.jackrabbit.core.persistence.util.NodePropBundle bundle) {\n        java.util.Map<java.lang.String, org.apache.jackrabbit.core.id.NodeId> children = com.google.common.collect.Maps.newLinkedHashMap();\n        for (org.apache.jackrabbit.core.persistence.util.NodePropBundle.ChildNodeEntry entry : bundle.getChildNodeEntries()) {\n            java.lang.String base = createName(entry.getName());\n            java.lang.String name = base;\n            for (int i = 2; children.containsKey(name); i++) {\n                name = ((base + '[') + i) + ']';\n            }\n            children.put(name, entry.getId());\n        }\n        return children;\n    }\n\n    private java.util.Map<java.lang.String, org.apache.jackrabbit.oak.api.PropertyState> createProperties(org.apache.jackrabbit.core.persistence.util.NodePropBundle bundle) {\n        java.util.Map<java.lang.String, org.apache.jackrabbit.oak.api.PropertyState> properties = com.google.common.collect.Maps.newHashMap();\n        java.lang.String primary;\n        if (bundle.getNodeTypeName() != null) {\n            primary = createName(bundle.getNodeTypeName());\n        } else {\n            warn(\"Missing primary node type; defaulting to nt:unstructured\");\n            primary = org.apache.jackrabbit.JcrConstants.NT_UNSTRUCTURED;\n        }\n        properties.put(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, primary, Type.NAME));\n        java.util.Set<java.lang.String> mixins = com.google.common.collect.Sets.newLinkedHashSet();\n        if (bundle.getMixinTypeNames() != null) {\n            for (org.apache.jackrabbit.spi.Name mixin : bundle.getMixinTypeNames()) {\n                mixins.add(createName(mixin));\n            }\n        }\n        if (!mixins.isEmpty()) {\n            properties.put(org.apache.jackrabbit.JcrConstants.JCR_MIXINTYPES, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.JcrConstants.JCR_MIXINTYPES, mixins, Type.NAMES));\n        }\n        if (bundle.isReferenceable() || isReferenceable.apply(primary, mixins)) {\n            properties.put(org.apache.jackrabbit.JcrConstants.JCR_UUID, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.JcrConstants.JCR_UUID, bundle.getId().toString()));\n        }\n        if (isOrderable.apply(primary, mixins)) {\n            properties.put(org.apache.jackrabbit.oak.upgrade.OAK_CHILD_ORDER, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.oak.upgrade.OAK_CHILD_ORDER, nodes.keySet(), Type.NAMES));\n        }\n        for (org.apache.jackrabbit.core.persistence.util.NodePropBundle.PropertyEntry property : bundle.getPropertyEntries()) {\n            java.lang.String name = createName(property.getName());\n            try {\n                int type = property.getType();\n                if (property.isMultiValued()) {\n                    properties.put(name, createProperty(name, type, property.getValues()));\n                } else {\n                    properties.put(name, createProperty(name, type, property.getValues()[0]));\n                }\n            } catch (java.lang.Exception e) {\n                warn(\"Skipping broken property entry \" + name, e);\n            }\n        }\n        org.apache.jackrabbit.oak.api.PropertyState frozenUuid = properties.get(org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID);\n        if (((frozenUuid != null) && (frozenUuid.getType() == org.apache.jackrabbit.oak.api.Type.STRING)) && isFrozenNode.apply(primary, mixins)) {\n            java.lang.String frozenPrimary = org.apache.jackrabbit.JcrConstants.NT_UNSTRUCTURED;\n            java.util.Set<java.lang.String> frozenMixins = com.google.common.collect.Sets.newHashSet();\n            org.apache.jackrabbit.oak.api.PropertyState property = properties.get(org.apache.jackrabbit.JcrConstants.JCR_FROZENPRIMARYTYPE);\n            if ((property != null) && (property.getType() == org.apache.jackrabbit.oak.api.Type.NAME)) {\n                primary = property.getValue(org.apache.jackrabbit.oak.api.Type.NAME);\n            }\n            property = properties.get(org.apache.jackrabbit.JcrConstants.JCR_FROZENMIXINTYPES);\n            if ((property != null) && (property.getType() == org.apache.jackrabbit.oak.api.Type.NAMES)) {\n                com.google.common.collect.Iterables.addAll(frozenMixins, property.getValue(org.apache.jackrabbit.oak.api.Type.NAMES));\n            }\n            if (!isReferenceable.apply(frozenPrimary, frozenMixins)) {\n                frozenUuid = org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID, (parent.getString(org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID) + \"/\") + name);\n                properties.put(org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID, frozenUuid);\n            }\n        }\n        return properties;\n    }\n\n    private org.apache.jackrabbit.oak.api.PropertyState createProperty(java.lang.String name, int type, org.apache.jackrabbit.core.value.InternalValue value) throws java.io.IOException, javax.jcr.RepositoryException {\n        switch (type) {\n            case javax.jcr.PropertyType.BINARY :\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, createBlob(value), Type.BINARY);\n            case javax.jcr.PropertyType.BOOLEAN :\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, value.getBoolean(), Type.BOOLEAN);\n            case javax.jcr.PropertyType.DATE :\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, value.getString(), Type.DATE);\n            case javax.jcr.PropertyType.DECIMAL :\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, value.getDecimal(), Type.DECIMAL);\n            case javax.jcr.PropertyType.DOUBLE :\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, value.getDouble(), Type.DOUBLE);\n            case javax.jcr.PropertyType.LONG :\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, value.getLong(), Type.LONG);\n            case javax.jcr.PropertyType.NAME :\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, createName(value.getName()), Type.NAME);\n            case javax.jcr.PropertyType.PATH :\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, createPath(value.getPath()), Type.PATH);\n            case javax.jcr.PropertyType.REFERENCE :\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, value.getNodeId().toString(), Type.REFERENCE);\n            case javax.jcr.PropertyType.STRING :\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, value.getString(), Type.STRING);\n            case javax.jcr.PropertyType.URI :\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, value.getURI().toString(), Type.URI);\n            case javax.jcr.PropertyType.WEAKREFERENCE :\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, value.getNodeId().toString(), Type.WEAKREFERENCE);\n            default :\n                throw new javax.jcr.RepositoryException(\"Unknown value type: \" + type);\n        }\n    }\n\n    private org.apache.jackrabbit.oak.api.PropertyState createProperty(java.lang.String name, int type, org.apache.jackrabbit.core.value.InternalValue[] values) throws java.io.IOException, javax.jcr.RepositoryException {\n        switch (type) {\n            case javax.jcr.PropertyType.BINARY :\n                java.util.List<org.apache.jackrabbit.oak.api.Blob> binaries = com.google.common.collect.Lists.newArrayListWithCapacity(values.length);\n                for (org.apache.jackrabbit.core.value.InternalValue value : values) {\n                    binaries.add(createBlob(value));\n                }\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, binaries, Type.BINARIES);\n            case javax.jcr.PropertyType.BOOLEAN :\n                java.util.List<java.lang.Boolean> booleans = com.google.common.collect.Lists.newArrayListWithCapacity(values.length);\n                for (org.apache.jackrabbit.core.value.InternalValue value : values) {\n                    booleans.add(value.getBoolean());\n                }\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, booleans, Type.BOOLEANS);\n            case javax.jcr.PropertyType.DATE :\n                java.util.List<java.lang.String> dates = com.google.common.collect.Lists.newArrayListWithCapacity(values.length);\n                for (org.apache.jackrabbit.core.value.InternalValue value : values) {\n                    dates.add(value.getString());\n                }\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, dates, Type.DATES);\n            case javax.jcr.PropertyType.DECIMAL :\n                java.util.List<java.math.BigDecimal> decimals = com.google.common.collect.Lists.newArrayListWithCapacity(values.length);\n                for (org.apache.jackrabbit.core.value.InternalValue value : values) {\n                    decimals.add(value.getDecimal());\n                }\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, decimals, Type.DECIMALS);\n            case javax.jcr.PropertyType.DOUBLE :\n                java.util.List<java.lang.Double> doubles = com.google.common.collect.Lists.newArrayListWithCapacity(values.length);\n                for (org.apache.jackrabbit.core.value.InternalValue value : values) {\n                    doubles.add(value.getDouble());\n                }\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, doubles, Type.DOUBLES);\n            case javax.jcr.PropertyType.LONG :\n                java.util.List<java.lang.Long> longs = com.google.common.collect.Lists.newArrayListWithCapacity(values.length);\n                for (org.apache.jackrabbit.core.value.InternalValue value : values) {\n                    longs.add(value.getLong());\n                }\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, longs, Type.LONGS);\n            case javax.jcr.PropertyType.NAME :\n                java.util.List<java.lang.String> names = com.google.common.collect.Lists.newArrayListWithCapacity(values.length);\n                for (org.apache.jackrabbit.core.value.InternalValue value : values) {\n                    names.add(createName(value.getName()));\n                }\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, names, Type.NAMES);\n            case javax.jcr.PropertyType.PATH :\n                java.util.List<java.lang.String> paths = com.google.common.collect.Lists.newArrayListWithCapacity(values.length);\n                for (org.apache.jackrabbit.core.value.InternalValue value : values) {\n                    paths.add(createPath(value.getPath()));\n                }\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, paths, Type.PATHS);\n            case javax.jcr.PropertyType.REFERENCE :\n                java.util.List<java.lang.String> references = com.google.common.collect.Lists.newArrayListWithCapacity(values.length);\n                for (org.apache.jackrabbit.core.value.InternalValue value : values) {\n                    references.add(value.getNodeId().toString());\n                }\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, references, Type.REFERENCES);\n            case javax.jcr.PropertyType.STRING :\n                java.util.List<java.lang.String> strings = com.google.common.collect.Lists.newArrayListWithCapacity(values.length);\n                for (org.apache.jackrabbit.core.value.InternalValue value : values) {\n                    strings.add(value.getString());\n                }\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, strings, Type.STRINGS);\n            case javax.jcr.PropertyType.URI :\n                java.util.List<java.lang.String> uris = com.google.common.collect.Lists.newArrayListWithCapacity(values.length);\n                for (org.apache.jackrabbit.core.value.InternalValue value : values) {\n                    uris.add(value.getURI().toString());\n                }\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, uris, Type.URIS);\n            case javax.jcr.PropertyType.WEAKREFERENCE :\n                java.util.List<java.lang.String> weakreferences = com.google.common.collect.Lists.newArrayListWithCapacity(values.length);\n                for (org.apache.jackrabbit.core.value.InternalValue value : values) {\n                    weakreferences.add(value.getNodeId().toString());\n                }\n                return org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(name, weakreferences, Type.WEAKREFERENCES);\n            default :\n                throw new javax.jcr.RepositoryException(\"Unknown value type: \" + type);\n        }\n    }\n\n    private org.apache.jackrabbit.oak.api.Blob createBlob(final org.apache.jackrabbit.core.value.InternalValue value) {\n        com.google.common.base.Preconditions.checkArgument(com.google.common.base.Preconditions.checkNotNull(value).getType() == javax.jcr.PropertyType.BINARY);\n        return new org.apache.jackrabbit.oak.plugins.memory.AbstractBlob() {\n            @java.lang.Override\n            public long length() {\n                try {\n                    return value.getLength();\n                } catch (javax.jcr.RepositoryException e) {\n                    warn(\"Unable to access blob length\", e);\n                    return 0;\n                }\n            }\n\n            @java.lang.Override\n            public java.io.InputStream getNewStream() {\n                try {\n                    return value.getStream();\n                } catch (javax.jcr.RepositoryException e) {\n                    warn(\"Unable to access blob contents\", e);\n                    return new java.io.ByteArrayInputStream(new byte[0]);\n                }\n            }\n\n            @java.lang.Override\n            public java.lang.String getReference() {\n                if (!useBinaryReferences) {\n                    return null;\n                }\n                try {\n                    javax.jcr.Binary binary = value.getBinary();\n                    try {\n                        if (binary instanceof org.apache.jackrabbit.api.ReferenceBinary) {\n                            return ((org.apache.jackrabbit.api.ReferenceBinary) (binary)).getReference();\n                        } else {\n                            return null;\n                        }\n                    } finally {\n                        binary.dispose();\n                    }\n                } catch (javax.jcr.RepositoryException e) {\n                    warn(\"Unable to get blob reference\", e);\n                    return null;\n                }\n            }\n        };\n    }\n\n    private java.lang.String createName(org.apache.jackrabbit.spi.Name name) {\n        java.lang.String uri = name.getNamespaceURI();\n        java.lang.String local = name.getLocalName();\n        if ((uri == null) || uri.isEmpty()) {\n            return local;\n        } else {\n            java.lang.String prefix = uriToPrefix.get(uri);\n            if (prefix != null) {\n                return (prefix + \":\") + local;\n            } else {\n                warn(\"No prefix mapping found for \" + name);\n                return ((\"{\" + uri) + \"}\") + local;\n            }\n        }\n    }\n\n    private java.lang.String createPath(org.apache.jackrabbit.spi.Path path) throws javax.jcr.RepositoryException {\n        java.lang.StringBuilder builder = new java.lang.StringBuilder();\n        for (org.apache.jackrabbit.spi.Path.Element element : path.getElements()) {\n            if ((builder.length() > 1) || ((builder.length() == 1) && (!\"/\".equals(builder.toString())))) {\n                builder.append('/');\n            }\n            if (element.denotesRoot()) {\n                builder.append('/');\n            } else if (element.denotesIdentifier()) {\n                builder.append('[').append(element.getIdentifier()).append(']');\n            } else if (element.denotesName()) {\n                builder.append(createName(element.getName()));\n                if (element.getIndex() >= org.apache.jackrabbit.spi.Path.INDEX_DEFAULT) {\n                    builder.append('[').append(element.getIndex()).append(']');\n                }\n            } else if (element.denotesParent()) {\n                builder.append(\"..\");\n            } else if (element.denotesCurrent()) {\n                builder.append('.');\n            } else {\n                warn(\"Unknown element in path: \" + path);\n                builder.append(element.getString());\n            }\n        }\n        return builder.toString();\n    }\n\n    private java.lang.String getPath() {\n        if (path == null) {\n            path = org.apache.jackrabbit.oak.commons.PathUtils.concat(parent.getPath(), name);\n        }\n        return path;\n    }\n\n    private void warn(java.lang.String message) {\n        org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState.log.warn((getPath() + \": \") + message);\n    }\n\n    private void warn(java.lang.String message, java.lang.Throwable cause) {\n        org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState.log.warn((getPath() + \": \") + message, cause);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Constructor",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "this.isFrozenNode = parent.isFrozenNode",
            "src_parent": "{\n    this.parent = parent;\n    this.name = name;\n    this.path = null;\n    this.loader = parent.loader;\n    this.isReferenceable = parent.isReferenceable;\n    this.isOrderable = parent.isOrderable;\n    this.isFrozenNode = parent.isFrozenNode;\n    this.uriToPrefix = parent.uriToPrefix;\n    this.nodes = createNodes(bundle);\n    this.properties = createProperties(bundle);\n    this.useBinaryReferences = parent.useBinaryReferences;\n    org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState.logNewNode(this);\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Constructor",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "this.isFrozenNode = new org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate(root, org.apache.jackrabbit.JcrConstants.NT_FROZENNODE)",
            "src_parent": "{\n    this.parent = null;\n    this.name = null;\n    this.path = path;\n    this.loader = new org.apache.jackrabbit.oak.upgrade.BundleLoader(source);\n    this.isReferenceable = new org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate(root, org.apache.jackrabbit.JcrConstants.MIX_REFERENCEABLE);\n    this.isOrderable = org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate.isOrderable(root);\n    this.isFrozenNode = new org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate(root, org.apache.jackrabbit.JcrConstants.NT_FROZENNODE);\n    this.uriToPrefix = uriToPrefix;\n    try {\n        org.apache.jackrabbit.core.persistence.util.NodePropBundle bundle = loader.loadBundle(id);\n        this.nodes = createNodes(bundle);\n        this.properties = createProperties(bundle);\n    } catch (org.apache.jackrabbit.core.state.ItemStateException e) {\n        throw new java.lang.IllegalStateException(\"Unable to access node \" + id, e);\n    }\n    this.useBinaryReferences = useBinaryReferences;\n    org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState.logNewNode(this);\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.api.PropertyState frozenUuid = properties.get(org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID)",
            "src_parent": "{\n    java.util.Map<java.lang.String, org.apache.jackrabbit.oak.api.PropertyState> properties = com.google.common.collect.Maps.newHashMap();\n    java.lang.String primary;\n    if (bundle.getNodeTypeName() != null) {\n        primary = createName(bundle.getNodeTypeName());\n    } else {\n        warn(\"Missing primary node type; defaulting to nt:unstructured\");\n        primary = org.apache.jackrabbit.JcrConstants.NT_UNSTRUCTURED;\n    }\n    properties.put(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, primary, Type.NAME));\n    java.util.Set<java.lang.String> mixins = com.google.common.collect.Sets.newLinkedHashSet();\n    if (bundle.getMixinTypeNames() != null) {\n        for (org.apache.jackrabbit.spi.Name mixin : bundle.getMixinTypeNames()) {\n            mixins.add(createName(mixin));\n        }\n    }\n    if (!mixins.isEmpty()) {\n        properties.put(org.apache.jackrabbit.JcrConstants.JCR_MIXINTYPES, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.JcrConstants.JCR_MIXINTYPES, mixins, Type.NAMES));\n    }\n    if (bundle.isReferenceable() || isReferenceable.apply(primary, mixins)) {\n        properties.put(org.apache.jackrabbit.JcrConstants.JCR_UUID, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.JcrConstants.JCR_UUID, bundle.getId().toString()));\n    }\n    if (isOrderable.apply(primary, mixins)) {\n        properties.put(org.apache.jackrabbit.oak.upgrade.OAK_CHILD_ORDER, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.oak.upgrade.OAK_CHILD_ORDER, nodes.keySet(), Type.NAMES));\n    }\n    for (org.apache.jackrabbit.core.persistence.util.NodePropBundle.PropertyEntry property : bundle.getPropertyEntries()) {\n        java.lang.String name = createName(property.getName());\n        try {\n            int type = property.getType();\n            if (property.isMultiValued()) {\n                properties.put(name, createProperty(name, type, property.getValues()));\n            } else {\n                properties.put(name, createProperty(name, type, property.getValues()[0]));\n            }\n        } catch (java.lang.Exception e) {\n            warn(\"Skipping broken property entry \" + name, e);\n        }\n    }\n    org.apache.jackrabbit.oak.api.PropertyState frozenUuid = properties.get(org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID);\n    if (((frozenUuid != null) && (frozenUuid.getType() == org.apache.jackrabbit.oak.api.Type.STRING)) && isFrozenNode.apply(primary, mixins)) {\n        java.lang.String frozenPrimary = org.apache.jackrabbit.JcrConstants.NT_UNSTRUCTURED;\n        java.util.Set<java.lang.String> frozenMixins = com.google.common.collect.Sets.newHashSet();\n        org.apache.jackrabbit.oak.api.PropertyState property = properties.get(org.apache.jackrabbit.JcrConstants.JCR_FROZENPRIMARYTYPE);\n        if ((property != null) && (property.getType() == org.apache.jackrabbit.oak.api.Type.NAME)) {\n            primary = property.getValue(org.apache.jackrabbit.oak.api.Type.NAME);\n        }\n        property = properties.get(org.apache.jackrabbit.JcrConstants.JCR_FROZENMIXINTYPES);\n        if ((property != null) && (property.getType() == org.apache.jackrabbit.oak.api.Type.NAMES)) {\n            com.google.common.collect.Iterables.addAll(frozenMixins, property.getValue(org.apache.jackrabbit.oak.api.Type.NAMES));\n        }\n        if (!isReferenceable.apply(frozenPrimary, frozenMixins)) {\n            frozenUuid = org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID, (parent.getString(org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID) + \"/\") + name);\n            properties.put(org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID, frozenUuid);\n        }\n    }\n    return properties;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (((frozenUuid != null) && (frozenUuid.getType() == org.apache.jackrabbit.oak.api.Type.STRING)) && isFrozenNode.apply(primary, mixins)) {\n    java.lang.String frozenPrimary = org.apache.jackrabbit.JcrConstants.NT_UNSTRUCTURED;\n    java.util.Set<java.lang.String> frozenMixins = com.google.common.collect.Sets.newHashSet();\n    org.apache.jackrabbit.oak.api.PropertyState property = properties.get(org.apache.jackrabbit.JcrConstants.JCR_FROZENPRIMARYTYPE);\n    if ((property != null) && (property.getType() == org.apache.jackrabbit.oak.api.Type.NAME)) {\n        primary = property.getValue(org.apache.jackrabbit.oak.api.Type.NAME);\n    }\n    property = properties.get(org.apache.jackrabbit.JcrConstants.JCR_FROZENMIXINTYPES);\n    if ((property != null) && (property.getType() == org.apache.jackrabbit.oak.api.Type.NAMES)) {\n        com.google.common.collect.Iterables.addAll(frozenMixins, property.getValue(org.apache.jackrabbit.oak.api.Type.NAMES));\n    }\n    if (!isReferenceable.apply(frozenPrimary, frozenMixins)) {\n        frozenUuid = org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID, (parent.getString(org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID) + \"/\") + name);\n        properties.put(org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID, frozenUuid);\n    }\n}",
            "src_parent": "{\n    java.util.Map<java.lang.String, org.apache.jackrabbit.oak.api.PropertyState> properties = com.google.common.collect.Maps.newHashMap();\n    java.lang.String primary;\n    if (bundle.getNodeTypeName() != null) {\n        primary = createName(bundle.getNodeTypeName());\n    } else {\n        warn(\"Missing primary node type; defaulting to nt:unstructured\");\n        primary = org.apache.jackrabbit.JcrConstants.NT_UNSTRUCTURED;\n    }\n    properties.put(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, primary, Type.NAME));\n    java.util.Set<java.lang.String> mixins = com.google.common.collect.Sets.newLinkedHashSet();\n    if (bundle.getMixinTypeNames() != null) {\n        for (org.apache.jackrabbit.spi.Name mixin : bundle.getMixinTypeNames()) {\n            mixins.add(createName(mixin));\n        }\n    }\n    if (!mixins.isEmpty()) {\n        properties.put(org.apache.jackrabbit.JcrConstants.JCR_MIXINTYPES, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.JcrConstants.JCR_MIXINTYPES, mixins, Type.NAMES));\n    }\n    if (bundle.isReferenceable() || isReferenceable.apply(primary, mixins)) {\n        properties.put(org.apache.jackrabbit.JcrConstants.JCR_UUID, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.JcrConstants.JCR_UUID, bundle.getId().toString()));\n    }\n    if (isOrderable.apply(primary, mixins)) {\n        properties.put(org.apache.jackrabbit.oak.upgrade.OAK_CHILD_ORDER, org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.oak.upgrade.OAK_CHILD_ORDER, nodes.keySet(), Type.NAMES));\n    }\n    for (org.apache.jackrabbit.core.persistence.util.NodePropBundle.PropertyEntry property : bundle.getPropertyEntries()) {\n        java.lang.String name = createName(property.getName());\n        try {\n            int type = property.getType();\n            if (property.isMultiValued()) {\n                properties.put(name, createProperty(name, type, property.getValues()));\n            } else {\n                properties.put(name, createProperty(name, type, property.getValues()[0]));\n            }\n        } catch (java.lang.Exception e) {\n            warn(\"Skipping broken property entry \" + name, e);\n        }\n    }\n    org.apache.jackrabbit.oak.api.PropertyState frozenUuid = properties.get(org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID);\n    if (((frozenUuid != null) && (frozenUuid.getType() == org.apache.jackrabbit.oak.api.Type.STRING)) && isFrozenNode.apply(primary, mixins)) {\n        java.lang.String frozenPrimary = org.apache.jackrabbit.JcrConstants.NT_UNSTRUCTURED;\n        java.util.Set<java.lang.String> frozenMixins = com.google.common.collect.Sets.newHashSet();\n        org.apache.jackrabbit.oak.api.PropertyState property = properties.get(org.apache.jackrabbit.JcrConstants.JCR_FROZENPRIMARYTYPE);\n        if ((property != null) && (property.getType() == org.apache.jackrabbit.oak.api.Type.NAME)) {\n            primary = property.getValue(org.apache.jackrabbit.oak.api.Type.NAME);\n        }\n        property = properties.get(org.apache.jackrabbit.JcrConstants.JCR_FROZENMIXINTYPES);\n        if ((property != null) && (property.getType() == org.apache.jackrabbit.oak.api.Type.NAMES)) {\n            com.google.common.collect.Iterables.addAll(frozenMixins, property.getValue(org.apache.jackrabbit.oak.api.Type.NAMES));\n        }\n        if (!isReferenceable.apply(frozenPrimary, frozenMixins)) {\n            frozenUuid = org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID, (parent.getString(org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID) + \"/\") + name);\n            properties.put(org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID, frozenUuid);\n        }\n    }\n    return properties;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "JackrabbitNodeState"
    }
  ],
  "id": "jackrabbit-oak_08ba79d4"
}