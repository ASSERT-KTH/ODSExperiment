{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (org.apache.accumulo.server.fs.ViewFSUtils.isViewFS(fs)) {\n    try {\n        org.apache.hadoop.fs.FileSystem resolvedFs = org.apache.accumulo.server.fs.ViewFSUtils.resolvePath(fs, new org.apache.hadoop.fs.Path(\"/\")).getFileSystem(fs.getConf());\n        org.apache.accumulo.server.fs.VolumeManagerImpl.log.debug((((\"resolved \" + fs.getUri()) + \" to \") + resolvedFs.getUri()) + \" for sync check\");\n        fs = resolvedFs;\n    } catch (java.io.IOException e) {\n        org.apache.accumulo.server.fs.VolumeManagerImpl.log.warn(\"Failed to resolve \" + fs.getUri(), e);\n    }\n}",
            "src_parent": "{\n    final java.lang.String volumeName = entry.getKey();\n    org.apache.hadoop.fs.FileSystem fs = entry.getValue().getFileSystem();\n    if (org.apache.accumulo.server.fs.ViewFSUtils.isViewFS(fs)) {\n        try {\n            org.apache.hadoop.fs.FileSystem resolvedFs = org.apache.accumulo.server.fs.ViewFSUtils.resolvePath(fs, new org.apache.hadoop.fs.Path(\"/\")).getFileSystem(fs.getConf());\n            org.apache.accumulo.server.fs.VolumeManagerImpl.log.debug((((\"resolved \" + fs.getUri()) + \" to \") + resolvedFs.getUri()) + \" for sync check\");\n            fs = resolvedFs;\n        } catch (java.io.IOException e) {\n            org.apache.accumulo.server.fs.VolumeManagerImpl.log.warn(\"Failed to resolve \" + fs.getUri(), e);\n        }\n    }\n    if (fs instanceof org.apache.hadoop.hdfs.DistributedFileSystem) {\n        final java.lang.String DFS_DURABLE_SYNC = \"dfs.durable.sync\";\n        final java.lang.String DFS_SUPPORT_APPEND = \"dfs.support.append\";\n        final java.lang.String ticketMessage = \"See ACCUMULO-623 and ACCUMULO-1637 for more details.\";\n        try {\n            org.apache.hadoop.hdfs.DFSConfigKeys configKeys = new org.apache.hadoop.hdfs.DFSConfigKeys();\n            java.lang.reflect.Field dfsSupportAppendDefaultField = configKeys.getClass().getField(\"DFS_SUPPORT_APPEND_DEFAULT\");\n            boolean dfsSupportAppendDefaultValue = dfsSupportAppendDefaultField.getBoolean(configKeys);\n            if (!dfsSupportAppendDefaultValue) {\n                if (!fs.getConf().getBoolean(DFS_SUPPORT_APPEND, false)) {\n                    java.lang.String msg = \"Accumulo requires that dfs.support.append to true. \" + ticketMessage;\n                    org.apache.accumulo.server.fs.VolumeManagerImpl.log.fatal(msg);\n                    throw new java.lang.RuntimeException(msg);\n                }\n            }\n        } catch (java.lang.NoSuchFieldException e) {\n        } catch (java.lang.Exception e) {\n            org.apache.accumulo.server.fs.VolumeManagerImpl.log.warn(((((\"Error while checking for \" + DFS_SUPPORT_APPEND) + \" on volume \") + volumeName) + \". The user should ensure that Hadoop is configured to properly supports append and sync. \") + ticketMessage, e);\n        }\n        if ((!fs.getConf().getBoolean(DFS_SUPPORT_APPEND, true)) || (!fs.getConf().getBoolean(DFS_DURABLE_SYNC, true))) {\n            java.lang.String msg = ((((\"Accumulo requires that \" + DFS_SUPPORT_APPEND) + \" and \") + DFS_DURABLE_SYNC) + \" not be configured as false. \") + ticketMessage;\n            org.apache.accumulo.server.fs.VolumeManagerImpl.log.fatal(msg);\n            throw new java.lang.RuntimeException(msg);\n        }\n        try {\n            java.lang.Class<?> dfsConfigKeysClz = java.lang.Class.forName(\"org.apache.hadoop.hdfs.DFSConfigKeys\");\n            dfsConfigKeysClz.getDeclaredField(\"DFS_DATANODE_SYNCONCLOSE_KEY\");\n            if (!fs.getConf().getBoolean(\"dfs.datanode.synconclose\", false)) {\n                org.apache.accumulo.server.fs.VolumeManagerImpl.log.warn(\"dfs.datanode.synconclose set to false in hdfs-site.xml: data loss is possible on system reset or power loss\");\n            }\n        } catch (java.lang.ClassNotFoundException ex) {\n        } catch (java.lang.SecurityException e) {\n        } catch (java.lang.NoSuchFieldException e) {\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (org.apache.accumulo.server.fs.ViewFSUtils.isViewFS(fs)) {\n    try {\n        org.apache.hadoop.fs.FileSystem resolvedFs = org.apache.accumulo.server.fs.ViewFSUtils.resolvePath(fs, new org.apache.hadoop.fs.Path(\"/\")).getFileSystem(fs.getConf());\n        org.apache.accumulo.server.fs.VolumeManagerImpl.log.debug((((\"resolved \" + fs.getUri()) + \" to \") + resolvedFs.getUri()) + \" for ready check\");\n        fs = resolvedFs;\n    } catch (java.io.IOException e) {\n        org.apache.accumulo.server.fs.VolumeManagerImpl.log.warn(\"Failed to resolve \" + fs.getUri(), e);\n    }\n}",
            "src_parent": "{\n    org.apache.hadoop.fs.FileSystem fs = volume.getFileSystem();\n    if (org.apache.accumulo.server.fs.ViewFSUtils.isViewFS(fs)) {\n        try {\n            org.apache.hadoop.fs.FileSystem resolvedFs = org.apache.accumulo.server.fs.ViewFSUtils.resolvePath(fs, new org.apache.hadoop.fs.Path(\"/\")).getFileSystem(fs.getConf());\n            org.apache.accumulo.server.fs.VolumeManagerImpl.log.debug((((\"resolved \" + fs.getUri()) + \" to \") + resolvedFs.getUri()) + \" for ready check\");\n            fs = resolvedFs;\n        } catch (java.io.IOException e) {\n            org.apache.accumulo.server.fs.VolumeManagerImpl.log.warn(\"Failed to resolve \" + fs.getUri(), e);\n        }\n    }\n    if (!(fs instanceof org.apache.hadoop.hdfs.DistributedFileSystem)) {\n        continue;\n    }\n    org.apache.hadoop.hdfs.DistributedFileSystem dfs = ((org.apache.hadoop.hdfs.DistributedFileSystem) (fs));\n    java.lang.Class<?> safeModeAction;\n    try {\n        safeModeAction = java.lang.Class.forName(\"org.apache.hadoop.hdfs.protocol.HdfsConstants$SafeModeAction\");\n    } catch (java.lang.ClassNotFoundException ex) {\n        try {\n            safeModeAction = java.lang.Class.forName(\"org.apache.hadoop.hdfs.protocol.FSConstants$SafeModeAction\");\n        } catch (java.lang.ClassNotFoundException e) {\n            throw new java.lang.RuntimeException(\"Cannot figure out the right class for Constants\");\n        }\n    }\n    java.lang.Object get = null;\n    for (java.lang.Object obj : safeModeAction.getEnumConstants()) {\n        if (obj.toString().equals(\"SAFEMODE_GET\")) {\n            get = obj;\n        }\n    }\n    if (get == null) {\n        throw new java.lang.RuntimeException(\"cannot find SAFEMODE_GET\");\n    }\n    try {\n        java.lang.reflect.Method setSafeMode = dfs.getClass().getMethod(\"setSafeMode\", safeModeAction);\n        boolean inSafeMode = ((java.lang.Boolean) (setSafeMode.invoke(dfs, get)));\n        if (inSafeMode) {\n            return false;\n        }\n    } catch (java.lang.IllegalArgumentException exception) {\n        throw exception;\n    } catch (java.lang.Exception ex) {\n        throw new java.lang.RuntimeException(\"cannot find method setSafeMode\");\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (volumeUriOrDir.startsWith(\"viewfs\")) {\n    throw new java.lang.IllegalArgumentException();\n}",
            "src_parent": "{\n    if (volumeUriOrDir.equals(org.apache.accumulo.server.fs.VolumeManagerImpl.DEFAULT)) {\n        throw new java.lang.IllegalArgumentException();\n    }\n    if (volumeUriOrDir.startsWith(\"viewfs\")) {\n        throw new java.lang.IllegalArgumentException();\n    }\n    if (volumeUriOrDir.contains(\":\")) {\n        volumes.put(volumeUriOrDir, org.apache.accumulo.core.volume.VolumeConfiguration.create(new org.apache.hadoop.fs.Path(volumeUriOrDir), hadoopConf));\n    } else {\n        throw new java.lang.IllegalArgumentException(((\"Expected fully qualified URI for \" + Property.INSTANCE_VOLUMES.getKey()) + \" got \") + volumeUriOrDir);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "VolumeManagerImpl"
    }
  ],
  "id": "accumulo_d6472040"
}