{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(constraint.groups().length == 0)",
            "src_parent": "(constraint.groups().length == 0) && validatorGroups.isEmpty()",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private boolean canApplyToDefaultGroup(javax.validation.constraints.NotNull constraint) {\n    java.util.List<java.lang.Class<?>> groups = java.util.Arrays.asList(constraint.groups());\n    return (groups.size() == 0) || groups.contains(javax.validation.groups.Default.class);\n}",
            "src_parent": "public class PropertyValidator<T> extends org.apache.wicket.behavior.Behavior implements org.apache.wicket.validation.IValidator<T> {\n    private static final java.lang.Class<?>[] EMPTY = new java.lang.Class<?>[0];\n\n    private org.apache.wicket.markup.html.form.FormComponent<T> component;\n\n    private org.apache.wicket.bean.validation.Property property_;\n\n    private final org.apache.wicket.model.IModel<java.lang.Class<?>[]> groups_;\n\n    private boolean requiredFlagSet;\n\n    public PropertyValidator(java.lang.Class<?>... groups) {\n        this(null, groups);\n    }\n\n    public PropertyValidator(org.apache.wicket.model.IModel<java.lang.Class<?>[]> groups) {\n        this(null, groups);\n    }\n\n    public PropertyValidator(org.apache.wicket.bean.validation.Property property, java.lang.Class<?>... groups) {\n        this(property, new org.apache.wicket.bean.validation.GroupsModel(groups));\n    }\n\n    public PropertyValidator(org.apache.wicket.bean.validation.Property property, org.apache.wicket.model.IModel<java.lang.Class<?>[]> groups) {\n        this.property_ = property;\n        this.groups_ = groups;\n    }\n\n    private org.apache.wicket.bean.validation.Property getProperty() {\n        if (property_ == null) {\n            property_ = org.apache.wicket.bean.validation.BeanValidationConfiguration.get().resolveProperty(component);\n            if (property_ == null) {\n                throw new java.lang.IllegalStateException((((\"Could not resolve Property from component: \" + component) + \". Either specify the Property in the constructor or use a model that works in combination with a \") + org.apache.wicket.bean.validation.IPropertyResolver.class.getSimpleName()) + \" to resolve the Property automatically\");\n            }\n        }\n        return property_;\n    }\n\n    private java.lang.Class<?>[] getGroups() {\n        if (groups_ == null) {\n            return org.apache.wicket.bean.validation.PropertyValidator.EMPTY;\n        }\n        return groups_.getObject();\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    @java.lang.Override\n    public void bind(org.apache.wicket.Component component) {\n        if (this.component != null) {\n            throw new java.lang.IllegalStateException((\"This validator has already been added to component: \" + this.component) + \". This validator does not support reusing instances, please create a new one\");\n        }\n        if (!(component instanceof org.apache.wicket.markup.html.form.FormComponent)) {\n            throw new java.lang.IllegalStateException(getClass().getSimpleName() + \" can only be added to FormComponents\");\n        }\n        this.component = ((org.apache.wicket.markup.html.form.FormComponent<T>) (component));\n    }\n\n    @java.lang.Override\n    public void onConfigure(org.apache.wicket.Component component) {\n        super.onConfigure(component);\n        if (requiredFlagSet == false) {\n            requiredFlagSet = true;\n            if (isRequired()) {\n                this.component.setRequired(true);\n            }\n        }\n    }\n\n    @java.lang.Override\n    public void detach(org.apache.wicket.Component component) {\n        super.detach(component);\n        if (groups_ != null) {\n            groups_.detach();\n        }\n    }\n\n    private java.util.List<javax.validation.constraints.NotNull> findNotNullConstraints() {\n        org.apache.wicket.bean.validation.BeanValidationContext config = org.apache.wicket.bean.validation.BeanValidationConfiguration.get();\n        javax.validation.Validator validator = config.getValidator();\n        org.apache.wicket.bean.validation.Property property = getProperty();\n        java.util.List<javax.validation.constraints.NotNull> constraints = new java.util.ArrayList<javax.validation.constraints.NotNull>();\n        java.util.Iterator<javax.validation.metadata.ConstraintDescriptor<?>> it = new org.apache.wicket.bean.validation.ConstraintIterator(validator, property);\n        while (it.hasNext()) {\n            javax.validation.metadata.ConstraintDescriptor<?> desc = it.next();\n            if (desc.getAnnotation().annotationType().equals(javax.validation.constraints.NotNull.class)) {\n                constraints.add(((javax.validation.constraints.NotNull) (desc.getAnnotation())));\n            }\n        } \n        return constraints;\n    }\n\n    boolean isRequired() {\n        java.util.List<javax.validation.constraints.NotNull> constraints = findNotNullConstraints();\n        if (constraints.isEmpty()) {\n            return false;\n        }\n        java.util.HashSet<java.lang.Class<?>> validatorGroups = new java.util.HashSet<java.lang.Class<?>>();\n        validatorGroups.addAll(java.util.Arrays.asList(getGroups()));\n        for (javax.validation.constraints.NotNull constraint : constraints) {\n            if (canApplyToDefaultGroup(constraint) && validatorGroups.isEmpty()) {\n                return true;\n            }\n            for (java.lang.Class<?> constraintGroup : constraint.groups()) {\n                if (validatorGroups.contains(constraintGroup)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private boolean canApplyToDefaultGroup(javax.validation.constraints.NotNull constraint) {\n        java.util.List<java.lang.Class<?>> groups = java.util.Arrays.asList(constraint.groups());\n        return (groups.size() == 0) || groups.contains(javax.validation.groups.Default.class);\n    }\n\n    @java.lang.Override\n    @java.lang.SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    public void onComponentTag(org.apache.wicket.Component component, org.apache.wicket.markup.ComponentTag tag) {\n        super.onComponentTag(component, tag);\n        org.apache.wicket.bean.validation.BeanValidationContext config = org.apache.wicket.bean.validation.BeanValidationConfiguration.get();\n        javax.validation.Validator validator = config.getValidator();\n        org.apache.wicket.bean.validation.Property property = getProperty();\n        java.util.Iterator<javax.validation.metadata.ConstraintDescriptor<?>> it = new org.apache.wicket.bean.validation.ConstraintIterator(validator, property, getGroups());\n        while (it.hasNext()) {\n            javax.validation.metadata.ConstraintDescriptor<?> desc = it.next();\n            org.apache.wicket.bean.validation.ITagModifier modifier = config.getTagModifier(desc.getAnnotation().annotationType());\n            if (modifier != null) {\n                modifier.modify(((org.apache.wicket.markup.html.form.FormComponent<?>) (component)), tag, desc.getAnnotation());\n            }\n        } \n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    @java.lang.Override\n    public void validate(org.apache.wicket.validation.IValidatable<T> validatable) {\n        org.apache.wicket.bean.validation.BeanValidationContext config = org.apache.wicket.bean.validation.BeanValidationConfiguration.get();\n        javax.validation.Validator validator = config.getValidator();\n        org.apache.wicket.bean.validation.Property property = getProperty();\n        java.util.Set<?> violations = validator.validateValue(property.getOwner(), property.getName(), validatable.getValue(), getGroups());\n        for (javax.validation.ConstraintViolation<?> violation : ((java.util.Set<javax.validation.ConstraintViolation<?>>) (violations))) {\n            validatable.error(config.getViolationTranslator().convert(violation));\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "canApplyToDefaultGroup(constraint)",
            "src_parent": "canApplyToDefaultGroup(constraint) && validatorGroups.isEmpty()",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "constraint.groups()",
            "dst_parent": "java.util.Arrays.asList(constraint.groups())",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "constraint.groups()",
            "src_parent": "constraint.groups().length",
            "src_parent_type": "FieldRead",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "PropertyValidator"
    }
  ],
  "id": "wicket_f539c18c"
}