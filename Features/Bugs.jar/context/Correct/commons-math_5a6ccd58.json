{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "int iter = 0",
            "src_parent": "{\n    final boolean isMinim = getGoalType() == org.apache.commons.math3.optim.nonlinear.scalar.GoalType.MINIMIZE;\n    final double lo = getMin();\n    final double mid = getStartValue();\n    final double hi = getMax();\n    final org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.univariate.UnivariatePointValuePair> checker = getConvergenceChecker();\n    double a;\n    double b;\n    if (lo < hi) {\n        a = lo;\n        b = hi;\n    } else {\n        a = hi;\n        b = lo;\n    }\n    double x = mid;\n    double v = x;\n    double w = x;\n    double d = 0;\n    double e = 0;\n    double fx = computeObjectiveValue(x);\n    if (!isMinim) {\n        fx = -fx;\n    }\n    double fv = fx;\n    double fw = fx;\n    org.apache.commons.math3.optim.univariate.UnivariatePointValuePair previous = null;\n    org.apache.commons.math3.optim.univariate.UnivariatePointValuePair current = new org.apache.commons.math3.optim.univariate.UnivariatePointValuePair(x, isMinim ? fx : -fx);\n    org.apache.commons.math3.optim.univariate.UnivariatePointValuePair best = current;\n    int iter = 0;\n    while (true) {\n        final double m = 0.5 * (a + b);\n        final double tol1 = (relativeThreshold * org.apache.commons.math3.util.FastMath.abs(x)) + absoluteThreshold;\n        final double tol2 = 2 * tol1;\n        final boolean stop = org.apache.commons.math3.util.FastMath.abs(x - m) <= (tol2 - (0.5 * (b - a)));\n        if (!stop) {\n            double p = 0;\n            double q = 0;\n            double r = 0;\n            double u = 0;\n            if (org.apache.commons.math3.util.FastMath.abs(e) > tol1) {\n                r = (x - w) * (fx - fv);\n                q = (x - v) * (fx - fw);\n                p = ((x - v) * q) - ((x - w) * r);\n                q = 2 * (q - r);\n                if (q > 0) {\n                    p = -p;\n                } else {\n                    q = -q;\n                }\n                r = e;\n                e = d;\n                if (((p > (q * (a - x))) && (p < (q * (b - x)))) && (org.apache.commons.math3.util.FastMath.abs(p) < org.apache.commons.math3.util.FastMath.abs((0.5 * q) * r))) {\n                    d = p / q;\n                    u = x + d;\n                    if (((u - a) < tol2) || ((b - u) < tol2)) {\n                        if (x <= m) {\n                            d = tol1;\n                        } else {\n                            d = -tol1;\n                        }\n                    }\n                } else {\n                    if (x < m) {\n                        e = b - x;\n                    } else {\n                        e = a - x;\n                    }\n                    d = org.apache.commons.math3.optim.univariate.BrentOptimizer.GOLDEN_SECTION * e;\n                }\n            } else {\n                if (x < m) {\n                    e = b - x;\n                } else {\n                    e = a - x;\n                }\n                d = org.apache.commons.math3.optim.univariate.BrentOptimizer.GOLDEN_SECTION * e;\n            }\n            if (org.apache.commons.math3.util.FastMath.abs(d) < tol1) {\n                if (d >= 0) {\n                    u = x + tol1;\n                } else {\n                    u = x - tol1;\n                }\n            } else {\n                u = x + d;\n            }\n            double fu = computeObjectiveValue(u);\n            if (!isMinim) {\n                fu = -fu;\n            }\n            previous = current;\n            current = new org.apache.commons.math3.optim.univariate.UnivariatePointValuePair(u, isMinim ? fu : -fu);\n            best = best(best, best(previous, current, isMinim), isMinim);\n            if ((checker != null) && checker.converged(iter, previous, current)) {\n                return best;\n            }\n            if (fu <= fx) {\n                if (u < x) {\n                    b = x;\n                } else {\n                    a = x;\n                }\n                v = w;\n                fv = fw;\n                w = x;\n                fw = fx;\n                x = u;\n                fx = fu;\n            } else {\n                if (u < x) {\n                    a = u;\n                } else {\n                    b = u;\n                }\n                if ((fu <= fw) || org.apache.commons.math3.util.Precision.equals(w, x)) {\n                    v = w;\n                    fv = fw;\n                    w = u;\n                    fw = fu;\n                } else if (((fu <= fv) || org.apache.commons.math3.util.Precision.equals(v, x)) || org.apache.commons.math3.util.Precision.equals(v, w)) {\n                    v = u;\n                    fv = fu;\n                }\n            }\n        } else {\n            return best(best, best(previous, current, isMinim), isMinim);\n        }\n        ++iter;\n    } \n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "iter",
            "src_parent": "checker.converged(iter, previous, current)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "++iter",
            "src_parent": "{\n    final double m = 0.5 * (a + b);\n    final double tol1 = (relativeThreshold * org.apache.commons.math3.util.FastMath.abs(x)) + absoluteThreshold;\n    final double tol2 = 2 * tol1;\n    final boolean stop = org.apache.commons.math3.util.FastMath.abs(x - m) <= (tol2 - (0.5 * (b - a)));\n    if (!stop) {\n        double p = 0;\n        double q = 0;\n        double r = 0;\n        double u = 0;\n        if (org.apache.commons.math3.util.FastMath.abs(e) > tol1) {\n            r = (x - w) * (fx - fv);\n            q = (x - v) * (fx - fw);\n            p = ((x - v) * q) - ((x - w) * r);\n            q = 2 * (q - r);\n            if (q > 0) {\n                p = -p;\n            } else {\n                q = -q;\n            }\n            r = e;\n            e = d;\n            if (((p > (q * (a - x))) && (p < (q * (b - x)))) && (org.apache.commons.math3.util.FastMath.abs(p) < org.apache.commons.math3.util.FastMath.abs((0.5 * q) * r))) {\n                d = p / q;\n                u = x + d;\n                if (((u - a) < tol2) || ((b - u) < tol2)) {\n                    if (x <= m) {\n                        d = tol1;\n                    } else {\n                        d = -tol1;\n                    }\n                }\n            } else {\n                if (x < m) {\n                    e = b - x;\n                } else {\n                    e = a - x;\n                }\n                d = org.apache.commons.math3.optim.univariate.BrentOptimizer.GOLDEN_SECTION * e;\n            }\n        } else {\n            if (x < m) {\n                e = b - x;\n            } else {\n                e = a - x;\n            }\n            d = org.apache.commons.math3.optim.univariate.BrentOptimizer.GOLDEN_SECTION * e;\n        }\n        if (org.apache.commons.math3.util.FastMath.abs(d) < tol1) {\n            if (d >= 0) {\n                u = x + tol1;\n            } else {\n                u = x - tol1;\n            }\n        } else {\n            u = x + d;\n        }\n        double fu = computeObjectiveValue(u);\n        if (!isMinim) {\n            fu = -fu;\n        }\n        previous = current;\n        current = new org.apache.commons.math3.optim.univariate.UnivariatePointValuePair(u, isMinim ? fu : -fu);\n        best = best(best, best(previous, current, isMinim), isMinim);\n        if ((checker != null) && checker.converged(iter, previous, current)) {\n            return best;\n        }\n        if (fu <= fx) {\n            if (u < x) {\n                b = x;\n            } else {\n                a = x;\n            }\n            v = w;\n            fv = fw;\n            w = x;\n            fw = fx;\n            x = u;\n            fx = fu;\n        } else {\n            if (u < x) {\n                a = u;\n            } else {\n                b = u;\n            }\n            if ((fu <= fw) || org.apache.commons.math3.util.Precision.equals(w, x)) {\n                v = w;\n                fv = fw;\n                w = u;\n                fw = fu;\n            } else if (((fu <= fv) || org.apache.commons.math3.util.Precision.equals(v, x)) || org.apache.commons.math3.util.Precision.equals(v, w)) {\n                v = u;\n                fv = fu;\n            }\n        }\n    } else {\n        return best(best, best(previous, current, isMinim), isMinim);\n    }\n    ++iter;\n}",
            "src_parent_type": "Block",
            "src_type": "UnaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "incrementIterationCount()",
            "src_parent": "{\n    final double m = 0.5 * (a + b);\n    final double tol1 = (relativeThreshold * org.apache.commons.math3.util.FastMath.abs(x)) + absoluteThreshold;\n    final double tol2 = 2 * tol1;\n    final boolean stop = org.apache.commons.math3.util.FastMath.abs(x - m) <= (tol2 - (0.5 * (b - a)));\n    if (!stop) {\n        double p = 0;\n        double q = 0;\n        double r = 0;\n        double u = 0;\n        if (org.apache.commons.math3.util.FastMath.abs(e) > tol1) {\n            r = (x - w) * (fx - fv);\n            q = (x - v) * (fx - fw);\n            p = ((x - v) * q) - ((x - w) * r);\n            q = 2 * (q - r);\n            if (q > 0) {\n                p = -p;\n            } else {\n                q = -q;\n            }\n            r = e;\n            e = d;\n            if (((p > (q * (a - x))) && (p < (q * (b - x)))) && (org.apache.commons.math3.util.FastMath.abs(p) < org.apache.commons.math3.util.FastMath.abs((0.5 * q) * r))) {\n                d = p / q;\n                u = x + d;\n                if (((u - a) < tol2) || ((b - u) < tol2)) {\n                    if (x <= m) {\n                        d = tol1;\n                    } else {\n                        d = -tol1;\n                    }\n                }\n            } else {\n                if (x < m) {\n                    e = b - x;\n                } else {\n                    e = a - x;\n                }\n                d = org.apache.commons.math3.optim.univariate.BrentOptimizer.GOLDEN_SECTION * e;\n            }\n        } else {\n            if (x < m) {\n                e = b - x;\n            } else {\n                e = a - x;\n            }\n            d = org.apache.commons.math3.optim.univariate.BrentOptimizer.GOLDEN_SECTION * e;\n        }\n        if (org.apache.commons.math3.util.FastMath.abs(d) < tol1) {\n            if (d >= 0) {\n                u = x + tol1;\n            } else {\n                u = x - tol1;\n            }\n        } else {\n            u = x + d;\n        }\n        double fu = computeObjectiveValue(u);\n        if (!isMinim) {\n            fu = -fu;\n        }\n        previous = current;\n        current = new org.apache.commons.math3.optim.univariate.UnivariatePointValuePair(u, isMinim ? fu : -fu);\n        best = best(best, best(previous, current, isMinim), isMinim);\n        if ((checker != null) && checker.converged(getIterations(), previous, current)) {\n            return best;\n        }\n        if (fu <= fx) {\n            if (u < x) {\n                b = x;\n            } else {\n                a = x;\n            }\n            v = w;\n            fv = fw;\n            w = x;\n            fw = fx;\n            x = u;\n            fx = fu;\n        } else {\n            if (u < x) {\n                a = u;\n            } else {\n                b = u;\n            }\n            if ((fu <= fw) || org.apache.commons.math3.util.Precision.equals(w, x)) {\n                v = w;\n                fv = fw;\n                w = u;\n                fw = fu;\n            } else if (((fu <= fv) || org.apache.commons.math3.util.Precision.equals(v, x)) || org.apache.commons.math3.util.Precision.equals(v, w)) {\n                v = u;\n                fv = fu;\n            }\n        }\n    } else {\n        return best(best, best(previous, current, isMinim), isMinim);\n    }\n    incrementIterationCount();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "getIterations()",
            "src_parent": "checker.converged(getIterations(), previous, current)",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "BrentOptimizer"
    }
  ],
  "id": "commons-math_5a6ccd58"
}