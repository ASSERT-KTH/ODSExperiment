{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "\"getCanonicalHostName() Exception:\"",
            "dst_parent": "org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception:\", t)",
            "dst_parent_type": "Invocation",
            "dst_type": "Literal",
            "operator": "UPD",
            "src": "\"getCanonicalHostName() Exception\"",
            "src_parent": "org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception\", t)",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "this.hostName",
            "dst_parent": "this.hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(this.fqdnHostName)",
            "dst_parent_type": "Assignment",
            "dst_type": "FieldWrite",
            "operator": "UPD",
            "src": "this.fqdnHostNameIsIP",
            "src_parent": "this.fqdnHostNameIsIP = in.readBoolean()",
            "src_parent_type": "Assignment",
            "src_type": "FieldWrite"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "this.fqdnHostName",
            "dst_parent": "org.apache.flink.util.NetUtils.getHostnameFromFQDN(this.fqdnHostName)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "UPD",
            "src": "this.fqdnHostNameIsIP",
            "src_parent": "if (this.fqdnHostNameIsIP) {\n    hostName = fqdn;\n} else {\n    hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(fqdn);\n}",
            "src_parent_type": "If",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Catch",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "\"Unable to determine hostname for TaskManager. The performance might be degraded since HDFS input split assignment is not possible\"",
            "src_parent": "org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine hostname for TaskManager. The performance might be degraded since HDFS input split assignment is not possible\")",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.isDebugEnabled()) {\n    org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception\", t);\n}",
            "src_parent": "{\n    org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine hostname for TaskManager. The performance might be degraded since HDFS input split assignment is not possible\");\n    if (org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.isDebugEnabled()) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception\", t);\n    }\n    this.fqdnHostName = inetAddress.getHostAddress();\n    this.fqdnHostNameIsIP = true;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Catch",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "inetAddress",
            "src_parent": "inetAddress.getHostAddress()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "this.fqdnHostNameIsIP = true",
            "src_parent": "{\n    org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine hostname for TaskManager. The performance might be degraded since HDFS input split assignment is not possible\");\n    if (org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.isDebugEnabled()) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception\", t);\n    }\n    this.fqdnHostName = inetAddress.getHostAddress();\n    this.fqdnHostNameIsIP = true;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "org.apache.flink.runtime.instance.InstanceConnectionInfo",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "fqdn",
            "src_parent": "hostName = fqdn",
            "src_parent_type": "Assignment",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "hostName",
            "src_parent": "hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(fqdn)",
            "src_parent_type": "Assignment",
            "src_type": "FieldWrite"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "fqdn",
            "src_parent": "org.apache.flink.util.NetUtils.getHostnameFromFQDN(fqdn)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private boolean fqdnHostNameIsIP = false;",
            "src_parent": "public class InstanceConnectionInfo implements java.io.Serializable , java.lang.Comparable<org.apache.flink.runtime.instance.InstanceConnectionInfo> , org.apache.flink.core.io.IOReadableWritable {\n    private static final long serialVersionUID = -8254407801276350716L;\n\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.flink.runtime.instance.InstanceConnectionInfo.class);\n\n    private java.net.InetAddress inetAddress;\n\n    private int dataPort;\n\n    private java.lang.String fqdnHostName;\n\n    private java.lang.String hostName;\n\n    private boolean fqdnHostNameIsIP = false;\n\n    public InstanceConnectionInfo(java.net.InetAddress inetAddress, int dataPort) {\n        if (inetAddress == null) {\n            throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n        }\n        if (dataPort <= 0) {\n            throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n        }\n        this.dataPort = dataPort;\n        this.inetAddress = inetAddress;\n        try {\n            this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n        } catch (java.lang.Throwable t) {\n            org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine hostname for TaskManager. The performance might be degraded since HDFS input split assignment is not possible\");\n            if (org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.isDebugEnabled()) {\n                org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception\", t);\n            }\n            this.fqdnHostName = inetAddress.getHostAddress();\n            this.fqdnHostNameIsIP = true;\n        }\n    }\n\n    public InstanceConnectionInfo() {\n    }\n\n    public int dataPort() {\n        return this.dataPort;\n    }\n\n    public java.net.InetAddress address() {\n        return this.inetAddress;\n    }\n\n    public java.lang.String getFQDNHostname() {\n        return this.fqdnHostName;\n    }\n\n    public java.lang.String getHostname() {\n        if (hostName == null) {\n            java.lang.String fqdn = getFQDNHostname();\n            if (this.fqdnHostNameIsIP) {\n                hostName = fqdn;\n            } else {\n                hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(fqdn);\n            }\n        }\n        return hostName;\n    }\n\n    public java.lang.String getInetAdress() {\n        return this.inetAddress.toString();\n    }\n\n    @java.lang.Override\n    public void read(org.apache.flink.core.memory.DataInputView in) throws java.io.IOException {\n        final int addr_length = in.readInt();\n        byte[] address = new byte[addr_length];\n        in.readFully(address);\n        this.dataPort = in.readInt();\n        this.fqdnHostName = org.apache.flink.util.StringUtils.readNullableString(in);\n        this.hostName = org.apache.flink.util.StringUtils.readNullableString(in);\n        this.fqdnHostNameIsIP = in.readBoolean();\n        try {\n            this.inetAddress = java.net.InetAddress.getByAddress(address);\n        } catch (java.net.UnknownHostException e) {\n            throw new java.io.IOException(\"This lookup should never fail.\", e);\n        }\n    }\n\n    @java.lang.Override\n    public void write(final org.apache.flink.core.memory.DataOutputView out) throws java.io.IOException {\n        out.writeInt(this.inetAddress.getAddress().length);\n        out.write(this.inetAddress.getAddress());\n        out.writeInt(this.dataPort);\n        org.apache.flink.util.StringUtils.writeNullableString(fqdnHostName, out);\n        org.apache.flink.util.StringUtils.writeNullableString(hostName, out);\n        out.writeBoolean(fqdnHostNameIsIP);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return ((getFQDNHostname() + \" (dataPort=\") + dataPort) + \")\";\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object obj) {\n        if (obj instanceof org.apache.flink.runtime.instance.InstanceConnectionInfo) {\n            org.apache.flink.runtime.instance.InstanceConnectionInfo other = ((org.apache.flink.runtime.instance.InstanceConnectionInfo) (obj));\n            return (this.dataPort == other.dataPort) && this.inetAddress.equals(other.inetAddress);\n        } else {\n            return false;\n        }\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return this.inetAddress.hashCode() + (17 * dataPort);\n    }\n\n    @java.lang.Override\n    public int compareTo(org.apache.flink.runtime.instance.InstanceConnectionInfo o) {\n        byte[] thisAddress = this.inetAddress.getAddress();\n        byte[] otherAddress = o.inetAddress.getAddress();\n        if (thisAddress.length < otherAddress.length) {\n            return -1;\n        } else if (thisAddress.length > otherAddress.length) {\n            return 1;\n        } else {\n            for (int i = 0; i < thisAddress.length; i++) {\n                byte tb = thisAddress[i];\n                byte ob = otherAddress[i];\n                if (tb < ob) {\n                    return -1;\n                } else if (tb > ob) {\n                    return 1;\n                }\n            }\n        }\n        if (this.dataPort < o.dataPort) {\n            return -1;\n        } else if (this.dataPort > o.dataPort) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Constructor",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public InstanceConnectionInfo(java.net.InetAddress inetAddress, int dataPort) {\n    if (inetAddress == null) {\n        throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n    }\n    if (dataPort <= 0) {\n        throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n    }\n    this.dataPort = dataPort;\n    this.inetAddress = inetAddress;\n    try {\n        this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n    } catch (java.lang.Throwable t) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine hostname for TaskManager. The performance might be degraded since HDFS input split assignment is not possible\");\n        if (org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.isDebugEnabled()) {\n            org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception\", t);\n        }\n        this.fqdnHostName = inetAddress.getHostAddress();\n        this.fqdnHostNameIsIP = true;\n    }\n}",
            "src_parent": "public class InstanceConnectionInfo implements java.io.Serializable , java.lang.Comparable<org.apache.flink.runtime.instance.InstanceConnectionInfo> , org.apache.flink.core.io.IOReadableWritable {\n    private static final long serialVersionUID = -8254407801276350716L;\n\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.flink.runtime.instance.InstanceConnectionInfo.class);\n\n    private java.net.InetAddress inetAddress;\n\n    private int dataPort;\n\n    private java.lang.String fqdnHostName;\n\n    private java.lang.String hostName;\n\n    private boolean fqdnHostNameIsIP = false;\n\n    public InstanceConnectionInfo(java.net.InetAddress inetAddress, int dataPort) {\n        if (inetAddress == null) {\n            throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n        }\n        if (dataPort <= 0) {\n            throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n        }\n        this.dataPort = dataPort;\n        this.inetAddress = inetAddress;\n        try {\n            this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n        } catch (java.lang.Throwable t) {\n            org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine hostname for TaskManager. The performance might be degraded since HDFS input split assignment is not possible\");\n            if (org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.isDebugEnabled()) {\n                org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception\", t);\n            }\n            this.fqdnHostName = inetAddress.getHostAddress();\n            this.fqdnHostNameIsIP = true;\n        }\n    }\n\n    public InstanceConnectionInfo() {\n    }\n\n    public int dataPort() {\n        return this.dataPort;\n    }\n\n    public java.net.InetAddress address() {\n        return this.inetAddress;\n    }\n\n    public java.lang.String getFQDNHostname() {\n        return this.fqdnHostName;\n    }\n\n    public java.lang.String getHostname() {\n        if (hostName == null) {\n            java.lang.String fqdn = getFQDNHostname();\n            if (this.fqdnHostNameIsIP) {\n                hostName = fqdn;\n            } else {\n                hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(fqdn);\n            }\n        }\n        return hostName;\n    }\n\n    public java.lang.String getInetAdress() {\n        return this.inetAddress.toString();\n    }\n\n    @java.lang.Override\n    public void read(org.apache.flink.core.memory.DataInputView in) throws java.io.IOException {\n        final int addr_length = in.readInt();\n        byte[] address = new byte[addr_length];\n        in.readFully(address);\n        this.dataPort = in.readInt();\n        this.fqdnHostName = org.apache.flink.util.StringUtils.readNullableString(in);\n        this.hostName = org.apache.flink.util.StringUtils.readNullableString(in);\n        this.fqdnHostNameIsIP = in.readBoolean();\n        try {\n            this.inetAddress = java.net.InetAddress.getByAddress(address);\n        } catch (java.net.UnknownHostException e) {\n            throw new java.io.IOException(\"This lookup should never fail.\", e);\n        }\n    }\n\n    @java.lang.Override\n    public void write(final org.apache.flink.core.memory.DataOutputView out) throws java.io.IOException {\n        out.writeInt(this.inetAddress.getAddress().length);\n        out.write(this.inetAddress.getAddress());\n        out.writeInt(this.dataPort);\n        org.apache.flink.util.StringUtils.writeNullableString(fqdnHostName, out);\n        org.apache.flink.util.StringUtils.writeNullableString(hostName, out);\n        out.writeBoolean(fqdnHostNameIsIP);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return ((getFQDNHostname() + \" (dataPort=\") + dataPort) + \")\";\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object obj) {\n        if (obj instanceof org.apache.flink.runtime.instance.InstanceConnectionInfo) {\n            org.apache.flink.runtime.instance.InstanceConnectionInfo other = ((org.apache.flink.runtime.instance.InstanceConnectionInfo) (obj));\n            return (this.dataPort == other.dataPort) && this.inetAddress.equals(other.inetAddress);\n        } else {\n            return false;\n        }\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return this.inetAddress.hashCode() + (17 * dataPort);\n    }\n\n    @java.lang.Override\n    public int compareTo(org.apache.flink.runtime.instance.InstanceConnectionInfo o) {\n        byte[] thisAddress = this.inetAddress.getAddress();\n        byte[] otherAddress = o.inetAddress.getAddress();\n        if (thisAddress.length < otherAddress.length) {\n            return -1;\n        } else if (thisAddress.length > otherAddress.length) {\n            return 1;\n        } else {\n            for (int i = 0; i < thisAddress.length; i++) {\n                byte tb = thisAddress[i];\n                byte ob = otherAddress[i];\n                if (tb < ob) {\n                    return -1;\n                } else if (tb > ob) {\n                    return 1;\n                }\n            }\n        }\n        if (this.dataPort < o.dataPort) {\n            return -1;\n        } else if (this.dataPort > o.dataPort) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Constructor"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public java.lang.String getHostname() {\n    if (hostName == null) {\n        java.lang.String fqdn = getFQDNHostname();\n        if (this.fqdnHostNameIsIP) {\n            hostName = fqdn;\n        } else {\n            hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(fqdn);\n        }\n    }\n    return hostName;\n}",
            "src_parent": "public class InstanceConnectionInfo implements java.io.Serializable , java.lang.Comparable<org.apache.flink.runtime.instance.InstanceConnectionInfo> , org.apache.flink.core.io.IOReadableWritable {\n    private static final long serialVersionUID = -8254407801276350716L;\n\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.flink.runtime.instance.InstanceConnectionInfo.class);\n\n    private java.net.InetAddress inetAddress;\n\n    private int dataPort;\n\n    private java.lang.String fqdnHostName;\n\n    private java.lang.String hostName;\n\n    private boolean fqdnHostNameIsIP = false;\n\n    public InstanceConnectionInfo(java.net.InetAddress inetAddress, int dataPort) {\n        if (inetAddress == null) {\n            throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n        }\n        if (dataPort <= 0) {\n            throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n        }\n        this.dataPort = dataPort;\n        this.inetAddress = inetAddress;\n        try {\n            this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n        } catch (java.lang.Throwable t) {\n            org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine hostname for TaskManager. The performance might be degraded since HDFS input split assignment is not possible\");\n            if (org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.isDebugEnabled()) {\n                org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception\", t);\n            }\n            this.fqdnHostName = inetAddress.getHostAddress();\n            this.fqdnHostNameIsIP = true;\n        }\n    }\n\n    public InstanceConnectionInfo() {\n    }\n\n    public int dataPort() {\n        return this.dataPort;\n    }\n\n    public java.net.InetAddress address() {\n        return this.inetAddress;\n    }\n\n    public java.lang.String getFQDNHostname() {\n        return this.fqdnHostName;\n    }\n\n    public java.lang.String getHostname() {\n        if (hostName == null) {\n            java.lang.String fqdn = getFQDNHostname();\n            if (this.fqdnHostNameIsIP) {\n                hostName = fqdn;\n            } else {\n                hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(fqdn);\n            }\n        }\n        return hostName;\n    }\n\n    public java.lang.String getInetAdress() {\n        return this.inetAddress.toString();\n    }\n\n    @java.lang.Override\n    public void read(org.apache.flink.core.memory.DataInputView in) throws java.io.IOException {\n        final int addr_length = in.readInt();\n        byte[] address = new byte[addr_length];\n        in.readFully(address);\n        this.dataPort = in.readInt();\n        this.fqdnHostName = org.apache.flink.util.StringUtils.readNullableString(in);\n        this.hostName = org.apache.flink.util.StringUtils.readNullableString(in);\n        this.fqdnHostNameIsIP = in.readBoolean();\n        try {\n            this.inetAddress = java.net.InetAddress.getByAddress(address);\n        } catch (java.net.UnknownHostException e) {\n            throw new java.io.IOException(\"This lookup should never fail.\", e);\n        }\n    }\n\n    @java.lang.Override\n    public void write(final org.apache.flink.core.memory.DataOutputView out) throws java.io.IOException {\n        out.writeInt(this.inetAddress.getAddress().length);\n        out.write(this.inetAddress.getAddress());\n        out.writeInt(this.dataPort);\n        org.apache.flink.util.StringUtils.writeNullableString(fqdnHostName, out);\n        org.apache.flink.util.StringUtils.writeNullableString(hostName, out);\n        out.writeBoolean(fqdnHostNameIsIP);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return ((getFQDNHostname() + \" (dataPort=\") + dataPort) + \")\";\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object obj) {\n        if (obj instanceof org.apache.flink.runtime.instance.InstanceConnectionInfo) {\n            org.apache.flink.runtime.instance.InstanceConnectionInfo other = ((org.apache.flink.runtime.instance.InstanceConnectionInfo) (obj));\n            return (this.dataPort == other.dataPort) && this.inetAddress.equals(other.inetAddress);\n        } else {\n            return false;\n        }\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return this.inetAddress.hashCode() + (17 * dataPort);\n    }\n\n    @java.lang.Override\n    public int compareTo(org.apache.flink.runtime.instance.InstanceConnectionInfo o) {\n        byte[] thisAddress = this.inetAddress.getAddress();\n        byte[] otherAddress = o.inetAddress.getAddress();\n        if (thisAddress.length < otherAddress.length) {\n            return -1;\n        } else if (thisAddress.length > otherAddress.length) {\n            return 1;\n        } else {\n            for (int i = 0; i < thisAddress.length; i++) {\n                byte tb = thisAddress[i];\n                byte ob = otherAddress[i];\n                if (tb < ob) {\n                    return -1;\n                } else if (tb > ob) {\n                    return 1;\n                }\n            }\n        }\n        if (this.dataPort < o.dataPort) {\n            return -1;\n        } else if (this.dataPort > o.dataPort) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "this.fqdnHostNameIsIP = in.readBoolean()",
            "src_parent": "{\n    final int addr_length = in.readInt();\n    byte[] address = new byte[addr_length];\n    in.readFully(address);\n    this.dataPort = in.readInt();\n    this.fqdnHostName = org.apache.flink.util.StringUtils.readNullableString(in);\n    this.hostName = org.apache.flink.util.StringUtils.readNullableString(in);\n    this.fqdnHostNameIsIP = in.readBoolean();\n    try {\n        this.inetAddress = java.net.InetAddress.getByAddress(address);\n    } catch (java.net.UnknownHostException e) {\n        throw new java.io.IOException(\"This lookup should never fail.\", e);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "out.writeBoolean(fqdnHostNameIsIP)",
            "src_parent": "{\n    out.writeInt(this.inetAddress.getAddress().length);\n    out.write(this.inetAddress.getAddress());\n    out.writeInt(this.dataPort);\n    org.apache.flink.util.StringUtils.writeNullableString(fqdnHostName, out);\n    org.apache.flink.util.StringUtils.writeNullableString(hostName, out);\n    out.writeBoolean(fqdnHostNameIsIP);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public InstanceConnectionInfo(java.net.InetAddress inetAddress, int dataPort) {\n    if (inetAddress == null) {\n        throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n    }\n    if (dataPort <= 0) {\n        throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n    }\n    this.dataPort = dataPort;\n    this.inetAddress = inetAddress;\n    try {\n        this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n    } catch (java.lang.Throwable t) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine the canonical hostname. Input split assignment (such as \" + \"for HDFS files) may be non-local when the canonical hostname is missing.\");\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception:\", t);\n        this.fqdnHostName = this.inetAddress.getHostAddress();\n    }\n    if (this.fqdnHostName.equals(this.inetAddress.getHostAddress())) {\n        this.hostName = this.fqdnHostName;\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"No hostname could be resolved for the IP address {}, using IP address as host name. \" + \"Local input split assignment (such as for HDFS files) may be impacted.\");\n    } else {\n        this.hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(this.fqdnHostName);\n    }\n}",
            "src_parent": "public class InstanceConnectionInfo implements java.io.Serializable , java.lang.Comparable<org.apache.flink.runtime.instance.InstanceConnectionInfo> , org.apache.flink.core.io.IOReadableWritable {\n    private static final long serialVersionUID = -8254407801276350716L;\n\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.flink.runtime.instance.InstanceConnectionInfo.class);\n\n    private java.net.InetAddress inetAddress;\n\n    private int dataPort;\n\n    private java.lang.String fqdnHostName;\n\n    private java.lang.String hostName;\n\n    public InstanceConnectionInfo(java.net.InetAddress inetAddress, int dataPort) {\n        if (inetAddress == null) {\n            throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n        }\n        if (dataPort <= 0) {\n            throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n        }\n        this.dataPort = dataPort;\n        this.inetAddress = inetAddress;\n        try {\n            this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n        } catch (java.lang.Throwable t) {\n            org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine the canonical hostname. Input split assignment (such as \" + \"for HDFS files) may be non-local when the canonical hostname is missing.\");\n            org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception:\", t);\n            this.fqdnHostName = this.inetAddress.getHostAddress();\n        }\n        if (this.fqdnHostName.equals(this.inetAddress.getHostAddress())) {\n            this.hostName = this.fqdnHostName;\n            org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"No hostname could be resolved for the IP address {}, using IP address as host name. \" + \"Local input split assignment (such as for HDFS files) may be impacted.\");\n        } else {\n            this.hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(this.fqdnHostName);\n        }\n    }\n\n    public InstanceConnectionInfo() {\n    }\n\n    public int dataPort() {\n        return this.dataPort;\n    }\n\n    public java.net.InetAddress address() {\n        return this.inetAddress;\n    }\n\n    public java.lang.String getFQDNHostname() {\n        return this.fqdnHostName;\n    }\n\n    public java.lang.String getHostname() {\n        return hostName;\n    }\n\n    public java.lang.String getInetAdress() {\n        return this.inetAddress.toString();\n    }\n\n    @java.lang.Override\n    public void read(org.apache.flink.core.memory.DataInputView in) throws java.io.IOException {\n        final int addr_length = in.readInt();\n        byte[] address = new byte[addr_length];\n        in.readFully(address);\n        this.dataPort = in.readInt();\n        this.fqdnHostName = org.apache.flink.util.StringUtils.readNullableString(in);\n        this.hostName = org.apache.flink.util.StringUtils.readNullableString(in);\n        try {\n            this.inetAddress = java.net.InetAddress.getByAddress(address);\n        } catch (java.net.UnknownHostException e) {\n            throw new java.io.IOException(\"This lookup should never fail.\", e);\n        }\n    }\n\n    @java.lang.Override\n    public void write(final org.apache.flink.core.memory.DataOutputView out) throws java.io.IOException {\n        out.writeInt(this.inetAddress.getAddress().length);\n        out.write(this.inetAddress.getAddress());\n        out.writeInt(this.dataPort);\n        org.apache.flink.util.StringUtils.writeNullableString(fqdnHostName, out);\n        org.apache.flink.util.StringUtils.writeNullableString(hostName, out);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return ((getFQDNHostname() + \" (dataPort=\") + dataPort) + \")\";\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object obj) {\n        if (obj instanceof org.apache.flink.runtime.instance.InstanceConnectionInfo) {\n            org.apache.flink.runtime.instance.InstanceConnectionInfo other = ((org.apache.flink.runtime.instance.InstanceConnectionInfo) (obj));\n            return (this.dataPort == other.dataPort) && this.inetAddress.equals(other.inetAddress);\n        } else {\n            return false;\n        }\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return this.inetAddress.hashCode() + (17 * dataPort);\n    }\n\n    @java.lang.Override\n    public int compareTo(org.apache.flink.runtime.instance.InstanceConnectionInfo o) {\n        byte[] thisAddress = this.inetAddress.getAddress();\n        byte[] otherAddress = o.inetAddress.getAddress();\n        if (thisAddress.length < otherAddress.length) {\n            return -1;\n        } else if (thisAddress.length > otherAddress.length) {\n            return 1;\n        } else {\n            for (int i = 0; i < thisAddress.length; i++) {\n                byte tb = thisAddress[i];\n                byte ob = otherAddress[i];\n                if (tb < ob) {\n                    return -1;\n                } else if (tb > ob) {\n                    return 1;\n                }\n            }\n        }\n        if (this.dataPort < o.dataPort) {\n            return -1;\n        } else if (this.dataPort > o.dataPort) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Constructor"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public java.lang.String getHostname() {\n    return hostName;\n}",
            "src_parent": "public class InstanceConnectionInfo implements java.io.Serializable , java.lang.Comparable<org.apache.flink.runtime.instance.InstanceConnectionInfo> , org.apache.flink.core.io.IOReadableWritable {\n    private static final long serialVersionUID = -8254407801276350716L;\n\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.flink.runtime.instance.InstanceConnectionInfo.class);\n\n    private java.net.InetAddress inetAddress;\n\n    private int dataPort;\n\n    private java.lang.String fqdnHostName;\n\n    private java.lang.String hostName;\n\n    public InstanceConnectionInfo(java.net.InetAddress inetAddress, int dataPort) {\n        if (inetAddress == null) {\n            throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n        }\n        if (dataPort <= 0) {\n            throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n        }\n        this.dataPort = dataPort;\n        this.inetAddress = inetAddress;\n        try {\n            this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n        } catch (java.lang.Throwable t) {\n            org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine the canonical hostname. Input split assignment (such as \" + \"for HDFS files) may be non-local when the canonical hostname is missing.\");\n            org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception:\", t);\n            this.fqdnHostName = this.inetAddress.getHostAddress();\n        }\n        if (this.fqdnHostName.equals(this.inetAddress.getHostAddress())) {\n            this.hostName = this.fqdnHostName;\n            org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"No hostname could be resolved for the IP address {}, using IP address as host name. \" + \"Local input split assignment (such as for HDFS files) may be impacted.\");\n        } else {\n            this.hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(this.fqdnHostName);\n        }\n    }\n\n    public InstanceConnectionInfo() {\n    }\n\n    public int dataPort() {\n        return this.dataPort;\n    }\n\n    public java.net.InetAddress address() {\n        return this.inetAddress;\n    }\n\n    public java.lang.String getFQDNHostname() {\n        return this.fqdnHostName;\n    }\n\n    public java.lang.String getHostname() {\n        return hostName;\n    }\n\n    public java.lang.String getInetAdress() {\n        return this.inetAddress.toString();\n    }\n\n    @java.lang.Override\n    public void read(org.apache.flink.core.memory.DataInputView in) throws java.io.IOException {\n        final int addr_length = in.readInt();\n        byte[] address = new byte[addr_length];\n        in.readFully(address);\n        this.dataPort = in.readInt();\n        this.fqdnHostName = org.apache.flink.util.StringUtils.readNullableString(in);\n        this.hostName = org.apache.flink.util.StringUtils.readNullableString(in);\n        try {\n            this.inetAddress = java.net.InetAddress.getByAddress(address);\n        } catch (java.net.UnknownHostException e) {\n            throw new java.io.IOException(\"This lookup should never fail.\", e);\n        }\n    }\n\n    @java.lang.Override\n    public void write(final org.apache.flink.core.memory.DataOutputView out) throws java.io.IOException {\n        out.writeInt(this.inetAddress.getAddress().length);\n        out.write(this.inetAddress.getAddress());\n        out.writeInt(this.dataPort);\n        org.apache.flink.util.StringUtils.writeNullableString(fqdnHostName, out);\n        org.apache.flink.util.StringUtils.writeNullableString(hostName, out);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return ((getFQDNHostname() + \" (dataPort=\") + dataPort) + \")\";\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object obj) {\n        if (obj instanceof org.apache.flink.runtime.instance.InstanceConnectionInfo) {\n            org.apache.flink.runtime.instance.InstanceConnectionInfo other = ((org.apache.flink.runtime.instance.InstanceConnectionInfo) (obj));\n            return (this.dataPort == other.dataPort) && this.inetAddress.equals(other.inetAddress);\n        } else {\n            return false;\n        }\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return this.inetAddress.hashCode() + (17 * dataPort);\n    }\n\n    @java.lang.Override\n    public int compareTo(org.apache.flink.runtime.instance.InstanceConnectionInfo o) {\n        byte[] thisAddress = this.inetAddress.getAddress();\n        byte[] otherAddress = o.inetAddress.getAddress();\n        if (thisAddress.length < otherAddress.length) {\n            return -1;\n        } else if (thisAddress.length > otherAddress.length) {\n            return 1;\n        } else {\n            for (int i = 0; i < thisAddress.length; i++) {\n                byte tb = thisAddress[i];\n                byte ob = otherAddress[i];\n                if (tb < ob) {\n                    return -1;\n                } else if (tb > ob) {\n                    return 1;\n                }\n            }\n        }\n        if (this.dataPort < o.dataPort) {\n            return -1;\n        } else if (this.dataPort > o.dataPort) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception:\", t)",
            "src_parent": "{\n    org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine the canonical hostname. Input split assignment (such as \" + \"for HDFS files) may be non-local when the canonical hostname is missing.\");\n    org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception:\", t);\n    this.fqdnHostName = this.inetAddress.getHostAddress();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"No hostname could be resolved for the IP address {}, using IP address as host name. \" + \"Local input split assignment (such as for HDFS files) may be impacted.\")",
            "src_parent": "{\n    this.hostName = this.fqdnHostName;\n    org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"No hostname could be resolved for the IP address {}, using IP address as host name. \" + \"Local input split assignment (such as for HDFS files) may be impacted.\");\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "\"Unable to determine the canonical hostname. Input split assignment (such as \" + \"for HDFS files) may be non-local when the canonical hostname is missing.\"",
            "src_parent": "org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine the canonical hostname. Input split assignment (such as \" + \"for HDFS files) may be non-local when the canonical hostname is missing.\")",
            "src_parent_type": "Invocation",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "this.fqdnHostName",
            "src_parent": "this.hostName = this.fqdnHostName",
            "src_parent_type": "Assignment",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Catch",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "this.inetAddress",
            "src_parent": "this.inetAddress.getHostAddress()",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "this",
            "src_parent": "this.hostName",
            "src_parent_type": "FieldWrite",
            "src_type": "ThisAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Constructor",
            "dst_parent": "public InstanceConnectionInfo(java.net.InetAddress inetAddress, int dataPort) {\n    if (inetAddress == null) {\n        throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n    }\n    if (dataPort <= 0) {\n        throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n    }\n    this.dataPort = dataPort;\n    this.inetAddress = inetAddress;\n    try {\n        this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n    } catch (java.lang.Throwable t) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine the canonical hostname. Input split assignment (such as \" + \"for HDFS files) may be non-local when the canonical hostname is missing.\");\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception:\", t);\n        this.fqdnHostName = this.inetAddress.getHostAddress();\n    }\n    if (this.fqdnHostName.equals(this.inetAddress.getHostAddress())) {\n        this.hostName = this.fqdnHostName;\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"No hostname could be resolved for the IP address {}, using IP address as host name. \" + \"Local input split assignment (such as for HDFS files) may be impacted.\");\n    } else {\n        this.hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(this.fqdnHostName);\n    }\n}",
            "dst_parent_type": "Constructor",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Constructor",
            "src_parent": "public InstanceConnectionInfo(java.net.InetAddress inetAddress, int dataPort) {\n    if (inetAddress == null) {\n        throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n    }\n    if (dataPort <= 0) {\n        throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n    }\n    this.dataPort = dataPort;\n    this.inetAddress = inetAddress;\n    try {\n        this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n    } catch (java.lang.Throwable t) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine hostname for TaskManager. The performance might be degraded since HDFS input split assignment is not possible\");\n        if (org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.isDebugEnabled()) {\n            org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception\", t);\n        }\n        this.fqdnHostName = inetAddress.getHostAddress();\n        this.fqdnHostNameIsIP = true;\n    }\n}",
            "src_parent_type": "Constructor",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.net.InetAddress inetAddress",
            "dst_parent": "public InstanceConnectionInfo(java.net.InetAddress inetAddress, int dataPort) {\n    if (inetAddress == null) {\n        throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n    }\n    if (dataPort <= 0) {\n        throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n    }\n    this.dataPort = dataPort;\n    this.inetAddress = inetAddress;\n    try {\n        this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n    } catch (java.lang.Throwable t) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine the canonical hostname. Input split assignment (such as \" + \"for HDFS files) may be non-local when the canonical hostname is missing.\");\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception:\", t);\n        this.fqdnHostName = this.inetAddress.getHostAddress();\n    }\n    if (this.fqdnHostName.equals(this.inetAddress.getHostAddress())) {\n        this.hostName = this.fqdnHostName;\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"No hostname could be resolved for the IP address {}, using IP address as host name. \" + \"Local input split assignment (such as for HDFS files) may be impacted.\");\n    } else {\n        this.hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(this.fqdnHostName);\n    }\n}",
            "dst_parent_type": "Constructor",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "java.net.InetAddress inetAddress",
            "src_parent": "public InstanceConnectionInfo(java.net.InetAddress inetAddress, int dataPort) {\n    if (inetAddress == null) {\n        throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n    }\n    if (dataPort <= 0) {\n        throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n    }\n    this.dataPort = dataPort;\n    this.inetAddress = inetAddress;\n    try {\n        this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n    } catch (java.lang.Throwable t) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine hostname for TaskManager. The performance might be degraded since HDFS input split assignment is not possible\");\n        if (org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.isDebugEnabled()) {\n            org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception\", t);\n        }\n        this.fqdnHostName = inetAddress.getHostAddress();\n        this.fqdnHostNameIsIP = true;\n    }\n}",
            "src_parent_type": "Constructor",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "int dataPort",
            "dst_parent": "public InstanceConnectionInfo(java.net.InetAddress inetAddress, int dataPort) {\n    if (inetAddress == null) {\n        throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n    }\n    if (dataPort <= 0) {\n        throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n    }\n    this.dataPort = dataPort;\n    this.inetAddress = inetAddress;\n    try {\n        this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n    } catch (java.lang.Throwable t) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine the canonical hostname. Input split assignment (such as \" + \"for HDFS files) may be non-local when the canonical hostname is missing.\");\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception:\", t);\n        this.fqdnHostName = this.inetAddress.getHostAddress();\n    }\n    if (this.fqdnHostName.equals(this.inetAddress.getHostAddress())) {\n        this.hostName = this.fqdnHostName;\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"No hostname could be resolved for the IP address {}, using IP address as host name. \" + \"Local input split assignment (such as for HDFS files) may be impacted.\");\n    } else {\n        this.hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(this.fqdnHostName);\n    }\n}",
            "dst_parent_type": "Constructor",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "int dataPort",
            "src_parent": "public InstanceConnectionInfo(java.net.InetAddress inetAddress, int dataPort) {\n    if (inetAddress == null) {\n        throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n    }\n    if (dataPort <= 0) {\n        throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n    }\n    this.dataPort = dataPort;\n    this.inetAddress = inetAddress;\n    try {\n        this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n    } catch (java.lang.Throwable t) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine hostname for TaskManager. The performance might be degraded since HDFS input split assignment is not possible\");\n        if (org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.isDebugEnabled()) {\n            org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception\", t);\n        }\n        this.fqdnHostName = inetAddress.getHostAddress();\n        this.fqdnHostNameIsIP = true;\n    }\n}",
            "src_parent_type": "Constructor",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (inetAddress == null) {\n    throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n}",
            "dst_parent": "{\n    if (inetAddress == null) {\n        throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n    }\n    if (dataPort <= 0) {\n        throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n    }\n    this.dataPort = dataPort;\n    this.inetAddress = inetAddress;\n    try {\n        this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n    } catch (java.lang.Throwable t) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine the canonical hostname. Input split assignment (such as \" + \"for HDFS files) may be non-local when the canonical hostname is missing.\");\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception:\", t);\n        this.fqdnHostName = this.inetAddress.getHostAddress();\n    }\n    if (this.fqdnHostName.equals(this.inetAddress.getHostAddress())) {\n        this.hostName = this.fqdnHostName;\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"No hostname could be resolved for the IP address {}, using IP address as host name. \" + \"Local input split assignment (such as for HDFS files) may be impacted.\");\n    } else {\n        this.hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(this.fqdnHostName);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (inetAddress == null) {\n    throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n}",
            "src_parent": "{\n    if (inetAddress == null) {\n        throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n    }\n    if (dataPort <= 0) {\n        throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n    }\n    this.dataPort = dataPort;\n    this.inetAddress = inetAddress;\n    try {\n        this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n    } catch (java.lang.Throwable t) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine hostname for TaskManager. The performance might be degraded since HDFS input split assignment is not possible\");\n        if (org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.isDebugEnabled()) {\n            org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception\", t);\n        }\n        this.fqdnHostName = inetAddress.getHostAddress();\n        this.fqdnHostNameIsIP = true;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (dataPort <= 0) {\n    throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n}",
            "dst_parent": "{\n    if (inetAddress == null) {\n        throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n    }\n    if (dataPort <= 0) {\n        throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n    }\n    this.dataPort = dataPort;\n    this.inetAddress = inetAddress;\n    try {\n        this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n    } catch (java.lang.Throwable t) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine the canonical hostname. Input split assignment (such as \" + \"for HDFS files) may be non-local when the canonical hostname is missing.\");\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception:\", t);\n        this.fqdnHostName = this.inetAddress.getHostAddress();\n    }\n    if (this.fqdnHostName.equals(this.inetAddress.getHostAddress())) {\n        this.hostName = this.fqdnHostName;\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"No hostname could be resolved for the IP address {}, using IP address as host name. \" + \"Local input split assignment (such as for HDFS files) may be impacted.\");\n    } else {\n        this.hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(this.fqdnHostName);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (dataPort <= 0) {\n    throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n}",
            "src_parent": "{\n    if (inetAddress == null) {\n        throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n    }\n    if (dataPort <= 0) {\n        throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n    }\n    this.dataPort = dataPort;\n    this.inetAddress = inetAddress;\n    try {\n        this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n    } catch (java.lang.Throwable t) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine hostname for TaskManager. The performance might be degraded since HDFS input split assignment is not possible\");\n        if (org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.isDebugEnabled()) {\n            org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception\", t);\n        }\n        this.fqdnHostName = inetAddress.getHostAddress();\n        this.fqdnHostNameIsIP = true;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "this.dataPort = dataPort",
            "dst_parent": "{\n    if (inetAddress == null) {\n        throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n    }\n    if (dataPort <= 0) {\n        throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n    }\n    this.dataPort = dataPort;\n    this.inetAddress = inetAddress;\n    try {\n        this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n    } catch (java.lang.Throwable t) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine the canonical hostname. Input split assignment (such as \" + \"for HDFS files) may be non-local when the canonical hostname is missing.\");\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception:\", t);\n        this.fqdnHostName = this.inetAddress.getHostAddress();\n    }\n    if (this.fqdnHostName.equals(this.inetAddress.getHostAddress())) {\n        this.hostName = this.fqdnHostName;\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"No hostname could be resolved for the IP address {}, using IP address as host name. \" + \"Local input split assignment (such as for HDFS files) may be impacted.\");\n    } else {\n        this.hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(this.fqdnHostName);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "this.dataPort = dataPort",
            "src_parent": "{\n    if (inetAddress == null) {\n        throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n    }\n    if (dataPort <= 0) {\n        throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n    }\n    this.dataPort = dataPort;\n    this.inetAddress = inetAddress;\n    try {\n        this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n    } catch (java.lang.Throwable t) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine hostname for TaskManager. The performance might be degraded since HDFS input split assignment is not possible\");\n        if (org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.isDebugEnabled()) {\n            org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception\", t);\n        }\n        this.fqdnHostName = inetAddress.getHostAddress();\n        this.fqdnHostNameIsIP = true;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "this.inetAddress = inetAddress",
            "dst_parent": "{\n    if (inetAddress == null) {\n        throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n    }\n    if (dataPort <= 0) {\n        throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n    }\n    this.dataPort = dataPort;\n    this.inetAddress = inetAddress;\n    try {\n        this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n    } catch (java.lang.Throwable t) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine the canonical hostname. Input split assignment (such as \" + \"for HDFS files) may be non-local when the canonical hostname is missing.\");\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception:\", t);\n        this.fqdnHostName = this.inetAddress.getHostAddress();\n    }\n    if (this.fqdnHostName.equals(this.inetAddress.getHostAddress())) {\n        this.hostName = this.fqdnHostName;\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"No hostname could be resolved for the IP address {}, using IP address as host name. \" + \"Local input split assignment (such as for HDFS files) may be impacted.\");\n    } else {\n        this.hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(this.fqdnHostName);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "this.inetAddress = inetAddress",
            "src_parent": "{\n    if (inetAddress == null) {\n        throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n    }\n    if (dataPort <= 0) {\n        throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n    }\n    this.dataPort = dataPort;\n    this.inetAddress = inetAddress;\n    try {\n        this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n    } catch (java.lang.Throwable t) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine hostname for TaskManager. The performance might be degraded since HDFS input split assignment is not possible\");\n        if (org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.isDebugEnabled()) {\n            org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception\", t);\n        }\n        this.fqdnHostName = inetAddress.getHostAddress();\n        this.fqdnHostNameIsIP = true;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "try {\n    this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n} catch (java.lang.Throwable t) {\n    org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine the canonical hostname. Input split assignment (such as \" + \"for HDFS files) may be non-local when the canonical hostname is missing.\");\n    org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception:\", t);\n    this.fqdnHostName = this.inetAddress.getHostAddress();\n}",
            "dst_parent": "{\n    if (inetAddress == null) {\n        throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n    }\n    if (dataPort <= 0) {\n        throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n    }\n    this.dataPort = dataPort;\n    this.inetAddress = inetAddress;\n    try {\n        this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n    } catch (java.lang.Throwable t) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine the canonical hostname. Input split assignment (such as \" + \"for HDFS files) may be non-local when the canonical hostname is missing.\");\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception:\", t);\n        this.fqdnHostName = this.inetAddress.getHostAddress();\n    }\n    if (this.fqdnHostName.equals(this.inetAddress.getHostAddress())) {\n        this.hostName = this.fqdnHostName;\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"No hostname could be resolved for the IP address {}, using IP address as host name. \" + \"Local input split assignment (such as for HDFS files) may be impacted.\");\n    } else {\n        this.hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(this.fqdnHostName);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Try",
            "operator": "MOV",
            "src": "try {\n    this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n} catch (java.lang.Throwable t) {\n    org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine hostname for TaskManager. The performance might be degraded since HDFS input split assignment is not possible\");\n    if (org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.isDebugEnabled()) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception\", t);\n    }\n    this.fqdnHostName = inetAddress.getHostAddress();\n    this.fqdnHostNameIsIP = true;\n}",
            "src_parent": "{\n    if (inetAddress == null) {\n        throw new java.lang.IllegalArgumentException(\"Argument inetAddress must not be null\");\n    }\n    if (dataPort <= 0) {\n        throw new java.lang.IllegalArgumentException(\"Argument dataPort must be greater than zero\");\n    }\n    this.dataPort = dataPort;\n    this.inetAddress = inetAddress;\n    try {\n        this.fqdnHostName = this.inetAddress.getCanonicalHostName();\n    } catch (java.lang.Throwable t) {\n        org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"Unable to determine hostname for TaskManager. The performance might be degraded since HDFS input split assignment is not possible\");\n        if (org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.isDebugEnabled()) {\n            org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception\", t);\n        }\n        this.fqdnHostName = inetAddress.getHostAddress();\n        this.fqdnHostNameIsIP = true;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Try"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Method",
            "dst_parent": "public java.lang.String getHostname() {\n    return hostName;\n}",
            "dst_parent_type": "Method",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Method",
            "src_parent": "public java.lang.String getHostname() {\n    if (hostName == null) {\n        java.lang.String fqdn = getFQDNHostname();\n        if (this.fqdnHostNameIsIP) {\n            hostName = fqdn;\n        } else {\n            hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(fqdn);\n        }\n    }\n    return hostName;\n}",
            "src_parent_type": "Method",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return hostName",
            "dst_parent": "{\n    return hostName;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return hostName",
            "src_parent": "{\n    if (hostName == null) {\n        java.lang.String fqdn = getFQDNHostname();\n        if (this.fqdnHostNameIsIP) {\n            hostName = fqdn;\n        } else {\n            hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(fqdn);\n        }\n    }\n    return hostName;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    this.hostName = this.fqdnHostName;\n    org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"No hostname could be resolved for the IP address {}, using IP address as host name. \" + \"Local input split assignment (such as for HDFS files) may be impacted.\");\n}",
            "dst_parent": "if (this.fqdnHostName.equals(this.inetAddress.getHostAddress())) {\n    this.hostName = this.fqdnHostName;\n    org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"No hostname could be resolved for the IP address {}, using IP address as host name. \" + \"Local input split assignment (such as for HDFS files) may be impacted.\");\n} else {\n    this.hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(this.fqdnHostName);\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    hostName = fqdn;\n}",
            "src_parent": "if (this.fqdnHostNameIsIP) {\n    hostName = fqdn;\n} else {\n    hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(fqdn);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    this.hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(this.fqdnHostName);\n}",
            "dst_parent": "if (this.fqdnHostName.equals(this.inetAddress.getHostAddress())) {\n    this.hostName = this.fqdnHostName;\n    org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.warn(\"No hostname could be resolved for the IP address {}, using IP address as host name. \" + \"Local input split assignment (such as for HDFS files) may be impacted.\");\n} else {\n    this.hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(this.fqdnHostName);\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(fqdn);\n}",
            "src_parent": "if (this.fqdnHostNameIsIP) {\n    hostName = fqdn;\n} else {\n    hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(fqdn);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG",
            "dst_parent": "org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception:\", t)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG",
            "src_parent": "org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception\", t)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "\"getCanonicalHostName() Exception:\"",
            "dst_parent": "org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception:\", t)",
            "dst_parent_type": "Invocation",
            "dst_type": "Literal",
            "operator": "MOV",
            "src": "\"getCanonicalHostName() Exception\"",
            "src_parent": "org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception\", t)",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "t",
            "dst_parent": "org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception:\", t)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "t",
            "src_parent": "org.apache.flink.runtime.instance.InstanceConnectionInfo.LOG.debug(\"getCanonicalHostName() Exception\", t)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "this.hostName",
            "dst_parent": "this.hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(this.fqdnHostName)",
            "dst_parent_type": "Assignment",
            "dst_type": "FieldWrite",
            "operator": "MOV",
            "src": "this.fqdnHostNameIsIP",
            "src_parent": "this.fqdnHostNameIsIP = in.readBoolean()",
            "src_parent_type": "Assignment",
            "src_type": "FieldWrite"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Catch",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "this",
            "dst_parent": "this.inetAddress",
            "dst_parent_type": "FieldRead",
            "dst_type": "ThisAccess",
            "operator": "MOV",
            "src": "this",
            "src_parent": "this.fqdnHostNameIsIP",
            "src_parent_type": "FieldWrite",
            "src_type": "ThisAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "this.fqdnHostName",
            "dst_parent": "org.apache.flink.util.NetUtils.getHostnameFromFQDN(this.fqdnHostName)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "this.fqdnHostNameIsIP",
            "src_parent": "if (this.fqdnHostNameIsIP) {\n    hostName = fqdn;\n} else {\n    hostName = org.apache.flink.util.NetUtils.getHostnameFromFQDN(fqdn);\n}",
            "src_parent_type": "If",
            "src_type": "FieldRead"
          }
        }
      ],
      "file_name": "InstanceConnectionInfo"
    }
  ],
  "id": "flink_5308ac83"
}