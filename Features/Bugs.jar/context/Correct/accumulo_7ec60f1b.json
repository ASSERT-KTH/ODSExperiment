{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "t.table.subMap(new org.apache.accumulo.core.data.Key(startText), new org.apache.accumulo.core.data.Key(endText))",
            "dst_parent": "t.table.subMap(new org.apache.accumulo.core.data.Key(startText), new org.apache.accumulo.core.data.Key(endText)).keySet()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "t.table.tailMap(new org.apache.accumulo.core.data.Key(start))",
            "src_parent": "t.table.tailMap(new org.apache.accumulo.core.data.Key(start)).headMap(new org.apache.accumulo.core.data.Key(end))",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "t.table.tailMap(new org.apache.accumulo.core.data.Key(start)).headMap(new org.apache.accumulo.core.data.Key(end))",
            "src_parent": "t.table.tailMap(new org.apache.accumulo.core.data.Key(start)).headMap(new org.apache.accumulo.core.data.Key(end)).keySet()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static final byte[] ZERO = new byte[]{ 0 };",
            "src_parent": "public class MockTableOperations extends org.apache.accumulo.core.client.admin.TableOperationsHelper {\n    private static final byte[] ZERO = new byte[]{ 0 };\n\n    private final org.apache.accumulo.core.client.mock.MockAccumulo acu;\n\n    private final java.lang.String username;\n\n    MockTableOperations(org.apache.accumulo.core.client.mock.MockAccumulo acu, java.lang.String username) {\n        this.acu = acu;\n        this.username = username;\n    }\n\n    @java.lang.Override\n    public java.util.SortedSet<java.lang.String> list() {\n        return new java.util.TreeSet<java.lang.String>(acu.tables.keySet());\n    }\n\n    @java.lang.Override\n    public boolean exists(java.lang.String tableName) {\n        return acu.tables.containsKey(tableName);\n    }\n\n    @java.lang.Override\n    public void create(java.lang.String tableName) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableExistsException {\n        if (!tableName.matches(Constants.VALID_TABLE_NAME_REGEX)) {\n            throw new java.lang.IllegalArgumentException();\n        }\n        create(tableName, true, TimeType.MILLIS);\n    }\n\n    @java.lang.Override\n    public void create(java.lang.String tableName, boolean versioningIter) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableExistsException {\n        create(tableName, versioningIter, TimeType.MILLIS);\n    }\n\n    @java.lang.Override\n    public void create(java.lang.String tableName, boolean versioningIter, org.apache.accumulo.core.client.admin.TimeType timeType) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableExistsException {\n        if (!tableName.matches(Constants.VALID_TABLE_NAME_REGEX)) {\n            throw new java.lang.IllegalArgumentException();\n        }\n        if (exists(tableName)) {\n            throw new org.apache.accumulo.core.client.TableExistsException(tableName, tableName, \"\");\n        }\n        acu.createTable(username, tableName, versioningIter, timeType);\n    }\n\n    @java.lang.Override\n    public void addSplits(java.lang.String tableName, java.util.SortedSet<org.apache.hadoop.io.Text> partitionKeys) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableNotFoundException {\n        if (!exists(tableName)) {\n            throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"\");\n        }\n        acu.addSplits(tableName, partitionKeys);\n    }\n\n    @java.lang.Deprecated\n    @java.lang.Override\n    public java.util.Collection<org.apache.hadoop.io.Text> getSplits(java.lang.String tableName) throws org.apache.accumulo.core.client.TableNotFoundException {\n        return listSplits(tableName);\n    }\n\n    @java.lang.Deprecated\n    @java.lang.Override\n    public java.util.Collection<org.apache.hadoop.io.Text> getSplits(java.lang.String tableName, int maxSplits) throws org.apache.accumulo.core.client.TableNotFoundException {\n        return listSplits(tableName);\n    }\n\n    @java.lang.Override\n    public java.util.Collection<org.apache.hadoop.io.Text> listSplits(java.lang.String tableName) throws org.apache.accumulo.core.client.TableNotFoundException {\n        if (!exists(tableName)) {\n            throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"\");\n        }\n        return acu.getSplits(tableName);\n    }\n\n    @java.lang.Override\n    public java.util.Collection<org.apache.hadoop.io.Text> listSplits(java.lang.String tableName, int maxSplits) throws org.apache.accumulo.core.client.TableNotFoundException {\n        return listSplits(tableName);\n    }\n\n    @java.lang.Override\n    public void delete(java.lang.String tableName) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableNotFoundException {\n        if (!exists(tableName)) {\n            throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"\");\n        }\n        acu.tables.remove(tableName);\n    }\n\n    @java.lang.Override\n    public void rename(java.lang.String oldTableName, java.lang.String newTableName) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableExistsException, org.apache.accumulo.core.client.TableNotFoundException {\n        if (!exists(oldTableName)) {\n            throw new org.apache.accumulo.core.client.TableNotFoundException(oldTableName, oldTableName, \"\");\n        }\n        if (exists(newTableName)) {\n            throw new org.apache.accumulo.core.client.TableExistsException(newTableName, newTableName, \"\");\n        }\n        org.apache.accumulo.core.client.mock.MockTable t = acu.tables.remove(oldTableName);\n        acu.tables.put(newTableName, t);\n    }\n\n    @java.lang.Deprecated\n    @java.lang.Override\n    public void flush(java.lang.String tableName) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException {\n    }\n\n    @java.lang.Override\n    public void setProperty(java.lang.String tableName, java.lang.String property, java.lang.String value) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException {\n        acu.tables.get(tableName).settings.put(property, value);\n    }\n\n    @java.lang.Override\n    public void removeProperty(java.lang.String tableName, java.lang.String property) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException {\n        acu.tables.get(tableName).settings.remove(property);\n    }\n\n    @java.lang.Override\n    public java.lang.Iterable<java.util.Map.Entry<java.lang.String, java.lang.String>> getProperties(java.lang.String tableName) throws org.apache.accumulo.core.client.TableNotFoundException {\n        if (!exists(tableName)) {\n            throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"\");\n        }\n        return acu.tables.get(tableName).settings.entrySet();\n    }\n\n    @java.lang.Override\n    public void setLocalityGroups(java.lang.String tableName, java.util.Map<java.lang.String, java.util.Set<org.apache.hadoop.io.Text>> groups) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableNotFoundException {\n        if (!exists(tableName)) {\n            throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"\");\n        }\n        acu.tables.get(tableName).setLocalityGroups(groups);\n    }\n\n    @java.lang.Override\n    public java.util.Map<java.lang.String, java.util.Set<org.apache.hadoop.io.Text>> getLocalityGroups(java.lang.String tableName) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.TableNotFoundException {\n        if (!exists(tableName)) {\n            throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"\");\n        }\n        return acu.tables.get(tableName).getLocalityGroups();\n    }\n\n    @java.lang.Override\n    public java.util.Set<org.apache.accumulo.core.data.Range> splitRangeByTablets(java.lang.String tableName, org.apache.accumulo.core.data.Range range, int maxSplits) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableNotFoundException {\n        if (!exists(tableName)) {\n            throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"\");\n        }\n        return java.util.Collections.singleton(range);\n    }\n\n    @java.lang.Override\n    public void importDirectory(java.lang.String tableName, java.lang.String dir, java.lang.String failureDir, boolean setTime) throws java.io.IOException, org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableNotFoundException {\n        long time = java.lang.System.currentTimeMillis();\n        org.apache.accumulo.core.client.mock.MockTable table = acu.tables.get(tableName);\n        if (table == null) {\n            throw new org.apache.accumulo.core.client.TableNotFoundException(null, tableName, \"The table was not found\");\n        }\n        org.apache.hadoop.fs.Path importPath = new org.apache.hadoop.fs.Path(dir);\n        org.apache.hadoop.fs.Path failurePath = new org.apache.hadoop.fs.Path(failureDir);\n        org.apache.hadoop.fs.FileSystem fs = acu.getFileSystem();\n        if (fs.isFile(importPath)) {\n            throw new java.io.IOException(\"Import path must be a directory.\");\n        }\n        if (fs.isFile(failurePath)) {\n            throw new java.io.IOException(\"Failure path must be a directory.\");\n        }\n        org.apache.hadoop.fs.Path createPath = failurePath.suffix(\"/.createFile\");\n        org.apache.hadoop.fs.FSDataOutputStream createStream = null;\n        try {\n            createStream = fs.create(createPath);\n        } catch (java.io.IOException e) {\n            throw new java.io.IOException(\"Error path is not writable.\");\n        } finally {\n            if (createStream != null) {\n                createStream.close();\n            }\n        }\n        fs.delete(createPath, false);\n        org.apache.hadoop.fs.FileStatus[] failureChildStats = fs.listStatus(failurePath);\n        if (failureChildStats.length > 0) {\n            throw new java.io.IOException(\"Error path must be empty.\");\n        }\n        for (org.apache.hadoop.fs.FileStatus importStatus : fs.listStatus(importPath)) {\n            try {\n                org.apache.accumulo.core.file.FileSKVIterator importIterator = org.apache.accumulo.core.file.FileOperations.getInstance().openReader(importStatus.getPath().toString(), true, fs, fs.getConf(), org.apache.accumulo.core.conf.AccumuloConfiguration.getDefaultConfiguration());\n                while (importIterator.hasTop()) {\n                    org.apache.accumulo.core.data.Key key = importIterator.getTopKey();\n                    org.apache.accumulo.core.data.Value value = importIterator.getTopValue();\n                    if (setTime) {\n                        key.setTimestamp(time);\n                    }\n                    org.apache.accumulo.core.data.Mutation mutation = new org.apache.accumulo.core.data.Mutation(key.getRow());\n                    if (!key.isDeleted()) {\n                        mutation.put(key.getColumnFamily(), key.getColumnQualifier(), new org.apache.accumulo.core.security.ColumnVisibility(key.getColumnVisibilityData().toArray()), key.getTimestamp(), value);\n                    } else {\n                        mutation.putDelete(key.getColumnFamily(), key.getColumnQualifier(), new org.apache.accumulo.core.security.ColumnVisibility(key.getColumnVisibilityData().toArray()), key.getTimestamp());\n                    }\n                    table.addMutation(mutation);\n                    importIterator.next();\n                } \n            } catch (java.lang.Exception e) {\n                org.apache.hadoop.fs.FSDataOutputStream failureWriter = null;\n                java.io.DataInputStream failureReader = null;\n                try {\n                    failureWriter = fs.create(failurePath.suffix(\"/\" + importStatus.getPath().getName()));\n                    failureReader = fs.open(importStatus.getPath());\n                    int read = 0;\n                    byte[] buffer = new byte[1024];\n                    while ((-1) != (read = failureReader.read(buffer))) {\n                        failureWriter.write(buffer, 0, read);\n                    } \n                } finally {\n                    if (failureReader != null) {\n                        failureReader.close();\n                    }\n                    if (failureWriter != null) {\n                        failureWriter.close();\n                    }\n                }\n            }\n            fs.delete(importStatus.getPath(), true);\n        }\n    }\n\n    @java.lang.Override\n    public void offline(java.lang.String tableName) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableNotFoundException {\n        if (!exists(tableName)) {\n            throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"\");\n        }\n    }\n\n    @java.lang.Override\n    public void online(java.lang.String tableName) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableNotFoundException {\n        if (!exists(tableName)) {\n            throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"\");\n        }\n    }\n\n    @java.lang.Override\n    public void clearLocatorCache(java.lang.String tableName) throws org.apache.accumulo.core.client.TableNotFoundException {\n        if (!exists(tableName)) {\n            throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"\");\n        }\n    }\n\n    @java.lang.Override\n    public java.util.Map<java.lang.String, java.lang.String> tableIdMap() {\n        java.util.Map<java.lang.String, java.lang.String> result = new java.util.HashMap<java.lang.String, java.lang.String>();\n        for (java.lang.String table : acu.tables.keySet()) {\n            result.put(table, table);\n        }\n        return result;\n    }\n\n    @java.lang.Override\n    public void merge(java.lang.String tableName, org.apache.hadoop.io.Text start, org.apache.hadoop.io.Text end) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableNotFoundException {\n        if (!exists(tableName)) {\n            throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"\");\n        }\n        acu.merge(tableName, start, end);\n    }\n\n    @java.lang.Override\n    public void deleteRows(java.lang.String tableName, org.apache.hadoop.io.Text start, org.apache.hadoop.io.Text end) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableNotFoundException {\n        if (!exists(tableName)) {\n            throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"\");\n        }\n        org.apache.accumulo.core.client.mock.MockTable t = acu.tables.get(tableName);\n        org.apache.hadoop.io.Text startText = new org.apache.hadoop.io.Text(start);\n        org.apache.hadoop.io.Text endText = new org.apache.hadoop.io.Text(end);\n        startText.append(org.apache.accumulo.core.client.mock.MockTableOperations.ZERO, 0, 1);\n        endText.append(org.apache.accumulo.core.client.mock.MockTableOperations.ZERO, 0, 1);\n        java.util.Set<org.apache.accumulo.core.data.Key> keep = new java.util.TreeSet<org.apache.accumulo.core.data.Key>(t.table.subMap(new org.apache.accumulo.core.data.Key(startText), new org.apache.accumulo.core.data.Key(endText)).keySet());\n        t.table.keySet().removeAll(keep);\n    }\n\n    @java.lang.Override\n    public void compact(java.lang.String tableName, org.apache.hadoop.io.Text start, org.apache.hadoop.io.Text end, boolean flush, boolean wait) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableNotFoundException {\n        if (!exists(tableName)) {\n            throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"\");\n        }\n    }\n\n    @java.lang.Override\n    public void compact(java.lang.String tableName, org.apache.hadoop.io.Text start, org.apache.hadoop.io.Text end, java.util.List<org.apache.accumulo.core.client.IteratorSetting> iterators, boolean flush, boolean wait) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableNotFoundException {\n        if (!exists(tableName)) {\n            throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"\");\n        }\n    }\n\n    @java.lang.Override\n    public void cancelCompaction(java.lang.String tableName) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableNotFoundException {\n        if (!exists(tableName)) {\n            throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"\");\n        }\n    }\n\n    @java.lang.Override\n    public void clone(java.lang.String srcTableName, java.lang.String newTableName, boolean flush, java.util.Map<java.lang.String, java.lang.String> propertiesToSet, java.util.Set<java.lang.String> propertiesToExclude) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableExistsException, org.apache.accumulo.core.client.TableNotFoundException {\n        throw new org.apache.commons.lang.NotImplementedException();\n    }\n\n    @java.lang.Override\n    public void flush(java.lang.String tableName, org.apache.hadoop.io.Text start, org.apache.hadoop.io.Text end, boolean wait) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableNotFoundException {\n        if (!exists(tableName)) {\n            throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"\");\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.hadoop.io.Text getMaxRow(java.lang.String tableName, org.apache.accumulo.core.security.Authorizations auths, org.apache.hadoop.io.Text startRow, boolean startInclusive, org.apache.hadoop.io.Text endRow, boolean endInclusive) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableNotFoundException {\n        org.apache.accumulo.core.client.mock.MockTable table = acu.tables.get(tableName);\n        if (table == null) {\n            throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"no such table\");\n        }\n        return org.apache.accumulo.core.client.admin.FindMax.findMax(new org.apache.accumulo.core.client.mock.MockScanner(table, auths), startRow, startInclusive, endRow, endInclusive);\n    }\n\n    @java.lang.Override\n    public void importTable(java.lang.String tableName, java.lang.String exportDir) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableExistsException {\n        throw new org.apache.commons.lang.NotImplementedException();\n    }\n\n    @java.lang.Override\n    public void exportTable(java.lang.String tableName, java.lang.String exportDir) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableNotFoundException {\n        throw new org.apache.commons.lang.NotImplementedException();\n    }\n\n    @java.lang.Override\n    public boolean testClassLoad(java.lang.String tableName, java.lang.String className, java.lang.String asTypeName) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableNotFoundException {\n        try {\n            org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader.loadClass(className, java.lang.Class.forName(asTypeName));\n        } catch (java.lang.ClassNotFoundException e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.hadoop.io.Text startText = new org.apache.hadoop.io.Text(start)",
            "src_parent": "{\n    if (!exists(tableName)) {\n        throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"\");\n    }\n    org.apache.accumulo.core.client.mock.MockTable t = acu.tables.get(tableName);\n    org.apache.hadoop.io.Text startText = new org.apache.hadoop.io.Text(start);\n    org.apache.hadoop.io.Text endText = new org.apache.hadoop.io.Text(end);\n    startText.append(org.apache.accumulo.core.client.mock.MockTableOperations.ZERO, 0, 1);\n    endText.append(org.apache.accumulo.core.client.mock.MockTableOperations.ZERO, 0, 1);\n    java.util.Set<org.apache.accumulo.core.data.Key> keep = new java.util.TreeSet<org.apache.accumulo.core.data.Key>(t.table.subMap(new org.apache.accumulo.core.data.Key(startText), new org.apache.accumulo.core.data.Key(endText)).keySet());\n    t.table.keySet().removeAll(keep);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.hadoop.io.Text endText = new org.apache.hadoop.io.Text(end)",
            "src_parent": "{\n    if (!exists(tableName)) {\n        throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"\");\n    }\n    org.apache.accumulo.core.client.mock.MockTable t = acu.tables.get(tableName);\n    org.apache.hadoop.io.Text startText = new org.apache.hadoop.io.Text(start);\n    org.apache.hadoop.io.Text endText = new org.apache.hadoop.io.Text(end);\n    startText.append(org.apache.accumulo.core.client.mock.MockTableOperations.ZERO, 0, 1);\n    endText.append(org.apache.accumulo.core.client.mock.MockTableOperations.ZERO, 0, 1);\n    java.util.Set<org.apache.accumulo.core.data.Key> keep = new java.util.TreeSet<org.apache.accumulo.core.data.Key>(t.table.subMap(new org.apache.accumulo.core.data.Key(startText), new org.apache.accumulo.core.data.Key(endText)).keySet());\n    t.table.keySet().removeAll(keep);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "startText.append(org.apache.accumulo.core.client.mock.MockTableOperations.ZERO, 0, 1)",
            "src_parent": "{\n    if (!exists(tableName)) {\n        throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"\");\n    }\n    org.apache.accumulo.core.client.mock.MockTable t = acu.tables.get(tableName);\n    org.apache.hadoop.io.Text startText = new org.apache.hadoop.io.Text(start);\n    org.apache.hadoop.io.Text endText = new org.apache.hadoop.io.Text(end);\n    startText.append(org.apache.accumulo.core.client.mock.MockTableOperations.ZERO, 0, 1);\n    endText.append(org.apache.accumulo.core.client.mock.MockTableOperations.ZERO, 0, 1);\n    java.util.Set<org.apache.accumulo.core.data.Key> keep = new java.util.TreeSet<org.apache.accumulo.core.data.Key>(t.table.subMap(new org.apache.accumulo.core.data.Key(startText), new org.apache.accumulo.core.data.Key(endText)).keySet());\n    t.table.keySet().removeAll(keep);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "endText.append(org.apache.accumulo.core.client.mock.MockTableOperations.ZERO, 0, 1)",
            "src_parent": "{\n    if (!exists(tableName)) {\n        throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, \"\");\n    }\n    org.apache.accumulo.core.client.mock.MockTable t = acu.tables.get(tableName);\n    org.apache.hadoop.io.Text startText = new org.apache.hadoop.io.Text(start);\n    org.apache.hadoop.io.Text endText = new org.apache.hadoop.io.Text(end);\n    startText.append(org.apache.accumulo.core.client.mock.MockTableOperations.ZERO, 0, 1);\n    endText.append(org.apache.accumulo.core.client.mock.MockTableOperations.ZERO, 0, 1);\n    java.util.Set<org.apache.accumulo.core.data.Key> keep = new java.util.TreeSet<org.apache.accumulo.core.data.Key>(t.table.subMap(new org.apache.accumulo.core.data.Key(startText), new org.apache.accumulo.core.data.Key(endText)).keySet());\n    t.table.keySet().removeAll(keep);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "new org.apache.hadoop.io.Text(start)",
            "dst_parent": "org.apache.hadoop.io.Text startText = new org.apache.hadoop.io.Text(start)",
            "dst_parent_type": "LocalVariable",
            "dst_type": "ConstructorCall",
            "operator": "MOV",
            "src": "new org.apache.accumulo.core.data.Key(start)",
            "src_parent": "t.table.tailMap(new org.apache.accumulo.core.data.Key(start))",
            "src_parent_type": "Invocation",
            "src_type": "ConstructorCall"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "new org.apache.hadoop.io.Text(end)",
            "dst_parent": "org.apache.hadoop.io.Text endText = new org.apache.hadoop.io.Text(end)",
            "dst_parent_type": "LocalVariable",
            "dst_type": "ConstructorCall",
            "operator": "MOV",
            "src": "new org.apache.accumulo.core.data.Key(end)",
            "src_parent": "t.table.tailMap(new org.apache.accumulo.core.data.Key(start)).headMap(new org.apache.accumulo.core.data.Key(end))",
            "src_parent_type": "Invocation",
            "src_type": "ConstructorCall"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "t.table.subMap(new org.apache.accumulo.core.data.Key(startText), new org.apache.accumulo.core.data.Key(endText))",
            "dst_parent": "t.table.subMap(new org.apache.accumulo.core.data.Key(startText), new org.apache.accumulo.core.data.Key(endText)).keySet()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "t.table.tailMap(new org.apache.accumulo.core.data.Key(start))",
            "src_parent": "t.table.tailMap(new org.apache.accumulo.core.data.Key(start)).headMap(new org.apache.accumulo.core.data.Key(end))",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "MockTableOperations"
    }
  ],
  "id": "accumulo_7ec60f1b"
}