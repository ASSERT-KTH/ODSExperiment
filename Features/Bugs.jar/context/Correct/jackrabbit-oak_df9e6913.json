{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (nt.hasOrderableChildNodes()) {\n    java.util.Iterator<org.apache.jackrabbit.oak.jcr.NodeDelegate> children = dlg.getChildren();\n    org.apache.jackrabbit.oak.jcr.NodeDelegate child1 = (children.hasNext()) ? children.next() : null;\n    org.apache.jackrabbit.oak.jcr.NodeDelegate child2 = (children.hasNext()) ? children.next() : null;\n    if ((child1 != null) && (child2 != null)) {\n        dlg.orderBefore(child1.getName(), child2.getName());\n    }\n}",
            "src_parent": "{\n    javax.jcr.nodetype.NodeTypeManager ntm = sessionDelegate.getNodeTypeManager();\n    javax.jcr.nodetype.NodeType nt = ntm.getNodeType(nodeTypeName);\n    if (nt.isAbstract() || nt.isMixin()) {\n        throw new javax.jcr.nodetype.ConstraintViolationException();\n    }\n    java.lang.String jcrPrimaryType = sessionDelegate.getOakPath(Property.JCR_PRIMARY_TYPE);\n    javax.jcr.Value value = sessionDelegate.getValueFactory().createValue(nodeTypeName, PropertyType.NAME);\n    dlg.setProperty(jcrPrimaryType, value);\n    if (nt.hasOrderableChildNodes()) {\n        java.util.Iterator<org.apache.jackrabbit.oak.jcr.NodeDelegate> children = dlg.getChildren();\n        org.apache.jackrabbit.oak.jcr.NodeDelegate child1 = (children.hasNext()) ? children.next() : null;\n        org.apache.jackrabbit.oak.jcr.NodeDelegate child2 = (children.hasNext()) ? children.next() : null;\n        if ((child1 != null) && (child2 != null)) {\n            dlg.orderBefore(child1.getName(), child2.getName());\n        }\n    }\n    return null;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (getPrimaryNodeType().hasOrderableChildNodes()) {\n    dlg.orderBefore(oakName, null);\n}",
            "src_parent": "{\n    java.lang.String oakPath = sessionDelegate.getOakPathKeepIndexOrThrowNotFound(relPath);\n    java.lang.String oakName = org.apache.jackrabbit.oak.commons.PathUtils.getName(oakPath);\n    java.lang.String parentPath = sessionDelegate.getOakPath(org.apache.jackrabbit.oak.commons.PathUtils.getParentPath(oakPath));\n    if (oakName.contains(\"[\")) {\n        throw new javax.jcr.RepositoryException(\"Cannot create a new node using a name including an index\");\n    }\n    org.apache.jackrabbit.oak.jcr.NodeDelegate parent = dlg.getChild(parentPath);\n    if (parent == null) {\n        java.lang.String grandParentPath = org.apache.jackrabbit.oak.commons.PathUtils.getParentPath(parentPath);\n        org.apache.jackrabbit.oak.jcr.NodeDelegate grandParent = dlg.getChild(grandParentPath);\n        if (grandParent != null) {\n            java.lang.String propName = org.apache.jackrabbit.oak.commons.PathUtils.getName(parentPath);\n            if (grandParent.getProperty(propName) != null) {\n                throw new javax.jcr.nodetype.ConstraintViolationException(\"Can't add new node to property.\");\n            }\n        }\n        throw new javax.jcr.PathNotFoundException(relPath);\n    }\n    if (parent.getChild(oakName) != null) {\n        throw new javax.jcr.ItemExistsException(relPath);\n    }\n    java.lang.String ntName = primaryNodeTypeName;\n    if (ntName == null) {\n        org.apache.jackrabbit.oak.plugins.nodetype.DefinitionProvider dp = sessionDelegate.getDefinitionProvider();\n        try {\n            java.lang.String childName = sessionDelegate.getOakName(org.apache.jackrabbit.oak.commons.PathUtils.getName(relPath));\n            javax.jcr.nodetype.NodeDefinition def = dp.getDefinition(new org.apache.jackrabbit.oak.jcr.NodeImpl<org.apache.jackrabbit.oak.jcr.NodeDelegate>(parent), childName);\n            ntName = def.getDefaultPrimaryTypeName();\n        } catch (javax.jcr.RepositoryException e) {\n            throw new javax.jcr.nodetype.ConstraintViolationException(\"no matching child node definition found for \" + relPath);\n        }\n    }\n    javax.jcr.nodetype.NodeTypeManager ntm = sessionDelegate.getNodeTypeManager();\n    javax.jcr.nodetype.NodeType nt = ntm.getNodeType(ntName);\n    if (nt.isAbstract() || nt.isMixin()) {\n        throw new javax.jcr.nodetype.ConstraintViolationException();\n    }\n    org.apache.jackrabbit.oak.jcr.NodeDelegate added = parent.addChild(oakName);\n    if (added == null) {\n        throw new javax.jcr.ItemExistsException();\n    }\n    if (getPrimaryNodeType().hasOrderableChildNodes()) {\n        dlg.orderBefore(oakName, null);\n    }\n    org.apache.jackrabbit.oak.jcr.NodeImpl<?> childNode = new org.apache.jackrabbit.oak.jcr.NodeImpl<org.apache.jackrabbit.oak.jcr.NodeDelegate>(added);\n    childNode.internalSetPrimaryType(ntName);\n    childNode.autoCreateItems();\n    return childNode;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "NodeImpl"
    }
  ],
  "id": "jackrabbit-oak_df9e6913"
}