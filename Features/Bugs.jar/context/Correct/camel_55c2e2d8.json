{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "public synchronized java.util.concurrent.BlockingQueue<org.apache.camel.Exchange> getOrCreateQueue(java.lang.String uri, java.lang.Integer size) {\n    java.lang.String key = getQueueKey(uri);\n    org.apache.camel.component.seda.SedaComponent.QueueReference ref = getQueues().get(key);\n    if (ref != null) {\n        ref.addReference();\n        return ref.getQueue();\n    }\n    java.util.concurrent.BlockingQueue<org.apache.camel.Exchange> queue;\n    if ((size != null) && (size > 0)) {\n        queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>(size);\n    } else if (getQueueSize() > 0) {\n        queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>(getQueueSize());\n    } else {\n        queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>();\n    }\n    ref = new org.apache.camel.component.seda.SedaComponent.QueueReference(queue);\n    ref.addReference();\n    getQueues().put(key, ref);\n    return queue;\n}",
            "dst_parent": "public class SedaComponent extends org.apache.camel.impl.DefaultComponent {\n    protected final int maxConcurrentConsumers = 500;\n\n    protected int queueSize;\n\n    protected int defaultConcurrentConsumers = 1;\n\n    private final java.util.Map<java.lang.String, org.apache.camel.component.seda.SedaComponent.QueueReference> queues = new java.util.HashMap<java.lang.String, org.apache.camel.component.seda.SedaComponent.QueueReference>();\n\n    public void setQueueSize(int size) {\n        queueSize = size;\n    }\n\n    public int getQueueSize() {\n        return queueSize;\n    }\n\n    public void setConcurrentConsumers(int size) {\n        defaultConcurrentConsumers = size;\n    }\n\n    public int getConcurrentConsumers() {\n        return defaultConcurrentConsumers;\n    }\n\n    public synchronized java.util.concurrent.BlockingQueue<org.apache.camel.Exchange> getOrCreateQueue(java.lang.String uri, java.lang.Integer size) {\n        java.lang.String key = getQueueKey(uri);\n        org.apache.camel.component.seda.SedaComponent.QueueReference ref = getQueues().get(key);\n        if (ref != null) {\n            ref.addReference();\n            return ref.getQueue();\n        }\n        java.util.concurrent.BlockingQueue<org.apache.camel.Exchange> queue;\n        if ((size != null) && (size > 0)) {\n            queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>(size);\n        } else if (getQueueSize() > 0) {\n            queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>(getQueueSize());\n        } else {\n            queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>();\n        }\n        ref = new org.apache.camel.component.seda.SedaComponent.QueueReference(queue);\n        ref.addReference();\n        getQueues().put(key, ref);\n        return queue;\n    }\n\n    public java.util.Map<java.lang.String, org.apache.camel.component.seda.SedaComponent.QueueReference> getQueues() {\n        return queues;\n    }\n\n    @java.lang.Override\n    protected org.apache.camel.Endpoint createEndpoint(java.lang.String uri, java.lang.String remaining, java.util.Map<java.lang.String, java.lang.Object> parameters) throws java.lang.Exception {\n        int consumers = getAndRemoveParameter(parameters, \"concurrentConsumers\", java.lang.Integer.class, defaultConcurrentConsumers);\n        boolean limitConcurrentConsumers = getAndRemoveParameter(parameters, \"limitConcurrentConsumers\", java.lang.Boolean.class, true);\n        if (limitConcurrentConsumers && (consumers > maxConcurrentConsumers)) {\n            throw new java.lang.IllegalArgumentException(((\"The limitConcurrentConsumers flag in set to true. ConcurrentConsumers cannot be set at a value greater than \" + maxConcurrentConsumers) + \" was \") + consumers);\n        }\n        java.lang.Integer size = getAndRemoveParameter(parameters, \"size\", java.lang.Integer.class);\n        org.apache.camel.component.seda.SedaEndpoint answer = new org.apache.camel.component.seda.SedaEndpoint(uri, this, getOrCreateQueue(uri, size), consumers);\n        answer.configureProperties(parameters);\n        return answer;\n    }\n\n    public java.lang.String getQueueKey(java.lang.String uri) {\n        if (uri.contains(\"?\")) {\n            uri = uri.substring(0, uri.indexOf('?'));\n        }\n        return uri;\n    }\n\n    @java.lang.Override\n    protected void doStop() throws java.lang.Exception {\n        getQueues().clear();\n        super.doStop();\n    }\n\n    void onShutdownEndpoint(org.apache.camel.component.seda.SedaEndpoint endpoint) {\n        java.lang.String key = getQueueKey(endpoint.getEndpointUri());\n        org.apache.camel.component.seda.SedaComponent.QueueReference ref = getQueues().get(key);\n        if (ref != null) {\n            ref.removeReference();\n            if (ref.getCount() <= 0) {\n                getQueues().remove(key);\n            }\n        }\n    }\n\n    public static final class QueueReference {\n        private final java.util.concurrent.BlockingQueue<org.apache.camel.Exchange> queue;\n\n        private volatile int count;\n\n        private QueueReference(java.util.concurrent.BlockingQueue<org.apache.camel.Exchange> queue) {\n            this.queue = queue;\n        }\n\n        void addReference() {\n            count++;\n        }\n\n        void removeReference() {\n            count--;\n        }\n\n        public int getCount() {\n            return count;\n        }\n\n        public java.util.concurrent.BlockingQueue<org.apache.camel.Exchange> getQueue() {\n            return queue;\n        }\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "public synchronized java.util.concurrent.BlockingQueue<org.apache.camel.Exchange> createQueue(java.lang.String uri, java.util.Map<java.lang.String, java.lang.Object> parameters) {\n    java.lang.String key = getQueueKey(uri);\n    org.apache.camel.component.seda.SedaComponent.QueueReference ref = getQueues().get(key);\n    if (ref != null) {\n        ref.addReference();\n        return ref.getQueue();\n    }\n    java.util.concurrent.BlockingQueue<org.apache.camel.Exchange> queue;\n    java.lang.Integer size = getAndRemoveParameter(parameters, \"size\", java.lang.Integer.class);\n    if ((size != null) && (size > 0)) {\n        queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>(size);\n    } else if (getQueueSize() > 0) {\n        queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>(getQueueSize());\n    } else {\n        queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>();\n    }\n    ref = new org.apache.camel.component.seda.SedaComponent.QueueReference(queue);\n    ref.addReference();\n    getQueues().put(key, ref);\n    return queue;\n}",
            "src_parent": "public class SedaComponent extends org.apache.camel.impl.DefaultComponent {\n    protected final int maxConcurrentConsumers = 500;\n\n    protected int queueSize;\n\n    protected int defaultConcurrentConsumers = 1;\n\n    private final java.util.Map<java.lang.String, org.apache.camel.component.seda.SedaComponent.QueueReference> queues = new java.util.HashMap<java.lang.String, org.apache.camel.component.seda.SedaComponent.QueueReference>();\n\n    public void setQueueSize(int size) {\n        queueSize = size;\n    }\n\n    public int getQueueSize() {\n        return queueSize;\n    }\n\n    public void setConcurrentConsumers(int size) {\n        defaultConcurrentConsumers = size;\n    }\n\n    public int getConcurrentConsumers() {\n        return defaultConcurrentConsumers;\n    }\n\n    public synchronized java.util.concurrent.BlockingQueue<org.apache.camel.Exchange> createQueue(java.lang.String uri, java.util.Map<java.lang.String, java.lang.Object> parameters) {\n        java.lang.String key = getQueueKey(uri);\n        org.apache.camel.component.seda.SedaComponent.QueueReference ref = getQueues().get(key);\n        if (ref != null) {\n            ref.addReference();\n            return ref.getQueue();\n        }\n        java.util.concurrent.BlockingQueue<org.apache.camel.Exchange> queue;\n        java.lang.Integer size = getAndRemoveParameter(parameters, \"size\", java.lang.Integer.class);\n        if ((size != null) && (size > 0)) {\n            queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>(size);\n        } else if (getQueueSize() > 0) {\n            queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>(getQueueSize());\n        } else {\n            queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>();\n        }\n        ref = new org.apache.camel.component.seda.SedaComponent.QueueReference(queue);\n        ref.addReference();\n        getQueues().put(key, ref);\n        return queue;\n    }\n\n    public java.util.Map<java.lang.String, org.apache.camel.component.seda.SedaComponent.QueueReference> getQueues() {\n        return queues;\n    }\n\n    @java.lang.Override\n    protected org.apache.camel.Endpoint createEndpoint(java.lang.String uri, java.lang.String remaining, java.util.Map<java.lang.String, java.lang.Object> parameters) throws java.lang.Exception {\n        int consumers = getAndRemoveParameter(parameters, \"concurrentConsumers\", java.lang.Integer.class, defaultConcurrentConsumers);\n        boolean limitConcurrentConsumers = getAndRemoveParameter(parameters, \"limitConcurrentConsumers\", java.lang.Boolean.class, true);\n        if (limitConcurrentConsumers && (consumers > maxConcurrentConsumers)) {\n            throw new java.lang.IllegalArgumentException(((\"The limitConcurrentConsumers flag in set to true. ConcurrentConsumers cannot be set at a value greater than \" + maxConcurrentConsumers) + \" was \") + consumers);\n        }\n        org.apache.camel.component.seda.SedaEndpoint answer = new org.apache.camel.component.seda.SedaEndpoint(uri, this, createQueue(uri, parameters), consumers);\n        answer.configureProperties(parameters);\n        return answer;\n    }\n\n    public java.lang.String getQueueKey(java.lang.String uri) {\n        if (uri.contains(\"?\")) {\n            uri = uri.substring(0, uri.indexOf('?'));\n        }\n        return uri;\n    }\n\n    @java.lang.Override\n    protected void doStop() throws java.lang.Exception {\n        getQueues().clear();\n        super.doStop();\n    }\n\n    void onShutdownEndpoint(org.apache.camel.component.seda.SedaEndpoint endpoint) {\n        java.lang.String key = getQueueKey(endpoint.getEndpointUri());\n        org.apache.camel.component.seda.SedaComponent.QueueReference ref = getQueues().get(key);\n        if (ref != null) {\n            ref.removeReference();\n            if (ref.getCount() <= 0) {\n                getQueues().remove(key);\n            }\n        }\n    }\n\n    public static final class QueueReference {\n        private final java.util.concurrent.BlockingQueue<org.apache.camel.Exchange> queue;\n\n        private volatile int count;\n\n        private QueueReference(java.util.concurrent.BlockingQueue<org.apache.camel.Exchange> queue) {\n            this.queue = queue;\n        }\n\n        void addReference() {\n            count++;\n        }\n\n        void removeReference() {\n            count--;\n        }\n\n        public int getCount() {\n            return count;\n        }\n\n        public java.util.concurrent.BlockingQueue<org.apache.camel.Exchange> getQueue() {\n            return queue;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Integer size",
            "dst_parent": "public synchronized java.util.concurrent.BlockingQueue<org.apache.camel.Exchange> getOrCreateQueue(java.lang.String uri, java.lang.Integer size) {\n    java.lang.String key = getQueueKey(uri);\n    org.apache.camel.component.seda.SedaComponent.QueueReference ref = getQueues().get(key);\n    if (ref != null) {\n        ref.addReference();\n        return ref.getQueue();\n    }\n    java.util.concurrent.BlockingQueue<org.apache.camel.Exchange> queue;\n    if ((size != null) && (size > 0)) {\n        queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>(size);\n    } else if (getQueueSize() > 0) {\n        queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>(getQueueSize());\n    } else {\n        queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>();\n    }\n    ref = new org.apache.camel.component.seda.SedaComponent.QueueReference(queue);\n    ref.addReference();\n    getQueues().put(key, ref);\n    return queue;\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "UPD",
            "src": "java.util.Map<java.lang.String, java.lang.Object> parameters",
            "src_parent": "public synchronized java.util.concurrent.BlockingQueue<org.apache.camel.Exchange> createQueue(java.lang.String uri, java.util.Map<java.lang.String, java.lang.Object> parameters) {\n    java.lang.String key = getQueueKey(uri);\n    org.apache.camel.component.seda.SedaComponent.QueueReference ref = getQueues().get(key);\n    if (ref != null) {\n        ref.addReference();\n        return ref.getQueue();\n    }\n    java.util.concurrent.BlockingQueue<org.apache.camel.Exchange> queue;\n    java.lang.Integer size = getAndRemoveParameter(parameters, \"size\", java.lang.Integer.class);\n    if ((size != null) && (size > 0)) {\n        queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>(size);\n    } else if (getQueueSize() > 0) {\n        queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>(getQueueSize());\n    } else {\n        queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>();\n    }\n    ref = new org.apache.camel.component.seda.SedaComponent.QueueReference(queue);\n    ref.addReference();\n    getQueues().put(key, ref);\n    return queue;\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Parameter",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Integer",
            "dst_parent": "java.lang.Integer size",
            "dst_parent_type": "Parameter",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.util.Map<java.lang.String, java.lang.Object>",
            "src_parent": "java.util.Map<java.lang.String, java.lang.Object> parameters",
            "src_parent_type": "Parameter",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "getOrCreateQueue(uri, size)",
            "dst_parent": "new org.apache.camel.component.seda.SedaEndpoint(uri, this, getOrCreateQueue(uri, size), consumers)",
            "dst_parent_type": "ConstructorCall",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "createQueue(uri, parameters)",
            "src_parent": "new org.apache.camel.component.seda.SedaEndpoint(uri, this, createQueue(uri, parameters), consumers)",
            "src_parent_type": "ConstructorCall",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "size",
            "dst_parent": "getOrCreateQueue(uri, size)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "parameters",
            "src_parent": "createQueue(uri, parameters)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Integer size = getAndRemoveParameter(parameters, \"size\", java.lang.Integer.class)",
            "dst_parent": "{\n    int consumers = getAndRemoveParameter(parameters, \"concurrentConsumers\", java.lang.Integer.class, defaultConcurrentConsumers);\n    boolean limitConcurrentConsumers = getAndRemoveParameter(parameters, \"limitConcurrentConsumers\", java.lang.Boolean.class, true);\n    if (limitConcurrentConsumers && (consumers > maxConcurrentConsumers)) {\n        throw new java.lang.IllegalArgumentException(((\"The limitConcurrentConsumers flag in set to true. ConcurrentConsumers cannot be set at a value greater than \" + maxConcurrentConsumers) + \" was \") + consumers);\n    }\n    java.lang.Integer size = getAndRemoveParameter(parameters, \"size\", java.lang.Integer.class);\n    org.apache.camel.component.seda.SedaEndpoint answer = new org.apache.camel.component.seda.SedaEndpoint(uri, this, getOrCreateQueue(uri, size), consumers);\n    answer.configureProperties(parameters);\n    return answer;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.lang.Integer size = getAndRemoveParameter(parameters, \"size\", java.lang.Integer.class)",
            "src_parent": "{\n    java.lang.String key = getQueueKey(uri);\n    org.apache.camel.component.seda.SedaComponent.QueueReference ref = getQueues().get(key);\n    if (ref != null) {\n        ref.addReference();\n        return ref.getQueue();\n    }\n    java.util.concurrent.BlockingQueue<org.apache.camel.Exchange> queue;\n    java.lang.Integer size = getAndRemoveParameter(parameters, \"size\", java.lang.Integer.class);\n    if ((size != null) && (size > 0)) {\n        queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>(size);\n    } else if (getQueueSize() > 0) {\n        queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>(getQueueSize());\n    } else {\n        queue = new java.util.concurrent.LinkedBlockingQueue<org.apache.camel.Exchange>();\n    }\n    ref = new org.apache.camel.component.seda.SedaComponent.QueueReference(queue);\n    ref.addReference();\n    getQueues().put(key, ref);\n    return queue;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        }
      ],
      "file_name": "SedaComponent"
    }
  ],
  "id": "camel_55c2e2d8"
}