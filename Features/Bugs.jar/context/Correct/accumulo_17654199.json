{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Synchronized",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.accumulo.core.client.IteratorSetting setting = new org.apache.accumulo.core.client.IteratorSetting(9, org.apache.accumulo.server.util.ReplicationTableUtil.COMBINER_NAME, org.apache.accumulo.tserver.tablet.StatusCombiner.class)",
            "src_parent": "{\n    t1 = java.lang.System.currentTimeMillis();\n    org.apache.accumulo.fate.zookeeper.IZooReaderWriter zoo = org.apache.accumulo.server.zookeeper.ZooReaderWriter.getRetryingInstance();\n    tablet.incrementDataSourceDeletions();\n    if (extent.isRootTablet()) {\n        waitForScansToFinish(oldDatafiles, true, java.lang.Long.MAX_VALUE);\n        try {\n            if (!zoo.isLockHeld(tablet.getTabletServer().getLock().getLockID())) {\n                throw new java.lang.IllegalStateException();\n            }\n        } catch (java.lang.Exception e) {\n            throw new java.lang.IllegalStateException(\"Can not bring major compaction online, lock not held\", e);\n        }\n        org.apache.accumulo.tserver.tablet.RootFiles.replaceFiles(tablet.getTableConfiguration(), tablet.getTabletServer().getFileSystem(), tablet.getLocation(), oldDatafiles, tmpDatafile, newDatafile);\n    }\n    for (org.apache.accumulo.server.fs.FileRef oldDatafile : oldDatafiles) {\n        if (!datafileSizes.containsKey(oldDatafile)) {\n            log.error(\"file does not exist in set \" + oldDatafile);\n        }\n        datafileSizes.remove(oldDatafile);\n        majorCompactingFiles.remove(oldDatafile);\n    }\n    if (datafileSizes.containsKey(newDatafile)) {\n        log.error(\"Adding file that is already in set \" + newDatafile);\n    }\n    if (dfv.getNumEntries() > 0) {\n        datafileSizes.put(newDatafile, dfv);\n    }\n    majorCompactingFiles.add(newDatafile);\n    tablet.computeNumEntries();\n    lastLocation = tablet.resetLastLocation();\n    org.apache.accumulo.core.client.IteratorSetting setting = new org.apache.accumulo.core.client.IteratorSetting(9, org.apache.accumulo.server.util.ReplicationTableUtil.COMBINER_NAME, org.apache.accumulo.tserver.tablet.StatusCombiner.class);\n    org.apache.accumulo.core.iterators.Combiner.setColumns(setting, java.util.Collections.singletonList(new org.apache.accumulo.core.client.IteratorSetting.Column(MetadataSchema.ReplicationSection.COLF)));\n    try {\n        for (org.apache.accumulo.core.iterators.IteratorUtil.IteratorScope scope : org.apache.accumulo.core.iterators.IteratorUtil.IteratorScope.values()) {\n            java.lang.String root = java.lang.String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope.name().toLowerCase(), setting.getName());\n            for (java.util.Map.Entry<java.lang.String, java.lang.String> prop : setting.getOptions().entrySet()) {\n                org.apache.accumulo.tserver.tablet.TablePropUtil.setTableProperty(MetadataTable.ID, (root + \".opt.\") + prop.getKey(), prop.getValue());\n            }\n            org.apache.accumulo.tserver.tablet.TablePropUtil.setTableProperty(MetadataTable.ID, root, (setting.getPriority() + \",\") + setting.getIteratorClass());\n        }\n    } catch (java.lang.Exception e) {\n        log.fatal(\"Error talking to ZooKeeper\", e);\n        throw new java.io.IOException(e);\n    }\n    tablet.setLastCompactionID(compactionId);\n    t2 = java.lang.System.currentTimeMillis();\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Synchronized",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.accumulo.core.iterators.Combiner.setColumns(setting, java.util.Collections.singletonList(new org.apache.accumulo.core.client.IteratorSetting.Column(MetadataSchema.ReplicationSection.COLF)))",
            "src_parent": "{\n    t1 = java.lang.System.currentTimeMillis();\n    org.apache.accumulo.fate.zookeeper.IZooReaderWriter zoo = org.apache.accumulo.server.zookeeper.ZooReaderWriter.getRetryingInstance();\n    tablet.incrementDataSourceDeletions();\n    if (extent.isRootTablet()) {\n        waitForScansToFinish(oldDatafiles, true, java.lang.Long.MAX_VALUE);\n        try {\n            if (!zoo.isLockHeld(tablet.getTabletServer().getLock().getLockID())) {\n                throw new java.lang.IllegalStateException();\n            }\n        } catch (java.lang.Exception e) {\n            throw new java.lang.IllegalStateException(\"Can not bring major compaction online, lock not held\", e);\n        }\n        org.apache.accumulo.tserver.tablet.RootFiles.replaceFiles(tablet.getTableConfiguration(), tablet.getTabletServer().getFileSystem(), tablet.getLocation(), oldDatafiles, tmpDatafile, newDatafile);\n    }\n    for (org.apache.accumulo.server.fs.FileRef oldDatafile : oldDatafiles) {\n        if (!datafileSizes.containsKey(oldDatafile)) {\n            log.error(\"file does not exist in set \" + oldDatafile);\n        }\n        datafileSizes.remove(oldDatafile);\n        majorCompactingFiles.remove(oldDatafile);\n    }\n    if (datafileSizes.containsKey(newDatafile)) {\n        log.error(\"Adding file that is already in set \" + newDatafile);\n    }\n    if (dfv.getNumEntries() > 0) {\n        datafileSizes.put(newDatafile, dfv);\n    }\n    majorCompactingFiles.add(newDatafile);\n    tablet.computeNumEntries();\n    lastLocation = tablet.resetLastLocation();\n    org.apache.accumulo.core.client.IteratorSetting setting = new org.apache.accumulo.core.client.IteratorSetting(9, org.apache.accumulo.server.util.ReplicationTableUtil.COMBINER_NAME, org.apache.accumulo.tserver.tablet.StatusCombiner.class);\n    org.apache.accumulo.core.iterators.Combiner.setColumns(setting, java.util.Collections.singletonList(new org.apache.accumulo.core.client.IteratorSetting.Column(MetadataSchema.ReplicationSection.COLF)));\n    try {\n        for (org.apache.accumulo.core.iterators.IteratorUtil.IteratorScope scope : org.apache.accumulo.core.iterators.IteratorUtil.IteratorScope.values()) {\n            java.lang.String root = java.lang.String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope.name().toLowerCase(), setting.getName());\n            for (java.util.Map.Entry<java.lang.String, java.lang.String> prop : setting.getOptions().entrySet()) {\n                org.apache.accumulo.tserver.tablet.TablePropUtil.setTableProperty(MetadataTable.ID, (root + \".opt.\") + prop.getKey(), prop.getValue());\n            }\n            org.apache.accumulo.tserver.tablet.TablePropUtil.setTableProperty(MetadataTable.ID, root, (setting.getPriority() + \",\") + setting.getIteratorClass());\n        }\n    } catch (java.lang.Exception e) {\n        log.fatal(\"Error talking to ZooKeeper\", e);\n        throw new java.io.IOException(e);\n    }\n    tablet.setLastCompactionID(compactionId);\n    t2 = java.lang.System.currentTimeMillis();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Synchronized",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "try {\n    for (org.apache.accumulo.core.iterators.IteratorUtil.IteratorScope scope : org.apache.accumulo.core.iterators.IteratorUtil.IteratorScope.values()) {\n        java.lang.String root = java.lang.String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope.name().toLowerCase(), setting.getName());\n        for (java.util.Map.Entry<java.lang.String, java.lang.String> prop : setting.getOptions().entrySet()) {\n            org.apache.accumulo.tserver.tablet.TablePropUtil.setTableProperty(MetadataTable.ID, (root + \".opt.\") + prop.getKey(), prop.getValue());\n        }\n        org.apache.accumulo.tserver.tablet.TablePropUtil.setTableProperty(MetadataTable.ID, root, (setting.getPriority() + \",\") + setting.getIteratorClass());\n    }\n} catch (java.lang.Exception e) {\n    log.fatal(\"Error talking to ZooKeeper\", e);\n    throw new java.io.IOException(e);\n}",
            "src_parent": "{\n    t1 = java.lang.System.currentTimeMillis();\n    org.apache.accumulo.fate.zookeeper.IZooReaderWriter zoo = org.apache.accumulo.server.zookeeper.ZooReaderWriter.getRetryingInstance();\n    tablet.incrementDataSourceDeletions();\n    if (extent.isRootTablet()) {\n        waitForScansToFinish(oldDatafiles, true, java.lang.Long.MAX_VALUE);\n        try {\n            if (!zoo.isLockHeld(tablet.getTabletServer().getLock().getLockID())) {\n                throw new java.lang.IllegalStateException();\n            }\n        } catch (java.lang.Exception e) {\n            throw new java.lang.IllegalStateException(\"Can not bring major compaction online, lock not held\", e);\n        }\n        org.apache.accumulo.tserver.tablet.RootFiles.replaceFiles(tablet.getTableConfiguration(), tablet.getTabletServer().getFileSystem(), tablet.getLocation(), oldDatafiles, tmpDatafile, newDatafile);\n    }\n    for (org.apache.accumulo.server.fs.FileRef oldDatafile : oldDatafiles) {\n        if (!datafileSizes.containsKey(oldDatafile)) {\n            log.error(\"file does not exist in set \" + oldDatafile);\n        }\n        datafileSizes.remove(oldDatafile);\n        majorCompactingFiles.remove(oldDatafile);\n    }\n    if (datafileSizes.containsKey(newDatafile)) {\n        log.error(\"Adding file that is already in set \" + newDatafile);\n    }\n    if (dfv.getNumEntries() > 0) {\n        datafileSizes.put(newDatafile, dfv);\n    }\n    majorCompactingFiles.add(newDatafile);\n    tablet.computeNumEntries();\n    lastLocation = tablet.resetLastLocation();\n    org.apache.accumulo.core.client.IteratorSetting setting = new org.apache.accumulo.core.client.IteratorSetting(9, org.apache.accumulo.server.util.ReplicationTableUtil.COMBINER_NAME, org.apache.accumulo.tserver.tablet.StatusCombiner.class);\n    org.apache.accumulo.core.iterators.Combiner.setColumns(setting, java.util.Collections.singletonList(new org.apache.accumulo.core.client.IteratorSetting.Column(MetadataSchema.ReplicationSection.COLF)));\n    try {\n        for (org.apache.accumulo.core.iterators.IteratorUtil.IteratorScope scope : org.apache.accumulo.core.iterators.IteratorUtil.IteratorScope.values()) {\n            java.lang.String root = java.lang.String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope.name().toLowerCase(), setting.getName());\n            for (java.util.Map.Entry<java.lang.String, java.lang.String> prop : setting.getOptions().entrySet()) {\n                org.apache.accumulo.tserver.tablet.TablePropUtil.setTableProperty(MetadataTable.ID, (root + \".opt.\") + prop.getKey(), prop.getValue());\n            }\n            org.apache.accumulo.tserver.tablet.TablePropUtil.setTableProperty(MetadataTable.ID, root, (setting.getPriority() + \",\") + setting.getIteratorClass());\n        }\n    } catch (java.lang.Exception e) {\n        log.fatal(\"Error talking to ZooKeeper\", e);\n        throw new java.io.IOException(e);\n    }\n    tablet.setLastCompactionID(compactionId);\n    t2 = java.lang.System.currentTimeMillis();\n}",
            "src_parent_type": "Block",
            "src_type": "Try"
          }
        }
      ],
      "file_name": "DatafileManager"
    }
  ],
  "id": "accumulo_17654199"
}