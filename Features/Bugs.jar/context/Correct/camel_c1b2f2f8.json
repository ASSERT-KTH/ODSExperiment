{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "getContext() {\n    removeEndpoints(\"*\");\n}",
            "src_parent": "public class InterceptSendToEndpoint implements org.apache.camel.Endpoint {\n    private static transient final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.camel.impl.InterceptSendToEndpoint.class);\n\n    private final org.apache.camel.Endpoint delegate;\n\n    private org.apache.camel.Producer producer;\n\n    private org.apache.camel.Processor detour;\n\n    private boolean skip;\n\n    public InterceptSendToEndpoint(final org.apache.camel.Endpoint destination, boolean skip) {\n        this.delegate = destination;\n        this.skip = skip;\n    }\n\n    public void setDetour(org.apache.camel.Processor detour) {\n        this.detour = detour;\n    }\n\n    public org.apache.camel.Endpoint getDelegate() {\n        return delegate;\n    }\n\n    public java.lang.String getEndpointUri() {\n        return delegate.getEndpointUri();\n    }\n\n     getContext() {\n        removeEndpoints(\"*\");\n    }\n\n    public java.lang.String getEndpointKey() {\n        return delegate.getEndpointKey();\n    }\n\n    public org.apache.camel.Exchange createExchange() {\n        return delegate.createExchange();\n    }\n\n    public org.apache.camel.Exchange createExchange(org.apache.camel.ExchangePattern pattern) {\n        return delegate.createExchange(pattern);\n        getContext().removeEndpoints(pattern);\n    }\n\n    public org.apache.camel.Exchange createExchange(org.apache.camel.Exchange exchange) {\n        return delegate.createExchange(exchange);\n    }\n\n    public org.apache.camel.CamelContext getCamelContext() {\n        return delegate.getCamelContext();\n    }\n\n    public org.apache.camel.Producer createProducer() throws java.lang.Exception {\n        producer = delegate.createProducer();\n        return new org.apache.camel.Producer() {\n            public org.apache.camel.Endpoint getEndpoint() {\n                return producer.getEndpoint();\n            }\n\n            public org.apache.camel.Exchange createExchange() {\n                return producer.createExchange();\n            }\n\n            public org.apache.camel.Exchange createExchange(org.apache.camel.ExchangePattern pattern) {\n                return producer.createExchange(pattern);\n            }\n\n            public org.apache.camel.Exchange createExchange(org.apache.camel.Exchange exchange) {\n                return producer.createExchange(exchange);\n            }\n\n            public void process(org.apache.camel.Exchange exchange) throws java.lang.Exception {\n                if (org.apache.camel.impl.InterceptSendToEndpoint.LOG.isDebugEnabled()) {\n                    org.apache.camel.impl.InterceptSendToEndpoint.LOG.debug(((((\"Sending to endpoint: \" + getEndpointUri()) + \" is intercepted and detoured to: \") + detour) + \" for exchange: \") + exchange);\n                }\n                exchange.getIn().setHeader(Exchange.INTERCEPTED_ENDPOINT, delegate.getEndpointUri());\n                try {\n                    detour.process(exchange);\n                } catch (java.lang.Exception e) {\n                    exchange.setException(e);\n                }\n                if (!continueProcessing(exchange, \"skip sending to original intended destination: \" + getEndpointUri(), org.apache.camel.impl.InterceptSendToEndpoint.LOG)) {\n                    return;\n                }\n                if (!skip) {\n                    if (exchange.hasOut()) {\n                        exchange.setIn(exchange.getOut());\n                        exchange.setOut(null);\n                    }\n                    producer.process(exchange);\n                } else if (org.apache.camel.impl.InterceptSendToEndpoint.LOG.isDebugEnabled()) {\n                    org.apache.camel.impl.InterceptSendToEndpoint.LOG.debug(((\"Stop() means skip sending exchange to original intended destination: \" + getEndpointUri()) + \" for exchange: \") + exchange);\n                }\n            }\n\n            public boolean isSingleton() {\n                return producer.isSingleton();\n            }\n\n            public void start() throws java.lang.Exception {\n                org.apache.camel.util.ServiceHelper.startService(detour);\n            }\n\n            public void stop() throws java.lang.Exception {\n                org.apache.camel.util.ServiceHelper.stopService(detour);\n            }\n        };\n    }\n\n    private static boolean hasExceptionBeenHandledByErrorHandler(org.apache.camel.Exchange nextExchange) {\n        return java.lang.Boolean.TRUE.equals(nextExchange.getProperty(Exchange.ERRORHANDLER_HANDLED));\n    }\n\n    public org.apache.camel.Consumer createConsumer(org.apache.camel.Processor processor) throws java.lang.Exception {\n        return delegate.createConsumer(processor);\n    }\n\n    public org.apache.camel.PollingConsumer createPollingConsumer() throws java.lang.Exception {\n        return delegate.createPollingConsumer();\n    }\n\n    public void configureProperties(java.util.Map<java.lang.String, java.lang.Object> options) {\n        delegate.configureProperties(options);\n    }\n\n    public void setCamelContext(org.apache.camel.CamelContext context) {\n        delegate.setCamelContext(context);\n    }\n\n    public boolean isLenientProperties() {\n        return delegate.isLenientProperties();\n    }\n\n    public boolean isSingleton() {\n        return delegate.isSingleton();\n    }\n\n    public void start() throws java.lang.Exception {\n        delegate.start();\n    }\n\n    public void stop() throws java.lang.Exception {\n        delegate.stop();\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return delegate.toString();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "getContext().removeEndpoints(pattern)",
            "src_parent": "{\n    return delegate.createExchange(pattern);\n    getContext().removeEndpoints(pattern);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "InterceptSendToEndpoint"
    }
  ],
  "id": "camel_c1b2f2f8"
}