{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "org.apache.wicket.markup.html.internal.Enclosure",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer container) {\n    org.apache.wicket.Component childController = container.get(childId);\n    java.util.Iterator<org.apache.wicket.Component> children = container.iterator();\n    while (children.hasNext() && (childController == null)) {\n        org.apache.wicket.Component transparentChild = children.next();\n        if (transparentChild instanceof org.apache.wicket.markup.html.TransparentWebMarkupContainer) {\n            childController = resolveChild(((org.apache.wicket.MarkupContainer) (transparentChild)));\n        }\n    } \n    return childController;\n}",
            "src_parent": "public class Enclosure extends org.apache.wicket.markup.html.WebMarkupContainer implements org.apache.wicket.markup.resolver.IComponentResolver {\n    private static final long serialVersionUID = 1L;\n\n    private org.apache.wicket.Component childComponent;\n\n    private final java.lang.String childId;\n\n    public Enclosure(final java.lang.String id, final java.lang.String childId) {\n        super(id);\n        if (childId == null) {\n            throw new org.apache.wicket.markup.MarkupException(\"You most likely forgot to register the EnclosureHandler with the MarkupParserFactory\");\n        }\n        this.childId = childId;\n    }\n\n    public final java.lang.String getChildId() {\n        return childId.toString();\n    }\n\n    protected final org.apache.wicket.Component getChild() {\n        if (childComponent == null) {\n            childComponent = resolveChild(this);\n        }\n        if (childComponent == null) {\n            childComponent = getChildComponent(new org.apache.wicket.markup.MarkupStream(getMarkup()), getEnclosureParent());\n        }\n        return childComponent;\n    }\n\n    private org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer container) {\n        org.apache.wicket.Component childController = container.get(childId);\n        java.util.Iterator<org.apache.wicket.Component> children = container.iterator();\n        while (children.hasNext() && (childController == null)) {\n            org.apache.wicket.Component transparentChild = children.next();\n            if (transparentChild instanceof org.apache.wicket.markup.html.TransparentWebMarkupContainer) {\n                childController = resolveChild(((org.apache.wicket.MarkupContainer) (transparentChild)));\n            }\n        } \n        return childController;\n    }\n\n    @java.lang.Override\n    public boolean isVisible() {\n        return getChild().determineVisibility();\n    }\n\n    @java.lang.Override\n    protected void onConfigure() {\n        super.onConfigure();\n        final org.apache.wicket.Component child = getChild();\n        child.configure();\n        boolean childVisible = child.determineVisibility();\n        setVisible(childVisible);\n    }\n\n    @java.lang.Override\n    protected void onDetach() {\n        super.onDetach();\n        childComponent = null;\n    }\n\n    protected org.apache.wicket.MarkupContainer getEnclosureParent() {\n        org.apache.wicket.MarkupContainer parent = getParent();\n        while ((parent != null) && parent.isAuto()) {\n            parent = parent.getParent();\n        } \n        if (parent == null) {\n            throw new org.apache.wicket.WicketRuntimeException(\"Unable to find parent component which is not a transparent resolver\");\n        }\n        return parent;\n    }\n\n    private org.apache.wicket.Component getChildComponent(final org.apache.wicket.markup.MarkupStream markupStream, org.apache.wicket.MarkupContainer enclosureParent) {\n        java.lang.String fullChildId = getChildId();\n        org.apache.wicket.Component controller = enclosureParent.get(fullChildId);\n        if (controller == null) {\n            int orgIndex = markupStream.getCurrentIndex();\n            try {\n                while (markupStream.hasMore()) {\n                    markupStream.next();\n                    if (markupStream.skipUntil(org.apache.wicket.markup.ComponentTag.class)) {\n                        org.apache.wicket.markup.ComponentTag tag = markupStream.getTag();\n                        if ((tag != null) && (tag.isOpen() || tag.isOpenClose())) {\n                            java.lang.String tagId = tag.getId();\n                            if (fullChildId.equals(tagId)) {\n                                org.apache.wicket.markup.ComponentTag fullComponentTag = new org.apache.wicket.markup.ComponentTag(tag);\n                                fullComponentTag.setId(childId.toString());\n                                controller = org.apache.wicket.markup.resolver.ComponentResolvers.resolve(enclosureParent, markupStream, fullComponentTag, new org.apache.wicket.markup.resolver.ComponentResolvers.ResolverFilter() {\n                                    @java.lang.Override\n                                    public boolean ignoreResolver(final org.apache.wicket.markup.resolver.IComponentResolver resolver) {\n                                        return resolver instanceof org.apache.wicket.markup.parser.filter.EnclosureHandler;\n                                    }\n                                });\n                                break;\n                            } else if (fullChildId.startsWith(tagId + PATH_SEPARATOR)) {\n                                fullChildId = org.apache.wicket.util.string.Strings.afterFirst(fullChildId, org.apache.wicket.markup.html.internal.PATH_SEPARATOR);\n                            }\n                        }\n                    }\n                } \n            } finally {\n                markupStream.setCurrentIndex(orgIndex);\n            }\n        }\n        checkChildComponent(controller);\n        return controller;\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer container, org.apache.wicket.markup.MarkupStream markupStream, org.apache.wicket.markup.ComponentTag tag) {\n        if (childId.equals(tag.getId())) {\n            return childComponent;\n        }\n        return getEnclosureParent().get(tag.getId());\n    }\n\n    private void checkChildComponent(final org.apache.wicket.Component controller) {\n        if (controller == null) {\n            throw new org.apache.wicket.WicketRuntimeException((\"Could not find child with id: \" + childId) + \" in the wicket:enclosure\");\n        } else if (controller == this) {\n            throw new org.apache.wicket.WicketRuntimeException(\"Programming error: childComponent == enclose component; endless loop\");\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.DequeueContext newDequeueContext() {\n        org.apache.wicket.markup.IMarkupFragment markup = getMarkupSourcingStrategy().getMarkup(this, null);\n        if (markup == null) {\n            return null;\n        }\n        return new org.apache.wicket.DequeueContext(markup, this, true);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "@java.lang.Override\npublic org.apache.wicket.DequeueContext newDequeueContext() {\n    org.apache.wicket.markup.IMarkupFragment markup = getMarkupSourcingStrategy().getMarkup(this, null);\n    if (markup == null) {\n        return null;\n    }\n    return new org.apache.wicket.DequeueContext(markup, this, true);\n}",
            "src_parent": "public class Enclosure extends org.apache.wicket.markup.html.WebMarkupContainer implements org.apache.wicket.markup.resolver.IComponentResolver {\n    private static final long serialVersionUID = 1L;\n\n    private org.apache.wicket.Component childComponent;\n\n    private final java.lang.String childId;\n\n    public Enclosure(final java.lang.String id, final java.lang.String childId) {\n        super(id);\n        if (childId == null) {\n            throw new org.apache.wicket.markup.MarkupException(\"You most likely forgot to register the EnclosureHandler with the MarkupParserFactory\");\n        }\n        this.childId = childId;\n    }\n\n    public final java.lang.String getChildId() {\n        return childId.toString();\n    }\n\n    protected final org.apache.wicket.Component getChild() {\n        if (childComponent == null) {\n            childComponent = resolveChild(this);\n        }\n        if (childComponent == null) {\n            childComponent = getChildComponent(new org.apache.wicket.markup.MarkupStream(getMarkup()), getEnclosureParent());\n        }\n        return childComponent;\n    }\n\n    private org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer container) {\n        org.apache.wicket.Component childController = container.get(childId);\n        java.util.Iterator<org.apache.wicket.Component> children = container.iterator();\n        while (children.hasNext() && (childController == null)) {\n            org.apache.wicket.Component transparentChild = children.next();\n            if (transparentChild instanceof org.apache.wicket.markup.html.TransparentWebMarkupContainer) {\n                childController = resolveChild(((org.apache.wicket.MarkupContainer) (transparentChild)));\n            }\n        } \n        return childController;\n    }\n\n    @java.lang.Override\n    public boolean isVisible() {\n        return getChild().determineVisibility();\n    }\n\n    @java.lang.Override\n    protected void onConfigure() {\n        super.onConfigure();\n        final org.apache.wicket.Component child = getChild();\n        child.configure();\n        boolean childVisible = child.determineVisibility();\n        setVisible(childVisible);\n    }\n\n    @java.lang.Override\n    protected void onDetach() {\n        super.onDetach();\n        childComponent = null;\n    }\n\n    protected org.apache.wicket.MarkupContainer getEnclosureParent() {\n        org.apache.wicket.MarkupContainer parent = getParent();\n        while ((parent != null) && parent.isAuto()) {\n            parent = parent.getParent();\n        } \n        if (parent == null) {\n            throw new org.apache.wicket.WicketRuntimeException(\"Unable to find parent component which is not a transparent resolver\");\n        }\n        return parent;\n    }\n\n    private org.apache.wicket.Component getChildComponent(final org.apache.wicket.markup.MarkupStream markupStream, org.apache.wicket.MarkupContainer enclosureParent) {\n        java.lang.String fullChildId = getChildId();\n        org.apache.wicket.Component controller = enclosureParent.get(fullChildId);\n        if (controller == null) {\n            int orgIndex = markupStream.getCurrentIndex();\n            try {\n                while (markupStream.hasMore()) {\n                    markupStream.next();\n                    if (markupStream.skipUntil(org.apache.wicket.markup.ComponentTag.class)) {\n                        org.apache.wicket.markup.ComponentTag tag = markupStream.getTag();\n                        if ((tag != null) && (tag.isOpen() || tag.isOpenClose())) {\n                            java.lang.String tagId = tag.getId();\n                            if (fullChildId.equals(tagId)) {\n                                org.apache.wicket.markup.ComponentTag fullComponentTag = new org.apache.wicket.markup.ComponentTag(tag);\n                                fullComponentTag.setId(childId.toString());\n                                controller = org.apache.wicket.markup.resolver.ComponentResolvers.resolve(enclosureParent, markupStream, fullComponentTag, new org.apache.wicket.markup.resolver.ComponentResolvers.ResolverFilter() {\n                                    @java.lang.Override\n                                    public boolean ignoreResolver(final org.apache.wicket.markup.resolver.IComponentResolver resolver) {\n                                        return resolver instanceof org.apache.wicket.markup.parser.filter.EnclosureHandler;\n                                    }\n                                });\n                                break;\n                            } else if (fullChildId.startsWith(tagId + PATH_SEPARATOR)) {\n                                fullChildId = org.apache.wicket.util.string.Strings.afterFirst(fullChildId, org.apache.wicket.markup.html.internal.PATH_SEPARATOR);\n                            }\n                        }\n                    }\n                } \n            } finally {\n                markupStream.setCurrentIndex(orgIndex);\n            }\n        }\n        checkChildComponent(controller);\n        return controller;\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer container, org.apache.wicket.markup.MarkupStream markupStream, org.apache.wicket.markup.ComponentTag tag) {\n        if (childId.equals(tag.getId())) {\n            return childComponent;\n        }\n        return getEnclosureParent().get(tag.getId());\n    }\n\n    private void checkChildComponent(final org.apache.wicket.Component controller) {\n        if (controller == null) {\n            throw new org.apache.wicket.WicketRuntimeException((\"Could not find child with id: \" + childId) + \" in the wicket:enclosure\");\n        } else if (controller == this) {\n            throw new org.apache.wicket.WicketRuntimeException(\"Programming error: childComponent == enclose component; endless loop\");\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.DequeueContext newDequeueContext() {\n        org.apache.wicket.markup.IMarkupFragment markup = getMarkupSourcingStrategy().getMarkup(this, null);\n        if (markup == null) {\n            return null;\n        }\n        return new org.apache.wicket.DequeueContext(markup, this, true);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "container",
            "src_parent": "container.get(childId)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "resolveChild(this)",
            "src_parent": "childComponent = resolveChild(this)",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "container.get(childId)",
            "dst_parent": "org.apache.wicket.Component childController = container.get(childId)",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "get(childId)",
            "src_parent": "childComponent = get(childId)",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "Enclosure"
    }
  ],
  "id": "wicket_86066852"
}