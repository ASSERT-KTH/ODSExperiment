{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "private void collectLocalChanges(java.util.Map<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>> committedLocally, java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> changes) {\n    for (java.lang.String property : com.google.common.collect.Sets.filter(doc.keySet(), org.apache.jackrabbit.oak.plugins.document.PROPERTY_OR_DELETED)) {\n        java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> splitMap = new java.util.TreeMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>(context.getRevisionComparator());\n        committedLocally.put(property, splitMap);\n        java.util.Map<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> valueMap = doc.getLocalMap(property);\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : valueMap.entrySet()) {\n            org.apache.jackrabbit.oak.plugins.document.Revision rev = entry.getKey();\n            if (rev.getClusterId() != context.getClusterId()) {\n                continue;\n            }\n            changes.add(rev);\n            if (doc.isCommitted(rev)) {\n                splitMap.put(rev, entry.getValue());\n            } else if (isGarbage(rev)) {\n                addGarbage(rev, property);\n            }\n        }\n    }\n}",
            "dst_parent": "class SplitOperations {\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.plugins.document.SplitOperations.class);\n\n    private static final int GARBAGE_LIMIT = java.lang.Integer.getInteger(\"oak.documentMK.garbage.limit\", 10000);\n\n    private static final org.apache.jackrabbit.oak.plugins.document.DocumentStore STORE = new org.apache.jackrabbit.oak.plugins.document.memory.MemoryDocumentStore();\n\n    private final org.apache.jackrabbit.oak.plugins.document.NodeDocument doc;\n\n    private final java.lang.String path;\n\n    private final java.lang.String id;\n\n    private final org.apache.jackrabbit.oak.plugins.document.RevisionContext context;\n\n    private org.apache.jackrabbit.oak.plugins.document.Revision high;\n\n    private org.apache.jackrabbit.oak.plugins.document.Revision low;\n\n    private int numValues;\n\n    private java.util.Map<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>> committedChanges;\n\n    private java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> changes;\n\n    private java.util.Map<java.lang.String, java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision>> garbage;\n\n    private int garbageCount = 0;\n\n    private java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> mostRecentRevs;\n\n    private java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> splitRevs;\n\n    private java.util.List<org.apache.jackrabbit.oak.plugins.document.UpdateOp> splitOps;\n\n    private org.apache.jackrabbit.oak.plugins.document.UpdateOp main;\n\n    private SplitOperations(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument doc, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.RevisionContext context) {\n        this.doc = com.google.common.base.Preconditions.checkNotNull(doc);\n        this.context = com.google.common.base.Preconditions.checkNotNull(context);\n        this.path = doc.getPath();\n        this.id = doc.getId();\n    }\n\n    @javax.annotation.Nonnull\n    static java.util.List<org.apache.jackrabbit.oak.plugins.document.UpdateOp> forDocument(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument doc, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.RevisionContext context) {\n        if (doc.isSplitDocument()) {\n            throw new java.lang.IllegalArgumentException(\"Not a main document: \" + doc.getId());\n        }\n        return new org.apache.jackrabbit.oak.plugins.document.SplitOperations(doc, context).create();\n    }\n\n    private java.util.List<org.apache.jackrabbit.oak.plugins.document.UpdateOp> create() {\n        if (!considerSplit()) {\n            return java.util.Collections.emptyList();\n        }\n        splitOps = com.google.common.collect.Lists.newArrayList();\n        mostRecentRevs = com.google.common.collect.Sets.newHashSet();\n        splitRevs = com.google.common.collect.Sets.newHashSet();\n        garbage = com.google.common.collect.Maps.newHashMap();\n        changes = com.google.common.collect.Sets.newHashSet();\n        committedChanges = com.google.common.collect.Maps.newHashMap();\n        collectLocalChanges(committedChanges, changes);\n        populateSplitRevs();\n        collectRevisionsAndCommitRoot();\n        main = createSplitOps();\n        createIntermediateDocs();\n        disconnectStalePrevDocs();\n        removeGarbage();\n        if (main != null) {\n            splitOps.add(main);\n        }\n        return splitOps;\n    }\n\n    private boolean considerSplit() {\n        java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, org.apache.jackrabbit.oak.plugins.document.Range> previous = doc.getPreviousRanges();\n        return ((((doc.getLocalRevisions().size() + doc.getLocalCommitRoot().size()) > org.apache.jackrabbit.oak.plugins.document.NodeDocument.NUM_REVS_THRESHOLD) || (doc.getMemory() >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.DOC_SIZE_THRESHOLD)) || (previous.size() >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.PREV_SPLIT_FACTOR)) || (!doc.getStalePrev().isEmpty());\n    }\n\n    private void populateSplitRevs() {\n        for (java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> splitMap : committedChanges.values()) {\n            if (!splitMap.isEmpty()) {\n                org.apache.jackrabbit.oak.plugins.document.Revision r = splitMap.lastKey();\n                splitMap.remove(r);\n                splitRevs.addAll(splitMap.keySet());\n                mostRecentRevs.add(r);\n            }\n            if (splitMap.isEmpty()) {\n                continue;\n            }\n            trackHigh(splitMap.lastKey());\n            trackLow(splitMap.firstKey());\n            numValues += splitMap.size();\n        }\n    }\n\n    private void collectRevisionsAndCommitRoot() {\n        java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> revisions = new java.util.TreeMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>(context.getRevisionComparator());\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : doc.getLocalRevisions().entrySet()) {\n            if (splitRevs.contains(entry.getKey())) {\n                revisions.put(entry.getKey(), entry.getValue());\n                numValues++;\n            } else {\n                if (context.getClusterId() != entry.getKey().getClusterId()) {\n                    continue;\n                }\n                if (doc.isCommitted(entry.getKey()) && (!mostRecentRevs.contains(entry.getKey()))) {\n                    revisions.put(entry.getKey(), entry.getValue());\n                    numValues++;\n                    trackHigh(entry.getKey());\n                    trackLow(entry.getKey());\n                }\n            }\n        }\n        committedChanges.put(org.apache.jackrabbit.oak.plugins.document.NodeDocument.REVISIONS, revisions);\n        java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> commitRoot = new java.util.TreeMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>(context.getRevisionComparator());\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : doc.getLocalCommitRoot().entrySet()) {\n            org.apache.jackrabbit.oak.plugins.document.Revision r = entry.getKey();\n            if (splitRevs.contains(r)) {\n                commitRoot.put(r, entry.getValue());\n                numValues++;\n            } else if ((r.getClusterId() == context.getClusterId()) && (!changes.contains(r))) {\n                addGarbage(r, org.apache.jackrabbit.oak.plugins.document.NodeDocument.COMMIT_ROOT);\n            }\n        }\n        committedChanges.put(org.apache.jackrabbit.oak.plugins.document.NodeDocument.COMMIT_ROOT, commitRoot);\n    }\n\n    private void createIntermediateDocs() {\n        java.util.Map<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Range>> prevHisto = getPreviousDocsHistogram();\n        for (java.util.Map.Entry<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Range>> entry : prevHisto.entrySet()) {\n            if (entry.getValue().size() >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.PREV_SPLIT_FACTOR) {\n                if (main == null) {\n                    main = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(id, false);\n                }\n                org.apache.jackrabbit.oak.plugins.document.Revision h = null;\n                org.apache.jackrabbit.oak.plugins.document.Revision l = null;\n                for (org.apache.jackrabbit.oak.plugins.document.Range r : entry.getValue()) {\n                    if ((h == null) || isRevisionNewer(context, r.high, h)) {\n                        h = r.high;\n                    }\n                    if ((l == null) || isRevisionNewer(context, l, r.low)) {\n                        l = r.low;\n                    }\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removePrevious(main, r);\n                }\n                if ((h == null) || (l == null)) {\n                    throw new java.lang.IllegalStateException();\n                }\n                java.lang.String prevPath = org.apache.jackrabbit.oak.plugins.document.util.Utils.getPreviousPathFor(path, h, entry.getKey() + 1);\n                java.lang.String prevId = org.apache.jackrabbit.oak.plugins.document.util.Utils.getIdFromPath(prevPath);\n                org.apache.jackrabbit.oak.plugins.document.UpdateOp intermediate = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(prevId, true);\n                intermediate.set(Document.ID, prevId);\n                if (org.apache.jackrabbit.oak.plugins.document.util.Utils.isLongPath(prevPath)) {\n                    intermediate.set(NodeDocument.PATH, prevPath);\n                }\n                org.apache.jackrabbit.oak.plugins.document.NodeDocument.setPrevious(main, new org.apache.jackrabbit.oak.plugins.document.Range(h, l, entry.getKey() + 1));\n                for (org.apache.jackrabbit.oak.plugins.document.Range r : entry.getValue()) {\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.setPrevious(intermediate, r);\n                }\n                org.apache.jackrabbit.oak.plugins.document.SplitOperations.setIntermediateDocProps(intermediate, h);\n                splitOps.add(intermediate);\n            }\n        }\n    }\n\n    @javax.annotation.CheckForNull\n    private org.apache.jackrabbit.oak.plugins.document.UpdateOp createSplitOps() {\n        org.apache.jackrabbit.oak.plugins.document.UpdateOp main = null;\n        if (((high != null) && (low != null)) && ((numValues >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.NUM_REVS_THRESHOLD) || (doc.getMemory() > org.apache.jackrabbit.oak.plugins.document.NodeDocument.DOC_SIZE_THRESHOLD))) {\n            main = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(id, false);\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.setPrevious(main, new org.apache.jackrabbit.oak.plugins.document.Range(high, low, 0));\n            java.lang.String oldPath = org.apache.jackrabbit.oak.plugins.document.util.Utils.getPreviousPathFor(path, high, 0);\n            org.apache.jackrabbit.oak.plugins.document.UpdateOp old = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(org.apache.jackrabbit.oak.plugins.document.util.Utils.getIdFromPath(oldPath), true);\n            old.set(Document.ID, old.getId());\n            if (org.apache.jackrabbit.oak.plugins.document.util.Utils.isLongPath(oldPath)) {\n                old.set(NodeDocument.PATH, oldPath);\n            }\n            for (java.lang.String property : committedChanges.keySet()) {\n                java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> splitMap = committedChanges.get(property);\n                for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : splitMap.entrySet()) {\n                    org.apache.jackrabbit.oak.plugins.document.Revision r = entry.getKey();\n                    if (org.apache.jackrabbit.oak.plugins.document.NodeDocument.isRevisionsEntry(property) || org.apache.jackrabbit.oak.plugins.document.NodeDocument.isCommitRootEntry(property)) {\n                        if (!mostRecentRevs.contains(r)) {\n                            main.removeMapEntry(property, r);\n                        }\n                    } else {\n                        main.removeMapEntry(property, r);\n                    }\n                    old.setMapEntry(property, r, entry.getValue());\n                }\n            }\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument oldDoc = new org.apache.jackrabbit.oak.plugins.document.NodeDocument(org.apache.jackrabbit.oak.plugins.document.SplitOperations.STORE);\n            org.apache.jackrabbit.oak.plugins.document.UpdateUtils.applyChanges(oldDoc, old, context.getRevisionComparator());\n            org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocProps(doc, oldDoc, old, high);\n            if ((oldDoc.getMemory() > (doc.getMemory() * org.apache.jackrabbit.oak.plugins.document.NodeDocument.SPLIT_RATIO)) || (numValues >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.NUM_REVS_THRESHOLD)) {\n                splitOps.add(old);\n            } else {\n                main = null;\n            }\n        }\n        return main;\n    }\n\n    private java.util.Map<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Range>> getPreviousDocsHistogram() {\n        java.util.Map<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Range>> prevHisto = com.google.common.collect.Maps.newHashMap();\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, org.apache.jackrabbit.oak.plugins.document.Range> entry : doc.getPreviousRanges().entrySet()) {\n            org.apache.jackrabbit.oak.plugins.document.Revision rev = entry.getKey();\n            if (rev.getClusterId() != context.getClusterId()) {\n                continue;\n            }\n            org.apache.jackrabbit.oak.plugins.document.Range r = entry.getValue();\n            java.util.List<org.apache.jackrabbit.oak.plugins.document.Range> list = prevHisto.get(r.getHeight());\n            if (list == null) {\n                list = new java.util.ArrayList<org.apache.jackrabbit.oak.plugins.document.Range>();\n                prevHisto.put(r.getHeight(), list);\n            }\n            list.add(r);\n        }\n        return prevHisto;\n    }\n\n    private void collectLocalChanges(java.util.Map<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>> committedLocally, java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> changes) {\n        for (java.lang.String property : com.google.common.collect.Sets.filter(doc.keySet(), org.apache.jackrabbit.oak.plugins.document.PROPERTY_OR_DELETED)) {\n            java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> splitMap = new java.util.TreeMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>(context.getRevisionComparator());\n            committedLocally.put(property, splitMap);\n            java.util.Map<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> valueMap = doc.getLocalMap(property);\n            for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : valueMap.entrySet()) {\n                org.apache.jackrabbit.oak.plugins.document.Revision rev = entry.getKey();\n                if (rev.getClusterId() != context.getClusterId()) {\n                    continue;\n                }\n                changes.add(rev);\n                if (doc.isCommitted(rev)) {\n                    splitMap.put(rev, entry.getValue());\n                } else if (isGarbage(rev)) {\n                    addGarbage(rev, property);\n                }\n            }\n        }\n    }\n\n    private boolean isGarbage(org.apache.jackrabbit.oak.plugins.document.Revision rev) {\n        org.apache.jackrabbit.oak.plugins.document.Revision head = context.getHeadRevision();\n        java.util.Comparator<org.apache.jackrabbit.oak.plugins.document.Revision> comp = context.getRevisionComparator();\n        if (comp.compare(head, rev) <= 0) {\n            return false;\n        }\n        return context.getBranches().getBranchCommit(rev) == null;\n    }\n\n    private void addGarbage(org.apache.jackrabbit.oak.plugins.document.Revision rev, java.lang.String property) {\n        if (garbageCount > org.apache.jackrabbit.oak.plugins.document.SplitOperations.GARBAGE_LIMIT) {\n            return;\n        }\n        java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> revisions = garbage.get(property);\n        if (revisions == null) {\n            revisions = com.google.common.collect.Sets.newHashSet();\n            garbage.put(property, revisions);\n        }\n        if (revisions.add(rev)) {\n            garbageCount++;\n        }\n    }\n\n    private void disconnectStalePrevDocs() {\n        java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, org.apache.jackrabbit.oak.plugins.document.Range> ranges = doc.getPreviousRanges(true);\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : doc.getStalePrev().entrySet()) {\n            org.apache.jackrabbit.oak.plugins.document.Revision r = entry.getKey();\n            if (r.getClusterId() != context.getClusterId()) {\n                continue;\n            }\n            if (main == null) {\n                main = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(id, false);\n            }\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeStalePrevious(main, r);\n            if (ranges.containsKey(r) && entry.getValue().equals(java.lang.String.valueOf(ranges.get(r).height))) {\n                org.apache.jackrabbit.oak.plugins.document.NodeDocument.removePrevious(main, r);\n            } else {\n                int height = java.lang.Integer.parseInt(entry.getValue());\n                org.apache.jackrabbit.oak.plugins.document.NodeDocument intermediate = doc.findPrevReferencingDoc(r, height);\n                if (intermediate == null) {\n                    org.apache.jackrabbit.oak.plugins.document.SplitOperations.LOG.warn(\"Split document {} not referenced anymore. Main document is {}\", getPreviousIdFor(doc.getPath(), r, height), id);\n                } else {\n                    org.apache.jackrabbit.oak.plugins.document.UpdateOp op = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(intermediate.getId(), false);\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removePrevious(op, r);\n                    splitOps.add(op);\n                }\n            }\n        }\n    }\n\n    private void removeGarbage() {\n        if (garbage.isEmpty()) {\n            return;\n        } else if (main == null) {\n            main = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(id, false);\n        }\n        for (java.util.Map.Entry<java.lang.String, java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision>> entry : garbage.entrySet()) {\n            for (org.apache.jackrabbit.oak.plugins.document.Revision r : entry.getValue()) {\n                main.removeMapEntry(entry.getKey(), r);\n                if (org.apache.jackrabbit.oak.plugins.document.PROPERTY_OR_DELETED.apply(entry.getKey())) {\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeCommitRoot(main, r);\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeRevision(main, r);\n                }\n            }\n        }\n    }\n\n    private void trackHigh(org.apache.jackrabbit.oak.plugins.document.Revision r) {\n        if ((high == null) || isRevisionNewer(context, r, high)) {\n            high = r;\n        }\n    }\n\n    private void trackLow(org.apache.jackrabbit.oak.plugins.document.Revision r) {\n        if ((low == null) || isRevisionNewer(context, low, r)) {\n            low = r;\n        }\n    }\n\n    private static void setSplitDocProps(org.apache.jackrabbit.oak.plugins.document.NodeDocument mainDoc, org.apache.jackrabbit.oak.plugins.document.NodeDocument oldDoc, org.apache.jackrabbit.oak.plugins.document.UpdateOp old, org.apache.jackrabbit.oak.plugins.document.Revision maxRev) {\n        org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocMaxRev(old, maxRev);\n        org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType type = org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType.DEFAULT;\n        if (!mainDoc.hasChildren()) {\n            type = org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType.DEFAULT_LEAF;\n        } else if (oldDoc.getLocalRevisions().isEmpty()) {\n            type = org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType.COMMIT_ROOT_ONLY;\n        }\n        if (mainDoc.hasBinary()) {\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.setHasBinary(old);\n        }\n        org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocType(old, type);\n    }\n\n    private static void setIntermediateDocProps(org.apache.jackrabbit.oak.plugins.document.UpdateOp intermediate, org.apache.jackrabbit.oak.plugins.document.Revision maxRev) {\n        org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocMaxRev(intermediate, maxRev);\n        org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocType(intermediate, SplitDocType.INTERMEDIATE);\n    }\n\n    private static void setSplitDocType(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.UpdateOp op, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType type) {\n        com.google.common.base.Preconditions.checkNotNull(op).set(NodeDocument.SD_TYPE, type.type);\n    }\n\n    private static void setSplitDocMaxRev(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.UpdateOp op, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.Revision maxRev) {\n        com.google.common.base.Preconditions.checkNotNull(op).set(NodeDocument.SD_MAX_REV_TIME_IN_SECS, org.apache.jackrabbit.oak.plugins.document.NodeDocument.getModifiedInSecs(maxRev.getTimestamp()));\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "@javax.annotation.Nonnull\nprivate java.util.Map<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>> getCommittedLocalChanges() {\n    java.util.Map<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>> committedLocally = new java.util.HashMap<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>>();\n    for (java.lang.String property : com.google.common.collect.Sets.filter(doc.keySet(), org.apache.jackrabbit.oak.plugins.document.PROPERTY_OR_DELETED)) {\n        java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> splitMap = new java.util.TreeMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>(context.getRevisionComparator());\n        committedLocally.put(property, splitMap);\n        java.util.Map<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> valueMap = doc.getLocalMap(property);\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : valueMap.entrySet()) {\n            org.apache.jackrabbit.oak.plugins.document.Revision rev = entry.getKey();\n            if (rev.getClusterId() != context.getClusterId()) {\n                continue;\n            }\n            if (doc.isCommitted(rev)) {\n                splitMap.put(rev, entry.getValue());\n            } else if (isGarbage(rev)) {\n                addGarbage(rev, property);\n            }\n        }\n    }\n    return committedLocally;\n}",
            "src_parent": "class SplitOperations {\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.plugins.document.SplitOperations.class);\n\n    private static final org.apache.jackrabbit.oak.plugins.document.DocumentStore STORE = new org.apache.jackrabbit.oak.plugins.document.memory.MemoryDocumentStore();\n\n    private final org.apache.jackrabbit.oak.plugins.document.NodeDocument doc;\n\n    private final java.lang.String path;\n\n    private final java.lang.String id;\n\n    private final org.apache.jackrabbit.oak.plugins.document.RevisionContext context;\n\n    private org.apache.jackrabbit.oak.plugins.document.Revision high;\n\n    private org.apache.jackrabbit.oak.plugins.document.Revision low;\n\n    private int numValues;\n\n    private java.util.Map<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>> committedChanges;\n\n    private java.util.Map<java.lang.String, java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision>> garbage;\n\n    private java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> mostRecentRevs;\n\n    private java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> splitRevs;\n\n    private java.util.List<org.apache.jackrabbit.oak.plugins.document.UpdateOp> splitOps;\n\n    private org.apache.jackrabbit.oak.plugins.document.UpdateOp main;\n\n    private SplitOperations(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument doc, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.RevisionContext context) {\n        this.doc = com.google.common.base.Preconditions.checkNotNull(doc);\n        this.context = com.google.common.base.Preconditions.checkNotNull(context);\n        this.path = doc.getPath();\n        this.id = doc.getId();\n    }\n\n    @javax.annotation.Nonnull\n    static java.util.List<org.apache.jackrabbit.oak.plugins.document.UpdateOp> forDocument(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument doc, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.RevisionContext context) {\n        if (doc.isSplitDocument()) {\n            throw new java.lang.IllegalArgumentException(\"Not a main document: \" + doc.getId());\n        }\n        return new org.apache.jackrabbit.oak.plugins.document.SplitOperations(doc, context).create();\n    }\n\n    private java.util.List<org.apache.jackrabbit.oak.plugins.document.UpdateOp> create() {\n        if (!considerSplit()) {\n            return java.util.Collections.emptyList();\n        }\n        splitOps = com.google.common.collect.Lists.newArrayList();\n        mostRecentRevs = com.google.common.collect.Sets.newHashSet();\n        splitRevs = com.google.common.collect.Sets.newHashSet();\n        garbage = com.google.common.collect.Maps.newHashMap();\n        committedChanges = getCommittedLocalChanges();\n        populateSplitRevs();\n        collectRevisionsAndCommitRoot();\n        main = createSplitOps();\n        createIntermediateDocs();\n        disconnectStalePrevDocs();\n        removeGarbage();\n        if (main != null) {\n            splitOps.add(main);\n        }\n        return splitOps;\n    }\n\n    private boolean considerSplit() {\n        java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, org.apache.jackrabbit.oak.plugins.document.Range> previous = doc.getPreviousRanges();\n        return ((((doc.getLocalRevisions().size() + doc.getLocalCommitRoot().size()) > org.apache.jackrabbit.oak.plugins.document.NodeDocument.NUM_REVS_THRESHOLD) || (doc.getMemory() >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.DOC_SIZE_THRESHOLD)) || (previous.size() >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.PREV_SPLIT_FACTOR)) || (!doc.getStalePrev().isEmpty());\n    }\n\n    private void populateSplitRevs() {\n        for (java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> splitMap : committedChanges.values()) {\n            if (!splitMap.isEmpty()) {\n                org.apache.jackrabbit.oak.plugins.document.Revision r = splitMap.lastKey();\n                splitMap.remove(r);\n                splitRevs.addAll(splitMap.keySet());\n                mostRecentRevs.add(r);\n            }\n            if (splitMap.isEmpty()) {\n                continue;\n            }\n            trackHigh(splitMap.lastKey());\n            trackLow(splitMap.firstKey());\n            numValues += splitMap.size();\n        }\n    }\n\n    private void collectRevisionsAndCommitRoot() {\n        java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> revisions = new java.util.TreeMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>(context.getRevisionComparator());\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : doc.getLocalRevisions().entrySet()) {\n            if (splitRevs.contains(entry.getKey())) {\n                revisions.put(entry.getKey(), entry.getValue());\n                numValues++;\n            } else {\n                if (context.getClusterId() != entry.getKey().getClusterId()) {\n                    continue;\n                }\n                if (doc.isCommitted(entry.getKey()) && (!mostRecentRevs.contains(entry.getKey()))) {\n                    revisions.put(entry.getKey(), entry.getValue());\n                    numValues++;\n                    trackHigh(entry.getKey());\n                    trackLow(entry.getKey());\n                }\n            }\n        }\n        committedChanges.put(org.apache.jackrabbit.oak.plugins.document.NodeDocument.REVISIONS, revisions);\n        java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> commitRoot = new java.util.TreeMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>(context.getRevisionComparator());\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : doc.getLocalCommitRoot().entrySet()) {\n            if (splitRevs.contains(entry.getKey())) {\n                commitRoot.put(entry.getKey(), entry.getValue());\n                numValues++;\n            }\n        }\n        committedChanges.put(org.apache.jackrabbit.oak.plugins.document.NodeDocument.COMMIT_ROOT, commitRoot);\n    }\n\n    private void createIntermediateDocs() {\n        java.util.Map<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Range>> prevHisto = getPreviousDocsHistogram();\n        for (java.util.Map.Entry<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Range>> entry : prevHisto.entrySet()) {\n            if (entry.getValue().size() >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.PREV_SPLIT_FACTOR) {\n                if (main == null) {\n                    main = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(id, false);\n                }\n                org.apache.jackrabbit.oak.plugins.document.Revision h = null;\n                org.apache.jackrabbit.oak.plugins.document.Revision l = null;\n                for (org.apache.jackrabbit.oak.plugins.document.Range r : entry.getValue()) {\n                    if ((h == null) || isRevisionNewer(context, r.high, h)) {\n                        h = r.high;\n                    }\n                    if ((l == null) || isRevisionNewer(context, l, r.low)) {\n                        l = r.low;\n                    }\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removePrevious(main, r);\n                }\n                if ((h == null) || (l == null)) {\n                    throw new java.lang.IllegalStateException();\n                }\n                java.lang.String prevPath = org.apache.jackrabbit.oak.plugins.document.util.Utils.getPreviousPathFor(path, h, entry.getKey() + 1);\n                java.lang.String prevId = org.apache.jackrabbit.oak.plugins.document.util.Utils.getIdFromPath(prevPath);\n                org.apache.jackrabbit.oak.plugins.document.UpdateOp intermediate = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(prevId, true);\n                intermediate.set(Document.ID, prevId);\n                if (org.apache.jackrabbit.oak.plugins.document.util.Utils.isLongPath(prevPath)) {\n                    intermediate.set(NodeDocument.PATH, prevPath);\n                }\n                org.apache.jackrabbit.oak.plugins.document.NodeDocument.setPrevious(main, new org.apache.jackrabbit.oak.plugins.document.Range(h, l, entry.getKey() + 1));\n                for (org.apache.jackrabbit.oak.plugins.document.Range r : entry.getValue()) {\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.setPrevious(intermediate, r);\n                }\n                org.apache.jackrabbit.oak.plugins.document.SplitOperations.setIntermediateDocProps(intermediate, h);\n                splitOps.add(intermediate);\n            }\n        }\n    }\n\n    @javax.annotation.CheckForNull\n    private org.apache.jackrabbit.oak.plugins.document.UpdateOp createSplitOps() {\n        org.apache.jackrabbit.oak.plugins.document.UpdateOp main = null;\n        if (((high != null) && (low != null)) && ((numValues >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.NUM_REVS_THRESHOLD) || (doc.getMemory() > org.apache.jackrabbit.oak.plugins.document.NodeDocument.DOC_SIZE_THRESHOLD))) {\n            main = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(id, false);\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.setPrevious(main, new org.apache.jackrabbit.oak.plugins.document.Range(high, low, 0));\n            java.lang.String oldPath = org.apache.jackrabbit.oak.plugins.document.util.Utils.getPreviousPathFor(path, high, 0);\n            org.apache.jackrabbit.oak.plugins.document.UpdateOp old = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(org.apache.jackrabbit.oak.plugins.document.util.Utils.getIdFromPath(oldPath), true);\n            old.set(Document.ID, old.getId());\n            if (org.apache.jackrabbit.oak.plugins.document.util.Utils.isLongPath(oldPath)) {\n                old.set(NodeDocument.PATH, oldPath);\n            }\n            for (java.lang.String property : committedChanges.keySet()) {\n                java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> splitMap = committedChanges.get(property);\n                for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : splitMap.entrySet()) {\n                    org.apache.jackrabbit.oak.plugins.document.Revision r = entry.getKey();\n                    if (org.apache.jackrabbit.oak.plugins.document.NodeDocument.isRevisionsEntry(property) || org.apache.jackrabbit.oak.plugins.document.NodeDocument.isCommitRootEntry(property)) {\n                        if (!mostRecentRevs.contains(r)) {\n                            main.removeMapEntry(property, r);\n                        }\n                    } else {\n                        main.removeMapEntry(property, r);\n                    }\n                    old.setMapEntry(property, r, entry.getValue());\n                }\n            }\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument oldDoc = new org.apache.jackrabbit.oak.plugins.document.NodeDocument(org.apache.jackrabbit.oak.plugins.document.SplitOperations.STORE);\n            org.apache.jackrabbit.oak.plugins.document.UpdateUtils.applyChanges(oldDoc, old, context.getRevisionComparator());\n            org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocProps(doc, oldDoc, old, high);\n            if ((oldDoc.getMemory() > (doc.getMemory() * org.apache.jackrabbit.oak.plugins.document.NodeDocument.SPLIT_RATIO)) || (numValues >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.NUM_REVS_THRESHOLD)) {\n                splitOps.add(old);\n            } else {\n                main = null;\n            }\n        }\n        return main;\n    }\n\n    private java.util.Map<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Range>> getPreviousDocsHistogram() {\n        java.util.Map<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Range>> prevHisto = com.google.common.collect.Maps.newHashMap();\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, org.apache.jackrabbit.oak.plugins.document.Range> entry : doc.getPreviousRanges().entrySet()) {\n            org.apache.jackrabbit.oak.plugins.document.Revision rev = entry.getKey();\n            if (rev.getClusterId() != context.getClusterId()) {\n                continue;\n            }\n            org.apache.jackrabbit.oak.plugins.document.Range r = entry.getValue();\n            java.util.List<org.apache.jackrabbit.oak.plugins.document.Range> list = prevHisto.get(r.getHeight());\n            if (list == null) {\n                list = new java.util.ArrayList<org.apache.jackrabbit.oak.plugins.document.Range>();\n                prevHisto.put(r.getHeight(), list);\n            }\n            list.add(r);\n        }\n        return prevHisto;\n    }\n\n    @javax.annotation.Nonnull\n    private java.util.Map<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>> getCommittedLocalChanges() {\n        java.util.Map<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>> committedLocally = new java.util.HashMap<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>>();\n        for (java.lang.String property : com.google.common.collect.Sets.filter(doc.keySet(), org.apache.jackrabbit.oak.plugins.document.PROPERTY_OR_DELETED)) {\n            java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> splitMap = new java.util.TreeMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>(context.getRevisionComparator());\n            committedLocally.put(property, splitMap);\n            java.util.Map<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> valueMap = doc.getLocalMap(property);\n            for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : valueMap.entrySet()) {\n                org.apache.jackrabbit.oak.plugins.document.Revision rev = entry.getKey();\n                if (rev.getClusterId() != context.getClusterId()) {\n                    continue;\n                }\n                if (doc.isCommitted(rev)) {\n                    splitMap.put(rev, entry.getValue());\n                } else if (isGarbage(rev)) {\n                    addGarbage(rev, property);\n                }\n            }\n        }\n        return committedLocally;\n    }\n\n    private boolean isGarbage(org.apache.jackrabbit.oak.plugins.document.Revision rev) {\n        org.apache.jackrabbit.oak.plugins.document.Revision head = context.getHeadRevision();\n        java.util.Comparator<org.apache.jackrabbit.oak.plugins.document.Revision> comp = context.getRevisionComparator();\n        if (comp.compare(head, rev) <= 0) {\n            return false;\n        }\n        return context.getBranches().getBranchCommit(rev) == null;\n    }\n\n    private void addGarbage(org.apache.jackrabbit.oak.plugins.document.Revision rev, java.lang.String property) {\n        java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> revisions = garbage.get(property);\n        if (revisions == null) {\n            revisions = com.google.common.collect.Sets.newHashSet();\n            garbage.put(property, revisions);\n        }\n        revisions.add(rev);\n    }\n\n    private void disconnectStalePrevDocs() {\n        java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, org.apache.jackrabbit.oak.plugins.document.Range> ranges = doc.getPreviousRanges(true);\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : doc.getStalePrev().entrySet()) {\n            org.apache.jackrabbit.oak.plugins.document.Revision r = entry.getKey();\n            if (r.getClusterId() != context.getClusterId()) {\n                continue;\n            }\n            if (main == null) {\n                main = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(id, false);\n            }\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeStalePrevious(main, r);\n            if (ranges.containsKey(r) && entry.getValue().equals(java.lang.String.valueOf(ranges.get(r).height))) {\n                org.apache.jackrabbit.oak.plugins.document.NodeDocument.removePrevious(main, r);\n            } else {\n                int height = java.lang.Integer.parseInt(entry.getValue());\n                org.apache.jackrabbit.oak.plugins.document.NodeDocument intermediate = doc.findPrevReferencingDoc(r, height);\n                if (intermediate == null) {\n                    org.apache.jackrabbit.oak.plugins.document.SplitOperations.LOG.warn(\"Split document {} not referenced anymore. Main document is {}\", getPreviousIdFor(doc.getPath(), r, height), id);\n                } else {\n                    org.apache.jackrabbit.oak.plugins.document.UpdateOp op = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(intermediate.getId(), false);\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removePrevious(op, r);\n                    splitOps.add(op);\n                }\n            }\n        }\n    }\n\n    private void removeGarbage() {\n        if (garbage.isEmpty()) {\n            return;\n        } else if (main == null) {\n            main = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(id, false);\n        }\n        for (java.util.Map.Entry<java.lang.String, java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision>> entry : garbage.entrySet()) {\n            for (org.apache.jackrabbit.oak.plugins.document.Revision r : entry.getValue()) {\n                main.removeMapEntry(entry.getKey(), r);\n                org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeCommitRoot(main, r);\n                org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeRevision(main, r);\n            }\n        }\n    }\n\n    private void trackHigh(org.apache.jackrabbit.oak.plugins.document.Revision r) {\n        if ((high == null) || isRevisionNewer(context, r, high)) {\n            high = r;\n        }\n    }\n\n    private void trackLow(org.apache.jackrabbit.oak.plugins.document.Revision r) {\n        if ((low == null) || isRevisionNewer(context, low, r)) {\n            low = r;\n        }\n    }\n\n    private static void setSplitDocProps(org.apache.jackrabbit.oak.plugins.document.NodeDocument mainDoc, org.apache.jackrabbit.oak.plugins.document.NodeDocument oldDoc, org.apache.jackrabbit.oak.plugins.document.UpdateOp old, org.apache.jackrabbit.oak.plugins.document.Revision maxRev) {\n        org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocMaxRev(old, maxRev);\n        org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType type = org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType.DEFAULT;\n        if (!mainDoc.hasChildren()) {\n            type = org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType.DEFAULT_LEAF;\n        } else if (oldDoc.getLocalRevisions().isEmpty()) {\n            type = org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType.COMMIT_ROOT_ONLY;\n        }\n        if (mainDoc.hasBinary()) {\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.setHasBinary(old);\n        }\n        org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocType(old, type);\n    }\n\n    private static void setIntermediateDocProps(org.apache.jackrabbit.oak.plugins.document.UpdateOp intermediate, org.apache.jackrabbit.oak.plugins.document.Revision maxRev) {\n        org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocMaxRev(intermediate, maxRev);\n        org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocType(intermediate, SplitDocType.INTERMEDIATE);\n    }\n\n    private static void setSplitDocType(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.UpdateOp op, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType type) {\n        com.google.common.base.Preconditions.checkNotNull(op).set(NodeDocument.SD_TYPE, type.type);\n    }\n\n    private static void setSplitDocMaxRev(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.UpdateOp op, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.Revision maxRev) {\n        com.google.common.base.Preconditions.checkNotNull(op).set(NodeDocument.SD_MAX_REV_TIME_IN_SECS, org.apache.jackrabbit.oak.plugins.document.NodeDocument.getModifiedInSecs(maxRev.getTimestamp()));\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "void",
            "dst_parent": "private void collectLocalChanges(java.util.Map<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>> committedLocally, java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> changes) {\n    for (java.lang.String property : com.google.common.collect.Sets.filter(doc.keySet(), org.apache.jackrabbit.oak.plugins.document.PROPERTY_OR_DELETED)) {\n        java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> splitMap = new java.util.TreeMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>(context.getRevisionComparator());\n        committedLocally.put(property, splitMap);\n        java.util.Map<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> valueMap = doc.getLocalMap(property);\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : valueMap.entrySet()) {\n            org.apache.jackrabbit.oak.plugins.document.Revision rev = entry.getKey();\n            if (rev.getClusterId() != context.getClusterId()) {\n                continue;\n            }\n            changes.add(rev);\n            if (doc.isCommitted(rev)) {\n                splitMap.put(rev, entry.getValue());\n            } else if (isGarbage(rev)) {\n                addGarbage(rev, property);\n            }\n        }\n    }\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.util.Map<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>>",
            "src_parent": "@javax.annotation.Nonnull\nprivate java.util.Map<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>> getCommittedLocalChanges() {\n    java.util.Map<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>> committedLocally = new java.util.HashMap<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>>();\n    for (java.lang.String property : com.google.common.collect.Sets.filter(doc.keySet(), org.apache.jackrabbit.oak.plugins.document.PROPERTY_OR_DELETED)) {\n        java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> splitMap = new java.util.TreeMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>(context.getRevisionComparator());\n        committedLocally.put(property, splitMap);\n        java.util.Map<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> valueMap = doc.getLocalMap(property);\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : valueMap.entrySet()) {\n            org.apache.jackrabbit.oak.plugins.document.Revision rev = entry.getKey();\n            if (rev.getClusterId() != context.getClusterId()) {\n                continue;\n            }\n            if (doc.isCommitted(rev)) {\n                splitMap.put(rev, entry.getValue());\n            } else if (isGarbage(rev)) {\n                addGarbage(rev, property);\n            }\n        }\n    }\n    return committedLocally;\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.collect.Sets.newHashSet()",
            "dst_parent": "changes = com.google.common.collect.Sets.newHashSet()",
            "dst_parent_type": "Assignment",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "getCommittedLocalChanges()",
            "src_parent": "committedChanges = getCommittedLocalChanges()",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.collect.Sets",
            "dst_parent": "com.google.common.collect.Sets.newHashSet()",
            "dst_parent_type": "Invocation",
            "dst_type": "TypeAccess",
            "operator": "UPD",
            "src": "org.apache.jackrabbit.oak.plugins.document.SplitOperations",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static final int GARBAGE_LIMIT = java.lang.Integer.getInteger(\"oak.documentMK.garbage.limit\", 10000);",
            "src_parent": "class SplitOperations {\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.plugins.document.SplitOperations.class);\n\n    private static final int GARBAGE_LIMIT = java.lang.Integer.getInteger(\"oak.documentMK.garbage.limit\", 10000);\n\n    private static final org.apache.jackrabbit.oak.plugins.document.DocumentStore STORE = new org.apache.jackrabbit.oak.plugins.document.memory.MemoryDocumentStore();\n\n    private final org.apache.jackrabbit.oak.plugins.document.NodeDocument doc;\n\n    private final java.lang.String path;\n\n    private final java.lang.String id;\n\n    private final org.apache.jackrabbit.oak.plugins.document.RevisionContext context;\n\n    private org.apache.jackrabbit.oak.plugins.document.Revision high;\n\n    private org.apache.jackrabbit.oak.plugins.document.Revision low;\n\n    private int numValues;\n\n    private java.util.Map<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>> committedChanges;\n\n    private java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> changes;\n\n    private java.util.Map<java.lang.String, java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision>> garbage;\n\n    private int garbageCount = 0;\n\n    private java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> mostRecentRevs;\n\n    private java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> splitRevs;\n\n    private java.util.List<org.apache.jackrabbit.oak.plugins.document.UpdateOp> splitOps;\n\n    private org.apache.jackrabbit.oak.plugins.document.UpdateOp main;\n\n    private SplitOperations(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument doc, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.RevisionContext context) {\n        this.doc = com.google.common.base.Preconditions.checkNotNull(doc);\n        this.context = com.google.common.base.Preconditions.checkNotNull(context);\n        this.path = doc.getPath();\n        this.id = doc.getId();\n    }\n\n    @javax.annotation.Nonnull\n    static java.util.List<org.apache.jackrabbit.oak.plugins.document.UpdateOp> forDocument(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument doc, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.RevisionContext context) {\n        if (doc.isSplitDocument()) {\n            throw new java.lang.IllegalArgumentException(\"Not a main document: \" + doc.getId());\n        }\n        return new org.apache.jackrabbit.oak.plugins.document.SplitOperations(doc, context).create();\n    }\n\n    private java.util.List<org.apache.jackrabbit.oak.plugins.document.UpdateOp> create() {\n        if (!considerSplit()) {\n            return java.util.Collections.emptyList();\n        }\n        splitOps = com.google.common.collect.Lists.newArrayList();\n        mostRecentRevs = com.google.common.collect.Sets.newHashSet();\n        splitRevs = com.google.common.collect.Sets.newHashSet();\n        garbage = com.google.common.collect.Maps.newHashMap();\n        changes = com.google.common.collect.Sets.newHashSet();\n        committedChanges = com.google.common.collect.Maps.newHashMap();\n        collectLocalChanges(committedChanges, changes);\n        populateSplitRevs();\n        collectRevisionsAndCommitRoot();\n        main = createSplitOps();\n        createIntermediateDocs();\n        disconnectStalePrevDocs();\n        removeGarbage();\n        if (main != null) {\n            splitOps.add(main);\n        }\n        return splitOps;\n    }\n\n    private boolean considerSplit() {\n        java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, org.apache.jackrabbit.oak.plugins.document.Range> previous = doc.getPreviousRanges();\n        return ((((doc.getLocalRevisions().size() + doc.getLocalCommitRoot().size()) > org.apache.jackrabbit.oak.plugins.document.NodeDocument.NUM_REVS_THRESHOLD) || (doc.getMemory() >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.DOC_SIZE_THRESHOLD)) || (previous.size() >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.PREV_SPLIT_FACTOR)) || (!doc.getStalePrev().isEmpty());\n    }\n\n    private void populateSplitRevs() {\n        for (java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> splitMap : committedChanges.values()) {\n            if (!splitMap.isEmpty()) {\n                org.apache.jackrabbit.oak.plugins.document.Revision r = splitMap.lastKey();\n                splitMap.remove(r);\n                splitRevs.addAll(splitMap.keySet());\n                mostRecentRevs.add(r);\n            }\n            if (splitMap.isEmpty()) {\n                continue;\n            }\n            trackHigh(splitMap.lastKey());\n            trackLow(splitMap.firstKey());\n            numValues += splitMap.size();\n        }\n    }\n\n    private void collectRevisionsAndCommitRoot() {\n        java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> revisions = new java.util.TreeMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>(context.getRevisionComparator());\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : doc.getLocalRevisions().entrySet()) {\n            if (splitRevs.contains(entry.getKey())) {\n                revisions.put(entry.getKey(), entry.getValue());\n                numValues++;\n            } else {\n                if (context.getClusterId() != entry.getKey().getClusterId()) {\n                    continue;\n                }\n                if (doc.isCommitted(entry.getKey()) && (!mostRecentRevs.contains(entry.getKey()))) {\n                    revisions.put(entry.getKey(), entry.getValue());\n                    numValues++;\n                    trackHigh(entry.getKey());\n                    trackLow(entry.getKey());\n                }\n            }\n        }\n        committedChanges.put(org.apache.jackrabbit.oak.plugins.document.NodeDocument.REVISIONS, revisions);\n        java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> commitRoot = new java.util.TreeMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>(context.getRevisionComparator());\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : doc.getLocalCommitRoot().entrySet()) {\n            org.apache.jackrabbit.oak.plugins.document.Revision r = entry.getKey();\n            if (splitRevs.contains(r)) {\n                commitRoot.put(r, entry.getValue());\n                numValues++;\n            } else if ((r.getClusterId() == context.getClusterId()) && (!changes.contains(r))) {\n                addGarbage(r, org.apache.jackrabbit.oak.plugins.document.NodeDocument.COMMIT_ROOT);\n            }\n        }\n        committedChanges.put(org.apache.jackrabbit.oak.plugins.document.NodeDocument.COMMIT_ROOT, commitRoot);\n    }\n\n    private void createIntermediateDocs() {\n        java.util.Map<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Range>> prevHisto = getPreviousDocsHistogram();\n        for (java.util.Map.Entry<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Range>> entry : prevHisto.entrySet()) {\n            if (entry.getValue().size() >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.PREV_SPLIT_FACTOR) {\n                if (main == null) {\n                    main = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(id, false);\n                }\n                org.apache.jackrabbit.oak.plugins.document.Revision h = null;\n                org.apache.jackrabbit.oak.plugins.document.Revision l = null;\n                for (org.apache.jackrabbit.oak.plugins.document.Range r : entry.getValue()) {\n                    if ((h == null) || isRevisionNewer(context, r.high, h)) {\n                        h = r.high;\n                    }\n                    if ((l == null) || isRevisionNewer(context, l, r.low)) {\n                        l = r.low;\n                    }\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removePrevious(main, r);\n                }\n                if ((h == null) || (l == null)) {\n                    throw new java.lang.IllegalStateException();\n                }\n                java.lang.String prevPath = org.apache.jackrabbit.oak.plugins.document.util.Utils.getPreviousPathFor(path, h, entry.getKey() + 1);\n                java.lang.String prevId = org.apache.jackrabbit.oak.plugins.document.util.Utils.getIdFromPath(prevPath);\n                org.apache.jackrabbit.oak.plugins.document.UpdateOp intermediate = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(prevId, true);\n                intermediate.set(Document.ID, prevId);\n                if (org.apache.jackrabbit.oak.plugins.document.util.Utils.isLongPath(prevPath)) {\n                    intermediate.set(NodeDocument.PATH, prevPath);\n                }\n                org.apache.jackrabbit.oak.plugins.document.NodeDocument.setPrevious(main, new org.apache.jackrabbit.oak.plugins.document.Range(h, l, entry.getKey() + 1));\n                for (org.apache.jackrabbit.oak.plugins.document.Range r : entry.getValue()) {\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.setPrevious(intermediate, r);\n                }\n                org.apache.jackrabbit.oak.plugins.document.SplitOperations.setIntermediateDocProps(intermediate, h);\n                splitOps.add(intermediate);\n            }\n        }\n    }\n\n    @javax.annotation.CheckForNull\n    private org.apache.jackrabbit.oak.plugins.document.UpdateOp createSplitOps() {\n        org.apache.jackrabbit.oak.plugins.document.UpdateOp main = null;\n        if (((high != null) && (low != null)) && ((numValues >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.NUM_REVS_THRESHOLD) || (doc.getMemory() > org.apache.jackrabbit.oak.plugins.document.NodeDocument.DOC_SIZE_THRESHOLD))) {\n            main = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(id, false);\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.setPrevious(main, new org.apache.jackrabbit.oak.plugins.document.Range(high, low, 0));\n            java.lang.String oldPath = org.apache.jackrabbit.oak.plugins.document.util.Utils.getPreviousPathFor(path, high, 0);\n            org.apache.jackrabbit.oak.plugins.document.UpdateOp old = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(org.apache.jackrabbit.oak.plugins.document.util.Utils.getIdFromPath(oldPath), true);\n            old.set(Document.ID, old.getId());\n            if (org.apache.jackrabbit.oak.plugins.document.util.Utils.isLongPath(oldPath)) {\n                old.set(NodeDocument.PATH, oldPath);\n            }\n            for (java.lang.String property : committedChanges.keySet()) {\n                java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> splitMap = committedChanges.get(property);\n                for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : splitMap.entrySet()) {\n                    org.apache.jackrabbit.oak.plugins.document.Revision r = entry.getKey();\n                    if (org.apache.jackrabbit.oak.plugins.document.NodeDocument.isRevisionsEntry(property) || org.apache.jackrabbit.oak.plugins.document.NodeDocument.isCommitRootEntry(property)) {\n                        if (!mostRecentRevs.contains(r)) {\n                            main.removeMapEntry(property, r);\n                        }\n                    } else {\n                        main.removeMapEntry(property, r);\n                    }\n                    old.setMapEntry(property, r, entry.getValue());\n                }\n            }\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument oldDoc = new org.apache.jackrabbit.oak.plugins.document.NodeDocument(org.apache.jackrabbit.oak.plugins.document.SplitOperations.STORE);\n            org.apache.jackrabbit.oak.plugins.document.UpdateUtils.applyChanges(oldDoc, old, context.getRevisionComparator());\n            org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocProps(doc, oldDoc, old, high);\n            if ((oldDoc.getMemory() > (doc.getMemory() * org.apache.jackrabbit.oak.plugins.document.NodeDocument.SPLIT_RATIO)) || (numValues >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.NUM_REVS_THRESHOLD)) {\n                splitOps.add(old);\n            } else {\n                main = null;\n            }\n        }\n        return main;\n    }\n\n    private java.util.Map<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Range>> getPreviousDocsHistogram() {\n        java.util.Map<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Range>> prevHisto = com.google.common.collect.Maps.newHashMap();\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, org.apache.jackrabbit.oak.plugins.document.Range> entry : doc.getPreviousRanges().entrySet()) {\n            org.apache.jackrabbit.oak.plugins.document.Revision rev = entry.getKey();\n            if (rev.getClusterId() != context.getClusterId()) {\n                continue;\n            }\n            org.apache.jackrabbit.oak.plugins.document.Range r = entry.getValue();\n            java.util.List<org.apache.jackrabbit.oak.plugins.document.Range> list = prevHisto.get(r.getHeight());\n            if (list == null) {\n                list = new java.util.ArrayList<org.apache.jackrabbit.oak.plugins.document.Range>();\n                prevHisto.put(r.getHeight(), list);\n            }\n            list.add(r);\n        }\n        return prevHisto;\n    }\n\n    private void collectLocalChanges(java.util.Map<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>> committedLocally, java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> changes) {\n        for (java.lang.String property : com.google.common.collect.Sets.filter(doc.keySet(), org.apache.jackrabbit.oak.plugins.document.PROPERTY_OR_DELETED)) {\n            java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> splitMap = new java.util.TreeMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>(context.getRevisionComparator());\n            committedLocally.put(property, splitMap);\n            java.util.Map<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> valueMap = doc.getLocalMap(property);\n            for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : valueMap.entrySet()) {\n                org.apache.jackrabbit.oak.plugins.document.Revision rev = entry.getKey();\n                if (rev.getClusterId() != context.getClusterId()) {\n                    continue;\n                }\n                changes.add(rev);\n                if (doc.isCommitted(rev)) {\n                    splitMap.put(rev, entry.getValue());\n                } else if (isGarbage(rev)) {\n                    addGarbage(rev, property);\n                }\n            }\n        }\n    }\n\n    private boolean isGarbage(org.apache.jackrabbit.oak.plugins.document.Revision rev) {\n        org.apache.jackrabbit.oak.plugins.document.Revision head = context.getHeadRevision();\n        java.util.Comparator<org.apache.jackrabbit.oak.plugins.document.Revision> comp = context.getRevisionComparator();\n        if (comp.compare(head, rev) <= 0) {\n            return false;\n        }\n        return context.getBranches().getBranchCommit(rev) == null;\n    }\n\n    private void addGarbage(org.apache.jackrabbit.oak.plugins.document.Revision rev, java.lang.String property) {\n        if (garbageCount > org.apache.jackrabbit.oak.plugins.document.SplitOperations.GARBAGE_LIMIT) {\n            return;\n        }\n        java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> revisions = garbage.get(property);\n        if (revisions == null) {\n            revisions = com.google.common.collect.Sets.newHashSet();\n            garbage.put(property, revisions);\n        }\n        if (revisions.add(rev)) {\n            garbageCount++;\n        }\n    }\n\n    private void disconnectStalePrevDocs() {\n        java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, org.apache.jackrabbit.oak.plugins.document.Range> ranges = doc.getPreviousRanges(true);\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : doc.getStalePrev().entrySet()) {\n            org.apache.jackrabbit.oak.plugins.document.Revision r = entry.getKey();\n            if (r.getClusterId() != context.getClusterId()) {\n                continue;\n            }\n            if (main == null) {\n                main = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(id, false);\n            }\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeStalePrevious(main, r);\n            if (ranges.containsKey(r) && entry.getValue().equals(java.lang.String.valueOf(ranges.get(r).height))) {\n                org.apache.jackrabbit.oak.plugins.document.NodeDocument.removePrevious(main, r);\n            } else {\n                int height = java.lang.Integer.parseInt(entry.getValue());\n                org.apache.jackrabbit.oak.plugins.document.NodeDocument intermediate = doc.findPrevReferencingDoc(r, height);\n                if (intermediate == null) {\n                    org.apache.jackrabbit.oak.plugins.document.SplitOperations.LOG.warn(\"Split document {} not referenced anymore. Main document is {}\", getPreviousIdFor(doc.getPath(), r, height), id);\n                } else {\n                    org.apache.jackrabbit.oak.plugins.document.UpdateOp op = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(intermediate.getId(), false);\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removePrevious(op, r);\n                    splitOps.add(op);\n                }\n            }\n        }\n    }\n\n    private void removeGarbage() {\n        if (garbage.isEmpty()) {\n            return;\n        } else if (main == null) {\n            main = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(id, false);\n        }\n        for (java.util.Map.Entry<java.lang.String, java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision>> entry : garbage.entrySet()) {\n            for (org.apache.jackrabbit.oak.plugins.document.Revision r : entry.getValue()) {\n                main.removeMapEntry(entry.getKey(), r);\n                if (org.apache.jackrabbit.oak.plugins.document.PROPERTY_OR_DELETED.apply(entry.getKey())) {\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeCommitRoot(main, r);\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeRevision(main, r);\n                }\n            }\n        }\n    }\n\n    private void trackHigh(org.apache.jackrabbit.oak.plugins.document.Revision r) {\n        if ((high == null) || isRevisionNewer(context, r, high)) {\n            high = r;\n        }\n    }\n\n    private void trackLow(org.apache.jackrabbit.oak.plugins.document.Revision r) {\n        if ((low == null) || isRevisionNewer(context, low, r)) {\n            low = r;\n        }\n    }\n\n    private static void setSplitDocProps(org.apache.jackrabbit.oak.plugins.document.NodeDocument mainDoc, org.apache.jackrabbit.oak.plugins.document.NodeDocument oldDoc, org.apache.jackrabbit.oak.plugins.document.UpdateOp old, org.apache.jackrabbit.oak.plugins.document.Revision maxRev) {\n        org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocMaxRev(old, maxRev);\n        org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType type = org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType.DEFAULT;\n        if (!mainDoc.hasChildren()) {\n            type = org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType.DEFAULT_LEAF;\n        } else if (oldDoc.getLocalRevisions().isEmpty()) {\n            type = org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType.COMMIT_ROOT_ONLY;\n        }\n        if (mainDoc.hasBinary()) {\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.setHasBinary(old);\n        }\n        org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocType(old, type);\n    }\n\n    private static void setIntermediateDocProps(org.apache.jackrabbit.oak.plugins.document.UpdateOp intermediate, org.apache.jackrabbit.oak.plugins.document.Revision maxRev) {\n        org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocMaxRev(intermediate, maxRev);\n        org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocType(intermediate, SplitDocType.INTERMEDIATE);\n    }\n\n    private static void setSplitDocType(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.UpdateOp op, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType type) {\n        com.google.common.base.Preconditions.checkNotNull(op).set(NodeDocument.SD_TYPE, type.type);\n    }\n\n    private static void setSplitDocMaxRev(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.UpdateOp op, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.Revision maxRev) {\n        com.google.common.base.Preconditions.checkNotNull(op).set(NodeDocument.SD_MAX_REV_TIME_IN_SECS, org.apache.jackrabbit.oak.plugins.document.NodeDocument.getModifiedInSecs(maxRev.getTimestamp()));\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> changes;",
            "src_parent": "class SplitOperations {\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.plugins.document.SplitOperations.class);\n\n    private static final int GARBAGE_LIMIT = java.lang.Integer.getInteger(\"oak.documentMK.garbage.limit\", 10000);\n\n    private static final org.apache.jackrabbit.oak.plugins.document.DocumentStore STORE = new org.apache.jackrabbit.oak.plugins.document.memory.MemoryDocumentStore();\n\n    private final org.apache.jackrabbit.oak.plugins.document.NodeDocument doc;\n\n    private final java.lang.String path;\n\n    private final java.lang.String id;\n\n    private final org.apache.jackrabbit.oak.plugins.document.RevisionContext context;\n\n    private org.apache.jackrabbit.oak.plugins.document.Revision high;\n\n    private org.apache.jackrabbit.oak.plugins.document.Revision low;\n\n    private int numValues;\n\n    private java.util.Map<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>> committedChanges;\n\n    private java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> changes;\n\n    private java.util.Map<java.lang.String, java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision>> garbage;\n\n    private int garbageCount = 0;\n\n    private java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> mostRecentRevs;\n\n    private java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> splitRevs;\n\n    private java.util.List<org.apache.jackrabbit.oak.plugins.document.UpdateOp> splitOps;\n\n    private org.apache.jackrabbit.oak.plugins.document.UpdateOp main;\n\n    private SplitOperations(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument doc, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.RevisionContext context) {\n        this.doc = com.google.common.base.Preconditions.checkNotNull(doc);\n        this.context = com.google.common.base.Preconditions.checkNotNull(context);\n        this.path = doc.getPath();\n        this.id = doc.getId();\n    }\n\n    @javax.annotation.Nonnull\n    static java.util.List<org.apache.jackrabbit.oak.plugins.document.UpdateOp> forDocument(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument doc, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.RevisionContext context) {\n        if (doc.isSplitDocument()) {\n            throw new java.lang.IllegalArgumentException(\"Not a main document: \" + doc.getId());\n        }\n        return new org.apache.jackrabbit.oak.plugins.document.SplitOperations(doc, context).create();\n    }\n\n    private java.util.List<org.apache.jackrabbit.oak.plugins.document.UpdateOp> create() {\n        if (!considerSplit()) {\n            return java.util.Collections.emptyList();\n        }\n        splitOps = com.google.common.collect.Lists.newArrayList();\n        mostRecentRevs = com.google.common.collect.Sets.newHashSet();\n        splitRevs = com.google.common.collect.Sets.newHashSet();\n        garbage = com.google.common.collect.Maps.newHashMap();\n        changes = com.google.common.collect.Sets.newHashSet();\n        committedChanges = com.google.common.collect.Maps.newHashMap();\n        collectLocalChanges(committedChanges, changes);\n        populateSplitRevs();\n        collectRevisionsAndCommitRoot();\n        main = createSplitOps();\n        createIntermediateDocs();\n        disconnectStalePrevDocs();\n        removeGarbage();\n        if (main != null) {\n            splitOps.add(main);\n        }\n        return splitOps;\n    }\n\n    private boolean considerSplit() {\n        java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, org.apache.jackrabbit.oak.plugins.document.Range> previous = doc.getPreviousRanges();\n        return ((((doc.getLocalRevisions().size() + doc.getLocalCommitRoot().size()) > org.apache.jackrabbit.oak.plugins.document.NodeDocument.NUM_REVS_THRESHOLD) || (doc.getMemory() >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.DOC_SIZE_THRESHOLD)) || (previous.size() >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.PREV_SPLIT_FACTOR)) || (!doc.getStalePrev().isEmpty());\n    }\n\n    private void populateSplitRevs() {\n        for (java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> splitMap : committedChanges.values()) {\n            if (!splitMap.isEmpty()) {\n                org.apache.jackrabbit.oak.plugins.document.Revision r = splitMap.lastKey();\n                splitMap.remove(r);\n                splitRevs.addAll(splitMap.keySet());\n                mostRecentRevs.add(r);\n            }\n            if (splitMap.isEmpty()) {\n                continue;\n            }\n            trackHigh(splitMap.lastKey());\n            trackLow(splitMap.firstKey());\n            numValues += splitMap.size();\n        }\n    }\n\n    private void collectRevisionsAndCommitRoot() {\n        java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> revisions = new java.util.TreeMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>(context.getRevisionComparator());\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : doc.getLocalRevisions().entrySet()) {\n            if (splitRevs.contains(entry.getKey())) {\n                revisions.put(entry.getKey(), entry.getValue());\n                numValues++;\n            } else {\n                if (context.getClusterId() != entry.getKey().getClusterId()) {\n                    continue;\n                }\n                if (doc.isCommitted(entry.getKey()) && (!mostRecentRevs.contains(entry.getKey()))) {\n                    revisions.put(entry.getKey(), entry.getValue());\n                    numValues++;\n                    trackHigh(entry.getKey());\n                    trackLow(entry.getKey());\n                }\n            }\n        }\n        committedChanges.put(org.apache.jackrabbit.oak.plugins.document.NodeDocument.REVISIONS, revisions);\n        java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> commitRoot = new java.util.TreeMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>(context.getRevisionComparator());\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : doc.getLocalCommitRoot().entrySet()) {\n            org.apache.jackrabbit.oak.plugins.document.Revision r = entry.getKey();\n            if (splitRevs.contains(r)) {\n                commitRoot.put(r, entry.getValue());\n                numValues++;\n            } else if ((r.getClusterId() == context.getClusterId()) && (!changes.contains(r))) {\n                addGarbage(r, org.apache.jackrabbit.oak.plugins.document.NodeDocument.COMMIT_ROOT);\n            }\n        }\n        committedChanges.put(org.apache.jackrabbit.oak.plugins.document.NodeDocument.COMMIT_ROOT, commitRoot);\n    }\n\n    private void createIntermediateDocs() {\n        java.util.Map<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Range>> prevHisto = getPreviousDocsHistogram();\n        for (java.util.Map.Entry<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Range>> entry : prevHisto.entrySet()) {\n            if (entry.getValue().size() >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.PREV_SPLIT_FACTOR) {\n                if (main == null) {\n                    main = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(id, false);\n                }\n                org.apache.jackrabbit.oak.plugins.document.Revision h = null;\n                org.apache.jackrabbit.oak.plugins.document.Revision l = null;\n                for (org.apache.jackrabbit.oak.plugins.document.Range r : entry.getValue()) {\n                    if ((h == null) || isRevisionNewer(context, r.high, h)) {\n                        h = r.high;\n                    }\n                    if ((l == null) || isRevisionNewer(context, l, r.low)) {\n                        l = r.low;\n                    }\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removePrevious(main, r);\n                }\n                if ((h == null) || (l == null)) {\n                    throw new java.lang.IllegalStateException();\n                }\n                java.lang.String prevPath = org.apache.jackrabbit.oak.plugins.document.util.Utils.getPreviousPathFor(path, h, entry.getKey() + 1);\n                java.lang.String prevId = org.apache.jackrabbit.oak.plugins.document.util.Utils.getIdFromPath(prevPath);\n                org.apache.jackrabbit.oak.plugins.document.UpdateOp intermediate = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(prevId, true);\n                intermediate.set(Document.ID, prevId);\n                if (org.apache.jackrabbit.oak.plugins.document.util.Utils.isLongPath(prevPath)) {\n                    intermediate.set(NodeDocument.PATH, prevPath);\n                }\n                org.apache.jackrabbit.oak.plugins.document.NodeDocument.setPrevious(main, new org.apache.jackrabbit.oak.plugins.document.Range(h, l, entry.getKey() + 1));\n                for (org.apache.jackrabbit.oak.plugins.document.Range r : entry.getValue()) {\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.setPrevious(intermediate, r);\n                }\n                org.apache.jackrabbit.oak.plugins.document.SplitOperations.setIntermediateDocProps(intermediate, h);\n                splitOps.add(intermediate);\n            }\n        }\n    }\n\n    @javax.annotation.CheckForNull\n    private org.apache.jackrabbit.oak.plugins.document.UpdateOp createSplitOps() {\n        org.apache.jackrabbit.oak.plugins.document.UpdateOp main = null;\n        if (((high != null) && (low != null)) && ((numValues >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.NUM_REVS_THRESHOLD) || (doc.getMemory() > org.apache.jackrabbit.oak.plugins.document.NodeDocument.DOC_SIZE_THRESHOLD))) {\n            main = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(id, false);\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.setPrevious(main, new org.apache.jackrabbit.oak.plugins.document.Range(high, low, 0));\n            java.lang.String oldPath = org.apache.jackrabbit.oak.plugins.document.util.Utils.getPreviousPathFor(path, high, 0);\n            org.apache.jackrabbit.oak.plugins.document.UpdateOp old = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(org.apache.jackrabbit.oak.plugins.document.util.Utils.getIdFromPath(oldPath), true);\n            old.set(Document.ID, old.getId());\n            if (org.apache.jackrabbit.oak.plugins.document.util.Utils.isLongPath(oldPath)) {\n                old.set(NodeDocument.PATH, oldPath);\n            }\n            for (java.lang.String property : committedChanges.keySet()) {\n                java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> splitMap = committedChanges.get(property);\n                for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : splitMap.entrySet()) {\n                    org.apache.jackrabbit.oak.plugins.document.Revision r = entry.getKey();\n                    if (org.apache.jackrabbit.oak.plugins.document.NodeDocument.isRevisionsEntry(property) || org.apache.jackrabbit.oak.plugins.document.NodeDocument.isCommitRootEntry(property)) {\n                        if (!mostRecentRevs.contains(r)) {\n                            main.removeMapEntry(property, r);\n                        }\n                    } else {\n                        main.removeMapEntry(property, r);\n                    }\n                    old.setMapEntry(property, r, entry.getValue());\n                }\n            }\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument oldDoc = new org.apache.jackrabbit.oak.plugins.document.NodeDocument(org.apache.jackrabbit.oak.plugins.document.SplitOperations.STORE);\n            org.apache.jackrabbit.oak.plugins.document.UpdateUtils.applyChanges(oldDoc, old, context.getRevisionComparator());\n            org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocProps(doc, oldDoc, old, high);\n            if ((oldDoc.getMemory() > (doc.getMemory() * org.apache.jackrabbit.oak.plugins.document.NodeDocument.SPLIT_RATIO)) || (numValues >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.NUM_REVS_THRESHOLD)) {\n                splitOps.add(old);\n            } else {\n                main = null;\n            }\n        }\n        return main;\n    }\n\n    private java.util.Map<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Range>> getPreviousDocsHistogram() {\n        java.util.Map<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Range>> prevHisto = com.google.common.collect.Maps.newHashMap();\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, org.apache.jackrabbit.oak.plugins.document.Range> entry : doc.getPreviousRanges().entrySet()) {\n            org.apache.jackrabbit.oak.plugins.document.Revision rev = entry.getKey();\n            if (rev.getClusterId() != context.getClusterId()) {\n                continue;\n            }\n            org.apache.jackrabbit.oak.plugins.document.Range r = entry.getValue();\n            java.util.List<org.apache.jackrabbit.oak.plugins.document.Range> list = prevHisto.get(r.getHeight());\n            if (list == null) {\n                list = new java.util.ArrayList<org.apache.jackrabbit.oak.plugins.document.Range>();\n                prevHisto.put(r.getHeight(), list);\n            }\n            list.add(r);\n        }\n        return prevHisto;\n    }\n\n    private void collectLocalChanges(java.util.Map<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>> committedLocally, java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> changes) {\n        for (java.lang.String property : com.google.common.collect.Sets.filter(doc.keySet(), org.apache.jackrabbit.oak.plugins.document.PROPERTY_OR_DELETED)) {\n            java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> splitMap = new java.util.TreeMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>(context.getRevisionComparator());\n            committedLocally.put(property, splitMap);\n            java.util.Map<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> valueMap = doc.getLocalMap(property);\n            for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : valueMap.entrySet()) {\n                org.apache.jackrabbit.oak.plugins.document.Revision rev = entry.getKey();\n                if (rev.getClusterId() != context.getClusterId()) {\n                    continue;\n                }\n                changes.add(rev);\n                if (doc.isCommitted(rev)) {\n                    splitMap.put(rev, entry.getValue());\n                } else if (isGarbage(rev)) {\n                    addGarbage(rev, property);\n                }\n            }\n        }\n    }\n\n    private boolean isGarbage(org.apache.jackrabbit.oak.plugins.document.Revision rev) {\n        org.apache.jackrabbit.oak.plugins.document.Revision head = context.getHeadRevision();\n        java.util.Comparator<org.apache.jackrabbit.oak.plugins.document.Revision> comp = context.getRevisionComparator();\n        if (comp.compare(head, rev) <= 0) {\n            return false;\n        }\n        return context.getBranches().getBranchCommit(rev) == null;\n    }\n\n    private void addGarbage(org.apache.jackrabbit.oak.plugins.document.Revision rev, java.lang.String property) {\n        if (garbageCount > org.apache.jackrabbit.oak.plugins.document.SplitOperations.GARBAGE_LIMIT) {\n            return;\n        }\n        java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> revisions = garbage.get(property);\n        if (revisions == null) {\n            revisions = com.google.common.collect.Sets.newHashSet();\n            garbage.put(property, revisions);\n        }\n        if (revisions.add(rev)) {\n            garbageCount++;\n        }\n    }\n\n    private void disconnectStalePrevDocs() {\n        java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, org.apache.jackrabbit.oak.plugins.document.Range> ranges = doc.getPreviousRanges(true);\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : doc.getStalePrev().entrySet()) {\n            org.apache.jackrabbit.oak.plugins.document.Revision r = entry.getKey();\n            if (r.getClusterId() != context.getClusterId()) {\n                continue;\n            }\n            if (main == null) {\n                main = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(id, false);\n            }\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeStalePrevious(main, r);\n            if (ranges.containsKey(r) && entry.getValue().equals(java.lang.String.valueOf(ranges.get(r).height))) {\n                org.apache.jackrabbit.oak.plugins.document.NodeDocument.removePrevious(main, r);\n            } else {\n                int height = java.lang.Integer.parseInt(entry.getValue());\n                org.apache.jackrabbit.oak.plugins.document.NodeDocument intermediate = doc.findPrevReferencingDoc(r, height);\n                if (intermediate == null) {\n                    org.apache.jackrabbit.oak.plugins.document.SplitOperations.LOG.warn(\"Split document {} not referenced anymore. Main document is {}\", getPreviousIdFor(doc.getPath(), r, height), id);\n                } else {\n                    org.apache.jackrabbit.oak.plugins.document.UpdateOp op = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(intermediate.getId(), false);\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removePrevious(op, r);\n                    splitOps.add(op);\n                }\n            }\n        }\n    }\n\n    private void removeGarbage() {\n        if (garbage.isEmpty()) {\n            return;\n        } else if (main == null) {\n            main = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(id, false);\n        }\n        for (java.util.Map.Entry<java.lang.String, java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision>> entry : garbage.entrySet()) {\n            for (org.apache.jackrabbit.oak.plugins.document.Revision r : entry.getValue()) {\n                main.removeMapEntry(entry.getKey(), r);\n                if (org.apache.jackrabbit.oak.plugins.document.PROPERTY_OR_DELETED.apply(entry.getKey())) {\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeCommitRoot(main, r);\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeRevision(main, r);\n                }\n            }\n        }\n    }\n\n    private void trackHigh(org.apache.jackrabbit.oak.plugins.document.Revision r) {\n        if ((high == null) || isRevisionNewer(context, r, high)) {\n            high = r;\n        }\n    }\n\n    private void trackLow(org.apache.jackrabbit.oak.plugins.document.Revision r) {\n        if ((low == null) || isRevisionNewer(context, low, r)) {\n            low = r;\n        }\n    }\n\n    private static void setSplitDocProps(org.apache.jackrabbit.oak.plugins.document.NodeDocument mainDoc, org.apache.jackrabbit.oak.plugins.document.NodeDocument oldDoc, org.apache.jackrabbit.oak.plugins.document.UpdateOp old, org.apache.jackrabbit.oak.plugins.document.Revision maxRev) {\n        org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocMaxRev(old, maxRev);\n        org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType type = org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType.DEFAULT;\n        if (!mainDoc.hasChildren()) {\n            type = org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType.DEFAULT_LEAF;\n        } else if (oldDoc.getLocalRevisions().isEmpty()) {\n            type = org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType.COMMIT_ROOT_ONLY;\n        }\n        if (mainDoc.hasBinary()) {\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.setHasBinary(old);\n        }\n        org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocType(old, type);\n    }\n\n    private static void setIntermediateDocProps(org.apache.jackrabbit.oak.plugins.document.UpdateOp intermediate, org.apache.jackrabbit.oak.plugins.document.Revision maxRev) {\n        org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocMaxRev(intermediate, maxRev);\n        org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocType(intermediate, SplitDocType.INTERMEDIATE);\n    }\n\n    private static void setSplitDocType(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.UpdateOp op, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType type) {\n        com.google.common.base.Preconditions.checkNotNull(op).set(NodeDocument.SD_TYPE, type.type);\n    }\n\n    private static void setSplitDocMaxRev(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.UpdateOp op, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.Revision maxRev) {\n        com.google.common.base.Preconditions.checkNotNull(op).set(NodeDocument.SD_MAX_REV_TIME_IN_SECS, org.apache.jackrabbit.oak.plugins.document.NodeDocument.getModifiedInSecs(maxRev.getTimestamp()));\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private int garbageCount = 0;",
            "src_parent": "class SplitOperations {\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.plugins.document.SplitOperations.class);\n\n    private static final int GARBAGE_LIMIT = java.lang.Integer.getInteger(\"oak.documentMK.garbage.limit\", 10000);\n\n    private static final org.apache.jackrabbit.oak.plugins.document.DocumentStore STORE = new org.apache.jackrabbit.oak.plugins.document.memory.MemoryDocumentStore();\n\n    private final org.apache.jackrabbit.oak.plugins.document.NodeDocument doc;\n\n    private final java.lang.String path;\n\n    private final java.lang.String id;\n\n    private final org.apache.jackrabbit.oak.plugins.document.RevisionContext context;\n\n    private org.apache.jackrabbit.oak.plugins.document.Revision high;\n\n    private org.apache.jackrabbit.oak.plugins.document.Revision low;\n\n    private int numValues;\n\n    private java.util.Map<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>> committedChanges;\n\n    private java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> changes;\n\n    private java.util.Map<java.lang.String, java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision>> garbage;\n\n    private int garbageCount = 0;\n\n    private java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> mostRecentRevs;\n\n    private java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> splitRevs;\n\n    private java.util.List<org.apache.jackrabbit.oak.plugins.document.UpdateOp> splitOps;\n\n    private org.apache.jackrabbit.oak.plugins.document.UpdateOp main;\n\n    private SplitOperations(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument doc, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.RevisionContext context) {\n        this.doc = com.google.common.base.Preconditions.checkNotNull(doc);\n        this.context = com.google.common.base.Preconditions.checkNotNull(context);\n        this.path = doc.getPath();\n        this.id = doc.getId();\n    }\n\n    @javax.annotation.Nonnull\n    static java.util.List<org.apache.jackrabbit.oak.plugins.document.UpdateOp> forDocument(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument doc, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.RevisionContext context) {\n        if (doc.isSplitDocument()) {\n            throw new java.lang.IllegalArgumentException(\"Not a main document: \" + doc.getId());\n        }\n        return new org.apache.jackrabbit.oak.plugins.document.SplitOperations(doc, context).create();\n    }\n\n    private java.util.List<org.apache.jackrabbit.oak.plugins.document.UpdateOp> create() {\n        if (!considerSplit()) {\n            return java.util.Collections.emptyList();\n        }\n        splitOps = com.google.common.collect.Lists.newArrayList();\n        mostRecentRevs = com.google.common.collect.Sets.newHashSet();\n        splitRevs = com.google.common.collect.Sets.newHashSet();\n        garbage = com.google.common.collect.Maps.newHashMap();\n        changes = com.google.common.collect.Sets.newHashSet();\n        committedChanges = com.google.common.collect.Maps.newHashMap();\n        collectLocalChanges(committedChanges, changes);\n        populateSplitRevs();\n        collectRevisionsAndCommitRoot();\n        main = createSplitOps();\n        createIntermediateDocs();\n        disconnectStalePrevDocs();\n        removeGarbage();\n        if (main != null) {\n            splitOps.add(main);\n        }\n        return splitOps;\n    }\n\n    private boolean considerSplit() {\n        java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, org.apache.jackrabbit.oak.plugins.document.Range> previous = doc.getPreviousRanges();\n        return ((((doc.getLocalRevisions().size() + doc.getLocalCommitRoot().size()) > org.apache.jackrabbit.oak.plugins.document.NodeDocument.NUM_REVS_THRESHOLD) || (doc.getMemory() >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.DOC_SIZE_THRESHOLD)) || (previous.size() >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.PREV_SPLIT_FACTOR)) || (!doc.getStalePrev().isEmpty());\n    }\n\n    private void populateSplitRevs() {\n        for (java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> splitMap : committedChanges.values()) {\n            if (!splitMap.isEmpty()) {\n                org.apache.jackrabbit.oak.plugins.document.Revision r = splitMap.lastKey();\n                splitMap.remove(r);\n                splitRevs.addAll(splitMap.keySet());\n                mostRecentRevs.add(r);\n            }\n            if (splitMap.isEmpty()) {\n                continue;\n            }\n            trackHigh(splitMap.lastKey());\n            trackLow(splitMap.firstKey());\n            numValues += splitMap.size();\n        }\n    }\n\n    private void collectRevisionsAndCommitRoot() {\n        java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> revisions = new java.util.TreeMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>(context.getRevisionComparator());\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : doc.getLocalRevisions().entrySet()) {\n            if (splitRevs.contains(entry.getKey())) {\n                revisions.put(entry.getKey(), entry.getValue());\n                numValues++;\n            } else {\n                if (context.getClusterId() != entry.getKey().getClusterId()) {\n                    continue;\n                }\n                if (doc.isCommitted(entry.getKey()) && (!mostRecentRevs.contains(entry.getKey()))) {\n                    revisions.put(entry.getKey(), entry.getValue());\n                    numValues++;\n                    trackHigh(entry.getKey());\n                    trackLow(entry.getKey());\n                }\n            }\n        }\n        committedChanges.put(org.apache.jackrabbit.oak.plugins.document.NodeDocument.REVISIONS, revisions);\n        java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> commitRoot = new java.util.TreeMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>(context.getRevisionComparator());\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : doc.getLocalCommitRoot().entrySet()) {\n            org.apache.jackrabbit.oak.plugins.document.Revision r = entry.getKey();\n            if (splitRevs.contains(r)) {\n                commitRoot.put(r, entry.getValue());\n                numValues++;\n            } else if ((r.getClusterId() == context.getClusterId()) && (!changes.contains(r))) {\n                addGarbage(r, org.apache.jackrabbit.oak.plugins.document.NodeDocument.COMMIT_ROOT);\n            }\n        }\n        committedChanges.put(org.apache.jackrabbit.oak.plugins.document.NodeDocument.COMMIT_ROOT, commitRoot);\n    }\n\n    private void createIntermediateDocs() {\n        java.util.Map<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Range>> prevHisto = getPreviousDocsHistogram();\n        for (java.util.Map.Entry<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Range>> entry : prevHisto.entrySet()) {\n            if (entry.getValue().size() >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.PREV_SPLIT_FACTOR) {\n                if (main == null) {\n                    main = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(id, false);\n                }\n                org.apache.jackrabbit.oak.plugins.document.Revision h = null;\n                org.apache.jackrabbit.oak.plugins.document.Revision l = null;\n                for (org.apache.jackrabbit.oak.plugins.document.Range r : entry.getValue()) {\n                    if ((h == null) || isRevisionNewer(context, r.high, h)) {\n                        h = r.high;\n                    }\n                    if ((l == null) || isRevisionNewer(context, l, r.low)) {\n                        l = r.low;\n                    }\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removePrevious(main, r);\n                }\n                if ((h == null) || (l == null)) {\n                    throw new java.lang.IllegalStateException();\n                }\n                java.lang.String prevPath = org.apache.jackrabbit.oak.plugins.document.util.Utils.getPreviousPathFor(path, h, entry.getKey() + 1);\n                java.lang.String prevId = org.apache.jackrabbit.oak.plugins.document.util.Utils.getIdFromPath(prevPath);\n                org.apache.jackrabbit.oak.plugins.document.UpdateOp intermediate = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(prevId, true);\n                intermediate.set(Document.ID, prevId);\n                if (org.apache.jackrabbit.oak.plugins.document.util.Utils.isLongPath(prevPath)) {\n                    intermediate.set(NodeDocument.PATH, prevPath);\n                }\n                org.apache.jackrabbit.oak.plugins.document.NodeDocument.setPrevious(main, new org.apache.jackrabbit.oak.plugins.document.Range(h, l, entry.getKey() + 1));\n                for (org.apache.jackrabbit.oak.plugins.document.Range r : entry.getValue()) {\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.setPrevious(intermediate, r);\n                }\n                org.apache.jackrabbit.oak.plugins.document.SplitOperations.setIntermediateDocProps(intermediate, h);\n                splitOps.add(intermediate);\n            }\n        }\n    }\n\n    @javax.annotation.CheckForNull\n    private org.apache.jackrabbit.oak.plugins.document.UpdateOp createSplitOps() {\n        org.apache.jackrabbit.oak.plugins.document.UpdateOp main = null;\n        if (((high != null) && (low != null)) && ((numValues >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.NUM_REVS_THRESHOLD) || (doc.getMemory() > org.apache.jackrabbit.oak.plugins.document.NodeDocument.DOC_SIZE_THRESHOLD))) {\n            main = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(id, false);\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.setPrevious(main, new org.apache.jackrabbit.oak.plugins.document.Range(high, low, 0));\n            java.lang.String oldPath = org.apache.jackrabbit.oak.plugins.document.util.Utils.getPreviousPathFor(path, high, 0);\n            org.apache.jackrabbit.oak.plugins.document.UpdateOp old = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(org.apache.jackrabbit.oak.plugins.document.util.Utils.getIdFromPath(oldPath), true);\n            old.set(Document.ID, old.getId());\n            if (org.apache.jackrabbit.oak.plugins.document.util.Utils.isLongPath(oldPath)) {\n                old.set(NodeDocument.PATH, oldPath);\n            }\n            for (java.lang.String property : committedChanges.keySet()) {\n                java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> splitMap = committedChanges.get(property);\n                for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : splitMap.entrySet()) {\n                    org.apache.jackrabbit.oak.plugins.document.Revision r = entry.getKey();\n                    if (org.apache.jackrabbit.oak.plugins.document.NodeDocument.isRevisionsEntry(property) || org.apache.jackrabbit.oak.plugins.document.NodeDocument.isCommitRootEntry(property)) {\n                        if (!mostRecentRevs.contains(r)) {\n                            main.removeMapEntry(property, r);\n                        }\n                    } else {\n                        main.removeMapEntry(property, r);\n                    }\n                    old.setMapEntry(property, r, entry.getValue());\n                }\n            }\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument oldDoc = new org.apache.jackrabbit.oak.plugins.document.NodeDocument(org.apache.jackrabbit.oak.plugins.document.SplitOperations.STORE);\n            org.apache.jackrabbit.oak.plugins.document.UpdateUtils.applyChanges(oldDoc, old, context.getRevisionComparator());\n            org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocProps(doc, oldDoc, old, high);\n            if ((oldDoc.getMemory() > (doc.getMemory() * org.apache.jackrabbit.oak.plugins.document.NodeDocument.SPLIT_RATIO)) || (numValues >= org.apache.jackrabbit.oak.plugins.document.NodeDocument.NUM_REVS_THRESHOLD)) {\n                splitOps.add(old);\n            } else {\n                main = null;\n            }\n        }\n        return main;\n    }\n\n    private java.util.Map<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Range>> getPreviousDocsHistogram() {\n        java.util.Map<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Range>> prevHisto = com.google.common.collect.Maps.newHashMap();\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, org.apache.jackrabbit.oak.plugins.document.Range> entry : doc.getPreviousRanges().entrySet()) {\n            org.apache.jackrabbit.oak.plugins.document.Revision rev = entry.getKey();\n            if (rev.getClusterId() != context.getClusterId()) {\n                continue;\n            }\n            org.apache.jackrabbit.oak.plugins.document.Range r = entry.getValue();\n            java.util.List<org.apache.jackrabbit.oak.plugins.document.Range> list = prevHisto.get(r.getHeight());\n            if (list == null) {\n                list = new java.util.ArrayList<org.apache.jackrabbit.oak.plugins.document.Range>();\n                prevHisto.put(r.getHeight(), list);\n            }\n            list.add(r);\n        }\n        return prevHisto;\n    }\n\n    private void collectLocalChanges(java.util.Map<java.lang.String, java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>> committedLocally, java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> changes) {\n        for (java.lang.String property : com.google.common.collect.Sets.filter(doc.keySet(), org.apache.jackrabbit.oak.plugins.document.PROPERTY_OR_DELETED)) {\n            java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> splitMap = new java.util.TreeMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>(context.getRevisionComparator());\n            committedLocally.put(property, splitMap);\n            java.util.Map<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> valueMap = doc.getLocalMap(property);\n            for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : valueMap.entrySet()) {\n                org.apache.jackrabbit.oak.plugins.document.Revision rev = entry.getKey();\n                if (rev.getClusterId() != context.getClusterId()) {\n                    continue;\n                }\n                changes.add(rev);\n                if (doc.isCommitted(rev)) {\n                    splitMap.put(rev, entry.getValue());\n                } else if (isGarbage(rev)) {\n                    addGarbage(rev, property);\n                }\n            }\n        }\n    }\n\n    private boolean isGarbage(org.apache.jackrabbit.oak.plugins.document.Revision rev) {\n        org.apache.jackrabbit.oak.plugins.document.Revision head = context.getHeadRevision();\n        java.util.Comparator<org.apache.jackrabbit.oak.plugins.document.Revision> comp = context.getRevisionComparator();\n        if (comp.compare(head, rev) <= 0) {\n            return false;\n        }\n        return context.getBranches().getBranchCommit(rev) == null;\n    }\n\n    private void addGarbage(org.apache.jackrabbit.oak.plugins.document.Revision rev, java.lang.String property) {\n        if (garbageCount > org.apache.jackrabbit.oak.plugins.document.SplitOperations.GARBAGE_LIMIT) {\n            return;\n        }\n        java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> revisions = garbage.get(property);\n        if (revisions == null) {\n            revisions = com.google.common.collect.Sets.newHashSet();\n            garbage.put(property, revisions);\n        }\n        if (revisions.add(rev)) {\n            garbageCount++;\n        }\n    }\n\n    private void disconnectStalePrevDocs() {\n        java.util.NavigableMap<org.apache.jackrabbit.oak.plugins.document.Revision, org.apache.jackrabbit.oak.plugins.document.Range> ranges = doc.getPreviousRanges(true);\n        for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> entry : doc.getStalePrev().entrySet()) {\n            org.apache.jackrabbit.oak.plugins.document.Revision r = entry.getKey();\n            if (r.getClusterId() != context.getClusterId()) {\n                continue;\n            }\n            if (main == null) {\n                main = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(id, false);\n            }\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeStalePrevious(main, r);\n            if (ranges.containsKey(r) && entry.getValue().equals(java.lang.String.valueOf(ranges.get(r).height))) {\n                org.apache.jackrabbit.oak.plugins.document.NodeDocument.removePrevious(main, r);\n            } else {\n                int height = java.lang.Integer.parseInt(entry.getValue());\n                org.apache.jackrabbit.oak.plugins.document.NodeDocument intermediate = doc.findPrevReferencingDoc(r, height);\n                if (intermediate == null) {\n                    org.apache.jackrabbit.oak.plugins.document.SplitOperations.LOG.warn(\"Split document {} not referenced anymore. Main document is {}\", getPreviousIdFor(doc.getPath(), r, height), id);\n                } else {\n                    org.apache.jackrabbit.oak.plugins.document.UpdateOp op = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(intermediate.getId(), false);\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removePrevious(op, r);\n                    splitOps.add(op);\n                }\n            }\n        }\n    }\n\n    private void removeGarbage() {\n        if (garbage.isEmpty()) {\n            return;\n        } else if (main == null) {\n            main = new org.apache.jackrabbit.oak.plugins.document.UpdateOp(id, false);\n        }\n        for (java.util.Map.Entry<java.lang.String, java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision>> entry : garbage.entrySet()) {\n            for (org.apache.jackrabbit.oak.plugins.document.Revision r : entry.getValue()) {\n                main.removeMapEntry(entry.getKey(), r);\n                if (org.apache.jackrabbit.oak.plugins.document.PROPERTY_OR_DELETED.apply(entry.getKey())) {\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeCommitRoot(main, r);\n                    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeRevision(main, r);\n                }\n            }\n        }\n    }\n\n    private void trackHigh(org.apache.jackrabbit.oak.plugins.document.Revision r) {\n        if ((high == null) || isRevisionNewer(context, r, high)) {\n            high = r;\n        }\n    }\n\n    private void trackLow(org.apache.jackrabbit.oak.plugins.document.Revision r) {\n        if ((low == null) || isRevisionNewer(context, low, r)) {\n            low = r;\n        }\n    }\n\n    private static void setSplitDocProps(org.apache.jackrabbit.oak.plugins.document.NodeDocument mainDoc, org.apache.jackrabbit.oak.plugins.document.NodeDocument oldDoc, org.apache.jackrabbit.oak.plugins.document.UpdateOp old, org.apache.jackrabbit.oak.plugins.document.Revision maxRev) {\n        org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocMaxRev(old, maxRev);\n        org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType type = org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType.DEFAULT;\n        if (!mainDoc.hasChildren()) {\n            type = org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType.DEFAULT_LEAF;\n        } else if (oldDoc.getLocalRevisions().isEmpty()) {\n            type = org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType.COMMIT_ROOT_ONLY;\n        }\n        if (mainDoc.hasBinary()) {\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.setHasBinary(old);\n        }\n        org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocType(old, type);\n    }\n\n    private static void setIntermediateDocProps(org.apache.jackrabbit.oak.plugins.document.UpdateOp intermediate, org.apache.jackrabbit.oak.plugins.document.Revision maxRev) {\n        org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocMaxRev(intermediate, maxRev);\n        org.apache.jackrabbit.oak.plugins.document.SplitOperations.setSplitDocType(intermediate, SplitDocType.INTERMEDIATE);\n    }\n\n    private static void setSplitDocType(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.UpdateOp op, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType type) {\n        com.google.common.base.Preconditions.checkNotNull(op).set(NodeDocument.SD_TYPE, type.type);\n    }\n\n    private static void setSplitDocMaxRev(@javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.UpdateOp op, @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.plugins.document.Revision maxRev) {\n        com.google.common.base.Preconditions.checkNotNull(op).set(NodeDocument.SD_MAX_REV_TIME_IN_SECS, org.apache.jackrabbit.oak.plugins.document.NodeDocument.getModifiedInSecs(maxRev.getTimestamp()));\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "committedChanges = com.google.common.collect.Maps.newHashMap()",
            "src_parent": "{\n    if (!considerSplit()) {\n        return java.util.Collections.emptyList();\n    }\n    splitOps = com.google.common.collect.Lists.newArrayList();\n    mostRecentRevs = com.google.common.collect.Sets.newHashSet();\n    splitRevs = com.google.common.collect.Sets.newHashSet();\n    garbage = com.google.common.collect.Maps.newHashMap();\n    changes = com.google.common.collect.Sets.newHashSet();\n    committedChanges = com.google.common.collect.Maps.newHashMap();\n    collectLocalChanges(committedChanges, changes);\n    populateSplitRevs();\n    collectRevisionsAndCommitRoot();\n    main = createSplitOps();\n    createIntermediateDocs();\n    disconnectStalePrevDocs();\n    removeGarbage();\n    if (main != null) {\n        splitOps.add(main);\n    }\n    return splitOps;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "collectLocalChanges(committedChanges, changes)",
            "src_parent": "{\n    if (!considerSplit()) {\n        return java.util.Collections.emptyList();\n    }\n    splitOps = com.google.common.collect.Lists.newArrayList();\n    mostRecentRevs = com.google.common.collect.Sets.newHashSet();\n    splitRevs = com.google.common.collect.Sets.newHashSet();\n    garbage = com.google.common.collect.Maps.newHashMap();\n    changes = com.google.common.collect.Sets.newHashSet();\n    committedChanges = com.google.common.collect.Maps.newHashMap();\n    collectLocalChanges(committedChanges, changes);\n    populateSplitRevs();\n    collectRevisionsAndCommitRoot();\n    main = createSplitOps();\n    createIntermediateDocs();\n    disconnectStalePrevDocs();\n    removeGarbage();\n    if (main != null) {\n        splitOps.add(main);\n    }\n    return splitOps;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (garbageCount > org.apache.jackrabbit.oak.plugins.document.SplitOperations.GARBAGE_LIMIT) {\n    return;\n}",
            "src_parent": "{\n    if (garbageCount > org.apache.jackrabbit.oak.plugins.document.SplitOperations.GARBAGE_LIMIT) {\n        return;\n    }\n    java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> revisions = garbage.get(property);\n    if (revisions == null) {\n        revisions = com.google.common.collect.Sets.newHashSet();\n        garbage.put(property, revisions);\n    }\n    if (revisions.add(rev)) {\n        garbageCount++;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (revisions.add(rev)) {\n    garbageCount++;\n}",
            "src_parent": "{\n    if (garbageCount > org.apache.jackrabbit.oak.plugins.document.SplitOperations.GARBAGE_LIMIT) {\n        return;\n    }\n    java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> revisions = garbage.get(property);\n    if (revisions == null) {\n        revisions = com.google.common.collect.Sets.newHashSet();\n        garbage.put(property, revisions);\n    }\n    if (revisions.add(rev)) {\n        garbageCount++;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "changes",
            "src_parent": "changes = com.google.common.collect.Sets.newHashSet()",
            "src_parent_type": "Assignment",
            "src_type": "FieldWrite"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "ForEach",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.plugins.document.Revision r = entry.getKey()",
            "src_parent": "{\n    org.apache.jackrabbit.oak.plugins.document.Revision r = entry.getKey();\n    if (splitRevs.contains(r)) {\n        commitRoot.put(r, entry.getValue());\n        numValues++;\n    } else if ((r.getClusterId() == context.getClusterId()) && (!changes.contains(r))) {\n        addGarbage(r, org.apache.jackrabbit.oak.plugins.document.NodeDocument.COMMIT_ROOT);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "ForEach",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    if ((r.getClusterId() == context.getClusterId()) && (!changes.contains(r))) {\n        addGarbage(r, org.apache.jackrabbit.oak.plugins.document.NodeDocument.COMMIT_ROOT);\n    }\n}",
            "src_parent": "if (splitRevs.contains(r)) {\n    commitRoot.put(r, entry.getValue());\n    numValues++;\n} else if ((r.getClusterId() == context.getClusterId()) && (!changes.contains(r))) {\n    addGarbage(r, org.apache.jackrabbit.oak.plugins.document.NodeDocument.COMMIT_ROOT);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "changes.add(rev)",
            "src_parent": "{\n    org.apache.jackrabbit.oak.plugins.document.Revision rev = entry.getKey();\n    if (rev.getClusterId() != context.getClusterId()) {\n        continue;\n    }\n    changes.add(rev);\n    if (doc.isCommitted(rev)) {\n        splitMap.put(rev, entry.getValue());\n    } else if (isGarbage(rev)) {\n        addGarbage(rev, property);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (org.apache.jackrabbit.oak.plugins.document.PROPERTY_OR_DELETED.apply(entry.getKey())) {\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeCommitRoot(main, r);\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeRevision(main, r);\n}",
            "src_parent": "{\n    main.removeMapEntry(entry.getKey(), r);\n    if (org.apache.jackrabbit.oak.plugins.document.PROPERTY_OR_DELETED.apply(entry.getKey())) {\n        org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeCommitRoot(main, r);\n        org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeRevision(main, r);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "r",
            "src_parent": "splitRevs.contains(r)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "r",
            "src_parent": "commitRoot.put(r, entry.getValue())",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "committedChanges",
            "dst_parent": "committedChanges = com.google.common.collect.Maps.newHashMap()",
            "dst_parent_type": "Assignment",
            "dst_type": "FieldWrite",
            "operator": "MOV",
            "src": "committedChanges",
            "src_parent": "committedChanges = getCommittedLocalChanges()",
            "src_parent_type": "Assignment",
            "src_type": "FieldWrite"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "revisions.add(rev)",
            "dst_parent": "if (revisions.add(rev)) {\n    garbageCount++;\n}",
            "dst_parent_type": "If",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "revisions.add(rev)",
            "src_parent": "{\n    java.util.Set<org.apache.jackrabbit.oak.plugins.document.Revision> revisions = garbage.get(property);\n    if (revisions == null) {\n        revisions = com.google.common.collect.Sets.newHashSet();\n        garbage.put(property, revisions);\n    }\n    revisions.add(rev);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "UnaryOperator",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "entry.getKey()",
            "dst_parent": "org.apache.jackrabbit.oak.plugins.document.Revision r = entry.getKey()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "entry.getKey()",
            "src_parent": "commitRoot.put(entry.getKey(), entry.getValue())",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "entry.getKey()",
            "dst_parent": "org.apache.jackrabbit.oak.plugins.document.PROPERTY_OR_DELETED.apply(entry.getKey())",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "entry.getKey()",
            "src_parent": "splitRevs.contains(entry.getKey())",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeCommitRoot(main, r)",
            "dst_parent": "{\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeCommitRoot(main, r);\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeRevision(main, r);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeCommitRoot(main, r)",
            "src_parent": "{\n    main.removeMapEntry(entry.getKey(), r);\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeCommitRoot(main, r);\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeRevision(main, r);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeRevision(main, r)",
            "dst_parent": "{\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeCommitRoot(main, r);\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeRevision(main, r);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeRevision(main, r)",
            "src_parent": "{\n    main.removeMapEntry(entry.getKey(), r);\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeCommitRoot(main, r);\n    org.apache.jackrabbit.oak.plugins.document.NodeDocument.removeRevision(main, r);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "SplitOperations"
    }
  ],
  "id": "jackrabbit-oak_239de7b8"
}