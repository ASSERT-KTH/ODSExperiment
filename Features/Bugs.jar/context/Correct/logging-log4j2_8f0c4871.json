{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "private static final long serialVersionUID = 7869000638091304316L;",
            "dst_parent": "public class SLF4JLogger implements java.io.Serializable , org.slf4j.spi.LocationAwareLogger {\n    private static final long serialVersionUID = 7869000638091304316L;\n\n    private static final java.lang.String FQCN = org.slf4j.impl.SLF4JLogger.class.getName();\n\n    private static final org.slf4j.Marker EVENT_MARKER = org.slf4j.MarkerFactory.getMarker(\"EVENT\");\n\n    private final boolean eventLogger;\n\n    private transient org.apache.logging.log4j.spi.AbstractLoggerWrapper logger;\n\n    private final java.lang.String name;\n\n    private transient org.slf4j.helpers.EventDataConverter converter;\n\n    public SLF4JLogger(final org.apache.logging.log4j.spi.AbstractLogger logger, final java.lang.String name) {\n        this.logger = new org.apache.logging.log4j.spi.AbstractLoggerWrapper(logger, name, null);\n        this.eventLogger = \"EventLogger\".equals(name);\n        this.name = name;\n        this.converter = createConverter();\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isTraceEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isTraceEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isTraceEnabled() {\n        return logger.isTraceEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isTraceEnabled(final org.slf4j.Marker marker) {\n        return logger.isTraceEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isTraceEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isTraceEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isDebugEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isDebugEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isDebugEnabled() {\n        return logger.isDebugEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isDebugEnabled(final org.slf4j.Marker marker) {\n        return logger.isDebugEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isDebugEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isDebugEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isInfoEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isInfoEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isInfoEnabled() {\n        return logger.isInfoEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isInfoEnabled(final org.slf4j.Marker marker) {\n        return logger.isInfoEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isInfoEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isInfoEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isWarnEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isWarnEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isWarnEnabled() {\n        return logger.isWarnEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isWarnEnabled(final org.slf4j.Marker marker) {\n        return logger.isWarnEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isWarnEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isWarnEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isErrorEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isErrorEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isErrorEnabled() {\n        return logger.isErrorEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isErrorEnabled(final org.slf4j.Marker marker) {\n        return logger.isErrorEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isErrorEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isErrorEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void log(final org.slf4j.Marker marker, final java.lang.String fqcn, final int i, final java.lang.String s1, final java.lang.Object[] objects, java.lang.Throwable throwable) {\n        if (!logger.isEnabled(getLevel(i), ((org.apache.logging.log4j.Marker) (marker)), s1)) {\n            return;\n        }\n        org.apache.logging.log4j.message.Message msg;\n        if (((eventLogger && (marker != null)) && marker.contains(org.slf4j.impl.SLF4JLogger.EVENT_MARKER)) && (converter != null)) {\n            msg = converter.convertEvent(s1, objects, throwable);\n        } else if (objects == null) {\n            msg = new org.apache.logging.log4j.message.SimpleMessage(s1);\n        } else {\n            msg = new org.apache.logging.log4j.message.ParameterizedMessage(s1, objects, throwable);\n            if (throwable != null) {\n                throwable = msg.getThrowable();\n            }\n        }\n        logger.log(((org.apache.logging.log4j.Marker) (marker)), fqcn, getLevel(i), msg, throwable);\n    }\n\n    @java.lang.Override\n    public java.lang.String getName() {\n        return name;\n    }\n\n    private void readObject(java.io.ObjectInputStream aInputStream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        aInputStream.defaultReadObject();\n        logger = new org.apache.logging.log4j.spi.AbstractLoggerWrapper(((org.apache.logging.log4j.spi.AbstractLogger) (org.apache.logging.log4j.LogManager.getLogger(name))), name, null);\n        converter = createConverter();\n    }\n\n    private void writeObject(java.io.ObjectOutputStream aOutputStream) throws java.io.IOException {\n        aOutputStream.defaultWriteObject();\n    }\n\n    private org.slf4j.helpers.EventDataConverter createConverter() {\n        try {\n            java.lang.Class.forName(\"org.slf4j.ext.EventData\");\n            return new org.slf4j.helpers.EventDataConverter();\n        } catch (java.lang.ClassNotFoundException cnfe) {\n            return null;\n        }\n    }\n\n    private org.apache.logging.log4j.Level getLevel(final int i) {\n        switch (i) {\n            case org.slf4j.spi.LocationAwareLogger.TRACE_INT :\n                return org.apache.logging.log4j.Level.TRACE;\n            case org.slf4j.spi.LocationAwareLogger.DEBUG_INT :\n                return org.apache.logging.log4j.Level.DEBUG;\n            case org.slf4j.spi.LocationAwareLogger.INFO_INT :\n                return org.apache.logging.log4j.Level.INFO;\n            case org.slf4j.spi.LocationAwareLogger.WARN_INT :\n                return org.apache.logging.log4j.Level.WARN;\n            case org.slf4j.spi.LocationAwareLogger.ERROR_INT :\n                return org.apache.logging.log4j.Level.ERROR;\n        }\n        return org.apache.logging.log4j.Level.ERROR;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Field",
            "operator": "UPD",
            "src": "private final org.apache.logging.log4j.spi.AbstractLoggerWrapper logger;",
            "src_parent": "public class SLF4JLogger implements org.slf4j.spi.LocationAwareLogger {\n    private static final java.lang.String FQCN = org.slf4j.impl.SLF4JLogger.class.getName();\n\n    private static final org.slf4j.Marker EVENT_MARKER = org.slf4j.MarkerFactory.getMarker(\"EVENT\");\n\n    private final boolean eventLogger;\n\n    private final org.apache.logging.log4j.spi.AbstractLoggerWrapper logger;\n\n    private final java.lang.String name;\n\n    private final org.slf4j.helpers.EventDataConverter converter;\n\n    public SLF4JLogger(final org.apache.logging.log4j.spi.AbstractLogger logger, final java.lang.String name) {\n        this.logger = new org.apache.logging.log4j.spi.AbstractLoggerWrapper(logger, name, null);\n        this.eventLogger = \"EventLogger\".equals(name);\n        this.name = name;\n        this.converter = createConverter();\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isTraceEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isTraceEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isTraceEnabled() {\n        return logger.isTraceEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isTraceEnabled(final org.slf4j.Marker marker) {\n        return logger.isTraceEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isTraceEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isTraceEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isDebugEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isDebugEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isDebugEnabled() {\n        return logger.isDebugEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isDebugEnabled(final org.slf4j.Marker marker) {\n        return logger.isDebugEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isDebugEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isDebugEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isInfoEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isInfoEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isInfoEnabled() {\n        return logger.isInfoEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isInfoEnabled(final org.slf4j.Marker marker) {\n        return logger.isInfoEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isInfoEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isInfoEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isWarnEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isWarnEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isWarnEnabled() {\n        return logger.isWarnEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isWarnEnabled(final org.slf4j.Marker marker) {\n        return logger.isWarnEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isWarnEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isWarnEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isErrorEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isErrorEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isErrorEnabled() {\n        return logger.isErrorEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isErrorEnabled(final org.slf4j.Marker marker) {\n        return logger.isErrorEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isErrorEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isErrorEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void log(final org.slf4j.Marker marker, final java.lang.String fqcn, final int i, final java.lang.String s1, final java.lang.Object[] objects, java.lang.Throwable throwable) {\n        if (!logger.isEnabled(getLevel(i), ((org.apache.logging.log4j.Marker) (marker)), s1)) {\n            return;\n        }\n        org.apache.logging.log4j.message.Message msg;\n        if (((eventLogger && (marker != null)) && marker.contains(org.slf4j.impl.SLF4JLogger.EVENT_MARKER)) && (converter != null)) {\n            msg = converter.convertEvent(s1, objects, throwable);\n        } else if (objects == null) {\n            msg = new org.apache.logging.log4j.message.SimpleMessage(s1);\n        } else {\n            msg = new org.apache.logging.log4j.message.ParameterizedMessage(s1, objects, throwable);\n            if (throwable != null) {\n                throwable = msg.getThrowable();\n            }\n        }\n        logger.log(((org.apache.logging.log4j.Marker) (marker)), fqcn, getLevel(i), msg, throwable);\n    }\n\n    @java.lang.Override\n    public java.lang.String getName() {\n        return name;\n    }\n\n    private org.slf4j.helpers.EventDataConverter createConverter() {\n        try {\n            java.lang.Class.forName(\"org.slf4j.ext.EventData\");\n            return new org.slf4j.helpers.EventDataConverter();\n        } catch (java.lang.ClassNotFoundException cnfe) {\n            return null;\n        }\n    }\n\n    private org.apache.logging.log4j.Level getLevel(final int i) {\n        switch (i) {\n            case org.slf4j.spi.LocationAwareLogger.TRACE_INT :\n                return org.apache.logging.log4j.Level.TRACE;\n            case org.slf4j.spi.LocationAwareLogger.DEBUG_INT :\n                return org.apache.logging.log4j.Level.DEBUG;\n            case org.slf4j.spi.LocationAwareLogger.INFO_INT :\n                return org.apache.logging.log4j.Level.INFO;\n            case org.slf4j.spi.LocationAwareLogger.WARN_INT :\n                return org.apache.logging.log4j.Level.WARN;\n            case org.slf4j.spi.LocationAwareLogger.ERROR_INT :\n                return org.apache.logging.log4j.Level.ERROR;\n        }\n        return org.apache.logging.log4j.Level.ERROR;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Field",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "long",
            "dst_parent": "private static final long serialVersionUID = 7869000638091304316L;",
            "dst_parent_type": "Field",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "org.apache.logging.log4j.spi.AbstractLoggerWrapper",
            "src_parent": "private final org.apache.logging.log4j.spi.AbstractLoggerWrapper logger;",
            "src_parent_type": "Field",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Field",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Wrapper",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "final",
            "src_parent": "private final org.slf4j.helpers.EventDataConverter converter;",
            "src_parent_type": "Field",
            "src_type": "Wra"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private transient org.apache.logging.log4j.spi.AbstractLoggerWrapper logger;",
            "src_parent": "public class SLF4JLogger implements java.io.Serializable , org.slf4j.spi.LocationAwareLogger {\n    private static final long serialVersionUID = 7869000638091304316L;\n\n    private static final java.lang.String FQCN = org.slf4j.impl.SLF4JLogger.class.getName();\n\n    private static final org.slf4j.Marker EVENT_MARKER = org.slf4j.MarkerFactory.getMarker(\"EVENT\");\n\n    private final boolean eventLogger;\n\n    private transient org.apache.logging.log4j.spi.AbstractLoggerWrapper logger;\n\n    private final java.lang.String name;\n\n    private transient org.slf4j.helpers.EventDataConverter converter;\n\n    public SLF4JLogger(final org.apache.logging.log4j.spi.AbstractLogger logger, final java.lang.String name) {\n        this.logger = new org.apache.logging.log4j.spi.AbstractLoggerWrapper(logger, name, null);\n        this.eventLogger = \"EventLogger\".equals(name);\n        this.name = name;\n        this.converter = createConverter();\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isTraceEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isTraceEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isTraceEnabled() {\n        return logger.isTraceEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isTraceEnabled(final org.slf4j.Marker marker) {\n        return logger.isTraceEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isTraceEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isTraceEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isDebugEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isDebugEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isDebugEnabled() {\n        return logger.isDebugEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isDebugEnabled(final org.slf4j.Marker marker) {\n        return logger.isDebugEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isDebugEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isDebugEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isInfoEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isInfoEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isInfoEnabled() {\n        return logger.isInfoEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isInfoEnabled(final org.slf4j.Marker marker) {\n        return logger.isInfoEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isInfoEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isInfoEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isWarnEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isWarnEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isWarnEnabled() {\n        return logger.isWarnEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isWarnEnabled(final org.slf4j.Marker marker) {\n        return logger.isWarnEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isWarnEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isWarnEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isErrorEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isErrorEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isErrorEnabled() {\n        return logger.isErrorEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isErrorEnabled(final org.slf4j.Marker marker) {\n        return logger.isErrorEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isErrorEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isErrorEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void log(final org.slf4j.Marker marker, final java.lang.String fqcn, final int i, final java.lang.String s1, final java.lang.Object[] objects, java.lang.Throwable throwable) {\n        if (!logger.isEnabled(getLevel(i), ((org.apache.logging.log4j.Marker) (marker)), s1)) {\n            return;\n        }\n        org.apache.logging.log4j.message.Message msg;\n        if (((eventLogger && (marker != null)) && marker.contains(org.slf4j.impl.SLF4JLogger.EVENT_MARKER)) && (converter != null)) {\n            msg = converter.convertEvent(s1, objects, throwable);\n        } else if (objects == null) {\n            msg = new org.apache.logging.log4j.message.SimpleMessage(s1);\n        } else {\n            msg = new org.apache.logging.log4j.message.ParameterizedMessage(s1, objects, throwable);\n            if (throwable != null) {\n                throwable = msg.getThrowable();\n            }\n        }\n        logger.log(((org.apache.logging.log4j.Marker) (marker)), fqcn, getLevel(i), msg, throwable);\n    }\n\n    @java.lang.Override\n    public java.lang.String getName() {\n        return name;\n    }\n\n    private void readObject(java.io.ObjectInputStream aInputStream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        aInputStream.defaultReadObject();\n        logger = new org.apache.logging.log4j.spi.AbstractLoggerWrapper(((org.apache.logging.log4j.spi.AbstractLogger) (org.apache.logging.log4j.LogManager.getLogger(name))), name, null);\n        converter = createConverter();\n    }\n\n    private void writeObject(java.io.ObjectOutputStream aOutputStream) throws java.io.IOException {\n        aOutputStream.defaultWriteObject();\n    }\n\n    private org.slf4j.helpers.EventDataConverter createConverter() {\n        try {\n            java.lang.Class.forName(\"org.slf4j.ext.EventData\");\n            return new org.slf4j.helpers.EventDataConverter();\n        } catch (java.lang.ClassNotFoundException cnfe) {\n            return null;\n        }\n    }\n\n    private org.apache.logging.log4j.Level getLevel(final int i) {\n        switch (i) {\n            case org.slf4j.spi.LocationAwareLogger.TRACE_INT :\n                return org.apache.logging.log4j.Level.TRACE;\n            case org.slf4j.spi.LocationAwareLogger.DEBUG_INT :\n                return org.apache.logging.log4j.Level.DEBUG;\n            case org.slf4j.spi.LocationAwareLogger.INFO_INT :\n                return org.apache.logging.log4j.Level.INFO;\n            case org.slf4j.spi.LocationAwareLogger.WARN_INT :\n                return org.apache.logging.log4j.Level.WARN;\n            case org.slf4j.spi.LocationAwareLogger.ERROR_INT :\n                return org.apache.logging.log4j.Level.ERROR;\n        }\n        return org.apache.logging.log4j.Level.ERROR;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private void readObject(java.io.ObjectInputStream aInputStream) throws java.io.IOException, java.lang.ClassNotFoundException {\n    aInputStream.defaultReadObject();\n    logger = new org.apache.logging.log4j.spi.AbstractLoggerWrapper(((org.apache.logging.log4j.spi.AbstractLogger) (org.apache.logging.log4j.LogManager.getLogger(name))), name, null);\n    converter = createConverter();\n}",
            "src_parent": "public class SLF4JLogger implements java.io.Serializable , org.slf4j.spi.LocationAwareLogger {\n    private static final long serialVersionUID = 7869000638091304316L;\n\n    private static final java.lang.String FQCN = org.slf4j.impl.SLF4JLogger.class.getName();\n\n    private static final org.slf4j.Marker EVENT_MARKER = org.slf4j.MarkerFactory.getMarker(\"EVENT\");\n\n    private final boolean eventLogger;\n\n    private transient org.apache.logging.log4j.spi.AbstractLoggerWrapper logger;\n\n    private final java.lang.String name;\n\n    private transient org.slf4j.helpers.EventDataConverter converter;\n\n    public SLF4JLogger(final org.apache.logging.log4j.spi.AbstractLogger logger, final java.lang.String name) {\n        this.logger = new org.apache.logging.log4j.spi.AbstractLoggerWrapper(logger, name, null);\n        this.eventLogger = \"EventLogger\".equals(name);\n        this.name = name;\n        this.converter = createConverter();\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isTraceEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isTraceEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isTraceEnabled() {\n        return logger.isTraceEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isTraceEnabled(final org.slf4j.Marker marker) {\n        return logger.isTraceEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isTraceEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isTraceEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isDebugEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isDebugEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isDebugEnabled() {\n        return logger.isDebugEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isDebugEnabled(final org.slf4j.Marker marker) {\n        return logger.isDebugEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isDebugEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isDebugEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isInfoEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isInfoEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isInfoEnabled() {\n        return logger.isInfoEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isInfoEnabled(final org.slf4j.Marker marker) {\n        return logger.isInfoEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isInfoEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isInfoEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isWarnEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isWarnEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isWarnEnabled() {\n        return logger.isWarnEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isWarnEnabled(final org.slf4j.Marker marker) {\n        return logger.isWarnEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isWarnEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isWarnEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isErrorEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isErrorEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isErrorEnabled() {\n        return logger.isErrorEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isErrorEnabled(final org.slf4j.Marker marker) {\n        return logger.isErrorEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isErrorEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isErrorEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void log(final org.slf4j.Marker marker, final java.lang.String fqcn, final int i, final java.lang.String s1, final java.lang.Object[] objects, java.lang.Throwable throwable) {\n        if (!logger.isEnabled(getLevel(i), ((org.apache.logging.log4j.Marker) (marker)), s1)) {\n            return;\n        }\n        org.apache.logging.log4j.message.Message msg;\n        if (((eventLogger && (marker != null)) && marker.contains(org.slf4j.impl.SLF4JLogger.EVENT_MARKER)) && (converter != null)) {\n            msg = converter.convertEvent(s1, objects, throwable);\n        } else if (objects == null) {\n            msg = new org.apache.logging.log4j.message.SimpleMessage(s1);\n        } else {\n            msg = new org.apache.logging.log4j.message.ParameterizedMessage(s1, objects, throwable);\n            if (throwable != null) {\n                throwable = msg.getThrowable();\n            }\n        }\n        logger.log(((org.apache.logging.log4j.Marker) (marker)), fqcn, getLevel(i), msg, throwable);\n    }\n\n    @java.lang.Override\n    public java.lang.String getName() {\n        return name;\n    }\n\n    private void readObject(java.io.ObjectInputStream aInputStream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        aInputStream.defaultReadObject();\n        logger = new org.apache.logging.log4j.spi.AbstractLoggerWrapper(((org.apache.logging.log4j.spi.AbstractLogger) (org.apache.logging.log4j.LogManager.getLogger(name))), name, null);\n        converter = createConverter();\n    }\n\n    private void writeObject(java.io.ObjectOutputStream aOutputStream) throws java.io.IOException {\n        aOutputStream.defaultWriteObject();\n    }\n\n    private org.slf4j.helpers.EventDataConverter createConverter() {\n        try {\n            java.lang.Class.forName(\"org.slf4j.ext.EventData\");\n            return new org.slf4j.helpers.EventDataConverter();\n        } catch (java.lang.ClassNotFoundException cnfe) {\n            return null;\n        }\n    }\n\n    private org.apache.logging.log4j.Level getLevel(final int i) {\n        switch (i) {\n            case org.slf4j.spi.LocationAwareLogger.TRACE_INT :\n                return org.apache.logging.log4j.Level.TRACE;\n            case org.slf4j.spi.LocationAwareLogger.DEBUG_INT :\n                return org.apache.logging.log4j.Level.DEBUG;\n            case org.slf4j.spi.LocationAwareLogger.INFO_INT :\n                return org.apache.logging.log4j.Level.INFO;\n            case org.slf4j.spi.LocationAwareLogger.WARN_INT :\n                return org.apache.logging.log4j.Level.WARN;\n            case org.slf4j.spi.LocationAwareLogger.ERROR_INT :\n                return org.apache.logging.log4j.Level.ERROR;\n        }\n        return org.apache.logging.log4j.Level.ERROR;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private void writeObject(java.io.ObjectOutputStream aOutputStream) throws java.io.IOException {\n    aOutputStream.defaultWriteObject();\n}",
            "src_parent": "public class SLF4JLogger implements java.io.Serializable , org.slf4j.spi.LocationAwareLogger {\n    private static final long serialVersionUID = 7869000638091304316L;\n\n    private static final java.lang.String FQCN = org.slf4j.impl.SLF4JLogger.class.getName();\n\n    private static final org.slf4j.Marker EVENT_MARKER = org.slf4j.MarkerFactory.getMarker(\"EVENT\");\n\n    private final boolean eventLogger;\n\n    private transient org.apache.logging.log4j.spi.AbstractLoggerWrapper logger;\n\n    private final java.lang.String name;\n\n    private transient org.slf4j.helpers.EventDataConverter converter;\n\n    public SLF4JLogger(final org.apache.logging.log4j.spi.AbstractLogger logger, final java.lang.String name) {\n        this.logger = new org.apache.logging.log4j.spi.AbstractLoggerWrapper(logger, name, null);\n        this.eventLogger = \"EventLogger\".equals(name);\n        this.name = name;\n        this.converter = createConverter();\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isTraceEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isTraceEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isTraceEnabled() {\n        return logger.isTraceEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isTraceEnabled(final org.slf4j.Marker marker) {\n        return logger.isTraceEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isTraceEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isTraceEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isDebugEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isDebugEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isDebugEnabled() {\n        return logger.isDebugEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isDebugEnabled(final org.slf4j.Marker marker) {\n        return logger.isDebugEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isDebugEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isDebugEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isInfoEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isInfoEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isInfoEnabled() {\n        return logger.isInfoEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isInfoEnabled(final org.slf4j.Marker marker) {\n        return logger.isInfoEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isInfoEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isInfoEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isWarnEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isWarnEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isWarnEnabled() {\n        return logger.isWarnEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isWarnEnabled(final org.slf4j.Marker marker) {\n        return logger.isWarnEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isWarnEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isWarnEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isErrorEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isErrorEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isErrorEnabled() {\n        return logger.isErrorEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isErrorEnabled(final org.slf4j.Marker marker) {\n        return logger.isErrorEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isErrorEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isErrorEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void log(final org.slf4j.Marker marker, final java.lang.String fqcn, final int i, final java.lang.String s1, final java.lang.Object[] objects, java.lang.Throwable throwable) {\n        if (!logger.isEnabled(getLevel(i), ((org.apache.logging.log4j.Marker) (marker)), s1)) {\n            return;\n        }\n        org.apache.logging.log4j.message.Message msg;\n        if (((eventLogger && (marker != null)) && marker.contains(org.slf4j.impl.SLF4JLogger.EVENT_MARKER)) && (converter != null)) {\n            msg = converter.convertEvent(s1, objects, throwable);\n        } else if (objects == null) {\n            msg = new org.apache.logging.log4j.message.SimpleMessage(s1);\n        } else {\n            msg = new org.apache.logging.log4j.message.ParameterizedMessage(s1, objects, throwable);\n            if (throwable != null) {\n                throwable = msg.getThrowable();\n            }\n        }\n        logger.log(((org.apache.logging.log4j.Marker) (marker)), fqcn, getLevel(i), msg, throwable);\n    }\n\n    @java.lang.Override\n    public java.lang.String getName() {\n        return name;\n    }\n\n    private void readObject(java.io.ObjectInputStream aInputStream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        aInputStream.defaultReadObject();\n        logger = new org.apache.logging.log4j.spi.AbstractLoggerWrapper(((org.apache.logging.log4j.spi.AbstractLogger) (org.apache.logging.log4j.LogManager.getLogger(name))), name, null);\n        converter = createConverter();\n    }\n\n    private void writeObject(java.io.ObjectOutputStream aOutputStream) throws java.io.IOException {\n        aOutputStream.defaultWriteObject();\n    }\n\n    private org.slf4j.helpers.EventDataConverter createConverter() {\n        try {\n            java.lang.Class.forName(\"org.slf4j.ext.EventData\");\n            return new org.slf4j.helpers.EventDataConverter();\n        } catch (java.lang.ClassNotFoundException cnfe) {\n            return null;\n        }\n    }\n\n    private org.apache.logging.log4j.Level getLevel(final int i) {\n        switch (i) {\n            case org.slf4j.spi.LocationAwareLogger.TRACE_INT :\n                return org.apache.logging.log4j.Level.TRACE;\n            case org.slf4j.spi.LocationAwareLogger.DEBUG_INT :\n                return org.apache.logging.log4j.Level.DEBUG;\n            case org.slf4j.spi.LocationAwareLogger.INFO_INT :\n                return org.apache.logging.log4j.Level.INFO;\n            case org.slf4j.spi.LocationAwareLogger.WARN_INT :\n                return org.apache.logging.log4j.Level.WARN;\n            case org.slf4j.spi.LocationAwareLogger.ERROR_INT :\n                return org.apache.logging.log4j.Level.ERROR;\n        }\n        return org.apache.logging.log4j.Level.ERROR;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Field",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "static",
            "src_parent": "private static final long serialVersionUID = 7869000638091304316L;",
            "src_parent_type": "Field",
            "src_type": "Wra"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Field",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "transient",
            "src_parent": "private transient org.slf4j.helpers.EventDataConverter converter;",
            "src_parent_type": "Field",
            "src_type": "Wra"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "private static final long serialVersionUID = 7869000638091304316L;",
            "dst_parent": "public class SLF4JLogger implements java.io.Serializable , org.slf4j.spi.LocationAwareLogger {\n    private static final long serialVersionUID = 7869000638091304316L;\n\n    private static final java.lang.String FQCN = org.slf4j.impl.SLF4JLogger.class.getName();\n\n    private static final org.slf4j.Marker EVENT_MARKER = org.slf4j.MarkerFactory.getMarker(\"EVENT\");\n\n    private final boolean eventLogger;\n\n    private transient org.apache.logging.log4j.spi.AbstractLoggerWrapper logger;\n\n    private final java.lang.String name;\n\n    private transient org.slf4j.helpers.EventDataConverter converter;\n\n    public SLF4JLogger(final org.apache.logging.log4j.spi.AbstractLogger logger, final java.lang.String name) {\n        this.logger = new org.apache.logging.log4j.spi.AbstractLoggerWrapper(logger, name, null);\n        this.eventLogger = \"EventLogger\".equals(name);\n        this.name = name;\n        this.converter = createConverter();\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isTraceEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isTraceEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isTraceEnabled() {\n        return logger.isTraceEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isTraceEnabled(final org.slf4j.Marker marker) {\n        return logger.isTraceEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isTraceEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isTraceEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isDebugEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isDebugEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isDebugEnabled() {\n        return logger.isDebugEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isDebugEnabled(final org.slf4j.Marker marker) {\n        return logger.isDebugEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isDebugEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isDebugEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isInfoEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isInfoEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isInfoEnabled() {\n        return logger.isInfoEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isInfoEnabled(final org.slf4j.Marker marker) {\n        return logger.isInfoEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isInfoEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isInfoEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isWarnEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isWarnEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isWarnEnabled() {\n        return logger.isWarnEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isWarnEnabled(final org.slf4j.Marker marker) {\n        return logger.isWarnEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isWarnEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isWarnEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isErrorEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isErrorEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isErrorEnabled() {\n        return logger.isErrorEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isErrorEnabled(final org.slf4j.Marker marker) {\n        return logger.isErrorEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isErrorEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isErrorEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void log(final org.slf4j.Marker marker, final java.lang.String fqcn, final int i, final java.lang.String s1, final java.lang.Object[] objects, java.lang.Throwable throwable) {\n        if (!logger.isEnabled(getLevel(i), ((org.apache.logging.log4j.Marker) (marker)), s1)) {\n            return;\n        }\n        org.apache.logging.log4j.message.Message msg;\n        if (((eventLogger && (marker != null)) && marker.contains(org.slf4j.impl.SLF4JLogger.EVENT_MARKER)) && (converter != null)) {\n            msg = converter.convertEvent(s1, objects, throwable);\n        } else if (objects == null) {\n            msg = new org.apache.logging.log4j.message.SimpleMessage(s1);\n        } else {\n            msg = new org.apache.logging.log4j.message.ParameterizedMessage(s1, objects, throwable);\n            if (throwable != null) {\n                throwable = msg.getThrowable();\n            }\n        }\n        logger.log(((org.apache.logging.log4j.Marker) (marker)), fqcn, getLevel(i), msg, throwable);\n    }\n\n    @java.lang.Override\n    public java.lang.String getName() {\n        return name;\n    }\n\n    private void readObject(java.io.ObjectInputStream aInputStream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        aInputStream.defaultReadObject();\n        logger = new org.apache.logging.log4j.spi.AbstractLoggerWrapper(((org.apache.logging.log4j.spi.AbstractLogger) (org.apache.logging.log4j.LogManager.getLogger(name))), name, null);\n        converter = createConverter();\n    }\n\n    private void writeObject(java.io.ObjectOutputStream aOutputStream) throws java.io.IOException {\n        aOutputStream.defaultWriteObject();\n    }\n\n    private org.slf4j.helpers.EventDataConverter createConverter() {\n        try {\n            java.lang.Class.forName(\"org.slf4j.ext.EventData\");\n            return new org.slf4j.helpers.EventDataConverter();\n        } catch (java.lang.ClassNotFoundException cnfe) {\n            return null;\n        }\n    }\n\n    private org.apache.logging.log4j.Level getLevel(final int i) {\n        switch (i) {\n            case org.slf4j.spi.LocationAwareLogger.TRACE_INT :\n                return org.apache.logging.log4j.Level.TRACE;\n            case org.slf4j.spi.LocationAwareLogger.DEBUG_INT :\n                return org.apache.logging.log4j.Level.DEBUG;\n            case org.slf4j.spi.LocationAwareLogger.INFO_INT :\n                return org.apache.logging.log4j.Level.INFO;\n            case org.slf4j.spi.LocationAwareLogger.WARN_INT :\n                return org.apache.logging.log4j.Level.WARN;\n            case org.slf4j.spi.LocationAwareLogger.ERROR_INT :\n                return org.apache.logging.log4j.Level.ERROR;\n        }\n        return org.apache.logging.log4j.Level.ERROR;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Field",
            "operator": "MOV",
            "src": "private final org.apache.logging.log4j.spi.AbstractLoggerWrapper logger;",
            "src_parent": "public class SLF4JLogger implements org.slf4j.spi.LocationAwareLogger {\n    private static final java.lang.String FQCN = org.slf4j.impl.SLF4JLogger.class.getName();\n\n    private static final org.slf4j.Marker EVENT_MARKER = org.slf4j.MarkerFactory.getMarker(\"EVENT\");\n\n    private final boolean eventLogger;\n\n    private final org.apache.logging.log4j.spi.AbstractLoggerWrapper logger;\n\n    private final java.lang.String name;\n\n    private final org.slf4j.helpers.EventDataConverter converter;\n\n    public SLF4JLogger(final org.apache.logging.log4j.spi.AbstractLogger logger, final java.lang.String name) {\n        this.logger = new org.apache.logging.log4j.spi.AbstractLoggerWrapper(logger, name, null);\n        this.eventLogger = \"EventLogger\".equals(name);\n        this.name = name;\n        this.converter = createConverter();\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isTraceEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isTraceEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isTraceEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isTraceEnabled() {\n        return logger.isTraceEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isTraceEnabled(final org.slf4j.Marker marker) {\n        return logger.isTraceEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isTraceEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isTraceEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void trace(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isTraceEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.TRACE, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isDebugEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isDebugEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isDebugEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isDebugEnabled() {\n        return logger.isDebugEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isDebugEnabled(final org.slf4j.Marker marker) {\n        return logger.isDebugEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isDebugEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isDebugEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void debug(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isDebugEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.DEBUG, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isInfoEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isInfoEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isInfoEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isInfoEnabled() {\n        return logger.isInfoEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isInfoEnabled(final org.slf4j.Marker marker) {\n        return logger.isInfoEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isInfoEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isInfoEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void info(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isInfoEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.INFO, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isWarnEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isWarnEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isWarnEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isWarnEnabled() {\n        return logger.isWarnEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isWarnEnabled(final org.slf4j.Marker marker) {\n        return logger.isWarnEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isWarnEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isWarnEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void warn(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isWarnEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.WARN, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(format), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object o) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.ParameterizedMessage(format, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object arg1, final java.lang.Object arg2) {\n        if (logger.isErrorEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, arg1, arg2);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Object... args) {\n        if (logger.isErrorEnabled()) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(format, args);\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final java.lang.String format, final java.lang.Throwable t) {\n        if (logger.isErrorEnabled()) {\n            logger.log(null, org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(format), t);\n        }\n    }\n\n    @java.lang.Override\n    public boolean isErrorEnabled() {\n        return logger.isErrorEnabled();\n    }\n\n    @java.lang.Override\n    public boolean isErrorEnabled(final org.slf4j.Marker marker) {\n        return logger.isErrorEnabled(((org.apache.logging.log4j.Marker) (marker)));\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(s), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.ParameterizedMessage(s, o), null);\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object o, final java.lang.Object o1) {\n        if (isErrorEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, o, o1);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Object... objects) {\n        if (isErrorEnabled(marker)) {\n            final org.apache.logging.log4j.message.ParameterizedMessage msg = new org.apache.logging.log4j.message.ParameterizedMessage(s, objects);\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, msg, msg.getThrowable());\n        }\n    }\n\n    @java.lang.Override\n    public void error(final org.slf4j.Marker marker, final java.lang.String s, final java.lang.Throwable throwable) {\n        if (isErrorEnabled(marker)) {\n            logger.log(((org.apache.logging.log4j.Marker) (marker)), org.slf4j.impl.SLF4JLogger.FQCN, org.apache.logging.log4j.Level.ERROR, new org.apache.logging.log4j.message.SimpleMessage(s), throwable);\n        }\n    }\n\n    @java.lang.Override\n    public void log(final org.slf4j.Marker marker, final java.lang.String fqcn, final int i, final java.lang.String s1, final java.lang.Object[] objects, java.lang.Throwable throwable) {\n        if (!logger.isEnabled(getLevel(i), ((org.apache.logging.log4j.Marker) (marker)), s1)) {\n            return;\n        }\n        org.apache.logging.log4j.message.Message msg;\n        if (((eventLogger && (marker != null)) && marker.contains(org.slf4j.impl.SLF4JLogger.EVENT_MARKER)) && (converter != null)) {\n            msg = converter.convertEvent(s1, objects, throwable);\n        } else if (objects == null) {\n            msg = new org.apache.logging.log4j.message.SimpleMessage(s1);\n        } else {\n            msg = new org.apache.logging.log4j.message.ParameterizedMessage(s1, objects, throwable);\n            if (throwable != null) {\n                throwable = msg.getThrowable();\n            }\n        }\n        logger.log(((org.apache.logging.log4j.Marker) (marker)), fqcn, getLevel(i), msg, throwable);\n    }\n\n    @java.lang.Override\n    public java.lang.String getName() {\n        return name;\n    }\n\n    private org.slf4j.helpers.EventDataConverter createConverter() {\n        try {\n            java.lang.Class.forName(\"org.slf4j.ext.EventData\");\n            return new org.slf4j.helpers.EventDataConverter();\n        } catch (java.lang.ClassNotFoundException cnfe) {\n            return null;\n        }\n    }\n\n    private org.apache.logging.log4j.Level getLevel(final int i) {\n        switch (i) {\n            case org.slf4j.spi.LocationAwareLogger.TRACE_INT :\n                return org.apache.logging.log4j.Level.TRACE;\n            case org.slf4j.spi.LocationAwareLogger.DEBUG_INT :\n                return org.apache.logging.log4j.Level.DEBUG;\n            case org.slf4j.spi.LocationAwareLogger.INFO_INT :\n                return org.apache.logging.log4j.Level.INFO;\n            case org.slf4j.spi.LocationAwareLogger.WARN_INT :\n                return org.apache.logging.log4j.Level.WARN;\n            case org.slf4j.spi.LocationAwareLogger.ERROR_INT :\n                return org.apache.logging.log4j.Level.ERROR;\n        }\n        return org.apache.logging.log4j.Level.ERROR;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        }
      ],
      "file_name": "SLF4JLogger"
    }
  ],
  "id": "logging-log4j2_8f0c4871"
}