{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "@java.lang.SuppressWarnings(\"deprecation\")\nprivate void copyCustomPrivileges(org.apache.jackrabbit.oak.spi.state.NodeBuilder root) {\n    org.apache.jackrabbit.core.security.authorization.PrivilegeRegistry registry = source.getPrivilegeRegistry();\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder privileges = root.child(org.apache.jackrabbit.JcrConstants.JCR_SYSTEM).child(org.apache.jackrabbit.oak.upgrade.REP_PRIVILEGES);\n    privileges.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.oak.upgrade.NT_REP_PRIVILEGES, org.apache.jackrabbit.oak.upgrade.NAME);\n    org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits next = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.NEXT_AFTER_BUILT_INS;\n    org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Copying registered privileges\");\n    for (javax.jcr.security.Privilege privilege : registry.getRegisteredPrivileges()) {\n        java.lang.String name = privilege.getName();\n        if (PrivilegeBits.BUILT_IN.containsKey(name) || org.apache.jackrabbit.oak.upgrade.JCR_ALL.equals(name)) {\n            continue;\n        }\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder def = privileges.child(name);\n        def.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.oak.upgrade.NT_REP_PRIVILEGE, org.apache.jackrabbit.oak.upgrade.NAME);\n        if (privilege.isAbstract()) {\n            def.setProperty(org.apache.jackrabbit.oak.upgrade.REP_IS_ABSTRACT, true);\n        }\n        javax.jcr.security.Privilege[] aggregate = privilege.getDeclaredAggregatePrivileges();\n        if (aggregate.length > 0) {\n            java.util.List<java.lang.String> names = com.google.common.collect.Lists.newArrayListWithCapacity(aggregate.length);\n            for (javax.jcr.security.Privilege p : aggregate) {\n                names.add(p.getName());\n            }\n            def.setProperty(org.apache.jackrabbit.oak.upgrade.REP_AGGREGATES, names, org.apache.jackrabbit.oak.upgrade.NAMES);\n        }\n        org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits bits = PrivilegeBits.BUILT_IN.get(name);\n        if (bits != null) {\n            def.setProperty(bits.asPropertyState(org.apache.jackrabbit.oak.upgrade.REP_BITS));\n        } else if (aggregate.length == 0) {\n            bits = next;\n            next = next.nextBits();\n            def.setProperty(bits.asPropertyState(org.apache.jackrabbit.oak.upgrade.REP_BITS));\n        }\n    }\n    privileges.setProperty(next.asPropertyState(org.apache.jackrabbit.oak.upgrade.REP_NEXT));\n    for (java.lang.String name : privileges.getChildNodeNames()) {\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.resolvePrivilegeBits(privileges, name);\n    }\n}",
            "dst_parent": "public class RepositoryUpgrade {\n    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.class);\n\n    private final org.apache.jackrabbit.core.RepositoryContext source;\n\n    private final org.apache.jackrabbit.oak.spi.state.NodeStore target;\n\n    private boolean copyBinariesByReference = false;\n\n    public static void copy(java.io.File source, org.apache.jackrabbit.oak.spi.state.NodeStore target) throws javax.jcr.RepositoryException {\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.copy(org.apache.jackrabbit.core.config.RepositoryConfig.create(source), target);\n    }\n\n    public static void copy(org.apache.jackrabbit.core.config.RepositoryConfig source, org.apache.jackrabbit.oak.spi.state.NodeStore target) throws javax.jcr.RepositoryException {\n        org.apache.jackrabbit.core.RepositoryContext context = org.apache.jackrabbit.core.RepositoryContext.create(source);\n        try {\n            new org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade(context, target).copy(null);\n        } finally {\n            context.getRepository().shutdown();\n        }\n    }\n\n    public RepositoryUpgrade(org.apache.jackrabbit.core.RepositoryContext source, org.apache.jackrabbit.oak.spi.state.NodeStore target) {\n        this.source = source;\n        this.target = target;\n    }\n\n    public boolean isCopyBinariesByReference() {\n        return copyBinariesByReference;\n    }\n\n    public void setCopyBinariesByReference(boolean copyBinariesByReference) {\n        this.copyBinariesByReference = copyBinariesByReference;\n    }\n\n    public void copy(org.apache.jackrabbit.oak.spi.lifecycle.RepositoryInitializer initializer) throws javax.jcr.RepositoryException {\n        org.apache.jackrabbit.core.config.RepositoryConfig config = source.getRepositoryConfig();\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Copying repository content from {} to Oak\", config.getHomeDir());\n        try {\n            org.apache.jackrabbit.oak.spi.state.NodeState base = target.getRoot();\n            org.apache.jackrabbit.oak.spi.state.NodeBuilder builder = base.builder();\n            java.lang.String workspaceName = source.getRepositoryConfig().getDefaultWorkspaceName();\n            org.apache.jackrabbit.oak.security.SecurityProviderImpl security = new org.apache.jackrabbit.oak.security.SecurityProviderImpl(mapSecurityConfig(config.getSecurityConfig()));\n            new org.apache.jackrabbit.oak.plugins.nodetype.write.InitialContent().initialize(builder);\n            if (initializer != null) {\n                initializer.initialize(builder);\n            }\n            for (org.apache.jackrabbit.oak.spi.security.SecurityConfiguration sc : security.getConfigurations()) {\n                sc.getRepositoryInitializer().initialize(builder);\n            }\n            for (org.apache.jackrabbit.oak.spi.security.SecurityConfiguration sc : security.getConfigurations()) {\n                sc.getWorkspaceInitializer().initialize(builder, workspaceName);\n            }\n            com.google.common.collect.HashBiMap<java.lang.String, java.lang.String> uriToPrefix = com.google.common.collect.HashBiMap.create();\n            java.util.Map<java.lang.Integer, java.lang.String> idxToPrefix = com.google.common.collect.Maps.newHashMap();\n            copyNamespaces(builder, uriToPrefix, idxToPrefix);\n            copyNodeTypes(builder, uriToPrefix.inverse());\n            copyCustomPrivileges(builder);\n            new org.apache.jackrabbit.oak.plugins.nodetype.TypeEditorProvider(false).getRootEditor(base, builder.getNodeState(), builder, null);\n            java.util.Map<java.lang.String, java.lang.String> versionablePaths = com.google.common.collect.Maps.newHashMap();\n            org.apache.jackrabbit.oak.spi.state.NodeState root = builder.getNodeState();\n            copyWorkspace(builder, root, workspaceName, uriToPrefix, idxToPrefix, versionablePaths);\n            copyVersionStore(builder, root, workspaceName, uriToPrefix, idxToPrefix, versionablePaths);\n            org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Applying default commit hooks\");\n            java.util.List<org.apache.jackrabbit.oak.spi.commit.CommitHook> hooks = com.google.common.collect.Lists.newArrayList();\n            org.apache.jackrabbit.oak.spi.security.user.UserConfiguration userConf = security.getConfiguration(org.apache.jackrabbit.oak.spi.security.user.UserConfiguration.class);\n            java.lang.String groupsPath = userConf.getParameters().getConfigValue(UserConstants.PARAM_GROUP_PATH, UserConstants.DEFAULT_GROUP_PATH);\n            hooks.add(new org.apache.jackrabbit.oak.spi.commit.EditorHook(new org.apache.jackrabbit.oak.spi.commit.CompositeEditorProvider(new org.apache.jackrabbit.oak.upgrade.security.RestrictionEditorProvider(), new org.apache.jackrabbit.oak.upgrade.security.GroupEditorProvider(groupsPath))));\n            for (org.apache.jackrabbit.oak.spi.security.SecurityConfiguration sc : security.getConfigurations()) {\n                hooks.addAll(sc.getCommitHooks(workspaceName));\n            }\n            hooks.add(new org.apache.jackrabbit.oak.spi.commit.EditorHook(new org.apache.jackrabbit.oak.spi.commit.CompositeEditorProvider(org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.createTypeEditorProvider(), org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.createIndexEditorProvider())));\n            target.merge(builder, org.apache.jackrabbit.oak.spi.commit.CompositeHook.compose(hooks), CommitInfo.EMPTY);\n        } catch (java.lang.Exception e) {\n            throw new javax.jcr.RepositoryException(\"Failed to copy content\", e);\n        }\n    }\n\n    private static org.apache.jackrabbit.oak.spi.commit.EditorProvider createTypeEditorProvider() {\n        return new org.apache.jackrabbit.oak.spi.commit.EditorProvider() {\n            @java.lang.Override\n            public org.apache.jackrabbit.oak.spi.commit.Editor getRootEditor(org.apache.jackrabbit.oak.spi.state.NodeState before, org.apache.jackrabbit.oak.spi.state.NodeState after, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder, org.apache.jackrabbit.oak.spi.commit.CommitInfo info) throws org.apache.jackrabbit.oak.api.CommitFailedException {\n                org.apache.jackrabbit.oak.spi.commit.Editor rootEditor = new org.apache.jackrabbit.oak.plugins.nodetype.TypeEditorProvider(false).getRootEditor(before, after, builder, info);\n                return org.apache.jackrabbit.oak.upgrade.ProgressNotificationEditor.wrap(rootEditor, org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger, \"Checking node types:\");\n            }\n        };\n    }\n\n    private static org.apache.jackrabbit.oak.spi.commit.EditorProvider createIndexEditorProvider() {\n        final org.apache.jackrabbit.oak.upgrade.ProgressTicker ticker = new org.apache.jackrabbit.oak.upgrade.AsciiArtTicker();\n        return new org.apache.jackrabbit.oak.spi.commit.EditorProvider() {\n            @java.lang.Override\n            public org.apache.jackrabbit.oak.spi.commit.Editor getRootEditor(org.apache.jackrabbit.oak.spi.state.NodeState before, org.apache.jackrabbit.oak.spi.state.NodeState after, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder, org.apache.jackrabbit.oak.spi.commit.CommitInfo info) {\n                org.apache.jackrabbit.oak.plugins.index.IndexEditorProvider editorProviders = new org.apache.jackrabbit.oak.plugins.index.CompositeIndexEditorProvider(new org.apache.jackrabbit.oak.plugins.index.reference.ReferenceEditorProvider(), new org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexEditorProvider());\n                return new org.apache.jackrabbit.oak.plugins.index.IndexUpdate(editorProviders, null, after, builder, new org.apache.jackrabbit.oak.plugins.index.IndexUpdateCallback() {\n                    java.lang.String progress = \"Updating indexes \";\n\n                    long t0;\n\n                    @java.lang.Override\n                    public void indexUpdate() {\n                        long t = java.lang.System.currentTimeMillis();\n                        if ((t - t0) > 2000) {\n                            org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"{} {}\", progress, ticker.tick());\n                            t0 = t;\n                        }\n                    }\n                });\n            }\n        };\n    }\n\n    protected org.apache.jackrabbit.oak.spi.security.ConfigurationParameters mapSecurityConfig(org.apache.jackrabbit.core.config.SecurityConfig config) {\n        org.apache.jackrabbit.oak.spi.security.ConfigurationParameters loginConfig = mapConfigurationParameters(config.getLoginModuleConfig(), LoginModuleConfig.PARAM_ADMIN_ID, UserConstants.PARAM_ADMIN_ID, LoginModuleConfig.PARAM_ANONYMOUS_ID, UserConstants.PARAM_ANONYMOUS_ID);\n        org.apache.jackrabbit.oak.spi.security.ConfigurationParameters userConfig = mapConfigurationParameters(config.getSecurityManagerConfig().getUserManagerConfig(), UserManagerImpl.PARAM_USERS_PATH, UserConstants.PARAM_USER_PATH, UserManagerImpl.PARAM_GROUPS_PATH, UserConstants.PARAM_GROUP_PATH, UserManagerImpl.PARAM_DEFAULT_DEPTH, UserConstants.PARAM_DEFAULT_DEPTH, UserManagerImpl.PARAM_PASSWORD_HASH_ALGORITHM, UserConstants.PARAM_PASSWORD_HASH_ALGORITHM, UserManagerImpl.PARAM_PASSWORD_HASH_ITERATIONS, UserConstants.PARAM_PASSWORD_HASH_ITERATIONS);\n        return org.apache.jackrabbit.oak.spi.security.ConfigurationParameters.of(com.google.common.collect.ImmutableMap.of(UserConfiguration.NAME, org.apache.jackrabbit.oak.spi.security.ConfigurationParameters.of(loginConfig, userConfig)));\n    }\n\n    protected org.apache.jackrabbit.oak.spi.security.ConfigurationParameters mapConfigurationParameters(org.apache.jackrabbit.core.config.BeanConfig config, java.lang.String... mapping) {\n        java.util.Map<java.lang.String, java.lang.String> map = com.google.common.collect.Maps.newHashMap();\n        if (config != null) {\n            java.util.Properties properties = config.getParameters();\n            for (int i = 0; (i + 1) < mapping.length; i += 2) {\n                java.lang.String value = properties.getProperty(mapping[i]);\n                if (value != null) {\n                    map.put(mapping[i + 1], value);\n                }\n            }\n        }\n        return org.apache.jackrabbit.oak.spi.security.ConfigurationParameters.of(map);\n    }\n\n    private java.lang.String getOakName(org.apache.jackrabbit.spi.Name name) throws javax.jcr.NamespaceException {\n        java.lang.String uri = name.getNamespaceURI();\n        java.lang.String local = name.getLocalName();\n        if ((uri == null) || uri.isEmpty()) {\n            return local;\n        } else {\n            return (source.getNamespaceRegistry().getPrefix(uri) + \":\") + local;\n        }\n    }\n\n    private void copyNamespaces(org.apache.jackrabbit.oak.spi.state.NodeBuilder root, java.util.Map<java.lang.String, java.lang.String> uriToPrefix, java.util.Map<java.lang.Integer, java.lang.String> idxToPrefix) throws javax.jcr.RepositoryException {\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder system = root.child(org.apache.jackrabbit.JcrConstants.JCR_SYSTEM);\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder namespaces = system.child(NamespaceConstants.REP_NAMESPACES);\n        java.util.Properties registry = loadProperties(\"/namespaces/ns_reg.properties\");\n        java.util.Properties indexes = loadProperties(\"/namespaces/ns_idx.properties\");\n        for (java.lang.String prefixHint : registry.stringPropertyNames()) {\n            java.lang.String prefix;\n            java.lang.String uri = registry.getProperty(prefixHint);\n            if (\".empty.key\".equals(prefixHint)) {\n                prefix = \"\";\n            } else {\n                prefix = addCustomMapping(namespaces, uri, prefixHint);\n            }\n            java.lang.String index = null;\n            if (uri.isEmpty()) {\n                index = indexes.getProperty(\".empty.key\");\n            }\n            if (index == null) {\n                index = indexes.getProperty(uri);\n            }\n            java.lang.Integer idx;\n            if (index != null) {\n                idx = java.lang.Integer.decode(index);\n            } else {\n                int i = 0;\n                do {\n                    idx = (uri.hashCode() + (i++)) & 0xffffff;\n                } while (idxToPrefix.containsKey(idx) );\n            }\n            com.google.common.base.Preconditions.checkState(uriToPrefix.put(uri, prefix) == null);\n            com.google.common.base.Preconditions.checkState(idxToPrefix.put(idx, prefix) == null);\n        }\n        org.apache.jackrabbit.oak.plugins.name.Namespaces.buildIndexNode(namespaces);\n    }\n\n    private java.util.Properties loadProperties(java.lang.String path) throws javax.jcr.RepositoryException {\n        java.util.Properties properties = new java.util.Properties();\n        org.apache.jackrabbit.core.fs.FileSystem filesystem = source.getFileSystem();\n        try {\n            if (filesystem.exists(path)) {\n                java.io.InputStream stream = filesystem.getInputStream(path);\n                try {\n                    properties.load(stream);\n                } finally {\n                    stream.close();\n                }\n            }\n        } catch (org.apache.jackrabbit.core.fs.FileSystemException e) {\n            throw new javax.jcr.RepositoryException(e);\n        } catch (java.io.IOException e) {\n            throw new javax.jcr.RepositoryException(e);\n        }\n        return properties;\n    }\n\n    @java.lang.SuppressWarnings(\"deprecation\")\n    private void copyCustomPrivileges(org.apache.jackrabbit.oak.spi.state.NodeBuilder root) {\n        org.apache.jackrabbit.core.security.authorization.PrivilegeRegistry registry = source.getPrivilegeRegistry();\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder privileges = root.child(org.apache.jackrabbit.JcrConstants.JCR_SYSTEM).child(org.apache.jackrabbit.oak.upgrade.REP_PRIVILEGES);\n        privileges.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.oak.upgrade.NT_REP_PRIVILEGES, org.apache.jackrabbit.oak.upgrade.NAME);\n        org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits next = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.NEXT_AFTER_BUILT_INS;\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Copying registered privileges\");\n        for (javax.jcr.security.Privilege privilege : registry.getRegisteredPrivileges()) {\n            java.lang.String name = privilege.getName();\n            if (PrivilegeBits.BUILT_IN.containsKey(name) || org.apache.jackrabbit.oak.upgrade.JCR_ALL.equals(name)) {\n                continue;\n            }\n            org.apache.jackrabbit.oak.spi.state.NodeBuilder def = privileges.child(name);\n            def.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.oak.upgrade.NT_REP_PRIVILEGE, org.apache.jackrabbit.oak.upgrade.NAME);\n            if (privilege.isAbstract()) {\n                def.setProperty(org.apache.jackrabbit.oak.upgrade.REP_IS_ABSTRACT, true);\n            }\n            javax.jcr.security.Privilege[] aggregate = privilege.getDeclaredAggregatePrivileges();\n            if (aggregate.length > 0) {\n                java.util.List<java.lang.String> names = com.google.common.collect.Lists.newArrayListWithCapacity(aggregate.length);\n                for (javax.jcr.security.Privilege p : aggregate) {\n                    names.add(p.getName());\n                }\n                def.setProperty(org.apache.jackrabbit.oak.upgrade.REP_AGGREGATES, names, org.apache.jackrabbit.oak.upgrade.NAMES);\n            }\n            org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits bits = PrivilegeBits.BUILT_IN.get(name);\n            if (bits != null) {\n                def.setProperty(bits.asPropertyState(org.apache.jackrabbit.oak.upgrade.REP_BITS));\n            } else if (aggregate.length == 0) {\n                bits = next;\n                next = next.nextBits();\n                def.setProperty(bits.asPropertyState(org.apache.jackrabbit.oak.upgrade.REP_BITS));\n            }\n        }\n        privileges.setProperty(next.asPropertyState(org.apache.jackrabbit.oak.upgrade.REP_NEXT));\n        for (java.lang.String name : privileges.getChildNodeNames()) {\n            org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.resolvePrivilegeBits(privileges, name);\n        }\n    }\n\n    private static org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits resolvePrivilegeBits(org.apache.jackrabbit.oak.spi.state.NodeBuilder privileges, java.lang.String name) {\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder def = privileges.getChildNode(name);\n        org.apache.jackrabbit.oak.api.PropertyState b = def.getProperty(org.apache.jackrabbit.oak.upgrade.REP_BITS);\n        if (b != null) {\n            return org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.getInstance(b);\n        }\n        org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits bits = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.getInstance();\n        for (java.lang.String n : def.getNames(org.apache.jackrabbit.oak.upgrade.REP_AGGREGATES)) {\n            bits.add(org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.resolvePrivilegeBits(privileges, n));\n        }\n        def.setProperty(bits.asPropertyState(org.apache.jackrabbit.oak.upgrade.REP_BITS));\n        return bits;\n    }\n\n    private void copyNodeTypes(org.apache.jackrabbit.oak.spi.state.NodeBuilder root, java.util.Map<java.lang.String, java.lang.String> prefixToUri) throws javax.jcr.RepositoryException {\n        org.apache.jackrabbit.core.nodetype.NodeTypeRegistry sourceRegistry = source.getNodeTypeRegistry();\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder system = root.child(org.apache.jackrabbit.JcrConstants.JCR_SYSTEM);\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder types = system.child(org.apache.jackrabbit.oak.upgrade.JCR_NODE_TYPES);\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Copying registered node types\");\n        for (org.apache.jackrabbit.spi.Name name : sourceRegistry.getRegisteredNodeTypes()) {\n            java.lang.String oakName = getOakName(name);\n            if (!types.hasChildNode(oakName)) {\n                org.apache.jackrabbit.spi.QNodeTypeDefinition def = sourceRegistry.getNodeTypeDef(name);\n                org.apache.jackrabbit.oak.spi.state.NodeBuilder type = types.child(oakName);\n                copyNodeType(def, type, prefixToUri);\n            }\n        }\n    }\n\n    private void copyNodeType(org.apache.jackrabbit.spi.QNodeTypeDefinition def, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder, java.util.Map<java.lang.String, java.lang.String> prefixToUri) throws javax.jcr.RepositoryException {\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.JcrConstants.NT_NODETYPE, org.apache.jackrabbit.oak.upgrade.NAME);\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_NODETYPENAME, getOakName(def.getName()), org.apache.jackrabbit.oak.upgrade.NAME);\n        org.apache.jackrabbit.spi.Name[] supertypes = def.getSupertypes();\n        if ((supertypes != null) && (supertypes.length > 0)) {\n            java.util.List<java.lang.String> names = com.google.common.collect.Lists.newArrayListWithCapacity(supertypes.length);\n            for (org.apache.jackrabbit.spi.Name supertype : supertypes) {\n                names.add(getOakName(supertype));\n            }\n            builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_SUPERTYPES, names, org.apache.jackrabbit.oak.upgrade.NAMES);\n        }\n        builder.setProperty(org.apache.jackrabbit.oak.upgrade.JCR_IS_ABSTRACT, def.isAbstract());\n        builder.setProperty(org.apache.jackrabbit.oak.upgrade.JCR_IS_QUERYABLE, def.isQueryable());\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_ISMIXIN, def.isMixin());\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_HASORDERABLECHILDNODES, def.hasOrderableChildNodes());\n        org.apache.jackrabbit.spi.Name primary = def.getPrimaryItemName();\n        if (primary != null) {\n            builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYITEMNAME, getOakName(primary), org.apache.jackrabbit.oak.upgrade.NAME);\n        }\n        org.apache.jackrabbit.spi.QPropertyDefinition[] properties = def.getPropertyDefs();\n        for (int i = 0; i < properties.length; i++) {\n            java.lang.String name = ((org.apache.jackrabbit.JcrConstants.JCR_PROPERTYDEFINITION + '[') + (i + 1)) + ']';\n            copyPropertyDefinition(properties[i], builder.child(name), prefixToUri);\n        }\n        org.apache.jackrabbit.spi.QNodeDefinition[] childNodes = def.getChildNodeDefs();\n        for (int i = 0; i < childNodes.length; i++) {\n            java.lang.String name = ((org.apache.jackrabbit.JcrConstants.JCR_CHILDNODEDEFINITION + '[') + (i + 1)) + ']';\n            copyChildNodeDefinition(childNodes[i], builder.child(name));\n        }\n    }\n\n    private void copyPropertyDefinition(org.apache.jackrabbit.spi.QPropertyDefinition def, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder, java.util.Map<java.lang.String, java.lang.String> prefixToUri) throws javax.jcr.RepositoryException {\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.JcrConstants.NT_PROPERTYDEFINITION, org.apache.jackrabbit.oak.upgrade.NAME);\n        copyItemDefinition(def, builder);\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_REQUIREDTYPE, org.apache.jackrabbit.oak.api.Type.fromTag(def.getRequiredType(), false).toString());\n        org.apache.jackrabbit.spi.QValueConstraint[] constraints = def.getValueConstraints();\n        if ((constraints != null) && (constraints.length > 0)) {\n            java.util.List<java.lang.String> strings = com.google.common.collect.Lists.newArrayListWithCapacity(constraints.length);\n            for (org.apache.jackrabbit.spi.QValueConstraint constraint : constraints) {\n                strings.add(constraint.getString());\n            }\n            builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_VALUECONSTRAINTS, strings, org.apache.jackrabbit.oak.upgrade.STRINGS);\n        }\n        org.apache.jackrabbit.spi.QValue[] qValues = def.getDefaultValues();\n        if (qValues != null) {\n            org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.copyDefaultValues(qValues, builder, new org.apache.jackrabbit.oak.namepath.GlobalNameMapper(prefixToUri));\n        }\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_MULTIPLE, def.isMultiple());\n        java.util.List<java.lang.String> operators = java.util.Arrays.asList(def.getAvailableQueryOperators());\n        builder.setProperty(org.apache.jackrabbit.oak.upgrade.JCR_AVAILABLE_QUERY_OPERATORS, operators, org.apache.jackrabbit.oak.upgrade.NAMES);\n        builder.setProperty(org.apache.jackrabbit.oak.upgrade.JCR_IS_FULLTEXT_SEARCHABLE, def.isFullTextSearchable());\n        builder.setProperty(org.apache.jackrabbit.oak.upgrade.JCR_IS_QUERY_ORDERABLE, def.isQueryOrderable());\n    }\n\n    private static void copyDefaultValues(org.apache.jackrabbit.spi.QValue[] qValues, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder, org.apache.jackrabbit.oak.namepath.NameMapper nameMapper) throws javax.jcr.RepositoryException {\n        if (qValues.length == 0) {\n            builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTVALUES, java.util.Collections.<java.lang.String>emptyList(), org.apache.jackrabbit.oak.upgrade.STRINGS);\n        } else {\n            int type = qValues[0].getType();\n            switch (type) {\n                case javax.jcr.PropertyType.STRING :\n                    java.util.List<java.lang.String> strings = com.google.common.collect.Lists.newArrayListWithCapacity(qValues.length);\n                    for (org.apache.jackrabbit.spi.QValue qValue : qValues) {\n                        strings.add(qValue.getString());\n                    }\n                    builder.setProperty(createProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTVALUES, strings, org.apache.jackrabbit.oak.upgrade.STRINGS));\n                    return;\n                case javax.jcr.PropertyType.LONG :\n                    java.util.List<java.lang.Long> longs = com.google.common.collect.Lists.newArrayListWithCapacity(qValues.length);\n                    for (org.apache.jackrabbit.spi.QValue qValue : qValues) {\n                        longs.add(qValue.getLong());\n                    }\n                    builder.setProperty(createProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTVALUES, longs, org.apache.jackrabbit.oak.upgrade.LONGS));\n                    return;\n                case javax.jcr.PropertyType.DOUBLE :\n                    java.util.List<java.lang.Double> doubles = com.google.common.collect.Lists.newArrayListWithCapacity(qValues.length);\n                    for (org.apache.jackrabbit.spi.QValue qValue : qValues) {\n                        doubles.add(qValue.getDouble());\n                    }\n                    builder.setProperty(createProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTVALUES, doubles, org.apache.jackrabbit.oak.upgrade.DOUBLES));\n                    return;\n                case javax.jcr.PropertyType.BOOLEAN :\n                    java.util.List<java.lang.Boolean> booleans = com.google.common.collect.Lists.newArrayListWithCapacity(qValues.length);\n                    for (org.apache.jackrabbit.spi.QValue qValue : qValues) {\n                        booleans.add(qValue.getBoolean());\n                    }\n                    builder.setProperty(createProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTVALUES, booleans, org.apache.jackrabbit.oak.upgrade.BOOLEANS));\n                    return;\n                case javax.jcr.PropertyType.NAME :\n                    java.util.List<java.lang.String> names = com.google.common.collect.Lists.newArrayListWithCapacity(qValues.length);\n                    for (org.apache.jackrabbit.spi.QValue qValue : qValues) {\n                        names.add(nameMapper.getOakName(qValue.getName().toString()));\n                    }\n                    builder.setProperty(createProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTVALUES, names, org.apache.jackrabbit.oak.upgrade.NAMES));\n                    return;\n                case javax.jcr.PropertyType.PATH :\n                    java.util.List<java.lang.String> paths = com.google.common.collect.Lists.newArrayListWithCapacity(qValues.length);\n                    for (org.apache.jackrabbit.spi.QValue qValue : qValues) {\n                        paths.add(org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.getOakPath(qValue.getPath(), nameMapper));\n                    }\n                    builder.setProperty(createProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTVALUES, paths, org.apache.jackrabbit.oak.upgrade.PATHS));\n                    return;\n                case javax.jcr.PropertyType.DECIMAL :\n                    java.util.List<java.math.BigDecimal> decimals = com.google.common.collect.Lists.newArrayListWithCapacity(qValues.length);\n                    for (org.apache.jackrabbit.spi.QValue qValue : qValues) {\n                        decimals.add(qValue.getDecimal());\n                    }\n                    builder.setProperty(createProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTVALUES, decimals, org.apache.jackrabbit.oak.upgrade.DECIMALS));\n                    return;\n                case javax.jcr.PropertyType.DATE :\n                case javax.jcr.PropertyType.URI :\n                    java.util.List<java.lang.String> values = com.google.common.collect.Lists.newArrayListWithCapacity(qValues.length);\n                    for (org.apache.jackrabbit.spi.QValue qValue : qValues) {\n                        values.add(qValue.getString());\n                    }\n                    builder.setProperty(createProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTVALUES, values, org.apache.jackrabbit.oak.api.Type.fromTag(type, true)));\n                    return;\n                default :\n                    throw new javax.jcr.UnsupportedRepositoryOperationException(\"Cannot copy default value of type \" + org.apache.jackrabbit.oak.api.Type.fromTag(type, true));\n            }\n        }\n    }\n\n    private static java.lang.String getOakPath(org.apache.jackrabbit.spi.Path path, org.apache.jackrabbit.oak.namepath.NameMapper nameMapper) throws javax.jcr.RepositoryException {\n        java.lang.StringBuilder oakPath = new java.lang.StringBuilder();\n        java.lang.String sep = \"\";\n        for (org.apache.jackrabbit.spi.Path.Element element : path.getElements()) {\n            if (element.denotesRoot()) {\n                oakPath.append('/');\n                continue;\n            } else if (element.denotesName()) {\n                oakPath.append(sep).append(nameMapper.getOakName(element.getString()));\n            } else if (element.denotesCurrent()) {\n                oakPath.append(sep).append('.');\n            } else if (element.denotesParent()) {\n                oakPath.append(sep).append(\"..\");\n            } else {\n                throw new javax.jcr.UnsupportedRepositoryOperationException(\"Cannot copy default value \" + path);\n            }\n            sep = \"/\";\n        }\n        return oakPath.toString();\n    }\n\n    private void copyChildNodeDefinition(org.apache.jackrabbit.spi.QNodeDefinition def, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder) throws javax.jcr.NamespaceException {\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.JcrConstants.NT_CHILDNODEDEFINITION, org.apache.jackrabbit.oak.upgrade.NAME);\n        copyItemDefinition(def, builder);\n        org.apache.jackrabbit.spi.Name[] types = def.getRequiredPrimaryTypes();\n        java.util.List<java.lang.String> names = com.google.common.collect.Lists.newArrayListWithCapacity(types.length);\n        for (org.apache.jackrabbit.spi.Name type : types) {\n            names.add(getOakName(type));\n        }\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_REQUIREDPRIMARYTYPES, names, org.apache.jackrabbit.oak.upgrade.NAMES);\n        org.apache.jackrabbit.spi.Name type = def.getDefaultPrimaryType();\n        if (type != null) {\n            builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTPRIMARYTYPE, getOakName(type), org.apache.jackrabbit.oak.upgrade.NAME);\n        }\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_SAMENAMESIBLINGS, def.allowsSameNameSiblings());\n    }\n\n    private void copyItemDefinition(org.apache.jackrabbit.spi.QItemDefinition def, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder) throws javax.jcr.NamespaceException {\n        org.apache.jackrabbit.spi.Name name = def.getName();\n        if ((name != null) && (!name.equals(org.apache.jackrabbit.oak.upgrade.ANY_NAME))) {\n            builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_NAME, getOakName(name), org.apache.jackrabbit.oak.upgrade.NAME);\n        }\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_AUTOCREATED, def.isAutoCreated());\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_MANDATORY, def.isMandatory());\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_ONPARENTVERSION, javax.jcr.version.OnParentVersionAction.nameFromValue(def.getOnParentVersion()));\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PROTECTED, def.isProtected());\n    }\n\n    private void copyVersionStore(org.apache.jackrabbit.oak.spi.state.NodeBuilder builder, org.apache.jackrabbit.oak.spi.state.NodeState root, java.lang.String workspaceName, java.util.Map<java.lang.String, java.lang.String> uriToPrefix, java.util.Map<java.lang.Integer, java.lang.String> idxToPrefix, java.util.Map<java.lang.String, java.lang.String> versionablePaths) throws java.io.IOException, javax.jcr.RepositoryException {\n        org.apache.jackrabbit.core.persistence.PersistenceManager pm = source.getInternalVersionManager().getPersistenceManager();\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder system = builder.child(org.apache.jackrabbit.JcrConstants.JCR_SYSTEM);\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Copying version histories\");\n        copyState(system, org.apache.jackrabbit.JcrConstants.JCR_VERSIONSTORAGE, new org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState(pm, root, uriToPrefix, VERSION_STORAGE_NODE_ID, \"/jcr:system/jcr:versionStorage\", workspaceName, versionablePaths, copyBinariesByReference));\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Copying activities\");\n        copyState(system, \"jcr:activities\", new org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState(pm, root, uriToPrefix, ACTIVITIES_NODE_ID, \"/jcr:system/jcr:activities\", workspaceName, versionablePaths, copyBinariesByReference));\n    }\n\n    private java.lang.String copyWorkspace(org.apache.jackrabbit.oak.spi.state.NodeBuilder builder, org.apache.jackrabbit.oak.spi.state.NodeState root, java.lang.String workspaceName, java.util.Map<java.lang.String, java.lang.String> uriToPrefix, java.util.Map<java.lang.Integer, java.lang.String> idxToPrefix, java.util.Map<java.lang.String, java.lang.String> versionablePaths) throws java.io.IOException, javax.jcr.RepositoryException {\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Copying workspace {}\", workspaceName);\n        org.apache.jackrabbit.core.persistence.PersistenceManager pm = source.getWorkspaceInfo(workspaceName).getPersistenceManager();\n        org.apache.jackrabbit.oak.spi.state.NodeState state = new org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState(pm, root, uriToPrefix, ROOT_NODE_ID, \"/\", workspaceName, versionablePaths, copyBinariesByReference);\n        for (org.apache.jackrabbit.oak.api.PropertyState property : state.getProperties()) {\n            builder.setProperty(property);\n        }\n        for (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry child : state.getChildNodeEntries()) {\n            java.lang.String childName = child.getName();\n            if (!org.apache.jackrabbit.JcrConstants.JCR_SYSTEM.equals(childName)) {\n                org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Copying subtree /{}\", childName);\n                copyState(builder, childName, child.getNodeState());\n            }\n        }\n        return workspaceName;\n    }\n\n    private void copyState(org.apache.jackrabbit.oak.spi.state.NodeBuilder parent, java.lang.String name, org.apache.jackrabbit.oak.spi.state.NodeState state) {\n        if (parent instanceof org.apache.jackrabbit.oak.plugins.segment.SegmentNodeBuilder) {\n            parent.setChildNode(name, state);\n        } else {\n            setChildNode(parent, name, state);\n        }\n    }\n\n    private void setChildNode(org.apache.jackrabbit.oak.spi.state.NodeBuilder parent, java.lang.String name, org.apache.jackrabbit.oak.spi.state.NodeState state) {\n        if ((name.length() > 37) && (name.getBytes(com.google.common.base.Charsets.UTF_8).length > 150)) {\n            org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.warn(\"Node name too long. Skipping {}\", state);\n            return;\n        }\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder builder = parent.setChildNode(name);\n        for (org.apache.jackrabbit.oak.api.PropertyState property : state.getProperties()) {\n            builder.setProperty(property);\n        }\n        for (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry child : state.getChildNodeEntries()) {\n            setChildNode(builder, child.getName(), child.getNodeState());\n        }\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "@java.lang.SuppressWarnings(\"deprecation\")\nprivate void copyPrivileges(org.apache.jackrabbit.oak.spi.state.NodeBuilder root) throws javax.jcr.RepositoryException {\n    org.apache.jackrabbit.core.security.authorization.PrivilegeRegistry registry = source.getPrivilegeRegistry();\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder privileges = root.child(org.apache.jackrabbit.JcrConstants.JCR_SYSTEM).child(org.apache.jackrabbit.oak.upgrade.REP_PRIVILEGES);\n    privileges.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.oak.upgrade.NT_REP_PRIVILEGES, org.apache.jackrabbit.oak.upgrade.NAME);\n    org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits next = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.NEXT_AFTER_BUILT_INS;\n    org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Copying registered privileges\");\n    for (javax.jcr.security.Privilege privilege : registry.getRegisteredPrivileges()) {\n        java.lang.String name = privilege.getName();\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder def = privileges.child(name);\n        def.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.oak.upgrade.NT_REP_PRIVILEGE, org.apache.jackrabbit.oak.upgrade.NAME);\n        if (privilege.isAbstract()) {\n            def.setProperty(org.apache.jackrabbit.oak.upgrade.REP_IS_ABSTRACT, true);\n        }\n        javax.jcr.security.Privilege[] aggregate = privilege.getDeclaredAggregatePrivileges();\n        if (aggregate.length > 0) {\n            java.util.List<java.lang.String> names = com.google.common.collect.Lists.newArrayListWithCapacity(aggregate.length);\n            for (javax.jcr.security.Privilege p : aggregate) {\n                names.add(p.getName());\n            }\n            def.setProperty(org.apache.jackrabbit.oak.upgrade.REP_AGGREGATES, names, org.apache.jackrabbit.oak.upgrade.NAMES);\n        }\n        org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits bits = PrivilegeBits.BUILT_IN.get(name);\n        if (bits != null) {\n            def.setProperty(bits.asPropertyState(org.apache.jackrabbit.oak.upgrade.REP_BITS));\n        } else if (aggregate.length == 0) {\n            bits = next;\n            next = next.nextBits();\n            def.setProperty(bits.asPropertyState(org.apache.jackrabbit.oak.upgrade.REP_BITS));\n        }\n    }\n    privileges.setProperty(next.asPropertyState(org.apache.jackrabbit.oak.upgrade.REP_NEXT));\n    for (java.lang.String name : privileges.getChildNodeNames()) {\n        resolvePrivilegeBits(privileges, name);\n    }\n}",
            "src_parent": "public class RepositoryUpgrade {\n    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.class);\n\n    private final org.apache.jackrabbit.core.RepositoryContext source;\n\n    private final org.apache.jackrabbit.oak.spi.state.NodeStore target;\n\n    private boolean copyBinariesByReference = false;\n\n    public static void copy(java.io.File source, org.apache.jackrabbit.oak.spi.state.NodeStore target) throws javax.jcr.RepositoryException {\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.copy(org.apache.jackrabbit.core.config.RepositoryConfig.create(source), target);\n    }\n\n    public static void copy(org.apache.jackrabbit.core.config.RepositoryConfig source, org.apache.jackrabbit.oak.spi.state.NodeStore target) throws javax.jcr.RepositoryException {\n        org.apache.jackrabbit.core.RepositoryContext context = org.apache.jackrabbit.core.RepositoryContext.create(source);\n        try {\n            new org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade(context, target).copy(null);\n        } finally {\n            context.getRepository().shutdown();\n        }\n    }\n\n    public RepositoryUpgrade(org.apache.jackrabbit.core.RepositoryContext source, org.apache.jackrabbit.oak.spi.state.NodeStore target) {\n        this.source = source;\n        this.target = target;\n    }\n\n    public boolean isCopyBinariesByReference() {\n        return copyBinariesByReference;\n    }\n\n    public void setCopyBinariesByReference(boolean copyBinariesByReference) {\n        this.copyBinariesByReference = copyBinariesByReference;\n    }\n\n    public void copy(org.apache.jackrabbit.oak.spi.lifecycle.RepositoryInitializer initializer) throws javax.jcr.RepositoryException {\n        org.apache.jackrabbit.core.config.RepositoryConfig config = source.getRepositoryConfig();\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Copying repository content from {} to Oak\", config.getHomeDir());\n        try {\n            org.apache.jackrabbit.oak.spi.state.NodeState base = target.getRoot();\n            org.apache.jackrabbit.oak.spi.state.NodeBuilder builder = base.builder();\n            java.lang.String workspaceName = source.getRepositoryConfig().getDefaultWorkspaceName();\n            org.apache.jackrabbit.oak.security.SecurityProviderImpl security = new org.apache.jackrabbit.oak.security.SecurityProviderImpl(mapSecurityConfig(config.getSecurityConfig()));\n            new org.apache.jackrabbit.oak.plugins.nodetype.write.InitialContent().initialize(builder);\n            if (initializer != null) {\n                initializer.initialize(builder);\n            }\n            for (org.apache.jackrabbit.oak.spi.security.SecurityConfiguration sc : security.getConfigurations()) {\n                sc.getRepositoryInitializer().initialize(builder);\n            }\n            for (org.apache.jackrabbit.oak.spi.security.SecurityConfiguration sc : security.getConfigurations()) {\n                sc.getWorkspaceInitializer().initialize(builder, workspaceName);\n            }\n            com.google.common.collect.HashBiMap<java.lang.String, java.lang.String> uriToPrefix = com.google.common.collect.HashBiMap.create();\n            java.util.Map<java.lang.Integer, java.lang.String> idxToPrefix = com.google.common.collect.Maps.newHashMap();\n            copyNamespaces(builder, uriToPrefix, idxToPrefix);\n            copyNodeTypes(builder, uriToPrefix.inverse());\n            copyPrivileges(builder);\n            new org.apache.jackrabbit.oak.plugins.nodetype.TypeEditorProvider(false).getRootEditor(base, builder.getNodeState(), builder, null);\n            java.util.Map<java.lang.String, java.lang.String> versionablePaths = com.google.common.collect.Maps.newHashMap();\n            org.apache.jackrabbit.oak.spi.state.NodeState root = builder.getNodeState();\n            copyWorkspace(builder, root, workspaceName, uriToPrefix, idxToPrefix, versionablePaths);\n            copyVersionStore(builder, root, workspaceName, uriToPrefix, idxToPrefix, versionablePaths);\n            org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Applying default commit hooks\");\n            java.util.List<org.apache.jackrabbit.oak.spi.commit.CommitHook> hooks = com.google.common.collect.Lists.newArrayList();\n            org.apache.jackrabbit.oak.spi.security.user.UserConfiguration userConf = security.getConfiguration(org.apache.jackrabbit.oak.spi.security.user.UserConfiguration.class);\n            java.lang.String groupsPath = userConf.getParameters().getConfigValue(UserConstants.PARAM_GROUP_PATH, UserConstants.DEFAULT_GROUP_PATH);\n            hooks.add(new org.apache.jackrabbit.oak.spi.commit.EditorHook(new org.apache.jackrabbit.oak.spi.commit.CompositeEditorProvider(new org.apache.jackrabbit.oak.upgrade.security.RestrictionEditorProvider(), new org.apache.jackrabbit.oak.upgrade.security.GroupEditorProvider(groupsPath))));\n            for (org.apache.jackrabbit.oak.spi.security.SecurityConfiguration sc : security.getConfigurations()) {\n                hooks.addAll(sc.getCommitHooks(workspaceName));\n            }\n            hooks.add(new org.apache.jackrabbit.oak.spi.commit.EditorHook(new org.apache.jackrabbit.oak.spi.commit.CompositeEditorProvider(org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.createTypeEditorProvider(), org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.createIndexEditorProvider())));\n            target.merge(builder, org.apache.jackrabbit.oak.spi.commit.CompositeHook.compose(hooks), CommitInfo.EMPTY);\n        } catch (java.lang.Exception e) {\n            throw new javax.jcr.RepositoryException(\"Failed to copy content\", e);\n        }\n    }\n\n    private static org.apache.jackrabbit.oak.spi.commit.EditorProvider createTypeEditorProvider() {\n        return new org.apache.jackrabbit.oak.spi.commit.EditorProvider() {\n            @java.lang.Override\n            public org.apache.jackrabbit.oak.spi.commit.Editor getRootEditor(org.apache.jackrabbit.oak.spi.state.NodeState before, org.apache.jackrabbit.oak.spi.state.NodeState after, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder, org.apache.jackrabbit.oak.spi.commit.CommitInfo info) throws org.apache.jackrabbit.oak.api.CommitFailedException {\n                org.apache.jackrabbit.oak.spi.commit.Editor rootEditor = new org.apache.jackrabbit.oak.plugins.nodetype.TypeEditorProvider(false).getRootEditor(before, after, builder, info);\n                return org.apache.jackrabbit.oak.upgrade.ProgressNotificationEditor.wrap(rootEditor, org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger, \"Checking node types:\");\n            }\n        };\n    }\n\n    private static org.apache.jackrabbit.oak.spi.commit.EditorProvider createIndexEditorProvider() {\n        final org.apache.jackrabbit.oak.upgrade.ProgressTicker ticker = new org.apache.jackrabbit.oak.upgrade.AsciiArtTicker();\n        return new org.apache.jackrabbit.oak.spi.commit.EditorProvider() {\n            @java.lang.Override\n            public org.apache.jackrabbit.oak.spi.commit.Editor getRootEditor(org.apache.jackrabbit.oak.spi.state.NodeState before, org.apache.jackrabbit.oak.spi.state.NodeState after, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder, org.apache.jackrabbit.oak.spi.commit.CommitInfo info) {\n                org.apache.jackrabbit.oak.plugins.index.IndexEditorProvider editorProviders = new org.apache.jackrabbit.oak.plugins.index.CompositeIndexEditorProvider(new org.apache.jackrabbit.oak.plugins.index.reference.ReferenceEditorProvider(), new org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexEditorProvider());\n                return new org.apache.jackrabbit.oak.plugins.index.IndexUpdate(editorProviders, null, after, builder, new org.apache.jackrabbit.oak.plugins.index.IndexUpdateCallback() {\n                    java.lang.String progress = \"Updating indexes \";\n\n                    long t0;\n\n                    @java.lang.Override\n                    public void indexUpdate() {\n                        long t = java.lang.System.currentTimeMillis();\n                        if ((t - t0) > 2000) {\n                            org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"{} {}\", progress, ticker.tick());\n                            t0 = t;\n                        }\n                    }\n                });\n            }\n        };\n    }\n\n    protected org.apache.jackrabbit.oak.spi.security.ConfigurationParameters mapSecurityConfig(org.apache.jackrabbit.core.config.SecurityConfig config) {\n        org.apache.jackrabbit.oak.spi.security.ConfigurationParameters loginConfig = mapConfigurationParameters(config.getLoginModuleConfig(), LoginModuleConfig.PARAM_ADMIN_ID, UserConstants.PARAM_ADMIN_ID, LoginModuleConfig.PARAM_ANONYMOUS_ID, UserConstants.PARAM_ANONYMOUS_ID);\n        org.apache.jackrabbit.oak.spi.security.ConfigurationParameters userConfig = mapConfigurationParameters(config.getSecurityManagerConfig().getUserManagerConfig(), UserManagerImpl.PARAM_USERS_PATH, UserConstants.PARAM_USER_PATH, UserManagerImpl.PARAM_GROUPS_PATH, UserConstants.PARAM_GROUP_PATH, UserManagerImpl.PARAM_DEFAULT_DEPTH, UserConstants.PARAM_DEFAULT_DEPTH, UserManagerImpl.PARAM_PASSWORD_HASH_ALGORITHM, UserConstants.PARAM_PASSWORD_HASH_ALGORITHM, UserManagerImpl.PARAM_PASSWORD_HASH_ITERATIONS, UserConstants.PARAM_PASSWORD_HASH_ITERATIONS);\n        return org.apache.jackrabbit.oak.spi.security.ConfigurationParameters.of(com.google.common.collect.ImmutableMap.of(UserConfiguration.NAME, org.apache.jackrabbit.oak.spi.security.ConfigurationParameters.of(loginConfig, userConfig)));\n    }\n\n    protected org.apache.jackrabbit.oak.spi.security.ConfigurationParameters mapConfigurationParameters(org.apache.jackrabbit.core.config.BeanConfig config, java.lang.String... mapping) {\n        java.util.Map<java.lang.String, java.lang.String> map = com.google.common.collect.Maps.newHashMap();\n        if (config != null) {\n            java.util.Properties properties = config.getParameters();\n            for (int i = 0; (i + 1) < mapping.length; i += 2) {\n                java.lang.String value = properties.getProperty(mapping[i]);\n                if (value != null) {\n                    map.put(mapping[i + 1], value);\n                }\n            }\n        }\n        return org.apache.jackrabbit.oak.spi.security.ConfigurationParameters.of(map);\n    }\n\n    private java.lang.String getOakName(org.apache.jackrabbit.spi.Name name) throws javax.jcr.NamespaceException {\n        java.lang.String uri = name.getNamespaceURI();\n        java.lang.String local = name.getLocalName();\n        if ((uri == null) || uri.isEmpty()) {\n            return local;\n        } else {\n            return (source.getNamespaceRegistry().getPrefix(uri) + \":\") + local;\n        }\n    }\n\n    private void copyNamespaces(org.apache.jackrabbit.oak.spi.state.NodeBuilder root, java.util.Map<java.lang.String, java.lang.String> uriToPrefix, java.util.Map<java.lang.Integer, java.lang.String> idxToPrefix) throws javax.jcr.RepositoryException {\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder system = root.child(org.apache.jackrabbit.JcrConstants.JCR_SYSTEM);\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder namespaces = system.child(NamespaceConstants.REP_NAMESPACES);\n        java.util.Properties registry = loadProperties(\"/namespaces/ns_reg.properties\");\n        java.util.Properties indexes = loadProperties(\"/namespaces/ns_idx.properties\");\n        for (java.lang.String prefixHint : registry.stringPropertyNames()) {\n            java.lang.String prefix;\n            java.lang.String uri = registry.getProperty(prefixHint);\n            if (\".empty.key\".equals(prefixHint)) {\n                prefix = \"\";\n            } else {\n                prefix = addCustomMapping(namespaces, uri, prefixHint);\n            }\n            java.lang.String index = null;\n            if (uri.isEmpty()) {\n                index = indexes.getProperty(\".empty.key\");\n            }\n            if (index == null) {\n                index = indexes.getProperty(uri);\n            }\n            java.lang.Integer idx;\n            if (index != null) {\n                idx = java.lang.Integer.decode(index);\n            } else {\n                int i = 0;\n                do {\n                    idx = (uri.hashCode() + (i++)) & 0xffffff;\n                } while (idxToPrefix.containsKey(idx) );\n            }\n            com.google.common.base.Preconditions.checkState(uriToPrefix.put(uri, prefix) == null);\n            com.google.common.base.Preconditions.checkState(idxToPrefix.put(idx, prefix) == null);\n        }\n        org.apache.jackrabbit.oak.plugins.name.Namespaces.buildIndexNode(namespaces);\n    }\n\n    private java.util.Properties loadProperties(java.lang.String path) throws javax.jcr.RepositoryException {\n        java.util.Properties properties = new java.util.Properties();\n        org.apache.jackrabbit.core.fs.FileSystem filesystem = source.getFileSystem();\n        try {\n            if (filesystem.exists(path)) {\n                java.io.InputStream stream = filesystem.getInputStream(path);\n                try {\n                    properties.load(stream);\n                } finally {\n                    stream.close();\n                }\n            }\n        } catch (org.apache.jackrabbit.core.fs.FileSystemException e) {\n            throw new javax.jcr.RepositoryException(e);\n        } catch (java.io.IOException e) {\n            throw new javax.jcr.RepositoryException(e);\n        }\n        return properties;\n    }\n\n    @java.lang.SuppressWarnings(\"deprecation\")\n    private void copyPrivileges(org.apache.jackrabbit.oak.spi.state.NodeBuilder root) throws javax.jcr.RepositoryException {\n        org.apache.jackrabbit.core.security.authorization.PrivilegeRegistry registry = source.getPrivilegeRegistry();\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder privileges = root.child(org.apache.jackrabbit.JcrConstants.JCR_SYSTEM).child(org.apache.jackrabbit.oak.upgrade.REP_PRIVILEGES);\n        privileges.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.oak.upgrade.NT_REP_PRIVILEGES, org.apache.jackrabbit.oak.upgrade.NAME);\n        org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits next = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.NEXT_AFTER_BUILT_INS;\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Copying registered privileges\");\n        for (javax.jcr.security.Privilege privilege : registry.getRegisteredPrivileges()) {\n            java.lang.String name = privilege.getName();\n            org.apache.jackrabbit.oak.spi.state.NodeBuilder def = privileges.child(name);\n            def.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.oak.upgrade.NT_REP_PRIVILEGE, org.apache.jackrabbit.oak.upgrade.NAME);\n            if (privilege.isAbstract()) {\n                def.setProperty(org.apache.jackrabbit.oak.upgrade.REP_IS_ABSTRACT, true);\n            }\n            javax.jcr.security.Privilege[] aggregate = privilege.getDeclaredAggregatePrivileges();\n            if (aggregate.length > 0) {\n                java.util.List<java.lang.String> names = com.google.common.collect.Lists.newArrayListWithCapacity(aggregate.length);\n                for (javax.jcr.security.Privilege p : aggregate) {\n                    names.add(p.getName());\n                }\n                def.setProperty(org.apache.jackrabbit.oak.upgrade.REP_AGGREGATES, names, org.apache.jackrabbit.oak.upgrade.NAMES);\n            }\n            org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits bits = PrivilegeBits.BUILT_IN.get(name);\n            if (bits != null) {\n                def.setProperty(bits.asPropertyState(org.apache.jackrabbit.oak.upgrade.REP_BITS));\n            } else if (aggregate.length == 0) {\n                bits = next;\n                next = next.nextBits();\n                def.setProperty(bits.asPropertyState(org.apache.jackrabbit.oak.upgrade.REP_BITS));\n            }\n        }\n        privileges.setProperty(next.asPropertyState(org.apache.jackrabbit.oak.upgrade.REP_NEXT));\n        for (java.lang.String name : privileges.getChildNodeNames()) {\n            resolvePrivilegeBits(privileges, name);\n        }\n    }\n\n    private org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits resolvePrivilegeBits(org.apache.jackrabbit.oak.spi.state.NodeBuilder privileges, java.lang.String name) {\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder def = privileges.getChildNode(name);\n        org.apache.jackrabbit.oak.api.PropertyState b = def.getProperty(org.apache.jackrabbit.oak.upgrade.REP_BITS);\n        if (b != null) {\n            return org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.getInstance(b);\n        }\n        org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits bits = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.getInstance();\n        for (java.lang.String n : def.getNames(org.apache.jackrabbit.oak.upgrade.REP_AGGREGATES)) {\n            bits.add(resolvePrivilegeBits(privileges, n));\n        }\n        def.setProperty(bits.asPropertyState(org.apache.jackrabbit.oak.upgrade.REP_BITS));\n        return bits;\n    }\n\n    private void copyNodeTypes(org.apache.jackrabbit.oak.spi.state.NodeBuilder root, java.util.Map<java.lang.String, java.lang.String> prefixToUri) throws javax.jcr.RepositoryException {\n        org.apache.jackrabbit.core.nodetype.NodeTypeRegistry sourceRegistry = source.getNodeTypeRegistry();\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder system = root.child(org.apache.jackrabbit.JcrConstants.JCR_SYSTEM);\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder types = system.child(org.apache.jackrabbit.oak.upgrade.JCR_NODE_TYPES);\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Copying registered node types\");\n        for (org.apache.jackrabbit.spi.Name name : sourceRegistry.getRegisteredNodeTypes()) {\n            java.lang.String oakName = getOakName(name);\n            if (!types.hasChildNode(oakName)) {\n                org.apache.jackrabbit.spi.QNodeTypeDefinition def = sourceRegistry.getNodeTypeDef(name);\n                org.apache.jackrabbit.oak.spi.state.NodeBuilder type = types.child(oakName);\n                copyNodeType(def, type, prefixToUri);\n            }\n        }\n    }\n\n    private void copyNodeType(org.apache.jackrabbit.spi.QNodeTypeDefinition def, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder, java.util.Map<java.lang.String, java.lang.String> prefixToUri) throws javax.jcr.RepositoryException {\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.JcrConstants.NT_NODETYPE, org.apache.jackrabbit.oak.upgrade.NAME);\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_NODETYPENAME, getOakName(def.getName()), org.apache.jackrabbit.oak.upgrade.NAME);\n        org.apache.jackrabbit.spi.Name[] supertypes = def.getSupertypes();\n        if ((supertypes != null) && (supertypes.length > 0)) {\n            java.util.List<java.lang.String> names = com.google.common.collect.Lists.newArrayListWithCapacity(supertypes.length);\n            for (org.apache.jackrabbit.spi.Name supertype : supertypes) {\n                names.add(getOakName(supertype));\n            }\n            builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_SUPERTYPES, names, org.apache.jackrabbit.oak.upgrade.NAMES);\n        }\n        builder.setProperty(org.apache.jackrabbit.oak.upgrade.JCR_IS_ABSTRACT, def.isAbstract());\n        builder.setProperty(org.apache.jackrabbit.oak.upgrade.JCR_IS_QUERYABLE, def.isQueryable());\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_ISMIXIN, def.isMixin());\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_HASORDERABLECHILDNODES, def.hasOrderableChildNodes());\n        org.apache.jackrabbit.spi.Name primary = def.getPrimaryItemName();\n        if (primary != null) {\n            builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYITEMNAME, getOakName(primary), org.apache.jackrabbit.oak.upgrade.NAME);\n        }\n        org.apache.jackrabbit.spi.QPropertyDefinition[] properties = def.getPropertyDefs();\n        for (int i = 0; i < properties.length; i++) {\n            java.lang.String name = ((org.apache.jackrabbit.JcrConstants.JCR_PROPERTYDEFINITION + '[') + (i + 1)) + ']';\n            copyPropertyDefinition(properties[i], builder.child(name), prefixToUri);\n        }\n        org.apache.jackrabbit.spi.QNodeDefinition[] childNodes = def.getChildNodeDefs();\n        for (int i = 0; i < childNodes.length; i++) {\n            java.lang.String name = ((org.apache.jackrabbit.JcrConstants.JCR_CHILDNODEDEFINITION + '[') + (i + 1)) + ']';\n            copyChildNodeDefinition(childNodes[i], builder.child(name));\n        }\n    }\n\n    private void copyPropertyDefinition(org.apache.jackrabbit.spi.QPropertyDefinition def, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder, java.util.Map<java.lang.String, java.lang.String> prefixToUri) throws javax.jcr.RepositoryException {\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.JcrConstants.NT_PROPERTYDEFINITION, org.apache.jackrabbit.oak.upgrade.NAME);\n        copyItemDefinition(def, builder);\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_REQUIREDTYPE, org.apache.jackrabbit.oak.api.Type.fromTag(def.getRequiredType(), false).toString());\n        org.apache.jackrabbit.spi.QValueConstraint[] constraints = def.getValueConstraints();\n        if ((constraints != null) && (constraints.length > 0)) {\n            java.util.List<java.lang.String> strings = com.google.common.collect.Lists.newArrayListWithCapacity(constraints.length);\n            for (org.apache.jackrabbit.spi.QValueConstraint constraint : constraints) {\n                strings.add(constraint.getString());\n            }\n            builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_VALUECONSTRAINTS, strings, org.apache.jackrabbit.oak.upgrade.STRINGS);\n        }\n        org.apache.jackrabbit.spi.QValue[] qValues = def.getDefaultValues();\n        if (qValues != null) {\n            org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.copyDefaultValues(qValues, builder, new org.apache.jackrabbit.oak.namepath.GlobalNameMapper(prefixToUri));\n        }\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_MULTIPLE, def.isMultiple());\n        java.util.List<java.lang.String> operators = java.util.Arrays.asList(def.getAvailableQueryOperators());\n        builder.setProperty(org.apache.jackrabbit.oak.upgrade.JCR_AVAILABLE_QUERY_OPERATORS, operators, org.apache.jackrabbit.oak.upgrade.NAMES);\n        builder.setProperty(org.apache.jackrabbit.oak.upgrade.JCR_IS_FULLTEXT_SEARCHABLE, def.isFullTextSearchable());\n        builder.setProperty(org.apache.jackrabbit.oak.upgrade.JCR_IS_QUERY_ORDERABLE, def.isQueryOrderable());\n    }\n\n    private static void copyDefaultValues(org.apache.jackrabbit.spi.QValue[] qValues, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder, org.apache.jackrabbit.oak.namepath.NameMapper nameMapper) throws javax.jcr.RepositoryException {\n        if (qValues.length == 0) {\n            builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTVALUES, java.util.Collections.<java.lang.String>emptyList(), org.apache.jackrabbit.oak.upgrade.STRINGS);\n        } else {\n            int type = qValues[0].getType();\n            switch (type) {\n                case javax.jcr.PropertyType.STRING :\n                    java.util.List<java.lang.String> strings = com.google.common.collect.Lists.newArrayListWithCapacity(qValues.length);\n                    for (org.apache.jackrabbit.spi.QValue qValue : qValues) {\n                        strings.add(qValue.getString());\n                    }\n                    builder.setProperty(createProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTVALUES, strings, org.apache.jackrabbit.oak.upgrade.STRINGS));\n                    return;\n                case javax.jcr.PropertyType.LONG :\n                    java.util.List<java.lang.Long> longs = com.google.common.collect.Lists.newArrayListWithCapacity(qValues.length);\n                    for (org.apache.jackrabbit.spi.QValue qValue : qValues) {\n                        longs.add(qValue.getLong());\n                    }\n                    builder.setProperty(createProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTVALUES, longs, org.apache.jackrabbit.oak.upgrade.LONGS));\n                    return;\n                case javax.jcr.PropertyType.DOUBLE :\n                    java.util.List<java.lang.Double> doubles = com.google.common.collect.Lists.newArrayListWithCapacity(qValues.length);\n                    for (org.apache.jackrabbit.spi.QValue qValue : qValues) {\n                        doubles.add(qValue.getDouble());\n                    }\n                    builder.setProperty(createProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTVALUES, doubles, org.apache.jackrabbit.oak.upgrade.DOUBLES));\n                    return;\n                case javax.jcr.PropertyType.BOOLEAN :\n                    java.util.List<java.lang.Boolean> booleans = com.google.common.collect.Lists.newArrayListWithCapacity(qValues.length);\n                    for (org.apache.jackrabbit.spi.QValue qValue : qValues) {\n                        booleans.add(qValue.getBoolean());\n                    }\n                    builder.setProperty(createProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTVALUES, booleans, org.apache.jackrabbit.oak.upgrade.BOOLEANS));\n                    return;\n                case javax.jcr.PropertyType.NAME :\n                    java.util.List<java.lang.String> names = com.google.common.collect.Lists.newArrayListWithCapacity(qValues.length);\n                    for (org.apache.jackrabbit.spi.QValue qValue : qValues) {\n                        names.add(nameMapper.getOakName(qValue.getName().toString()));\n                    }\n                    builder.setProperty(createProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTVALUES, names, org.apache.jackrabbit.oak.upgrade.NAMES));\n                    return;\n                case javax.jcr.PropertyType.PATH :\n                    java.util.List<java.lang.String> paths = com.google.common.collect.Lists.newArrayListWithCapacity(qValues.length);\n                    for (org.apache.jackrabbit.spi.QValue qValue : qValues) {\n                        paths.add(org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.getOakPath(qValue.getPath(), nameMapper));\n                    }\n                    builder.setProperty(createProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTVALUES, paths, org.apache.jackrabbit.oak.upgrade.PATHS));\n                    return;\n                case javax.jcr.PropertyType.DECIMAL :\n                    java.util.List<java.math.BigDecimal> decimals = com.google.common.collect.Lists.newArrayListWithCapacity(qValues.length);\n                    for (org.apache.jackrabbit.spi.QValue qValue : qValues) {\n                        decimals.add(qValue.getDecimal());\n                    }\n                    builder.setProperty(createProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTVALUES, decimals, org.apache.jackrabbit.oak.upgrade.DECIMALS));\n                    return;\n                case javax.jcr.PropertyType.DATE :\n                case javax.jcr.PropertyType.URI :\n                    java.util.List<java.lang.String> values = com.google.common.collect.Lists.newArrayListWithCapacity(qValues.length);\n                    for (org.apache.jackrabbit.spi.QValue qValue : qValues) {\n                        values.add(qValue.getString());\n                    }\n                    builder.setProperty(createProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTVALUES, values, org.apache.jackrabbit.oak.api.Type.fromTag(type, true)));\n                    return;\n                default :\n                    throw new javax.jcr.UnsupportedRepositoryOperationException(\"Cannot copy default value of type \" + org.apache.jackrabbit.oak.api.Type.fromTag(type, true));\n            }\n        }\n    }\n\n    private static java.lang.String getOakPath(org.apache.jackrabbit.spi.Path path, org.apache.jackrabbit.oak.namepath.NameMapper nameMapper) throws javax.jcr.RepositoryException {\n        java.lang.StringBuilder oakPath = new java.lang.StringBuilder();\n        java.lang.String sep = \"\";\n        for (org.apache.jackrabbit.spi.Path.Element element : path.getElements()) {\n            if (element.denotesRoot()) {\n                oakPath.append('/');\n                continue;\n            } else if (element.denotesName()) {\n                oakPath.append(sep).append(nameMapper.getOakName(element.getString()));\n            } else if (element.denotesCurrent()) {\n                oakPath.append(sep).append('.');\n            } else if (element.denotesParent()) {\n                oakPath.append(sep).append(\"..\");\n            } else {\n                throw new javax.jcr.UnsupportedRepositoryOperationException(\"Cannot copy default value \" + path);\n            }\n            sep = \"/\";\n        }\n        return oakPath.toString();\n    }\n\n    private void copyChildNodeDefinition(org.apache.jackrabbit.spi.QNodeDefinition def, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder) throws javax.jcr.NamespaceException {\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.JcrConstants.NT_CHILDNODEDEFINITION, org.apache.jackrabbit.oak.upgrade.NAME);\n        copyItemDefinition(def, builder);\n        org.apache.jackrabbit.spi.Name[] types = def.getRequiredPrimaryTypes();\n        java.util.List<java.lang.String> names = com.google.common.collect.Lists.newArrayListWithCapacity(types.length);\n        for (org.apache.jackrabbit.spi.Name type : types) {\n            names.add(getOakName(type));\n        }\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_REQUIREDPRIMARYTYPES, names, org.apache.jackrabbit.oak.upgrade.NAMES);\n        org.apache.jackrabbit.spi.Name type = def.getDefaultPrimaryType();\n        if (type != null) {\n            builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTPRIMARYTYPE, getOakName(type), org.apache.jackrabbit.oak.upgrade.NAME);\n        }\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_SAMENAMESIBLINGS, def.allowsSameNameSiblings());\n    }\n\n    private void copyItemDefinition(org.apache.jackrabbit.spi.QItemDefinition def, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder) throws javax.jcr.NamespaceException {\n        org.apache.jackrabbit.spi.Name name = def.getName();\n        if ((name != null) && (!name.equals(org.apache.jackrabbit.oak.upgrade.ANY_NAME))) {\n            builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_NAME, getOakName(name), org.apache.jackrabbit.oak.upgrade.NAME);\n        }\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_AUTOCREATED, def.isAutoCreated());\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_MANDATORY, def.isMandatory());\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_ONPARENTVERSION, javax.jcr.version.OnParentVersionAction.nameFromValue(def.getOnParentVersion()));\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PROTECTED, def.isProtected());\n    }\n\n    private void copyVersionStore(org.apache.jackrabbit.oak.spi.state.NodeBuilder builder, org.apache.jackrabbit.oak.spi.state.NodeState root, java.lang.String workspaceName, java.util.Map<java.lang.String, java.lang.String> uriToPrefix, java.util.Map<java.lang.Integer, java.lang.String> idxToPrefix, java.util.Map<java.lang.String, java.lang.String> versionablePaths) throws java.io.IOException, javax.jcr.RepositoryException {\n        org.apache.jackrabbit.core.persistence.PersistenceManager pm = source.getInternalVersionManager().getPersistenceManager();\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder system = builder.child(org.apache.jackrabbit.JcrConstants.JCR_SYSTEM);\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Copying version histories\");\n        copyState(system, org.apache.jackrabbit.JcrConstants.JCR_VERSIONSTORAGE, new org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState(pm, root, uriToPrefix, VERSION_STORAGE_NODE_ID, \"/jcr:system/jcr:versionStorage\", workspaceName, versionablePaths, copyBinariesByReference));\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Copying activities\");\n        copyState(system, \"jcr:activities\", new org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState(pm, root, uriToPrefix, ACTIVITIES_NODE_ID, \"/jcr:system/jcr:activities\", workspaceName, versionablePaths, copyBinariesByReference));\n    }\n\n    private java.lang.String copyWorkspace(org.apache.jackrabbit.oak.spi.state.NodeBuilder builder, org.apache.jackrabbit.oak.spi.state.NodeState root, java.lang.String workspaceName, java.util.Map<java.lang.String, java.lang.String> uriToPrefix, java.util.Map<java.lang.Integer, java.lang.String> idxToPrefix, java.util.Map<java.lang.String, java.lang.String> versionablePaths) throws java.io.IOException, javax.jcr.RepositoryException {\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Copying workspace {}\", workspaceName);\n        org.apache.jackrabbit.core.persistence.PersistenceManager pm = source.getWorkspaceInfo(workspaceName).getPersistenceManager();\n        org.apache.jackrabbit.oak.spi.state.NodeState state = new org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState(pm, root, uriToPrefix, ROOT_NODE_ID, \"/\", workspaceName, versionablePaths, copyBinariesByReference);\n        for (org.apache.jackrabbit.oak.api.PropertyState property : state.getProperties()) {\n            builder.setProperty(property);\n        }\n        for (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry child : state.getChildNodeEntries()) {\n            java.lang.String childName = child.getName();\n            if (!org.apache.jackrabbit.JcrConstants.JCR_SYSTEM.equals(childName)) {\n                org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Copying subtree /{}\", childName);\n                copyState(builder, childName, child.getNodeState());\n            }\n        }\n        return workspaceName;\n    }\n\n    private void copyState(org.apache.jackrabbit.oak.spi.state.NodeBuilder parent, java.lang.String name, org.apache.jackrabbit.oak.spi.state.NodeState state) {\n        if (parent instanceof org.apache.jackrabbit.oak.plugins.segment.SegmentNodeBuilder) {\n            parent.setChildNode(name, state);\n        } else {\n            setChildNode(parent, name, state);\n        }\n    }\n\n    private void setChildNode(org.apache.jackrabbit.oak.spi.state.NodeBuilder parent, java.lang.String name, org.apache.jackrabbit.oak.spi.state.NodeState state) {\n        if ((name.length() > 37) && (name.getBytes(com.google.common.base.Charsets.UTF_8).length > 150)) {\n            org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.warn(\"Node name too long. Skipping {}\", state);\n            return;\n        }\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder builder = parent.setChildNode(name);\n        for (org.apache.jackrabbit.oak.api.PropertyState property : state.getProperties()) {\n            builder.setProperty(property);\n        }\n        for (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry child : state.getChildNodeEntries()) {\n            setChildNode(builder, child.getName(), child.getNodeState());\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "copyCustomPrivileges(builder)",
            "dst_parent": "{\n    org.apache.jackrabbit.oak.spi.state.NodeState base = target.getRoot();\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder builder = base.builder();\n    java.lang.String workspaceName = source.getRepositoryConfig().getDefaultWorkspaceName();\n    org.apache.jackrabbit.oak.security.SecurityProviderImpl security = new org.apache.jackrabbit.oak.security.SecurityProviderImpl(mapSecurityConfig(config.getSecurityConfig()));\n    new org.apache.jackrabbit.oak.plugins.nodetype.write.InitialContent().initialize(builder);\n    if (initializer != null) {\n        initializer.initialize(builder);\n    }\n    for (org.apache.jackrabbit.oak.spi.security.SecurityConfiguration sc : security.getConfigurations()) {\n        sc.getRepositoryInitializer().initialize(builder);\n    }\n    for (org.apache.jackrabbit.oak.spi.security.SecurityConfiguration sc : security.getConfigurations()) {\n        sc.getWorkspaceInitializer().initialize(builder, workspaceName);\n    }\n    com.google.common.collect.HashBiMap<java.lang.String, java.lang.String> uriToPrefix = com.google.common.collect.HashBiMap.create();\n    java.util.Map<java.lang.Integer, java.lang.String> idxToPrefix = com.google.common.collect.Maps.newHashMap();\n    copyNamespaces(builder, uriToPrefix, idxToPrefix);\n    copyNodeTypes(builder, uriToPrefix.inverse());\n    copyCustomPrivileges(builder);\n    new org.apache.jackrabbit.oak.plugins.nodetype.TypeEditorProvider(false).getRootEditor(base, builder.getNodeState(), builder, null);\n    java.util.Map<java.lang.String, java.lang.String> versionablePaths = com.google.common.collect.Maps.newHashMap();\n    org.apache.jackrabbit.oak.spi.state.NodeState root = builder.getNodeState();\n    copyWorkspace(builder, root, workspaceName, uriToPrefix, idxToPrefix, versionablePaths);\n    copyVersionStore(builder, root, workspaceName, uriToPrefix, idxToPrefix, versionablePaths);\n    org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Applying default commit hooks\");\n    java.util.List<org.apache.jackrabbit.oak.spi.commit.CommitHook> hooks = com.google.common.collect.Lists.newArrayList();\n    org.apache.jackrabbit.oak.spi.security.user.UserConfiguration userConf = security.getConfiguration(org.apache.jackrabbit.oak.spi.security.user.UserConfiguration.class);\n    java.lang.String groupsPath = userConf.getParameters().getConfigValue(UserConstants.PARAM_GROUP_PATH, UserConstants.DEFAULT_GROUP_PATH);\n    hooks.add(new org.apache.jackrabbit.oak.spi.commit.EditorHook(new org.apache.jackrabbit.oak.spi.commit.CompositeEditorProvider(new org.apache.jackrabbit.oak.upgrade.security.RestrictionEditorProvider(), new org.apache.jackrabbit.oak.upgrade.security.GroupEditorProvider(groupsPath))));\n    for (org.apache.jackrabbit.oak.spi.security.SecurityConfiguration sc : security.getConfigurations()) {\n        hooks.addAll(sc.getCommitHooks(workspaceName));\n    }\n    hooks.add(new org.apache.jackrabbit.oak.spi.commit.EditorHook(new org.apache.jackrabbit.oak.spi.commit.CompositeEditorProvider(org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.createTypeEditorProvider(), org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.createIndexEditorProvider())));\n    target.merge(builder, org.apache.jackrabbit.oak.spi.commit.CompositeHook.compose(hooks), CommitInfo.EMPTY);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "copyPrivileges(builder)",
            "src_parent": "{\n    org.apache.jackrabbit.oak.spi.state.NodeState base = target.getRoot();\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder builder = base.builder();\n    java.lang.String workspaceName = source.getRepositoryConfig().getDefaultWorkspaceName();\n    org.apache.jackrabbit.oak.security.SecurityProviderImpl security = new org.apache.jackrabbit.oak.security.SecurityProviderImpl(mapSecurityConfig(config.getSecurityConfig()));\n    new org.apache.jackrabbit.oak.plugins.nodetype.write.InitialContent().initialize(builder);\n    if (initializer != null) {\n        initializer.initialize(builder);\n    }\n    for (org.apache.jackrabbit.oak.spi.security.SecurityConfiguration sc : security.getConfigurations()) {\n        sc.getRepositoryInitializer().initialize(builder);\n    }\n    for (org.apache.jackrabbit.oak.spi.security.SecurityConfiguration sc : security.getConfigurations()) {\n        sc.getWorkspaceInitializer().initialize(builder, workspaceName);\n    }\n    com.google.common.collect.HashBiMap<java.lang.String, java.lang.String> uriToPrefix = com.google.common.collect.HashBiMap.create();\n    java.util.Map<java.lang.Integer, java.lang.String> idxToPrefix = com.google.common.collect.Maps.newHashMap();\n    copyNamespaces(builder, uriToPrefix, idxToPrefix);\n    copyNodeTypes(builder, uriToPrefix.inverse());\n    copyPrivileges(builder);\n    new org.apache.jackrabbit.oak.plugins.nodetype.TypeEditorProvider(false).getRootEditor(base, builder.getNodeState(), builder, null);\n    java.util.Map<java.lang.String, java.lang.String> versionablePaths = com.google.common.collect.Maps.newHashMap();\n    org.apache.jackrabbit.oak.spi.state.NodeState root = builder.getNodeState();\n    copyWorkspace(builder, root, workspaceName, uriToPrefix, idxToPrefix, versionablePaths);\n    copyVersionStore(builder, root, workspaceName, uriToPrefix, idxToPrefix, versionablePaths);\n    org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Applying default commit hooks\");\n    java.util.List<org.apache.jackrabbit.oak.spi.commit.CommitHook> hooks = com.google.common.collect.Lists.newArrayList();\n    org.apache.jackrabbit.oak.spi.security.user.UserConfiguration userConf = security.getConfiguration(org.apache.jackrabbit.oak.spi.security.user.UserConfiguration.class);\n    java.lang.String groupsPath = userConf.getParameters().getConfigValue(UserConstants.PARAM_GROUP_PATH, UserConstants.DEFAULT_GROUP_PATH);\n    hooks.add(new org.apache.jackrabbit.oak.spi.commit.EditorHook(new org.apache.jackrabbit.oak.spi.commit.CompositeEditorProvider(new org.apache.jackrabbit.oak.upgrade.security.RestrictionEditorProvider(), new org.apache.jackrabbit.oak.upgrade.security.GroupEditorProvider(groupsPath))));\n    for (org.apache.jackrabbit.oak.spi.security.SecurityConfiguration sc : security.getConfigurations()) {\n        hooks.addAll(sc.getCommitHooks(workspaceName));\n    }\n    hooks.add(new org.apache.jackrabbit.oak.spi.commit.EditorHook(new org.apache.jackrabbit.oak.spi.commit.CompositeEditorProvider(org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.createTypeEditorProvider(), org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.createIndexEditorProvider())));\n    target.merge(builder, org.apache.jackrabbit.oak.spi.commit.CompositeHook.compose(hooks), CommitInfo.EMPTY);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (PrivilegeBits.BUILT_IN.containsKey(name) || org.apache.jackrabbit.oak.upgrade.JCR_ALL.equals(name)) {\n    continue;\n}",
            "src_parent": "{\n    java.lang.String name = privilege.getName();\n    if (PrivilegeBits.BUILT_IN.containsKey(name) || org.apache.jackrabbit.oak.upgrade.JCR_ALL.equals(name)) {\n        continue;\n    }\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder def = privileges.child(name);\n    def.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.oak.upgrade.NT_REP_PRIVILEGE, org.apache.jackrabbit.oak.upgrade.NAME);\n    if (privilege.isAbstract()) {\n        def.setProperty(org.apache.jackrabbit.oak.upgrade.REP_IS_ABSTRACT, true);\n    }\n    javax.jcr.security.Privilege[] aggregate = privilege.getDeclaredAggregatePrivileges();\n    if (aggregate.length > 0) {\n        java.util.List<java.lang.String> names = com.google.common.collect.Lists.newArrayListWithCapacity(aggregate.length);\n        for (javax.jcr.security.Privilege p : aggregate) {\n            names.add(p.getName());\n        }\n        def.setProperty(org.apache.jackrabbit.oak.upgrade.REP_AGGREGATES, names, org.apache.jackrabbit.oak.upgrade.NAMES);\n    }\n    org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits bits = PrivilegeBits.BUILT_IN.get(name);\n    if (bits != null) {\n        def.setProperty(bits.asPropertyState(org.apache.jackrabbit.oak.upgrade.REP_BITS));\n    } else if (aggregate.length == 0) {\n        bits = next;\n        next = next.nextBits();\n        def.setProperty(bits.asPropertyState(org.apache.jackrabbit.oak.upgrade.REP_BITS));\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "static",
            "src_parent": "private static org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits resolvePrivilegeBits(org.apache.jackrabbit.oak.spi.state.NodeBuilder privileges, java.lang.String name) {\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder def = privileges.getChildNode(name);\n    org.apache.jackrabbit.oak.api.PropertyState b = def.getProperty(org.apache.jackrabbit.oak.upgrade.REP_BITS);\n    if (b != null) {\n        return org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.getInstance(b);\n    }\n    org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits bits = org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits.getInstance();\n    for (java.lang.String n : def.getNames(org.apache.jackrabbit.oak.upgrade.REP_AGGREGATES)) {\n        bits.add(org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.resolvePrivilegeBits(privileges, n));\n    }\n    def.setProperty(bits.asPropertyState(org.apache.jackrabbit.oak.upgrade.REP_BITS));\n    return bits;\n}",
            "src_parent_type": "Method",
            "src_type": "Wra"
          }
        }
      ],
      "file_name": "RepositoryUpgrade"
    }
  ],
  "id": "jackrabbit-oak_a0a495f0"
}