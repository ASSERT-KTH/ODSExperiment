{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "@java.lang.Override\nprotected void convertInput() {\n    resolveType();\n    java.lang.String[] value = org.apache.wicket.markup.html.form.AbstractTextComponent.getInputAsArray();\n    java.lang.String tmp = ((value != null) && (value.length > 0)) ? value[0] : null;\n    if (getConvertEmptyInputStringToNull() && org.apache.wicket.util.string.Strings.isEmpty(tmp)) {\n        org.apache.wicket.markup.html.form.AbstractTextComponent.setConvertedInput(null);\n    } else {\n        super.convertInput();\n    }\n}",
            "dst_parent": "public abstract class AbstractTextComponent<T> extends org.apache.wicket.markup.html.form.FormComponent<T> {\n    private static final int TYPE_RESOLVED = org.apache.wicket.Component.FLAG_RESERVED4;\n\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.markup.html.form.AbstractTextComponent.class);\n\n    private static final long serialVersionUID = 1L;\n\n    public static interface ITextFormatProvider {\n        public abstract java.lang.String getTextFormat();\n    }\n\n    public AbstractTextComponent(java.lang.String id) {\n        super(id);\n        setConvertEmptyInputStringToNull(true);\n    }\n\n    public AbstractTextComponent(final java.lang.String id, final org.apache.wicket.model.IModel<T> model) {\n        super(id, model);\n        setConvertEmptyInputStringToNull(true);\n    }\n\n    public final boolean getConvertEmptyInputStringToNull() {\n        return getFlag(org.apache.wicket.markup.html.form.FLAG_CONVERT_EMPTY_INPUT_STRING_TO_NULL);\n    }\n\n    @java.lang.Override\n    public boolean isInputNullable() {\n        return false;\n    }\n\n    @java.lang.Override\n    protected void convertInput() {\n        resolveType();\n        java.lang.String[] value = org.apache.wicket.markup.html.form.AbstractTextComponent.getInputAsArray();\n        java.lang.String tmp = ((value != null) && (value.length > 0)) ? value[0] : null;\n        if (getConvertEmptyInputStringToNull() && org.apache.wicket.util.string.Strings.isEmpty(tmp)) {\n            org.apache.wicket.markup.html.form.AbstractTextComponent.setConvertedInput(null);\n        } else {\n            super.convertInput();\n        }\n    }\n\n    @java.lang.Override\n    protected void onBeforeRender() {\n        super.onBeforeRender();\n        resolveType();\n    }\n\n    private void resolveType() {\n        if ((!org.apache.wicket.markup.html.form.AbstractTextComponent.getFlag(org.apache.wicket.markup.html.form.AbstractTextComponent.TYPE_RESOLVED)) && (org.apache.wicket.markup.html.form.AbstractTextComponent.getType() == null)) {\n            java.lang.Class<?> type = getModelType(org.apache.wicket.markup.html.form.AbstractTextComponent.getDefaultModel());\n            org.apache.wicket.markup.html.form.AbstractTextComponent.setType(type);\n            org.apache.wicket.markup.html.form.AbstractTextComponent.setFlag(org.apache.wicket.markup.html.form.AbstractTextComponent.TYPE_RESOLVED, true);\n        }\n    }\n\n    private java.lang.Class<?> getModelType(org.apache.wicket.model.IModel<?> model) {\n        if (model instanceof org.apache.wicket.model.IObjectClassAwareModel) {\n            java.lang.Class<?> objectClass = ((org.apache.wicket.model.IObjectClassAwareModel<?>) (model)).getObjectClass();\n            if (objectClass == null) {\n                org.apache.wicket.markup.html.form.AbstractTextComponent.log.warn((((\"Couldn't resolve model type of \" + model) + \" for \") + this) + \", please set the type yourself.\");\n            }\n            return objectClass;\n        } else {\n            return null;\n        }\n    }\n\n    public final org.apache.wicket.markup.html.form.FormComponent<T> setConvertEmptyInputStringToNull(boolean flag) {\n        setFlag(org.apache.wicket.markup.html.form.FLAG_CONVERT_EMPTY_INPUT_STRING_TO_NULL, flag);\n        return this;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "@java.lang.Override\nprotected T convertValue(java.lang.String[] value) throws org.apache.wicket.util.convert.ConversionException {\n    java.lang.String tmp = ((value != null) && (value.length > 0)) ? value[0] : null;\n    if (getConvertEmptyInputStringToNull() && org.apache.wicket.util.string.Strings.isEmpty(tmp)) {\n        return null;\n    }\n    return super.convertValue(value);\n}",
            "src_parent": "public abstract class AbstractTextComponent<T> extends org.apache.wicket.markup.html.form.FormComponent<T> {\n    private static final int TYPE_RESOLVED = org.apache.wicket.Component.FLAG_RESERVED4;\n\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.markup.html.form.AbstractTextComponent.class);\n\n    private static final long serialVersionUID = 1L;\n\n    public static interface ITextFormatProvider {\n        public abstract java.lang.String getTextFormat();\n    }\n\n    public AbstractTextComponent(java.lang.String id) {\n        super(id);\n        setConvertEmptyInputStringToNull(true);\n    }\n\n    public AbstractTextComponent(final java.lang.String id, final org.apache.wicket.model.IModel<T> model) {\n        super(id, model);\n        setConvertEmptyInputStringToNull(true);\n    }\n\n    public final boolean getConvertEmptyInputStringToNull() {\n        return getFlag(org.apache.wicket.markup.html.form.FLAG_CONVERT_EMPTY_INPUT_STRING_TO_NULL);\n    }\n\n    @java.lang.Override\n    public boolean isInputNullable() {\n        return false;\n    }\n\n    @java.lang.Override\n    protected void convertInput() {\n        resolveType();\n        super.convertInput();\n    }\n\n    @java.lang.Override\n    protected void onBeforeRender() {\n        super.onBeforeRender();\n        resolveType();\n    }\n\n    private void resolveType() {\n        if ((!org.apache.wicket.markup.html.form.AbstractTextComponent.getFlag(org.apache.wicket.markup.html.form.AbstractTextComponent.TYPE_RESOLVED)) && (org.apache.wicket.markup.html.form.AbstractTextComponent.getType() == null)) {\n            java.lang.Class<?> type = getModelType(org.apache.wicket.markup.html.form.AbstractTextComponent.getDefaultModel());\n            if (!java.lang.String.class.equals(type)) {\n                org.apache.wicket.markup.html.form.AbstractTextComponent.setType(type);\n            }\n            org.apache.wicket.markup.html.form.AbstractTextComponent.setFlag(org.apache.wicket.markup.html.form.AbstractTextComponent.TYPE_RESOLVED, true);\n        }\n    }\n\n    private java.lang.Class<?> getModelType(org.apache.wicket.model.IModel<?> model) {\n        if (model instanceof org.apache.wicket.model.IObjectClassAwareModel) {\n            java.lang.Class<?> objectClass = ((org.apache.wicket.model.IObjectClassAwareModel<?>) (model)).getObjectClass();\n            if (objectClass == null) {\n                org.apache.wicket.markup.html.form.AbstractTextComponent.log.warn((((\"Couldn't resolve model type of \" + model) + \" for \") + this) + \", please set the type yourself.\");\n            }\n            return objectClass;\n        } else {\n            return null;\n        }\n    }\n\n    public final org.apache.wicket.markup.html.form.FormComponent<T> setConvertEmptyInputStringToNull(boolean flag) {\n        setFlag(org.apache.wicket.markup.html.form.FLAG_CONVERT_EMPTY_INPUT_STRING_TO_NULL, flag);\n        return this;\n    }\n\n    @java.lang.Override\n    protected T convertValue(java.lang.String[] value) throws org.apache.wicket.util.convert.ConversionException {\n        java.lang.String tmp = ((value != null) && (value.length > 0)) ? value[0] : null;\n        if (getConvertEmptyInputStringToNull() && org.apache.wicket.util.string.Strings.isEmpty(tmp)) {\n            return null;\n        }\n        return super.convertValue(value);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeParameterReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "void",
            "dst_parent": "@java.lang.Override\nprotected void convertInput() {\n    resolveType();\n    java.lang.String[] value = org.apache.wicket.markup.html.form.AbstractTextComponent.getInputAsArray();\n    java.lang.String tmp = ((value != null) && (value.length > 0)) ? value[0] : null;\n    if (getConvertEmptyInputStringToNull() && org.apache.wicket.util.string.Strings.isEmpty(tmp)) {\n        org.apache.wicket.markup.html.form.AbstractTextComponent.setConvertedInput(null);\n    } else {\n        super.convertInput();\n    }\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "T",
            "src_parent": "@java.lang.Override\nprotected T convertValue(java.lang.String[] value) throws org.apache.wicket.util.convert.ConversionException {\n    java.lang.String tmp = ((value != null) && (value.length > 0)) ? value[0] : null;\n    if (getConvertEmptyInputStringToNull() && org.apache.wicket.util.string.Strings.isEmpty(tmp)) {\n        return null;\n    }\n    return super.convertValue(value);\n}",
            "src_parent_type": "Method",
            "src_type": "TypeParameterReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "return null",
            "src_parent": "{\n    return null;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "@java.lang.Override\nprotected void convertInput() {\n    resolveType();\n    super.convertInput();\n}",
            "src_parent": "public abstract class AbstractTextComponent<T> extends org.apache.wicket.markup.html.form.FormComponent<T> {\n    private static final int TYPE_RESOLVED = org.apache.wicket.Component.FLAG_RESERVED4;\n\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.markup.html.form.AbstractTextComponent.class);\n\n    private static final long serialVersionUID = 1L;\n\n    public static interface ITextFormatProvider {\n        public abstract java.lang.String getTextFormat();\n    }\n\n    public AbstractTextComponent(java.lang.String id) {\n        super(id);\n        setConvertEmptyInputStringToNull(true);\n    }\n\n    public AbstractTextComponent(final java.lang.String id, final org.apache.wicket.model.IModel<T> model) {\n        super(id, model);\n        setConvertEmptyInputStringToNull(true);\n    }\n\n    public final boolean getConvertEmptyInputStringToNull() {\n        return getFlag(org.apache.wicket.markup.html.form.FLAG_CONVERT_EMPTY_INPUT_STRING_TO_NULL);\n    }\n\n    @java.lang.Override\n    public boolean isInputNullable() {\n        return false;\n    }\n\n    @java.lang.Override\n    protected void convertInput() {\n        resolveType();\n        super.convertInput();\n    }\n\n    @java.lang.Override\n    protected void onBeforeRender() {\n        super.onBeforeRender();\n        resolveType();\n    }\n\n    private void resolveType() {\n        if ((!org.apache.wicket.markup.html.form.AbstractTextComponent.getFlag(org.apache.wicket.markup.html.form.AbstractTextComponent.TYPE_RESOLVED)) && (org.apache.wicket.markup.html.form.AbstractTextComponent.getType() == null)) {\n            java.lang.Class<?> type = getModelType(org.apache.wicket.markup.html.form.AbstractTextComponent.getDefaultModel());\n            if (!java.lang.String.class.equals(type)) {\n                org.apache.wicket.markup.html.form.AbstractTextComponent.setType(type);\n            }\n            org.apache.wicket.markup.html.form.AbstractTextComponent.setFlag(org.apache.wicket.markup.html.form.AbstractTextComponent.TYPE_RESOLVED, true);\n        }\n    }\n\n    private java.lang.Class<?> getModelType(org.apache.wicket.model.IModel<?> model) {\n        if (model instanceof org.apache.wicket.model.IObjectClassAwareModel) {\n            java.lang.Class<?> objectClass = ((org.apache.wicket.model.IObjectClassAwareModel<?>) (model)).getObjectClass();\n            if (objectClass == null) {\n                org.apache.wicket.markup.html.form.AbstractTextComponent.log.warn((((\"Couldn't resolve model type of \" + model) + \" for \") + this) + \", please set the type yourself.\");\n            }\n            return objectClass;\n        } else {\n            return null;\n        }\n    }\n\n    public final org.apache.wicket.markup.html.form.FormComponent<T> setConvertEmptyInputStringToNull(boolean flag) {\n        setFlag(org.apache.wicket.markup.html.form.FLAG_CONVERT_EMPTY_INPUT_STRING_TO_NULL, flag);\n        return this;\n    }\n\n    @java.lang.Override\n    protected T convertValue(java.lang.String[] value) throws org.apache.wicket.util.convert.ConversionException {\n        java.lang.String tmp = ((value != null) && (value.length > 0)) ? value[0] : null;\n        if (getConvertEmptyInputStringToNull() && org.apache.wicket.util.string.Strings.isEmpty(tmp)) {\n            return null;\n        }\n        return super.convertValue(value);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (!java.lang.String.class.equals(type)) {\n    org.apache.wicket.markup.html.form.AbstractTextComponent.setType(type);\n}",
            "src_parent": "{\n    java.lang.Class<?> type = getModelType(org.apache.wicket.markup.html.form.AbstractTextComponent.getDefaultModel());\n    if (!java.lang.String.class.equals(type)) {\n        org.apache.wicket.markup.html.form.AbstractTextComponent.setType(type);\n    }\n    org.apache.wicket.markup.html.form.AbstractTextComponent.setFlag(org.apache.wicket.markup.html.form.AbstractTextComponent.TYPE_RESOLVED, true);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    super.convertInput();\n}",
            "src_parent": "if (getConvertEmptyInputStringToNull() && org.apache.wicket.util.string.Strings.isEmpty(tmp)) {\n    org.apache.wicket.markup.html.form.AbstractTextComponent.setConvertedInput(null);\n} else {\n    super.convertInput();\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.wicket.markup.html.form.AbstractTextComponent.setConvertedInput(null)",
            "src_parent": "{\n    org.apache.wicket.markup.html.form.AbstractTextComponent.setConvertedInput(null);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "@java.lang.Override\nprotected void convertInput() {\n    resolveType();\n    java.lang.String[] value = org.apache.wicket.markup.html.form.AbstractTextComponent.getInputAsArray();\n    java.lang.String tmp = ((value != null) && (value.length > 0)) ? value[0] : null;\n    if (getConvertEmptyInputStringToNull() && org.apache.wicket.util.string.Strings.isEmpty(tmp)) {\n        org.apache.wicket.markup.html.form.AbstractTextComponent.setConvertedInput(null);\n    } else {\n        super.convertInput();\n    }\n}",
            "dst_parent": "public abstract class AbstractTextComponent<T> extends org.apache.wicket.markup.html.form.FormComponent<T> {\n    private static final int TYPE_RESOLVED = org.apache.wicket.Component.FLAG_RESERVED4;\n\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.markup.html.form.AbstractTextComponent.class);\n\n    private static final long serialVersionUID = 1L;\n\n    public static interface ITextFormatProvider {\n        public abstract java.lang.String getTextFormat();\n    }\n\n    public AbstractTextComponent(java.lang.String id) {\n        super(id);\n        setConvertEmptyInputStringToNull(true);\n    }\n\n    public AbstractTextComponent(final java.lang.String id, final org.apache.wicket.model.IModel<T> model) {\n        super(id, model);\n        setConvertEmptyInputStringToNull(true);\n    }\n\n    public final boolean getConvertEmptyInputStringToNull() {\n        return getFlag(org.apache.wicket.markup.html.form.FLAG_CONVERT_EMPTY_INPUT_STRING_TO_NULL);\n    }\n\n    @java.lang.Override\n    public boolean isInputNullable() {\n        return false;\n    }\n\n    @java.lang.Override\n    protected void convertInput() {\n        resolveType();\n        java.lang.String[] value = org.apache.wicket.markup.html.form.AbstractTextComponent.getInputAsArray();\n        java.lang.String tmp = ((value != null) && (value.length > 0)) ? value[0] : null;\n        if (getConvertEmptyInputStringToNull() && org.apache.wicket.util.string.Strings.isEmpty(tmp)) {\n            org.apache.wicket.markup.html.form.AbstractTextComponent.setConvertedInput(null);\n        } else {\n            super.convertInput();\n        }\n    }\n\n    @java.lang.Override\n    protected void onBeforeRender() {\n        super.onBeforeRender();\n        resolveType();\n    }\n\n    private void resolveType() {\n        if ((!org.apache.wicket.markup.html.form.AbstractTextComponent.getFlag(org.apache.wicket.markup.html.form.AbstractTextComponent.TYPE_RESOLVED)) && (org.apache.wicket.markup.html.form.AbstractTextComponent.getType() == null)) {\n            java.lang.Class<?> type = getModelType(org.apache.wicket.markup.html.form.AbstractTextComponent.getDefaultModel());\n            org.apache.wicket.markup.html.form.AbstractTextComponent.setType(type);\n            org.apache.wicket.markup.html.form.AbstractTextComponent.setFlag(org.apache.wicket.markup.html.form.AbstractTextComponent.TYPE_RESOLVED, true);\n        }\n    }\n\n    private java.lang.Class<?> getModelType(org.apache.wicket.model.IModel<?> model) {\n        if (model instanceof org.apache.wicket.model.IObjectClassAwareModel) {\n            java.lang.Class<?> objectClass = ((org.apache.wicket.model.IObjectClassAwareModel<?>) (model)).getObjectClass();\n            if (objectClass == null) {\n                org.apache.wicket.markup.html.form.AbstractTextComponent.log.warn((((\"Couldn't resolve model type of \" + model) + \" for \") + this) + \", please set the type yourself.\");\n            }\n            return objectClass;\n        } else {\n            return null;\n        }\n    }\n\n    public final org.apache.wicket.markup.html.form.FormComponent<T> setConvertEmptyInputStringToNull(boolean flag) {\n        setFlag(org.apache.wicket.markup.html.form.FLAG_CONVERT_EMPTY_INPUT_STRING_TO_NULL, flag);\n        return this;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "MOV",
            "src": "@java.lang.Override\nprotected T convertValue(java.lang.String[] value) throws org.apache.wicket.util.convert.ConversionException {\n    java.lang.String tmp = ((value != null) && (value.length > 0)) ? value[0] : null;\n    if (getConvertEmptyInputStringToNull() && org.apache.wicket.util.string.Strings.isEmpty(tmp)) {\n        return null;\n    }\n    return super.convertValue(value);\n}",
            "src_parent": "public abstract class AbstractTextComponent<T> extends org.apache.wicket.markup.html.form.FormComponent<T> {\n    private static final int TYPE_RESOLVED = org.apache.wicket.Component.FLAG_RESERVED4;\n\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.markup.html.form.AbstractTextComponent.class);\n\n    private static final long serialVersionUID = 1L;\n\n    public static interface ITextFormatProvider {\n        public abstract java.lang.String getTextFormat();\n    }\n\n    public AbstractTextComponent(java.lang.String id) {\n        super(id);\n        setConvertEmptyInputStringToNull(true);\n    }\n\n    public AbstractTextComponent(final java.lang.String id, final org.apache.wicket.model.IModel<T> model) {\n        super(id, model);\n        setConvertEmptyInputStringToNull(true);\n    }\n\n    public final boolean getConvertEmptyInputStringToNull() {\n        return getFlag(org.apache.wicket.markup.html.form.FLAG_CONVERT_EMPTY_INPUT_STRING_TO_NULL);\n    }\n\n    @java.lang.Override\n    public boolean isInputNullable() {\n        return false;\n    }\n\n    @java.lang.Override\n    protected void convertInput() {\n        resolveType();\n        super.convertInput();\n    }\n\n    @java.lang.Override\n    protected void onBeforeRender() {\n        super.onBeforeRender();\n        resolveType();\n    }\n\n    private void resolveType() {\n        if ((!org.apache.wicket.markup.html.form.AbstractTextComponent.getFlag(org.apache.wicket.markup.html.form.AbstractTextComponent.TYPE_RESOLVED)) && (org.apache.wicket.markup.html.form.AbstractTextComponent.getType() == null)) {\n            java.lang.Class<?> type = getModelType(org.apache.wicket.markup.html.form.AbstractTextComponent.getDefaultModel());\n            if (!java.lang.String.class.equals(type)) {\n                org.apache.wicket.markup.html.form.AbstractTextComponent.setType(type);\n            }\n            org.apache.wicket.markup.html.form.AbstractTextComponent.setFlag(org.apache.wicket.markup.html.form.AbstractTextComponent.TYPE_RESOLVED, true);\n        }\n    }\n\n    private java.lang.Class<?> getModelType(org.apache.wicket.model.IModel<?> model) {\n        if (model instanceof org.apache.wicket.model.IObjectClassAwareModel) {\n            java.lang.Class<?> objectClass = ((org.apache.wicket.model.IObjectClassAwareModel<?>) (model)).getObjectClass();\n            if (objectClass == null) {\n                org.apache.wicket.markup.html.form.AbstractTextComponent.log.warn((((\"Couldn't resolve model type of \" + model) + \" for \") + this) + \", please set the type yourself.\");\n            }\n            return objectClass;\n        } else {\n            return null;\n        }\n    }\n\n    public final org.apache.wicket.markup.html.form.FormComponent<T> setConvertEmptyInputStringToNull(boolean flag) {\n        setFlag(org.apache.wicket.markup.html.form.FLAG_CONVERT_EMPTY_INPUT_STRING_TO_NULL, flag);\n        return this;\n    }\n\n    @java.lang.Override\n    protected T convertValue(java.lang.String[] value) throws org.apache.wicket.util.convert.ConversionException {\n        java.lang.String tmp = ((value != null) && (value.length > 0)) ? value[0] : null;\n        if (getConvertEmptyInputStringToNull() && org.apache.wicket.util.string.Strings.isEmpty(tmp)) {\n            return null;\n        }\n        return super.convertValue(value);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "super.convertInput()",
            "dst_parent": "{\n    super.convertInput();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "super.convertInput()",
            "src_parent": "{\n    resolveType();\n    super.convertInput();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.wicket.markup.html.form.AbstractTextComponent.setType(type)",
            "dst_parent": "{\n    java.lang.Class<?> type = getModelType(org.apache.wicket.markup.html.form.AbstractTextComponent.getDefaultModel());\n    org.apache.wicket.markup.html.form.AbstractTextComponent.setType(type);\n    org.apache.wicket.markup.html.form.AbstractTextComponent.setFlag(org.apache.wicket.markup.html.form.AbstractTextComponent.TYPE_RESOLVED, true);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "org.apache.wicket.markup.html.form.AbstractTextComponent.setType(type)",
            "src_parent": "{\n    org.apache.wicket.markup.html.form.AbstractTextComponent.setType(type);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "AbstractTextComponent"
    }
  ],
  "id": "wicket_7e7ab76c"
}