{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "for (org.apache.jackrabbit.oak.spi.security.SecurityConfiguration sc : security.getConfigurations()) {\n    sc.getRepositoryInitializer().initialize(builder);\n}",
            "src_parent": "{\n    org.apache.jackrabbit.oak.spi.state.NodeState base = target.getRoot();\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder builder = base.builder();\n    java.lang.String workspaceName = source.getRepositoryConfig().getDefaultWorkspaceName();\n    org.apache.jackrabbit.oak.security.SecurityProviderImpl security = new org.apache.jackrabbit.oak.security.SecurityProviderImpl(mapSecurityConfig(config.getSecurityConfig()));\n    new org.apache.jackrabbit.oak.plugins.nodetype.write.InitialContent().initialize(builder);\n    if (initializer != null) {\n        initializer.initialize(builder);\n    }\n    for (org.apache.jackrabbit.oak.spi.security.SecurityConfiguration sc : security.getConfigurations()) {\n        sc.getRepositoryInitializer().initialize(builder);\n    }\n    for (org.apache.jackrabbit.oak.spi.security.SecurityConfiguration sc : security.getConfigurations()) {\n        sc.getWorkspaceInitializer().initialize(builder, workspaceName);\n    }\n    com.google.common.collect.HashBiMap<java.lang.String, java.lang.String> uriToPrefix = com.google.common.collect.HashBiMap.create();\n    java.util.Map<java.lang.Integer, java.lang.String> idxToPrefix = com.google.common.collect.Maps.newHashMap();\n    copyNamespaces(builder, uriToPrefix, idxToPrefix);\n    copyNodeTypes(builder, uriToPrefix.inverse());\n    copyPrivileges(builder);\n    new org.apache.jackrabbit.oak.plugins.nodetype.TypeEditorProvider(false).getRootEditor(base, builder.getNodeState(), builder, null);\n    java.util.Map<java.lang.String, java.lang.String> versionablePaths = com.google.common.collect.Maps.newHashMap();\n    org.apache.jackrabbit.oak.spi.state.NodeState root = builder.getNodeState();\n    copyWorkspace(builder, root, workspaceName, uriToPrefix, idxToPrefix, versionablePaths);\n    copyVersionStore(builder, root, workspaceName, uriToPrefix, idxToPrefix, versionablePaths);\n    org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Applying default commit hooks\");\n    java.util.List<org.apache.jackrabbit.oak.spi.commit.CommitHook> hooks = com.google.common.collect.Lists.newArrayList();\n    org.apache.jackrabbit.oak.spi.security.user.UserConfiguration userConf = security.getConfiguration(org.apache.jackrabbit.oak.spi.security.user.UserConfiguration.class);\n    java.lang.String groupsPath = userConf.getParameters().getConfigValue(UserConstants.PARAM_GROUP_PATH, UserConstants.DEFAULT_GROUP_PATH);\n    hooks.add(new org.apache.jackrabbit.oak.spi.commit.EditorHook(new org.apache.jackrabbit.oak.spi.commit.CompositeEditorProvider(new org.apache.jackrabbit.oak.upgrade.security.RestrictionEditorProvider(), new org.apache.jackrabbit.oak.upgrade.security.GroupEditorProvider(groupsPath))));\n    for (org.apache.jackrabbit.oak.spi.security.SecurityConfiguration sc : security.getConfigurations()) {\n        hooks.addAll(sc.getCommitHooks(workspaceName));\n    }\n    hooks.add(new org.apache.jackrabbit.oak.spi.commit.EditorHook(new org.apache.jackrabbit.oak.spi.commit.CompositeEditorProvider(org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.createTypeEditorProvider(), org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.createIndexEditorProvider())));\n    target.merge(builder, org.apache.jackrabbit.oak.spi.commit.CompositeHook.compose(hooks), CommitInfo.EMPTY);\n}",
            "src_parent_type": "Block",
            "src_type": "ForEach"
          }
        }
      ],
      "file_name": "RepositoryUpgrade"
    }
  ],
  "id": "jackrabbit-oak_ca63fdf3"
}