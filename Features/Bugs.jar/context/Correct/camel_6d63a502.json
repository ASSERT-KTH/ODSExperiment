{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "\"]\"",
            "dst_parent": "sb.append(\"]\")",
            "dst_parent_type": "Invocation",
            "dst_type": "Literal",
            "operator": "UPD",
            "src": "']'",
            "src_parent": "sb.append(']')",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "return \"Exchange[\" + (multiline ? answer.append(']').toString() : answer.toString().substring(2) + \"]\")",
            "src_parent": "{\n    java.lang.StringBuilder answer = new java.lang.StringBuilder();\n    for (java.lang.String s : sb.toString().split(org.apache.camel.component.log.LogFormatter.LS)) {\n        if (s != null) {\n            if (s.length() > maxChars) {\n                s = s.substring(0, maxChars);\n                answer.append(s).append(\"...\");\n            } else {\n                answer.append(s);\n            }\n            if (multiline) {\n                answer.append(org.apache.camel.component.log.LogFormatter.LS);\n            }\n        }\n    }\n    return \"Exchange[\" + (multiline ? answer.append(']').toString() : answer.toString().substring(2) + \"]\");\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "return \"Exchange[\" + (multiline ? sb.append(']').toString() : sb.toString().substring(2) + \"]\")",
            "src_parent": "{\n    org.apache.camel.Message in = exchange.getIn();\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    if (showAll || showExchangeId) {\n        if (multiline) {\n            sb.append(org.apache.camel.component.log.LogFormatter.LS);\n        }\n        sb.append(\", Id:\").append(exchange.getExchangeId());\n    }\n    if (showAll || showExchangePattern) {\n        if (multiline) {\n            sb.append(org.apache.camel.component.log.LogFormatter.LS);\n        }\n        sb.append(\", ExchangePattern:\").append(exchange.getPattern());\n    }\n    if (showAll || showProperties) {\n        if (multiline) {\n            sb.append(org.apache.camel.component.log.LogFormatter.LS);\n        }\n        sb.append(\", Properties:\").append(exchange.getProperties());\n    }\n    if (showAll || showHeaders) {\n        if (multiline) {\n            sb.append(org.apache.camel.component.log.LogFormatter.LS);\n        }\n        sb.append(\", Headers:\").append(in.getHeaders());\n    }\n    if (showAll || showBodyType) {\n        if (multiline) {\n            sb.append(org.apache.camel.component.log.LogFormatter.LS);\n        }\n        sb.append(\", BodyType:\").append(getBodyTypeAsString(in));\n    }\n    if (showAll || showBody) {\n        if (multiline) {\n            sb.append(org.apache.camel.component.log.LogFormatter.LS);\n        }\n        sb.append(\", Body:\").append(getBodyAsString(in));\n    }\n    if ((showAll || showException) || showCaughtException) {\n        java.lang.Exception exception = exchange.getException();\n        boolean caught = false;\n        if ((showAll || showCaughtException) && (exception == null)) {\n            exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, java.lang.Exception.class);\n            caught = true;\n        }\n        if (exception != null) {\n            if (multiline) {\n                sb.append(org.apache.camel.component.log.LogFormatter.LS);\n            }\n            if (caught) {\n                sb.append(\", CaughtExceptionType:\").append(exception.getClass().getCanonicalName());\n                sb.append(\", CaughtExceptionMessage:\").append(exception.getMessage());\n            } else {\n                sb.append(\", ExceptionType:\").append(exception.getClass().getCanonicalName());\n                sb.append(\", ExceptionMessage:\").append(exception.getMessage());\n            }\n            if (showAll || showStackTrace) {\n                java.io.StringWriter sw = new java.io.StringWriter();\n                exception.printStackTrace(new java.io.PrintWriter(sw));\n                sb.append(\", StackTrace:\").append(sw.toString());\n            }\n        }\n    }\n    if (showAll || showOut) {\n        if (exchange.hasOut()) {\n            org.apache.camel.Message out = exchange.getOut();\n            if (showAll || showHeaders) {\n                if (multiline) {\n                    sb.append(org.apache.camel.component.log.LogFormatter.LS);\n                }\n                sb.append(\", OutHeaders:\").append(out.getHeaders());\n            }\n            if (showAll || showBodyType) {\n                if (multiline) {\n                    sb.append(org.apache.camel.component.log.LogFormatter.LS);\n                }\n                sb.append(\", OutBodyType:\").append(getBodyTypeAsString(out));\n            }\n            if (showAll || showBody) {\n                if (multiline) {\n                    sb.append(org.apache.camel.component.log.LogFormatter.LS);\n                }\n                sb.append(\", OutBody:\").append(getBodyAsString(out));\n            }\n        } else {\n            if (multiline) {\n                sb.append(org.apache.camel.component.log.LogFormatter.LS);\n            }\n            sb.append(\", Out: null\");\n        }\n    }\n    if (maxChars > 0) {\n        java.lang.StringBuilder answer = new java.lang.StringBuilder();\n        for (java.lang.String s : sb.toString().split(org.apache.camel.component.log.LogFormatter.LS)) {\n            if (s != null) {\n                if (s.length() > maxChars) {\n                    s = s.substring(0, maxChars);\n                    answer.append(s).append(\"...\");\n                } else {\n                    answer.append(s);\n                }\n                if (multiline) {\n                    answer.append(org.apache.camel.component.log.LogFormatter.LS);\n                }\n            }\n        }\n        return \"Exchange[\" + (multiline ? answer.append(']').toString() : answer.toString().substring(2) + \"]\");\n    }\n    return \"Exchange[\" + (multiline ? sb.append(']').toString() : sb.toString().substring(2) + \"]\");\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (multiline) {\n    sb.insert(0, \"Exchange[\");\n    sb.append(\"]\");\n    return sb.toString();\n} else {\n    if (((sb.length() > 0) && (sb.charAt(0) == ',')) && (sb.charAt(1) == ' ')) {\n        sb.replace(0, 2, \"\");\n    }\n    sb.insert(0, \"Exchange[\");\n    sb.append(\"]\");\n    return sb.toString();\n}",
            "src_parent": "{\n    org.apache.camel.Message in = exchange.getIn();\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    if (showAll || showExchangeId) {\n        if (multiline) {\n            sb.append(org.apache.camel.component.log.LogFormatter.LS);\n        }\n        sb.append(\", Id:\").append(exchange.getExchangeId());\n    }\n    if (showAll || showExchangePattern) {\n        if (multiline) {\n            sb.append(org.apache.camel.component.log.LogFormatter.LS);\n        }\n        sb.append(\", ExchangePattern:\").append(exchange.getPattern());\n    }\n    if (showAll || showProperties) {\n        if (multiline) {\n            sb.append(org.apache.camel.component.log.LogFormatter.LS);\n        }\n        sb.append(\", Properties:\").append(exchange.getProperties());\n    }\n    if (showAll || showHeaders) {\n        if (multiline) {\n            sb.append(org.apache.camel.component.log.LogFormatter.LS);\n        }\n        sb.append(\", Headers:\").append(in.getHeaders());\n    }\n    if (showAll || showBodyType) {\n        if (multiline) {\n            sb.append(org.apache.camel.component.log.LogFormatter.LS);\n        }\n        sb.append(\", BodyType:\").append(getBodyTypeAsString(in));\n    }\n    if (showAll || showBody) {\n        if (multiline) {\n            sb.append(org.apache.camel.component.log.LogFormatter.LS);\n        }\n        sb.append(\", Body:\").append(getBodyAsString(in));\n    }\n    if ((showAll || showException) || showCaughtException) {\n        java.lang.Exception exception = exchange.getException();\n        boolean caught = false;\n        if ((showAll || showCaughtException) && (exception == null)) {\n            exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, java.lang.Exception.class);\n            caught = true;\n        }\n        if (exception != null) {\n            if (multiline) {\n                sb.append(org.apache.camel.component.log.LogFormatter.LS);\n            }\n            if (caught) {\n                sb.append(\", CaughtExceptionType:\").append(exception.getClass().getCanonicalName());\n                sb.append(\", CaughtExceptionMessage:\").append(exception.getMessage());\n            } else {\n                sb.append(\", ExceptionType:\").append(exception.getClass().getCanonicalName());\n                sb.append(\", ExceptionMessage:\").append(exception.getMessage());\n            }\n            if (showAll || showStackTrace) {\n                java.io.StringWriter sw = new java.io.StringWriter();\n                exception.printStackTrace(new java.io.PrintWriter(sw));\n                sb.append(\", StackTrace:\").append(sw.toString());\n            }\n        }\n    }\n    if (showAll || showOut) {\n        if (exchange.hasOut()) {\n            org.apache.camel.Message out = exchange.getOut();\n            if (showAll || showHeaders) {\n                if (multiline) {\n                    sb.append(org.apache.camel.component.log.LogFormatter.LS);\n                }\n                sb.append(\", OutHeaders:\").append(out.getHeaders());\n            }\n            if (showAll || showBodyType) {\n                if (multiline) {\n                    sb.append(org.apache.camel.component.log.LogFormatter.LS);\n                }\n                sb.append(\", OutBodyType:\").append(getBodyTypeAsString(out));\n            }\n            if (showAll || showBody) {\n                if (multiline) {\n                    sb.append(org.apache.camel.component.log.LogFormatter.LS);\n                }\n                sb.append(\", OutBody:\").append(getBodyAsString(out));\n            }\n        } else {\n            if (multiline) {\n                sb.append(org.apache.camel.component.log.LogFormatter.LS);\n            }\n            sb.append(\", Out: null\");\n        }\n    }\n    if (maxChars > 0) {\n        java.lang.StringBuilder answer = new java.lang.StringBuilder();\n        for (java.lang.String s : sb.toString().split(org.apache.camel.component.log.LogFormatter.LS)) {\n            if (s != null) {\n                if (s.length() > maxChars) {\n                    s = s.substring(0, maxChars);\n                    answer.append(s).append(\"...\");\n                } else {\n                    answer.append(s);\n                }\n                if (multiline) {\n                    answer.append(org.apache.camel.component.log.LogFormatter.LS);\n                }\n            }\n        }\n        sb = answer;\n    }\n    if (multiline) {\n        sb.insert(0, \"Exchange[\");\n        sb.append(\"]\");\n        return sb.toString();\n    } else {\n        if (((sb.length() > 0) && (sb.charAt(0) == ',')) && (sb.charAt(1) == ' ')) {\n            sb.replace(0, 2, \"\");\n        }\n        sb.insert(0, \"Exchange[\");\n        sb.append(\"]\");\n        return sb.toString();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "sb = answer",
            "src_parent": "{\n    java.lang.StringBuilder answer = new java.lang.StringBuilder();\n    for (java.lang.String s : sb.toString().split(org.apache.camel.component.log.LogFormatter.LS)) {\n        if (s != null) {\n            if (s.length() > maxChars) {\n                s = s.substring(0, maxChars);\n                answer.append(s).append(\"...\");\n            } else {\n                answer.append(s);\n            }\n            if (multiline) {\n                answer.append(org.apache.camel.component.log.LogFormatter.LS);\n            }\n        }\n    }\n    sb = answer;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "multiline",
            "dst_parent": "if (multiline) {\n    sb.insert(0, \"Exchange[\");\n    sb.append(\"]\");\n    return sb.toString();\n} else {\n    if (((sb.length() > 0) && (sb.charAt(0) == ',')) && (sb.charAt(1) == ' ')) {\n        sb.replace(0, 2, \"\");\n    }\n    sb.insert(0, \"Exchange[\");\n    sb.append(\"]\");\n    return sb.toString();\n}",
            "dst_parent_type": "If",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "multiline",
            "src_parent": "(multiline ? answer.append(']').toString() : answer.toString().substring(2) + \"]\")",
            "src_parent_type": "Conditional",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "sb",
            "dst_parent": "sb.append(\"]\")",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "sb",
            "src_parent": "sb.append(']')",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "\"]\"",
            "dst_parent": "sb.append(\"]\")",
            "dst_parent_type": "Invocation",
            "dst_type": "Literal",
            "operator": "MOV",
            "src": "']'",
            "src_parent": "sb.append(']')",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "sb.toString()",
            "dst_parent": "return sb.toString()",
            "dst_parent_type": "Return",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "sb.toString()",
            "src_parent": "sb.toString().substring(2)",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "2",
            "dst_parent": "sb.replace(0, 2, \"\")",
            "dst_parent_type": "Invocation",
            "dst_type": "Literal",
            "operator": "MOV",
            "src": "2",
            "src_parent": "sb.toString().substring(2)",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        }
      ],
      "file_name": "LogFormatter"
    }
  ],
  "id": "camel_6d63a502"
}