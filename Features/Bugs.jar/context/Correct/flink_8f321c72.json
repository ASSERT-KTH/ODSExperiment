{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "private java.lang.String checkAndTrimPathArg(java.lang.String path) {\n    if (path == null) {\n        throw new java.lang.IllegalArgumentException(\"Can not create a Path from a null string\");\n    }\n    path = path.trim();\n    if (path.length() == 0) {\n        throw new java.lang.IllegalArgumentException(\"Can not create a Path from an empty string\");\n    }\n    return path;\n}",
            "dst_parent": "public class Path implements java.io.Serializable , org.apache.flink.core.io.IOReadableWritable {\n    private static final long serialVersionUID = 1L;\n\n    public static final java.lang.String SEPARATOR = \"/\";\n\n    public static final char SEPARATOR_CHAR = '/';\n\n    public static final java.lang.String CUR_DIR = \".\";\n\n    private java.net.URI uri;\n\n    public Path() {\n    }\n\n    public Path(java.net.URI uri) {\n        this.uri = uri;\n    }\n\n    public Path(java.lang.String parent, java.lang.String child) {\n        this(new org.apache.flink.core.fs.Path(parent), new org.apache.flink.core.fs.Path(child));\n    }\n\n    public Path(org.apache.flink.core.fs.Path parent, java.lang.String child) {\n        this(parent, new org.apache.flink.core.fs.Path(child));\n    }\n\n    public Path(java.lang.String parent, org.apache.flink.core.fs.Path child) {\n        this(new org.apache.flink.core.fs.Path(parent), child);\n    }\n\n    public Path(org.apache.flink.core.fs.Path parent, org.apache.flink.core.fs.Path child) {\n        java.net.URI parentUri = parent.uri;\n        final java.lang.String parentPath = parentUri.getPath();\n        if (!(parentPath.equals(\"/\") || parentPath.equals(\"\"))) {\n            try {\n                parentUri = new java.net.URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + \"/\", null, null);\n            } catch (java.net.URISyntaxException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n        if (child.uri.getPath().startsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n            child = new org.apache.flink.core.fs.Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1));\n        }\n        final java.net.URI resolved = parentUri.resolve(child.uri);\n        initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()));\n    }\n\n    private java.lang.String checkAndTrimPathArg(java.lang.String path) {\n        if (path == null) {\n            throw new java.lang.IllegalArgumentException(\"Can not create a Path from a null string\");\n        }\n        path = path.trim();\n        if (path.length() == 0) {\n            throw new java.lang.IllegalArgumentException(\"Can not create a Path from an empty string\");\n        }\n        return path;\n    }\n\n    public Path(java.lang.String pathString) {\n        pathString = checkAndTrimPathArg(pathString);\n        if (hasWindowsDrive(pathString, false)) {\n            pathString = \"/\" + pathString;\n        }\n        java.lang.String scheme = null;\n        java.lang.String authority = null;\n        int start = 0;\n        final int colon = pathString.indexOf(':');\n        final int slash = pathString.indexOf('/');\n        if ((colon != (-1)) && ((slash == (-1)) || (colon < slash))) {\n            scheme = pathString.substring(0, colon);\n            start = colon + 1;\n        }\n        if (pathString.startsWith(\"//\", start) && ((pathString.length() - start) > 2)) {\n            final int nextSlash = pathString.indexOf('/', start + 2);\n            final int authEnd = (nextSlash > 0) ? nextSlash : pathString.length();\n            authority = pathString.substring(start + 2, authEnd);\n            start = authEnd;\n        }\n        final java.lang.String path = pathString.substring(start, pathString.length());\n        initialize(scheme, authority, path);\n    }\n\n    public Path(java.lang.String scheme, java.lang.String authority, java.lang.String path) {\n        path = checkAndTrimPathArg(path);\n        initialize(scheme, authority, path);\n    }\n\n    private void initialize(java.lang.String scheme, java.lang.String authority, java.lang.String path) {\n        try {\n            this.uri = new java.net.URI(scheme, authority, normalizePath(path), null, null).normalize();\n        } catch (java.net.URISyntaxException e) {\n            throw new java.lang.IllegalArgumentException(e);\n        }\n    }\n\n    private java.lang.String normalizePath(java.lang.String path) {\n        path = path.trim();\n        path = path.replace(\"\\\\\", \"/\");\n        path = path.replaceAll(\"/+\", \"/\");\n        if ((!path.equals(org.apache.flink.core.fs.Path.SEPARATOR)) && path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n            path = path.substring(0, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n        }\n        return path;\n    }\n\n    private boolean hasWindowsDrive(java.lang.String path, boolean slashed) {\n        if (!org.apache.flink.util.OperatingSystem.isWindows()) {\n            return false;\n        }\n        final int start = (slashed) ? 1 : 0;\n        return (((path.length() >= (start + 2)) && ((!slashed) || (path.charAt(0) == '/'))) && (path.charAt(start + 1) == ':')) && (((path.charAt(start) >= 'A') && (path.charAt(start) <= 'Z')) || ((path.charAt(start) >= 'a') && (path.charAt(start) <= 'z')));\n    }\n\n    public java.net.URI toUri() {\n        return uri;\n    }\n\n    public org.apache.flink.core.fs.FileSystem getFileSystem() throws java.io.IOException {\n        return org.apache.flink.core.fs.FileSystem.get(this.toUri());\n    }\n\n    public boolean isAbsolute() {\n        final int start = (hasWindowsDrive(uri.getPath(), true)) ? 3 : 0;\n        return uri.getPath().startsWith(org.apache.flink.core.fs.Path.SEPARATOR, start);\n    }\n\n    public java.lang.String getName() {\n        final java.lang.String path = uri.getPath();\n        final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n        return path.substring(slash + 1);\n    }\n\n    public org.apache.flink.core.fs.Path getParent() {\n        final java.lang.String path = uri.getPath();\n        final int lastSlash = path.lastIndexOf('/');\n        final int start = (hasWindowsDrive(path, true)) ? 3 : 0;\n        if ((path.length() == start) || ((lastSlash == start) && (path.length() == (start + 1)))) {\n            return null;\n        }\n        java.lang.String parent;\n        if (lastSlash == (-1)) {\n            parent = org.apache.flink.core.fs.Path.CUR_DIR;\n        } else {\n            final int end = (hasWindowsDrive(path, true)) ? 3 : 0;\n            parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash);\n        }\n        return new org.apache.flink.core.fs.Path(uri.getScheme(), uri.getAuthority(), parent);\n    }\n\n    public org.apache.flink.core.fs.Path suffix(java.lang.String suffix) {\n        return new org.apache.flink.core.fs.Path(getParent(), getName() + suffix);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        final java.lang.StringBuilder buffer = new java.lang.StringBuilder();\n        if (uri.getScheme() != null) {\n            buffer.append(uri.getScheme());\n            buffer.append(\":\");\n        }\n        if (uri.getAuthority() != null) {\n            buffer.append(\"//\");\n            buffer.append(uri.getAuthority());\n        }\n        if (uri.getPath() != null) {\n            java.lang.String path = uri.getPath();\n            if ((((path.indexOf('/') == 0) && hasWindowsDrive(path, true)) && (uri.getScheme() == null)) && (uri.getAuthority() == null)) {\n                path = path.substring(1);\n            }\n            buffer.append(path);\n        }\n        return buffer.toString();\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (!(o instanceof org.apache.flink.core.fs.Path)) {\n            return false;\n        }\n        org.apache.flink.core.fs.Path that = ((org.apache.flink.core.fs.Path) (o));\n        return this.uri.equals(that.uri);\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return uri.hashCode();\n    }\n\n    public int compareTo(java.lang.Object o) {\n        org.apache.flink.core.fs.Path that = ((org.apache.flink.core.fs.Path) (o));\n        return this.uri.compareTo(that.uri);\n    }\n\n    public int depth() {\n        java.lang.String path = uri.getPath();\n        int depth = 0;\n        int slash = ((path.length() == 1) && (path.charAt(0) == '/')) ? -1 : 0;\n        while (slash != (-1)) {\n            depth++;\n            slash = path.indexOf(org.apache.flink.core.fs.Path.SEPARATOR, slash + 1);\n        } \n        return depth;\n    }\n\n    public org.apache.flink.core.fs.Path makeQualified(org.apache.flink.core.fs.FileSystem fs) {\n        org.apache.flink.core.fs.Path path = this;\n        if (!isAbsolute()) {\n            path = new org.apache.flink.core.fs.Path(fs.getWorkingDirectory(), this);\n        }\n        final java.net.URI pathUri = path.toUri();\n        final java.net.URI fsUri = fs.getUri();\n        java.lang.String scheme = pathUri.getScheme();\n        java.lang.String authority = pathUri.getAuthority();\n        if ((scheme != null) && ((authority != null) || (fsUri.getAuthority() == null))) {\n            return path;\n        }\n        if (scheme == null) {\n            scheme = fsUri.getScheme();\n        }\n        if (authority == null) {\n            authority = fsUri.getAuthority();\n            if (authority == null) {\n                authority = \"\";\n            }\n        }\n        return new org.apache.flink.core.fs.Path((((scheme + \":\") + \"//\") + authority) + pathUri.getPath());\n    }\n\n    @java.lang.Override\n    public void read(org.apache.flink.core.memory.DataInputView in) throws java.io.IOException {\n        final boolean isNotNull = in.readBoolean();\n        if (isNotNull) {\n            final java.lang.String scheme = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String userInfo = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String host = org.apache.flink.core.io.StringRecord.readString(in);\n            final int port = in.readInt();\n            final java.lang.String path = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String query = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String fragment = org.apache.flink.core.io.StringRecord.readString(in);\n            try {\n                uri = new java.net.URI(scheme, userInfo, host, port, path, query, fragment);\n            } catch (java.net.URISyntaxException e) {\n                throw new java.io.IOException(\"Error reconstructing URI: \" + org.apache.flink.util.StringUtils.stringifyException(e));\n            }\n        }\n    }\n\n    @java.lang.Override\n    public void write(org.apache.flink.core.memory.DataOutputView out) throws java.io.IOException {\n        if (uri == null) {\n            out.writeBoolean(false);\n        } else {\n            out.writeBoolean(true);\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getScheme());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getUserInfo());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getHost());\n            out.writeInt(uri.getPort());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getPath());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getQuery());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getFragment());\n        }\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "private void checkPathArg(java.lang.String path) {\n    if (path == null) {\n        throw new java.lang.IllegalArgumentException(\"Can not create a Path from a null string\");\n    }\n    if (path.length() == 0) {\n        throw new java.lang.IllegalArgumentException(\"Can not create a Path from an empty string\");\n    }\n}",
            "src_parent": "public class Path implements java.io.Serializable , org.apache.flink.core.io.IOReadableWritable {\n    private static final long serialVersionUID = 1L;\n\n    public static final java.lang.String SEPARATOR = \"/\";\n\n    public static final char SEPARATOR_CHAR = '/';\n\n    public static final java.lang.String CUR_DIR = \".\";\n\n    private java.net.URI uri;\n\n    public Path() {\n    }\n\n    public Path(java.net.URI uri) {\n        this.uri = uri;\n    }\n\n    public Path(java.lang.String parent, java.lang.String child) {\n        this(new org.apache.flink.core.fs.Path(parent), new org.apache.flink.core.fs.Path(child));\n    }\n\n    public Path(org.apache.flink.core.fs.Path parent, java.lang.String child) {\n        this(parent, new org.apache.flink.core.fs.Path(child));\n    }\n\n    public Path(java.lang.String parent, org.apache.flink.core.fs.Path child) {\n        this(new org.apache.flink.core.fs.Path(parent), child);\n    }\n\n    public Path(org.apache.flink.core.fs.Path parent, org.apache.flink.core.fs.Path child) {\n        java.net.URI parentUri = parent.uri;\n        final java.lang.String parentPath = parentUri.getPath();\n        if (!(parentPath.equals(\"/\") || parentPath.equals(\"\"))) {\n            try {\n                parentUri = new java.net.URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + \"/\", null, null);\n            } catch (java.net.URISyntaxException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n        if (child.uri.getPath().startsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n            child = new org.apache.flink.core.fs.Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1));\n        }\n        final java.net.URI resolved = parentUri.resolve(child.uri);\n        initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()));\n    }\n\n    private void checkPathArg(java.lang.String path) {\n        if (path == null) {\n            throw new java.lang.IllegalArgumentException(\"Can not create a Path from a null string\");\n        }\n        if (path.length() == 0) {\n            throw new java.lang.IllegalArgumentException(\"Can not create a Path from an empty string\");\n        }\n    }\n\n    public Path(java.lang.String pathString) {\n        checkPathArg(pathString);\n        if (hasWindowsDrive(pathString, false)) {\n            pathString = \"/\" + pathString;\n        }\n        java.lang.String scheme = null;\n        java.lang.String authority = null;\n        int start = 0;\n        final int colon = pathString.indexOf(':');\n        final int slash = pathString.indexOf('/');\n        if ((colon != (-1)) && ((slash == (-1)) || (colon < slash))) {\n            scheme = pathString.substring(0, colon);\n            start = colon + 1;\n        }\n        if (pathString.startsWith(\"//\", start) && ((pathString.length() - start) > 2)) {\n            final int nextSlash = pathString.indexOf('/', start + 2);\n            final int authEnd = (nextSlash > 0) ? nextSlash : pathString.length();\n            authority = pathString.substring(start + 2, authEnd);\n            start = authEnd;\n        }\n        final java.lang.String path = pathString.substring(start, pathString.length());\n        initialize(scheme, authority, path);\n    }\n\n    public Path(java.lang.String scheme, java.lang.String authority, java.lang.String path) {\n        checkPathArg(path);\n        initialize(scheme, authority, path);\n    }\n\n    private void initialize(java.lang.String scheme, java.lang.String authority, java.lang.String path) {\n        try {\n            this.uri = new java.net.URI(scheme, authority, normalizePath(path), null, null).normalize();\n        } catch (java.net.URISyntaxException e) {\n            throw new java.lang.IllegalArgumentException(e);\n        }\n    }\n\n    private java.lang.String normalizePath(java.lang.String path) {\n        path = path.replace(\"//\", \"/\");\n        path = path.replace(\"\\\\\", \"/\");\n        return path;\n    }\n\n    private boolean hasWindowsDrive(java.lang.String path, boolean slashed) {\n        if (!org.apache.flink.util.OperatingSystem.isWindows()) {\n            return false;\n        }\n        final int start = (slashed) ? 1 : 0;\n        return (((path.length() >= (start + 2)) && ((!slashed) || (path.charAt(0) == '/'))) && (path.charAt(start + 1) == ':')) && (((path.charAt(start) >= 'A') && (path.charAt(start) <= 'Z')) || ((path.charAt(start) >= 'a') && (path.charAt(start) <= 'z')));\n    }\n\n    public java.net.URI toUri() {\n        return uri;\n    }\n\n    public org.apache.flink.core.fs.FileSystem getFileSystem() throws java.io.IOException {\n        return org.apache.flink.core.fs.FileSystem.get(this.toUri());\n    }\n\n    public boolean isAbsolute() {\n        final int start = (hasWindowsDrive(uri.getPath(), true)) ? 3 : 0;\n        return uri.getPath().startsWith(org.apache.flink.core.fs.Path.SEPARATOR, start);\n    }\n\n    public java.lang.String getName() {\n        final java.lang.String path = uri.getPath();\n        if (path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n            final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR, (path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length()) - 1);\n            return path.substring(slash + 1, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n        } else {\n            final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n            return path.substring(slash + 1);\n        }\n    }\n\n    public org.apache.flink.core.fs.Path getParent() {\n        final java.lang.String path = uri.getPath();\n        final int lastSlash = path.lastIndexOf('/');\n        final int start = (hasWindowsDrive(path, true)) ? 3 : 0;\n        if ((path.length() == start) || ((lastSlash == start) && (path.length() == (start + 1)))) {\n            return null;\n        }\n        java.lang.String parent;\n        if (lastSlash == (-1)) {\n            parent = org.apache.flink.core.fs.Path.CUR_DIR;\n        } else {\n            final int end = (hasWindowsDrive(path, true)) ? 3 : 0;\n            parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash);\n        }\n        return new org.apache.flink.core.fs.Path(uri.getScheme(), uri.getAuthority(), parent);\n    }\n\n    public org.apache.flink.core.fs.Path suffix(java.lang.String suffix) {\n        return new org.apache.flink.core.fs.Path(getParent(), getName() + suffix);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        final java.lang.StringBuilder buffer = new java.lang.StringBuilder();\n        if (uri.getScheme() != null) {\n            buffer.append(uri.getScheme());\n            buffer.append(\":\");\n        }\n        if (uri.getAuthority() != null) {\n            buffer.append(\"//\");\n            buffer.append(uri.getAuthority());\n        }\n        if (uri.getPath() != null) {\n            java.lang.String path = uri.getPath();\n            if ((((path.indexOf('/') == 0) && hasWindowsDrive(path, true)) && (uri.getScheme() == null)) && (uri.getAuthority() == null)) {\n                path = path.substring(1);\n            }\n            buffer.append(path);\n        }\n        return buffer.toString();\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (!(o instanceof org.apache.flink.core.fs.Path)) {\n            return false;\n        }\n        org.apache.flink.core.fs.Path that = ((org.apache.flink.core.fs.Path) (o));\n        return this.uri.equals(that.uri);\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return uri.hashCode();\n    }\n\n    public int compareTo(java.lang.Object o) {\n        org.apache.flink.core.fs.Path that = ((org.apache.flink.core.fs.Path) (o));\n        return this.uri.compareTo(that.uri);\n    }\n\n    public int depth() {\n        java.lang.String path = uri.getPath();\n        int depth = 0;\n        int slash = ((path.length() == 1) && (path.charAt(0) == '/')) ? -1 : 0;\n        while (slash != (-1)) {\n            depth++;\n            slash = path.indexOf(org.apache.flink.core.fs.Path.SEPARATOR, slash + 1);\n        } \n        return depth;\n    }\n\n    public org.apache.flink.core.fs.Path makeQualified(org.apache.flink.core.fs.FileSystem fs) {\n        org.apache.flink.core.fs.Path path = this;\n        if (!isAbsolute()) {\n            path = new org.apache.flink.core.fs.Path(fs.getWorkingDirectory(), this);\n        }\n        final java.net.URI pathUri = path.toUri();\n        final java.net.URI fsUri = fs.getUri();\n        java.lang.String scheme = pathUri.getScheme();\n        java.lang.String authority = pathUri.getAuthority();\n        if ((scheme != null) && ((authority != null) || (fsUri.getAuthority() == null))) {\n            return path;\n        }\n        if (scheme == null) {\n            scheme = fsUri.getScheme();\n        }\n        if (authority == null) {\n            authority = fsUri.getAuthority();\n            if (authority == null) {\n                authority = \"\";\n            }\n        }\n        return new org.apache.flink.core.fs.Path((((scheme + \":\") + \"//\") + authority) + pathUri.getPath());\n    }\n\n    @java.lang.Override\n    public void read(org.apache.flink.core.memory.DataInputView in) throws java.io.IOException {\n        final boolean isNotNull = in.readBoolean();\n        if (isNotNull) {\n            final java.lang.String scheme = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String userInfo = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String host = org.apache.flink.core.io.StringRecord.readString(in);\n            final int port = in.readInt();\n            final java.lang.String path = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String query = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String fragment = org.apache.flink.core.io.StringRecord.readString(in);\n            try {\n                uri = new java.net.URI(scheme, userInfo, host, port, path, query, fragment);\n            } catch (java.net.URISyntaxException e) {\n                throw new java.io.IOException(\"Error reconstructing URI: \" + org.apache.flink.util.StringUtils.stringifyException(e));\n            }\n        }\n    }\n\n    @java.lang.Override\n    public void write(org.apache.flink.core.memory.DataOutputView out) throws java.io.IOException {\n        if (uri == null) {\n            out.writeBoolean(false);\n        } else {\n            out.writeBoolean(true);\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getScheme());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getUserInfo());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getHost());\n            out.writeInt(uri.getPort());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getPath());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getQuery());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getFragment());\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String",
            "dst_parent": "private java.lang.String checkAndTrimPathArg(java.lang.String path) {\n    if (path == null) {\n        throw new java.lang.IllegalArgumentException(\"Can not create a Path from a null string\");\n    }\n    path = path.trim();\n    if (path.length() == 0) {\n        throw new java.lang.IllegalArgumentException(\"Can not create a Path from an empty string\");\n    }\n    return path;\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "void",
            "src_parent": "private void checkPathArg(java.lang.String path) {\n    if (path == null) {\n        throw new java.lang.IllegalArgumentException(\"Can not create a Path from a null string\");\n    }\n    if (path.length() == 0) {\n        throw new java.lang.IllegalArgumentException(\"Can not create a Path from an empty string\");\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "path.replaceAll(\"/+\", \"/\")",
            "dst_parent": "path = path.replaceAll(\"/+\", \"/\")",
            "dst_parent_type": "Assignment",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "path.replace(\"//\", \"/\")",
            "src_parent": "path = path.replace(\"//\", \"/\")",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "\"/+\"",
            "dst_parent": "path.replaceAll(\"/+\", \"/\")",
            "dst_parent_type": "Invocation",
            "dst_type": "Literal",
            "operator": "UPD",
            "src": "\"//\"",
            "src_parent": "path.replace(\"//\", \"/\")",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "checkPathArg(pathString)",
            "src_parent": "{\n    checkPathArg(pathString);\n    if (hasWindowsDrive(pathString, false)) {\n        pathString = \"/\" + pathString;\n    }\n    java.lang.String scheme = null;\n    java.lang.String authority = null;\n    int start = 0;\n    final int colon = pathString.indexOf(':');\n    final int slash = pathString.indexOf('/');\n    if ((colon != (-1)) && ((slash == (-1)) || (colon < slash))) {\n        scheme = pathString.substring(0, colon);\n        start = colon + 1;\n    }\n    if (pathString.startsWith(\"//\", start) && ((pathString.length() - start) > 2)) {\n        final int nextSlash = pathString.indexOf('/', start + 2);\n        final int authEnd = (nextSlash > 0) ? nextSlash : pathString.length();\n        authority = pathString.substring(start + 2, authEnd);\n        start = authEnd;\n    }\n    final java.lang.String path = pathString.substring(start, pathString.length());\n    initialize(scheme, authority, path);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "checkPathArg(path)",
            "src_parent": "{\n    checkPathArg(path);\n    initialize(scheme, authority, path);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR, (path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length()) - 1);\n    return path.substring(slash + 1, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n}",
            "src_parent": "if (path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n    final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR, (path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length()) - 1);\n    return path.substring(slash + 1, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n} else {\n    final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n    return path.substring(slash + 1);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n    return path.substring(slash + 1);\n}",
            "src_parent": "if (path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n    final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR, (path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length()) - 1);\n    return path.substring(slash + 1, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n} else {\n    final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n    return path.substring(slash + 1);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private java.lang.String normalizePath(java.lang.String path) {\n    path = path.replace(\"//\", \"/\");\n    path = path.replace(\"\\\\\", \"/\");\n    return path;\n}",
            "src_parent": "public class Path implements java.io.Serializable , org.apache.flink.core.io.IOReadableWritable {\n    private static final long serialVersionUID = 1L;\n\n    public static final java.lang.String SEPARATOR = \"/\";\n\n    public static final char SEPARATOR_CHAR = '/';\n\n    public static final java.lang.String CUR_DIR = \".\";\n\n    private java.net.URI uri;\n\n    public Path() {\n    }\n\n    public Path(java.net.URI uri) {\n        this.uri = uri;\n    }\n\n    public Path(java.lang.String parent, java.lang.String child) {\n        this(new org.apache.flink.core.fs.Path(parent), new org.apache.flink.core.fs.Path(child));\n    }\n\n    public Path(org.apache.flink.core.fs.Path parent, java.lang.String child) {\n        this(parent, new org.apache.flink.core.fs.Path(child));\n    }\n\n    public Path(java.lang.String parent, org.apache.flink.core.fs.Path child) {\n        this(new org.apache.flink.core.fs.Path(parent), child);\n    }\n\n    public Path(org.apache.flink.core.fs.Path parent, org.apache.flink.core.fs.Path child) {\n        java.net.URI parentUri = parent.uri;\n        final java.lang.String parentPath = parentUri.getPath();\n        if (!(parentPath.equals(\"/\") || parentPath.equals(\"\"))) {\n            try {\n                parentUri = new java.net.URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + \"/\", null, null);\n            } catch (java.net.URISyntaxException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n        if (child.uri.getPath().startsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n            child = new org.apache.flink.core.fs.Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1));\n        }\n        final java.net.URI resolved = parentUri.resolve(child.uri);\n        initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()));\n    }\n\n    private void checkPathArg(java.lang.String path) {\n        if (path == null) {\n            throw new java.lang.IllegalArgumentException(\"Can not create a Path from a null string\");\n        }\n        if (path.length() == 0) {\n            throw new java.lang.IllegalArgumentException(\"Can not create a Path from an empty string\");\n        }\n    }\n\n    public Path(java.lang.String pathString) {\n        checkPathArg(pathString);\n        if (hasWindowsDrive(pathString, false)) {\n            pathString = \"/\" + pathString;\n        }\n        java.lang.String scheme = null;\n        java.lang.String authority = null;\n        int start = 0;\n        final int colon = pathString.indexOf(':');\n        final int slash = pathString.indexOf('/');\n        if ((colon != (-1)) && ((slash == (-1)) || (colon < slash))) {\n            scheme = pathString.substring(0, colon);\n            start = colon + 1;\n        }\n        if (pathString.startsWith(\"//\", start) && ((pathString.length() - start) > 2)) {\n            final int nextSlash = pathString.indexOf('/', start + 2);\n            final int authEnd = (nextSlash > 0) ? nextSlash : pathString.length();\n            authority = pathString.substring(start + 2, authEnd);\n            start = authEnd;\n        }\n        final java.lang.String path = pathString.substring(start, pathString.length());\n        initialize(scheme, authority, path);\n    }\n\n    public Path(java.lang.String scheme, java.lang.String authority, java.lang.String path) {\n        checkPathArg(path);\n        initialize(scheme, authority, path);\n    }\n\n    private void initialize(java.lang.String scheme, java.lang.String authority, java.lang.String path) {\n        try {\n            this.uri = new java.net.URI(scheme, authority, normalizePath(path), null, null).normalize();\n        } catch (java.net.URISyntaxException e) {\n            throw new java.lang.IllegalArgumentException(e);\n        }\n    }\n\n    private java.lang.String normalizePath(java.lang.String path) {\n        path = path.replace(\"//\", \"/\");\n        path = path.replace(\"\\\\\", \"/\");\n        return path;\n    }\n\n    private boolean hasWindowsDrive(java.lang.String path, boolean slashed) {\n        if (!org.apache.flink.util.OperatingSystem.isWindows()) {\n            return false;\n        }\n        final int start = (slashed) ? 1 : 0;\n        return (((path.length() >= (start + 2)) && ((!slashed) || (path.charAt(0) == '/'))) && (path.charAt(start + 1) == ':')) && (((path.charAt(start) >= 'A') && (path.charAt(start) <= 'Z')) || ((path.charAt(start) >= 'a') && (path.charAt(start) <= 'z')));\n    }\n\n    public java.net.URI toUri() {\n        return uri;\n    }\n\n    public org.apache.flink.core.fs.FileSystem getFileSystem() throws java.io.IOException {\n        return org.apache.flink.core.fs.FileSystem.get(this.toUri());\n    }\n\n    public boolean isAbsolute() {\n        final int start = (hasWindowsDrive(uri.getPath(), true)) ? 3 : 0;\n        return uri.getPath().startsWith(org.apache.flink.core.fs.Path.SEPARATOR, start);\n    }\n\n    public java.lang.String getName() {\n        final java.lang.String path = uri.getPath();\n        if (path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n            final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR, (path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length()) - 1);\n            return path.substring(slash + 1, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n        } else {\n            final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n            return path.substring(slash + 1);\n        }\n    }\n\n    public org.apache.flink.core.fs.Path getParent() {\n        final java.lang.String path = uri.getPath();\n        final int lastSlash = path.lastIndexOf('/');\n        final int start = (hasWindowsDrive(path, true)) ? 3 : 0;\n        if ((path.length() == start) || ((lastSlash == start) && (path.length() == (start + 1)))) {\n            return null;\n        }\n        java.lang.String parent;\n        if (lastSlash == (-1)) {\n            parent = org.apache.flink.core.fs.Path.CUR_DIR;\n        } else {\n            final int end = (hasWindowsDrive(path, true)) ? 3 : 0;\n            parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash);\n        }\n        return new org.apache.flink.core.fs.Path(uri.getScheme(), uri.getAuthority(), parent);\n    }\n\n    public org.apache.flink.core.fs.Path suffix(java.lang.String suffix) {\n        return new org.apache.flink.core.fs.Path(getParent(), getName() + suffix);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        final java.lang.StringBuilder buffer = new java.lang.StringBuilder();\n        if (uri.getScheme() != null) {\n            buffer.append(uri.getScheme());\n            buffer.append(\":\");\n        }\n        if (uri.getAuthority() != null) {\n            buffer.append(\"//\");\n            buffer.append(uri.getAuthority());\n        }\n        if (uri.getPath() != null) {\n            java.lang.String path = uri.getPath();\n            if ((((path.indexOf('/') == 0) && hasWindowsDrive(path, true)) && (uri.getScheme() == null)) && (uri.getAuthority() == null)) {\n                path = path.substring(1);\n            }\n            buffer.append(path);\n        }\n        return buffer.toString();\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (!(o instanceof org.apache.flink.core.fs.Path)) {\n            return false;\n        }\n        org.apache.flink.core.fs.Path that = ((org.apache.flink.core.fs.Path) (o));\n        return this.uri.equals(that.uri);\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return uri.hashCode();\n    }\n\n    public int compareTo(java.lang.Object o) {\n        org.apache.flink.core.fs.Path that = ((org.apache.flink.core.fs.Path) (o));\n        return this.uri.compareTo(that.uri);\n    }\n\n    public int depth() {\n        java.lang.String path = uri.getPath();\n        int depth = 0;\n        int slash = ((path.length() == 1) && (path.charAt(0) == '/')) ? -1 : 0;\n        while (slash != (-1)) {\n            depth++;\n            slash = path.indexOf(org.apache.flink.core.fs.Path.SEPARATOR, slash + 1);\n        } \n        return depth;\n    }\n\n    public org.apache.flink.core.fs.Path makeQualified(org.apache.flink.core.fs.FileSystem fs) {\n        org.apache.flink.core.fs.Path path = this;\n        if (!isAbsolute()) {\n            path = new org.apache.flink.core.fs.Path(fs.getWorkingDirectory(), this);\n        }\n        final java.net.URI pathUri = path.toUri();\n        final java.net.URI fsUri = fs.getUri();\n        java.lang.String scheme = pathUri.getScheme();\n        java.lang.String authority = pathUri.getAuthority();\n        if ((scheme != null) && ((authority != null) || (fsUri.getAuthority() == null))) {\n            return path;\n        }\n        if (scheme == null) {\n            scheme = fsUri.getScheme();\n        }\n        if (authority == null) {\n            authority = fsUri.getAuthority();\n            if (authority == null) {\n                authority = \"\";\n            }\n        }\n        return new org.apache.flink.core.fs.Path((((scheme + \":\") + \"//\") + authority) + pathUri.getPath());\n    }\n\n    @java.lang.Override\n    public void read(org.apache.flink.core.memory.DataInputView in) throws java.io.IOException {\n        final boolean isNotNull = in.readBoolean();\n        if (isNotNull) {\n            final java.lang.String scheme = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String userInfo = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String host = org.apache.flink.core.io.StringRecord.readString(in);\n            final int port = in.readInt();\n            final java.lang.String path = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String query = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String fragment = org.apache.flink.core.io.StringRecord.readString(in);\n            try {\n                uri = new java.net.URI(scheme, userInfo, host, port, path, query, fragment);\n            } catch (java.net.URISyntaxException e) {\n                throw new java.io.IOException(\"Error reconstructing URI: \" + org.apache.flink.util.StringUtils.stringifyException(e));\n            }\n        }\n    }\n\n    @java.lang.Override\n    public void write(org.apache.flink.core.memory.DataOutputView out) throws java.io.IOException {\n        if (uri == null) {\n            out.writeBoolean(false);\n        } else {\n            out.writeBoolean(true);\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getScheme());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getUserInfo());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getHost());\n            out.writeInt(uri.getPort());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getPath());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getQuery());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getFragment());\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public java.lang.String getName() {\n    final java.lang.String path = uri.getPath();\n    if (path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n        final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR, (path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length()) - 1);\n        return path.substring(slash + 1, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n    } else {\n        final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n        return path.substring(slash + 1);\n    }\n}",
            "src_parent": "public class Path implements java.io.Serializable , org.apache.flink.core.io.IOReadableWritable {\n    private static final long serialVersionUID = 1L;\n\n    public static final java.lang.String SEPARATOR = \"/\";\n\n    public static final char SEPARATOR_CHAR = '/';\n\n    public static final java.lang.String CUR_DIR = \".\";\n\n    private java.net.URI uri;\n\n    public Path() {\n    }\n\n    public Path(java.net.URI uri) {\n        this.uri = uri;\n    }\n\n    public Path(java.lang.String parent, java.lang.String child) {\n        this(new org.apache.flink.core.fs.Path(parent), new org.apache.flink.core.fs.Path(child));\n    }\n\n    public Path(org.apache.flink.core.fs.Path parent, java.lang.String child) {\n        this(parent, new org.apache.flink.core.fs.Path(child));\n    }\n\n    public Path(java.lang.String parent, org.apache.flink.core.fs.Path child) {\n        this(new org.apache.flink.core.fs.Path(parent), child);\n    }\n\n    public Path(org.apache.flink.core.fs.Path parent, org.apache.flink.core.fs.Path child) {\n        java.net.URI parentUri = parent.uri;\n        final java.lang.String parentPath = parentUri.getPath();\n        if (!(parentPath.equals(\"/\") || parentPath.equals(\"\"))) {\n            try {\n                parentUri = new java.net.URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + \"/\", null, null);\n            } catch (java.net.URISyntaxException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n        if (child.uri.getPath().startsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n            child = new org.apache.flink.core.fs.Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1));\n        }\n        final java.net.URI resolved = parentUri.resolve(child.uri);\n        initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()));\n    }\n\n    private void checkPathArg(java.lang.String path) {\n        if (path == null) {\n            throw new java.lang.IllegalArgumentException(\"Can not create a Path from a null string\");\n        }\n        if (path.length() == 0) {\n            throw new java.lang.IllegalArgumentException(\"Can not create a Path from an empty string\");\n        }\n    }\n\n    public Path(java.lang.String pathString) {\n        checkPathArg(pathString);\n        if (hasWindowsDrive(pathString, false)) {\n            pathString = \"/\" + pathString;\n        }\n        java.lang.String scheme = null;\n        java.lang.String authority = null;\n        int start = 0;\n        final int colon = pathString.indexOf(':');\n        final int slash = pathString.indexOf('/');\n        if ((colon != (-1)) && ((slash == (-1)) || (colon < slash))) {\n            scheme = pathString.substring(0, colon);\n            start = colon + 1;\n        }\n        if (pathString.startsWith(\"//\", start) && ((pathString.length() - start) > 2)) {\n            final int nextSlash = pathString.indexOf('/', start + 2);\n            final int authEnd = (nextSlash > 0) ? nextSlash : pathString.length();\n            authority = pathString.substring(start + 2, authEnd);\n            start = authEnd;\n        }\n        final java.lang.String path = pathString.substring(start, pathString.length());\n        initialize(scheme, authority, path);\n    }\n\n    public Path(java.lang.String scheme, java.lang.String authority, java.lang.String path) {\n        checkPathArg(path);\n        initialize(scheme, authority, path);\n    }\n\n    private void initialize(java.lang.String scheme, java.lang.String authority, java.lang.String path) {\n        try {\n            this.uri = new java.net.URI(scheme, authority, normalizePath(path), null, null).normalize();\n        } catch (java.net.URISyntaxException e) {\n            throw new java.lang.IllegalArgumentException(e);\n        }\n    }\n\n    private java.lang.String normalizePath(java.lang.String path) {\n        path = path.replace(\"//\", \"/\");\n        path = path.replace(\"\\\\\", \"/\");\n        return path;\n    }\n\n    private boolean hasWindowsDrive(java.lang.String path, boolean slashed) {\n        if (!org.apache.flink.util.OperatingSystem.isWindows()) {\n            return false;\n        }\n        final int start = (slashed) ? 1 : 0;\n        return (((path.length() >= (start + 2)) && ((!slashed) || (path.charAt(0) == '/'))) && (path.charAt(start + 1) == ':')) && (((path.charAt(start) >= 'A') && (path.charAt(start) <= 'Z')) || ((path.charAt(start) >= 'a') && (path.charAt(start) <= 'z')));\n    }\n\n    public java.net.URI toUri() {\n        return uri;\n    }\n\n    public org.apache.flink.core.fs.FileSystem getFileSystem() throws java.io.IOException {\n        return org.apache.flink.core.fs.FileSystem.get(this.toUri());\n    }\n\n    public boolean isAbsolute() {\n        final int start = (hasWindowsDrive(uri.getPath(), true)) ? 3 : 0;\n        return uri.getPath().startsWith(org.apache.flink.core.fs.Path.SEPARATOR, start);\n    }\n\n    public java.lang.String getName() {\n        final java.lang.String path = uri.getPath();\n        if (path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n            final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR, (path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length()) - 1);\n            return path.substring(slash + 1, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n        } else {\n            final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n            return path.substring(slash + 1);\n        }\n    }\n\n    public org.apache.flink.core.fs.Path getParent() {\n        final java.lang.String path = uri.getPath();\n        final int lastSlash = path.lastIndexOf('/');\n        final int start = (hasWindowsDrive(path, true)) ? 3 : 0;\n        if ((path.length() == start) || ((lastSlash == start) && (path.length() == (start + 1)))) {\n            return null;\n        }\n        java.lang.String parent;\n        if (lastSlash == (-1)) {\n            parent = org.apache.flink.core.fs.Path.CUR_DIR;\n        } else {\n            final int end = (hasWindowsDrive(path, true)) ? 3 : 0;\n            parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash);\n        }\n        return new org.apache.flink.core.fs.Path(uri.getScheme(), uri.getAuthority(), parent);\n    }\n\n    public org.apache.flink.core.fs.Path suffix(java.lang.String suffix) {\n        return new org.apache.flink.core.fs.Path(getParent(), getName() + suffix);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        final java.lang.StringBuilder buffer = new java.lang.StringBuilder();\n        if (uri.getScheme() != null) {\n            buffer.append(uri.getScheme());\n            buffer.append(\":\");\n        }\n        if (uri.getAuthority() != null) {\n            buffer.append(\"//\");\n            buffer.append(uri.getAuthority());\n        }\n        if (uri.getPath() != null) {\n            java.lang.String path = uri.getPath();\n            if ((((path.indexOf('/') == 0) && hasWindowsDrive(path, true)) && (uri.getScheme() == null)) && (uri.getAuthority() == null)) {\n                path = path.substring(1);\n            }\n            buffer.append(path);\n        }\n        return buffer.toString();\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (!(o instanceof org.apache.flink.core.fs.Path)) {\n            return false;\n        }\n        org.apache.flink.core.fs.Path that = ((org.apache.flink.core.fs.Path) (o));\n        return this.uri.equals(that.uri);\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return uri.hashCode();\n    }\n\n    public int compareTo(java.lang.Object o) {\n        org.apache.flink.core.fs.Path that = ((org.apache.flink.core.fs.Path) (o));\n        return this.uri.compareTo(that.uri);\n    }\n\n    public int depth() {\n        java.lang.String path = uri.getPath();\n        int depth = 0;\n        int slash = ((path.length() == 1) && (path.charAt(0) == '/')) ? -1 : 0;\n        while (slash != (-1)) {\n            depth++;\n            slash = path.indexOf(org.apache.flink.core.fs.Path.SEPARATOR, slash + 1);\n        } \n        return depth;\n    }\n\n    public org.apache.flink.core.fs.Path makeQualified(org.apache.flink.core.fs.FileSystem fs) {\n        org.apache.flink.core.fs.Path path = this;\n        if (!isAbsolute()) {\n            path = new org.apache.flink.core.fs.Path(fs.getWorkingDirectory(), this);\n        }\n        final java.net.URI pathUri = path.toUri();\n        final java.net.URI fsUri = fs.getUri();\n        java.lang.String scheme = pathUri.getScheme();\n        java.lang.String authority = pathUri.getAuthority();\n        if ((scheme != null) && ((authority != null) || (fsUri.getAuthority() == null))) {\n            return path;\n        }\n        if (scheme == null) {\n            scheme = fsUri.getScheme();\n        }\n        if (authority == null) {\n            authority = fsUri.getAuthority();\n            if (authority == null) {\n                authority = \"\";\n            }\n        }\n        return new org.apache.flink.core.fs.Path((((scheme + \":\") + \"//\") + authority) + pathUri.getPath());\n    }\n\n    @java.lang.Override\n    public void read(org.apache.flink.core.memory.DataInputView in) throws java.io.IOException {\n        final boolean isNotNull = in.readBoolean();\n        if (isNotNull) {\n            final java.lang.String scheme = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String userInfo = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String host = org.apache.flink.core.io.StringRecord.readString(in);\n            final int port = in.readInt();\n            final java.lang.String path = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String query = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String fragment = org.apache.flink.core.io.StringRecord.readString(in);\n            try {\n                uri = new java.net.URI(scheme, userInfo, host, port, path, query, fragment);\n            } catch (java.net.URISyntaxException e) {\n                throw new java.io.IOException(\"Error reconstructing URI: \" + org.apache.flink.util.StringUtils.stringifyException(e));\n            }\n        }\n    }\n\n    @java.lang.Override\n    public void write(org.apache.flink.core.memory.DataOutputView out) throws java.io.IOException {\n        if (uri == null) {\n            out.writeBoolean(false);\n        } else {\n            out.writeBoolean(true);\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getScheme());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getUserInfo());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getHost());\n            out.writeInt(uri.getPort());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getPath());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getQuery());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getFragment());\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private java.lang.String normalizePath(java.lang.String path) {\n    path = path.trim();\n    path = path.replace(\"\\\\\", \"/\");\n    path = path.replaceAll(\"/+\", \"/\");\n    if ((!path.equals(org.apache.flink.core.fs.Path.SEPARATOR)) && path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n        path = path.substring(0, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n    }\n    return path;\n}",
            "src_parent": "public class Path implements java.io.Serializable , org.apache.flink.core.io.IOReadableWritable {\n    private static final long serialVersionUID = 1L;\n\n    public static final java.lang.String SEPARATOR = \"/\";\n\n    public static final char SEPARATOR_CHAR = '/';\n\n    public static final java.lang.String CUR_DIR = \".\";\n\n    private java.net.URI uri;\n\n    public Path() {\n    }\n\n    public Path(java.net.URI uri) {\n        this.uri = uri;\n    }\n\n    public Path(java.lang.String parent, java.lang.String child) {\n        this(new org.apache.flink.core.fs.Path(parent), new org.apache.flink.core.fs.Path(child));\n    }\n\n    public Path(org.apache.flink.core.fs.Path parent, java.lang.String child) {\n        this(parent, new org.apache.flink.core.fs.Path(child));\n    }\n\n    public Path(java.lang.String parent, org.apache.flink.core.fs.Path child) {\n        this(new org.apache.flink.core.fs.Path(parent), child);\n    }\n\n    public Path(org.apache.flink.core.fs.Path parent, org.apache.flink.core.fs.Path child) {\n        java.net.URI parentUri = parent.uri;\n        final java.lang.String parentPath = parentUri.getPath();\n        if (!(parentPath.equals(\"/\") || parentPath.equals(\"\"))) {\n            try {\n                parentUri = new java.net.URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + \"/\", null, null);\n            } catch (java.net.URISyntaxException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n        if (child.uri.getPath().startsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n            child = new org.apache.flink.core.fs.Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1));\n        }\n        final java.net.URI resolved = parentUri.resolve(child.uri);\n        initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()));\n    }\n\n    private java.lang.String checkAndTrimPathArg(java.lang.String path) {\n        if (path == null) {\n            throw new java.lang.IllegalArgumentException(\"Can not create a Path from a null string\");\n        }\n        path = path.trim();\n        if (path.length() == 0) {\n            throw new java.lang.IllegalArgumentException(\"Can not create a Path from an empty string\");\n        }\n        return path;\n    }\n\n    public Path(java.lang.String pathString) {\n        pathString = checkAndTrimPathArg(pathString);\n        if (hasWindowsDrive(pathString, false)) {\n            pathString = \"/\" + pathString;\n        }\n        java.lang.String scheme = null;\n        java.lang.String authority = null;\n        int start = 0;\n        final int colon = pathString.indexOf(':');\n        final int slash = pathString.indexOf('/');\n        if ((colon != (-1)) && ((slash == (-1)) || (colon < slash))) {\n            scheme = pathString.substring(0, colon);\n            start = colon + 1;\n        }\n        if (pathString.startsWith(\"//\", start) && ((pathString.length() - start) > 2)) {\n            final int nextSlash = pathString.indexOf('/', start + 2);\n            final int authEnd = (nextSlash > 0) ? nextSlash : pathString.length();\n            authority = pathString.substring(start + 2, authEnd);\n            start = authEnd;\n        }\n        final java.lang.String path = pathString.substring(start, pathString.length());\n        initialize(scheme, authority, path);\n    }\n\n    public Path(java.lang.String scheme, java.lang.String authority, java.lang.String path) {\n        path = checkAndTrimPathArg(path);\n        initialize(scheme, authority, path);\n    }\n\n    private void initialize(java.lang.String scheme, java.lang.String authority, java.lang.String path) {\n        try {\n            this.uri = new java.net.URI(scheme, authority, normalizePath(path), null, null).normalize();\n        } catch (java.net.URISyntaxException e) {\n            throw new java.lang.IllegalArgumentException(e);\n        }\n    }\n\n    private java.lang.String normalizePath(java.lang.String path) {\n        path = path.trim();\n        path = path.replace(\"\\\\\", \"/\");\n        path = path.replaceAll(\"/+\", \"/\");\n        if ((!path.equals(org.apache.flink.core.fs.Path.SEPARATOR)) && path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n            path = path.substring(0, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n        }\n        return path;\n    }\n\n    private boolean hasWindowsDrive(java.lang.String path, boolean slashed) {\n        if (!org.apache.flink.util.OperatingSystem.isWindows()) {\n            return false;\n        }\n        final int start = (slashed) ? 1 : 0;\n        return (((path.length() >= (start + 2)) && ((!slashed) || (path.charAt(0) == '/'))) && (path.charAt(start + 1) == ':')) && (((path.charAt(start) >= 'A') && (path.charAt(start) <= 'Z')) || ((path.charAt(start) >= 'a') && (path.charAt(start) <= 'z')));\n    }\n\n    public java.net.URI toUri() {\n        return uri;\n    }\n\n    public org.apache.flink.core.fs.FileSystem getFileSystem() throws java.io.IOException {\n        return org.apache.flink.core.fs.FileSystem.get(this.toUri());\n    }\n\n    public boolean isAbsolute() {\n        final int start = (hasWindowsDrive(uri.getPath(), true)) ? 3 : 0;\n        return uri.getPath().startsWith(org.apache.flink.core.fs.Path.SEPARATOR, start);\n    }\n\n    public java.lang.String getName() {\n        final java.lang.String path = uri.getPath();\n        final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n        return path.substring(slash + 1);\n    }\n\n    public org.apache.flink.core.fs.Path getParent() {\n        final java.lang.String path = uri.getPath();\n        final int lastSlash = path.lastIndexOf('/');\n        final int start = (hasWindowsDrive(path, true)) ? 3 : 0;\n        if ((path.length() == start) || ((lastSlash == start) && (path.length() == (start + 1)))) {\n            return null;\n        }\n        java.lang.String parent;\n        if (lastSlash == (-1)) {\n            parent = org.apache.flink.core.fs.Path.CUR_DIR;\n        } else {\n            final int end = (hasWindowsDrive(path, true)) ? 3 : 0;\n            parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash);\n        }\n        return new org.apache.flink.core.fs.Path(uri.getScheme(), uri.getAuthority(), parent);\n    }\n\n    public org.apache.flink.core.fs.Path suffix(java.lang.String suffix) {\n        return new org.apache.flink.core.fs.Path(getParent(), getName() + suffix);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        final java.lang.StringBuilder buffer = new java.lang.StringBuilder();\n        if (uri.getScheme() != null) {\n            buffer.append(uri.getScheme());\n            buffer.append(\":\");\n        }\n        if (uri.getAuthority() != null) {\n            buffer.append(\"//\");\n            buffer.append(uri.getAuthority());\n        }\n        if (uri.getPath() != null) {\n            java.lang.String path = uri.getPath();\n            if ((((path.indexOf('/') == 0) && hasWindowsDrive(path, true)) && (uri.getScheme() == null)) && (uri.getAuthority() == null)) {\n                path = path.substring(1);\n            }\n            buffer.append(path);\n        }\n        return buffer.toString();\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (!(o instanceof org.apache.flink.core.fs.Path)) {\n            return false;\n        }\n        org.apache.flink.core.fs.Path that = ((org.apache.flink.core.fs.Path) (o));\n        return this.uri.equals(that.uri);\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return uri.hashCode();\n    }\n\n    public int compareTo(java.lang.Object o) {\n        org.apache.flink.core.fs.Path that = ((org.apache.flink.core.fs.Path) (o));\n        return this.uri.compareTo(that.uri);\n    }\n\n    public int depth() {\n        java.lang.String path = uri.getPath();\n        int depth = 0;\n        int slash = ((path.length() == 1) && (path.charAt(0) == '/')) ? -1 : 0;\n        while (slash != (-1)) {\n            depth++;\n            slash = path.indexOf(org.apache.flink.core.fs.Path.SEPARATOR, slash + 1);\n        } \n        return depth;\n    }\n\n    public org.apache.flink.core.fs.Path makeQualified(org.apache.flink.core.fs.FileSystem fs) {\n        org.apache.flink.core.fs.Path path = this;\n        if (!isAbsolute()) {\n            path = new org.apache.flink.core.fs.Path(fs.getWorkingDirectory(), this);\n        }\n        final java.net.URI pathUri = path.toUri();\n        final java.net.URI fsUri = fs.getUri();\n        java.lang.String scheme = pathUri.getScheme();\n        java.lang.String authority = pathUri.getAuthority();\n        if ((scheme != null) && ((authority != null) || (fsUri.getAuthority() == null))) {\n            return path;\n        }\n        if (scheme == null) {\n            scheme = fsUri.getScheme();\n        }\n        if (authority == null) {\n            authority = fsUri.getAuthority();\n            if (authority == null) {\n                authority = \"\";\n            }\n        }\n        return new org.apache.flink.core.fs.Path((((scheme + \":\") + \"//\") + authority) + pathUri.getPath());\n    }\n\n    @java.lang.Override\n    public void read(org.apache.flink.core.memory.DataInputView in) throws java.io.IOException {\n        final boolean isNotNull = in.readBoolean();\n        if (isNotNull) {\n            final java.lang.String scheme = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String userInfo = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String host = org.apache.flink.core.io.StringRecord.readString(in);\n            final int port = in.readInt();\n            final java.lang.String path = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String query = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String fragment = org.apache.flink.core.io.StringRecord.readString(in);\n            try {\n                uri = new java.net.URI(scheme, userInfo, host, port, path, query, fragment);\n            } catch (java.net.URISyntaxException e) {\n                throw new java.io.IOException(\"Error reconstructing URI: \" + org.apache.flink.util.StringUtils.stringifyException(e));\n            }\n        }\n    }\n\n    @java.lang.Override\n    public void write(org.apache.flink.core.memory.DataOutputView out) throws java.io.IOException {\n        if (uri == null) {\n            out.writeBoolean(false);\n        } else {\n            out.writeBoolean(true);\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getScheme());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getUserInfo());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getHost());\n            out.writeInt(uri.getPort());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getPath());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getQuery());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getFragment());\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public java.lang.String getName() {\n    final java.lang.String path = uri.getPath();\n    final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n    return path.substring(slash + 1);\n}",
            "src_parent": "public class Path implements java.io.Serializable , org.apache.flink.core.io.IOReadableWritable {\n    private static final long serialVersionUID = 1L;\n\n    public static final java.lang.String SEPARATOR = \"/\";\n\n    public static final char SEPARATOR_CHAR = '/';\n\n    public static final java.lang.String CUR_DIR = \".\";\n\n    private java.net.URI uri;\n\n    public Path() {\n    }\n\n    public Path(java.net.URI uri) {\n        this.uri = uri;\n    }\n\n    public Path(java.lang.String parent, java.lang.String child) {\n        this(new org.apache.flink.core.fs.Path(parent), new org.apache.flink.core.fs.Path(child));\n    }\n\n    public Path(org.apache.flink.core.fs.Path parent, java.lang.String child) {\n        this(parent, new org.apache.flink.core.fs.Path(child));\n    }\n\n    public Path(java.lang.String parent, org.apache.flink.core.fs.Path child) {\n        this(new org.apache.flink.core.fs.Path(parent), child);\n    }\n\n    public Path(org.apache.flink.core.fs.Path parent, org.apache.flink.core.fs.Path child) {\n        java.net.URI parentUri = parent.uri;\n        final java.lang.String parentPath = parentUri.getPath();\n        if (!(parentPath.equals(\"/\") || parentPath.equals(\"\"))) {\n            try {\n                parentUri = new java.net.URI(parentUri.getScheme(), parentUri.getAuthority(), parentUri.getPath() + \"/\", null, null);\n            } catch (java.net.URISyntaxException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n        if (child.uri.getPath().startsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n            child = new org.apache.flink.core.fs.Path(child.uri.getScheme(), child.uri.getAuthority(), child.uri.getPath().substring(1));\n        }\n        final java.net.URI resolved = parentUri.resolve(child.uri);\n        initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()));\n    }\n\n    private java.lang.String checkAndTrimPathArg(java.lang.String path) {\n        if (path == null) {\n            throw new java.lang.IllegalArgumentException(\"Can not create a Path from a null string\");\n        }\n        path = path.trim();\n        if (path.length() == 0) {\n            throw new java.lang.IllegalArgumentException(\"Can not create a Path from an empty string\");\n        }\n        return path;\n    }\n\n    public Path(java.lang.String pathString) {\n        pathString = checkAndTrimPathArg(pathString);\n        if (hasWindowsDrive(pathString, false)) {\n            pathString = \"/\" + pathString;\n        }\n        java.lang.String scheme = null;\n        java.lang.String authority = null;\n        int start = 0;\n        final int colon = pathString.indexOf(':');\n        final int slash = pathString.indexOf('/');\n        if ((colon != (-1)) && ((slash == (-1)) || (colon < slash))) {\n            scheme = pathString.substring(0, colon);\n            start = colon + 1;\n        }\n        if (pathString.startsWith(\"//\", start) && ((pathString.length() - start) > 2)) {\n            final int nextSlash = pathString.indexOf('/', start + 2);\n            final int authEnd = (nextSlash > 0) ? nextSlash : pathString.length();\n            authority = pathString.substring(start + 2, authEnd);\n            start = authEnd;\n        }\n        final java.lang.String path = pathString.substring(start, pathString.length());\n        initialize(scheme, authority, path);\n    }\n\n    public Path(java.lang.String scheme, java.lang.String authority, java.lang.String path) {\n        path = checkAndTrimPathArg(path);\n        initialize(scheme, authority, path);\n    }\n\n    private void initialize(java.lang.String scheme, java.lang.String authority, java.lang.String path) {\n        try {\n            this.uri = new java.net.URI(scheme, authority, normalizePath(path), null, null).normalize();\n        } catch (java.net.URISyntaxException e) {\n            throw new java.lang.IllegalArgumentException(e);\n        }\n    }\n\n    private java.lang.String normalizePath(java.lang.String path) {\n        path = path.trim();\n        path = path.replace(\"\\\\\", \"/\");\n        path = path.replaceAll(\"/+\", \"/\");\n        if ((!path.equals(org.apache.flink.core.fs.Path.SEPARATOR)) && path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n            path = path.substring(0, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n        }\n        return path;\n    }\n\n    private boolean hasWindowsDrive(java.lang.String path, boolean slashed) {\n        if (!org.apache.flink.util.OperatingSystem.isWindows()) {\n            return false;\n        }\n        final int start = (slashed) ? 1 : 0;\n        return (((path.length() >= (start + 2)) && ((!slashed) || (path.charAt(0) == '/'))) && (path.charAt(start + 1) == ':')) && (((path.charAt(start) >= 'A') && (path.charAt(start) <= 'Z')) || ((path.charAt(start) >= 'a') && (path.charAt(start) <= 'z')));\n    }\n\n    public java.net.URI toUri() {\n        return uri;\n    }\n\n    public org.apache.flink.core.fs.FileSystem getFileSystem() throws java.io.IOException {\n        return org.apache.flink.core.fs.FileSystem.get(this.toUri());\n    }\n\n    public boolean isAbsolute() {\n        final int start = (hasWindowsDrive(uri.getPath(), true)) ? 3 : 0;\n        return uri.getPath().startsWith(org.apache.flink.core.fs.Path.SEPARATOR, start);\n    }\n\n    public java.lang.String getName() {\n        final java.lang.String path = uri.getPath();\n        final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n        return path.substring(slash + 1);\n    }\n\n    public org.apache.flink.core.fs.Path getParent() {\n        final java.lang.String path = uri.getPath();\n        final int lastSlash = path.lastIndexOf('/');\n        final int start = (hasWindowsDrive(path, true)) ? 3 : 0;\n        if ((path.length() == start) || ((lastSlash == start) && (path.length() == (start + 1)))) {\n            return null;\n        }\n        java.lang.String parent;\n        if (lastSlash == (-1)) {\n            parent = org.apache.flink.core.fs.Path.CUR_DIR;\n        } else {\n            final int end = (hasWindowsDrive(path, true)) ? 3 : 0;\n            parent = path.substring(0, lastSlash == end ? end + 1 : lastSlash);\n        }\n        return new org.apache.flink.core.fs.Path(uri.getScheme(), uri.getAuthority(), parent);\n    }\n\n    public org.apache.flink.core.fs.Path suffix(java.lang.String suffix) {\n        return new org.apache.flink.core.fs.Path(getParent(), getName() + suffix);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        final java.lang.StringBuilder buffer = new java.lang.StringBuilder();\n        if (uri.getScheme() != null) {\n            buffer.append(uri.getScheme());\n            buffer.append(\":\");\n        }\n        if (uri.getAuthority() != null) {\n            buffer.append(\"//\");\n            buffer.append(uri.getAuthority());\n        }\n        if (uri.getPath() != null) {\n            java.lang.String path = uri.getPath();\n            if ((((path.indexOf('/') == 0) && hasWindowsDrive(path, true)) && (uri.getScheme() == null)) && (uri.getAuthority() == null)) {\n                path = path.substring(1);\n            }\n            buffer.append(path);\n        }\n        return buffer.toString();\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (!(o instanceof org.apache.flink.core.fs.Path)) {\n            return false;\n        }\n        org.apache.flink.core.fs.Path that = ((org.apache.flink.core.fs.Path) (o));\n        return this.uri.equals(that.uri);\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return uri.hashCode();\n    }\n\n    public int compareTo(java.lang.Object o) {\n        org.apache.flink.core.fs.Path that = ((org.apache.flink.core.fs.Path) (o));\n        return this.uri.compareTo(that.uri);\n    }\n\n    public int depth() {\n        java.lang.String path = uri.getPath();\n        int depth = 0;\n        int slash = ((path.length() == 1) && (path.charAt(0) == '/')) ? -1 : 0;\n        while (slash != (-1)) {\n            depth++;\n            slash = path.indexOf(org.apache.flink.core.fs.Path.SEPARATOR, slash + 1);\n        } \n        return depth;\n    }\n\n    public org.apache.flink.core.fs.Path makeQualified(org.apache.flink.core.fs.FileSystem fs) {\n        org.apache.flink.core.fs.Path path = this;\n        if (!isAbsolute()) {\n            path = new org.apache.flink.core.fs.Path(fs.getWorkingDirectory(), this);\n        }\n        final java.net.URI pathUri = path.toUri();\n        final java.net.URI fsUri = fs.getUri();\n        java.lang.String scheme = pathUri.getScheme();\n        java.lang.String authority = pathUri.getAuthority();\n        if ((scheme != null) && ((authority != null) || (fsUri.getAuthority() == null))) {\n            return path;\n        }\n        if (scheme == null) {\n            scheme = fsUri.getScheme();\n        }\n        if (authority == null) {\n            authority = fsUri.getAuthority();\n            if (authority == null) {\n                authority = \"\";\n            }\n        }\n        return new org.apache.flink.core.fs.Path((((scheme + \":\") + \"//\") + authority) + pathUri.getPath());\n    }\n\n    @java.lang.Override\n    public void read(org.apache.flink.core.memory.DataInputView in) throws java.io.IOException {\n        final boolean isNotNull = in.readBoolean();\n        if (isNotNull) {\n            final java.lang.String scheme = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String userInfo = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String host = org.apache.flink.core.io.StringRecord.readString(in);\n            final int port = in.readInt();\n            final java.lang.String path = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String query = org.apache.flink.core.io.StringRecord.readString(in);\n            final java.lang.String fragment = org.apache.flink.core.io.StringRecord.readString(in);\n            try {\n                uri = new java.net.URI(scheme, userInfo, host, port, path, query, fragment);\n            } catch (java.net.URISyntaxException e) {\n                throw new java.io.IOException(\"Error reconstructing URI: \" + org.apache.flink.util.StringUtils.stringifyException(e));\n            }\n        }\n    }\n\n    @java.lang.Override\n    public void write(org.apache.flink.core.memory.DataOutputView out) throws java.io.IOException {\n        if (uri == null) {\n            out.writeBoolean(false);\n        } else {\n            out.writeBoolean(true);\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getScheme());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getUserInfo());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getHost());\n            out.writeInt(uri.getPort());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getPath());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getQuery());\n            org.apache.flink.core.io.StringRecord.writeString(out, uri.getFragment());\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Constructor",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "pathString = checkAndTrimPathArg(pathString)",
            "src_parent": "{\n    pathString = checkAndTrimPathArg(pathString);\n    if (hasWindowsDrive(pathString, false)) {\n        pathString = \"/\" + pathString;\n    }\n    java.lang.String scheme = null;\n    java.lang.String authority = null;\n    int start = 0;\n    final int colon = pathString.indexOf(':');\n    final int slash = pathString.indexOf('/');\n    if ((colon != (-1)) && ((slash == (-1)) || (colon < slash))) {\n        scheme = pathString.substring(0, colon);\n        start = colon + 1;\n    }\n    if (pathString.startsWith(\"//\", start) && ((pathString.length() - start) > 2)) {\n        final int nextSlash = pathString.indexOf('/', start + 2);\n        final int authEnd = (nextSlash > 0) ? nextSlash : pathString.length();\n        authority = pathString.substring(start + 2, authEnd);\n        start = authEnd;\n    }\n    final java.lang.String path = pathString.substring(start, pathString.length());\n    initialize(scheme, authority, path);\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Constructor",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "path = checkAndTrimPathArg(path)",
            "src_parent": "{\n    path = checkAndTrimPathArg(path);\n    initialize(scheme, authority, path);\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "(!path.equals(org.apache.flink.core.fs.Path.SEPARATOR)) && path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)",
            "src_parent": "if ((!path.equals(org.apache.flink.core.fs.Path.SEPARATOR)) && path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n    path = path.substring(0, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    path = path.substring(0, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n}",
            "src_parent": "if ((!path.equals(org.apache.flink.core.fs.Path.SEPARATOR)) && path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n    path = path.substring(0, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String",
            "dst_parent": "private java.lang.String normalizePath(java.lang.String path) {\n    path = path.trim();\n    path = path.replace(\"\\\\\", \"/\");\n    path = path.replaceAll(\"/+\", \"/\");\n    if ((!path.equals(org.apache.flink.core.fs.Path.SEPARATOR)) && path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n        path = path.substring(0, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n    }\n    return path;\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "java.lang.String",
            "src_parent": "private java.lang.String normalizePath(java.lang.String path) {\n    path = path.replace(\"//\", \"/\");\n    path = path.replace(\"\\\\\", \"/\");\n    return path;\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Method",
            "dst_parent": "private java.lang.String normalizePath(java.lang.String path) {\n    path = path.trim();\n    path = path.replace(\"\\\\\", \"/\");\n    path = path.replaceAll(\"/+\", \"/\");\n    if ((!path.equals(org.apache.flink.core.fs.Path.SEPARATOR)) && path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n        path = path.substring(0, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n    }\n    return path;\n}",
            "dst_parent_type": "Method",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Method",
            "src_parent": "private java.lang.String normalizePath(java.lang.String path) {\n    path = path.replace(\"//\", \"/\");\n    path = path.replace(\"\\\\\", \"/\");\n    return path;\n}",
            "src_parent_type": "Method",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String path",
            "dst_parent": "private java.lang.String normalizePath(java.lang.String path) {\n    path = path.trim();\n    path = path.replace(\"\\\\\", \"/\");\n    path = path.replaceAll(\"/+\", \"/\");\n    if ((!path.equals(org.apache.flink.core.fs.Path.SEPARATOR)) && path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n        path = path.substring(0, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n    }\n    return path;\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "java.lang.String path",
            "src_parent": "private java.lang.String normalizePath(java.lang.String path) {\n    path = path.replace(\"//\", \"/\");\n    path = path.replace(\"\\\\\", \"/\");\n    return path;\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "path = path.replace(\"\\\\\", \"/\")",
            "dst_parent": "{\n    path = path.trim();\n    path = path.replace(\"\\\\\", \"/\");\n    path = path.replaceAll(\"/+\", \"/\");\n    if ((!path.equals(org.apache.flink.core.fs.Path.SEPARATOR)) && path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n        path = path.substring(0, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n    }\n    return path;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "path = path.replace(\"\\\\\", \"/\")",
            "src_parent": "{\n    path = path.replace(\"//\", \"/\");\n    path = path.replace(\"\\\\\", \"/\");\n    return path;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "path = path.replaceAll(\"/+\", \"/\")",
            "dst_parent": "{\n    path = path.trim();\n    path = path.replace(\"\\\\\", \"/\");\n    path = path.replaceAll(\"/+\", \"/\");\n    if ((!path.equals(org.apache.flink.core.fs.Path.SEPARATOR)) && path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n        path = path.substring(0, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n    }\n    return path;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "path = path.replace(\"//\", \"/\")",
            "src_parent": "{\n    path = path.replace(\"//\", \"/\");\n    path = path.replace(\"\\\\\", \"/\");\n    return path;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if ((!path.equals(org.apache.flink.core.fs.Path.SEPARATOR)) && path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n    path = path.substring(0, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n}",
            "dst_parent": "{\n    path = path.trim();\n    path = path.replace(\"\\\\\", \"/\");\n    path = path.replaceAll(\"/+\", \"/\");\n    if ((!path.equals(org.apache.flink.core.fs.Path.SEPARATOR)) && path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n        path = path.substring(0, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n    }\n    return path;\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n    final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR, (path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length()) - 1);\n    return path.substring(slash + 1, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n} else {\n    final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n    return path.substring(slash + 1);\n}",
            "src_parent": "{\n    final java.lang.String path = uri.getPath();\n    if (path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n        final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR, (path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length()) - 1);\n        return path.substring(slash + 1, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n    } else {\n        final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n        return path.substring(slash + 1);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return path",
            "dst_parent": "{\n    path = path.trim();\n    path = path.replace(\"\\\\\", \"/\");\n    path = path.replaceAll(\"/+\", \"/\");\n    if ((!path.equals(org.apache.flink.core.fs.Path.SEPARATOR)) && path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n        path = path.substring(0, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n    }\n    return path;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return path",
            "src_parent": "{\n    path = path.replace(\"//\", \"/\");\n    path = path.replace(\"\\\\\", \"/\");\n    return path;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Method",
            "dst_parent": "public java.lang.String getName() {\n    final java.lang.String path = uri.getPath();\n    final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n    return path.substring(slash + 1);\n}",
            "dst_parent_type": "Method",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Method",
            "src_parent": "public java.lang.String getName() {\n    final java.lang.String path = uri.getPath();\n    if (path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n        final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR, (path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length()) - 1);\n        return path.substring(slash + 1, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n    } else {\n        final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n        return path.substring(slash + 1);\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "final java.lang.String path = uri.getPath()",
            "dst_parent": "{\n    final java.lang.String path = uri.getPath();\n    final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n    return path.substring(slash + 1);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "final java.lang.String path = uri.getPath()",
            "src_parent": "{\n    final java.lang.String path = uri.getPath();\n    if (path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n        final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR, (path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length()) - 1);\n        return path.substring(slash + 1, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n    } else {\n        final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n        return path.substring(slash + 1);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR)",
            "dst_parent": "{\n    final java.lang.String path = uri.getPath();\n    final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n    return path.substring(slash + 1);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR)",
            "src_parent": "{\n    final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n    return path.substring(slash + 1);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return path.substring(slash + 1)",
            "dst_parent": "{\n    final java.lang.String path = uri.getPath();\n    final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n    return path.substring(slash + 1);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return path.substring(slash + 1)",
            "src_parent": "{\n    final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n    return path.substring(slash + 1);\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.flink.core.fs.Path",
            "dst_parent": "",
            "dst_parent_type": "ThisAccess",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "org.apache.flink.core.fs.Path",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "pathString",
            "dst_parent": "checkAndTrimPathArg(pathString)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "pathString",
            "src_parent": "checkPathArg(pathString)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.flink.core.fs.Path",
            "dst_parent": "",
            "dst_parent_type": "ThisAccess",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "org.apache.flink.core.fs.Path",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "path",
            "dst_parent": "checkAndTrimPathArg(path)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "path",
            "src_parent": "checkPathArg(path)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)",
            "dst_parent": "(!path.equals(org.apache.flink.core.fs.Path.SEPARATOR)) && path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)",
            "src_parent": "if (path.endsWith(org.apache.flink.core.fs.Path.SEPARATOR)) {\n    final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR, (path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length()) - 1);\n    return path.substring(slash + 1, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length());\n} else {\n    final int slash = path.lastIndexOf(org.apache.flink.core.fs.Path.SEPARATOR);\n    return path.substring(slash + 1);\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "path",
            "dst_parent": "path.equals(org.apache.flink.core.fs.Path.SEPARATOR)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "path",
            "src_parent": "path.length()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.flink.core.fs.Path.SEPARATOR",
            "dst_parent": "path.equals(org.apache.flink.core.fs.Path.SEPARATOR)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "org.apache.flink.core.fs.Path.SEPARATOR",
            "src_parent": "org.apache.flink.core.fs.Path.SEPARATOR.length()",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "path",
            "dst_parent": "path.substring(0, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length())",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "path",
            "src_parent": "path.substring(slash + 1, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length())",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length()",
            "dst_parent": "path.substring(0, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length())",
            "dst_parent_type": "Invocation",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length()",
            "src_parent": "path.substring(slash + 1, path.length() - org.apache.flink.core.fs.Path.SEPARATOR.length())",
            "src_parent_type": "Invocation",
            "src_type": "BinaryOperator"
          }
        }
      ],
      "file_name": "Path"
    }
  ],
  "id": "flink_8f321c72"
}