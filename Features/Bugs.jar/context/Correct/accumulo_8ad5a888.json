{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "public static java.lang.StringBuilder appendPrintableString(byte[] ba, int offset, int len, int maxLen, java.lang.StringBuilder sb) {\n    int plen = java.lang.Math.min(len, maxLen);\n    for (int i = 0; i < plen; i++) {\n        int c = 0xff & ba[offset + i];\n        if ((c >= 32) && (c <= 126)) {\n            sb.append(((char) (c)));\n        } else {\n            sb.append(\"%\" + java.lang.String.format(\"%02x;\", c));\n        }\n    }\n    if (len > maxLen) {\n        sb.append(\"... TRUNCATED\");\n    }\n    return sb;\n}",
            "dst_parent": "public class Key implements java.lang.Cloneable , org.apache.hadoop.io.WritableComparable<org.apache.accumulo.core.data.Key> {\n    protected byte[] row;\n\n    protected byte[] colFamily;\n\n    protected byte[] colQualifier;\n\n    protected byte[] colVisibility;\n\n    protected long timestamp;\n\n    protected boolean deleted;\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (o instanceof org.apache.accumulo.core.data.Key) {\n            return this.equals(((org.apache.accumulo.core.data.Key) (o)), PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL);\n        }\n        return false;\n    }\n\n    private static final byte[] EMPTY_BYTES = new byte[0];\n\n    private byte[] copyIfNeeded(byte[] ba, int off, int len, boolean copyData) {\n        if (len == 0) {\n            return org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        }\n        if (((!copyData) && (ba.length == len)) && (off == 0)) {\n            return ba;\n        }\n        byte[] copy = new byte[len];\n        java.lang.System.arraycopy(ba, off, copy, 0, len);\n        return copy;\n    }\n\n    private final void init(byte[] r, int rOff, int rLen, byte[] cf, int cfOff, int cfLen, byte[] cq, int cqOff, int cqLen, byte[] cv, int cvOff, int cvLen, long ts, boolean del, boolean copy) {\n        row = copyIfNeeded(r, rOff, rLen, copy);\n        colFamily = copyIfNeeded(cf, cfOff, cfLen, copy);\n        colQualifier = copyIfNeeded(cq, cqOff, cqLen, copy);\n        colVisibility = copyIfNeeded(cv, cvOff, cvLen, copy);\n        timestamp = ts;\n        deleted = del;\n    }\n\n    public Key() {\n        row = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colFamily = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colQualifier = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colVisibility = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        timestamp = java.lang.Long.MAX_VALUE;\n        deleted = false;\n    }\n\n    public Key(org.apache.hadoop.io.Text row) {\n        init(row.getBytes(), 0, row.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, long ts) {\n        this(row);\n        timestamp = ts;\n    }\n\n    public Key(byte[] row, int rOff, int rLen, byte[] cf, int cfOff, int cfLen, byte[] cq, int cqOff, int cqLen, byte[] cv, int cvOff, int cvLen, long ts) {\n        init(row, rOff, rLen, cf, cfOff, cfLen, cq, cqOff, cqLen, cv, cvOff, cvLen, ts, false, true);\n    }\n\n    public Key(byte[] row, byte[] colFamily, byte[] colQualifier, byte[] colVisibility, long timestamp) {\n        this(row, colFamily, colQualifier, colVisibility, timestamp, false, true);\n    }\n\n    public Key(byte[] row, byte[] cf, byte[] cq, byte[] cv, long ts, boolean deleted) {\n        this(row, cf, cq, cv, ts, deleted, true);\n    }\n\n    public Key(byte[] row, byte[] cf, byte[] cq, byte[] cv, long ts, boolean deleted, boolean copy) {\n        init(row, 0, row.length, cf, 0, cf.length, cq, 0, cq.length, cv, 0, cv.length, ts, deleted, copy);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.hadoop.io.Text cv) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), cv.getBytes(), 0, cv.getLength(), java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, long ts) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, ts, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.hadoop.io.Text cv, long ts) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), cv.getBytes(), 0, cv.getLength(), ts, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.accumulo.core.security.ColumnVisibility cv, long ts) {\n        byte[] expr = cv.getExpression();\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), expr, 0, expr.length, ts, false, true);\n    }\n\n    public Key(java.lang.CharSequence row) {\n        this(new org.apache.hadoop.io.Text(row.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, java.lang.CharSequence cv) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), ts);\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, java.lang.CharSequence cv, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.toString()), ts);\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, org.apache.accumulo.core.security.ColumnVisibility cv, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.getExpression()), ts);\n    }\n\n    private byte[] followingArray(byte[] ba) {\n        byte[] fba = new byte[ba.length + 1];\n        java.lang.System.arraycopy(ba, 0, fba, 0, ba.length);\n        fba[ba.length] = ((byte) (0x0));\n        return fba;\n    }\n\n    public org.apache.accumulo.core.data.Key followingKey(org.apache.accumulo.core.data.PartialKey part) {\n        org.apache.accumulo.core.data.Key returnKey = new org.apache.accumulo.core.data.Key();\n        switch (part) {\n            case ROW :\n                returnKey.row = followingArray(row);\n                break;\n            case ROW_COLFAM :\n                returnKey.row = row;\n                returnKey.colFamily = followingArray(colFamily);\n                break;\n            case ROW_COLFAM_COLQUAL :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = followingArray(colQualifier);\n                break;\n            case ROW_COLFAM_COLQUAL_COLVIS :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = colQualifier;\n                returnKey.colVisibility = followingArray(colVisibility);\n                break;\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = colQualifier;\n                returnKey.colVisibility = colVisibility;\n                returnKey.setTimestamp(timestamp - 1);\n                returnKey.deleted = false;\n                break;\n            default :\n                throw new java.lang.IllegalArgumentException((\"Partial key specification \" + part) + \" disallowed\");\n        }\n        return returnKey;\n    }\n\n    public Key(org.apache.accumulo.core.data.Key other) {\n        set(other);\n    }\n\n    public Key(org.apache.accumulo.core.data.thrift.TKey tkey) {\n        this.row = toBytes(tkey.row);\n        this.colFamily = toBytes(tkey.colFamily);\n        this.colQualifier = toBytes(tkey.colQualifier);\n        this.colVisibility = toBytes(tkey.colVisibility);\n        this.timestamp = tkey.timestamp;\n        this.deleted = false;\n    }\n\n    public org.apache.hadoop.io.Text getRow(org.apache.hadoop.io.Text r) {\n        r.set(row, 0, row.length);\n        return r;\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getRowData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(row);\n    }\n\n    public org.apache.hadoop.io.Text getRow() {\n        return getRow(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareRow(org.apache.hadoop.io.Text r) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(row, 0, row.length, r.getBytes(), 0, r.getLength());\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnFamilyData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colFamily);\n    }\n\n    public org.apache.hadoop.io.Text getColumnFamily(org.apache.hadoop.io.Text cf) {\n        cf.set(colFamily, 0, colFamily.length);\n        return cf;\n    }\n\n    public org.apache.hadoop.io.Text getColumnFamily() {\n        return getColumnFamily(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareColumnFamily(org.apache.hadoop.io.Text cf) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(colFamily, 0, colFamily.length, cf.getBytes(), 0, cf.getLength());\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnQualifierData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colQualifier);\n    }\n\n    public org.apache.hadoop.io.Text getColumnQualifier(org.apache.hadoop.io.Text cq) {\n        cq.set(colQualifier, 0, colQualifier.length);\n        return cq;\n    }\n\n    public org.apache.hadoop.io.Text getColumnQualifier() {\n        return getColumnQualifier(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareColumnQualifier(org.apache.hadoop.io.Text cq) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(colQualifier, 0, colQualifier.length, cq.getBytes(), 0, cq.getLength());\n    }\n\n    public void setTimestamp(long ts) {\n        this.timestamp = ts;\n    }\n\n    public long getTimestamp() {\n        return timestamp;\n    }\n\n    public boolean isDeleted() {\n        return deleted;\n    }\n\n    public void setDeleted(boolean deleted) {\n        this.deleted = deleted;\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnVisibilityData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colVisibility);\n    }\n\n    public final org.apache.hadoop.io.Text getColumnVisibility() {\n        return getColumnVisibility(new org.apache.hadoop.io.Text());\n    }\n\n    public final org.apache.hadoop.io.Text getColumnVisibility(org.apache.hadoop.io.Text cv) {\n        cv.set(colVisibility, 0, colVisibility.length);\n        return cv;\n    }\n\n    public void set(org.apache.accumulo.core.data.Key k) {\n        row = k.row;\n        colFamily = k.colFamily;\n        colQualifier = k.colQualifier;\n        colVisibility = k.colVisibility;\n        timestamp = k.timestamp;\n        deleted = k.deleted;\n    }\n\n    public void readFields(java.io.DataInput in) throws java.io.IOException {\n        int colFamilyOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int colQualifierOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int colVisibilityOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int totalLen = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        row = new byte[colFamilyOffset];\n        colFamily = new byte[colQualifierOffset - colFamilyOffset];\n        colQualifier = new byte[colVisibilityOffset - colQualifierOffset];\n        colVisibility = new byte[totalLen - colVisibilityOffset];\n        in.readFully(row);\n        in.readFully(colFamily);\n        in.readFully(colQualifier);\n        in.readFully(colVisibility);\n        timestamp = org.apache.hadoop.io.WritableUtils.readVLong(in);\n        deleted = in.readBoolean();\n    }\n\n    public void write(java.io.DataOutput out) throws java.io.IOException {\n        int colFamilyOffset = row.length;\n        int colQualifierOffset = colFamilyOffset + colFamily.length;\n        int colVisibilityOffset = colQualifierOffset + colQualifier.length;\n        int totalLen = colVisibilityOffset + colVisibility.length;\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colFamilyOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colQualifierOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colVisibilityOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, totalLen);\n        out.write(row);\n        out.write(colFamily);\n        out.write(colQualifier);\n        out.write(colVisibility);\n        org.apache.hadoop.io.WritableUtils.writeVLong(out, timestamp);\n        out.writeBoolean(deleted);\n    }\n\n    public boolean equals(org.apache.accumulo.core.data.Key other, org.apache.accumulo.core.data.PartialKey part) {\n        switch (part) {\n            case ROW :\n                return org.apache.accumulo.core.data.Key.isEqual(row, other.row);\n            case ROW_COLFAM :\n                return org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily);\n            case ROW_COLFAM_COLQUAL :\n                return (org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier);\n            case ROW_COLFAM_COLQUAL_COLVIS :\n                return ((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility);\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME :\n                return (((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility)) && (timestamp == other.timestamp);\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL :\n                return ((((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility)) && (timestamp == other.timestamp)) && (deleted == other.deleted);\n            default :\n                throw new java.lang.IllegalArgumentException(\"Unrecognized partial key specification \" + part);\n        }\n    }\n\n    public int compareTo(org.apache.accumulo.core.data.Key other, org.apache.accumulo.core.data.PartialKey part) {\n        int result = org.apache.hadoop.io.WritableComparator.compareBytes(row, 0, row.length, other.row, 0, other.row.length);\n        if ((result != 0) || part.equals(PartialKey.ROW)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colFamily, 0, colFamily.length, other.colFamily, 0, other.colFamily.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colQualifier, 0, colQualifier.length, other.colQualifier, 0, other.colQualifier.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colVisibility, 0, colVisibility.length, other.colVisibility, 0, other.colVisibility.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL_COLVIS)) {\n            return result;\n        }\n        if (timestamp < other.timestamp) {\n            result = 1;\n        } else if (timestamp > other.timestamp) {\n            result = -1;\n        } else {\n            result = 0;\n        }\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME)) {\n            return result;\n        }\n        if (deleted) {\n            result = (other.deleted) ? 0 : -1;\n        } else {\n            result = (other.deleted) ? 1 : 0;\n        }\n        return result;\n    }\n\n    public int compareTo(org.apache.accumulo.core.data.Key other) {\n        return compareTo(other, PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL);\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return ((org.apache.hadoop.io.WritableComparator.hashBytes(row, row.length) + org.apache.hadoop.io.WritableComparator.hashBytes(colFamily, colFamily.length)) + org.apache.hadoop.io.WritableComparator.hashBytes(colQualifier, colQualifier.length)) + org.apache.hadoop.io.WritableComparator.hashBytes(colVisibility, colVisibility.length);\n    }\n\n    public static java.lang.String toPrintableString(byte[] ba, int offset, int len, int maxLen) {\n        return org.apache.accumulo.core.data.Key.appendPrintableString(ba, offset, len, maxLen, new java.lang.StringBuilder()).toString();\n    }\n\n    public static java.lang.StringBuilder appendPrintableString(byte[] ba, int offset, int len, int maxLen, java.lang.StringBuilder sb) {\n        int plen = java.lang.Math.min(len, maxLen);\n        for (int i = 0; i < plen; i++) {\n            int c = 0xff & ba[offset + i];\n            if ((c >= 32) && (c <= 126)) {\n                sb.append(((char) (c)));\n            } else {\n                sb.append(\"%\" + java.lang.String.format(\"%02x;\", c));\n            }\n        }\n        if (len > maxLen) {\n            sb.append(\"... TRUNCATED\");\n        }\n        return sb;\n    }\n\n    private java.lang.StringBuilder rowColumnStringBuilder() {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        org.apache.accumulo.core.data.Key.appendPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT, sb);\n        sb.append(\" \");\n        org.apache.accumulo.core.data.Key.appendPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT, sb);\n        sb.append(\":\");\n        org.apache.accumulo.core.data.Key.appendPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT, sb);\n        sb.append(\" [\");\n        org.apache.accumulo.core.data.Key.appendPrintableString(colVisibility, 0, colVisibility.length, Constants.MAX_DATA_TO_PRINT, sb);\n        sb.append(\"]\");\n        return sb;\n    }\n\n    public java.lang.String toString() {\n        java.lang.StringBuilder sb = rowColumnStringBuilder();\n        sb.append(\" \");\n        sb.append(java.lang.Long.toString(timestamp));\n        sb.append(\" \");\n        sb.append(deleted);\n        return sb.toString();\n    }\n\n    public java.lang.String toStringNoTime() {\n        return rowColumnStringBuilder().toString();\n    }\n\n    public int getLength() {\n        return ((row.length + colFamily.length) + colQualifier.length) + colVisibility.length;\n    }\n\n    public int getSize() {\n        return getLength();\n    }\n\n    private static boolean isEqual(byte[] a1, byte[] a2) {\n        if (a1 == a2) {\n            return true;\n        }\n        int last = a1.length;\n        if (last != a2.length) {\n            return false;\n        }\n        if (last == 0) {\n            return true;\n        }\n        last--;\n        if (a1[last] == a2[last]) {\n            for (int i = 0; i < last; i++) {\n                if (a1[i] != a2[i]) {\n                    return false;\n                }\n            }\n        } else {\n            return false;\n        }\n        return true;\n    }\n\n    public static java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> compress(java.util.List<? extends org.apache.accumulo.core.data.KeyValue> param) {\n        java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> tkvl = java.util.Arrays.asList(new org.apache.accumulo.core.data.thrift.TKeyValue[param.size()]);\n        if (param.size() > 0) {\n            tkvl.set(0, new org.apache.accumulo.core.data.thrift.TKeyValue(param.get(0).key.toThrift(), java.nio.ByteBuffer.wrap(param.get(0).value)));\n        }\n        for (int i = param.size() - 1; i > 0; i--) {\n            org.apache.accumulo.core.data.Key prevKey = param.get(i - 1).key;\n            org.apache.accumulo.core.data.KeyValue kv = param.get(i);\n            org.apache.accumulo.core.data.Key key = kv.key;\n            org.apache.accumulo.core.data.thrift.TKey newKey = null;\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.row, key.row)) {\n                newKey = key.toThrift();\n                newKey.row = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colFamily, key.colFamily)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colFamily = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colQualifier, key.colQualifier)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colQualifier = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colVisibility, key.colVisibility)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colVisibility = null;\n            }\n            if (newKey == null) {\n                newKey = key.toThrift();\n            }\n            tkvl.set(i, new org.apache.accumulo.core.data.thrift.TKeyValue(newKey, java.nio.ByteBuffer.wrap(kv.value)));\n        }\n        return tkvl;\n    }\n\n    public static void decompress(java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> param) {\n        for (int i = 1; i < param.size(); i++) {\n            org.apache.accumulo.core.data.thrift.TKey prevKey = param.get(i - 1).key;\n            org.apache.accumulo.core.data.thrift.TKey key = param.get(i).key;\n            if (key.row == null) {\n                key.row = prevKey.row;\n            }\n            if (key.colFamily == null) {\n                key.colFamily = prevKey.colFamily;\n            }\n            if (key.colQualifier == null) {\n                key.colQualifier = prevKey.colQualifier;\n            }\n            if (key.colVisibility == null) {\n                key.colVisibility = prevKey.colVisibility;\n            }\n        }\n    }\n\n    byte[] getRowBytes() {\n        return row;\n    }\n\n    byte[] getColFamily() {\n        return colFamily;\n    }\n\n    byte[] getColQualifier() {\n        return colQualifier;\n    }\n\n    byte[] getColVisibility() {\n        return colVisibility;\n    }\n\n    public org.apache.accumulo.core.data.thrift.TKey toThrift() {\n        return new org.apache.accumulo.core.data.thrift.TKey(java.nio.ByteBuffer.wrap(row), java.nio.ByteBuffer.wrap(colFamily), java.nio.ByteBuffer.wrap(colQualifier), java.nio.ByteBuffer.wrap(colVisibility), timestamp);\n    }\n\n    @java.lang.Override\n    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {\n        org.apache.accumulo.core.data.Key r = ((org.apache.accumulo.core.data.Key) (super.clone()));\n        r.row = java.util.Arrays.copyOf(row, row.length);\n        r.colFamily = java.util.Arrays.copyOf(colFamily, colFamily.length);\n        r.colQualifier = java.util.Arrays.copyOf(colQualifier, colQualifier.length);\n        r.colVisibility = java.util.Arrays.copyOf(colVisibility, colVisibility.length);\n        return r;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "public static java.lang.String toPrintableString(byte[] ba, int offset, int len, int maxLen) {\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    int plen = java.lang.Math.min(len, maxLen);\n    for (int i = 0; i < plen; i++) {\n        int c = 0xff & ba[offset + i];\n        if ((c >= 32) && (c <= 126)) {\n            sb.append(((char) (c)));\n        } else {\n            sb.append(\"%\" + java.lang.String.format(\"%02x;\", c));\n        }\n    }\n    if (len > maxLen) {\n        sb.append(\"... TRUNCATED\");\n    }\n    return sb.toString();\n}",
            "src_parent": "public class Key implements java.lang.Cloneable , org.apache.hadoop.io.WritableComparable<org.apache.accumulo.core.data.Key> {\n    protected byte[] row;\n\n    protected byte[] colFamily;\n\n    protected byte[] colQualifier;\n\n    protected byte[] colVisibility;\n\n    protected long timestamp;\n\n    protected boolean deleted;\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (o instanceof org.apache.accumulo.core.data.Key) {\n            return this.equals(((org.apache.accumulo.core.data.Key) (o)), PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL);\n        }\n        return false;\n    }\n\n    private static final byte[] EMPTY_BYTES = new byte[0];\n\n    private byte[] copyIfNeeded(byte[] ba, int off, int len, boolean copyData) {\n        if (len == 0) {\n            return org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        }\n        if (((!copyData) && (ba.length == len)) && (off == 0)) {\n            return ba;\n        }\n        byte[] copy = new byte[len];\n        java.lang.System.arraycopy(ba, off, copy, 0, len);\n        return copy;\n    }\n\n    private final void init(byte[] r, int rOff, int rLen, byte[] cf, int cfOff, int cfLen, byte[] cq, int cqOff, int cqLen, byte[] cv, int cvOff, int cvLen, long ts, boolean del, boolean copy) {\n        row = copyIfNeeded(r, rOff, rLen, copy);\n        colFamily = copyIfNeeded(cf, cfOff, cfLen, copy);\n        colQualifier = copyIfNeeded(cq, cqOff, cqLen, copy);\n        colVisibility = copyIfNeeded(cv, cvOff, cvLen, copy);\n        timestamp = ts;\n        deleted = del;\n    }\n\n    public Key() {\n        row = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colFamily = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colQualifier = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colVisibility = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        timestamp = java.lang.Long.MAX_VALUE;\n        deleted = false;\n    }\n\n    public Key(org.apache.hadoop.io.Text row) {\n        init(row.getBytes(), 0, row.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, long ts) {\n        this(row);\n        timestamp = ts;\n    }\n\n    public Key(byte[] row, int rOff, int rLen, byte[] cf, int cfOff, int cfLen, byte[] cq, int cqOff, int cqLen, byte[] cv, int cvOff, int cvLen, long ts) {\n        init(row, rOff, rLen, cf, cfOff, cfLen, cq, cqOff, cqLen, cv, cvOff, cvLen, ts, false, true);\n    }\n\n    public Key(byte[] row, byte[] colFamily, byte[] colQualifier, byte[] colVisibility, long timestamp) {\n        this(row, colFamily, colQualifier, colVisibility, timestamp, false, true);\n    }\n\n    public Key(byte[] row, byte[] cf, byte[] cq, byte[] cv, long ts, boolean deleted) {\n        this(row, cf, cq, cv, ts, deleted, true);\n    }\n\n    public Key(byte[] row, byte[] cf, byte[] cq, byte[] cv, long ts, boolean deleted, boolean copy) {\n        init(row, 0, row.length, cf, 0, cf.length, cq, 0, cq.length, cv, 0, cv.length, ts, deleted, copy);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.hadoop.io.Text cv) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), cv.getBytes(), 0, cv.getLength(), java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, long ts) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, ts, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.hadoop.io.Text cv, long ts) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), cv.getBytes(), 0, cv.getLength(), ts, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.accumulo.core.security.ColumnVisibility cv, long ts) {\n        byte[] expr = cv.getExpression();\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), expr, 0, expr.length, ts, false, true);\n    }\n\n    public Key(java.lang.CharSequence row) {\n        this(new org.apache.hadoop.io.Text(row.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, java.lang.CharSequence cv) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), ts);\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, java.lang.CharSequence cv, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.toString()), ts);\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, org.apache.accumulo.core.security.ColumnVisibility cv, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.getExpression()), ts);\n    }\n\n    private byte[] followingArray(byte[] ba) {\n        byte[] fba = new byte[ba.length + 1];\n        java.lang.System.arraycopy(ba, 0, fba, 0, ba.length);\n        fba[ba.length] = ((byte) (0x0));\n        return fba;\n    }\n\n    public org.apache.accumulo.core.data.Key followingKey(org.apache.accumulo.core.data.PartialKey part) {\n        org.apache.accumulo.core.data.Key returnKey = new org.apache.accumulo.core.data.Key();\n        switch (part) {\n            case ROW :\n                returnKey.row = followingArray(row);\n                break;\n            case ROW_COLFAM :\n                returnKey.row = row;\n                returnKey.colFamily = followingArray(colFamily);\n                break;\n            case ROW_COLFAM_COLQUAL :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = followingArray(colQualifier);\n                break;\n            case ROW_COLFAM_COLQUAL_COLVIS :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = colQualifier;\n                returnKey.colVisibility = followingArray(colVisibility);\n                break;\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = colQualifier;\n                returnKey.colVisibility = colVisibility;\n                returnKey.setTimestamp(timestamp - 1);\n                returnKey.deleted = false;\n                break;\n            default :\n                throw new java.lang.IllegalArgumentException((\"Partial key specification \" + part) + \" disallowed\");\n        }\n        return returnKey;\n    }\n\n    public Key(org.apache.accumulo.core.data.Key other) {\n        set(other);\n    }\n\n    public Key(org.apache.accumulo.core.data.thrift.TKey tkey) {\n        this.row = toBytes(tkey.row);\n        this.colFamily = toBytes(tkey.colFamily);\n        this.colQualifier = toBytes(tkey.colQualifier);\n        this.colVisibility = toBytes(tkey.colVisibility);\n        this.timestamp = tkey.timestamp;\n        this.deleted = false;\n    }\n\n    public org.apache.hadoop.io.Text getRow(org.apache.hadoop.io.Text r) {\n        r.set(row, 0, row.length);\n        return r;\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getRowData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(row);\n    }\n\n    public org.apache.hadoop.io.Text getRow() {\n        return getRow(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareRow(org.apache.hadoop.io.Text r) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(row, 0, row.length, r.getBytes(), 0, r.getLength());\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnFamilyData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colFamily);\n    }\n\n    public org.apache.hadoop.io.Text getColumnFamily(org.apache.hadoop.io.Text cf) {\n        cf.set(colFamily, 0, colFamily.length);\n        return cf;\n    }\n\n    public org.apache.hadoop.io.Text getColumnFamily() {\n        return getColumnFamily(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareColumnFamily(org.apache.hadoop.io.Text cf) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(colFamily, 0, colFamily.length, cf.getBytes(), 0, cf.getLength());\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnQualifierData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colQualifier);\n    }\n\n    public org.apache.hadoop.io.Text getColumnQualifier(org.apache.hadoop.io.Text cq) {\n        cq.set(colQualifier, 0, colQualifier.length);\n        return cq;\n    }\n\n    public org.apache.hadoop.io.Text getColumnQualifier() {\n        return getColumnQualifier(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareColumnQualifier(org.apache.hadoop.io.Text cq) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(colQualifier, 0, colQualifier.length, cq.getBytes(), 0, cq.getLength());\n    }\n\n    public void setTimestamp(long ts) {\n        this.timestamp = ts;\n    }\n\n    public long getTimestamp() {\n        return timestamp;\n    }\n\n    public boolean isDeleted() {\n        return deleted;\n    }\n\n    public void setDeleted(boolean deleted) {\n        this.deleted = deleted;\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnVisibilityData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colVisibility);\n    }\n\n    public final org.apache.hadoop.io.Text getColumnVisibility() {\n        return getColumnVisibility(new org.apache.hadoop.io.Text());\n    }\n\n    public final org.apache.hadoop.io.Text getColumnVisibility(org.apache.hadoop.io.Text cv) {\n        cv.set(colVisibility, 0, colVisibility.length);\n        return cv;\n    }\n\n    public void set(org.apache.accumulo.core.data.Key k) {\n        row = k.row;\n        colFamily = k.colFamily;\n        colQualifier = k.colQualifier;\n        colVisibility = k.colVisibility;\n        timestamp = k.timestamp;\n        deleted = k.deleted;\n    }\n\n    public void readFields(java.io.DataInput in) throws java.io.IOException {\n        int colFamilyOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int colQualifierOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int colVisibilityOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int totalLen = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        row = new byte[colFamilyOffset];\n        colFamily = new byte[colQualifierOffset - colFamilyOffset];\n        colQualifier = new byte[colVisibilityOffset - colQualifierOffset];\n        colVisibility = new byte[totalLen - colVisibilityOffset];\n        in.readFully(row);\n        in.readFully(colFamily);\n        in.readFully(colQualifier);\n        in.readFully(colVisibility);\n        timestamp = org.apache.hadoop.io.WritableUtils.readVLong(in);\n        deleted = in.readBoolean();\n    }\n\n    public void write(java.io.DataOutput out) throws java.io.IOException {\n        int colFamilyOffset = row.length;\n        int colQualifierOffset = colFamilyOffset + colFamily.length;\n        int colVisibilityOffset = colQualifierOffset + colQualifier.length;\n        int totalLen = colVisibilityOffset + colVisibility.length;\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colFamilyOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colQualifierOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colVisibilityOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, totalLen);\n        out.write(row);\n        out.write(colFamily);\n        out.write(colQualifier);\n        out.write(colVisibility);\n        org.apache.hadoop.io.WritableUtils.writeVLong(out, timestamp);\n        out.writeBoolean(deleted);\n    }\n\n    public boolean equals(org.apache.accumulo.core.data.Key other, org.apache.accumulo.core.data.PartialKey part) {\n        switch (part) {\n            case ROW :\n                return org.apache.accumulo.core.data.Key.isEqual(row, other.row);\n            case ROW_COLFAM :\n                return org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily);\n            case ROW_COLFAM_COLQUAL :\n                return (org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier);\n            case ROW_COLFAM_COLQUAL_COLVIS :\n                return ((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility);\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME :\n                return (((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility)) && (timestamp == other.timestamp);\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL :\n                return ((((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility)) && (timestamp == other.timestamp)) && (deleted == other.deleted);\n            default :\n                throw new java.lang.IllegalArgumentException(\"Unrecognized partial key specification \" + part);\n        }\n    }\n\n    public int compareTo(org.apache.accumulo.core.data.Key other, org.apache.accumulo.core.data.PartialKey part) {\n        int result = org.apache.hadoop.io.WritableComparator.compareBytes(row, 0, row.length, other.row, 0, other.row.length);\n        if ((result != 0) || part.equals(PartialKey.ROW)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colFamily, 0, colFamily.length, other.colFamily, 0, other.colFamily.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colQualifier, 0, colQualifier.length, other.colQualifier, 0, other.colQualifier.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colVisibility, 0, colVisibility.length, other.colVisibility, 0, other.colVisibility.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL_COLVIS)) {\n            return result;\n        }\n        if (timestamp < other.timestamp) {\n            result = 1;\n        } else if (timestamp > other.timestamp) {\n            result = -1;\n        } else {\n            result = 0;\n        }\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME)) {\n            return result;\n        }\n        if (deleted) {\n            result = (other.deleted) ? 0 : -1;\n        } else {\n            result = (other.deleted) ? 1 : 0;\n        }\n        return result;\n    }\n\n    public int compareTo(org.apache.accumulo.core.data.Key other) {\n        return compareTo(other, PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL);\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return ((org.apache.hadoop.io.WritableComparator.hashBytes(row, row.length) + org.apache.hadoop.io.WritableComparator.hashBytes(colFamily, colFamily.length)) + org.apache.hadoop.io.WritableComparator.hashBytes(colQualifier, colQualifier.length)) + org.apache.hadoop.io.WritableComparator.hashBytes(colVisibility, colVisibility.length);\n    }\n\n    public static java.lang.String toPrintableString(byte[] ba, int offset, int len, int maxLen) {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        int plen = java.lang.Math.min(len, maxLen);\n        for (int i = 0; i < plen; i++) {\n            int c = 0xff & ba[offset + i];\n            if ((c >= 32) && (c <= 126)) {\n                sb.append(((char) (c)));\n            } else {\n                sb.append(\"%\" + java.lang.String.format(\"%02x;\", c));\n            }\n        }\n        if (len > maxLen) {\n            sb.append(\"... TRUNCATED\");\n        }\n        return sb.toString();\n    }\n\n    public java.lang.String toString() {\n        java.lang.String labelString = new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString();\n        java.lang.String s = (((((((((org.apache.accumulo.core.data.Key.toPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT) + \" \") + org.apache.accumulo.core.data.Key.toPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT)) + \":\") + org.apache.accumulo.core.data.Key.toPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT)) + \" \") + labelString) + \" \") + java.lang.Long.toString(timestamp)) + \" \") + deleted;\n        return s;\n    }\n\n    public java.lang.String toStringNoTime() {\n        java.lang.String labelString = new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString();\n        java.lang.String s = (((((new java.lang.String(row, 0, row.length) + \" \") + new java.lang.String(colFamily, 0, colFamily.length)) + \":\") + new java.lang.String(colQualifier, 0, colQualifier.length)) + \" \") + labelString;\n        return s;\n    }\n\n    public int getLength() {\n        return ((row.length + colFamily.length) + colQualifier.length) + colVisibility.length;\n    }\n\n    public int getSize() {\n        return getLength();\n    }\n\n    private static boolean isEqual(byte[] a1, byte[] a2) {\n        if (a1 == a2) {\n            return true;\n        }\n        int last = a1.length;\n        if (last != a2.length) {\n            return false;\n        }\n        if (last == 0) {\n            return true;\n        }\n        last--;\n        if (a1[last] == a2[last]) {\n            for (int i = 0; i < last; i++) {\n                if (a1[i] != a2[i]) {\n                    return false;\n                }\n            }\n        } else {\n            return false;\n        }\n        return true;\n    }\n\n    public static java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> compress(java.util.List<? extends org.apache.accumulo.core.data.KeyValue> param) {\n        java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> tkvl = java.util.Arrays.asList(new org.apache.accumulo.core.data.thrift.TKeyValue[param.size()]);\n        if (param.size() > 0) {\n            tkvl.set(0, new org.apache.accumulo.core.data.thrift.TKeyValue(param.get(0).key.toThrift(), java.nio.ByteBuffer.wrap(param.get(0).value)));\n        }\n        for (int i = param.size() - 1; i > 0; i--) {\n            org.apache.accumulo.core.data.Key prevKey = param.get(i - 1).key;\n            org.apache.accumulo.core.data.KeyValue kv = param.get(i);\n            org.apache.accumulo.core.data.Key key = kv.key;\n            org.apache.accumulo.core.data.thrift.TKey newKey = null;\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.row, key.row)) {\n                newKey = key.toThrift();\n                newKey.row = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colFamily, key.colFamily)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colFamily = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colQualifier, key.colQualifier)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colQualifier = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colVisibility, key.colVisibility)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colVisibility = null;\n            }\n            if (newKey == null) {\n                newKey = key.toThrift();\n            }\n            tkvl.set(i, new org.apache.accumulo.core.data.thrift.TKeyValue(newKey, java.nio.ByteBuffer.wrap(kv.value)));\n        }\n        return tkvl;\n    }\n\n    public static void decompress(java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> param) {\n        for (int i = 1; i < param.size(); i++) {\n            org.apache.accumulo.core.data.thrift.TKey prevKey = param.get(i - 1).key;\n            org.apache.accumulo.core.data.thrift.TKey key = param.get(i).key;\n            if (key.row == null) {\n                key.row = prevKey.row;\n            }\n            if (key.colFamily == null) {\n                key.colFamily = prevKey.colFamily;\n            }\n            if (key.colQualifier == null) {\n                key.colQualifier = prevKey.colQualifier;\n            }\n            if (key.colVisibility == null) {\n                key.colVisibility = prevKey.colVisibility;\n            }\n        }\n    }\n\n    byte[] getRowBytes() {\n        return row;\n    }\n\n    byte[] getColFamily() {\n        return colFamily;\n    }\n\n    byte[] getColQualifier() {\n        return colQualifier;\n    }\n\n    byte[] getColVisibility() {\n        return colVisibility;\n    }\n\n    public org.apache.accumulo.core.data.thrift.TKey toThrift() {\n        return new org.apache.accumulo.core.data.thrift.TKey(java.nio.ByteBuffer.wrap(row), java.nio.ByteBuffer.wrap(colFamily), java.nio.ByteBuffer.wrap(colQualifier), java.nio.ByteBuffer.wrap(colVisibility), timestamp);\n    }\n\n    @java.lang.Override\n    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {\n        org.apache.accumulo.core.data.Key r = ((org.apache.accumulo.core.data.Key) (super.clone()));\n        r.row = java.util.Arrays.copyOf(row, row.length);\n        r.colFamily = java.util.Arrays.copyOf(colFamily, colFamily.length);\n        r.colQualifier = java.util.Arrays.copyOf(colQualifier, colQualifier.length);\n        r.colVisibility = java.util.Arrays.copyOf(colVisibility, colVisibility.length);\n        return r;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.StringBuilder",
            "dst_parent": "public static java.lang.StringBuilder appendPrintableString(byte[] ba, int offset, int len, int maxLen, java.lang.StringBuilder sb) {\n    int plen = java.lang.Math.min(len, maxLen);\n    for (int i = 0; i < plen; i++) {\n        int c = 0xff & ba[offset + i];\n        if ((c >= 32) && (c <= 126)) {\n            sb.append(((char) (c)));\n        } else {\n            sb.append(\"%\" + java.lang.String.format(\"%02x;\", c));\n        }\n    }\n    if (len > maxLen) {\n        sb.append(\"... TRUNCATED\");\n    }\n    return sb;\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.lang.String",
            "src_parent": "public static java.lang.String toPrintableString(byte[] ba, int offset, int len, int maxLen) {\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    int plen = java.lang.Math.min(len, maxLen);\n    for (int i = 0; i < plen; i++) {\n        int c = 0xff & ba[offset + i];\n        if ((c >= 32) && (c <= 126)) {\n            sb.append(((char) (c)));\n        } else {\n            sb.append(\"%\" + java.lang.String.format(\"%02x;\", c));\n        }\n    }\n    if (len > maxLen) {\n        sb.append(\"... TRUNCATED\");\n    }\n    return sb.toString();\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.accumulo.core.data.Key.appendPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT, sb)",
            "dst_parent": "{\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    org.apache.accumulo.core.data.Key.appendPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\" \");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\":\");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\" [\");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colVisibility, 0, colVisibility.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\"]\");\n    return sb;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "org.apache.accumulo.core.data.Key.toPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT)",
            "src_parent": "(org.apache.accumulo.core.data.Key.toPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT) + \" \")",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.accumulo.core.data.Key.appendPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT, sb)",
            "dst_parent": "{\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    org.apache.accumulo.core.data.Key.appendPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\" \");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\":\");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\" [\");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colVisibility, 0, colVisibility.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\"]\");\n    return sb;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "org.apache.accumulo.core.data.Key.toPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT)",
            "src_parent": "((org.apache.accumulo.core.data.Key.toPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT) + \" \") + org.apache.accumulo.core.data.Key.toPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT))",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.accumulo.core.data.Key.appendPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT, sb)",
            "dst_parent": "{\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    org.apache.accumulo.core.data.Key.appendPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\" \");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\":\");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\" [\");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colVisibility, 0, colVisibility.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\"]\");\n    return sb;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "org.apache.accumulo.core.data.Key.toPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT)",
            "src_parent": "((((org.apache.accumulo.core.data.Key.toPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT) + \" \") + org.apache.accumulo.core.data.Key.toPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT)) + \":\") + org.apache.accumulo.core.data.Key.toPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT))",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.StringBuilder sb = rowColumnStringBuilder()",
            "dst_parent": "{\n    java.lang.StringBuilder sb = rowColumnStringBuilder();\n    sb.append(\" \");\n    sb.append(java.lang.Long.toString(timestamp));\n    sb.append(\" \");\n    sb.append(deleted);\n    return sb.toString();\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "UPD",
            "src": "java.lang.String labelString = new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString()",
            "src_parent": "{\n    java.lang.String labelString = new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString();\n    java.lang.String s = (((((new java.lang.String(row, 0, row.length) + \" \") + new java.lang.String(colFamily, 0, colFamily.length)) + \":\") + new java.lang.String(colQualifier, 0, colQualifier.length)) + \" \") + labelString;\n    return s;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "sb",
            "dst_parent": "return sb",
            "dst_parent_type": "Return",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "s",
            "src_parent": "return s",
            "src_parent_type": "Return",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.StringBuilder",
            "dst_parent": "java.lang.StringBuilder sb = rowColumnStringBuilder()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.lang.String",
            "src_parent": "java.lang.String labelString = new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString()",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "rowColumnStringBuilder()",
            "dst_parent": "java.lang.StringBuilder sb = rowColumnStringBuilder()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString()",
            "src_parent": "java.lang.String labelString = new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString()",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "new java.lang.StringBuilder()",
            "dst_parent": "org.apache.accumulo.core.data.Key.appendPrintableString(ba, offset, len, maxLen, new java.lang.StringBuilder())",
            "dst_parent_type": "Invocation",
            "dst_type": "ConstructorCall",
            "operator": "UPD",
            "src": "new org.apache.accumulo.core.security.ColumnVisibility(colVisibility)",
            "src_parent": "new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString()",
            "src_parent_type": "Invocation",
            "src_type": "ConstructorCall"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "s",
            "src_parent": "return s",
            "src_parent_type": "Return",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public java.lang.String toString() {\n    java.lang.String labelString = new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString();\n    java.lang.String s = (((((((((org.apache.accumulo.core.data.Key.toPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT) + \" \") + org.apache.accumulo.core.data.Key.toPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT)) + \":\") + org.apache.accumulo.core.data.Key.toPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT)) + \" \") + labelString) + \" \") + java.lang.Long.toString(timestamp)) + \" \") + deleted;\n    return s;\n}",
            "src_parent": "public class Key implements java.lang.Cloneable , org.apache.hadoop.io.WritableComparable<org.apache.accumulo.core.data.Key> {\n    protected byte[] row;\n\n    protected byte[] colFamily;\n\n    protected byte[] colQualifier;\n\n    protected byte[] colVisibility;\n\n    protected long timestamp;\n\n    protected boolean deleted;\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (o instanceof org.apache.accumulo.core.data.Key) {\n            return this.equals(((org.apache.accumulo.core.data.Key) (o)), PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL);\n        }\n        return false;\n    }\n\n    private static final byte[] EMPTY_BYTES = new byte[0];\n\n    private byte[] copyIfNeeded(byte[] ba, int off, int len, boolean copyData) {\n        if (len == 0) {\n            return org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        }\n        if (((!copyData) && (ba.length == len)) && (off == 0)) {\n            return ba;\n        }\n        byte[] copy = new byte[len];\n        java.lang.System.arraycopy(ba, off, copy, 0, len);\n        return copy;\n    }\n\n    private final void init(byte[] r, int rOff, int rLen, byte[] cf, int cfOff, int cfLen, byte[] cq, int cqOff, int cqLen, byte[] cv, int cvOff, int cvLen, long ts, boolean del, boolean copy) {\n        row = copyIfNeeded(r, rOff, rLen, copy);\n        colFamily = copyIfNeeded(cf, cfOff, cfLen, copy);\n        colQualifier = copyIfNeeded(cq, cqOff, cqLen, copy);\n        colVisibility = copyIfNeeded(cv, cvOff, cvLen, copy);\n        timestamp = ts;\n        deleted = del;\n    }\n\n    public Key() {\n        row = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colFamily = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colQualifier = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colVisibility = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        timestamp = java.lang.Long.MAX_VALUE;\n        deleted = false;\n    }\n\n    public Key(org.apache.hadoop.io.Text row) {\n        init(row.getBytes(), 0, row.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, long ts) {\n        this(row);\n        timestamp = ts;\n    }\n\n    public Key(byte[] row, int rOff, int rLen, byte[] cf, int cfOff, int cfLen, byte[] cq, int cqOff, int cqLen, byte[] cv, int cvOff, int cvLen, long ts) {\n        init(row, rOff, rLen, cf, cfOff, cfLen, cq, cqOff, cqLen, cv, cvOff, cvLen, ts, false, true);\n    }\n\n    public Key(byte[] row, byte[] colFamily, byte[] colQualifier, byte[] colVisibility, long timestamp) {\n        this(row, colFamily, colQualifier, colVisibility, timestamp, false, true);\n    }\n\n    public Key(byte[] row, byte[] cf, byte[] cq, byte[] cv, long ts, boolean deleted) {\n        this(row, cf, cq, cv, ts, deleted, true);\n    }\n\n    public Key(byte[] row, byte[] cf, byte[] cq, byte[] cv, long ts, boolean deleted, boolean copy) {\n        init(row, 0, row.length, cf, 0, cf.length, cq, 0, cq.length, cv, 0, cv.length, ts, deleted, copy);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.hadoop.io.Text cv) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), cv.getBytes(), 0, cv.getLength(), java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, long ts) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, ts, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.hadoop.io.Text cv, long ts) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), cv.getBytes(), 0, cv.getLength(), ts, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.accumulo.core.security.ColumnVisibility cv, long ts) {\n        byte[] expr = cv.getExpression();\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), expr, 0, expr.length, ts, false, true);\n    }\n\n    public Key(java.lang.CharSequence row) {\n        this(new org.apache.hadoop.io.Text(row.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, java.lang.CharSequence cv) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), ts);\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, java.lang.CharSequence cv, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.toString()), ts);\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, org.apache.accumulo.core.security.ColumnVisibility cv, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.getExpression()), ts);\n    }\n\n    private byte[] followingArray(byte[] ba) {\n        byte[] fba = new byte[ba.length + 1];\n        java.lang.System.arraycopy(ba, 0, fba, 0, ba.length);\n        fba[ba.length] = ((byte) (0x0));\n        return fba;\n    }\n\n    public org.apache.accumulo.core.data.Key followingKey(org.apache.accumulo.core.data.PartialKey part) {\n        org.apache.accumulo.core.data.Key returnKey = new org.apache.accumulo.core.data.Key();\n        switch (part) {\n            case ROW :\n                returnKey.row = followingArray(row);\n                break;\n            case ROW_COLFAM :\n                returnKey.row = row;\n                returnKey.colFamily = followingArray(colFamily);\n                break;\n            case ROW_COLFAM_COLQUAL :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = followingArray(colQualifier);\n                break;\n            case ROW_COLFAM_COLQUAL_COLVIS :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = colQualifier;\n                returnKey.colVisibility = followingArray(colVisibility);\n                break;\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = colQualifier;\n                returnKey.colVisibility = colVisibility;\n                returnKey.setTimestamp(timestamp - 1);\n                returnKey.deleted = false;\n                break;\n            default :\n                throw new java.lang.IllegalArgumentException((\"Partial key specification \" + part) + \" disallowed\");\n        }\n        return returnKey;\n    }\n\n    public Key(org.apache.accumulo.core.data.Key other) {\n        set(other);\n    }\n\n    public Key(org.apache.accumulo.core.data.thrift.TKey tkey) {\n        this.row = toBytes(tkey.row);\n        this.colFamily = toBytes(tkey.colFamily);\n        this.colQualifier = toBytes(tkey.colQualifier);\n        this.colVisibility = toBytes(tkey.colVisibility);\n        this.timestamp = tkey.timestamp;\n        this.deleted = false;\n    }\n\n    public org.apache.hadoop.io.Text getRow(org.apache.hadoop.io.Text r) {\n        r.set(row, 0, row.length);\n        return r;\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getRowData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(row);\n    }\n\n    public org.apache.hadoop.io.Text getRow() {\n        return getRow(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareRow(org.apache.hadoop.io.Text r) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(row, 0, row.length, r.getBytes(), 0, r.getLength());\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnFamilyData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colFamily);\n    }\n\n    public org.apache.hadoop.io.Text getColumnFamily(org.apache.hadoop.io.Text cf) {\n        cf.set(colFamily, 0, colFamily.length);\n        return cf;\n    }\n\n    public org.apache.hadoop.io.Text getColumnFamily() {\n        return getColumnFamily(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareColumnFamily(org.apache.hadoop.io.Text cf) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(colFamily, 0, colFamily.length, cf.getBytes(), 0, cf.getLength());\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnQualifierData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colQualifier);\n    }\n\n    public org.apache.hadoop.io.Text getColumnQualifier(org.apache.hadoop.io.Text cq) {\n        cq.set(colQualifier, 0, colQualifier.length);\n        return cq;\n    }\n\n    public org.apache.hadoop.io.Text getColumnQualifier() {\n        return getColumnQualifier(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareColumnQualifier(org.apache.hadoop.io.Text cq) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(colQualifier, 0, colQualifier.length, cq.getBytes(), 0, cq.getLength());\n    }\n\n    public void setTimestamp(long ts) {\n        this.timestamp = ts;\n    }\n\n    public long getTimestamp() {\n        return timestamp;\n    }\n\n    public boolean isDeleted() {\n        return deleted;\n    }\n\n    public void setDeleted(boolean deleted) {\n        this.deleted = deleted;\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnVisibilityData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colVisibility);\n    }\n\n    public final org.apache.hadoop.io.Text getColumnVisibility() {\n        return getColumnVisibility(new org.apache.hadoop.io.Text());\n    }\n\n    public final org.apache.hadoop.io.Text getColumnVisibility(org.apache.hadoop.io.Text cv) {\n        cv.set(colVisibility, 0, colVisibility.length);\n        return cv;\n    }\n\n    public void set(org.apache.accumulo.core.data.Key k) {\n        row = k.row;\n        colFamily = k.colFamily;\n        colQualifier = k.colQualifier;\n        colVisibility = k.colVisibility;\n        timestamp = k.timestamp;\n        deleted = k.deleted;\n    }\n\n    public void readFields(java.io.DataInput in) throws java.io.IOException {\n        int colFamilyOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int colQualifierOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int colVisibilityOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int totalLen = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        row = new byte[colFamilyOffset];\n        colFamily = new byte[colQualifierOffset - colFamilyOffset];\n        colQualifier = new byte[colVisibilityOffset - colQualifierOffset];\n        colVisibility = new byte[totalLen - colVisibilityOffset];\n        in.readFully(row);\n        in.readFully(colFamily);\n        in.readFully(colQualifier);\n        in.readFully(colVisibility);\n        timestamp = org.apache.hadoop.io.WritableUtils.readVLong(in);\n        deleted = in.readBoolean();\n    }\n\n    public void write(java.io.DataOutput out) throws java.io.IOException {\n        int colFamilyOffset = row.length;\n        int colQualifierOffset = colFamilyOffset + colFamily.length;\n        int colVisibilityOffset = colQualifierOffset + colQualifier.length;\n        int totalLen = colVisibilityOffset + colVisibility.length;\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colFamilyOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colQualifierOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colVisibilityOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, totalLen);\n        out.write(row);\n        out.write(colFamily);\n        out.write(colQualifier);\n        out.write(colVisibility);\n        org.apache.hadoop.io.WritableUtils.writeVLong(out, timestamp);\n        out.writeBoolean(deleted);\n    }\n\n    public boolean equals(org.apache.accumulo.core.data.Key other, org.apache.accumulo.core.data.PartialKey part) {\n        switch (part) {\n            case ROW :\n                return org.apache.accumulo.core.data.Key.isEqual(row, other.row);\n            case ROW_COLFAM :\n                return org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily);\n            case ROW_COLFAM_COLQUAL :\n                return (org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier);\n            case ROW_COLFAM_COLQUAL_COLVIS :\n                return ((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility);\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME :\n                return (((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility)) && (timestamp == other.timestamp);\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL :\n                return ((((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility)) && (timestamp == other.timestamp)) && (deleted == other.deleted);\n            default :\n                throw new java.lang.IllegalArgumentException(\"Unrecognized partial key specification \" + part);\n        }\n    }\n\n    public int compareTo(org.apache.accumulo.core.data.Key other, org.apache.accumulo.core.data.PartialKey part) {\n        int result = org.apache.hadoop.io.WritableComparator.compareBytes(row, 0, row.length, other.row, 0, other.row.length);\n        if ((result != 0) || part.equals(PartialKey.ROW)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colFamily, 0, colFamily.length, other.colFamily, 0, other.colFamily.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colQualifier, 0, colQualifier.length, other.colQualifier, 0, other.colQualifier.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colVisibility, 0, colVisibility.length, other.colVisibility, 0, other.colVisibility.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL_COLVIS)) {\n            return result;\n        }\n        if (timestamp < other.timestamp) {\n            result = 1;\n        } else if (timestamp > other.timestamp) {\n            result = -1;\n        } else {\n            result = 0;\n        }\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME)) {\n            return result;\n        }\n        if (deleted) {\n            result = (other.deleted) ? 0 : -1;\n        } else {\n            result = (other.deleted) ? 1 : 0;\n        }\n        return result;\n    }\n\n    public int compareTo(org.apache.accumulo.core.data.Key other) {\n        return compareTo(other, PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL);\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return ((org.apache.hadoop.io.WritableComparator.hashBytes(row, row.length) + org.apache.hadoop.io.WritableComparator.hashBytes(colFamily, colFamily.length)) + org.apache.hadoop.io.WritableComparator.hashBytes(colQualifier, colQualifier.length)) + org.apache.hadoop.io.WritableComparator.hashBytes(colVisibility, colVisibility.length);\n    }\n\n    public static java.lang.String toPrintableString(byte[] ba, int offset, int len, int maxLen) {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        int plen = java.lang.Math.min(len, maxLen);\n        for (int i = 0; i < plen; i++) {\n            int c = 0xff & ba[offset + i];\n            if ((c >= 32) && (c <= 126)) {\n                sb.append(((char) (c)));\n            } else {\n                sb.append(\"%\" + java.lang.String.format(\"%02x;\", c));\n            }\n        }\n        if (len > maxLen) {\n            sb.append(\"... TRUNCATED\");\n        }\n        return sb.toString();\n    }\n\n    public java.lang.String toString() {\n        java.lang.String labelString = new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString();\n        java.lang.String s = (((((((((org.apache.accumulo.core.data.Key.toPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT) + \" \") + org.apache.accumulo.core.data.Key.toPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT)) + \":\") + org.apache.accumulo.core.data.Key.toPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT)) + \" \") + labelString) + \" \") + java.lang.Long.toString(timestamp)) + \" \") + deleted;\n        return s;\n    }\n\n    public java.lang.String toStringNoTime() {\n        java.lang.String labelString = new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString();\n        java.lang.String s = (((((new java.lang.String(row, 0, row.length) + \" \") + new java.lang.String(colFamily, 0, colFamily.length)) + \":\") + new java.lang.String(colQualifier, 0, colQualifier.length)) + \" \") + labelString;\n        return s;\n    }\n\n    public int getLength() {\n        return ((row.length + colFamily.length) + colQualifier.length) + colVisibility.length;\n    }\n\n    public int getSize() {\n        return getLength();\n    }\n\n    private static boolean isEqual(byte[] a1, byte[] a2) {\n        if (a1 == a2) {\n            return true;\n        }\n        int last = a1.length;\n        if (last != a2.length) {\n            return false;\n        }\n        if (last == 0) {\n            return true;\n        }\n        last--;\n        if (a1[last] == a2[last]) {\n            for (int i = 0; i < last; i++) {\n                if (a1[i] != a2[i]) {\n                    return false;\n                }\n            }\n        } else {\n            return false;\n        }\n        return true;\n    }\n\n    public static java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> compress(java.util.List<? extends org.apache.accumulo.core.data.KeyValue> param) {\n        java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> tkvl = java.util.Arrays.asList(new org.apache.accumulo.core.data.thrift.TKeyValue[param.size()]);\n        if (param.size() > 0) {\n            tkvl.set(0, new org.apache.accumulo.core.data.thrift.TKeyValue(param.get(0).key.toThrift(), java.nio.ByteBuffer.wrap(param.get(0).value)));\n        }\n        for (int i = param.size() - 1; i > 0; i--) {\n            org.apache.accumulo.core.data.Key prevKey = param.get(i - 1).key;\n            org.apache.accumulo.core.data.KeyValue kv = param.get(i);\n            org.apache.accumulo.core.data.Key key = kv.key;\n            org.apache.accumulo.core.data.thrift.TKey newKey = null;\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.row, key.row)) {\n                newKey = key.toThrift();\n                newKey.row = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colFamily, key.colFamily)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colFamily = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colQualifier, key.colQualifier)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colQualifier = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colVisibility, key.colVisibility)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colVisibility = null;\n            }\n            if (newKey == null) {\n                newKey = key.toThrift();\n            }\n            tkvl.set(i, new org.apache.accumulo.core.data.thrift.TKeyValue(newKey, java.nio.ByteBuffer.wrap(kv.value)));\n        }\n        return tkvl;\n    }\n\n    public static void decompress(java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> param) {\n        for (int i = 1; i < param.size(); i++) {\n            org.apache.accumulo.core.data.thrift.TKey prevKey = param.get(i - 1).key;\n            org.apache.accumulo.core.data.thrift.TKey key = param.get(i).key;\n            if (key.row == null) {\n                key.row = prevKey.row;\n            }\n            if (key.colFamily == null) {\n                key.colFamily = prevKey.colFamily;\n            }\n            if (key.colQualifier == null) {\n                key.colQualifier = prevKey.colQualifier;\n            }\n            if (key.colVisibility == null) {\n                key.colVisibility = prevKey.colVisibility;\n            }\n        }\n    }\n\n    byte[] getRowBytes() {\n        return row;\n    }\n\n    byte[] getColFamily() {\n        return colFamily;\n    }\n\n    byte[] getColQualifier() {\n        return colQualifier;\n    }\n\n    byte[] getColVisibility() {\n        return colVisibility;\n    }\n\n    public org.apache.accumulo.core.data.thrift.TKey toThrift() {\n        return new org.apache.accumulo.core.data.thrift.TKey(java.nio.ByteBuffer.wrap(row), java.nio.ByteBuffer.wrap(colFamily), java.nio.ByteBuffer.wrap(colQualifier), java.nio.ByteBuffer.wrap(colVisibility), timestamp);\n    }\n\n    @java.lang.Override\n    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {\n        org.apache.accumulo.core.data.Key r = ((org.apache.accumulo.core.data.Key) (super.clone()));\n        r.row = java.util.Arrays.copyOf(row, row.length);\n        r.colFamily = java.util.Arrays.copyOf(colFamily, colFamily.length);\n        r.colQualifier = java.util.Arrays.copyOf(colQualifier, colQualifier.length);\n        r.colVisibility = java.util.Arrays.copyOf(colVisibility, colVisibility.length);\n        return r;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public java.lang.String toStringNoTime() {\n    java.lang.String labelString = new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString();\n    java.lang.String s = (((((new java.lang.String(row, 0, row.length) + \" \") + new java.lang.String(colFamily, 0, colFamily.length)) + \":\") + new java.lang.String(colQualifier, 0, colQualifier.length)) + \" \") + labelString;\n    return s;\n}",
            "src_parent": "public class Key implements java.lang.Cloneable , org.apache.hadoop.io.WritableComparable<org.apache.accumulo.core.data.Key> {\n    protected byte[] row;\n\n    protected byte[] colFamily;\n\n    protected byte[] colQualifier;\n\n    protected byte[] colVisibility;\n\n    protected long timestamp;\n\n    protected boolean deleted;\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (o instanceof org.apache.accumulo.core.data.Key) {\n            return this.equals(((org.apache.accumulo.core.data.Key) (o)), PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL);\n        }\n        return false;\n    }\n\n    private static final byte[] EMPTY_BYTES = new byte[0];\n\n    private byte[] copyIfNeeded(byte[] ba, int off, int len, boolean copyData) {\n        if (len == 0) {\n            return org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        }\n        if (((!copyData) && (ba.length == len)) && (off == 0)) {\n            return ba;\n        }\n        byte[] copy = new byte[len];\n        java.lang.System.arraycopy(ba, off, copy, 0, len);\n        return copy;\n    }\n\n    private final void init(byte[] r, int rOff, int rLen, byte[] cf, int cfOff, int cfLen, byte[] cq, int cqOff, int cqLen, byte[] cv, int cvOff, int cvLen, long ts, boolean del, boolean copy) {\n        row = copyIfNeeded(r, rOff, rLen, copy);\n        colFamily = copyIfNeeded(cf, cfOff, cfLen, copy);\n        colQualifier = copyIfNeeded(cq, cqOff, cqLen, copy);\n        colVisibility = copyIfNeeded(cv, cvOff, cvLen, copy);\n        timestamp = ts;\n        deleted = del;\n    }\n\n    public Key() {\n        row = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colFamily = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colQualifier = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colVisibility = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        timestamp = java.lang.Long.MAX_VALUE;\n        deleted = false;\n    }\n\n    public Key(org.apache.hadoop.io.Text row) {\n        init(row.getBytes(), 0, row.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, long ts) {\n        this(row);\n        timestamp = ts;\n    }\n\n    public Key(byte[] row, int rOff, int rLen, byte[] cf, int cfOff, int cfLen, byte[] cq, int cqOff, int cqLen, byte[] cv, int cvOff, int cvLen, long ts) {\n        init(row, rOff, rLen, cf, cfOff, cfLen, cq, cqOff, cqLen, cv, cvOff, cvLen, ts, false, true);\n    }\n\n    public Key(byte[] row, byte[] colFamily, byte[] colQualifier, byte[] colVisibility, long timestamp) {\n        this(row, colFamily, colQualifier, colVisibility, timestamp, false, true);\n    }\n\n    public Key(byte[] row, byte[] cf, byte[] cq, byte[] cv, long ts, boolean deleted) {\n        this(row, cf, cq, cv, ts, deleted, true);\n    }\n\n    public Key(byte[] row, byte[] cf, byte[] cq, byte[] cv, long ts, boolean deleted, boolean copy) {\n        init(row, 0, row.length, cf, 0, cf.length, cq, 0, cq.length, cv, 0, cv.length, ts, deleted, copy);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.hadoop.io.Text cv) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), cv.getBytes(), 0, cv.getLength(), java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, long ts) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, ts, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.hadoop.io.Text cv, long ts) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), cv.getBytes(), 0, cv.getLength(), ts, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.accumulo.core.security.ColumnVisibility cv, long ts) {\n        byte[] expr = cv.getExpression();\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), expr, 0, expr.length, ts, false, true);\n    }\n\n    public Key(java.lang.CharSequence row) {\n        this(new org.apache.hadoop.io.Text(row.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, java.lang.CharSequence cv) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), ts);\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, java.lang.CharSequence cv, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.toString()), ts);\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, org.apache.accumulo.core.security.ColumnVisibility cv, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.getExpression()), ts);\n    }\n\n    private byte[] followingArray(byte[] ba) {\n        byte[] fba = new byte[ba.length + 1];\n        java.lang.System.arraycopy(ba, 0, fba, 0, ba.length);\n        fba[ba.length] = ((byte) (0x0));\n        return fba;\n    }\n\n    public org.apache.accumulo.core.data.Key followingKey(org.apache.accumulo.core.data.PartialKey part) {\n        org.apache.accumulo.core.data.Key returnKey = new org.apache.accumulo.core.data.Key();\n        switch (part) {\n            case ROW :\n                returnKey.row = followingArray(row);\n                break;\n            case ROW_COLFAM :\n                returnKey.row = row;\n                returnKey.colFamily = followingArray(colFamily);\n                break;\n            case ROW_COLFAM_COLQUAL :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = followingArray(colQualifier);\n                break;\n            case ROW_COLFAM_COLQUAL_COLVIS :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = colQualifier;\n                returnKey.colVisibility = followingArray(colVisibility);\n                break;\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = colQualifier;\n                returnKey.colVisibility = colVisibility;\n                returnKey.setTimestamp(timestamp - 1);\n                returnKey.deleted = false;\n                break;\n            default :\n                throw new java.lang.IllegalArgumentException((\"Partial key specification \" + part) + \" disallowed\");\n        }\n        return returnKey;\n    }\n\n    public Key(org.apache.accumulo.core.data.Key other) {\n        set(other);\n    }\n\n    public Key(org.apache.accumulo.core.data.thrift.TKey tkey) {\n        this.row = toBytes(tkey.row);\n        this.colFamily = toBytes(tkey.colFamily);\n        this.colQualifier = toBytes(tkey.colQualifier);\n        this.colVisibility = toBytes(tkey.colVisibility);\n        this.timestamp = tkey.timestamp;\n        this.deleted = false;\n    }\n\n    public org.apache.hadoop.io.Text getRow(org.apache.hadoop.io.Text r) {\n        r.set(row, 0, row.length);\n        return r;\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getRowData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(row);\n    }\n\n    public org.apache.hadoop.io.Text getRow() {\n        return getRow(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareRow(org.apache.hadoop.io.Text r) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(row, 0, row.length, r.getBytes(), 0, r.getLength());\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnFamilyData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colFamily);\n    }\n\n    public org.apache.hadoop.io.Text getColumnFamily(org.apache.hadoop.io.Text cf) {\n        cf.set(colFamily, 0, colFamily.length);\n        return cf;\n    }\n\n    public org.apache.hadoop.io.Text getColumnFamily() {\n        return getColumnFamily(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareColumnFamily(org.apache.hadoop.io.Text cf) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(colFamily, 0, colFamily.length, cf.getBytes(), 0, cf.getLength());\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnQualifierData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colQualifier);\n    }\n\n    public org.apache.hadoop.io.Text getColumnQualifier(org.apache.hadoop.io.Text cq) {\n        cq.set(colQualifier, 0, colQualifier.length);\n        return cq;\n    }\n\n    public org.apache.hadoop.io.Text getColumnQualifier() {\n        return getColumnQualifier(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareColumnQualifier(org.apache.hadoop.io.Text cq) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(colQualifier, 0, colQualifier.length, cq.getBytes(), 0, cq.getLength());\n    }\n\n    public void setTimestamp(long ts) {\n        this.timestamp = ts;\n    }\n\n    public long getTimestamp() {\n        return timestamp;\n    }\n\n    public boolean isDeleted() {\n        return deleted;\n    }\n\n    public void setDeleted(boolean deleted) {\n        this.deleted = deleted;\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnVisibilityData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colVisibility);\n    }\n\n    public final org.apache.hadoop.io.Text getColumnVisibility() {\n        return getColumnVisibility(new org.apache.hadoop.io.Text());\n    }\n\n    public final org.apache.hadoop.io.Text getColumnVisibility(org.apache.hadoop.io.Text cv) {\n        cv.set(colVisibility, 0, colVisibility.length);\n        return cv;\n    }\n\n    public void set(org.apache.accumulo.core.data.Key k) {\n        row = k.row;\n        colFamily = k.colFamily;\n        colQualifier = k.colQualifier;\n        colVisibility = k.colVisibility;\n        timestamp = k.timestamp;\n        deleted = k.deleted;\n    }\n\n    public void readFields(java.io.DataInput in) throws java.io.IOException {\n        int colFamilyOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int colQualifierOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int colVisibilityOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int totalLen = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        row = new byte[colFamilyOffset];\n        colFamily = new byte[colQualifierOffset - colFamilyOffset];\n        colQualifier = new byte[colVisibilityOffset - colQualifierOffset];\n        colVisibility = new byte[totalLen - colVisibilityOffset];\n        in.readFully(row);\n        in.readFully(colFamily);\n        in.readFully(colQualifier);\n        in.readFully(colVisibility);\n        timestamp = org.apache.hadoop.io.WritableUtils.readVLong(in);\n        deleted = in.readBoolean();\n    }\n\n    public void write(java.io.DataOutput out) throws java.io.IOException {\n        int colFamilyOffset = row.length;\n        int colQualifierOffset = colFamilyOffset + colFamily.length;\n        int colVisibilityOffset = colQualifierOffset + colQualifier.length;\n        int totalLen = colVisibilityOffset + colVisibility.length;\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colFamilyOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colQualifierOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colVisibilityOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, totalLen);\n        out.write(row);\n        out.write(colFamily);\n        out.write(colQualifier);\n        out.write(colVisibility);\n        org.apache.hadoop.io.WritableUtils.writeVLong(out, timestamp);\n        out.writeBoolean(deleted);\n    }\n\n    public boolean equals(org.apache.accumulo.core.data.Key other, org.apache.accumulo.core.data.PartialKey part) {\n        switch (part) {\n            case ROW :\n                return org.apache.accumulo.core.data.Key.isEqual(row, other.row);\n            case ROW_COLFAM :\n                return org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily);\n            case ROW_COLFAM_COLQUAL :\n                return (org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier);\n            case ROW_COLFAM_COLQUAL_COLVIS :\n                return ((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility);\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME :\n                return (((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility)) && (timestamp == other.timestamp);\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL :\n                return ((((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility)) && (timestamp == other.timestamp)) && (deleted == other.deleted);\n            default :\n                throw new java.lang.IllegalArgumentException(\"Unrecognized partial key specification \" + part);\n        }\n    }\n\n    public int compareTo(org.apache.accumulo.core.data.Key other, org.apache.accumulo.core.data.PartialKey part) {\n        int result = org.apache.hadoop.io.WritableComparator.compareBytes(row, 0, row.length, other.row, 0, other.row.length);\n        if ((result != 0) || part.equals(PartialKey.ROW)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colFamily, 0, colFamily.length, other.colFamily, 0, other.colFamily.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colQualifier, 0, colQualifier.length, other.colQualifier, 0, other.colQualifier.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colVisibility, 0, colVisibility.length, other.colVisibility, 0, other.colVisibility.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL_COLVIS)) {\n            return result;\n        }\n        if (timestamp < other.timestamp) {\n            result = 1;\n        } else if (timestamp > other.timestamp) {\n            result = -1;\n        } else {\n            result = 0;\n        }\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME)) {\n            return result;\n        }\n        if (deleted) {\n            result = (other.deleted) ? 0 : -1;\n        } else {\n            result = (other.deleted) ? 1 : 0;\n        }\n        return result;\n    }\n\n    public int compareTo(org.apache.accumulo.core.data.Key other) {\n        return compareTo(other, PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL);\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return ((org.apache.hadoop.io.WritableComparator.hashBytes(row, row.length) + org.apache.hadoop.io.WritableComparator.hashBytes(colFamily, colFamily.length)) + org.apache.hadoop.io.WritableComparator.hashBytes(colQualifier, colQualifier.length)) + org.apache.hadoop.io.WritableComparator.hashBytes(colVisibility, colVisibility.length);\n    }\n\n    public static java.lang.String toPrintableString(byte[] ba, int offset, int len, int maxLen) {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        int plen = java.lang.Math.min(len, maxLen);\n        for (int i = 0; i < plen; i++) {\n            int c = 0xff & ba[offset + i];\n            if ((c >= 32) && (c <= 126)) {\n                sb.append(((char) (c)));\n            } else {\n                sb.append(\"%\" + java.lang.String.format(\"%02x;\", c));\n            }\n        }\n        if (len > maxLen) {\n            sb.append(\"... TRUNCATED\");\n        }\n        return sb.toString();\n    }\n\n    public java.lang.String toString() {\n        java.lang.String labelString = new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString();\n        java.lang.String s = (((((((((org.apache.accumulo.core.data.Key.toPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT) + \" \") + org.apache.accumulo.core.data.Key.toPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT)) + \":\") + org.apache.accumulo.core.data.Key.toPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT)) + \" \") + labelString) + \" \") + java.lang.Long.toString(timestamp)) + \" \") + deleted;\n        return s;\n    }\n\n    public java.lang.String toStringNoTime() {\n        java.lang.String labelString = new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString();\n        java.lang.String s = (((((new java.lang.String(row, 0, row.length) + \" \") + new java.lang.String(colFamily, 0, colFamily.length)) + \":\") + new java.lang.String(colQualifier, 0, colQualifier.length)) + \" \") + labelString;\n        return s;\n    }\n\n    public int getLength() {\n        return ((row.length + colFamily.length) + colQualifier.length) + colVisibility.length;\n    }\n\n    public int getSize() {\n        return getLength();\n    }\n\n    private static boolean isEqual(byte[] a1, byte[] a2) {\n        if (a1 == a2) {\n            return true;\n        }\n        int last = a1.length;\n        if (last != a2.length) {\n            return false;\n        }\n        if (last == 0) {\n            return true;\n        }\n        last--;\n        if (a1[last] == a2[last]) {\n            for (int i = 0; i < last; i++) {\n                if (a1[i] != a2[i]) {\n                    return false;\n                }\n            }\n        } else {\n            return false;\n        }\n        return true;\n    }\n\n    public static java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> compress(java.util.List<? extends org.apache.accumulo.core.data.KeyValue> param) {\n        java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> tkvl = java.util.Arrays.asList(new org.apache.accumulo.core.data.thrift.TKeyValue[param.size()]);\n        if (param.size() > 0) {\n            tkvl.set(0, new org.apache.accumulo.core.data.thrift.TKeyValue(param.get(0).key.toThrift(), java.nio.ByteBuffer.wrap(param.get(0).value)));\n        }\n        for (int i = param.size() - 1; i > 0; i--) {\n            org.apache.accumulo.core.data.Key prevKey = param.get(i - 1).key;\n            org.apache.accumulo.core.data.KeyValue kv = param.get(i);\n            org.apache.accumulo.core.data.Key key = kv.key;\n            org.apache.accumulo.core.data.thrift.TKey newKey = null;\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.row, key.row)) {\n                newKey = key.toThrift();\n                newKey.row = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colFamily, key.colFamily)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colFamily = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colQualifier, key.colQualifier)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colQualifier = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colVisibility, key.colVisibility)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colVisibility = null;\n            }\n            if (newKey == null) {\n                newKey = key.toThrift();\n            }\n            tkvl.set(i, new org.apache.accumulo.core.data.thrift.TKeyValue(newKey, java.nio.ByteBuffer.wrap(kv.value)));\n        }\n        return tkvl;\n    }\n\n    public static void decompress(java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> param) {\n        for (int i = 1; i < param.size(); i++) {\n            org.apache.accumulo.core.data.thrift.TKey prevKey = param.get(i - 1).key;\n            org.apache.accumulo.core.data.thrift.TKey key = param.get(i).key;\n            if (key.row == null) {\n                key.row = prevKey.row;\n            }\n            if (key.colFamily == null) {\n                key.colFamily = prevKey.colFamily;\n            }\n            if (key.colQualifier == null) {\n                key.colQualifier = prevKey.colQualifier;\n            }\n            if (key.colVisibility == null) {\n                key.colVisibility = prevKey.colVisibility;\n            }\n        }\n    }\n\n    byte[] getRowBytes() {\n        return row;\n    }\n\n    byte[] getColFamily() {\n        return colFamily;\n    }\n\n    byte[] getColQualifier() {\n        return colQualifier;\n    }\n\n    byte[] getColVisibility() {\n        return colVisibility;\n    }\n\n    public org.apache.accumulo.core.data.thrift.TKey toThrift() {\n        return new org.apache.accumulo.core.data.thrift.TKey(java.nio.ByteBuffer.wrap(row), java.nio.ByteBuffer.wrap(colFamily), java.nio.ByteBuffer.wrap(colQualifier), java.nio.ByteBuffer.wrap(colVisibility), timestamp);\n    }\n\n    @java.lang.Override\n    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {\n        org.apache.accumulo.core.data.Key r = ((org.apache.accumulo.core.data.Key) (super.clone()));\n        r.row = java.util.Arrays.copyOf(row, row.length);\n        r.colFamily = java.util.Arrays.copyOf(colFamily, colFamily.length);\n        r.colQualifier = java.util.Arrays.copyOf(colQualifier, colQualifier.length);\n        r.colVisibility = java.util.Arrays.copyOf(colVisibility, colVisibility.length);\n        return r;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public static java.lang.String toPrintableString(byte[] ba, int offset, int len, int maxLen) {\n    return org.apache.accumulo.core.data.Key.appendPrintableString(ba, offset, len, maxLen, new java.lang.StringBuilder()).toString();\n}",
            "src_parent": "public class Key implements java.lang.Cloneable , org.apache.hadoop.io.WritableComparable<org.apache.accumulo.core.data.Key> {\n    protected byte[] row;\n\n    protected byte[] colFamily;\n\n    protected byte[] colQualifier;\n\n    protected byte[] colVisibility;\n\n    protected long timestamp;\n\n    protected boolean deleted;\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (o instanceof org.apache.accumulo.core.data.Key) {\n            return this.equals(((org.apache.accumulo.core.data.Key) (o)), PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL);\n        }\n        return false;\n    }\n\n    private static final byte[] EMPTY_BYTES = new byte[0];\n\n    private byte[] copyIfNeeded(byte[] ba, int off, int len, boolean copyData) {\n        if (len == 0) {\n            return org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        }\n        if (((!copyData) && (ba.length == len)) && (off == 0)) {\n            return ba;\n        }\n        byte[] copy = new byte[len];\n        java.lang.System.arraycopy(ba, off, copy, 0, len);\n        return copy;\n    }\n\n    private final void init(byte[] r, int rOff, int rLen, byte[] cf, int cfOff, int cfLen, byte[] cq, int cqOff, int cqLen, byte[] cv, int cvOff, int cvLen, long ts, boolean del, boolean copy) {\n        row = copyIfNeeded(r, rOff, rLen, copy);\n        colFamily = copyIfNeeded(cf, cfOff, cfLen, copy);\n        colQualifier = copyIfNeeded(cq, cqOff, cqLen, copy);\n        colVisibility = copyIfNeeded(cv, cvOff, cvLen, copy);\n        timestamp = ts;\n        deleted = del;\n    }\n\n    public Key() {\n        row = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colFamily = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colQualifier = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colVisibility = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        timestamp = java.lang.Long.MAX_VALUE;\n        deleted = false;\n    }\n\n    public Key(org.apache.hadoop.io.Text row) {\n        init(row.getBytes(), 0, row.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, long ts) {\n        this(row);\n        timestamp = ts;\n    }\n\n    public Key(byte[] row, int rOff, int rLen, byte[] cf, int cfOff, int cfLen, byte[] cq, int cqOff, int cqLen, byte[] cv, int cvOff, int cvLen, long ts) {\n        init(row, rOff, rLen, cf, cfOff, cfLen, cq, cqOff, cqLen, cv, cvOff, cvLen, ts, false, true);\n    }\n\n    public Key(byte[] row, byte[] colFamily, byte[] colQualifier, byte[] colVisibility, long timestamp) {\n        this(row, colFamily, colQualifier, colVisibility, timestamp, false, true);\n    }\n\n    public Key(byte[] row, byte[] cf, byte[] cq, byte[] cv, long ts, boolean deleted) {\n        this(row, cf, cq, cv, ts, deleted, true);\n    }\n\n    public Key(byte[] row, byte[] cf, byte[] cq, byte[] cv, long ts, boolean deleted, boolean copy) {\n        init(row, 0, row.length, cf, 0, cf.length, cq, 0, cq.length, cv, 0, cv.length, ts, deleted, copy);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.hadoop.io.Text cv) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), cv.getBytes(), 0, cv.getLength(), java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, long ts) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, ts, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.hadoop.io.Text cv, long ts) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), cv.getBytes(), 0, cv.getLength(), ts, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.accumulo.core.security.ColumnVisibility cv, long ts) {\n        byte[] expr = cv.getExpression();\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), expr, 0, expr.length, ts, false, true);\n    }\n\n    public Key(java.lang.CharSequence row) {\n        this(new org.apache.hadoop.io.Text(row.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, java.lang.CharSequence cv) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), ts);\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, java.lang.CharSequence cv, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.toString()), ts);\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, org.apache.accumulo.core.security.ColumnVisibility cv, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.getExpression()), ts);\n    }\n\n    private byte[] followingArray(byte[] ba) {\n        byte[] fba = new byte[ba.length + 1];\n        java.lang.System.arraycopy(ba, 0, fba, 0, ba.length);\n        fba[ba.length] = ((byte) (0x0));\n        return fba;\n    }\n\n    public org.apache.accumulo.core.data.Key followingKey(org.apache.accumulo.core.data.PartialKey part) {\n        org.apache.accumulo.core.data.Key returnKey = new org.apache.accumulo.core.data.Key();\n        switch (part) {\n            case ROW :\n                returnKey.row = followingArray(row);\n                break;\n            case ROW_COLFAM :\n                returnKey.row = row;\n                returnKey.colFamily = followingArray(colFamily);\n                break;\n            case ROW_COLFAM_COLQUAL :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = followingArray(colQualifier);\n                break;\n            case ROW_COLFAM_COLQUAL_COLVIS :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = colQualifier;\n                returnKey.colVisibility = followingArray(colVisibility);\n                break;\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = colQualifier;\n                returnKey.colVisibility = colVisibility;\n                returnKey.setTimestamp(timestamp - 1);\n                returnKey.deleted = false;\n                break;\n            default :\n                throw new java.lang.IllegalArgumentException((\"Partial key specification \" + part) + \" disallowed\");\n        }\n        return returnKey;\n    }\n\n    public Key(org.apache.accumulo.core.data.Key other) {\n        set(other);\n    }\n\n    public Key(org.apache.accumulo.core.data.thrift.TKey tkey) {\n        this.row = toBytes(tkey.row);\n        this.colFamily = toBytes(tkey.colFamily);\n        this.colQualifier = toBytes(tkey.colQualifier);\n        this.colVisibility = toBytes(tkey.colVisibility);\n        this.timestamp = tkey.timestamp;\n        this.deleted = false;\n    }\n\n    public org.apache.hadoop.io.Text getRow(org.apache.hadoop.io.Text r) {\n        r.set(row, 0, row.length);\n        return r;\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getRowData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(row);\n    }\n\n    public org.apache.hadoop.io.Text getRow() {\n        return getRow(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareRow(org.apache.hadoop.io.Text r) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(row, 0, row.length, r.getBytes(), 0, r.getLength());\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnFamilyData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colFamily);\n    }\n\n    public org.apache.hadoop.io.Text getColumnFamily(org.apache.hadoop.io.Text cf) {\n        cf.set(colFamily, 0, colFamily.length);\n        return cf;\n    }\n\n    public org.apache.hadoop.io.Text getColumnFamily() {\n        return getColumnFamily(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareColumnFamily(org.apache.hadoop.io.Text cf) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(colFamily, 0, colFamily.length, cf.getBytes(), 0, cf.getLength());\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnQualifierData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colQualifier);\n    }\n\n    public org.apache.hadoop.io.Text getColumnQualifier(org.apache.hadoop.io.Text cq) {\n        cq.set(colQualifier, 0, colQualifier.length);\n        return cq;\n    }\n\n    public org.apache.hadoop.io.Text getColumnQualifier() {\n        return getColumnQualifier(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareColumnQualifier(org.apache.hadoop.io.Text cq) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(colQualifier, 0, colQualifier.length, cq.getBytes(), 0, cq.getLength());\n    }\n\n    public void setTimestamp(long ts) {\n        this.timestamp = ts;\n    }\n\n    public long getTimestamp() {\n        return timestamp;\n    }\n\n    public boolean isDeleted() {\n        return deleted;\n    }\n\n    public void setDeleted(boolean deleted) {\n        this.deleted = deleted;\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnVisibilityData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colVisibility);\n    }\n\n    public final org.apache.hadoop.io.Text getColumnVisibility() {\n        return getColumnVisibility(new org.apache.hadoop.io.Text());\n    }\n\n    public final org.apache.hadoop.io.Text getColumnVisibility(org.apache.hadoop.io.Text cv) {\n        cv.set(colVisibility, 0, colVisibility.length);\n        return cv;\n    }\n\n    public void set(org.apache.accumulo.core.data.Key k) {\n        row = k.row;\n        colFamily = k.colFamily;\n        colQualifier = k.colQualifier;\n        colVisibility = k.colVisibility;\n        timestamp = k.timestamp;\n        deleted = k.deleted;\n    }\n\n    public void readFields(java.io.DataInput in) throws java.io.IOException {\n        int colFamilyOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int colQualifierOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int colVisibilityOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int totalLen = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        row = new byte[colFamilyOffset];\n        colFamily = new byte[colQualifierOffset - colFamilyOffset];\n        colQualifier = new byte[colVisibilityOffset - colQualifierOffset];\n        colVisibility = new byte[totalLen - colVisibilityOffset];\n        in.readFully(row);\n        in.readFully(colFamily);\n        in.readFully(colQualifier);\n        in.readFully(colVisibility);\n        timestamp = org.apache.hadoop.io.WritableUtils.readVLong(in);\n        deleted = in.readBoolean();\n    }\n\n    public void write(java.io.DataOutput out) throws java.io.IOException {\n        int colFamilyOffset = row.length;\n        int colQualifierOffset = colFamilyOffset + colFamily.length;\n        int colVisibilityOffset = colQualifierOffset + colQualifier.length;\n        int totalLen = colVisibilityOffset + colVisibility.length;\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colFamilyOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colQualifierOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colVisibilityOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, totalLen);\n        out.write(row);\n        out.write(colFamily);\n        out.write(colQualifier);\n        out.write(colVisibility);\n        org.apache.hadoop.io.WritableUtils.writeVLong(out, timestamp);\n        out.writeBoolean(deleted);\n    }\n\n    public boolean equals(org.apache.accumulo.core.data.Key other, org.apache.accumulo.core.data.PartialKey part) {\n        switch (part) {\n            case ROW :\n                return org.apache.accumulo.core.data.Key.isEqual(row, other.row);\n            case ROW_COLFAM :\n                return org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily);\n            case ROW_COLFAM_COLQUAL :\n                return (org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier);\n            case ROW_COLFAM_COLQUAL_COLVIS :\n                return ((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility);\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME :\n                return (((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility)) && (timestamp == other.timestamp);\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL :\n                return ((((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility)) && (timestamp == other.timestamp)) && (deleted == other.deleted);\n            default :\n                throw new java.lang.IllegalArgumentException(\"Unrecognized partial key specification \" + part);\n        }\n    }\n\n    public int compareTo(org.apache.accumulo.core.data.Key other, org.apache.accumulo.core.data.PartialKey part) {\n        int result = org.apache.hadoop.io.WritableComparator.compareBytes(row, 0, row.length, other.row, 0, other.row.length);\n        if ((result != 0) || part.equals(PartialKey.ROW)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colFamily, 0, colFamily.length, other.colFamily, 0, other.colFamily.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colQualifier, 0, colQualifier.length, other.colQualifier, 0, other.colQualifier.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colVisibility, 0, colVisibility.length, other.colVisibility, 0, other.colVisibility.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL_COLVIS)) {\n            return result;\n        }\n        if (timestamp < other.timestamp) {\n            result = 1;\n        } else if (timestamp > other.timestamp) {\n            result = -1;\n        } else {\n            result = 0;\n        }\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME)) {\n            return result;\n        }\n        if (deleted) {\n            result = (other.deleted) ? 0 : -1;\n        } else {\n            result = (other.deleted) ? 1 : 0;\n        }\n        return result;\n    }\n\n    public int compareTo(org.apache.accumulo.core.data.Key other) {\n        return compareTo(other, PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL);\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return ((org.apache.hadoop.io.WritableComparator.hashBytes(row, row.length) + org.apache.hadoop.io.WritableComparator.hashBytes(colFamily, colFamily.length)) + org.apache.hadoop.io.WritableComparator.hashBytes(colQualifier, colQualifier.length)) + org.apache.hadoop.io.WritableComparator.hashBytes(colVisibility, colVisibility.length);\n    }\n\n    public static java.lang.String toPrintableString(byte[] ba, int offset, int len, int maxLen) {\n        return org.apache.accumulo.core.data.Key.appendPrintableString(ba, offset, len, maxLen, new java.lang.StringBuilder()).toString();\n    }\n\n    public static java.lang.StringBuilder appendPrintableString(byte[] ba, int offset, int len, int maxLen, java.lang.StringBuilder sb) {\n        int plen = java.lang.Math.min(len, maxLen);\n        for (int i = 0; i < plen; i++) {\n            int c = 0xff & ba[offset + i];\n            if ((c >= 32) && (c <= 126)) {\n                sb.append(((char) (c)));\n            } else {\n                sb.append(\"%\" + java.lang.String.format(\"%02x;\", c));\n            }\n        }\n        if (len > maxLen) {\n            sb.append(\"... TRUNCATED\");\n        }\n        return sb;\n    }\n\n    private java.lang.StringBuilder rowColumnStringBuilder() {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        org.apache.accumulo.core.data.Key.appendPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT, sb);\n        sb.append(\" \");\n        org.apache.accumulo.core.data.Key.appendPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT, sb);\n        sb.append(\":\");\n        org.apache.accumulo.core.data.Key.appendPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT, sb);\n        sb.append(\" [\");\n        org.apache.accumulo.core.data.Key.appendPrintableString(colVisibility, 0, colVisibility.length, Constants.MAX_DATA_TO_PRINT, sb);\n        sb.append(\"]\");\n        return sb;\n    }\n\n    public java.lang.String toString() {\n        java.lang.StringBuilder sb = rowColumnStringBuilder();\n        sb.append(\" \");\n        sb.append(java.lang.Long.toString(timestamp));\n        sb.append(\" \");\n        sb.append(deleted);\n        return sb.toString();\n    }\n\n    public java.lang.String toStringNoTime() {\n        return rowColumnStringBuilder().toString();\n    }\n\n    public int getLength() {\n        return ((row.length + colFamily.length) + colQualifier.length) + colVisibility.length;\n    }\n\n    public int getSize() {\n        return getLength();\n    }\n\n    private static boolean isEqual(byte[] a1, byte[] a2) {\n        if (a1 == a2) {\n            return true;\n        }\n        int last = a1.length;\n        if (last != a2.length) {\n            return false;\n        }\n        if (last == 0) {\n            return true;\n        }\n        last--;\n        if (a1[last] == a2[last]) {\n            for (int i = 0; i < last; i++) {\n                if (a1[i] != a2[i]) {\n                    return false;\n                }\n            }\n        } else {\n            return false;\n        }\n        return true;\n    }\n\n    public static java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> compress(java.util.List<? extends org.apache.accumulo.core.data.KeyValue> param) {\n        java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> tkvl = java.util.Arrays.asList(new org.apache.accumulo.core.data.thrift.TKeyValue[param.size()]);\n        if (param.size() > 0) {\n            tkvl.set(0, new org.apache.accumulo.core.data.thrift.TKeyValue(param.get(0).key.toThrift(), java.nio.ByteBuffer.wrap(param.get(0).value)));\n        }\n        for (int i = param.size() - 1; i > 0; i--) {\n            org.apache.accumulo.core.data.Key prevKey = param.get(i - 1).key;\n            org.apache.accumulo.core.data.KeyValue kv = param.get(i);\n            org.apache.accumulo.core.data.Key key = kv.key;\n            org.apache.accumulo.core.data.thrift.TKey newKey = null;\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.row, key.row)) {\n                newKey = key.toThrift();\n                newKey.row = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colFamily, key.colFamily)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colFamily = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colQualifier, key.colQualifier)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colQualifier = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colVisibility, key.colVisibility)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colVisibility = null;\n            }\n            if (newKey == null) {\n                newKey = key.toThrift();\n            }\n            tkvl.set(i, new org.apache.accumulo.core.data.thrift.TKeyValue(newKey, java.nio.ByteBuffer.wrap(kv.value)));\n        }\n        return tkvl;\n    }\n\n    public static void decompress(java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> param) {\n        for (int i = 1; i < param.size(); i++) {\n            org.apache.accumulo.core.data.thrift.TKey prevKey = param.get(i - 1).key;\n            org.apache.accumulo.core.data.thrift.TKey key = param.get(i).key;\n            if (key.row == null) {\n                key.row = prevKey.row;\n            }\n            if (key.colFamily == null) {\n                key.colFamily = prevKey.colFamily;\n            }\n            if (key.colQualifier == null) {\n                key.colQualifier = prevKey.colQualifier;\n            }\n            if (key.colVisibility == null) {\n                key.colVisibility = prevKey.colVisibility;\n            }\n        }\n    }\n\n    byte[] getRowBytes() {\n        return row;\n    }\n\n    byte[] getColFamily() {\n        return colFamily;\n    }\n\n    byte[] getColQualifier() {\n        return colQualifier;\n    }\n\n    byte[] getColVisibility() {\n        return colVisibility;\n    }\n\n    public org.apache.accumulo.core.data.thrift.TKey toThrift() {\n        return new org.apache.accumulo.core.data.thrift.TKey(java.nio.ByteBuffer.wrap(row), java.nio.ByteBuffer.wrap(colFamily), java.nio.ByteBuffer.wrap(colQualifier), java.nio.ByteBuffer.wrap(colVisibility), timestamp);\n    }\n\n    @java.lang.Override\n    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {\n        org.apache.accumulo.core.data.Key r = ((org.apache.accumulo.core.data.Key) (super.clone()));\n        r.row = java.util.Arrays.copyOf(row, row.length);\n        r.colFamily = java.util.Arrays.copyOf(colFamily, colFamily.length);\n        r.colQualifier = java.util.Arrays.copyOf(colQualifier, colQualifier.length);\n        r.colVisibility = java.util.Arrays.copyOf(colVisibility, colVisibility.length);\n        return r;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private java.lang.StringBuilder rowColumnStringBuilder() {\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    org.apache.accumulo.core.data.Key.appendPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\" \");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\":\");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\" [\");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colVisibility, 0, colVisibility.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\"]\");\n    return sb;\n}",
            "src_parent": "public class Key implements java.lang.Cloneable , org.apache.hadoop.io.WritableComparable<org.apache.accumulo.core.data.Key> {\n    protected byte[] row;\n\n    protected byte[] colFamily;\n\n    protected byte[] colQualifier;\n\n    protected byte[] colVisibility;\n\n    protected long timestamp;\n\n    protected boolean deleted;\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (o instanceof org.apache.accumulo.core.data.Key) {\n            return this.equals(((org.apache.accumulo.core.data.Key) (o)), PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL);\n        }\n        return false;\n    }\n\n    private static final byte[] EMPTY_BYTES = new byte[0];\n\n    private byte[] copyIfNeeded(byte[] ba, int off, int len, boolean copyData) {\n        if (len == 0) {\n            return org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        }\n        if (((!copyData) && (ba.length == len)) && (off == 0)) {\n            return ba;\n        }\n        byte[] copy = new byte[len];\n        java.lang.System.arraycopy(ba, off, copy, 0, len);\n        return copy;\n    }\n\n    private final void init(byte[] r, int rOff, int rLen, byte[] cf, int cfOff, int cfLen, byte[] cq, int cqOff, int cqLen, byte[] cv, int cvOff, int cvLen, long ts, boolean del, boolean copy) {\n        row = copyIfNeeded(r, rOff, rLen, copy);\n        colFamily = copyIfNeeded(cf, cfOff, cfLen, copy);\n        colQualifier = copyIfNeeded(cq, cqOff, cqLen, copy);\n        colVisibility = copyIfNeeded(cv, cvOff, cvLen, copy);\n        timestamp = ts;\n        deleted = del;\n    }\n\n    public Key() {\n        row = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colFamily = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colQualifier = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colVisibility = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        timestamp = java.lang.Long.MAX_VALUE;\n        deleted = false;\n    }\n\n    public Key(org.apache.hadoop.io.Text row) {\n        init(row.getBytes(), 0, row.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, long ts) {\n        this(row);\n        timestamp = ts;\n    }\n\n    public Key(byte[] row, int rOff, int rLen, byte[] cf, int cfOff, int cfLen, byte[] cq, int cqOff, int cqLen, byte[] cv, int cvOff, int cvLen, long ts) {\n        init(row, rOff, rLen, cf, cfOff, cfLen, cq, cqOff, cqLen, cv, cvOff, cvLen, ts, false, true);\n    }\n\n    public Key(byte[] row, byte[] colFamily, byte[] colQualifier, byte[] colVisibility, long timestamp) {\n        this(row, colFamily, colQualifier, colVisibility, timestamp, false, true);\n    }\n\n    public Key(byte[] row, byte[] cf, byte[] cq, byte[] cv, long ts, boolean deleted) {\n        this(row, cf, cq, cv, ts, deleted, true);\n    }\n\n    public Key(byte[] row, byte[] cf, byte[] cq, byte[] cv, long ts, boolean deleted, boolean copy) {\n        init(row, 0, row.length, cf, 0, cf.length, cq, 0, cq.length, cv, 0, cv.length, ts, deleted, copy);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.hadoop.io.Text cv) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), cv.getBytes(), 0, cv.getLength(), java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, long ts) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, ts, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.hadoop.io.Text cv, long ts) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), cv.getBytes(), 0, cv.getLength(), ts, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.accumulo.core.security.ColumnVisibility cv, long ts) {\n        byte[] expr = cv.getExpression();\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), expr, 0, expr.length, ts, false, true);\n    }\n\n    public Key(java.lang.CharSequence row) {\n        this(new org.apache.hadoop.io.Text(row.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, java.lang.CharSequence cv) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), ts);\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, java.lang.CharSequence cv, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.toString()), ts);\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, org.apache.accumulo.core.security.ColumnVisibility cv, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.getExpression()), ts);\n    }\n\n    private byte[] followingArray(byte[] ba) {\n        byte[] fba = new byte[ba.length + 1];\n        java.lang.System.arraycopy(ba, 0, fba, 0, ba.length);\n        fba[ba.length] = ((byte) (0x0));\n        return fba;\n    }\n\n    public org.apache.accumulo.core.data.Key followingKey(org.apache.accumulo.core.data.PartialKey part) {\n        org.apache.accumulo.core.data.Key returnKey = new org.apache.accumulo.core.data.Key();\n        switch (part) {\n            case ROW :\n                returnKey.row = followingArray(row);\n                break;\n            case ROW_COLFAM :\n                returnKey.row = row;\n                returnKey.colFamily = followingArray(colFamily);\n                break;\n            case ROW_COLFAM_COLQUAL :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = followingArray(colQualifier);\n                break;\n            case ROW_COLFAM_COLQUAL_COLVIS :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = colQualifier;\n                returnKey.colVisibility = followingArray(colVisibility);\n                break;\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = colQualifier;\n                returnKey.colVisibility = colVisibility;\n                returnKey.setTimestamp(timestamp - 1);\n                returnKey.deleted = false;\n                break;\n            default :\n                throw new java.lang.IllegalArgumentException((\"Partial key specification \" + part) + \" disallowed\");\n        }\n        return returnKey;\n    }\n\n    public Key(org.apache.accumulo.core.data.Key other) {\n        set(other);\n    }\n\n    public Key(org.apache.accumulo.core.data.thrift.TKey tkey) {\n        this.row = toBytes(tkey.row);\n        this.colFamily = toBytes(tkey.colFamily);\n        this.colQualifier = toBytes(tkey.colQualifier);\n        this.colVisibility = toBytes(tkey.colVisibility);\n        this.timestamp = tkey.timestamp;\n        this.deleted = false;\n    }\n\n    public org.apache.hadoop.io.Text getRow(org.apache.hadoop.io.Text r) {\n        r.set(row, 0, row.length);\n        return r;\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getRowData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(row);\n    }\n\n    public org.apache.hadoop.io.Text getRow() {\n        return getRow(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareRow(org.apache.hadoop.io.Text r) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(row, 0, row.length, r.getBytes(), 0, r.getLength());\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnFamilyData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colFamily);\n    }\n\n    public org.apache.hadoop.io.Text getColumnFamily(org.apache.hadoop.io.Text cf) {\n        cf.set(colFamily, 0, colFamily.length);\n        return cf;\n    }\n\n    public org.apache.hadoop.io.Text getColumnFamily() {\n        return getColumnFamily(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareColumnFamily(org.apache.hadoop.io.Text cf) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(colFamily, 0, colFamily.length, cf.getBytes(), 0, cf.getLength());\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnQualifierData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colQualifier);\n    }\n\n    public org.apache.hadoop.io.Text getColumnQualifier(org.apache.hadoop.io.Text cq) {\n        cq.set(colQualifier, 0, colQualifier.length);\n        return cq;\n    }\n\n    public org.apache.hadoop.io.Text getColumnQualifier() {\n        return getColumnQualifier(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareColumnQualifier(org.apache.hadoop.io.Text cq) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(colQualifier, 0, colQualifier.length, cq.getBytes(), 0, cq.getLength());\n    }\n\n    public void setTimestamp(long ts) {\n        this.timestamp = ts;\n    }\n\n    public long getTimestamp() {\n        return timestamp;\n    }\n\n    public boolean isDeleted() {\n        return deleted;\n    }\n\n    public void setDeleted(boolean deleted) {\n        this.deleted = deleted;\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnVisibilityData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colVisibility);\n    }\n\n    public final org.apache.hadoop.io.Text getColumnVisibility() {\n        return getColumnVisibility(new org.apache.hadoop.io.Text());\n    }\n\n    public final org.apache.hadoop.io.Text getColumnVisibility(org.apache.hadoop.io.Text cv) {\n        cv.set(colVisibility, 0, colVisibility.length);\n        return cv;\n    }\n\n    public void set(org.apache.accumulo.core.data.Key k) {\n        row = k.row;\n        colFamily = k.colFamily;\n        colQualifier = k.colQualifier;\n        colVisibility = k.colVisibility;\n        timestamp = k.timestamp;\n        deleted = k.deleted;\n    }\n\n    public void readFields(java.io.DataInput in) throws java.io.IOException {\n        int colFamilyOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int colQualifierOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int colVisibilityOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int totalLen = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        row = new byte[colFamilyOffset];\n        colFamily = new byte[colQualifierOffset - colFamilyOffset];\n        colQualifier = new byte[colVisibilityOffset - colQualifierOffset];\n        colVisibility = new byte[totalLen - colVisibilityOffset];\n        in.readFully(row);\n        in.readFully(colFamily);\n        in.readFully(colQualifier);\n        in.readFully(colVisibility);\n        timestamp = org.apache.hadoop.io.WritableUtils.readVLong(in);\n        deleted = in.readBoolean();\n    }\n\n    public void write(java.io.DataOutput out) throws java.io.IOException {\n        int colFamilyOffset = row.length;\n        int colQualifierOffset = colFamilyOffset + colFamily.length;\n        int colVisibilityOffset = colQualifierOffset + colQualifier.length;\n        int totalLen = colVisibilityOffset + colVisibility.length;\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colFamilyOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colQualifierOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colVisibilityOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, totalLen);\n        out.write(row);\n        out.write(colFamily);\n        out.write(colQualifier);\n        out.write(colVisibility);\n        org.apache.hadoop.io.WritableUtils.writeVLong(out, timestamp);\n        out.writeBoolean(deleted);\n    }\n\n    public boolean equals(org.apache.accumulo.core.data.Key other, org.apache.accumulo.core.data.PartialKey part) {\n        switch (part) {\n            case ROW :\n                return org.apache.accumulo.core.data.Key.isEqual(row, other.row);\n            case ROW_COLFAM :\n                return org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily);\n            case ROW_COLFAM_COLQUAL :\n                return (org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier);\n            case ROW_COLFAM_COLQUAL_COLVIS :\n                return ((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility);\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME :\n                return (((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility)) && (timestamp == other.timestamp);\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL :\n                return ((((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility)) && (timestamp == other.timestamp)) && (deleted == other.deleted);\n            default :\n                throw new java.lang.IllegalArgumentException(\"Unrecognized partial key specification \" + part);\n        }\n    }\n\n    public int compareTo(org.apache.accumulo.core.data.Key other, org.apache.accumulo.core.data.PartialKey part) {\n        int result = org.apache.hadoop.io.WritableComparator.compareBytes(row, 0, row.length, other.row, 0, other.row.length);\n        if ((result != 0) || part.equals(PartialKey.ROW)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colFamily, 0, colFamily.length, other.colFamily, 0, other.colFamily.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colQualifier, 0, colQualifier.length, other.colQualifier, 0, other.colQualifier.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colVisibility, 0, colVisibility.length, other.colVisibility, 0, other.colVisibility.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL_COLVIS)) {\n            return result;\n        }\n        if (timestamp < other.timestamp) {\n            result = 1;\n        } else if (timestamp > other.timestamp) {\n            result = -1;\n        } else {\n            result = 0;\n        }\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME)) {\n            return result;\n        }\n        if (deleted) {\n            result = (other.deleted) ? 0 : -1;\n        } else {\n            result = (other.deleted) ? 1 : 0;\n        }\n        return result;\n    }\n\n    public int compareTo(org.apache.accumulo.core.data.Key other) {\n        return compareTo(other, PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL);\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return ((org.apache.hadoop.io.WritableComparator.hashBytes(row, row.length) + org.apache.hadoop.io.WritableComparator.hashBytes(colFamily, colFamily.length)) + org.apache.hadoop.io.WritableComparator.hashBytes(colQualifier, colQualifier.length)) + org.apache.hadoop.io.WritableComparator.hashBytes(colVisibility, colVisibility.length);\n    }\n\n    public static java.lang.String toPrintableString(byte[] ba, int offset, int len, int maxLen) {\n        return org.apache.accumulo.core.data.Key.appendPrintableString(ba, offset, len, maxLen, new java.lang.StringBuilder()).toString();\n    }\n\n    public static java.lang.StringBuilder appendPrintableString(byte[] ba, int offset, int len, int maxLen, java.lang.StringBuilder sb) {\n        int plen = java.lang.Math.min(len, maxLen);\n        for (int i = 0; i < plen; i++) {\n            int c = 0xff & ba[offset + i];\n            if ((c >= 32) && (c <= 126)) {\n                sb.append(((char) (c)));\n            } else {\n                sb.append(\"%\" + java.lang.String.format(\"%02x;\", c));\n            }\n        }\n        if (len > maxLen) {\n            sb.append(\"... TRUNCATED\");\n        }\n        return sb;\n    }\n\n    private java.lang.StringBuilder rowColumnStringBuilder() {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        org.apache.accumulo.core.data.Key.appendPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT, sb);\n        sb.append(\" \");\n        org.apache.accumulo.core.data.Key.appendPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT, sb);\n        sb.append(\":\");\n        org.apache.accumulo.core.data.Key.appendPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT, sb);\n        sb.append(\" [\");\n        org.apache.accumulo.core.data.Key.appendPrintableString(colVisibility, 0, colVisibility.length, Constants.MAX_DATA_TO_PRINT, sb);\n        sb.append(\"]\");\n        return sb;\n    }\n\n    public java.lang.String toString() {\n        java.lang.StringBuilder sb = rowColumnStringBuilder();\n        sb.append(\" \");\n        sb.append(java.lang.Long.toString(timestamp));\n        sb.append(\" \");\n        sb.append(deleted);\n        return sb.toString();\n    }\n\n    public java.lang.String toStringNoTime() {\n        return rowColumnStringBuilder().toString();\n    }\n\n    public int getLength() {\n        return ((row.length + colFamily.length) + colQualifier.length) + colVisibility.length;\n    }\n\n    public int getSize() {\n        return getLength();\n    }\n\n    private static boolean isEqual(byte[] a1, byte[] a2) {\n        if (a1 == a2) {\n            return true;\n        }\n        int last = a1.length;\n        if (last != a2.length) {\n            return false;\n        }\n        if (last == 0) {\n            return true;\n        }\n        last--;\n        if (a1[last] == a2[last]) {\n            for (int i = 0; i < last; i++) {\n                if (a1[i] != a2[i]) {\n                    return false;\n                }\n            }\n        } else {\n            return false;\n        }\n        return true;\n    }\n\n    public static java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> compress(java.util.List<? extends org.apache.accumulo.core.data.KeyValue> param) {\n        java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> tkvl = java.util.Arrays.asList(new org.apache.accumulo.core.data.thrift.TKeyValue[param.size()]);\n        if (param.size() > 0) {\n            tkvl.set(0, new org.apache.accumulo.core.data.thrift.TKeyValue(param.get(0).key.toThrift(), java.nio.ByteBuffer.wrap(param.get(0).value)));\n        }\n        for (int i = param.size() - 1; i > 0; i--) {\n            org.apache.accumulo.core.data.Key prevKey = param.get(i - 1).key;\n            org.apache.accumulo.core.data.KeyValue kv = param.get(i);\n            org.apache.accumulo.core.data.Key key = kv.key;\n            org.apache.accumulo.core.data.thrift.TKey newKey = null;\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.row, key.row)) {\n                newKey = key.toThrift();\n                newKey.row = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colFamily, key.colFamily)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colFamily = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colQualifier, key.colQualifier)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colQualifier = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colVisibility, key.colVisibility)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colVisibility = null;\n            }\n            if (newKey == null) {\n                newKey = key.toThrift();\n            }\n            tkvl.set(i, new org.apache.accumulo.core.data.thrift.TKeyValue(newKey, java.nio.ByteBuffer.wrap(kv.value)));\n        }\n        return tkvl;\n    }\n\n    public static void decompress(java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> param) {\n        for (int i = 1; i < param.size(); i++) {\n            org.apache.accumulo.core.data.thrift.TKey prevKey = param.get(i - 1).key;\n            org.apache.accumulo.core.data.thrift.TKey key = param.get(i).key;\n            if (key.row == null) {\n                key.row = prevKey.row;\n            }\n            if (key.colFamily == null) {\n                key.colFamily = prevKey.colFamily;\n            }\n            if (key.colQualifier == null) {\n                key.colQualifier = prevKey.colQualifier;\n            }\n            if (key.colVisibility == null) {\n                key.colVisibility = prevKey.colVisibility;\n            }\n        }\n    }\n\n    byte[] getRowBytes() {\n        return row;\n    }\n\n    byte[] getColFamily() {\n        return colFamily;\n    }\n\n    byte[] getColQualifier() {\n        return colQualifier;\n    }\n\n    byte[] getColVisibility() {\n        return colVisibility;\n    }\n\n    public org.apache.accumulo.core.data.thrift.TKey toThrift() {\n        return new org.apache.accumulo.core.data.thrift.TKey(java.nio.ByteBuffer.wrap(row), java.nio.ByteBuffer.wrap(colFamily), java.nio.ByteBuffer.wrap(colQualifier), java.nio.ByteBuffer.wrap(colVisibility), timestamp);\n    }\n\n    @java.lang.Override\n    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {\n        org.apache.accumulo.core.data.Key r = ((org.apache.accumulo.core.data.Key) (super.clone()));\n        r.row = java.util.Arrays.copyOf(row, row.length);\n        r.colFamily = java.util.Arrays.copyOf(colFamily, colFamily.length);\n        r.colQualifier = java.util.Arrays.copyOf(colQualifier, colQualifier.length);\n        r.colVisibility = java.util.Arrays.copyOf(colVisibility, colVisibility.length);\n        return r;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public java.lang.String toString() {\n    java.lang.StringBuilder sb = rowColumnStringBuilder();\n    sb.append(\" \");\n    sb.append(java.lang.Long.toString(timestamp));\n    sb.append(\" \");\n    sb.append(deleted);\n    return sb.toString();\n}",
            "src_parent": "public class Key implements java.lang.Cloneable , org.apache.hadoop.io.WritableComparable<org.apache.accumulo.core.data.Key> {\n    protected byte[] row;\n\n    protected byte[] colFamily;\n\n    protected byte[] colQualifier;\n\n    protected byte[] colVisibility;\n\n    protected long timestamp;\n\n    protected boolean deleted;\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (o instanceof org.apache.accumulo.core.data.Key) {\n            return this.equals(((org.apache.accumulo.core.data.Key) (o)), PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL);\n        }\n        return false;\n    }\n\n    private static final byte[] EMPTY_BYTES = new byte[0];\n\n    private byte[] copyIfNeeded(byte[] ba, int off, int len, boolean copyData) {\n        if (len == 0) {\n            return org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        }\n        if (((!copyData) && (ba.length == len)) && (off == 0)) {\n            return ba;\n        }\n        byte[] copy = new byte[len];\n        java.lang.System.arraycopy(ba, off, copy, 0, len);\n        return copy;\n    }\n\n    private final void init(byte[] r, int rOff, int rLen, byte[] cf, int cfOff, int cfLen, byte[] cq, int cqOff, int cqLen, byte[] cv, int cvOff, int cvLen, long ts, boolean del, boolean copy) {\n        row = copyIfNeeded(r, rOff, rLen, copy);\n        colFamily = copyIfNeeded(cf, cfOff, cfLen, copy);\n        colQualifier = copyIfNeeded(cq, cqOff, cqLen, copy);\n        colVisibility = copyIfNeeded(cv, cvOff, cvLen, copy);\n        timestamp = ts;\n        deleted = del;\n    }\n\n    public Key() {\n        row = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colFamily = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colQualifier = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colVisibility = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        timestamp = java.lang.Long.MAX_VALUE;\n        deleted = false;\n    }\n\n    public Key(org.apache.hadoop.io.Text row) {\n        init(row.getBytes(), 0, row.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, long ts) {\n        this(row);\n        timestamp = ts;\n    }\n\n    public Key(byte[] row, int rOff, int rLen, byte[] cf, int cfOff, int cfLen, byte[] cq, int cqOff, int cqLen, byte[] cv, int cvOff, int cvLen, long ts) {\n        init(row, rOff, rLen, cf, cfOff, cfLen, cq, cqOff, cqLen, cv, cvOff, cvLen, ts, false, true);\n    }\n\n    public Key(byte[] row, byte[] colFamily, byte[] colQualifier, byte[] colVisibility, long timestamp) {\n        this(row, colFamily, colQualifier, colVisibility, timestamp, false, true);\n    }\n\n    public Key(byte[] row, byte[] cf, byte[] cq, byte[] cv, long ts, boolean deleted) {\n        this(row, cf, cq, cv, ts, deleted, true);\n    }\n\n    public Key(byte[] row, byte[] cf, byte[] cq, byte[] cv, long ts, boolean deleted, boolean copy) {\n        init(row, 0, row.length, cf, 0, cf.length, cq, 0, cq.length, cv, 0, cv.length, ts, deleted, copy);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.hadoop.io.Text cv) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), cv.getBytes(), 0, cv.getLength(), java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, long ts) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, ts, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.hadoop.io.Text cv, long ts) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), cv.getBytes(), 0, cv.getLength(), ts, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.accumulo.core.security.ColumnVisibility cv, long ts) {\n        byte[] expr = cv.getExpression();\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), expr, 0, expr.length, ts, false, true);\n    }\n\n    public Key(java.lang.CharSequence row) {\n        this(new org.apache.hadoop.io.Text(row.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, java.lang.CharSequence cv) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), ts);\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, java.lang.CharSequence cv, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.toString()), ts);\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, org.apache.accumulo.core.security.ColumnVisibility cv, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.getExpression()), ts);\n    }\n\n    private byte[] followingArray(byte[] ba) {\n        byte[] fba = new byte[ba.length + 1];\n        java.lang.System.arraycopy(ba, 0, fba, 0, ba.length);\n        fba[ba.length] = ((byte) (0x0));\n        return fba;\n    }\n\n    public org.apache.accumulo.core.data.Key followingKey(org.apache.accumulo.core.data.PartialKey part) {\n        org.apache.accumulo.core.data.Key returnKey = new org.apache.accumulo.core.data.Key();\n        switch (part) {\n            case ROW :\n                returnKey.row = followingArray(row);\n                break;\n            case ROW_COLFAM :\n                returnKey.row = row;\n                returnKey.colFamily = followingArray(colFamily);\n                break;\n            case ROW_COLFAM_COLQUAL :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = followingArray(colQualifier);\n                break;\n            case ROW_COLFAM_COLQUAL_COLVIS :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = colQualifier;\n                returnKey.colVisibility = followingArray(colVisibility);\n                break;\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = colQualifier;\n                returnKey.colVisibility = colVisibility;\n                returnKey.setTimestamp(timestamp - 1);\n                returnKey.deleted = false;\n                break;\n            default :\n                throw new java.lang.IllegalArgumentException((\"Partial key specification \" + part) + \" disallowed\");\n        }\n        return returnKey;\n    }\n\n    public Key(org.apache.accumulo.core.data.Key other) {\n        set(other);\n    }\n\n    public Key(org.apache.accumulo.core.data.thrift.TKey tkey) {\n        this.row = toBytes(tkey.row);\n        this.colFamily = toBytes(tkey.colFamily);\n        this.colQualifier = toBytes(tkey.colQualifier);\n        this.colVisibility = toBytes(tkey.colVisibility);\n        this.timestamp = tkey.timestamp;\n        this.deleted = false;\n    }\n\n    public org.apache.hadoop.io.Text getRow(org.apache.hadoop.io.Text r) {\n        r.set(row, 0, row.length);\n        return r;\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getRowData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(row);\n    }\n\n    public org.apache.hadoop.io.Text getRow() {\n        return getRow(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareRow(org.apache.hadoop.io.Text r) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(row, 0, row.length, r.getBytes(), 0, r.getLength());\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnFamilyData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colFamily);\n    }\n\n    public org.apache.hadoop.io.Text getColumnFamily(org.apache.hadoop.io.Text cf) {\n        cf.set(colFamily, 0, colFamily.length);\n        return cf;\n    }\n\n    public org.apache.hadoop.io.Text getColumnFamily() {\n        return getColumnFamily(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareColumnFamily(org.apache.hadoop.io.Text cf) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(colFamily, 0, colFamily.length, cf.getBytes(), 0, cf.getLength());\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnQualifierData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colQualifier);\n    }\n\n    public org.apache.hadoop.io.Text getColumnQualifier(org.apache.hadoop.io.Text cq) {\n        cq.set(colQualifier, 0, colQualifier.length);\n        return cq;\n    }\n\n    public org.apache.hadoop.io.Text getColumnQualifier() {\n        return getColumnQualifier(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareColumnQualifier(org.apache.hadoop.io.Text cq) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(colQualifier, 0, colQualifier.length, cq.getBytes(), 0, cq.getLength());\n    }\n\n    public void setTimestamp(long ts) {\n        this.timestamp = ts;\n    }\n\n    public long getTimestamp() {\n        return timestamp;\n    }\n\n    public boolean isDeleted() {\n        return deleted;\n    }\n\n    public void setDeleted(boolean deleted) {\n        this.deleted = deleted;\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnVisibilityData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colVisibility);\n    }\n\n    public final org.apache.hadoop.io.Text getColumnVisibility() {\n        return getColumnVisibility(new org.apache.hadoop.io.Text());\n    }\n\n    public final org.apache.hadoop.io.Text getColumnVisibility(org.apache.hadoop.io.Text cv) {\n        cv.set(colVisibility, 0, colVisibility.length);\n        return cv;\n    }\n\n    public void set(org.apache.accumulo.core.data.Key k) {\n        row = k.row;\n        colFamily = k.colFamily;\n        colQualifier = k.colQualifier;\n        colVisibility = k.colVisibility;\n        timestamp = k.timestamp;\n        deleted = k.deleted;\n    }\n\n    public void readFields(java.io.DataInput in) throws java.io.IOException {\n        int colFamilyOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int colQualifierOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int colVisibilityOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int totalLen = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        row = new byte[colFamilyOffset];\n        colFamily = new byte[colQualifierOffset - colFamilyOffset];\n        colQualifier = new byte[colVisibilityOffset - colQualifierOffset];\n        colVisibility = new byte[totalLen - colVisibilityOffset];\n        in.readFully(row);\n        in.readFully(colFamily);\n        in.readFully(colQualifier);\n        in.readFully(colVisibility);\n        timestamp = org.apache.hadoop.io.WritableUtils.readVLong(in);\n        deleted = in.readBoolean();\n    }\n\n    public void write(java.io.DataOutput out) throws java.io.IOException {\n        int colFamilyOffset = row.length;\n        int colQualifierOffset = colFamilyOffset + colFamily.length;\n        int colVisibilityOffset = colQualifierOffset + colQualifier.length;\n        int totalLen = colVisibilityOffset + colVisibility.length;\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colFamilyOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colQualifierOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colVisibilityOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, totalLen);\n        out.write(row);\n        out.write(colFamily);\n        out.write(colQualifier);\n        out.write(colVisibility);\n        org.apache.hadoop.io.WritableUtils.writeVLong(out, timestamp);\n        out.writeBoolean(deleted);\n    }\n\n    public boolean equals(org.apache.accumulo.core.data.Key other, org.apache.accumulo.core.data.PartialKey part) {\n        switch (part) {\n            case ROW :\n                return org.apache.accumulo.core.data.Key.isEqual(row, other.row);\n            case ROW_COLFAM :\n                return org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily);\n            case ROW_COLFAM_COLQUAL :\n                return (org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier);\n            case ROW_COLFAM_COLQUAL_COLVIS :\n                return ((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility);\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME :\n                return (((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility)) && (timestamp == other.timestamp);\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL :\n                return ((((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility)) && (timestamp == other.timestamp)) && (deleted == other.deleted);\n            default :\n                throw new java.lang.IllegalArgumentException(\"Unrecognized partial key specification \" + part);\n        }\n    }\n\n    public int compareTo(org.apache.accumulo.core.data.Key other, org.apache.accumulo.core.data.PartialKey part) {\n        int result = org.apache.hadoop.io.WritableComparator.compareBytes(row, 0, row.length, other.row, 0, other.row.length);\n        if ((result != 0) || part.equals(PartialKey.ROW)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colFamily, 0, colFamily.length, other.colFamily, 0, other.colFamily.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colQualifier, 0, colQualifier.length, other.colQualifier, 0, other.colQualifier.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colVisibility, 0, colVisibility.length, other.colVisibility, 0, other.colVisibility.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL_COLVIS)) {\n            return result;\n        }\n        if (timestamp < other.timestamp) {\n            result = 1;\n        } else if (timestamp > other.timestamp) {\n            result = -1;\n        } else {\n            result = 0;\n        }\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME)) {\n            return result;\n        }\n        if (deleted) {\n            result = (other.deleted) ? 0 : -1;\n        } else {\n            result = (other.deleted) ? 1 : 0;\n        }\n        return result;\n    }\n\n    public int compareTo(org.apache.accumulo.core.data.Key other) {\n        return compareTo(other, PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL);\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return ((org.apache.hadoop.io.WritableComparator.hashBytes(row, row.length) + org.apache.hadoop.io.WritableComparator.hashBytes(colFamily, colFamily.length)) + org.apache.hadoop.io.WritableComparator.hashBytes(colQualifier, colQualifier.length)) + org.apache.hadoop.io.WritableComparator.hashBytes(colVisibility, colVisibility.length);\n    }\n\n    public static java.lang.String toPrintableString(byte[] ba, int offset, int len, int maxLen) {\n        return org.apache.accumulo.core.data.Key.appendPrintableString(ba, offset, len, maxLen, new java.lang.StringBuilder()).toString();\n    }\n\n    public static java.lang.StringBuilder appendPrintableString(byte[] ba, int offset, int len, int maxLen, java.lang.StringBuilder sb) {\n        int plen = java.lang.Math.min(len, maxLen);\n        for (int i = 0; i < plen; i++) {\n            int c = 0xff & ba[offset + i];\n            if ((c >= 32) && (c <= 126)) {\n                sb.append(((char) (c)));\n            } else {\n                sb.append(\"%\" + java.lang.String.format(\"%02x;\", c));\n            }\n        }\n        if (len > maxLen) {\n            sb.append(\"... TRUNCATED\");\n        }\n        return sb;\n    }\n\n    private java.lang.StringBuilder rowColumnStringBuilder() {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        org.apache.accumulo.core.data.Key.appendPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT, sb);\n        sb.append(\" \");\n        org.apache.accumulo.core.data.Key.appendPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT, sb);\n        sb.append(\":\");\n        org.apache.accumulo.core.data.Key.appendPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT, sb);\n        sb.append(\" [\");\n        org.apache.accumulo.core.data.Key.appendPrintableString(colVisibility, 0, colVisibility.length, Constants.MAX_DATA_TO_PRINT, sb);\n        sb.append(\"]\");\n        return sb;\n    }\n\n    public java.lang.String toString() {\n        java.lang.StringBuilder sb = rowColumnStringBuilder();\n        sb.append(\" \");\n        sb.append(java.lang.Long.toString(timestamp));\n        sb.append(\" \");\n        sb.append(deleted);\n        return sb.toString();\n    }\n\n    public java.lang.String toStringNoTime() {\n        return rowColumnStringBuilder().toString();\n    }\n\n    public int getLength() {\n        return ((row.length + colFamily.length) + colQualifier.length) + colVisibility.length;\n    }\n\n    public int getSize() {\n        return getLength();\n    }\n\n    private static boolean isEqual(byte[] a1, byte[] a2) {\n        if (a1 == a2) {\n            return true;\n        }\n        int last = a1.length;\n        if (last != a2.length) {\n            return false;\n        }\n        if (last == 0) {\n            return true;\n        }\n        last--;\n        if (a1[last] == a2[last]) {\n            for (int i = 0; i < last; i++) {\n                if (a1[i] != a2[i]) {\n                    return false;\n                }\n            }\n        } else {\n            return false;\n        }\n        return true;\n    }\n\n    public static java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> compress(java.util.List<? extends org.apache.accumulo.core.data.KeyValue> param) {\n        java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> tkvl = java.util.Arrays.asList(new org.apache.accumulo.core.data.thrift.TKeyValue[param.size()]);\n        if (param.size() > 0) {\n            tkvl.set(0, new org.apache.accumulo.core.data.thrift.TKeyValue(param.get(0).key.toThrift(), java.nio.ByteBuffer.wrap(param.get(0).value)));\n        }\n        for (int i = param.size() - 1; i > 0; i--) {\n            org.apache.accumulo.core.data.Key prevKey = param.get(i - 1).key;\n            org.apache.accumulo.core.data.KeyValue kv = param.get(i);\n            org.apache.accumulo.core.data.Key key = kv.key;\n            org.apache.accumulo.core.data.thrift.TKey newKey = null;\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.row, key.row)) {\n                newKey = key.toThrift();\n                newKey.row = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colFamily, key.colFamily)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colFamily = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colQualifier, key.colQualifier)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colQualifier = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colVisibility, key.colVisibility)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colVisibility = null;\n            }\n            if (newKey == null) {\n                newKey = key.toThrift();\n            }\n            tkvl.set(i, new org.apache.accumulo.core.data.thrift.TKeyValue(newKey, java.nio.ByteBuffer.wrap(kv.value)));\n        }\n        return tkvl;\n    }\n\n    public static void decompress(java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> param) {\n        for (int i = 1; i < param.size(); i++) {\n            org.apache.accumulo.core.data.thrift.TKey prevKey = param.get(i - 1).key;\n            org.apache.accumulo.core.data.thrift.TKey key = param.get(i).key;\n            if (key.row == null) {\n                key.row = prevKey.row;\n            }\n            if (key.colFamily == null) {\n                key.colFamily = prevKey.colFamily;\n            }\n            if (key.colQualifier == null) {\n                key.colQualifier = prevKey.colQualifier;\n            }\n            if (key.colVisibility == null) {\n                key.colVisibility = prevKey.colVisibility;\n            }\n        }\n    }\n\n    byte[] getRowBytes() {\n        return row;\n    }\n\n    byte[] getColFamily() {\n        return colFamily;\n    }\n\n    byte[] getColQualifier() {\n        return colQualifier;\n    }\n\n    byte[] getColVisibility() {\n        return colVisibility;\n    }\n\n    public org.apache.accumulo.core.data.thrift.TKey toThrift() {\n        return new org.apache.accumulo.core.data.thrift.TKey(java.nio.ByteBuffer.wrap(row), java.nio.ByteBuffer.wrap(colFamily), java.nio.ByteBuffer.wrap(colQualifier), java.nio.ByteBuffer.wrap(colVisibility), timestamp);\n    }\n\n    @java.lang.Override\n    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {\n        org.apache.accumulo.core.data.Key r = ((org.apache.accumulo.core.data.Key) (super.clone()));\n        r.row = java.util.Arrays.copyOf(row, row.length);\n        r.colFamily = java.util.Arrays.copyOf(colFamily, colFamily.length);\n        r.colQualifier = java.util.Arrays.copyOf(colQualifier, colQualifier.length);\n        r.colVisibility = java.util.Arrays.copyOf(colVisibility, colVisibility.length);\n        return r;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public java.lang.String toStringNoTime() {\n    return rowColumnStringBuilder().toString();\n}",
            "src_parent": "public class Key implements java.lang.Cloneable , org.apache.hadoop.io.WritableComparable<org.apache.accumulo.core.data.Key> {\n    protected byte[] row;\n\n    protected byte[] colFamily;\n\n    protected byte[] colQualifier;\n\n    protected byte[] colVisibility;\n\n    protected long timestamp;\n\n    protected boolean deleted;\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (o instanceof org.apache.accumulo.core.data.Key) {\n            return this.equals(((org.apache.accumulo.core.data.Key) (o)), PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL);\n        }\n        return false;\n    }\n\n    private static final byte[] EMPTY_BYTES = new byte[0];\n\n    private byte[] copyIfNeeded(byte[] ba, int off, int len, boolean copyData) {\n        if (len == 0) {\n            return org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        }\n        if (((!copyData) && (ba.length == len)) && (off == 0)) {\n            return ba;\n        }\n        byte[] copy = new byte[len];\n        java.lang.System.arraycopy(ba, off, copy, 0, len);\n        return copy;\n    }\n\n    private final void init(byte[] r, int rOff, int rLen, byte[] cf, int cfOff, int cfLen, byte[] cq, int cqOff, int cqLen, byte[] cv, int cvOff, int cvLen, long ts, boolean del, boolean copy) {\n        row = copyIfNeeded(r, rOff, rLen, copy);\n        colFamily = copyIfNeeded(cf, cfOff, cfLen, copy);\n        colQualifier = copyIfNeeded(cq, cqOff, cqLen, copy);\n        colVisibility = copyIfNeeded(cv, cvOff, cvLen, copy);\n        timestamp = ts;\n        deleted = del;\n    }\n\n    public Key() {\n        row = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colFamily = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colQualifier = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        colVisibility = org.apache.accumulo.core.data.Key.EMPTY_BYTES;\n        timestamp = java.lang.Long.MAX_VALUE;\n        deleted = false;\n    }\n\n    public Key(org.apache.hadoop.io.Text row) {\n        init(row.getBytes(), 0, row.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, long ts) {\n        this(row);\n        timestamp = ts;\n    }\n\n    public Key(byte[] row, int rOff, int rLen, byte[] cf, int cfOff, int cfLen, byte[] cq, int cqOff, int cqLen, byte[] cv, int cvOff, int cvLen, long ts) {\n        init(row, rOff, rLen, cf, cfOff, cfLen, cq, cqOff, cqLen, cv, cvOff, cvLen, ts, false, true);\n    }\n\n    public Key(byte[] row, byte[] colFamily, byte[] colQualifier, byte[] colVisibility, long timestamp) {\n        this(row, colFamily, colQualifier, colVisibility, timestamp, false, true);\n    }\n\n    public Key(byte[] row, byte[] cf, byte[] cq, byte[] cv, long ts, boolean deleted) {\n        this(row, cf, cq, cv, ts, deleted, true);\n    }\n\n    public Key(byte[] row, byte[] cf, byte[] cq, byte[] cv, long ts, boolean deleted, boolean copy) {\n        init(row, 0, row.length, cf, 0, cf.length, cq, 0, cq.length, cv, 0, cv.length, ts, deleted, copy);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.hadoop.io.Text cv) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), cv.getBytes(), 0, cv.getLength(), java.lang.Long.MAX_VALUE, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, long ts) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), org.apache.accumulo.core.data.Key.EMPTY_BYTES, 0, 0, ts, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.hadoop.io.Text cv, long ts) {\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), cv.getBytes(), 0, cv.getLength(), ts, false, true);\n    }\n\n    public Key(org.apache.hadoop.io.Text row, org.apache.hadoop.io.Text cf, org.apache.hadoop.io.Text cq, org.apache.accumulo.core.security.ColumnVisibility cv, long ts) {\n        byte[] expr = cv.getExpression();\n        init(row.getBytes(), 0, row.getLength(), cf.getBytes(), 0, cf.getLength(), cq.getBytes(), 0, cq.getLength(), expr, 0, expr.length, ts, false, true);\n    }\n\n    public Key(java.lang.CharSequence row) {\n        this(new org.apache.hadoop.io.Text(row.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, java.lang.CharSequence cv) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.toString()));\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), ts);\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, java.lang.CharSequence cv, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.toString()), ts);\n    }\n\n    public Key(java.lang.CharSequence row, java.lang.CharSequence cf, java.lang.CharSequence cq, org.apache.accumulo.core.security.ColumnVisibility cv, long ts) {\n        this(new org.apache.hadoop.io.Text(row.toString()), new org.apache.hadoop.io.Text(cf.toString()), new org.apache.hadoop.io.Text(cq.toString()), new org.apache.hadoop.io.Text(cv.getExpression()), ts);\n    }\n\n    private byte[] followingArray(byte[] ba) {\n        byte[] fba = new byte[ba.length + 1];\n        java.lang.System.arraycopy(ba, 0, fba, 0, ba.length);\n        fba[ba.length] = ((byte) (0x0));\n        return fba;\n    }\n\n    public org.apache.accumulo.core.data.Key followingKey(org.apache.accumulo.core.data.PartialKey part) {\n        org.apache.accumulo.core.data.Key returnKey = new org.apache.accumulo.core.data.Key();\n        switch (part) {\n            case ROW :\n                returnKey.row = followingArray(row);\n                break;\n            case ROW_COLFAM :\n                returnKey.row = row;\n                returnKey.colFamily = followingArray(colFamily);\n                break;\n            case ROW_COLFAM_COLQUAL :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = followingArray(colQualifier);\n                break;\n            case ROW_COLFAM_COLQUAL_COLVIS :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = colQualifier;\n                returnKey.colVisibility = followingArray(colVisibility);\n                break;\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME :\n                returnKey.row = row;\n                returnKey.colFamily = colFamily;\n                returnKey.colQualifier = colQualifier;\n                returnKey.colVisibility = colVisibility;\n                returnKey.setTimestamp(timestamp - 1);\n                returnKey.deleted = false;\n                break;\n            default :\n                throw new java.lang.IllegalArgumentException((\"Partial key specification \" + part) + \" disallowed\");\n        }\n        return returnKey;\n    }\n\n    public Key(org.apache.accumulo.core.data.Key other) {\n        set(other);\n    }\n\n    public Key(org.apache.accumulo.core.data.thrift.TKey tkey) {\n        this.row = toBytes(tkey.row);\n        this.colFamily = toBytes(tkey.colFamily);\n        this.colQualifier = toBytes(tkey.colQualifier);\n        this.colVisibility = toBytes(tkey.colVisibility);\n        this.timestamp = tkey.timestamp;\n        this.deleted = false;\n    }\n\n    public org.apache.hadoop.io.Text getRow(org.apache.hadoop.io.Text r) {\n        r.set(row, 0, row.length);\n        return r;\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getRowData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(row);\n    }\n\n    public org.apache.hadoop.io.Text getRow() {\n        return getRow(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareRow(org.apache.hadoop.io.Text r) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(row, 0, row.length, r.getBytes(), 0, r.getLength());\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnFamilyData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colFamily);\n    }\n\n    public org.apache.hadoop.io.Text getColumnFamily(org.apache.hadoop.io.Text cf) {\n        cf.set(colFamily, 0, colFamily.length);\n        return cf;\n    }\n\n    public org.apache.hadoop.io.Text getColumnFamily() {\n        return getColumnFamily(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareColumnFamily(org.apache.hadoop.io.Text cf) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(colFamily, 0, colFamily.length, cf.getBytes(), 0, cf.getLength());\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnQualifierData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colQualifier);\n    }\n\n    public org.apache.hadoop.io.Text getColumnQualifier(org.apache.hadoop.io.Text cq) {\n        cq.set(colQualifier, 0, colQualifier.length);\n        return cq;\n    }\n\n    public org.apache.hadoop.io.Text getColumnQualifier() {\n        return getColumnQualifier(new org.apache.hadoop.io.Text());\n    }\n\n    public int compareColumnQualifier(org.apache.hadoop.io.Text cq) {\n        return org.apache.hadoop.io.WritableComparator.compareBytes(colQualifier, 0, colQualifier.length, cq.getBytes(), 0, cq.getLength());\n    }\n\n    public void setTimestamp(long ts) {\n        this.timestamp = ts;\n    }\n\n    public long getTimestamp() {\n        return timestamp;\n    }\n\n    public boolean isDeleted() {\n        return deleted;\n    }\n\n    public void setDeleted(boolean deleted) {\n        this.deleted = deleted;\n    }\n\n    public org.apache.accumulo.core.data.ByteSequence getColumnVisibilityData() {\n        return new org.apache.accumulo.core.data.ArrayByteSequence(colVisibility);\n    }\n\n    public final org.apache.hadoop.io.Text getColumnVisibility() {\n        return getColumnVisibility(new org.apache.hadoop.io.Text());\n    }\n\n    public final org.apache.hadoop.io.Text getColumnVisibility(org.apache.hadoop.io.Text cv) {\n        cv.set(colVisibility, 0, colVisibility.length);\n        return cv;\n    }\n\n    public void set(org.apache.accumulo.core.data.Key k) {\n        row = k.row;\n        colFamily = k.colFamily;\n        colQualifier = k.colQualifier;\n        colVisibility = k.colVisibility;\n        timestamp = k.timestamp;\n        deleted = k.deleted;\n    }\n\n    public void readFields(java.io.DataInput in) throws java.io.IOException {\n        int colFamilyOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int colQualifierOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int colVisibilityOffset = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        int totalLen = org.apache.hadoop.io.WritableUtils.readVInt(in);\n        row = new byte[colFamilyOffset];\n        colFamily = new byte[colQualifierOffset - colFamilyOffset];\n        colQualifier = new byte[colVisibilityOffset - colQualifierOffset];\n        colVisibility = new byte[totalLen - colVisibilityOffset];\n        in.readFully(row);\n        in.readFully(colFamily);\n        in.readFully(colQualifier);\n        in.readFully(colVisibility);\n        timestamp = org.apache.hadoop.io.WritableUtils.readVLong(in);\n        deleted = in.readBoolean();\n    }\n\n    public void write(java.io.DataOutput out) throws java.io.IOException {\n        int colFamilyOffset = row.length;\n        int colQualifierOffset = colFamilyOffset + colFamily.length;\n        int colVisibilityOffset = colQualifierOffset + colQualifier.length;\n        int totalLen = colVisibilityOffset + colVisibility.length;\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colFamilyOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colQualifierOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, colVisibilityOffset);\n        org.apache.hadoop.io.WritableUtils.writeVInt(out, totalLen);\n        out.write(row);\n        out.write(colFamily);\n        out.write(colQualifier);\n        out.write(colVisibility);\n        org.apache.hadoop.io.WritableUtils.writeVLong(out, timestamp);\n        out.writeBoolean(deleted);\n    }\n\n    public boolean equals(org.apache.accumulo.core.data.Key other, org.apache.accumulo.core.data.PartialKey part) {\n        switch (part) {\n            case ROW :\n                return org.apache.accumulo.core.data.Key.isEqual(row, other.row);\n            case ROW_COLFAM :\n                return org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily);\n            case ROW_COLFAM_COLQUAL :\n                return (org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier);\n            case ROW_COLFAM_COLQUAL_COLVIS :\n                return ((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility);\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME :\n                return (((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility)) && (timestamp == other.timestamp);\n            case ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL :\n                return ((((org.apache.accumulo.core.data.Key.isEqual(row, other.row) && org.apache.accumulo.core.data.Key.isEqual(colFamily, other.colFamily)) && org.apache.accumulo.core.data.Key.isEqual(colQualifier, other.colQualifier)) && org.apache.accumulo.core.data.Key.isEqual(colVisibility, other.colVisibility)) && (timestamp == other.timestamp)) && (deleted == other.deleted);\n            default :\n                throw new java.lang.IllegalArgumentException(\"Unrecognized partial key specification \" + part);\n        }\n    }\n\n    public int compareTo(org.apache.accumulo.core.data.Key other, org.apache.accumulo.core.data.PartialKey part) {\n        int result = org.apache.hadoop.io.WritableComparator.compareBytes(row, 0, row.length, other.row, 0, other.row.length);\n        if ((result != 0) || part.equals(PartialKey.ROW)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colFamily, 0, colFamily.length, other.colFamily, 0, other.colFamily.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colQualifier, 0, colQualifier.length, other.colQualifier, 0, other.colQualifier.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL)) {\n            return result;\n        }\n        result = org.apache.hadoop.io.WritableComparator.compareBytes(colVisibility, 0, colVisibility.length, other.colVisibility, 0, other.colVisibility.length);\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL_COLVIS)) {\n            return result;\n        }\n        if (timestamp < other.timestamp) {\n            result = 1;\n        } else if (timestamp > other.timestamp) {\n            result = -1;\n        } else {\n            result = 0;\n        }\n        if ((result != 0) || part.equals(PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME)) {\n            return result;\n        }\n        if (deleted) {\n            result = (other.deleted) ? 0 : -1;\n        } else {\n            result = (other.deleted) ? 1 : 0;\n        }\n        return result;\n    }\n\n    public int compareTo(org.apache.accumulo.core.data.Key other) {\n        return compareTo(other, PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL);\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return ((org.apache.hadoop.io.WritableComparator.hashBytes(row, row.length) + org.apache.hadoop.io.WritableComparator.hashBytes(colFamily, colFamily.length)) + org.apache.hadoop.io.WritableComparator.hashBytes(colQualifier, colQualifier.length)) + org.apache.hadoop.io.WritableComparator.hashBytes(colVisibility, colVisibility.length);\n    }\n\n    public static java.lang.String toPrintableString(byte[] ba, int offset, int len, int maxLen) {\n        return org.apache.accumulo.core.data.Key.appendPrintableString(ba, offset, len, maxLen, new java.lang.StringBuilder()).toString();\n    }\n\n    public static java.lang.StringBuilder appendPrintableString(byte[] ba, int offset, int len, int maxLen, java.lang.StringBuilder sb) {\n        int plen = java.lang.Math.min(len, maxLen);\n        for (int i = 0; i < plen; i++) {\n            int c = 0xff & ba[offset + i];\n            if ((c >= 32) && (c <= 126)) {\n                sb.append(((char) (c)));\n            } else {\n                sb.append(\"%\" + java.lang.String.format(\"%02x;\", c));\n            }\n        }\n        if (len > maxLen) {\n            sb.append(\"... TRUNCATED\");\n        }\n        return sb;\n    }\n\n    private java.lang.StringBuilder rowColumnStringBuilder() {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        org.apache.accumulo.core.data.Key.appendPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT, sb);\n        sb.append(\" \");\n        org.apache.accumulo.core.data.Key.appendPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT, sb);\n        sb.append(\":\");\n        org.apache.accumulo.core.data.Key.appendPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT, sb);\n        sb.append(\" [\");\n        org.apache.accumulo.core.data.Key.appendPrintableString(colVisibility, 0, colVisibility.length, Constants.MAX_DATA_TO_PRINT, sb);\n        sb.append(\"]\");\n        return sb;\n    }\n\n    public java.lang.String toString() {\n        java.lang.StringBuilder sb = rowColumnStringBuilder();\n        sb.append(\" \");\n        sb.append(java.lang.Long.toString(timestamp));\n        sb.append(\" \");\n        sb.append(deleted);\n        return sb.toString();\n    }\n\n    public java.lang.String toStringNoTime() {\n        return rowColumnStringBuilder().toString();\n    }\n\n    public int getLength() {\n        return ((row.length + colFamily.length) + colQualifier.length) + colVisibility.length;\n    }\n\n    public int getSize() {\n        return getLength();\n    }\n\n    private static boolean isEqual(byte[] a1, byte[] a2) {\n        if (a1 == a2) {\n            return true;\n        }\n        int last = a1.length;\n        if (last != a2.length) {\n            return false;\n        }\n        if (last == 0) {\n            return true;\n        }\n        last--;\n        if (a1[last] == a2[last]) {\n            for (int i = 0; i < last; i++) {\n                if (a1[i] != a2[i]) {\n                    return false;\n                }\n            }\n        } else {\n            return false;\n        }\n        return true;\n    }\n\n    public static java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> compress(java.util.List<? extends org.apache.accumulo.core.data.KeyValue> param) {\n        java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> tkvl = java.util.Arrays.asList(new org.apache.accumulo.core.data.thrift.TKeyValue[param.size()]);\n        if (param.size() > 0) {\n            tkvl.set(0, new org.apache.accumulo.core.data.thrift.TKeyValue(param.get(0).key.toThrift(), java.nio.ByteBuffer.wrap(param.get(0).value)));\n        }\n        for (int i = param.size() - 1; i > 0; i--) {\n            org.apache.accumulo.core.data.Key prevKey = param.get(i - 1).key;\n            org.apache.accumulo.core.data.KeyValue kv = param.get(i);\n            org.apache.accumulo.core.data.Key key = kv.key;\n            org.apache.accumulo.core.data.thrift.TKey newKey = null;\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.row, key.row)) {\n                newKey = key.toThrift();\n                newKey.row = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colFamily, key.colFamily)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colFamily = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colQualifier, key.colQualifier)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colQualifier = null;\n            }\n            if (org.apache.accumulo.core.data.Key.isEqual(prevKey.colVisibility, key.colVisibility)) {\n                if (newKey == null) {\n                    newKey = key.toThrift();\n                }\n                newKey.colVisibility = null;\n            }\n            if (newKey == null) {\n                newKey = key.toThrift();\n            }\n            tkvl.set(i, new org.apache.accumulo.core.data.thrift.TKeyValue(newKey, java.nio.ByteBuffer.wrap(kv.value)));\n        }\n        return tkvl;\n    }\n\n    public static void decompress(java.util.List<org.apache.accumulo.core.data.thrift.TKeyValue> param) {\n        for (int i = 1; i < param.size(); i++) {\n            org.apache.accumulo.core.data.thrift.TKey prevKey = param.get(i - 1).key;\n            org.apache.accumulo.core.data.thrift.TKey key = param.get(i).key;\n            if (key.row == null) {\n                key.row = prevKey.row;\n            }\n            if (key.colFamily == null) {\n                key.colFamily = prevKey.colFamily;\n            }\n            if (key.colQualifier == null) {\n                key.colQualifier = prevKey.colQualifier;\n            }\n            if (key.colVisibility == null) {\n                key.colVisibility = prevKey.colVisibility;\n            }\n        }\n    }\n\n    byte[] getRowBytes() {\n        return row;\n    }\n\n    byte[] getColFamily() {\n        return colFamily;\n    }\n\n    byte[] getColQualifier() {\n        return colQualifier;\n    }\n\n    byte[] getColVisibility() {\n        return colVisibility;\n    }\n\n    public org.apache.accumulo.core.data.thrift.TKey toThrift() {\n        return new org.apache.accumulo.core.data.thrift.TKey(java.nio.ByteBuffer.wrap(row), java.nio.ByteBuffer.wrap(colFamily), java.nio.ByteBuffer.wrap(colQualifier), java.nio.ByteBuffer.wrap(colVisibility), timestamp);\n    }\n\n    @java.lang.Override\n    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {\n        org.apache.accumulo.core.data.Key r = ((org.apache.accumulo.core.data.Key) (super.clone()));\n        r.row = java.util.Arrays.copyOf(row, row.length);\n        r.colFamily = java.util.Arrays.copyOf(colFamily, colFamily.length);\n        r.colQualifier = java.util.Arrays.copyOf(colQualifier, colQualifier.length);\n        r.colVisibility = java.util.Arrays.copyOf(colVisibility, colVisibility.length);\n        return r;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "rowColumnStringBuilder().toString()",
            "src_parent": "return rowColumnStringBuilder().toString()",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String",
            "dst_parent": "public static java.lang.String toPrintableString(byte[] ba, int offset, int len, int maxLen) {\n    return org.apache.accumulo.core.data.Key.appendPrintableString(ba, offset, len, maxLen, new java.lang.StringBuilder()).toString();\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "java.lang.String",
            "src_parent": "public java.lang.String toString() {\n    java.lang.String labelString = new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString();\n    java.lang.String s = (((((((((org.apache.accumulo.core.data.Key.toPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT) + \" \") + org.apache.accumulo.core.data.Key.toPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT)) + \":\") + org.apache.accumulo.core.data.Key.toPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT)) + \" \") + labelString) + \" \") + java.lang.Long.toString(timestamp)) + \" \") + deleted;\n    return s;\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.StringBuilder sb = new java.lang.StringBuilder()",
            "dst_parent": "{\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    org.apache.accumulo.core.data.Key.appendPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\" \");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\":\");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\" [\");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colVisibility, 0, colVisibility.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\"]\");\n    return sb;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.lang.StringBuilder sb = new java.lang.StringBuilder()",
            "src_parent": "{\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    int plen = java.lang.Math.min(len, maxLen);\n    for (int i = 0; i < plen; i++) {\n        int c = 0xff & ba[offset + i];\n        if ((c >= 32) && (c <= 126)) {\n            sb.append(((char) (c)));\n        } else {\n            sb.append(\"%\" + java.lang.String.format(\"%02x;\", c));\n        }\n    }\n    if (len > maxLen) {\n        sb.append(\"... TRUNCATED\");\n    }\n    return sb.toString();\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.accumulo.core.data.Key.appendPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT, sb)",
            "dst_parent": "{\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    org.apache.accumulo.core.data.Key.appendPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\" \");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\":\");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\" [\");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colVisibility, 0, colVisibility.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\"]\");\n    return sb;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "org.apache.accumulo.core.data.Key.toPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT)",
            "src_parent": "(org.apache.accumulo.core.data.Key.toPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT) + \" \")",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.accumulo.core.data.Key.appendPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT, sb)",
            "dst_parent": "{\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    org.apache.accumulo.core.data.Key.appendPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\" \");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\":\");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\" [\");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colVisibility, 0, colVisibility.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\"]\");\n    return sb;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "org.apache.accumulo.core.data.Key.toPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT)",
            "src_parent": "((org.apache.accumulo.core.data.Key.toPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT) + \" \") + org.apache.accumulo.core.data.Key.toPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT))",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.accumulo.core.data.Key.appendPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT, sb)",
            "dst_parent": "{\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    org.apache.accumulo.core.data.Key.appendPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\" \");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\":\");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\" [\");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colVisibility, 0, colVisibility.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\"]\");\n    return sb;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "org.apache.accumulo.core.data.Key.toPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT)",
            "src_parent": "((((org.apache.accumulo.core.data.Key.toPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT) + \" \") + org.apache.accumulo.core.data.Key.toPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT)) + \":\") + org.apache.accumulo.core.data.Key.toPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT))",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return sb",
            "dst_parent": "{\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    org.apache.accumulo.core.data.Key.appendPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\" \");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\":\");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\" [\");\n    org.apache.accumulo.core.data.Key.appendPrintableString(colVisibility, 0, colVisibility.length, Constants.MAX_DATA_TO_PRINT, sb);\n    sb.append(\"]\");\n    return sb;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return s",
            "src_parent": "{\n    java.lang.String labelString = new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString();\n    java.lang.String s = (((((((((org.apache.accumulo.core.data.Key.toPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT) + \" \") + org.apache.accumulo.core.data.Key.toPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT)) + \":\") + org.apache.accumulo.core.data.Key.toPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT)) + \" \") + labelString) + \" \") + java.lang.Long.toString(timestamp)) + \" \") + deleted;\n    return s;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String",
            "dst_parent": "public java.lang.String toString() {\n    java.lang.StringBuilder sb = rowColumnStringBuilder();\n    sb.append(\" \");\n    sb.append(java.lang.Long.toString(timestamp));\n    sb.append(\" \");\n    sb.append(deleted);\n    return sb.toString();\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "java.lang.String",
            "src_parent": "public java.lang.String toStringNoTime() {\n    java.lang.String labelString = new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString();\n    java.lang.String s = (((((new java.lang.String(row, 0, row.length) + \" \") + new java.lang.String(colFamily, 0, colFamily.length)) + \":\") + new java.lang.String(colQualifier, 0, colQualifier.length)) + \" \") + labelString;\n    return s;\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Method",
            "dst_parent": "public java.lang.String toString() {\n    java.lang.StringBuilder sb = rowColumnStringBuilder();\n    sb.append(\" \");\n    sb.append(java.lang.Long.toString(timestamp));\n    sb.append(\" \");\n    sb.append(deleted);\n    return sb.toString();\n}",
            "dst_parent_type": "Method",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Method",
            "src_parent": "public java.lang.String toString() {\n    java.lang.String labelString = new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString();\n    java.lang.String s = (((((((((org.apache.accumulo.core.data.Key.toPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT) + \" \") + org.apache.accumulo.core.data.Key.toPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT)) + \":\") + org.apache.accumulo.core.data.Key.toPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT)) + \" \") + labelString) + \" \") + java.lang.Long.toString(timestamp)) + \" \") + deleted;\n    return s;\n}",
            "src_parent_type": "Method",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.StringBuilder sb = rowColumnStringBuilder()",
            "dst_parent": "{\n    java.lang.StringBuilder sb = rowColumnStringBuilder();\n    sb.append(\" \");\n    sb.append(java.lang.Long.toString(timestamp));\n    sb.append(\" \");\n    sb.append(deleted);\n    return sb.toString();\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.lang.String labelString = new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString()",
            "src_parent": "{\n    java.lang.String labelString = new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString();\n    java.lang.String s = (((((new java.lang.String(row, 0, row.length) + \" \") + new java.lang.String(colFamily, 0, colFamily.length)) + \":\") + new java.lang.String(colQualifier, 0, colQualifier.length)) + \" \") + labelString;\n    return s;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return sb.toString()",
            "dst_parent": "{\n    java.lang.StringBuilder sb = rowColumnStringBuilder();\n    sb.append(\" \");\n    sb.append(java.lang.Long.toString(timestamp));\n    sb.append(\" \");\n    sb.append(deleted);\n    return sb.toString();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return sb.toString()",
            "src_parent": "{\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    int plen = java.lang.Math.min(len, maxLen);\n    for (int i = 0; i < plen; i++) {\n        int c = 0xff & ba[offset + i];\n        if ((c >= 32) && (c <= 126)) {\n            sb.append(((char) (c)));\n        } else {\n            sb.append(\"%\" + java.lang.String.format(\"%02x;\", c));\n        }\n    }\n    if (len > maxLen) {\n        sb.append(\"... TRUNCATED\");\n    }\n    return sb.toString();\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Method",
            "dst_parent": "public java.lang.String toStringNoTime() {\n    return rowColumnStringBuilder().toString();\n}",
            "dst_parent_type": "Method",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Method",
            "src_parent": "public java.lang.String toStringNoTime() {\n    java.lang.String labelString = new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString();\n    java.lang.String s = (((((new java.lang.String(row, 0, row.length) + \" \") + new java.lang.String(colFamily, 0, colFamily.length)) + \":\") + new java.lang.String(colQualifier, 0, colQualifier.length)) + \" \") + labelString;\n    return s;\n}",
            "src_parent_type": "Method",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return rowColumnStringBuilder().toString()",
            "dst_parent": "{\n    return rowColumnStringBuilder().toString();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return s",
            "src_parent": "{\n    java.lang.String labelString = new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString();\n    java.lang.String s = (((((new java.lang.String(row, 0, row.length) + \" \") + new java.lang.String(colFamily, 0, colFamily.length)) + \":\") + new java.lang.String(colQualifier, 0, colQualifier.length)) + \" \") + labelString;\n    return s;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "colVisibility",
            "dst_parent": "org.apache.accumulo.core.data.Key.appendPrintableString(colVisibility, 0, colVisibility.length, Constants.MAX_DATA_TO_PRINT, sb)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "colVisibility",
            "src_parent": "new org.apache.accumulo.core.security.ColumnVisibility(colVisibility)",
            "src_parent_type": "ConstructorCall",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Long.toString(timestamp)",
            "dst_parent": "sb.append(java.lang.Long.toString(timestamp))",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "java.lang.Long.toString(timestamp)",
            "src_parent": "((((((((org.apache.accumulo.core.data.Key.toPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT) + \" \") + org.apache.accumulo.core.data.Key.toPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT)) + \":\") + org.apache.accumulo.core.data.Key.toPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT)) + \" \") + labelString) + \" \") + java.lang.Long.toString(timestamp))",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "deleted",
            "dst_parent": "sb.append(deleted)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "deleted",
            "src_parent": "(((((((((org.apache.accumulo.core.data.Key.toPrintableString(row, 0, row.length, Constants.MAX_DATA_TO_PRINT) + \" \") + org.apache.accumulo.core.data.Key.toPrintableString(colFamily, 0, colFamily.length, Constants.MAX_DATA_TO_PRINT)) + \":\") + org.apache.accumulo.core.data.Key.toPrintableString(colQualifier, 0, colQualifier.length, Constants.MAX_DATA_TO_PRINT)) + \" \") + labelString) + \" \") + java.lang.Long.toString(timestamp)) + \" \") + deleted",
            "src_parent_type": "BinaryOperator",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "colVisibility",
            "dst_parent": "colVisibility.length",
            "dst_parent_type": "FieldRead",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "colVisibility",
            "src_parent": "new org.apache.accumulo.core.security.ColumnVisibility(colVisibility)",
            "src_parent_type": "ConstructorCall",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "new java.lang.StringBuilder()",
            "dst_parent": "org.apache.accumulo.core.data.Key.appendPrintableString(ba, offset, len, maxLen, new java.lang.StringBuilder())",
            "dst_parent_type": "Invocation",
            "dst_type": "ConstructorCall",
            "operator": "MOV",
            "src": "new org.apache.accumulo.core.security.ColumnVisibility(colVisibility)",
            "src_parent": "new org.apache.accumulo.core.security.ColumnVisibility(colVisibility).toString()",
            "src_parent_type": "Invocation",
            "src_type": "ConstructorCall"
          }
        }
      ],
      "file_name": "Key"
    }
  ],
  "id": "accumulo_8ad5a888"
}