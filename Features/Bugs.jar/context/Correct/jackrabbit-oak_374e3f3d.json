{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "return childNodeAdded(name, after)",
            "src_parent": "{\n    return childNodeAdded(name, after);\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "@java.lang.Override\npublic org.apache.jackrabbit.oak.spi.commit.Editor childNodeChanged(java.lang.String name, org.apache.jackrabbit.oak.spi.state.NodeState before, org.apache.jackrabbit.oak.spi.state.NodeState after) throws org.apache.jackrabbit.oak.api.CommitFailedException {\n}",
            "dst_parent": "public final class VersionablePropertiesEditor extends org.apache.jackrabbit.oak.spi.commit.DefaultEditor {\n    private static final java.lang.String MIX_SIMPLE_VERSIONABLE = \"mix:simpleVersionable\";\n\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.upgrade.version.VersionablePropertiesEditor.class);\n\n    private final org.apache.jackrabbit.oak.spi.state.NodeBuilder rootBuilder;\n\n    private final org.apache.jackrabbit.oak.spi.state.NodeBuilder builder;\n\n    private final org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate isVersionable;\n\n    private final org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate isSimpleVersionable;\n\n    private final org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate isNtVersion;\n\n    private final org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate isFrozenNode;\n\n    private VersionablePropertiesEditor(org.apache.jackrabbit.oak.spi.state.NodeBuilder rootBuilder) {\n        this.builder = rootBuilder;\n        this.rootBuilder = rootBuilder;\n        this.isVersionable = new org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate(rootBuilder.getNodeState(), org.apache.jackrabbit.JcrConstants.MIX_VERSIONABLE);\n        this.isSimpleVersionable = new org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate(rootBuilder.getNodeState(), org.apache.jackrabbit.oak.upgrade.version.VersionablePropertiesEditor.MIX_SIMPLE_VERSIONABLE);\n        this.isNtVersion = new org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate(rootBuilder.getNodeState(), org.apache.jackrabbit.JcrConstants.NT_VERSION);\n        this.isFrozenNode = new org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate(rootBuilder.getNodeState(), org.apache.jackrabbit.JcrConstants.NT_FROZENNODE);\n    }\n\n    private VersionablePropertiesEditor(org.apache.jackrabbit.oak.upgrade.version.VersionablePropertiesEditor parent, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder) {\n        this.builder = builder;\n        this.rootBuilder = parent.rootBuilder;\n        this.isVersionable = parent.isVersionable;\n        this.isSimpleVersionable = parent.isSimpleVersionable;\n        this.isNtVersion = parent.isNtVersion;\n        this.isFrozenNode = parent.isFrozenNode;\n    }\n\n    public static class Provider implements org.apache.jackrabbit.oak.spi.commit.EditorProvider {\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.spi.commit.Editor getRootEditor(org.apache.jackrabbit.oak.spi.state.NodeState before, org.apache.jackrabbit.oak.spi.state.NodeState after, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder, org.apache.jackrabbit.oak.spi.commit.CommitInfo info) throws org.apache.jackrabbit.oak.api.CommitFailedException {\n            return new org.apache.jackrabbit.oak.upgrade.version.VersionablePropertiesEditor(builder);\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return \"VersionablePropertiesEditor\";\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.commit.Editor childNodeAdded(java.lang.String name, org.apache.jackrabbit.oak.spi.state.NodeState after) throws org.apache.jackrabbit.oak.api.CommitFailedException {\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder nodeBuilder = builder.getChildNode(name);\n        if (isVersionable.apply(after)) {\n            fixProperties(nodeBuilder);\n        } else if (isFrozenNode.apply(after)) {\n            org.apache.jackrabbit.oak.upgrade.version.VersionablePropertiesEditor.updateFrozenMixins(nodeBuilder);\n        }\n        return new org.apache.jackrabbit.oak.upgrade.version.VersionablePropertiesEditor(this, nodeBuilder);\n    }\n\n    private static boolean updateFrozenMixins(org.apache.jackrabbit.oak.spi.state.NodeBuilder builder) {\n        if (builder.hasProperty(org.apache.jackrabbit.JcrConstants.JCR_FROZENMIXINTYPES)) {\n            final java.util.Set<java.lang.String> mixins = com.google.common.collect.Sets.newHashSet(builder.getProperty(org.apache.jackrabbit.JcrConstants.JCR_FROZENMIXINTYPES).getValue(org.apache.jackrabbit.oak.upgrade.version.NAMES));\n            if (mixins.remove(org.apache.jackrabbit.oak.upgrade.version.VersionablePropertiesEditor.MIX_SIMPLE_VERSIONABLE)) {\n                mixins.add(org.apache.jackrabbit.JcrConstants.MIX_VERSIONABLE);\n                builder.setProperty(nameProperty(org.apache.jackrabbit.JcrConstants.JCR_FROZENMIXINTYPES, mixins));\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private void fixProperties(org.apache.jackrabbit.oak.spi.state.NodeBuilder node) {\n        org.apache.jackrabbit.oak.spi.state.NodeState versionHistory = org.apache.jackrabbit.oak.upgrade.version.VersionHistoryUtil.getVersionHistoryNodeState(rootBuilder.getNodeState(), node.getString(org.apache.jackrabbit.JcrConstants.JCR_UUID));\n        if (!versionHistory.exists()) {\n            org.apache.jackrabbit.oak.upgrade.version.VersionablePropertiesEditor.log.warn(\"No version history for {}\", node);\n            return;\n        }\n        java.util.Set<java.lang.String> updated = new java.util.HashSet<>();\n        if (!node.hasProperty(org.apache.jackrabbit.JcrConstants.JCR_VERSIONHISTORY)) {\n            node.setProperty(org.apache.jackrabbit.JcrConstants.JCR_VERSIONHISTORY, versionHistory.getString(org.apache.jackrabbit.JcrConstants.JCR_UUID), org.apache.jackrabbit.oak.upgrade.version.REFERENCE);\n            updated.add(org.apache.jackrabbit.JcrConstants.JCR_VERSIONHISTORY);\n        }\n        java.lang.String baseVersion = null;\n        if (!node.hasProperty(org.apache.jackrabbit.JcrConstants.JCR_BASEVERSION)) {\n            baseVersion = getLastVersion(versionHistory);\n            node.setProperty(org.apache.jackrabbit.JcrConstants.JCR_BASEVERSION, baseVersion, org.apache.jackrabbit.oak.upgrade.version.REFERENCE);\n            updated.add(org.apache.jackrabbit.JcrConstants.JCR_BASEVERSION);\n        }\n        if (!node.hasProperty(org.apache.jackrabbit.JcrConstants.JCR_PREDECESSORS)) {\n            baseVersion = (baseVersion == null) ? getLastVersion(versionHistory) : baseVersion;\n            java.util.List<java.lang.String> predecessors = new java.util.ArrayList<>();\n            if (node.getBoolean(org.apache.jackrabbit.JcrConstants.JCR_ISCHECKEDOUT)) {\n                predecessors.add(baseVersion);\n            }\n            node.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PREDECESSORS, predecessors, org.apache.jackrabbit.oak.upgrade.version.REFERENCES);\n            updated.add(org.apache.jackrabbit.JcrConstants.JCR_PREDECESSORS);\n        }\n        if (!updated.isEmpty()) {\n            org.apache.jackrabbit.oak.upgrade.version.VersionablePropertiesEditor.log.info(\"Updated versionable properties {} for {}\", updated, node);\n        }\n    }\n\n    private java.lang.String getLastVersion(org.apache.jackrabbit.oak.spi.state.NodeState versionHistory) {\n        org.apache.jackrabbit.oak.spi.state.NodeState lastVersion = versionHistory.getChildNode(org.apache.jackrabbit.JcrConstants.JCR_ROOTVERSION);\n        for (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry child : versionHistory.getChildNodeEntries()) {\n            org.apache.jackrabbit.oak.spi.state.NodeState v = child.getNodeState();\n            if (!isNtVersion.apply(v)) {\n                continue;\n            }\n            if (v.getProperty(org.apache.jackrabbit.JcrConstants.JCR_SUCCESSORS).count() == 0) {\n                lastVersion = v;\n            }\n        }\n        return lastVersion.getString(org.apache.jackrabbit.JcrConstants.JCR_UUID);\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.commit.Editor childNodeChanged(java.lang.String name, org.apache.jackrabbit.oak.spi.state.NodeState before, org.apache.jackrabbit.oak.spi.state.NodeState after) throws org.apache.jackrabbit.oak.api.CommitFailedException {\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "MOV",
            "src": "@java.lang.Override\npublic org.apache.jackrabbit.oak.spi.commit.Editor childNodeChanged(java.lang.String name, org.apache.jackrabbit.oak.spi.state.NodeState before, org.apache.jackrabbit.oak.spi.state.NodeState after) throws org.apache.jackrabbit.oak.api.CommitFailedException {\n    return childNodeAdded(name, after);\n}",
            "src_parent": "public final class VersionablePropertiesEditor extends org.apache.jackrabbit.oak.spi.commit.DefaultEditor {\n    private static final java.lang.String MIX_SIMPLE_VERSIONABLE = \"mix:simpleVersionable\";\n\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.upgrade.version.VersionablePropertiesEditor.class);\n\n    private final org.apache.jackrabbit.oak.spi.state.NodeBuilder rootBuilder;\n\n    private final org.apache.jackrabbit.oak.spi.state.NodeBuilder builder;\n\n    private final org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate isVersionable;\n\n    private final org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate isSimpleVersionable;\n\n    private final org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate isNtVersion;\n\n    private final org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate isFrozenNode;\n\n    private VersionablePropertiesEditor(org.apache.jackrabbit.oak.spi.state.NodeBuilder rootBuilder) {\n        this.builder = rootBuilder;\n        this.rootBuilder = rootBuilder;\n        this.isVersionable = new org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate(rootBuilder.getNodeState(), org.apache.jackrabbit.JcrConstants.MIX_VERSIONABLE);\n        this.isSimpleVersionable = new org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate(rootBuilder.getNodeState(), org.apache.jackrabbit.oak.upgrade.version.VersionablePropertiesEditor.MIX_SIMPLE_VERSIONABLE);\n        this.isNtVersion = new org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate(rootBuilder.getNodeState(), org.apache.jackrabbit.JcrConstants.NT_VERSION);\n        this.isFrozenNode = new org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate(rootBuilder.getNodeState(), org.apache.jackrabbit.JcrConstants.NT_FROZENNODE);\n    }\n\n    private VersionablePropertiesEditor(org.apache.jackrabbit.oak.upgrade.version.VersionablePropertiesEditor parent, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder) {\n        this.builder = builder;\n        this.rootBuilder = parent.rootBuilder;\n        this.isVersionable = parent.isVersionable;\n        this.isSimpleVersionable = parent.isSimpleVersionable;\n        this.isNtVersion = parent.isNtVersion;\n        this.isFrozenNode = parent.isFrozenNode;\n    }\n\n    public static class Provider implements org.apache.jackrabbit.oak.spi.commit.EditorProvider {\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.spi.commit.Editor getRootEditor(org.apache.jackrabbit.oak.spi.state.NodeState before, org.apache.jackrabbit.oak.spi.state.NodeState after, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder, org.apache.jackrabbit.oak.spi.commit.CommitInfo info) throws org.apache.jackrabbit.oak.api.CommitFailedException {\n            return new org.apache.jackrabbit.oak.upgrade.version.VersionablePropertiesEditor(builder);\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return \"VersionablePropertiesEditor\";\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.commit.Editor childNodeAdded(java.lang.String name, org.apache.jackrabbit.oak.spi.state.NodeState after) throws org.apache.jackrabbit.oak.api.CommitFailedException {\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder nodeBuilder = builder.getChildNode(name);\n        if (isVersionable.apply(after)) {\n            fixProperties(nodeBuilder);\n        } else if (isFrozenNode.apply(after)) {\n            org.apache.jackrabbit.oak.upgrade.version.VersionablePropertiesEditor.updateFrozenMixins(nodeBuilder);\n        }\n        return new org.apache.jackrabbit.oak.upgrade.version.VersionablePropertiesEditor(this, nodeBuilder);\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.spi.commit.Editor childNodeChanged(java.lang.String name, org.apache.jackrabbit.oak.spi.state.NodeState before, org.apache.jackrabbit.oak.spi.state.NodeState after) throws org.apache.jackrabbit.oak.api.CommitFailedException {\n        return childNodeAdded(name, after);\n    }\n\n    private static boolean updateFrozenMixins(org.apache.jackrabbit.oak.spi.state.NodeBuilder builder) {\n        if (builder.hasProperty(org.apache.jackrabbit.JcrConstants.JCR_FROZENMIXINTYPES)) {\n            final java.util.Set<java.lang.String> mixins = com.google.common.collect.Sets.newHashSet(builder.getProperty(org.apache.jackrabbit.JcrConstants.JCR_FROZENMIXINTYPES).getValue(org.apache.jackrabbit.oak.upgrade.version.NAMES));\n            if (mixins.remove(org.apache.jackrabbit.oak.upgrade.version.VersionablePropertiesEditor.MIX_SIMPLE_VERSIONABLE)) {\n                mixins.add(org.apache.jackrabbit.JcrConstants.MIX_VERSIONABLE);\n                builder.setProperty(nameProperty(org.apache.jackrabbit.JcrConstants.JCR_FROZENMIXINTYPES, mixins));\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private void fixProperties(org.apache.jackrabbit.oak.spi.state.NodeBuilder node) {\n        org.apache.jackrabbit.oak.spi.state.NodeState versionHistory = org.apache.jackrabbit.oak.upgrade.version.VersionHistoryUtil.getVersionHistoryNodeState(rootBuilder.getNodeState(), node.getString(org.apache.jackrabbit.JcrConstants.JCR_UUID));\n        if (!versionHistory.exists()) {\n            org.apache.jackrabbit.oak.upgrade.version.VersionablePropertiesEditor.log.warn(\"No version history for {}\", node);\n            return;\n        }\n        java.util.Set<java.lang.String> updated = new java.util.HashSet<>();\n        if (!node.hasProperty(org.apache.jackrabbit.JcrConstants.JCR_VERSIONHISTORY)) {\n            node.setProperty(org.apache.jackrabbit.JcrConstants.JCR_VERSIONHISTORY, versionHistory.getString(org.apache.jackrabbit.JcrConstants.JCR_UUID), org.apache.jackrabbit.oak.upgrade.version.REFERENCE);\n            updated.add(org.apache.jackrabbit.JcrConstants.JCR_VERSIONHISTORY);\n        }\n        java.lang.String baseVersion = null;\n        if (!node.hasProperty(org.apache.jackrabbit.JcrConstants.JCR_BASEVERSION)) {\n            baseVersion = getLastVersion(versionHistory);\n            node.setProperty(org.apache.jackrabbit.JcrConstants.JCR_BASEVERSION, baseVersion, org.apache.jackrabbit.oak.upgrade.version.REFERENCE);\n            updated.add(org.apache.jackrabbit.JcrConstants.JCR_BASEVERSION);\n        }\n        if (!node.hasProperty(org.apache.jackrabbit.JcrConstants.JCR_PREDECESSORS)) {\n            baseVersion = (baseVersion == null) ? getLastVersion(versionHistory) : baseVersion;\n            java.util.List<java.lang.String> predecessors = new java.util.ArrayList<>();\n            if (node.getBoolean(org.apache.jackrabbit.JcrConstants.JCR_ISCHECKEDOUT)) {\n                predecessors.add(baseVersion);\n            }\n            node.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PREDECESSORS, predecessors, org.apache.jackrabbit.oak.upgrade.version.REFERENCES);\n            updated.add(org.apache.jackrabbit.JcrConstants.JCR_PREDECESSORS);\n        }\n        if (!updated.isEmpty()) {\n            org.apache.jackrabbit.oak.upgrade.version.VersionablePropertiesEditor.log.info(\"Updated versionable properties {} for {}\", updated, node);\n        }\n    }\n\n    private java.lang.String getLastVersion(org.apache.jackrabbit.oak.spi.state.NodeState versionHistory) {\n        org.apache.jackrabbit.oak.spi.state.NodeState lastVersion = versionHistory.getChildNode(org.apache.jackrabbit.JcrConstants.JCR_ROOTVERSION);\n        for (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry child : versionHistory.getChildNodeEntries()) {\n            org.apache.jackrabbit.oak.spi.state.NodeState v = child.getNodeState();\n            if (!isNtVersion.apply(v)) {\n                continue;\n            }\n            if (v.getProperty(org.apache.jackrabbit.JcrConstants.JCR_SUCCESSORS).count() == 0) {\n                lastVersion = v;\n            }\n        }\n        return lastVersion.getString(org.apache.jackrabbit.JcrConstants.JCR_UUID);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "VersionablePropertiesEditor"
    }
  ],
  "id": "jackrabbit-oak_374e3f3d"
}