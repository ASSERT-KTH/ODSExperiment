{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "system.child(NamespaceConstants.REP_NAMESPACES)",
            "dst_parent": "org.apache.jackrabbit.oak.spi.state.NodeBuilder namespaces = system.child(NamespaceConstants.REP_NAMESPACES)",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "org.apache.jackrabbit.oak.plugins.name.Namespaces.createStandardMappings(system)",
            "src_parent": "org.apache.jackrabbit.oak.spi.state.NodeBuilder namespaces = org.apache.jackrabbit.oak.plugins.name.Namespaces.createStandardMappings(system)",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static final java.util.Set<java.lang.String> BUILT_IN_NODE_TYPES = com.google.common.collect.ImmutableSet.of(\"mix:created\", \"mix:etag\", \"mix:language\", \"mix:lastModified\", \"mix:lifecycle\", \"mix:lockable\", \"mix:mimeType\", \"mix:referenceable\", \"mix:shareable\", \"mix:simpleVersionable\", \"mix:title\", \"mix:versionable\", \"nt:activity\", \"nt:address\", \"nt:base\", \"nt:childNodeDefinition\", \"nt:configuration\", \"nt:file\", \"nt:folder\", \"nt:frozenNode\", \"nt:hierarchyNode\", \"nt:linkedFile\", \"nt:nodeType\", \"nt:propertyDefinition\", \"nt:query\", \"nt:resource\", \"nt:unstructured\", \"nt:version\", \"nt:versionHistory\", \"nt:versionLabels\", \"nt:versionedChild\", \"oak:childNodeDefinition\", \"oak:childNodeDefinitions\", \"oak:namedChildNodeDefinitions\", \"oak:namedPropertyDefinitions\", \"oak:nodeType\", \"oak:propertyDefinition\", \"oak:propertyDefinitions\", \"oak:queryIndexDefinition\", \"oak:unstructured\", \"rep:ACE\", \"rep:ACL\", \"rep:AccessControl\", \"rep:AccessControllable\", \"rep:Activities\", \"rep:Authorizable\", \"rep:AuthorizableFolder\", \"rep:Configurations\", \"rep:DenyACE\", \"rep:GrantACE\", \"rep:Group\", \"rep:Impersonatable\", \"rep:MemberReferences\", \"rep:MemberReferencesList\", \"rep:Members\", \"rep:MergeConflict\", \"rep:PermissionStore\", \"rep:Permissions\", \"rep:Policy\", \"rep:PrincipalAccessControl\", \"rep:Privilege\", \"rep:Privileges\", \"rep:RepoAccessControllable\", \"rep:Restrictions\", \"rep:RetentionManageable\", \"rep:Token\", \"rep:User\", \"rep:VersionReference\", \"rep:nodeTypes\", \"rep:root\", \"rep:system\", \"rep:versionStorage\");",
            "src_parent": "public class RepositoryUpgrade {\n    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.class);\n\n    private final org.apache.jackrabbit.core.RepositoryContext source;\n\n    private final org.apache.jackrabbit.oak.spi.state.NodeStore target;\n\n    private static final java.util.Set<java.lang.String> BUILT_IN_NODE_TYPES = com.google.common.collect.ImmutableSet.of(\"mix:created\", \"mix:etag\", \"mix:language\", \"mix:lastModified\", \"mix:lifecycle\", \"mix:lockable\", \"mix:mimeType\", \"mix:referenceable\", \"mix:shareable\", \"mix:simpleVersionable\", \"mix:title\", \"mix:versionable\", \"nt:activity\", \"nt:address\", \"nt:base\", \"nt:childNodeDefinition\", \"nt:configuration\", \"nt:file\", \"nt:folder\", \"nt:frozenNode\", \"nt:hierarchyNode\", \"nt:linkedFile\", \"nt:nodeType\", \"nt:propertyDefinition\", \"nt:query\", \"nt:resource\", \"nt:unstructured\", \"nt:version\", \"nt:versionHistory\", \"nt:versionLabels\", \"nt:versionedChild\", \"oak:childNodeDefinition\", \"oak:childNodeDefinitions\", \"oak:namedChildNodeDefinitions\", \"oak:namedPropertyDefinitions\", \"oak:nodeType\", \"oak:propertyDefinition\", \"oak:propertyDefinitions\", \"oak:queryIndexDefinition\", \"oak:unstructured\", \"rep:ACE\", \"rep:ACL\", \"rep:AccessControl\", \"rep:AccessControllable\", \"rep:Activities\", \"rep:Authorizable\", \"rep:AuthorizableFolder\", \"rep:Configurations\", \"rep:DenyACE\", \"rep:GrantACE\", \"rep:Group\", \"rep:Impersonatable\", \"rep:MemberReferences\", \"rep:MemberReferencesList\", \"rep:Members\", \"rep:MergeConflict\", \"rep:PermissionStore\", \"rep:Permissions\", \"rep:Policy\", \"rep:PrincipalAccessControl\", \"rep:Privilege\", \"rep:Privileges\", \"rep:RepoAccessControllable\", \"rep:Restrictions\", \"rep:RetentionManageable\", \"rep:Token\", \"rep:User\", \"rep:VersionReference\", \"rep:nodeTypes\", \"rep:root\", \"rep:system\", \"rep:versionStorage\");\n\n    public static void copy(java.io.File source, org.apache.jackrabbit.oak.spi.state.NodeStore target) throws javax.jcr.RepositoryException {\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.copy(org.apache.jackrabbit.core.config.RepositoryConfig.create(source), target);\n    }\n\n    public static void copy(org.apache.jackrabbit.core.config.RepositoryConfig source, org.apache.jackrabbit.oak.spi.state.NodeStore target) throws javax.jcr.RepositoryException {\n        org.apache.jackrabbit.core.RepositoryContext context = org.apache.jackrabbit.core.RepositoryContext.create(source);\n        try {\n            new org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade(context, target).copy();\n        } finally {\n            context.getRepository().shutdown();\n        }\n    }\n\n    public RepositoryUpgrade(org.apache.jackrabbit.core.RepositoryContext source, org.apache.jackrabbit.oak.spi.state.NodeStore target) {\n        this.source = source;\n        this.target = target;\n    }\n\n    public void copy() throws javax.jcr.RepositoryException {\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Copying repository content from {} to Oak\", source.getRepositoryConfig().getHomeDir());\n        try {\n            org.apache.jackrabbit.oak.spi.state.NodeBuilder builder = target.getRoot().builder();\n            new org.apache.jackrabbit.oak.plugins.nodetype.write.InitialContent().initialize(builder);\n            java.util.Map<java.lang.Integer, java.lang.String> idxToPrefix = copyNamespaces(builder);\n            copyNodeTypes(builder);\n            copyVersionStore(builder, idxToPrefix);\n            copyWorkspaces(builder, idxToPrefix);\n            org.apache.jackrabbit.oak.spi.commit.CommitHook hook = new org.apache.jackrabbit.oak.spi.commit.CompositeHook(new org.apache.jackrabbit.oak.spi.commit.EditorHook(new org.apache.jackrabbit.oak.plugins.nodetype.RegistrationEditorProvider()), new org.apache.jackrabbit.oak.spi.commit.EditorHook(new org.apache.jackrabbit.oak.plugins.index.reference.ReferenceEditorProvider()), new org.apache.jackrabbit.oak.spi.commit.EditorHook(new org.apache.jackrabbit.oak.upgrade.security.GroupEditorProvider()));\n            target.merge(builder, hook, null);\n        } catch (java.lang.Exception e) {\n            throw new javax.jcr.RepositoryException(\"Failed to copy content\", e);\n        }\n    }\n\n    private java.lang.String getOakName(org.apache.jackrabbit.spi.Name name) throws javax.jcr.NamespaceException {\n        java.lang.String uri = name.getNamespaceURI();\n        java.lang.String local = name.getLocalName();\n        if ((uri == null) || uri.isEmpty()) {\n            return local;\n        } else {\n            return (source.getNamespaceRegistry().getPrefix(uri) + \":\") + local;\n        }\n    }\n\n    private java.util.Map<java.lang.Integer, java.lang.String> copyNamespaces(org.apache.jackrabbit.oak.spi.state.NodeBuilder root) throws javax.jcr.RepositoryException {\n        java.util.Map<java.lang.Integer, java.lang.String> idxToPrefix = com.google.common.collect.Maps.newHashMap();\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder system = root.child(org.apache.jackrabbit.JcrConstants.JCR_SYSTEM);\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder namespaces = system.child(NamespaceConstants.REP_NAMESPACES);\n        java.util.Properties registry = loadProperties(\"/namespaces/ns_reg.properties\");\n        java.util.Properties indexes = loadProperties(\"/namespaces/ns_idx.properties\");\n        for (java.lang.String prefixHint : registry.stringPropertyNames()) {\n            java.lang.String uri = registry.getProperty(prefixHint);\n            if (\".empty.key\".equals(prefixHint)) {\n                prefixHint = \"\";\n            }\n            java.lang.String prefix = org.apache.jackrabbit.oak.plugins.name.Namespaces.addCustomMapping(namespaces, uri, prefixHint);\n            java.lang.String index = null;\n            if (uri.isEmpty()) {\n                index = indexes.getProperty(\".empty.key\");\n            }\n            if (index == null) {\n                index = indexes.getProperty(uri);\n            }\n            java.lang.Integer idx;\n            if (index != null) {\n                idx = java.lang.Integer.decode(index);\n            } else {\n                int i = 0;\n                do {\n                    idx = (uri.hashCode() + (i++)) & 0xffffff;\n                } while (idxToPrefix.containsKey(idx) );\n            }\n            com.google.common.base.Preconditions.checkState(idxToPrefix.put(idx, prefix) == null);\n        }\n        org.apache.jackrabbit.oak.plugins.name.Namespaces.buildIndexNode(namespaces);\n        return idxToPrefix;\n    }\n\n    private java.util.Properties loadProperties(java.lang.String path) throws javax.jcr.RepositoryException {\n        java.util.Properties properties = new java.util.Properties();\n        org.apache.jackrabbit.core.fs.FileSystem filesystem = source.getFileSystem();\n        try {\n            if (filesystem.exists(path)) {\n                java.io.InputStream stream = filesystem.getInputStream(path);\n                try {\n                    properties.load(stream);\n                } finally {\n                    stream.close();\n                }\n            }\n        } catch (org.apache.jackrabbit.core.fs.FileSystemException e) {\n            throw new javax.jcr.RepositoryException(e);\n        } catch (java.io.IOException e) {\n            throw new javax.jcr.RepositoryException(e);\n        }\n        return properties;\n    }\n\n    private void copyNodeTypes(org.apache.jackrabbit.oak.spi.state.NodeBuilder root) throws javax.jcr.RepositoryException {\n        org.apache.jackrabbit.core.nodetype.NodeTypeRegistry sourceRegistry = source.getNodeTypeRegistry();\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder system = root.child(org.apache.jackrabbit.JcrConstants.JCR_SYSTEM);\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder types = system.child(org.apache.jackrabbit.oak.upgrade.JCR_NODE_TYPES);\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Copying registered node types\");\n        for (org.apache.jackrabbit.spi.Name name : sourceRegistry.getRegisteredNodeTypes()) {\n            java.lang.String oakName = getOakName(name);\n            if (org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.BUILT_IN_NODE_TYPES.contains(oakName)) {\n                org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"skipping built-on nodetype: {}\", name);\n                continue;\n            }\n            org.apache.jackrabbit.spi.QNodeTypeDefinition def = sourceRegistry.getNodeTypeDef(name);\n            org.apache.jackrabbit.oak.spi.state.NodeBuilder type = types.child(oakName);\n            copyNodeType(def, type);\n        }\n    }\n\n    private void copyNodeType(org.apache.jackrabbit.spi.QNodeTypeDefinition def, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder) throws javax.jcr.NamespaceException {\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.JcrConstants.NT_NODETYPE, org.apache.jackrabbit.oak.upgrade.NAME);\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_NODETYPENAME, getOakName(def.getName()), org.apache.jackrabbit.oak.upgrade.NAME);\n        org.apache.jackrabbit.spi.Name[] supertypes = def.getSupertypes();\n        if ((supertypes != null) && (supertypes.length > 0)) {\n            java.util.List<java.lang.String> names = com.google.common.collect.Lists.newArrayListWithCapacity(supertypes.length);\n            for (org.apache.jackrabbit.spi.Name supertype : supertypes) {\n                names.add(getOakName(supertype));\n            }\n            builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_SUPERTYPES, names, org.apache.jackrabbit.oak.upgrade.NAMES);\n        }\n        builder.setProperty(org.apache.jackrabbit.oak.upgrade.JCR_IS_ABSTRACT, def.isAbstract());\n        builder.setProperty(org.apache.jackrabbit.oak.upgrade.JCR_IS_QUERYABLE, def.isQueryable());\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_ISMIXIN, def.isMixin());\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_HASORDERABLECHILDNODES, def.hasOrderableChildNodes());\n        org.apache.jackrabbit.spi.Name primary = def.getPrimaryItemName();\n        if (primary != null) {\n            builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYITEMNAME, getOakName(primary), org.apache.jackrabbit.oak.upgrade.NAME);\n        }\n        org.apache.jackrabbit.spi.QPropertyDefinition[] properties = def.getPropertyDefs();\n        for (int i = 0; i < properties.length; i++) {\n            java.lang.String name = ((org.apache.jackrabbit.JcrConstants.JCR_PROPERTYDEFINITION + '[') + i) + ']';\n            copyPropertyDefinition(properties[i], builder.child(name));\n        }\n        org.apache.jackrabbit.spi.QNodeDefinition[] childNodes = def.getChildNodeDefs();\n        for (int i = 0; i < childNodes.length; i++) {\n            java.lang.String name = ((org.apache.jackrabbit.JcrConstants.JCR_CHILDNODEDEFINITION + '[') + i) + ']';\n            copyChildNodeDefinition(childNodes[i], builder.child(name));\n        }\n    }\n\n    private void copyPropertyDefinition(org.apache.jackrabbit.spi.QPropertyDefinition def, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder) throws javax.jcr.NamespaceException {\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.JcrConstants.NT_PROPERTYDEFINITION, org.apache.jackrabbit.oak.upgrade.NAME);\n        copyItemDefinition(def, builder);\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_REQUIREDTYPE, org.apache.jackrabbit.oak.api.Type.fromTag(def.getRequiredType(), false).toString());\n        org.apache.jackrabbit.spi.QValueConstraint[] constraints = def.getValueConstraints();\n        if ((constraints != null) && (constraints.length > 0)) {\n            java.util.List<java.lang.String> strings = com.google.common.collect.Lists.newArrayListWithCapacity(constraints.length);\n            for (org.apache.jackrabbit.spi.QValueConstraint constraint : constraints) {\n                strings.add(constraint.getString());\n            }\n            builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_VALUECONSTRAINTS, strings, org.apache.jackrabbit.oak.upgrade.STRINGS);\n        }\n        org.apache.jackrabbit.spi.QValue[] values = def.getDefaultValues();\n        if (values != null) {\n        }\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_MULTIPLE, def.isMultiple());\n        java.util.List<java.lang.String> operators = java.util.Arrays.asList(def.getAvailableQueryOperators());\n        builder.setProperty(org.apache.jackrabbit.oak.upgrade.JCR_AVAILABLE_QUERY_OPERATORS, operators, org.apache.jackrabbit.oak.upgrade.NAMES);\n        builder.setProperty(org.apache.jackrabbit.oak.upgrade.JCR_IS_FULLTEXT_SEARCHABLE, def.isFullTextSearchable());\n        builder.setProperty(org.apache.jackrabbit.oak.upgrade.JCR_IS_QUERY_ORDERABLE, def.isQueryOrderable());\n    }\n\n    private void copyChildNodeDefinition(org.apache.jackrabbit.spi.QNodeDefinition def, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder) throws javax.jcr.NamespaceException {\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE, org.apache.jackrabbit.JcrConstants.NT_CHILDNODEDEFINITION, org.apache.jackrabbit.oak.upgrade.NAME);\n        copyItemDefinition(def, builder);\n        org.apache.jackrabbit.spi.Name[] types = def.getRequiredPrimaryTypes();\n        java.util.List<java.lang.String> names = com.google.common.collect.Lists.newArrayListWithCapacity(types.length);\n        for (org.apache.jackrabbit.spi.Name type : types) {\n            names.add(getOakName(type));\n        }\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_REQUIREDPRIMARYTYPES, names, org.apache.jackrabbit.oak.upgrade.NAMES);\n        org.apache.jackrabbit.spi.Name type = def.getDefaultPrimaryType();\n        if (type != null) {\n            builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_DEFAULTPRIMARYTYPE, getOakName(type), org.apache.jackrabbit.oak.upgrade.NAME);\n        }\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_SAMENAMESIBLINGS, def.allowsSameNameSiblings());\n    }\n\n    private void copyItemDefinition(org.apache.jackrabbit.spi.QItemDefinition def, org.apache.jackrabbit.oak.spi.state.NodeBuilder builder) throws javax.jcr.NamespaceException {\n        org.apache.jackrabbit.spi.Name name = def.getName();\n        if ((name != null) && (!name.equals(org.apache.jackrabbit.oak.upgrade.ANY_NAME))) {\n            builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_NAME, getOakName(name), org.apache.jackrabbit.oak.upgrade.NAME);\n        }\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_AUTOCREATED, def.isAutoCreated());\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_MANDATORY, def.isMandatory());\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_ONPARENTVERSION, javax.jcr.version.OnParentVersionAction.nameFromValue(def.getOnParentVersion()));\n        builder.setProperty(org.apache.jackrabbit.JcrConstants.JCR_PROTECTED, def.isProtected());\n    }\n\n    private void copyVersionStore(org.apache.jackrabbit.oak.spi.state.NodeBuilder root, java.util.Map<java.lang.Integer, java.lang.String> idxToPrefix) throws java.io.IOException, javax.jcr.RepositoryException {\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Copying version histories\");\n        org.apache.jackrabbit.core.persistence.PersistenceManager pm = source.getInternalVersionManager().getPersistenceManager();\n        javax.jcr.NamespaceRegistry nr = source.getNamespaceRegistry();\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder system = root.child(org.apache.jackrabbit.JcrConstants.JCR_SYSTEM);\n        system.setChildNode(org.apache.jackrabbit.JcrConstants.JCR_VERSIONSTORAGE, new org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState(pm, nr, VERSION_STORAGE_NODE_ID));\n        system.setChildNode(\"jcr:activities\", new org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState(pm, nr, ACTIVITIES_NODE_ID));\n    }\n\n    private void copyWorkspaces(org.apache.jackrabbit.oak.spi.state.NodeBuilder root, java.util.Map<java.lang.Integer, java.lang.String> idxToPrefix) throws java.io.IOException, javax.jcr.RepositoryException {\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"Copying default workspace\");\n        org.apache.jackrabbit.core.config.RepositoryConfig config = source.getRepositoryConfig();\n        java.lang.String name = config.getDefaultWorkspaceName();\n        org.apache.jackrabbit.core.persistence.PersistenceManager pm = source.getWorkspaceInfo(name).getPersistenceManager();\n        org.apache.jackrabbit.core.NamespaceRegistryImpl nr = source.getNamespaceRegistry();\n        org.apache.jackrabbit.oak.spi.state.NodeState state = new org.apache.jackrabbit.oak.upgrade.JackrabbitNodeState(pm, nr, ROOT_NODE_ID);\n        for (org.apache.jackrabbit.oak.api.PropertyState property : state.getProperties()) {\n            root.setProperty(property);\n        }\n        for (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry child : state.getChildNodeEntries()) {\n            java.lang.String childName = child.getName();\n            if (!org.apache.jackrabbit.JcrConstants.JCR_SYSTEM.equals(childName)) {\n                root.setChildNode(childName, child.getNodeState());\n            }\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "new org.apache.jackrabbit.oak.plugins.nodetype.write.InitialContent().initialize(builder)",
            "src_parent": "{\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder builder = target.getRoot().builder();\n    new org.apache.jackrabbit.oak.plugins.nodetype.write.InitialContent().initialize(builder);\n    java.util.Map<java.lang.Integer, java.lang.String> idxToPrefix = copyNamespaces(builder);\n    copyNodeTypes(builder);\n    copyVersionStore(builder, idxToPrefix);\n    copyWorkspaces(builder, idxToPrefix);\n    org.apache.jackrabbit.oak.spi.commit.CommitHook hook = new org.apache.jackrabbit.oak.spi.commit.CompositeHook(new org.apache.jackrabbit.oak.spi.commit.EditorHook(new org.apache.jackrabbit.oak.plugins.nodetype.RegistrationEditorProvider()), new org.apache.jackrabbit.oak.spi.commit.EditorHook(new org.apache.jackrabbit.oak.plugins.index.reference.ReferenceEditorProvider()), new org.apache.jackrabbit.oak.spi.commit.EditorHook(new org.apache.jackrabbit.oak.upgrade.security.GroupEditorProvider()));\n    target.merge(builder, hook, null);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.lang.String oakName = getOakName(name)",
            "src_parent": "{\n    java.lang.String oakName = getOakName(name);\n    if (org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.BUILT_IN_NODE_TYPES.contains(oakName)) {\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"skipping built-on nodetype: {}\", name);\n        continue;\n    }\n    org.apache.jackrabbit.spi.QNodeTypeDefinition def = sourceRegistry.getNodeTypeDef(name);\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder type = types.child(oakName);\n    copyNodeType(def, type);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.BUILT_IN_NODE_TYPES.contains(oakName)) {\n    org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"skipping built-on nodetype: {}\", name);\n    continue;\n}",
            "src_parent": "{\n    java.lang.String oakName = getOakName(name);\n    if (org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.BUILT_IN_NODE_TYPES.contains(oakName)) {\n        org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.logger.info(\"skipping built-on nodetype: {}\", name);\n        continue;\n    }\n    org.apache.jackrabbit.spi.QNodeTypeDefinition def = sourceRegistry.getNodeTypeDef(name);\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder type = types.child(oakName);\n    copyNodeType(def, type);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "oakName",
            "src_parent": "types.child(oakName)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "getOakName(name)",
            "dst_parent": "java.lang.String oakName = getOakName(name)",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "getOakName(name)",
            "src_parent": "types.child(getOakName(name))",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "RepositoryUpgrade"
    }
  ],
  "id": "jackrabbit-oak_1beb2a50"
}