{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "removed",
            "dst_parent": "removed = true",
            "dst_parent_type": "Assignment",
            "dst_type": "FieldWrite",
            "operator": "UPD",
            "src": "parent",
            "src_parent": "parent = this",
            "src_parent_type": "Assignment",
            "src_type": "FieldWrite"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "this",
            "src_parent": "parent = this",
            "src_parent_type": "Assignment",
            "src_type": "ThisAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "parent == this",
            "src_parent": "return parent == this",
            "src_parent_type": "Return",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (isRemoved()) {\n    throw new java.lang.IllegalStateException(\"Cannot build the path of a removed tree\");\n}",
            "src_parent": "{\n    if (isRemoved()) {\n        throw new java.lang.IllegalStateException(\"Cannot build the path of a removed tree\");\n    }\n    if (!isRoot()) {\n        parent.buildPath(sb);\n        sb.append('/').append(name);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private boolean removed;",
            "src_parent": "public class TreeImpl implements org.apache.jackrabbit.oak.api.Tree , org.apache.jackrabbit.oak.core.RootImpl.PurgeListener {\n    private final org.apache.jackrabbit.oak.core.RootImpl root;\n\n    private org.apache.jackrabbit.oak.core.TreeImpl parent;\n\n    private boolean removed;\n\n    private java.lang.String name;\n\n    org.apache.jackrabbit.oak.spi.state.NodeBuilder nodeBuilder;\n\n    private final org.apache.jackrabbit.oak.core.TreeImpl.Children children = new org.apache.jackrabbit.oak.core.TreeImpl.Children();\n\n    private TreeImpl(org.apache.jackrabbit.oak.core.RootImpl root, org.apache.jackrabbit.oak.core.TreeImpl parent, java.lang.String name) {\n        assert root != null;\n        assert name != null;\n        this.root = root;\n        this.parent = parent;\n        this.name = name;\n    }\n\n    @javax.annotation.Nonnull\n    static org.apache.jackrabbit.oak.core.TreeImpl createRoot(final org.apache.jackrabbit.oak.core.RootImpl root) {\n        return new org.apache.jackrabbit.oak.core.TreeImpl(root, null, \"\") {\n            @java.lang.Override\n            protected org.apache.jackrabbit.oak.spi.state.NodeState getBaseState() {\n                return root.getBaseState();\n            }\n\n            @java.lang.Override\n            protected synchronized org.apache.jackrabbit.oak.spi.state.NodeBuilder getNodeBuilder() {\n                if (nodeBuilder == null) {\n                    nodeBuilder = root.createRootBuilder();\n                    root.addListener(this);\n                }\n                return nodeBuilder;\n            }\n        };\n    }\n\n    @java.lang.Override\n    public java.lang.String getName() {\n        return name;\n    }\n\n    @java.lang.Override\n    public boolean isRoot() {\n        return parent == null;\n    }\n\n    @java.lang.Override\n    public java.lang.String getPath() {\n        if (isRoot()) {\n            return \"/\";\n        }\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        buildPath(sb);\n        return sb.toString();\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.api.Tree getParent() {\n        if ((parent != null) && canRead(parent)) {\n            return parent;\n        } else {\n            return null;\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.api.PropertyState getProperty(java.lang.String name) {\n        if (canReadProperty(name)) {\n            return internalGetProperty(name);\n        } else {\n            return null;\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.core.Status getPropertyStatus(java.lang.String name) {\n        if (canReadProperty(name)) {\n            return internalGetPropertyStatus(name);\n        } else {\n            return null;\n        }\n    }\n\n    @java.lang.Override\n    public boolean hasProperty(java.lang.String name) {\n        return getProperty(name) != null;\n    }\n\n    @java.lang.Override\n    public long getPropertyCount() {\n        return getNodeBuilder().getPropertyCount();\n    }\n\n    @java.lang.Override\n    public java.lang.Iterable<? extends org.apache.jackrabbit.oak.api.PropertyState> getProperties() {\n        return com.google.common.collect.Iterables.filter(getNodeBuilder().getProperties(), new com.google.common.base.Predicate<org.apache.jackrabbit.oak.api.PropertyState>() {\n            @java.lang.Override\n            public boolean apply(org.apache.jackrabbit.oak.api.PropertyState propertyState) {\n                return (propertyState != null) && canReadProperty(propertyState.getName());\n            }\n        });\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.core.TreeImpl getChild(java.lang.String name) {\n        org.apache.jackrabbit.oak.core.TreeImpl child = internalGetChild(name);\n        if ((child != null) && canRead(child)) {\n            return child;\n        } else {\n            return null;\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.core.Status getStatus() {\n        if (isRemoved()) {\n            return Status.REMOVED;\n        }\n        org.apache.jackrabbit.oak.spi.state.NodeState baseState = getBaseState();\n        if (baseState == null) {\n            return Status.NEW;\n        } else if (org.apache.jackrabbit.oak.core.TreeImpl.isSame(baseState, getNodeState())) {\n            return Status.EXISTING;\n        } else {\n            return Status.MODIFIED;\n        }\n    }\n\n    @java.lang.Override\n    public boolean hasChild(java.lang.String name) {\n        return getChild(name) != null;\n    }\n\n    @java.lang.Override\n    public long getChildrenCount() {\n        return getNodeBuilder().getChildNodeCount();\n    }\n\n    @java.lang.Override\n    public java.lang.Iterable<org.apache.jackrabbit.oak.api.Tree> getChildren() {\n        return com.google.common.collect.Iterables.filter(com.google.common.collect.Iterables.transform(getNodeBuilder().getChildNodeNames(), new com.google.common.base.Function<java.lang.String, org.apache.jackrabbit.oak.api.Tree>() {\n            @java.lang.Override\n            public org.apache.jackrabbit.oak.api.Tree apply(java.lang.String input) {\n                org.apache.jackrabbit.oak.core.TreeImpl child = children.get(input);\n                if (child == null) {\n                    child = new org.apache.jackrabbit.oak.core.TreeImpl(root, TreeImpl.this, input);\n                    children.put(input, child);\n                }\n                return child;\n            }\n        }), new com.google.common.base.Predicate<org.apache.jackrabbit.oak.api.Tree>() {\n            @java.lang.Override\n            public boolean apply(org.apache.jackrabbit.oak.api.Tree tree) {\n                return (tree != null) && canRead(tree);\n            }\n        });\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.api.Tree addChild(java.lang.String name) {\n        if (!hasChild(name)) {\n            org.apache.jackrabbit.oak.spi.state.NodeBuilder builder = getNodeBuilder();\n            builder.setNode(name, org.apache.jackrabbit.oak.core.EMPTY_NODE);\n            root.purge();\n        }\n        org.apache.jackrabbit.oak.core.TreeImpl child = getChild(name);\n        assert child != null;\n        return child;\n    }\n\n    @java.lang.Override\n    public boolean remove() {\n        if (isRemoved()) {\n            throw new java.lang.IllegalStateException(\"Cannot remove removed tree\");\n        }\n        if ((!isRoot()) && parent.hasChild(name)) {\n            org.apache.jackrabbit.oak.spi.state.NodeBuilder builder = parent.getNodeBuilder();\n            builder.removeNode(name);\n            parent.children.remove(name);\n            removed = true;\n            root.purge();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.api.PropertyState setProperty(java.lang.String name, org.apache.jackrabbit.oak.api.CoreValue value) {\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder builder = getNodeBuilder();\n        builder.setProperty(name, value);\n        root.purge();\n        org.apache.jackrabbit.oak.api.PropertyState property = getProperty(name);\n        assert property != null;\n        return property;\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.api.PropertyState setProperty(java.lang.String name, java.util.List<org.apache.jackrabbit.oak.api.CoreValue> values) {\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder builder = getNodeBuilder();\n        builder.setProperty(name, values);\n        root.purge();\n        org.apache.jackrabbit.oak.api.PropertyState property = getProperty(name);\n        assert property != null;\n        return property;\n    }\n\n    @java.lang.Override\n    public void removeProperty(java.lang.String name) {\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder builder = getNodeBuilder();\n        builder.removeProperty(name);\n        root.purge();\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.api.TreeLocation getLocation() {\n        return new org.apache.jackrabbit.oak.core.TreeImpl.NodeLocation(this);\n    }\n\n    @java.lang.Override\n    public void purged() {\n        nodeBuilder = null;\n    }\n\n    @javax.annotation.CheckForNull\n    protected org.apache.jackrabbit.oak.spi.state.NodeState getBaseState() {\n        if (isRemoved()) {\n            throw new java.lang.IllegalStateException(\"Cannot get the base state of a removed tree\");\n        }\n        org.apache.jackrabbit.oak.spi.state.NodeState parentBaseState = parent.getBaseState();\n        return parentBaseState == null ? null : parentBaseState.getChildNode(name);\n    }\n\n    @javax.annotation.Nonnull\n    protected synchronized org.apache.jackrabbit.oak.spi.state.NodeBuilder getNodeBuilder() {\n        if (isRemoved()) {\n            throw new java.lang.IllegalStateException(\"Cannot get a builder for a removed tree\");\n        }\n        if (nodeBuilder == null) {\n            nodeBuilder = parent.getNodeBuilder().getChildBuilder(name);\n            root.addListener(this);\n        }\n        return nodeBuilder;\n    }\n\n    void moveTo(org.apache.jackrabbit.oak.core.TreeImpl destParent, java.lang.String destName) {\n        if (isRemoved()) {\n            throw new java.lang.IllegalStateException(\"Cannot move removed tree\");\n        }\n        parent.children.remove(name);\n        destParent.children.put(destName, this);\n        name = destName;\n        parent = destParent;\n    }\n\n    @javax.annotation.Nonnull\n    org.apache.jackrabbit.oak.spi.state.NodeState getNodeState() {\n        return getNodeBuilder().getNodeState();\n    }\n\n    @javax.annotation.CheckForNull\n    org.apache.jackrabbit.oak.core.TreeImpl getTree(java.lang.String path) {\n        assert path.startsWith(\"/\");\n        org.apache.jackrabbit.oak.core.TreeImpl child = this;\n        for (java.lang.String name : elements(path)) {\n            child = child.internalGetChild(name);\n            if (child == null) {\n                return null;\n            }\n        }\n        return canRead(child) ? child : null;\n    }\n\n    private org.apache.jackrabbit.oak.core.TreeImpl internalGetChild(java.lang.String childName) {\n        org.apache.jackrabbit.oak.core.TreeImpl child = children.get(childName);\n        if ((child == null) && getNodeBuilder().hasChildNode(childName)) {\n            child = new org.apache.jackrabbit.oak.core.TreeImpl(root, this, childName);\n            children.put(childName, child);\n        }\n        return child;\n    }\n\n    private org.apache.jackrabbit.oak.api.PropertyState internalGetProperty(java.lang.String propertyName) {\n        return getNodeBuilder().getProperty(propertyName);\n    }\n\n    private org.apache.jackrabbit.oak.core.Status internalGetPropertyStatus(java.lang.String name) {\n        if (isRemoved()) {\n            return Status.REMOVED;\n        }\n        org.apache.jackrabbit.oak.spi.state.NodeState baseState = getBaseState();\n        boolean exists = internalGetProperty(name) != null;\n        if (baseState == null) {\n            if (exists) {\n                return Status.NEW;\n            } else {\n                return null;\n            }\n        } else if (exists) {\n            if (baseState.getProperty(name) == null) {\n                return Status.NEW;\n            } else {\n                org.apache.jackrabbit.oak.api.PropertyState base = baseState.getProperty(name);\n                org.apache.jackrabbit.oak.api.PropertyState head = getProperty(name);\n                if (base == null ? head == null : base.equals(head)) {\n                    return Status.EXISTING;\n                } else {\n                    return Status.MODIFIED;\n                }\n            }\n        } else if (baseState.getProperty(name) == null) {\n            return null;\n        } else {\n            return Status.REMOVED;\n        }\n    }\n\n    private boolean isRemoved() {\n        return removed || ((parent != null) && parent.isRemoved());\n    }\n\n    private void buildPath(java.lang.StringBuilder sb) {\n        if (!isRoot()) {\n            parent.buildPath(sb);\n            sb.append('/').append(name);\n        }\n    }\n\n    private boolean canRead(org.apache.jackrabbit.oak.api.Tree tree) {\n        return root.getPermissions().canRead(tree.getPath(), false);\n    }\n\n    private boolean canReadProperty(java.lang.String name) {\n        java.lang.String path = org.apache.jackrabbit.oak.commons.PathUtils.concat(getPath(), name);\n        return root.getPermissions().canRead(path, true);\n    }\n\n    private static boolean isSame(org.apache.jackrabbit.oak.spi.state.NodeState state1, org.apache.jackrabbit.oak.spi.state.NodeState state2) {\n        final boolean[] isDirty = new boolean[]{ false };\n        state2.compareAgainstBaseState(state1, new org.apache.jackrabbit.oak.spi.state.NodeStateDiff() {\n            @java.lang.Override\n            public void propertyAdded(org.apache.jackrabbit.oak.api.PropertyState after) {\n                isDirty[0] = true;\n            }\n\n            @java.lang.Override\n            public void propertyChanged(org.apache.jackrabbit.oak.api.PropertyState before, org.apache.jackrabbit.oak.api.PropertyState after) {\n                isDirty[0] = true;\n            }\n\n            @java.lang.Override\n            public void propertyDeleted(org.apache.jackrabbit.oak.api.PropertyState before) {\n                isDirty[0] = true;\n            }\n\n            @java.lang.Override\n            public void childNodeAdded(java.lang.String name, org.apache.jackrabbit.oak.spi.state.NodeState after) {\n                isDirty[0] = true;\n            }\n\n            @java.lang.Override\n            public void childNodeChanged(java.lang.String name, org.apache.jackrabbit.oak.spi.state.NodeState before, org.apache.jackrabbit.oak.spi.state.NodeState after) {\n            }\n\n            @java.lang.Override\n            public void childNodeDeleted(java.lang.String name, org.apache.jackrabbit.oak.spi.state.NodeState before) {\n                isDirty[0] = true;\n            }\n        });\n        return !isDirty[0];\n    }\n\n    private static class Children implements java.lang.Iterable<org.apache.jackrabbit.oak.core.TreeImpl> {\n        private final java.util.Map<java.lang.String, org.apache.jackrabbit.oak.core.TreeImpl> children = com.google.common.cache.CacheBuilder.newBuilder().weakValues().<java.lang.String, org.apache.jackrabbit.oak.core.TreeImpl>build().asMap();\n\n        private final java.util.concurrent.locks.Lock readLock;\n\n        private final java.util.concurrent.locks.Lock writeLock;\n\n        {\n            java.util.concurrent.locks.ReadWriteLock lock = new java.util.concurrent.locks.ReentrantReadWriteLock();\n            readLock = lock.readLock();\n            writeLock = lock.writeLock();\n        }\n\n        public void put(java.lang.String name, org.apache.jackrabbit.oak.core.TreeImpl tree) {\n            writeLock.lock();\n            try {\n                children.put(name, tree);\n            } finally {\n                writeLock.unlock();\n            }\n        }\n\n        public org.apache.jackrabbit.oak.core.TreeImpl get(java.lang.String name) {\n            readLock.lock();\n            try {\n                return children.get(name);\n            } finally {\n                readLock.unlock();\n            }\n        }\n\n        public void remove(java.lang.String name) {\n            writeLock.lock();\n            try {\n                children.remove(name);\n            } finally {\n                writeLock.unlock();\n            }\n        }\n\n        @java.lang.Override\n        public java.util.Iterator<org.apache.jackrabbit.oak.core.TreeImpl> iterator() {\n            return children.values().iterator();\n        }\n    }\n\n    public class NodeLocation implements org.apache.jackrabbit.oak.api.TreeLocation {\n        private final org.apache.jackrabbit.oak.core.TreeImpl tree;\n\n        private NodeLocation(org.apache.jackrabbit.oak.core.TreeImpl tree) {\n            assert tree != null;\n            this.tree = tree;\n        }\n\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.api.TreeLocation getParent() {\n            return tree.parent == null ? org.apache.jackrabbit.oak.core.TreeImpl.NullLocation.INSTANCE : new org.apache.jackrabbit.oak.core.TreeImpl.NodeLocation(tree.parent);\n        }\n\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.api.TreeLocation getChild(java.lang.String relPath) {\n            assert !relPath.startsWith(\"/\");\n            if (relPath.isEmpty()) {\n                return this;\n            }\n            org.apache.jackrabbit.oak.core.TreeImpl child = tree;\n            java.lang.String parentPath = org.apache.jackrabbit.oak.commons.PathUtils.getParentPath(relPath);\n            for (java.lang.String name : org.apache.jackrabbit.oak.commons.PathUtils.elements(parentPath)) {\n                child = child.internalGetChild(name);\n                if (child == null) {\n                    return org.apache.jackrabbit.oak.core.TreeImpl.NullLocation.INSTANCE;\n                }\n            }\n            java.lang.String name = org.apache.jackrabbit.oak.commons.PathUtils.getName(relPath);\n            org.apache.jackrabbit.oak.api.PropertyState property = child.internalGetProperty(name);\n            if (property != null) {\n                return new org.apache.jackrabbit.oak.core.TreeImpl.PropertyLocation(new org.apache.jackrabbit.oak.core.TreeImpl.NodeLocation(child), property);\n            } else {\n                child = child.internalGetChild(name);\n                return child == null ? org.apache.jackrabbit.oak.core.TreeImpl.NullLocation.INSTANCE : new org.apache.jackrabbit.oak.core.TreeImpl.NodeLocation(child);\n            }\n        }\n\n        @java.lang.Override\n        public java.lang.String getPath() {\n            return tree.getPath();\n        }\n\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.api.Tree getTree() {\n            return canRead(tree) ? tree : null;\n        }\n\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.api.PropertyState getProperty() {\n            return null;\n        }\n\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.core.Status getStatus() {\n            return tree.getStatus();\n        }\n    }\n\n    public class PropertyLocation implements org.apache.jackrabbit.oak.api.TreeLocation {\n        private final org.apache.jackrabbit.oak.core.TreeImpl.NodeLocation parent;\n\n        private final org.apache.jackrabbit.oak.api.PropertyState property;\n\n        private PropertyLocation(org.apache.jackrabbit.oak.core.TreeImpl.NodeLocation parent, org.apache.jackrabbit.oak.api.PropertyState property) {\n            assert parent != null;\n            assert property != null;\n            this.parent = parent;\n            this.property = property;\n        }\n\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.api.TreeLocation getParent() {\n            return parent;\n        }\n\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.api.TreeLocation getChild(java.lang.String relPath) {\n            return org.apache.jackrabbit.oak.core.TreeImpl.NullLocation.INSTANCE;\n        }\n\n        @java.lang.Override\n        public java.lang.String getPath() {\n            return org.apache.jackrabbit.oak.commons.PathUtils.concat(parent.getPath(), property.getName());\n        }\n\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.api.Tree getTree() {\n            return null;\n        }\n\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.api.PropertyState getProperty() {\n            return root.getPermissions().canRead(getPath(), true) ? property : null;\n        }\n\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.core.Status getStatus() {\n            return parent.tree.internalGetPropertyStatus(property.getName());\n        }\n\n        public boolean setValue(org.apache.jackrabbit.oak.api.CoreValue value) {\n            if (canWrite()) {\n                parent.tree.setProperty(property.getName(), value);\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        public boolean setValues(java.util.List<org.apache.jackrabbit.oak.api.CoreValue> values) {\n            if (canWrite()) {\n                parent.tree.setProperty(property.getName(), values);\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        public boolean remove() {\n            if (canWrite()) {\n                parent.tree.removeProperty(property.getName());\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        private boolean canRead() {\n            return root.getPermissions().canRead(getPath(), true);\n        }\n\n        private boolean canWrite() {\n            return canRead();\n        }\n    }\n\n    public static class NullLocation implements org.apache.jackrabbit.oak.api.TreeLocation {\n        public static final org.apache.jackrabbit.oak.core.TreeImpl.NullLocation INSTANCE = new org.apache.jackrabbit.oak.core.TreeImpl.NullLocation();\n\n        private NullLocation() {\n        }\n\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.api.TreeLocation getParent() {\n            return this;\n        }\n\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.api.TreeLocation getChild(java.lang.String relPath) {\n            return this;\n        }\n\n        @java.lang.Override\n        public java.lang.String getPath() {\n            return null;\n        }\n\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.api.Tree getTree() {\n            return null;\n        }\n\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.api.PropertyState getProperty() {\n            return null;\n        }\n\n        @java.lang.Override\n        public org.apache.jackrabbit.oak.core.Status getStatus() {\n            return null;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (isRemoved()) {\n    return Status.REMOVED;\n}",
            "src_parent": "{\n    if (isRemoved()) {\n        return Status.REMOVED;\n    }\n    org.apache.jackrabbit.oak.spi.state.NodeState baseState = getBaseState();\n    boolean exists = internalGetProperty(name) != null;\n    if (baseState == null) {\n        if (exists) {\n            return Status.NEW;\n        } else {\n            return null;\n        }\n    } else if (exists) {\n        if (baseState.getProperty(name) == null) {\n            return Status.NEW;\n        } else {\n            org.apache.jackrabbit.oak.api.PropertyState base = baseState.getProperty(name);\n            org.apache.jackrabbit.oak.api.PropertyState head = getProperty(name);\n            if (base == null ? head == null : base.equals(head)) {\n                return Status.EXISTING;\n            } else {\n                return Status.MODIFIED;\n            }\n        }\n    } else if (baseState.getProperty(name) == null) {\n        return null;\n    } else {\n        return Status.REMOVED;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "removed || ((parent != null) && parent.isRemoved())",
            "src_parent": "return removed || ((parent != null) && parent.isRemoved())",
            "src_parent_type": "Return",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "true",
            "src_parent": "removed = true",
            "src_parent_type": "Assignment",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "isRemoved()",
            "dst_parent": "if (isRemoved()) {\n    return Status.REMOVED;\n}",
            "dst_parent_type": "If",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "isRemoved()",
            "src_parent": "if (isRemoved()) {\n    throw new java.lang.IllegalStateException(\"Cannot build the path of a removed tree\");\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "parent",
            "dst_parent": "(parent != null)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "parent",
            "src_parent": "parent == this",
            "src_parent_type": "BinaryOperator",
            "src_type": "FieldRead"
          }
        }
      ],
      "file_name": "TreeImpl"
    }
  ],
  "id": "jackrabbit-oak_db19e70f"
}