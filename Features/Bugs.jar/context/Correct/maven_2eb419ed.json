{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "throw new java.lang.IllegalStateException(\"Failed to build parent project for \" + getId(), e)",
            "src_parent": "{\n    throw new java.lang.IllegalStateException(\"Failed to build parent project for \" + getId(), e);\n}",
            "src_parent_type": "Block",
            "src_type": "Throw"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "throw new java.lang.IllegalStateException(\"Failed to build parent project for \" + getId(), e)",
            "src_parent": "{\n    throw new java.lang.IllegalStateException(\"Failed to build parent project for \" + getId(), e);\n}",
            "src_parent_type": "Block",
            "src_type": "Throw"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static final org.apache.maven.project.MavenProject ERROR_BUILDING_PARENT = new org.apache.maven.project.MavenProject();",
            "src_parent": "public class MavenProject implements java.lang.Cloneable {\n    public static final java.lang.String EMPTY_PROJECT_GROUP_ID = \"unknown\";\n\n    public static final java.lang.String EMPTY_PROJECT_ARTIFACT_ID = \"empty-project\";\n\n    public static final java.lang.String EMPTY_PROJECT_VERSION = \"0\";\n\n    private static final org.apache.maven.project.MavenProject ERROR_BUILDING_PARENT = new org.apache.maven.project.MavenProject();\n\n    private org.apache.maven.model.Model model;\n\n    private org.apache.maven.project.MavenProject parent;\n\n    private java.io.File file;\n\n    private java.util.Set<org.apache.maven.artifact.Artifact> resolvedArtifacts;\n\n    private org.apache.maven.artifact.resolver.filter.ArtifactFilter artifactFilter;\n\n    private java.util.Set<org.apache.maven.artifact.Artifact> artifacts;\n\n    private org.apache.maven.artifact.Artifact parentArtifact;\n\n    private java.util.Set<org.apache.maven.artifact.Artifact> pluginArtifacts;\n\n    private java.util.List<org.apache.maven.artifact.repository.ArtifactRepository> remoteArtifactRepositories;\n\n    private java.util.List<org.apache.maven.artifact.repository.ArtifactRepository> pluginArtifactRepositories;\n\n    private java.util.List<org.eclipse.aether.repository.RemoteRepository> remoteProjectRepositories;\n\n    private java.util.List<org.eclipse.aether.repository.RemoteRepository> remotePluginRepositories;\n\n    private java.util.List<org.apache.maven.artifact.Artifact> attachedArtifacts;\n\n    private org.apache.maven.project.MavenProject executionProject;\n\n    private java.util.List<org.apache.maven.project.MavenProject> collectedProjects;\n\n    private java.util.List<java.lang.String> compileSourceRoots = new java.util.ArrayList<java.lang.String>();\n\n    private java.util.List<java.lang.String> testCompileSourceRoots = new java.util.ArrayList<java.lang.String>();\n\n    private java.util.List<java.lang.String> scriptSourceRoots = new java.util.ArrayList<java.lang.String>();\n\n    private org.apache.maven.artifact.repository.ArtifactRepository releaseArtifactRepository;\n\n    private org.apache.maven.artifact.repository.ArtifactRepository snapshotArtifactRepository;\n\n    private java.util.List<org.apache.maven.model.Profile> activeProfiles = new java.util.ArrayList<org.apache.maven.model.Profile>();\n\n    private java.util.Map<java.lang.String, java.util.List<java.lang.String>> injectedProfileIds = new java.util.LinkedHashMap<java.lang.String, java.util.List<java.lang.String>>();\n\n    private java.util.Set<org.apache.maven.artifact.Artifact> dependencyArtifacts;\n\n    private org.apache.maven.artifact.Artifact artifact;\n\n    private java.util.Map<java.lang.String, org.apache.maven.artifact.Artifact> artifactMap;\n\n    private org.apache.maven.model.Model originalModel;\n\n    private java.util.Map<java.lang.String, org.apache.maven.artifact.Artifact> pluginArtifactMap;\n\n    private java.util.Set<org.apache.maven.artifact.Artifact> reportArtifacts;\n\n    private java.util.Map<java.lang.String, org.apache.maven.artifact.Artifact> reportArtifactMap;\n\n    private java.util.Set<org.apache.maven.artifact.Artifact> extensionArtifacts;\n\n    private java.util.Map<java.lang.String, org.apache.maven.artifact.Artifact> extensionArtifactMap;\n\n    private java.util.Map<java.lang.String, org.apache.maven.artifact.Artifact> managedVersionMap;\n\n    private java.util.Map<java.lang.String, org.apache.maven.project.MavenProject> projectReferences = new java.util.HashMap<java.lang.String, org.apache.maven.project.MavenProject>();\n\n    private boolean executionRoot;\n\n    private java.util.Map<java.lang.String, java.lang.String> moduleAdjustments;\n\n    private org.apache.maven.project.ProjectBuilder mavenProjectBuilder;\n\n    private org.apache.maven.project.ProjectBuildingRequest projectBuilderConfiguration;\n\n    private org.apache.maven.repository.RepositorySystem repositorySystem;\n\n    private java.io.File parentFile;\n\n    private java.util.Map<java.lang.String, java.lang.Object> context;\n\n    private org.codehaus.plexus.classworlds.realm.ClassRealm classRealm;\n\n    private org.eclipse.aether.graph.DependencyFilter extensionDependencyFilter;\n\n    private final java.util.Set<java.lang.String> lifecyclePhases = java.util.Collections.synchronizedSet(new java.util.LinkedHashSet<java.lang.String>());\n\n    private org.codehaus.plexus.logging.Logger logger;\n\n    public MavenProject() {\n        org.apache.maven.model.Model model = new org.apache.maven.model.Model();\n        model.setGroupId(org.apache.maven.project.MavenProject.EMPTY_PROJECT_GROUP_ID);\n        model.setArtifactId(org.apache.maven.project.MavenProject.EMPTY_PROJECT_ARTIFACT_ID);\n        model.setVersion(org.apache.maven.project.MavenProject.EMPTY_PROJECT_VERSION);\n        setModel(model);\n    }\n\n    public MavenProject(org.apache.maven.model.Model model) {\n        setModel(model);\n    }\n\n    @java.lang.Deprecated\n    public MavenProject(org.apache.maven.project.MavenProject project) {\n        repositorySystem = project.repositorySystem;\n        logger = project.logger;\n        mavenProjectBuilder = project.mavenProjectBuilder;\n        projectBuilderConfiguration = project.projectBuilderConfiguration;\n        deepCopy(project);\n    }\n\n    @java.lang.Deprecated\n    public MavenProject(org.apache.maven.model.Model model, org.apache.maven.repository.RepositorySystem repositorySystem) {\n        this.repositorySystem = repositorySystem;\n        setModel(model);\n    }\n\n    public java.io.File getParentFile() {\n        return parentFile;\n    }\n\n    public void setParentFile(java.io.File parentFile) {\n        this.parentFile = parentFile;\n    }\n\n    MavenProject(org.apache.maven.repository.RepositorySystem repositorySystem, org.apache.maven.project.ProjectBuilder mavenProjectBuilder, org.apache.maven.project.ProjectBuildingRequest projectBuilderConfiguration, org.codehaus.plexus.logging.Logger logger) {\n        if (repositorySystem == null) {\n            throw new java.lang.IllegalArgumentException(\"mavenTools: null\");\n        }\n        this.mavenProjectBuilder = mavenProjectBuilder;\n        this.projectBuilderConfiguration = projectBuilderConfiguration;\n        this.repositorySystem = repositorySystem;\n        this.logger = logger;\n    }\n\n    @java.lang.Deprecated\n    public java.util.Set<org.apache.maven.artifact.Artifact> createArtifacts(org.apache.maven.artifact.factory.ArtifactFactory artifactFactory, java.lang.String inheritedScope, org.apache.maven.artifact.resolver.filter.ArtifactFilter filter) throws org.apache.maven.project.artifact.InvalidDependencyVersionException {\n        return org.apache.maven.project.artifact.MavenMetadataSource.createArtifacts(artifactFactory, getDependencies(), inheritedScope, filter, this);\n    }\n\n    public java.lang.String getModulePathAdjustment(org.apache.maven.project.MavenProject moduleProject) throws java.io.IOException {\n        java.lang.String module = moduleProject.getArtifactId();\n        java.io.File moduleFile = moduleProject.getFile();\n        if (moduleFile != null) {\n            java.io.File moduleDir = moduleFile.getCanonicalFile().getParentFile();\n            module = moduleDir.getName();\n        }\n        if (moduleAdjustments == null) {\n            moduleAdjustments = new java.util.HashMap<java.lang.String, java.lang.String>();\n            java.util.List<java.lang.String> modules = getModules();\n            if (modules != null) {\n                for (java.lang.String modulePath : modules) {\n                    java.lang.String moduleName = modulePath;\n                    if (moduleName.endsWith(\"/\") || moduleName.endsWith(\"\\\\\")) {\n                        moduleName = moduleName.substring(0, moduleName.length() - 1);\n                    }\n                    int lastSlash = moduleName.lastIndexOf('/');\n                    if (lastSlash < 0) {\n                        lastSlash = moduleName.lastIndexOf('\\\\');\n                    }\n                    java.lang.String adjustment = null;\n                    if (lastSlash > (-1)) {\n                        moduleName = moduleName.substring(lastSlash + 1);\n                        adjustment = modulePath.substring(0, lastSlash);\n                    }\n                    moduleAdjustments.put(moduleName, adjustment);\n                }\n            }\n        }\n        return moduleAdjustments.get(module);\n    }\n\n    public org.apache.maven.artifact.Artifact getArtifact() {\n        return artifact;\n    }\n\n    public void setArtifact(org.apache.maven.artifact.Artifact artifact) {\n        this.artifact = artifact;\n    }\n\n    public org.apache.maven.model.Model getModel() {\n        return model;\n    }\n\n    public org.apache.maven.project.MavenProject getParent() {\n        if (parent == null) {\n            if (parentFile != null) {\n                checkProjectBuildingRequest();\n                org.apache.maven.project.ProjectBuildingRequest request = new org.apache.maven.project.DefaultProjectBuildingRequest(projectBuilderConfiguration);\n                request.setRemoteRepositories(getRemoteArtifactRepositories());\n                try {\n                    parent = mavenProjectBuilder.build(parentFile, request).getProject();\n                } catch (org.apache.maven.project.ProjectBuildingException e) {\n                    if (logger != null) {\n                        logger.error(\"Failed to build parent project for \" + getId(), e);\n                    }\n                    parent = org.apache.maven.project.MavenProject.ERROR_BUILDING_PARENT;\n                }\n            } else if (model.getParent() != null) {\n                checkProjectBuildingRequest();\n                org.apache.maven.project.ProjectBuildingRequest request = new org.apache.maven.project.DefaultProjectBuildingRequest(projectBuilderConfiguration);\n                request.setRemoteRepositories(getRemoteArtifactRepositories());\n                try {\n                    parent = mavenProjectBuilder.build(getParentArtifact(), request).getProject();\n                } catch (org.apache.maven.project.ProjectBuildingException e) {\n                    if (logger != null) {\n                        logger.error(\"Failed to build parent project for \" + getId(), e);\n                    }\n                    parent = org.apache.maven.project.MavenProject.ERROR_BUILDING_PARENT;\n                }\n            }\n        }\n        return parent == org.apache.maven.project.MavenProject.ERROR_BUILDING_PARENT ? null : parent;\n    }\n\n    public void setParent(org.apache.maven.project.MavenProject parent) {\n        this.parent = parent;\n    }\n\n    public boolean hasParent() {\n        return getParent() != null;\n    }\n\n    public java.io.File getFile() {\n        return file;\n    }\n\n    public void setFile(java.io.File file) {\n        this.file = file;\n    }\n\n    public java.io.File getBasedir() {\n        if (getFile() != null) {\n            return getFile().getParentFile();\n        } else {\n            return null;\n        }\n    }\n\n    public void setDependencies(java.util.List<org.apache.maven.model.Dependency> dependencies) {\n        getModel().setDependencies(dependencies);\n    }\n\n    public java.util.List<org.apache.maven.model.Dependency> getDependencies() {\n        return getModel().getDependencies();\n    }\n\n    public org.apache.maven.model.DependencyManagement getDependencyManagement() {\n        return getModel().getDependencyManagement();\n    }\n\n    private void addPath(java.util.List<java.lang.String> paths, java.lang.String path) {\n        if (path != null) {\n            path = path.trim();\n            if (path.length() > 0) {\n                java.io.File file = new java.io.File(path);\n                if (file.isAbsolute()) {\n                    path = file.getAbsolutePath();\n                } else {\n                    path = new java.io.File(getBasedir(), path).getAbsolutePath();\n                }\n                if (!paths.contains(path)) {\n                    paths.add(path);\n                }\n            }\n        }\n    }\n\n    public void addCompileSourceRoot(java.lang.String path) {\n        addPath(getCompileSourceRoots(), path);\n    }\n\n    public void addScriptSourceRoot(java.lang.String path) {\n        if (path != null) {\n            path = path.trim();\n            if (path.length() != 0) {\n                if (!getScriptSourceRoots().contains(path)) {\n                    getScriptSourceRoots().add(path);\n                }\n            }\n        }\n    }\n\n    public void addTestCompileSourceRoot(java.lang.String path) {\n        addPath(getTestCompileSourceRoots(), path);\n    }\n\n    public java.util.List<java.lang.String> getCompileSourceRoots() {\n        return compileSourceRoots;\n    }\n\n    public java.util.List<java.lang.String> getScriptSourceRoots() {\n        return scriptSourceRoots;\n    }\n\n    public java.util.List<java.lang.String> getTestCompileSourceRoots() {\n        return testCompileSourceRoots;\n    }\n\n    public java.util.List<java.lang.String> getCompileClasspathElements() throws org.apache.maven.artifact.DependencyResolutionRequiredException {\n        java.util.List<java.lang.String> list = new java.util.ArrayList<java.lang.String>(getArtifacts().size() + 1);\n        java.lang.String d = getBuild().getOutputDirectory();\n        if (d != null) {\n            list.add(d);\n        }\n        for (org.apache.maven.artifact.Artifact a : getArtifacts()) {\n            if (a.getArtifactHandler().isAddedToClasspath()) {\n                if ((Artifact.SCOPE_COMPILE.equals(a.getScope()) || Artifact.SCOPE_PROVIDED.equals(a.getScope())) || Artifact.SCOPE_SYSTEM.equals(a.getScope())) {\n                    addArtifactPath(a, list);\n                }\n            }\n        }\n        return list;\n    }\n\n    @java.lang.Deprecated\n    public java.util.List<org.apache.maven.artifact.Artifact> getCompileArtifacts() {\n        java.util.List<org.apache.maven.artifact.Artifact> list = new java.util.ArrayList<org.apache.maven.artifact.Artifact>(getArtifacts().size());\n        for (org.apache.maven.artifact.Artifact a : getArtifacts()) {\n            if (a.getArtifactHandler().isAddedToClasspath()) {\n                if ((Artifact.SCOPE_COMPILE.equals(a.getScope()) || Artifact.SCOPE_PROVIDED.equals(a.getScope())) || Artifact.SCOPE_SYSTEM.equals(a.getScope())) {\n                    list.add(a);\n                }\n            }\n        }\n        return list;\n    }\n\n    @java.lang.Deprecated\n    public java.util.List<org.apache.maven.model.Dependency> getCompileDependencies() {\n        java.util.Set<org.apache.maven.artifact.Artifact> artifacts = getArtifacts();\n        if ((artifacts == null) || artifacts.isEmpty()) {\n            return java.util.Collections.emptyList();\n        }\n        java.util.List<org.apache.maven.model.Dependency> list = new java.util.ArrayList<org.apache.maven.model.Dependency>(artifacts.size());\n        for (org.apache.maven.artifact.Artifact a : getArtifacts()) {\n            if ((Artifact.SCOPE_COMPILE.equals(a.getScope()) || Artifact.SCOPE_PROVIDED.equals(a.getScope())) || Artifact.SCOPE_SYSTEM.equals(a.getScope())) {\n                org.apache.maven.model.Dependency dependency = new org.apache.maven.model.Dependency();\n                dependency.setArtifactId(a.getArtifactId());\n                dependency.setGroupId(a.getGroupId());\n                dependency.setVersion(a.getVersion());\n                dependency.setScope(a.getScope());\n                dependency.setType(a.getType());\n                dependency.setClassifier(a.getClassifier());\n                list.add(dependency);\n            }\n        }\n        return list;\n    }\n\n    public java.util.List<java.lang.String> getTestClasspathElements() throws org.apache.maven.artifact.DependencyResolutionRequiredException {\n        java.util.List<java.lang.String> list = new java.util.ArrayList<java.lang.String>(getArtifacts().size() + 2);\n        java.lang.String d = getBuild().getTestOutputDirectory();\n        if (d != null) {\n            list.add(d);\n        }\n        d = getBuild().getOutputDirectory();\n        if (d != null) {\n            list.add(d);\n        }\n        for (org.apache.maven.artifact.Artifact a : getArtifacts()) {\n            if (a.getArtifactHandler().isAddedToClasspath()) {\n                addArtifactPath(a, list);\n            }\n        }\n        return list;\n    }\n\n    @java.lang.Deprecated\n    public java.util.List<org.apache.maven.artifact.Artifact> getTestArtifacts() {\n        java.util.List<org.apache.maven.artifact.Artifact> list = new java.util.ArrayList<org.apache.maven.artifact.Artifact>(getArtifacts().size());\n        for (org.apache.maven.artifact.Artifact a : getArtifacts()) {\n            if (a.getArtifactHandler().isAddedToClasspath()) {\n                list.add(a);\n            }\n        }\n        return list;\n    }\n\n    @java.lang.Deprecated\n    public java.util.List<org.apache.maven.model.Dependency> getTestDependencies() {\n        java.util.Set<org.apache.maven.artifact.Artifact> artifacts = getArtifacts();\n        if ((artifacts == null) || artifacts.isEmpty()) {\n            return java.util.Collections.emptyList();\n        }\n        java.util.List<org.apache.maven.model.Dependency> list = new java.util.ArrayList<org.apache.maven.model.Dependency>(artifacts.size());\n        for (org.apache.maven.artifact.Artifact a : getArtifacts()) {\n            org.apache.maven.model.Dependency dependency = new org.apache.maven.model.Dependency();\n            dependency.setArtifactId(a.getArtifactId());\n            dependency.setGroupId(a.getGroupId());\n            dependency.setVersion(a.getVersion());\n            dependency.setScope(a.getScope());\n            dependency.setType(a.getType());\n            dependency.setClassifier(a.getClassifier());\n            list.add(dependency);\n        }\n        return list;\n    }\n\n    public java.util.List<java.lang.String> getRuntimeClasspathElements() throws org.apache.maven.artifact.DependencyResolutionRequiredException {\n        java.util.List<java.lang.String> list = new java.util.ArrayList<java.lang.String>(getArtifacts().size() + 1);\n        java.lang.String d = getBuild().getOutputDirectory();\n        if (d != null) {\n            list.add(d);\n        }\n        for (org.apache.maven.artifact.Artifact a : getArtifacts()) {\n            if (a.getArtifactHandler().isAddedToClasspath()) {\n                if (Artifact.SCOPE_COMPILE.equals(a.getScope()) || Artifact.SCOPE_RUNTIME.equals(a.getScope())) {\n                    addArtifactPath(a, list);\n                }\n            }\n        }\n        return list;\n    }\n\n    @java.lang.Deprecated\n    public java.util.List<org.apache.maven.artifact.Artifact> getRuntimeArtifacts() {\n        java.util.List<org.apache.maven.artifact.Artifact> list = new java.util.ArrayList<org.apache.maven.artifact.Artifact>(getArtifacts().size());\n        for (org.apache.maven.artifact.Artifact a : getArtifacts()) {\n            if (a.getArtifactHandler().isAddedToClasspath()) {\n                if (Artifact.SCOPE_COMPILE.equals(a.getScope()) || Artifact.SCOPE_RUNTIME.equals(a.getScope())) {\n                    list.add(a);\n                }\n            }\n        }\n        return list;\n    }\n\n    @java.lang.Deprecated\n    public java.util.List<org.apache.maven.model.Dependency> getRuntimeDependencies() {\n        java.util.Set<org.apache.maven.artifact.Artifact> artifacts = getArtifacts();\n        if ((artifacts == null) || artifacts.isEmpty()) {\n            return java.util.Collections.emptyList();\n        }\n        java.util.List<org.apache.maven.model.Dependency> list = new java.util.ArrayList<org.apache.maven.model.Dependency>(artifacts.size());\n        for (org.apache.maven.artifact.Artifact a : getArtifacts()) {\n            if (Artifact.SCOPE_COMPILE.equals(a.getScope()) || Artifact.SCOPE_RUNTIME.equals(a.getScope())) {\n                org.apache.maven.model.Dependency dependency = new org.apache.maven.model.Dependency();\n                dependency.setArtifactId(a.getArtifactId());\n                dependency.setGroupId(a.getGroupId());\n                dependency.setVersion(a.getVersion());\n                dependency.setScope(a.getScope());\n                dependency.setType(a.getType());\n                dependency.setClassifier(a.getClassifier());\n                list.add(dependency);\n            }\n        }\n        return list;\n    }\n\n    public java.util.List<java.lang.String> getSystemClasspathElements() throws org.apache.maven.artifact.DependencyResolutionRequiredException {\n        java.util.List<java.lang.String> list = new java.util.ArrayList<java.lang.String>(getArtifacts().size());\n        java.lang.String d = getBuild().getOutputDirectory();\n        if (d != null) {\n            list.add(d);\n        }\n        for (org.apache.maven.artifact.Artifact a : getArtifacts()) {\n            if (a.getArtifactHandler().isAddedToClasspath()) {\n                if (Artifact.SCOPE_SYSTEM.equals(a.getScope())) {\n                    addArtifactPath(a, list);\n                }\n            }\n        }\n        return list;\n    }\n\n    @java.lang.Deprecated\n    public java.util.List<org.apache.maven.artifact.Artifact> getSystemArtifacts() {\n        java.util.List<org.apache.maven.artifact.Artifact> list = new java.util.ArrayList<org.apache.maven.artifact.Artifact>(getArtifacts().size());\n        for (org.apache.maven.artifact.Artifact a : getArtifacts()) {\n            if (a.getArtifactHandler().isAddedToClasspath()) {\n                if (Artifact.SCOPE_SYSTEM.equals(a.getScope())) {\n                    list.add(a);\n                }\n            }\n        }\n        return list;\n    }\n\n    @java.lang.Deprecated\n    public java.util.List<org.apache.maven.model.Dependency> getSystemDependencies() {\n        java.util.Set<org.apache.maven.artifact.Artifact> artifacts = getArtifacts();\n        if ((artifacts == null) || artifacts.isEmpty()) {\n            return java.util.Collections.emptyList();\n        }\n        java.util.List<org.apache.maven.model.Dependency> list = new java.util.ArrayList<org.apache.maven.model.Dependency>(artifacts.size());\n        for (org.apache.maven.artifact.Artifact a : getArtifacts()) {\n            if (Artifact.SCOPE_SYSTEM.equals(a.getScope())) {\n                org.apache.maven.model.Dependency dependency = new org.apache.maven.model.Dependency();\n                dependency.setArtifactId(a.getArtifactId());\n                dependency.setGroupId(a.getGroupId());\n                dependency.setVersion(a.getVersion());\n                dependency.setScope(a.getScope());\n                dependency.setType(a.getType());\n                dependency.setClassifier(a.getClassifier());\n                list.add(dependency);\n            }\n        }\n        return list;\n    }\n\n    public void setModelVersion(java.lang.String pomVersion) {\n        getModel().setModelVersion(pomVersion);\n    }\n\n    public java.lang.String getModelVersion() {\n        return getModel().getModelVersion();\n    }\n\n    public java.lang.String getId() {\n        return getModel().getId();\n    }\n\n    public void setGroupId(java.lang.String groupId) {\n        getModel().setGroupId(groupId);\n    }\n\n    public java.lang.String getGroupId() {\n        java.lang.String groupId = getModel().getGroupId();\n        if ((groupId == null) && (getModel().getParent() != null)) {\n            groupId = getModel().getParent().getGroupId();\n        }\n        return groupId;\n    }\n\n    public void setArtifactId(java.lang.String artifactId) {\n        getModel().setArtifactId(artifactId);\n    }\n\n    public java.lang.String getArtifactId() {\n        return getModel().getArtifactId();\n    }\n\n    public void setName(java.lang.String name) {\n        getModel().setName(name);\n    }\n\n    public java.lang.String getName() {\n        if (getModel().getName() != null) {\n            return getModel().getName();\n        } else {\n            return getArtifactId();\n        }\n    }\n\n    public void setVersion(java.lang.String version) {\n        getModel().setVersion(version);\n    }\n\n    public java.lang.String getVersion() {\n        java.lang.String version = getModel().getVersion();\n        if ((version == null) && (getModel().getParent() != null)) {\n            version = getModel().getParent().getVersion();\n        }\n        return version;\n    }\n\n    public java.lang.String getPackaging() {\n        return getModel().getPackaging();\n    }\n\n    public void setPackaging(java.lang.String packaging) {\n        getModel().setPackaging(packaging);\n    }\n\n    public void setInceptionYear(java.lang.String inceptionYear) {\n        getModel().setInceptionYear(inceptionYear);\n    }\n\n    public java.lang.String getInceptionYear() {\n        return getModel().getInceptionYear();\n    }\n\n    public void setUrl(java.lang.String url) {\n        getModel().setUrl(url);\n    }\n\n    public java.lang.String getUrl() {\n        return getModel().getUrl();\n    }\n\n    public org.apache.maven.model.Prerequisites getPrerequisites() {\n        return getModel().getPrerequisites();\n    }\n\n    public void setIssueManagement(org.apache.maven.model.IssueManagement issueManagement) {\n        getModel().setIssueManagement(issueManagement);\n    }\n\n    public org.apache.maven.model.CiManagement getCiManagement() {\n        return getModel().getCiManagement();\n    }\n\n    public void setCiManagement(org.apache.maven.model.CiManagement ciManagement) {\n        getModel().setCiManagement(ciManagement);\n    }\n\n    public org.apache.maven.model.IssueManagement getIssueManagement() {\n        return getModel().getIssueManagement();\n    }\n\n    public void setDistributionManagement(org.apache.maven.model.DistributionManagement distributionManagement) {\n        getModel().setDistributionManagement(distributionManagement);\n    }\n\n    public org.apache.maven.model.DistributionManagement getDistributionManagement() {\n        return getModel().getDistributionManagement();\n    }\n\n    public void setDescription(java.lang.String description) {\n        getModel().setDescription(description);\n    }\n\n    public java.lang.String getDescription() {\n        return getModel().getDescription();\n    }\n\n    public void setOrganization(org.apache.maven.model.Organization organization) {\n        getModel().setOrganization(organization);\n    }\n\n    public org.apache.maven.model.Organization getOrganization() {\n        return getModel().getOrganization();\n    }\n\n    public void setScm(org.apache.maven.model.Scm scm) {\n        getModel().setScm(scm);\n    }\n\n    public org.apache.maven.model.Scm getScm() {\n        return getModel().getScm();\n    }\n\n    public void setMailingLists(java.util.List<org.apache.maven.model.MailingList> mailingLists) {\n        getModel().setMailingLists(mailingLists);\n    }\n\n    public java.util.List<org.apache.maven.model.MailingList> getMailingLists() {\n        return getModel().getMailingLists();\n    }\n\n    public void addMailingList(org.apache.maven.model.MailingList mailingList) {\n        getModel().addMailingList(mailingList);\n    }\n\n    public void setDevelopers(java.util.List<org.apache.maven.model.Developer> developers) {\n        getModel().setDevelopers(developers);\n    }\n\n    public java.util.List<org.apache.maven.model.Developer> getDevelopers() {\n        return getModel().getDevelopers();\n    }\n\n    public void addDeveloper(org.apache.maven.model.Developer developer) {\n        getModel().addDeveloper(developer);\n    }\n\n    public void setContributors(java.util.List<org.apache.maven.model.Contributor> contributors) {\n        getModel().setContributors(contributors);\n    }\n\n    public java.util.List<org.apache.maven.model.Contributor> getContributors() {\n        return getModel().getContributors();\n    }\n\n    public void addContributor(org.apache.maven.model.Contributor contributor) {\n        getModel().addContributor(contributor);\n    }\n\n    public void setBuild(org.apache.maven.model.Build build) {\n        getModel().setBuild(build);\n    }\n\n    public org.apache.maven.model.Build getBuild() {\n        return getModelBuild();\n    }\n\n    public java.util.List<org.apache.maven.model.Resource> getResources() {\n        return getBuild().getResources();\n    }\n\n    public java.util.List<org.apache.maven.model.Resource> getTestResources() {\n        return getBuild().getTestResources();\n    }\n\n    public void addResource(org.apache.maven.model.Resource resource) {\n        getBuild().addResource(resource);\n    }\n\n    public void addTestResource(org.apache.maven.model.Resource testResource) {\n        getBuild().addTestResource(testResource);\n    }\n\n    @java.lang.Deprecated\n    public void setReporting(org.apache.maven.model.Reporting reporting) {\n        getModel().setReporting(reporting);\n    }\n\n    @java.lang.Deprecated\n    public org.apache.maven.model.Reporting getReporting() {\n        return getModel().getReporting();\n    }\n\n    public void setLicenses(java.util.List<org.apache.maven.model.License> licenses) {\n        getModel().setLicenses(licenses);\n    }\n\n    public java.util.List<org.apache.maven.model.License> getLicenses() {\n        return getModel().getLicenses();\n    }\n\n    public void addLicense(org.apache.maven.model.License license) {\n        getModel().addLicense(license);\n    }\n\n    public void setArtifacts(java.util.Set<org.apache.maven.artifact.Artifact> artifacts) {\n        this.artifacts = artifacts;\n        artifactMap = null;\n    }\n\n    public java.util.Set<org.apache.maven.artifact.Artifact> getArtifacts() {\n        if (artifacts == null) {\n            if ((artifactFilter == null) || (resolvedArtifacts == null)) {\n                artifacts = new java.util.LinkedHashSet<org.apache.maven.artifact.Artifact>();\n            } else {\n                artifacts = new java.util.LinkedHashSet<org.apache.maven.artifact.Artifact>(resolvedArtifacts.size() * 2);\n                for (org.apache.maven.artifact.Artifact artifact : resolvedArtifacts) {\n                    if (artifactFilter.include(artifact)) {\n                        artifacts.add(artifact);\n                    }\n                }\n            }\n        }\n        return artifacts;\n    }\n\n    public java.util.Map<java.lang.String, org.apache.maven.artifact.Artifact> getArtifactMap() {\n        if (artifactMap == null) {\n            artifactMap = org.apache.maven.artifact.ArtifactUtils.artifactMapByVersionlessId(getArtifacts());\n        }\n        return artifactMap;\n    }\n\n    public void setPluginArtifacts(java.util.Set<org.apache.maven.artifact.Artifact> pluginArtifacts) {\n        this.pluginArtifacts = pluginArtifacts;\n        this.pluginArtifactMap = null;\n    }\n\n    public java.util.Set<org.apache.maven.artifact.Artifact> getPluginArtifacts() {\n        if (pluginArtifacts != null) {\n            return pluginArtifacts;\n        }\n        pluginArtifacts = new java.util.HashSet<org.apache.maven.artifact.Artifact>();\n        if (repositorySystem != null) {\n            for (org.apache.maven.model.Plugin p : getBuildPlugins()) {\n                org.apache.maven.artifact.Artifact artifact = repositorySystem.createPluginArtifact(p);\n                if (artifact != null) {\n                    pluginArtifacts.add(artifact);\n                }\n            }\n        }\n        pluginArtifactMap = null;\n        return pluginArtifacts;\n    }\n\n    public java.util.Map<java.lang.String, org.apache.maven.artifact.Artifact> getPluginArtifactMap() {\n        if (pluginArtifactMap == null) {\n            pluginArtifactMap = org.apache.maven.artifact.ArtifactUtils.artifactMapByVersionlessId(getPluginArtifacts());\n        }\n        return pluginArtifactMap;\n    }\n\n    @java.lang.Deprecated\n    public void setReportArtifacts(java.util.Set<org.apache.maven.artifact.Artifact> reportArtifacts) {\n        this.reportArtifacts = reportArtifacts;\n        reportArtifactMap = null;\n    }\n\n    @java.lang.Deprecated\n    public java.util.Set<org.apache.maven.artifact.Artifact> getReportArtifacts() {\n        if (reportArtifacts != null) {\n            return reportArtifacts;\n        }\n        reportArtifacts = new java.util.HashSet<org.apache.maven.artifact.Artifact>();\n        if (repositorySystem != null) {\n            for (org.apache.maven.model.ReportPlugin p : getReportPlugins()) {\n                org.apache.maven.model.Plugin pp = new org.apache.maven.model.Plugin();\n                pp.setGroupId(p.getGroupId());\n                pp.setArtifactId(p.getArtifactId());\n                pp.setVersion(p.getVersion());\n                org.apache.maven.artifact.Artifact artifact = repositorySystem.createPluginArtifact(pp);\n                if (artifact != null) {\n                    reportArtifacts.add(artifact);\n                }\n            }\n        }\n        reportArtifactMap = null;\n        return reportArtifacts;\n    }\n\n    @java.lang.Deprecated\n    public java.util.Map<java.lang.String, org.apache.maven.artifact.Artifact> getReportArtifactMap() {\n        if (reportArtifactMap == null) {\n            reportArtifactMap = org.apache.maven.artifact.ArtifactUtils.artifactMapByVersionlessId(getReportArtifacts());\n        }\n        return reportArtifactMap;\n    }\n\n    public void setExtensionArtifacts(java.util.Set<org.apache.maven.artifact.Artifact> extensionArtifacts) {\n        this.extensionArtifacts = extensionArtifacts;\n        extensionArtifactMap = null;\n    }\n\n    public java.util.Set<org.apache.maven.artifact.Artifact> getExtensionArtifacts() {\n        if (extensionArtifacts != null) {\n            return extensionArtifacts;\n        }\n        extensionArtifacts = new java.util.HashSet<org.apache.maven.artifact.Artifact>();\n        java.util.List<org.apache.maven.model.Extension> extensions = getBuildExtensions();\n        if (extensions != null) {\n            for (org.apache.maven.model.Extension ext : extensions) {\n                java.lang.String version;\n                if (org.codehaus.plexus.util.StringUtils.isEmpty(ext.getVersion())) {\n                    version = \"RELEASE\";\n                } else {\n                    version = ext.getVersion();\n                }\n                org.apache.maven.artifact.Artifact artifact = repositorySystem.createArtifact(ext.getGroupId(), ext.getArtifactId(), version, null, \"jar\");\n                if (artifact != null) {\n                    extensionArtifacts.add(artifact);\n                }\n            }\n        }\n        extensionArtifactMap = null;\n        return extensionArtifacts;\n    }\n\n    public java.util.Map<java.lang.String, org.apache.maven.artifact.Artifact> getExtensionArtifactMap() {\n        if (extensionArtifactMap == null) {\n            extensionArtifactMap = org.apache.maven.artifact.ArtifactUtils.artifactMapByVersionlessId(getExtensionArtifacts());\n        }\n        return extensionArtifactMap;\n    }\n\n    public void setParentArtifact(org.apache.maven.artifact.Artifact parentArtifact) {\n        this.parentArtifact = parentArtifact;\n    }\n\n    public org.apache.maven.artifact.Artifact getParentArtifact() {\n        if ((parentArtifact == null) && (model.getParent() != null)) {\n            org.apache.maven.model.Parent p = model.getParent();\n            parentArtifact = repositorySystem.createProjectArtifact(p.getGroupId(), p.getArtifactId(), p.getVersion());\n        }\n        return parentArtifact;\n    }\n\n    public java.util.List<org.apache.maven.model.Repository> getRepositories() {\n        return getModel().getRepositories();\n    }\n\n    @java.lang.Deprecated\n    public java.util.List<org.apache.maven.model.ReportPlugin> getReportPlugins() {\n        if (getModel().getReporting() == null) {\n            return java.util.Collections.emptyList();\n        }\n        return getModel().getReporting().getPlugins();\n    }\n\n    public java.util.List<org.apache.maven.model.Plugin> getBuildPlugins() {\n        if (getModel().getBuild() == null) {\n            return java.util.Collections.emptyList();\n        }\n        return getModel().getBuild().getPlugins();\n    }\n\n    public java.util.List<java.lang.String> getModules() {\n        return getModel().getModules();\n    }\n\n    public org.apache.maven.model.PluginManagement getPluginManagement() {\n        org.apache.maven.model.PluginManagement pluginMgmt = null;\n        org.apache.maven.model.Build build = getModel().getBuild();\n        if (build != null) {\n            pluginMgmt = build.getPluginManagement();\n        }\n        return pluginMgmt;\n    }\n\n    private org.apache.maven.model.Build getModelBuild() {\n        org.apache.maven.model.Build build = getModel().getBuild();\n        if (build == null) {\n            build = new org.apache.maven.model.Build();\n            getModel().setBuild(build);\n        }\n        return build;\n    }\n\n    public void setRemoteArtifactRepositories(java.util.List<org.apache.maven.artifact.repository.ArtifactRepository> remoteArtifactRepositories) {\n        this.remoteArtifactRepositories = remoteArtifactRepositories;\n        this.remoteProjectRepositories = org.apache.maven.RepositoryUtils.toRepos(getRemoteArtifactRepositories());\n    }\n\n    public java.util.List<org.apache.maven.artifact.repository.ArtifactRepository> getRemoteArtifactRepositories() {\n        if (remoteArtifactRepositories == null) {\n            remoteArtifactRepositories = new java.util.ArrayList<org.apache.maven.artifact.repository.ArtifactRepository>();\n        }\n        return remoteArtifactRepositories;\n    }\n\n    public void setPluginArtifactRepositories(java.util.List<org.apache.maven.artifact.repository.ArtifactRepository> pluginArtifactRepositories) {\n        this.pluginArtifactRepositories = pluginArtifactRepositories;\n        this.remotePluginRepositories = org.apache.maven.RepositoryUtils.toRepos(getPluginArtifactRepositories());\n    }\n\n    public java.util.List<org.apache.maven.artifact.repository.ArtifactRepository> getPluginArtifactRepositories() {\n        if (pluginArtifactRepositories == null) {\n            pluginArtifactRepositories = new java.util.ArrayList<org.apache.maven.artifact.repository.ArtifactRepository>();\n        }\n        return pluginArtifactRepositories;\n    }\n\n    public org.apache.maven.artifact.repository.ArtifactRepository getDistributionManagementArtifactRepository() {\n        return getArtifact().isSnapshot() && (getSnapshotArtifactRepository() != null) ? getSnapshotArtifactRepository() : getReleaseArtifactRepository();\n    }\n\n    public java.util.List<org.apache.maven.model.Repository> getPluginRepositories() {\n        return getModel().getPluginRepositories();\n    }\n\n    public java.util.List<org.eclipse.aether.repository.RemoteRepository> getRemoteProjectRepositories() {\n        return remoteProjectRepositories;\n    }\n\n    public java.util.List<org.eclipse.aether.repository.RemoteRepository> getRemotePluginRepositories() {\n        return remotePluginRepositories;\n    }\n\n    public void setActiveProfiles(java.util.List<org.apache.maven.model.Profile> activeProfiles) {\n        this.activeProfiles = activeProfiles;\n    }\n\n    public java.util.List<org.apache.maven.model.Profile> getActiveProfiles() {\n        return activeProfiles;\n    }\n\n    public void setInjectedProfileIds(java.lang.String source, java.util.List<java.lang.String> injectedProfileIds) {\n        if (injectedProfileIds != null) {\n            this.injectedProfileIds.put(source, new java.util.ArrayList<java.lang.String>(injectedProfileIds));\n        } else {\n            this.injectedProfileIds.remove(source);\n        }\n    }\n\n    public java.util.Map<java.lang.String, java.util.List<java.lang.String>> getInjectedProfileIds() {\n        return this.injectedProfileIds;\n    }\n\n    private java.lang.String logStringForArtifactFile(org.apache.maven.artifact.Artifact a) {\n        if (a.getFile() != null) {\n            return a.getFile().getAbsolutePath();\n        } else {\n            return \"(no path)\";\n        }\n    }\n\n    public void addAttachedArtifact(org.apache.maven.artifact.Artifact artifact) throws org.apache.maven.project.DuplicateArtifactAttachmentException {\n        java.util.List<org.apache.maven.artifact.Artifact> attachedArtifacts = getAttachedArtifacts();\n        for (int ax = 0; ax < attachedArtifacts.size(); ax++) {\n            org.apache.maven.artifact.Artifact a = attachedArtifacts.get(ax);\n            if (a.equals(artifact)) {\n                if (logger != null) {\n                    logger.debug(java.lang.String.format(\"Replacing attached artifact %s. Old path %s, new path %s. \", a, logStringForArtifactFile(a), logStringForArtifactFile(artifact)));\n                }\n                attachedArtifacts.set(ax, artifact);\n                return;\n            }\n        }\n        getAttachedArtifacts().add(artifact);\n    }\n\n    public java.util.List<org.apache.maven.artifact.Artifact> getAttachedArtifacts() {\n        if (attachedArtifacts == null) {\n            attachedArtifacts = new java.util.ArrayList<org.apache.maven.artifact.Artifact>();\n        }\n        return attachedArtifacts;\n    }\n\n    public org.codehaus.plexus.util.xml.Xpp3Dom getGoalConfiguration(java.lang.String pluginGroupId, java.lang.String pluginArtifactId, java.lang.String executionId, java.lang.String goalId) {\n        org.codehaus.plexus.util.xml.Xpp3Dom dom = null;\n        if (getBuildPlugins() != null) {\n            for (org.apache.maven.model.Plugin plugin : getBuildPlugins()) {\n                if (pluginGroupId.equals(plugin.getGroupId()) && pluginArtifactId.equals(plugin.getArtifactId())) {\n                    dom = ((org.codehaus.plexus.util.xml.Xpp3Dom) (plugin.getConfiguration()));\n                    if (executionId != null) {\n                        org.apache.maven.model.PluginExecution execution = plugin.getExecutionsAsMap().get(executionId);\n                        if (execution != null) {\n                            dom = ((org.codehaus.plexus.util.xml.Xpp3Dom) (execution.getConfiguration()));\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        if (dom != null) {\n            dom = new org.codehaus.plexus.util.xml.Xpp3Dom(dom);\n        }\n        return dom;\n    }\n\n    @java.lang.Deprecated\n    public org.codehaus.plexus.util.xml.Xpp3Dom getReportConfiguration(java.lang.String pluginGroupId, java.lang.String pluginArtifactId, java.lang.String reportSetId) {\n        org.codehaus.plexus.util.xml.Xpp3Dom dom = null;\n        if (getReportPlugins() != null) {\n            for (org.apache.maven.model.ReportPlugin plugin : getReportPlugins()) {\n                if (pluginGroupId.equals(plugin.getGroupId()) && pluginArtifactId.equals(plugin.getArtifactId())) {\n                    dom = ((org.codehaus.plexus.util.xml.Xpp3Dom) (plugin.getConfiguration()));\n                    if (reportSetId != null) {\n                        org.apache.maven.model.ReportSet reportSet = plugin.getReportSetsAsMap().get(reportSetId);\n                        if (reportSet != null) {\n                            org.codehaus.plexus.util.xml.Xpp3Dom executionConfiguration = ((org.codehaus.plexus.util.xml.Xpp3Dom) (reportSet.getConfiguration()));\n                            if (executionConfiguration != null) {\n                                org.codehaus.plexus.util.xml.Xpp3Dom newDom = new org.codehaus.plexus.util.xml.Xpp3Dom(executionConfiguration);\n                                dom = org.codehaus.plexus.util.xml.Xpp3Dom.mergeXpp3Dom(newDom, dom);\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        if (dom != null) {\n            dom = new org.codehaus.plexus.util.xml.Xpp3Dom(dom);\n        }\n        return dom;\n    }\n\n    public org.apache.maven.project.MavenProject getExecutionProject() {\n        return executionProject == null ? this : executionProject;\n    }\n\n    public void setExecutionProject(org.apache.maven.project.MavenProject executionProject) {\n        this.executionProject = executionProject;\n    }\n\n    public java.util.List<org.apache.maven.project.MavenProject> getCollectedProjects() {\n        return collectedProjects;\n    }\n\n    public void setCollectedProjects(java.util.List<org.apache.maven.project.MavenProject> collectedProjects) {\n        this.collectedProjects = collectedProjects;\n    }\n\n    public java.util.Set<org.apache.maven.artifact.Artifact> getDependencyArtifacts() {\n        return dependencyArtifacts;\n    }\n\n    public void setDependencyArtifacts(java.util.Set<org.apache.maven.artifact.Artifact> dependencyArtifacts) {\n        this.dependencyArtifacts = dependencyArtifacts;\n    }\n\n    public void setReleaseArtifactRepository(org.apache.maven.artifact.repository.ArtifactRepository releaseArtifactRepository) {\n        this.releaseArtifactRepository = releaseArtifactRepository;\n    }\n\n    public void setSnapshotArtifactRepository(org.apache.maven.artifact.repository.ArtifactRepository snapshotArtifactRepository) {\n        this.snapshotArtifactRepository = snapshotArtifactRepository;\n    }\n\n    public void setOriginalModel(org.apache.maven.model.Model originalModel) {\n        this.originalModel = originalModel;\n    }\n\n    public org.apache.maven.model.Model getOriginalModel() {\n        return originalModel;\n    }\n\n    public void setManagedVersionMap(java.util.Map<java.lang.String, org.apache.maven.artifact.Artifact> map) {\n        managedVersionMap = map;\n    }\n\n    public java.util.Map<java.lang.String, org.apache.maven.artifact.Artifact> getManagedVersionMap() {\n        if (managedVersionMap != null) {\n            return managedVersionMap;\n        }\n        java.util.Map<java.lang.String, org.apache.maven.artifact.Artifact> map = null;\n        if (repositorySystem != null) {\n            java.util.List<org.apache.maven.model.Dependency> deps;\n            org.apache.maven.model.DependencyManagement dependencyManagement = getDependencyManagement();\n            if (((dependencyManagement != null) && ((deps = dependencyManagement.getDependencies()) != null)) && (deps.size() > 0)) {\n                map = new java.util.HashMap<java.lang.String, org.apache.maven.artifact.Artifact>();\n                for (org.apache.maven.model.Dependency d : dependencyManagement.getDependencies()) {\n                    org.apache.maven.artifact.Artifact artifact = repositorySystem.createDependencyArtifact(d);\n                    if (artifact == null) {\n                        map = java.util.Collections.emptyMap();\n                    }\n                    map.put(d.getManagementKey(), artifact);\n                }\n            } else {\n                map = java.util.Collections.emptyMap();\n            }\n        }\n        managedVersionMap = map;\n        return managedVersionMap;\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object other) {\n        if (other == this) {\n            return true;\n        } else if (!(other instanceof org.apache.maven.project.MavenProject)) {\n            return false;\n        }\n        org.apache.maven.project.MavenProject that = ((org.apache.maven.project.MavenProject) (other));\n        return (org.apache.maven.project.MavenProject.eq(getArtifactId(), that.getArtifactId()) && org.apache.maven.project.MavenProject.eq(getGroupId(), that.getGroupId())) && org.apache.maven.project.MavenProject.eq(getVersion(), that.getVersion());\n    }\n\n    private static <T> boolean eq(T s1, T s2) {\n        return s1 != null ? s1.equals(s2) : s2 == null;\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        int hash = 17;\n        hash = (31 * hash) + getGroupId().hashCode();\n        hash = (31 * hash) + getArtifactId().hashCode();\n        hash = (31 * hash) + getVersion().hashCode();\n        return hash;\n    }\n\n    public java.util.List<org.apache.maven.model.Extension> getBuildExtensions() {\n        org.apache.maven.model.Build build = getBuild();\n        if ((build == null) || (build.getExtensions() == null)) {\n            return java.util.Collections.emptyList();\n        } else {\n            return build.getExtensions();\n        }\n    }\n\n    public void addProjectReference(org.apache.maven.project.MavenProject project) {\n        projectReferences.put(org.apache.maven.project.MavenProject.getProjectReferenceId(project.getGroupId(), project.getArtifactId(), project.getVersion()), project);\n    }\n\n    @java.lang.Deprecated\n    public void attachArtifact(java.lang.String type, java.lang.String classifier, java.io.File file) {\n    }\n\n    public java.util.Properties getProperties() {\n        return getModel().getProperties();\n    }\n\n    public java.util.List<java.lang.String> getFilters() {\n        return getBuild().getFilters();\n    }\n\n    public java.util.Map<java.lang.String, org.apache.maven.project.MavenProject> getProjectReferences() {\n        return projectReferences;\n    }\n\n    public boolean isExecutionRoot() {\n        return executionRoot;\n    }\n\n    public void setExecutionRoot(boolean executionRoot) {\n        this.executionRoot = executionRoot;\n    }\n\n    public java.lang.String getDefaultGoal() {\n        return getBuild() != null ? getBuild().getDefaultGoal() : null;\n    }\n\n    public org.apache.maven.model.Plugin getPlugin(java.lang.String pluginKey) {\n        return getBuild().getPluginsAsMap().get(pluginKey);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder(128);\n        sb.append(\"MavenProject: \");\n        sb.append(getGroupId());\n        sb.append(\":\");\n        sb.append(getArtifactId());\n        sb.append(\":\");\n        sb.append(getVersion());\n        sb.append(\" @ \");\n        try {\n            sb.append(getFile().getPath());\n        } catch (java.lang.NullPointerException e) {\n        }\n        return sb.toString();\n    }\n\n    @java.lang.Deprecated\n    public void writeModel(java.io.Writer writer) throws java.io.IOException {\n        org.apache.maven.model.io.xpp3.MavenXpp3Writer pomWriter = new org.apache.maven.model.io.xpp3.MavenXpp3Writer();\n        pomWriter.write(writer, getModel());\n    }\n\n    @java.lang.Deprecated\n    public void writeOriginalModel(java.io.Writer writer) throws java.io.IOException {\n        org.apache.maven.model.io.xpp3.MavenXpp3Writer pomWriter = new org.apache.maven.model.io.xpp3.MavenXpp3Writer();\n        pomWriter.write(writer, getOriginalModel());\n    }\n\n    @java.lang.Override\n    public org.apache.maven.project.MavenProject clone() {\n        org.apache.maven.project.MavenProject clone;\n        try {\n            clone = ((org.apache.maven.project.MavenProject) (super.clone()));\n        } catch (java.lang.CloneNotSupportedException e) {\n            throw new java.lang.UnsupportedOperationException(e);\n        }\n        clone.deepCopy(this);\n        return clone;\n    }\n\n    protected void setModel(org.apache.maven.model.Model model) {\n        this.model = model;\n    }\n\n    protected void setAttachedArtifacts(java.util.List<org.apache.maven.artifact.Artifact> attachedArtifacts) {\n        this.attachedArtifacts = attachedArtifacts;\n    }\n\n    protected void setCompileSourceRoots(java.util.List<java.lang.String> compileSourceRoots) {\n        this.compileSourceRoots = compileSourceRoots;\n    }\n\n    protected void setTestCompileSourceRoots(java.util.List<java.lang.String> testCompileSourceRoots) {\n        this.testCompileSourceRoots = testCompileSourceRoots;\n    }\n\n    protected void setScriptSourceRoots(java.util.List<java.lang.String> scriptSourceRoots) {\n        this.scriptSourceRoots = scriptSourceRoots;\n    }\n\n    protected org.apache.maven.artifact.repository.ArtifactRepository getReleaseArtifactRepository() {\n        if (releaseArtifactRepository == null) {\n            if ((getDistributionManagement() != null) && (getDistributionManagement().getRepository() != null)) {\n                checkProjectBuildingRequest();\n                try {\n                    org.apache.maven.artifact.repository.ArtifactRepository repo = repositorySystem.buildArtifactRepository(getDistributionManagement().getRepository());\n                    repositorySystem.injectProxy(projectBuilderConfiguration.getRepositorySession(), java.util.Arrays.asList(repo));\n                    repositorySystem.injectAuthentication(projectBuilderConfiguration.getRepositorySession(), java.util.Arrays.asList(repo));\n                    setReleaseArtifactRepository(repo);\n                } catch (org.apache.maven.artifact.InvalidRepositoryException e) {\n                    throw new java.lang.IllegalStateException(\"Failed to create release distribution repository for \" + getId(), e);\n                }\n            }\n        }\n        return releaseArtifactRepository;\n    }\n\n    protected org.apache.maven.artifact.repository.ArtifactRepository getSnapshotArtifactRepository() {\n        if (snapshotArtifactRepository == null) {\n            if ((getDistributionManagement() != null) && (getDistributionManagement().getSnapshotRepository() != null)) {\n                checkProjectBuildingRequest();\n                try {\n                    org.apache.maven.artifact.repository.ArtifactRepository repo = repositorySystem.buildArtifactRepository(getDistributionManagement().getSnapshotRepository());\n                    repositorySystem.injectProxy(projectBuilderConfiguration.getRepositorySession(), java.util.Arrays.asList(repo));\n                    repositorySystem.injectAuthentication(projectBuilderConfiguration.getRepositorySession(), java.util.Arrays.asList(repo));\n                    setSnapshotArtifactRepository(repo);\n                } catch (org.apache.maven.artifact.InvalidRepositoryException e) {\n                    throw new java.lang.IllegalStateException(\"Failed to create snapshot distribution repository for \" + getId(), e);\n                }\n            }\n        }\n        return snapshotArtifactRepository;\n    }\n\n    @java.lang.Deprecated\n    public org.apache.maven.artifact.Artifact replaceWithActiveArtifact(org.apache.maven.artifact.Artifact pluginArtifact) {\n        return pluginArtifact;\n    }\n\n    private void deepCopy(org.apache.maven.project.MavenProject project) {\n        setFile(project.getFile());\n        if (project.getDependencyArtifacts() != null) {\n            setDependencyArtifacts(java.util.Collections.unmodifiableSet(project.getDependencyArtifacts()));\n        }\n        if (project.getArtifacts() != null) {\n            setArtifacts(java.util.Collections.unmodifiableSet(project.getArtifacts()));\n        }\n        if (project.getParentFile() != null) {\n            parentFile = new java.io.File(project.getParentFile().getAbsolutePath());\n        }\n        if (project.getPluginArtifacts() != null) {\n            setPluginArtifacts(java.util.Collections.unmodifiableSet(project.getPluginArtifacts()));\n        }\n        if (project.getReportArtifacts() != null) {\n            setReportArtifacts(java.util.Collections.unmodifiableSet(project.getReportArtifacts()));\n        }\n        if (project.getExtensionArtifacts() != null) {\n            setExtensionArtifacts(java.util.Collections.unmodifiableSet(project.getExtensionArtifacts()));\n        }\n        setParentArtifact(project.getParentArtifact());\n        if (project.getRemoteArtifactRepositories() != null) {\n            setRemoteArtifactRepositories(java.util.Collections.unmodifiableList(project.getRemoteArtifactRepositories()));\n        }\n        if (project.getPluginArtifactRepositories() != null) {\n            setPluginArtifactRepositories(java.util.Collections.unmodifiableList(project.getPluginArtifactRepositories()));\n        }\n        if (project.getActiveProfiles() != null) {\n            setActiveProfiles(java.util.Collections.unmodifiableList(project.getActiveProfiles()));\n        }\n        if (project.getAttachedArtifacts() != null) {\n            setAttachedArtifacts(new java.util.ArrayList<org.apache.maven.artifact.Artifact>(project.getAttachedArtifacts()));\n        }\n        if (project.getCompileSourceRoots() != null) {\n            setCompileSourceRoots(new java.util.ArrayList<java.lang.String>(project.getCompileSourceRoots()));\n        }\n        if (project.getTestCompileSourceRoots() != null) {\n            setTestCompileSourceRoots(new java.util.ArrayList<java.lang.String>(project.getTestCompileSourceRoots()));\n        }\n        if (project.getScriptSourceRoots() != null) {\n            setScriptSourceRoots(new java.util.ArrayList<java.lang.String>(project.getScriptSourceRoots()));\n        }\n        if (project.getModel() != null) {\n            setModel(project.getModel().clone());\n        }\n        if (project.getOriginalModel() != null) {\n            setOriginalModel(project.getOriginalModel());\n        }\n        setExecutionRoot(project.isExecutionRoot());\n        if (project.getArtifact() != null) {\n            setArtifact(org.apache.maven.artifact.ArtifactUtils.copyArtifact(project.getArtifact()));\n        }\n        if (project.getManagedVersionMap() != null) {\n            setManagedVersionMap(new java.util.HashMap<java.lang.String, org.apache.maven.artifact.Artifact>(project.getManagedVersionMap()));\n        }\n        lifecyclePhases.addAll(project.lifecyclePhases);\n    }\n\n    private void addArtifactPath(org.apache.maven.artifact.Artifact artifact, java.util.List<java.lang.String> classpath) {\n        java.io.File file = artifact.getFile();\n        if (file != null) {\n            classpath.add(file.getPath());\n        }\n    }\n\n    private static java.lang.String getProjectReferenceId(java.lang.String groupId, java.lang.String artifactId, java.lang.String version) {\n        java.lang.StringBuilder buffer = new java.lang.StringBuilder(128);\n        buffer.append(groupId).append(':').append(artifactId).append(':').append(version);\n        return buffer.toString();\n    }\n\n    public void setContextValue(java.lang.String key, java.lang.Object value) {\n        if (context == null) {\n            context = new java.util.HashMap<java.lang.String, java.lang.Object>();\n        }\n        if (value != null) {\n            context.put(key, value);\n        } else {\n            context.remove(key);\n        }\n    }\n\n    public java.lang.Object getContextValue(java.lang.String key) {\n        if (context == null) {\n            return null;\n        }\n        return context.get(key);\n    }\n\n    public void setClassRealm(org.codehaus.plexus.classworlds.realm.ClassRealm classRealm) {\n        this.classRealm = classRealm;\n    }\n\n    public org.codehaus.plexus.classworlds.realm.ClassRealm getClassRealm() {\n        return classRealm;\n    }\n\n    public void setExtensionDependencyFilter(org.eclipse.aether.graph.DependencyFilter extensionDependencyFilter) {\n        this.extensionDependencyFilter = extensionDependencyFilter;\n    }\n\n    public org.eclipse.aether.graph.DependencyFilter getExtensionDependencyFilter() {\n        return extensionDependencyFilter;\n    }\n\n    public void setResolvedArtifacts(java.util.Set<org.apache.maven.artifact.Artifact> artifacts) {\n        this.resolvedArtifacts = (artifacts != null) ? artifacts : java.util.Collections.<org.apache.maven.artifact.Artifact>emptySet();\n        this.artifacts = null;\n        this.artifactMap = null;\n    }\n\n    public void setArtifactFilter(org.apache.maven.artifact.resolver.filter.ArtifactFilter artifactFilter) {\n        this.artifactFilter = artifactFilter;\n        this.artifacts = null;\n        this.artifactMap = null;\n    }\n\n    public boolean hasLifecyclePhase(java.lang.String phase) {\n        return lifecyclePhases.contains(phase);\n    }\n\n    public void addLifecyclePhase(java.lang.String lifecyclePhase) {\n        lifecyclePhases.add(lifecyclePhase);\n    }\n\n    public org.apache.maven.project.ProjectBuildingRequest getProjectBuildingRequest() {\n        return projectBuilderConfiguration;\n    }\n\n    public void setProjectBuildingRequest(org.apache.maven.project.ProjectBuildingRequest projectBuildingRequest) {\n        projectBuilderConfiguration = projectBuildingRequest;\n    }\n\n    private void checkProjectBuildingRequest() {\n        if (projectBuilderConfiguration == null) {\n            throw new java.lang.IllegalStateException(\"project building request missing\");\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "parent == org.apache.maven.project.MavenProject.ERROR_BUILDING_PARENT ? null : parent",
            "src_parent": "return parent == org.apache.maven.project.MavenProject.ERROR_BUILDING_PARENT ? null : parent",
            "src_parent_type": "Return",
            "src_type": "Conditional"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (logger != null) {\n    logger.error(\"Failed to build parent project for \" + getId(), e);\n}",
            "src_parent": "{\n    if (logger != null) {\n        logger.error(\"Failed to build parent project for \" + getId(), e);\n    }\n    parent = org.apache.maven.project.MavenProject.ERROR_BUILDING_PARENT;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "parent = org.apache.maven.project.MavenProject.ERROR_BUILDING_PARENT",
            "src_parent": "{\n    if (logger != null) {\n        logger.error(\"Failed to build parent project for \" + getId(), e);\n    }\n    parent = org.apache.maven.project.MavenProject.ERROR_BUILDING_PARENT;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (logger != null) {\n    logger.error(\"Failed to build parent project for \" + getId(), e);\n}",
            "src_parent": "{\n    if (logger != null) {\n        logger.error(\"Failed to build parent project for \" + getId(), e);\n    }\n    parent = org.apache.maven.project.MavenProject.ERROR_BUILDING_PARENT;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "parent = org.apache.maven.project.MavenProject.ERROR_BUILDING_PARENT",
            "src_parent": "{\n    if (logger != null) {\n        logger.error(\"Failed to build parent project for \" + getId(), e);\n    }\n    parent = org.apache.maven.project.MavenProject.ERROR_BUILDING_PARENT;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "parent",
            "dst_parent": "parent == org.apache.maven.project.MavenProject.ERROR_BUILDING_PARENT",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "parent",
            "src_parent": "return parent",
            "src_parent_type": "Return",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Catch",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Throw",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "\"Failed to build parent project for \" + getId()",
            "dst_parent": "logger.error(\"Failed to build parent project for \" + getId(), e)",
            "dst_parent_type": "Invocation",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "\"Failed to build parent project for \" + getId()",
            "src_parent": "new java.lang.IllegalStateException(\"Failed to build parent project for \" + getId(), e)",
            "src_parent_type": "ConstructorCall",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Catch",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Throw",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "\"Failed to build parent project for \" + getId()",
            "dst_parent": "logger.error(\"Failed to build parent project for \" + getId(), e)",
            "dst_parent_type": "Invocation",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "\"Failed to build parent project for \" + getId()",
            "src_parent": "new java.lang.IllegalStateException(\"Failed to build parent project for \" + getId(), e)",
            "src_parent_type": "ConstructorCall",
            "src_type": "BinaryOperator"
          }
        }
      ],
      "file_name": "MavenProject"
    }
  ],
  "id": "maven_2eb419ed"
}