{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "new org.apache.wicket.protocol.http.MockHttpServletResponse(servletRequest)",
            "src_parent": "servletResponse = new org.apache.wicket.protocol.http.MockHttpServletResponse(servletRequest)",
            "src_parent_type": "Assignment",
            "src_type": "ConstructorCall"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private java.util.Set<javax.servlet.http.Cookie> cookiesOfThisSession = new java.util.HashSet<javax.servlet.http.Cookie>();",
            "src_parent": "public class MockWebApplication {\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.protocol.http.MockWebApplication.class);\n\n    private org.apache.wicket.Page lastRenderedPage;\n\n    private org.apache.wicket.Page previousRenderedPage;\n\n    private final org.apache.wicket.protocol.http.MockHttpServletRequest servletRequest;\n\n    private final org.apache.wicket.protocol.http.MockHttpServletResponse servletResponse;\n\n    private final org.apache.wicket.protocol.http.MockHttpSession servletSession;\n\n    private org.apache.wicket.protocol.http.WebRequest wicketRequest;\n\n    private java.util.Map<java.lang.String, java.lang.String[]> parametersForNextRequest = new java.util.HashMap<java.lang.String, java.lang.String[]>();\n\n    private org.apache.wicket.protocol.http.WebResponse wicketResponse;\n\n    private org.apache.wicket.protocol.http.WebSession wicketSession;\n\n    private final org.apache.wicket.protocol.http.WebApplication application;\n\n    private final javax.servlet.ServletContext context;\n\n    private final org.apache.wicket.protocol.http.WicketFilter filter;\n\n    private java.util.Set<javax.servlet.http.Cookie> cookiesOfThisSession = new java.util.HashSet<javax.servlet.http.Cookie>();\n\n    public MockWebApplication(final org.apache.wicket.protocol.http.WebApplication application, final java.lang.String path) {\n        this.application = application;\n        context = newServletContext(path);\n        filter = new org.apache.wicket.protocol.http.WicketFilter() {\n            @java.lang.Override\n            protected org.apache.wicket.protocol.http.IWebApplicationFactory getApplicationFactory() {\n                return new org.apache.wicket.protocol.http.IWebApplicationFactory() {\n                    public org.apache.wicket.protocol.http.WebApplication createApplication(org.apache.wicket.protocol.http.WicketFilter filter) {\n                        return application;\n                    }\n                };\n            }\n        };\n        try {\n            filter.init(new javax.servlet.FilterConfig() {\n                public javax.servlet.ServletContext getServletContext() {\n                    return context;\n                }\n\n                public java.util.Enumeration<?> getInitParameterNames() {\n                    return null;\n                }\n\n                public java.lang.String getInitParameter(java.lang.String name) {\n                    if (name.equals(WicketFilter.FILTER_MAPPING_PARAM)) {\n                        return WicketFilter.SERVLET_PATH_HOLDER;\n                    }\n                    return null;\n                }\n\n                public java.lang.String getFilterName() {\n                    return \"WicketMockServlet\";\n                }\n            });\n        } catch (javax.servlet.ServletException e) {\n            throw new java.lang.RuntimeException(e);\n        }\n        org.apache.wicket.Application.set(this.application);\n        servletSession = new org.apache.wicket.protocol.http.MockHttpSession(context);\n        servletSession.setTemporary(initializeHttpSessionAsTemporary());\n        servletRequest = new org.apache.wicket.protocol.http.MockHttpServletRequest(this.application, servletSession, context);\n        servletResponse = new org.apache.wicket.protocol.http.MockHttpServletResponse(servletRequest) {\n            @java.lang.Override\n            public void addCookie(javax.servlet.http.Cookie cookie) {\n                super.addCookie(cookie);\n                cookiesOfThisSession.add(cookie);\n            }\n        };\n        wicketRequest = this.application.newWebRequest(servletRequest);\n        wicketResponse = this.application.newWebResponse(servletResponse);\n        createRequestCycle();\n        this.application.getRequestCycleSettings().setRenderStrategy(IRequestCycleSettings.ONE_PASS_RENDER);\n        this.application.getRequestCycleSettings().setBufferResponse(false);\n        if (this.application.getResourceFinder() == null) {\n            this.application.getResourceSettings().setResourceFinder(new org.apache.wicket.util.file.WebApplicationPath(context));\n        }\n        this.application.getPageSettings().setAutomaticMultiWindowSupport(false);\n        this.application.getResourceSettings().setResourcePollFrequency(null);\n    }\n\n    public boolean initializeHttpSessionAsTemporary() {\n        return false;\n    }\n\n    public javax.servlet.ServletContext newServletContext(final java.lang.String path) {\n        return new org.apache.wicket.protocol.http.MockServletContext(application, path);\n    }\n\n    public final org.apache.wicket.protocol.http.WebApplication getApplication() {\n        return application;\n    }\n\n    public org.apache.wicket.Page getLastRenderedPage() {\n        return lastRenderedPage;\n    }\n\n    public org.apache.wicket.Page getPreviousRenderedPage() {\n        return previousRenderedPage;\n    }\n\n    public org.apache.wicket.protocol.http.MockHttpServletRequest getServletRequest() {\n        return servletRequest;\n    }\n\n    public org.apache.wicket.protocol.http.MockHttpServletResponse getServletResponse() {\n        return servletResponse;\n    }\n\n    public org.apache.wicket.protocol.http.MockHttpSession getServletSession() {\n        return servletSession;\n    }\n\n    public org.apache.wicket.protocol.http.WebRequest getWicketRequest() {\n        return wicketRequest;\n    }\n\n    public org.apache.wicket.protocol.http.WebResponse getWicketResponse() {\n        return wicketResponse;\n    }\n\n    public org.apache.wicket.protocol.http.WebSession getWicketSession() {\n        return wicketSession;\n    }\n\n    public void processRequestCycle(final org.apache.wicket.Component component) {\n        setupRequestAndResponse();\n        final org.apache.wicket.protocol.http.WebRequestCycle cycle = createRequestCycle();\n        cycle.request(component);\n        if (component instanceof org.apache.wicket.Page) {\n            lastRenderedPage = ((org.apache.wicket.Page) (component));\n        }\n        postProcessRequestCycle(cycle);\n    }\n\n    public <C extends org.apache.wicket.Page> void processRequestCycle(final java.lang.Class<C> pageClass) {\n        processRequestCycle(pageClass, null);\n    }\n\n    @java.lang.SuppressWarnings(\"deprecation\")\n    public <C extends org.apache.wicket.Page> void processRequestCycle(final java.lang.Class<C> pageClass, org.apache.wicket.PageParameters params) {\n        setupRequestAndResponse();\n        final org.apache.wicket.protocol.http.WebRequestCycle cycle = createRequestCycle();\n        try {\n            org.apache.wicket.util.tester.BaseWicketTester.callOnBeginRequest(cycle);\n            org.apache.wicket.request.target.component.BookmarkablePageRequestTarget requestTarget = new org.apache.wicket.request.target.component.BookmarkablePageRequestTarget(pageClass, params);\n            if (pageClass == application.getHomePage()) {\n                java.lang.String pageMapName;\n                org.apache.wicket.IRequestTarget currentTarget = cycle.getRequestTarget();\n                if (currentTarget instanceof org.apache.wicket.request.target.component.IPageRequestTarget) {\n                    org.apache.wicket.Page currentPage = ((org.apache.wicket.request.target.component.IPageRequestTarget) (currentTarget)).getPage();\n                    final org.apache.wicket.IPageMap pageMap = currentPage.getPageMap();\n                    if (pageMap.isDefault()) {\n                        pageMapName = \"\";\n                    } else {\n                        pageMapName = pageMap.getName();\n                    }\n                } else {\n                    pageMapName = \"\";\n                }\n                org.apache.wicket.util.string.AppendingStringBuffer buffer = new org.apache.wicket.util.string.AppendingStringBuffer(64);\n                org.apache.wicket.request.target.coding.WebRequestEncoder encoder = new org.apache.wicket.request.target.coding.WebRequestEncoder(buffer);\n                encoder.addValue(WebRequestCodingStrategy.BOOKMARKABLE_PAGE_PARAMETER_NAME, (pageMapName + org.apache.wicket.Component.PATH_SEPARATOR) + pageClass.getName());\n                if (params != null) {\n                    final java.util.Iterator<java.lang.String> iterator = params.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        final java.lang.String key = iterator.next();\n                        final java.lang.String[] values = params.getStringArray(key);\n                        if (values != null) {\n                            for (int i = 0; i < values.length; i++) {\n                                encoder.addValue(key, values[i]);\n                            }\n                        }\n                    } \n                }\n                java.lang.String url = buffer.toString();\n                java.lang.String path = application.getClass().getName();\n                path = path.substring(path.lastIndexOf('.') + 1);\n                path = (((\"/\" + path) + \"/\") + path) + \"/\";\n                getServletRequest().setURL(path + url);\n            } else if (application.getHomePage() != null) {\n                java.lang.String url = cycle.urlFor(requestTarget).toString();\n                java.lang.String path = application.getClass().getName();\n                path = path.substring(path.lastIndexOf('.') + 1);\n                path = (((\"/\" + path) + \"/\") + path) + \"/\";\n                getServletRequest().setURL(path + url);\n            } else {\n                org.apache.wicket.protocol.http.MockWebApplication.log.warn(\"The application does not have a HomePage, this might cause problems or unexpected behavior\");\n            }\n            cycle.request(requestTarget);\n        } finally {\n            cycle.getResponse().close();\n        }\n        postProcessRequestCycle(cycle);\n    }\n\n    public void processRequestCycle() {\n        processRequestCycle(createRequestCycle());\n    }\n\n    public void processRequestCycle(org.apache.wicket.protocol.http.WebRequestCycle cycle) {\n        try {\n            cycle.request();\n            if (cycle.wasHandled() == false) {\n                cycle.setRequestTarget(new org.apache.wicket.protocol.http.request.WebErrorCodeResponseTarget(javax.servlet.http.HttpServletResponse.SC_NOT_FOUND));\n            }\n            cycle.detach();\n            createRequestCycle();\n        } finally {\n            cycle.getResponse().close();\n        }\n        postProcessRequestCycle(cycle);\n    }\n\n    public final void postProcessRequestCycle(org.apache.wicket.protocol.http.WebRequestCycle cycle) {\n        previousRenderedPage = lastRenderedPage;\n        if (cycle.getResponse() instanceof org.apache.wicket.protocol.http.WebResponse) {\n            final org.apache.wicket.protocol.http.MockHttpServletResponse httpResponse = ((org.apache.wicket.protocol.http.MockHttpServletResponse) (cycle.getWebResponse().getHttpServletResponse()));\n            if (httpResponse.isRedirect()) {\n                lastRenderedPage = generateLastRenderedPage(cycle);\n                org.apache.wicket.protocol.http.MockHttpServletRequest newHttpRequest = new org.apache.wicket.protocol.http.MockHttpServletRequest(application, servletSession, application.getServletContext());\n                newHttpRequest.setRequestToRedirectString(httpResponse.getRedirectLocation());\n                wicketRequest = application.newWebRequest(newHttpRequest);\n                cycle = createRequestCycle();\n                cycle.request();\n            }\n        }\n        lastRenderedPage = generateLastRenderedPage(cycle);\n        org.apache.wicket.Session.set(getWicketSession());\n        if (getLastRenderedPage() instanceof org.apache.wicket.markup.html.pages.ExceptionErrorPage) {\n            throw ((java.lang.RuntimeException) (((org.apache.wicket.markup.html.pages.ExceptionErrorPage) (getLastRenderedPage())).getThrowable()));\n        }\n    }\n\n    private org.apache.wicket.Page generateLastRenderedPage(org.apache.wicket.protocol.http.WebRequestCycle cycle) {\n        org.apache.wicket.Page newLastRenderedPage = cycle.getResponsePage();\n        if (newLastRenderedPage == null) {\n            java.lang.Class<? extends org.apache.wicket.Page> responseClass = cycle.getResponsePageClass();\n            if (responseClass != null) {\n                org.apache.wicket.Session.set(cycle.getSession());\n                org.apache.wicket.IRequestTarget target = cycle.getRequestTarget();\n                if (target instanceof org.apache.wicket.request.target.component.IPageRequestTarget) {\n                    newLastRenderedPage = ((org.apache.wicket.request.target.component.IPageRequestTarget) (target)).getPage();\n                } else if (target instanceof org.apache.wicket.request.target.component.IBookmarkablePageRequestTarget) {\n                    createRequestCycle();\n                    org.apache.wicket.request.target.component.IBookmarkablePageRequestTarget pageClassRequestTarget = ((org.apache.wicket.request.target.component.IBookmarkablePageRequestTarget) (target));\n                    java.lang.Class<? extends org.apache.wicket.Page> pageClass = pageClassRequestTarget.getPageClass();\n                    org.apache.wicket.PageParameters parameters = pageClassRequestTarget.getPageParameters();\n                    if ((parameters == null) || (parameters.size() == 0)) {\n                        newLastRenderedPage = application.getSessionSettings().getPageFactory().newPage(pageClass);\n                    } else {\n                        newLastRenderedPage = application.getSessionSettings().getPageFactory().newPage(pageClass, parameters);\n                    }\n                }\n            }\n        }\n        if (newLastRenderedPage == null) {\n            newLastRenderedPage = lastRenderedPage;\n        }\n        return newLastRenderedPage;\n    }\n\n    public org.apache.wicket.protocol.http.WebRequestCycle createRequestCycle() {\n        final org.apache.wicket.protocol.http.WebRequestCycle cycle = ((org.apache.wicket.protocol.http.WebRequestCycle) (application.newRequestCycle(wicketRequest, wicketResponse)));\n        wicketSession = ((org.apache.wicket.protocol.http.WebSession) (org.apache.wicket.Session.findOrCreate()));\n        cycle.setAutomaticallyClearFeedbackMessages(false);\n        return cycle;\n    }\n\n    public org.apache.wicket.protocol.http.WebRequestCycle setupRequestAndResponse(boolean isAjax) {\n        servletRequest.initialize();\n        servletResponse.initialize();\n        servletRequest.addCookies(cookiesOfThisSession);\n        servletRequest.setParameters(parametersForNextRequest);\n        if (isAjax) {\n            servletRequest.addHeader(\"Wicket-Ajax\", \"Yes\");\n        }\n        parametersForNextRequest.clear();\n        wicketRequest = application.newWebRequest(servletRequest);\n        wicketResponse = application.newWebResponse(servletResponse);\n        org.apache.wicket.protocol.http.WebRequestCycle requestCycle = createRequestCycle();\n        if (!initializeHttpSessionAsTemporary()) {\n            application.getSessionStore().bind(wicketRequest, wicketSession);\n        }\n        wicketResponse.setAjax(wicketRequest.isAjax());\n        return requestCycle;\n    }\n\n    public org.apache.wicket.protocol.http.WebRequestCycle setupRequestAndResponse() {\n        return setupRequestAndResponse(false);\n    }\n\n    public java.util.Map<java.lang.String, java.lang.String[]> getParametersForNextRequest() {\n        return parametersForNextRequest;\n    }\n\n    public void setParametersForNextRequest(java.util.Map<java.lang.String, java.lang.String[]> parametersForNextRequest) {\n        this.parametersForNextRequest = parametersForNextRequest;\n    }\n\n    public void destroy() {\n        filter.destroy();\n        java.io.File dir = ((java.io.File) (context.getAttribute(\"javax.servlet.context.tempdir\")));\n        deleteDir(dir);\n        application.internalDestroy();\n    }\n\n    private void deleteDir(java.io.File dir) {\n        if ((dir != null) && dir.isDirectory()) {\n            java.io.File[] files = dir.listFiles();\n            if (files != null) {\n                for (int i = 0; i < files.length; i++) {\n                    java.io.File element = files[i];\n                    if (element.isDirectory()) {\n                        deleteDir(element);\n                    } else {\n                        element.delete();\n                    }\n                }\n            }\n            dir.delete();\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "servletRequest.addCookies(cookiesOfThisSession)",
            "src_parent": "{\n    servletRequest.initialize();\n    servletResponse.initialize();\n    servletRequest.addCookies(cookiesOfThisSession);\n    servletRequest.setParameters(parametersForNextRequest);\n    if (isAjax) {\n        servletRequest.addHeader(\"Wicket-Ajax\", \"Yes\");\n    }\n    parametersForNextRequest.clear();\n    wicketRequest = application.newWebRequest(servletRequest);\n    wicketResponse = application.newWebResponse(servletResponse);\n    org.apache.wicket.protocol.http.WebRequestCycle requestCycle = createRequestCycle();\n    if (!initializeHttpSessionAsTemporary()) {\n        application.getSessionStore().bind(wicketRequest, wicketSession);\n    }\n    wicketResponse.setAjax(wicketRequest.isAjax());\n    return requestCycle;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "new org.apache.wicket.protocol.http.MockHttpServletResponse(servletRequest) {\n    @java.lang.Override\n    public void addCookie(javax.servlet.http.Cookie cookie) {\n        super.addCookie(cookie);\n        cookiesOfThisSession.add(cookie);\n    }\n}",
            "src_parent": "servletResponse = new org.apache.wicket.protocol.http.MockHttpServletResponse(servletRequest) {\n    @java.lang.Override\n    public void addCookie(javax.servlet.http.Cookie cookie) {\n        super.addCookie(cookie);\n        cookiesOfThisSession.add(cookie);\n    }\n}",
            "src_parent_type": "Assignment",
            "src_type": "NewClass"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "servletRequest",
            "dst_parent": "new org.apache.wicket.protocol.http.MockHttpServletResponse(servletRequest) {\n    @java.lang.Override\n    public void addCookie(javax.servlet.http.Cookie cookie) {\n        super.addCookie(cookie);\n        cookiesOfThisSession.add(cookie);\n    }\n}",
            "dst_parent_type": "NewClass",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "servletRequest",
            "src_parent": "new org.apache.wicket.protocol.http.MockHttpServletResponse(servletRequest)",
            "src_parent_type": "ConstructorCall",
            "src_type": "FieldRead"
          }
        }
      ],
      "file_name": "MockWebApplication"
    }
  ],
  "id": "wicket_5226978a"
}