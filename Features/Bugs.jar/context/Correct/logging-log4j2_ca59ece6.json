{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (ctx != null) {\n    return ctx;\n}",
            "src_parent": "{\n    final java.lang.String name = loader.toString();\n    java.util.concurrent.atomic.AtomicReference<java.lang.ref.WeakReference<org.apache.logging.log4j.core.LoggerContext>> ref = org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.CONTEXT_MAP.get(name);\n    if (ref == null) {\n        if (configLocation == null) {\n            java.lang.ClassLoader parent = loader.getParent();\n            while (parent != null) {\n                ref = org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.CONTEXT_MAP.get(parent.toString());\n                if (ref != null) {\n                    final java.lang.ref.WeakReference<org.apache.logging.log4j.core.LoggerContext> r = ref.get();\n                    final org.apache.logging.log4j.core.LoggerContext ctx = r.get();\n                    if (ctx != null) {\n                        return ctx;\n                    }\n                }\n                parent = parent.getParent();\n            } \n        }\n        org.apache.logging.log4j.core.LoggerContext ctx = new org.apache.logging.log4j.core.LoggerContext(name, null, configLocation);\n        final java.util.concurrent.atomic.AtomicReference<java.lang.ref.WeakReference<org.apache.logging.log4j.core.LoggerContext>> r = new java.util.concurrent.atomic.AtomicReference<java.lang.ref.WeakReference<org.apache.logging.log4j.core.LoggerContext>>();\n        r.set(new java.lang.ref.WeakReference<org.apache.logging.log4j.core.LoggerContext>(ctx));\n        org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.CONTEXT_MAP.putIfAbsent(loader.toString(), r);\n        ctx = org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.CONTEXT_MAP.get(name).get().get();\n        return ctx;\n    }\n    final java.lang.ref.WeakReference<org.apache.logging.log4j.core.LoggerContext> r = ref.get();\n    org.apache.logging.log4j.core.LoggerContext ctx = r.get();\n    if (ctx != null) {\n        return ctx;\n    }\n    ctx = new org.apache.logging.log4j.core.LoggerContext(name, null, configLocation);\n    ref.compareAndSet(r, new java.lang.ref.WeakReference<org.apache.logging.log4j.core.LoggerContext>(ctx));\n    return ctx;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (ctx != null) {\n    if ((ctx.getConfigLocation() == null) && (configLocation != null)) {\n        org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.LOGGER.debug(\"Setting configuration to {}\", configLocation);\n        ctx.setConfigLocation(configLocation);\n    } else if ((ctx.getConfigLocation() != null) && (!ctx.getConfigLocation().equals(configLocation))) {\n        org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.LOGGER.warn(\"locateContext called with URI {}. Existing LoggerContext has URI {}\", configLocation, ctx.getConfigLocation());\n    }\n    return ctx;\n}",
            "src_parent": "{\n    final java.lang.String name = loader.toString();\n    java.util.concurrent.atomic.AtomicReference<java.lang.ref.WeakReference<org.apache.logging.log4j.core.LoggerContext>> ref = org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.CONTEXT_MAP.get(name);\n    if (ref == null) {\n        if (configLocation == null) {\n            java.lang.ClassLoader parent = loader.getParent();\n            while (parent != null) {\n                ref = org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.CONTEXT_MAP.get(parent.toString());\n                if (ref != null) {\n                    final java.lang.ref.WeakReference<org.apache.logging.log4j.core.LoggerContext> r = ref.get();\n                    final org.apache.logging.log4j.core.LoggerContext ctx = r.get();\n                    if (ctx != null) {\n                        return ctx;\n                    }\n                }\n                parent = parent.getParent();\n            } \n        }\n        org.apache.logging.log4j.core.LoggerContext ctx = new org.apache.logging.log4j.core.LoggerContext(name, null, configLocation);\n        final java.util.concurrent.atomic.AtomicReference<java.lang.ref.WeakReference<org.apache.logging.log4j.core.LoggerContext>> r = new java.util.concurrent.atomic.AtomicReference<java.lang.ref.WeakReference<org.apache.logging.log4j.core.LoggerContext>>();\n        r.set(new java.lang.ref.WeakReference<org.apache.logging.log4j.core.LoggerContext>(ctx));\n        org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.CONTEXT_MAP.putIfAbsent(loader.toString(), r);\n        ctx = org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.CONTEXT_MAP.get(name).get().get();\n        return ctx;\n    }\n    final java.lang.ref.WeakReference<org.apache.logging.log4j.core.LoggerContext> r = ref.get();\n    org.apache.logging.log4j.core.LoggerContext ctx = r.get();\n    if (ctx != null) {\n        if ((ctx.getConfigLocation() == null) && (configLocation != null)) {\n            org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.LOGGER.debug(\"Setting configuration to {}\", configLocation);\n            ctx.setConfigLocation(configLocation);\n        } else if ((ctx.getConfigLocation() != null) && (!ctx.getConfigLocation().equals(configLocation))) {\n            org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.LOGGER.warn(\"locateContext called with URI {}. Existing LoggerContext has URI {}\", configLocation, ctx.getConfigLocation());\n        }\n        return ctx;\n    }\n    ctx = new org.apache.logging.log4j.core.LoggerContext(name, null, configLocation);\n    ref.compareAndSet(r, new java.lang.ref.WeakReference<org.apache.logging.log4j.core.LoggerContext>(ctx));\n    return ctx;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.LOGGER.warn(\"locateContext called with URI {}. Existing LoggerContext has URI {}\", configLocation, ctx.getConfigLocation())",
            "src_parent": "{\n    org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.LOGGER.warn(\"locateContext called with URI {}. Existing LoggerContext has URI {}\", configLocation, ctx.getConfigLocation());\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "ctx != null",
            "dst_parent": "if (ctx != null) {\n    if ((ctx.getConfigLocation() == null) && (configLocation != null)) {\n        org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.LOGGER.debug(\"Setting configuration to {}\", configLocation);\n        ctx.setConfigLocation(configLocation);\n    } else if ((ctx.getConfigLocation() != null) && (!ctx.getConfigLocation().equals(configLocation))) {\n        org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.LOGGER.warn(\"locateContext called with URI {}. Existing LoggerContext has URI {}\", configLocation, ctx.getConfigLocation());\n    }\n    return ctx;\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "ctx != null",
            "src_parent": "if (ctx != null) {\n    return ctx;\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return ctx",
            "dst_parent": "{\n    if ((ctx.getConfigLocation() == null) && (configLocation != null)) {\n        org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.LOGGER.debug(\"Setting configuration to {}\", configLocation);\n        ctx.setConfigLocation(configLocation);\n    } else if ((ctx.getConfigLocation() != null) && (!ctx.getConfigLocation().equals(configLocation))) {\n        org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.LOGGER.warn(\"locateContext called with URI {}. Existing LoggerContext has URI {}\", configLocation, ctx.getConfigLocation());\n    }\n    return ctx;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return ctx",
            "src_parent": "{\n    return ctx;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.LOGGER.warn(\"locateContext called with URI {}. Existing LoggerContext has URI {}\", configLocation, ctx.getConfigLocation());\n}",
            "dst_parent": "if ((ctx.getConfigLocation() != null) && (!ctx.getConfigLocation().equals(configLocation))) {\n    org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.LOGGER.warn(\"locateContext called with URI {}. Existing LoggerContext has URI {}\", configLocation, ctx.getConfigLocation());\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    return ctx;\n}",
            "src_parent": "if (ctx != null) {\n    return ctx;\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        }
      ],
      "file_name": "ClassLoaderContextSelector"
    }
  ],
  "id": "logging-log4j2_ca59ece6"
}