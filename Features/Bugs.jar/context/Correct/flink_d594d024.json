{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Throwable t",
            "dst_parent": "catch (java.lang.Throwable t) {\n    org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Error while canceling task \" + taskNameWithSubtask, t);\n}",
            "dst_parent_type": "Catch",
            "dst_type": "CatchVariable",
            "operator": "UPD",
            "src": "java.lang.Throwable t2",
            "src_parent": "catch (java.lang.Throwable t2) {\n    org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Error while canceling task \" + taskNameWithSubtask, t2);\n}",
            "src_parent_type": "Catch",
            "src_type": "CatchVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Catch",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "t",
            "dst_parent": "org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Error while canceling task \" + taskNameWithSubtask, t)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "t2",
            "src_parent": "org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Error while canceling task \" + taskNameWithSubtask, t2)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Break",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "invokable",
            "src_parent": "(invokable != null)",
            "src_parent_type": "BinaryOperator",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "invokable",
            "src_parent": "invokable.cancel()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private void cancelInvokable() {\n    if (((invokable != null) && (this.invokable != null)) && invokableHasBeenCanceled.compareAndSet(false, true)) {\n        try {\n            invokable.cancel();\n        } catch (java.lang.Throwable t) {\n            org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Error while canceling task \" + taskNameWithSubtask, t);\n        }\n    }\n}",
            "src_parent": "public class Task implements java.lang.Runnable {\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.flink.runtime.taskmanager.Task.class);\n\n    private static final java.lang.ThreadGroup TASK_THREADS_GROUP = new java.lang.ThreadGroup(\"Flink Task Threads\");\n\n    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<org.apache.flink.runtime.taskmanager.Task, org.apache.flink.runtime.execution.ExecutionState> STATE_UPDATER = java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(org.apache.flink.runtime.taskmanager.Task.class, org.apache.flink.runtime.execution.ExecutionState.class, \"executionState\");\n\n    private final org.apache.flink.api.common.JobID jobId;\n\n    private final org.apache.flink.runtime.jobgraph.JobVertexID vertexId;\n\n    private final org.apache.flink.runtime.executiongraph.ExecutionAttemptID executionId;\n\n    private final int subtaskIndex;\n\n    private final int parallelism;\n\n    private final java.lang.String taskName;\n\n    private final java.lang.String taskNameWithSubtask;\n\n    private final org.apache.flink.configuration.Configuration jobConfiguration;\n\n    private final org.apache.flink.configuration.Configuration taskConfiguration;\n\n    private final java.util.List<org.apache.flink.runtime.blob.BlobKey> requiredJarFiles;\n\n    private final java.lang.String nameOfInvokableClass;\n\n    private final org.apache.flink.runtime.memorymanager.MemoryManager memoryManager;\n\n    private final org.apache.flink.runtime.io.disk.iomanager.IOManager ioManager;\n\n    private final org.apache.flink.runtime.broadcast.BroadcastVariableManager broadcastVariableManager;\n\n    private final org.apache.flink.runtime.io.network.partition.ResultPartition[] producedPartitions;\n\n    private final org.apache.flink.runtime.io.network.api.writer.ResultPartitionWriter[] writers;\n\n    private final org.apache.flink.runtime.io.network.partition.consumer.SingleInputGate[] inputGates;\n\n    private final java.util.Map<org.apache.flink.runtime.jobgraph.IntermediateDataSetID, org.apache.flink.runtime.io.network.partition.consumer.SingleInputGate> inputGatesById;\n\n    private final akka.actor.ActorRef taskManager;\n\n    private final akka.actor.ActorRef jobManager;\n\n    private final java.util.List<akka.actor.ActorRef> executionListenerActors;\n\n    private final akka.util.Timeout actorAskTimeout;\n\n    private final org.apache.flink.runtime.execution.librarycache.LibraryCacheManager libraryCache;\n\n    private final org.apache.flink.runtime.filecache.FileCache fileCache;\n\n    private final org.apache.flink.runtime.io.network.NetworkEnvironment network;\n\n    private final java.lang.Thread executingThread;\n\n    private final java.util.concurrent.atomic.AtomicBoolean invokableHasBeenCanceled;\n\n    private volatile org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable invokable;\n\n    private volatile org.apache.flink.runtime.execution.ExecutionState executionState = org.apache.flink.runtime.execution.ExecutionState.CREATED;\n\n    private volatile java.lang.Throwable failureCause;\n\n    private volatile org.apache.flink.runtime.util.SerializedValue<org.apache.flink.runtime.state.StateHandle<?>> operatorState;\n\n    public Task(org.apache.flink.runtime.deployment.TaskDeploymentDescriptor tdd, org.apache.flink.runtime.memorymanager.MemoryManager memManager, org.apache.flink.runtime.io.disk.iomanager.IOManager ioManager, org.apache.flink.runtime.io.network.NetworkEnvironment networkEnvironment, org.apache.flink.runtime.broadcast.BroadcastVariableManager bcVarManager, akka.actor.ActorRef taskManagerActor, akka.actor.ActorRef jobManagerActor, scala.concurrent.duration.FiniteDuration actorAskTimeout, org.apache.flink.runtime.execution.librarycache.LibraryCacheManager libraryCache, org.apache.flink.runtime.filecache.FileCache fileCache) {\n        com.google.common.base.Preconditions.checkArgument(tdd.getNumberOfSubtasks() > 0);\n        com.google.common.base.Preconditions.checkArgument(tdd.getIndexInSubtaskGroup() >= 0);\n        com.google.common.base.Preconditions.checkArgument(tdd.getIndexInSubtaskGroup() < tdd.getNumberOfSubtasks());\n        this.jobId = com.google.common.base.Preconditions.checkNotNull(tdd.getJobID());\n        this.vertexId = com.google.common.base.Preconditions.checkNotNull(tdd.getVertexID());\n        this.executionId = com.google.common.base.Preconditions.checkNotNull(tdd.getExecutionId());\n        this.subtaskIndex = tdd.getIndexInSubtaskGroup();\n        this.parallelism = tdd.getNumberOfSubtasks();\n        this.taskName = com.google.common.base.Preconditions.checkNotNull(tdd.getTaskName());\n        this.taskNameWithSubtask = org.apache.flink.runtime.taskmanager.Task.getTaskNameWithSubtask(taskName, subtaskIndex, parallelism);\n        this.jobConfiguration = com.google.common.base.Preconditions.checkNotNull(tdd.getJobConfiguration());\n        this.taskConfiguration = com.google.common.base.Preconditions.checkNotNull(tdd.getTaskConfiguration());\n        this.requiredJarFiles = com.google.common.base.Preconditions.checkNotNull(tdd.getRequiredJarFiles());\n        this.nameOfInvokableClass = com.google.common.base.Preconditions.checkNotNull(tdd.getInvokableClassName());\n        this.operatorState = tdd.getOperatorState();\n        this.memoryManager = com.google.common.base.Preconditions.checkNotNull(memManager);\n        this.ioManager = com.google.common.base.Preconditions.checkNotNull(ioManager);\n        this.broadcastVariableManager = com.google.common.base.Preconditions.checkNotNull(bcVarManager);\n        this.jobManager = com.google.common.base.Preconditions.checkNotNull(jobManagerActor);\n        this.taskManager = com.google.common.base.Preconditions.checkNotNull(taskManagerActor);\n        this.actorAskTimeout = new akka.util.Timeout(com.google.common.base.Preconditions.checkNotNull(actorAskTimeout));\n        this.libraryCache = com.google.common.base.Preconditions.checkNotNull(libraryCache);\n        this.fileCache = com.google.common.base.Preconditions.checkNotNull(fileCache);\n        this.network = com.google.common.base.Preconditions.checkNotNull(networkEnvironment);\n        this.executionListenerActors = new java.util.concurrent.CopyOnWriteArrayList<akka.actor.ActorRef>();\n        final java.lang.String taskNameWithSubtasksAndId = org.apache.flink.runtime.taskmanager.Task.getTaskNameWithSubtaskAndID(taskName, subtaskIndex, parallelism, executionId);\n        java.util.List<org.apache.flink.runtime.deployment.ResultPartitionDeploymentDescriptor> partitions = tdd.getProducedPartitions();\n        java.util.List<org.apache.flink.runtime.deployment.InputGateDeploymentDescriptor> consumedPartitions = tdd.getInputGates();\n        this.producedPartitions = new org.apache.flink.runtime.io.network.partition.ResultPartition[partitions.size()];\n        this.writers = new org.apache.flink.runtime.io.network.api.writer.ResultPartitionWriter[partitions.size()];\n        for (int i = 0; i < this.producedPartitions.length; i++) {\n            org.apache.flink.runtime.deployment.ResultPartitionDeploymentDescriptor desc = partitions.get(i);\n            org.apache.flink.runtime.io.network.partition.ResultPartitionID partitionId = new org.apache.flink.runtime.io.network.partition.ResultPartitionID(desc.getPartitionId(), executionId);\n            this.producedPartitions[i] = new org.apache.flink.runtime.io.network.partition.ResultPartition(taskNameWithSubtasksAndId, jobId, partitionId, desc.getPartitionType(), desc.getNumberOfSubpartitions(), networkEnvironment.getPartitionManager(), networkEnvironment.getPartitionConsumableNotifier(), ioManager, networkEnvironment.getDefaultIOMode());\n            this.writers[i] = new org.apache.flink.runtime.io.network.api.writer.ResultPartitionWriter(this.producedPartitions[i]);\n        }\n        this.inputGates = new org.apache.flink.runtime.io.network.partition.consumer.SingleInputGate[consumedPartitions.size()];\n        this.inputGatesById = new java.util.HashMap<org.apache.flink.runtime.jobgraph.IntermediateDataSetID, org.apache.flink.runtime.io.network.partition.consumer.SingleInputGate>();\n        for (int i = 0; i < this.inputGates.length; i++) {\n            org.apache.flink.runtime.io.network.partition.consumer.SingleInputGate gate = org.apache.flink.runtime.io.network.partition.consumer.SingleInputGate.create(taskNameWithSubtasksAndId, jobId, executionId, consumedPartitions.get(i), networkEnvironment);\n            this.inputGates[i] = gate;\n            inputGatesById.put(gate.getConsumedResultId(), gate);\n        }\n        executingThread = new java.lang.Thread(org.apache.flink.runtime.taskmanager.Task.TASK_THREADS_GROUP, this, taskNameWithSubtask);\n        invokableHasBeenCanceled = new java.util.concurrent.atomic.AtomicBoolean(false);\n    }\n\n    public org.apache.flink.api.common.JobID getJobID() {\n        return jobId;\n    }\n\n    public org.apache.flink.runtime.jobgraph.JobVertexID getJobVertexId() {\n        return vertexId;\n    }\n\n    public org.apache.flink.runtime.executiongraph.ExecutionAttemptID getExecutionId() {\n        return executionId;\n    }\n\n    public int getIndexInSubtaskGroup() {\n        return subtaskIndex;\n    }\n\n    public int getNumberOfSubtasks() {\n        return parallelism;\n    }\n\n    public java.lang.String getTaskName() {\n        return taskName;\n    }\n\n    public java.lang.String getTaskNameWithSubtasks() {\n        return taskNameWithSubtask;\n    }\n\n    public org.apache.flink.configuration.Configuration getJobConfiguration() {\n        return jobConfiguration;\n    }\n\n    public org.apache.flink.configuration.Configuration getTaskConfiguration() {\n        return this.taskConfiguration;\n    }\n\n    public org.apache.flink.runtime.io.network.api.writer.ResultPartitionWriter[] getAllWriters() {\n        return writers;\n    }\n\n    public org.apache.flink.runtime.io.network.partition.consumer.SingleInputGate[] getAllInputGates() {\n        return inputGates;\n    }\n\n    public org.apache.flink.runtime.io.network.partition.ResultPartition[] getProducedPartitions() {\n        return producedPartitions;\n    }\n\n    public org.apache.flink.runtime.io.network.partition.consumer.SingleInputGate getInputGateById(org.apache.flink.runtime.jobgraph.IntermediateDataSetID id) {\n        return inputGatesById.get(id);\n    }\n\n    public java.lang.Thread getExecutingThread() {\n        return executingThread;\n    }\n\n    public org.apache.flink.runtime.execution.ExecutionState getExecutionState() {\n        return this.executionState;\n    }\n\n    public boolean isCanceledOrFailed() {\n        return ((executionState == org.apache.flink.runtime.execution.ExecutionState.CANCELING) || (executionState == org.apache.flink.runtime.execution.ExecutionState.CANCELED)) || (executionState == org.apache.flink.runtime.execution.ExecutionState.FAILED);\n    }\n\n    public java.lang.Throwable getFailureCause() {\n        return failureCause;\n    }\n\n    public void startTaskThread() {\n        executingThread.start();\n    }\n\n    @java.lang.Override\n    public void run() {\n        while (true) {\n            org.apache.flink.runtime.execution.ExecutionState current = this.executionState;\n            if (current == org.apache.flink.runtime.execution.ExecutionState.CREATED) {\n                if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, ExecutionState.CREATED, ExecutionState.DEPLOYING)) {\n                    break;\n                }\n            } else if (current == org.apache.flink.runtime.execution.ExecutionState.FAILED) {\n                notifyFinalState();\n                return;\n            } else if (current == org.apache.flink.runtime.execution.ExecutionState.CANCELING) {\n                if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, ExecutionState.CANCELING, ExecutionState.CANCELED)) {\n                    notifyFinalState();\n                    return;\n                }\n            } else {\n                throw new java.lang.IllegalStateException(\"Invalid state for beginning of task operation\");\n            }\n        } \n        java.util.Map<java.lang.String, java.util.concurrent.Future<org.apache.flink.core.fs.Path>> distributedCacheEntries = new java.util.HashMap<java.lang.String, java.util.concurrent.Future<org.apache.flink.core.fs.Path>>();\n        org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable invokable = null;\n        try {\n            org.apache.flink.runtime.taskmanager.Task.LOG.info(\"Loading JAR files for task \" + taskNameWithSubtask);\n            final java.lang.ClassLoader userCodeClassLoader = createUserCodeClassloader(libraryCache);\n            invokable = loadAndInstantiateInvokable(userCodeClassLoader, nameOfInvokableClass);\n            if (isCanceledOrFailed()) {\n                throw new org.apache.flink.runtime.execution.CancelTaskException();\n            }\n            org.apache.flink.runtime.taskmanager.Task.LOG.info(\"Registering task at network: \" + this);\n            network.registerTask(this);\n            try {\n                for (java.util.Map.Entry<java.lang.String, org.apache.flink.api.common.cache.DistributedCache.DistributedCacheEntry> entry : org.apache.flink.api.common.cache.DistributedCache.readFileInfoFromConfig(jobConfiguration)) {\n                    org.apache.flink.runtime.taskmanager.Task.LOG.info((\"Obtaining local cache file for '\" + entry.getKey()) + '\\'');\n                    java.util.concurrent.Future<org.apache.flink.core.fs.Path> cp = fileCache.createTmpFile(entry.getKey(), entry.getValue(), jobId);\n                    distributedCacheEntries.put(entry.getKey(), cp);\n                }\n            } catch (java.lang.Exception e) {\n                throw new java.lang.Exception(\"Exception while adding files to distributed cache.\", e);\n            }\n            if (isCanceledOrFailed()) {\n                throw new org.apache.flink.runtime.execution.CancelTaskException();\n            }\n            org.apache.flink.runtime.taskmanager.TaskInputSplitProvider splitProvider = new org.apache.flink.runtime.taskmanager.TaskInputSplitProvider(jobManager, jobId, vertexId, executionId, userCodeClassLoader, actorAskTimeout);\n            org.apache.flink.runtime.execution.Environment env = new org.apache.flink.runtime.taskmanager.RuntimeEnvironment(jobId, vertexId, executionId, taskName, taskNameWithSubtask, subtaskIndex, parallelism, jobConfiguration, taskConfiguration, userCodeClassLoader, memoryManager, ioManager, broadcastVariableManager, splitProvider, distributedCacheEntries, writers, inputGates, jobManager);\n            invokable.setEnvironment(env);\n            try {\n                invokable.registerInputOutput();\n            } catch (java.lang.Exception e) {\n                throw new java.lang.Exception(\"Call to registerInputOutput() of invokable failed\", e);\n            }\n            org.apache.flink.runtime.util.SerializedValue<org.apache.flink.runtime.state.StateHandle<?>> operatorState = this.operatorState;\n            if (operatorState != null) {\n                if (invokable instanceof org.apache.flink.runtime.jobgraph.tasks.OperatorStateCarrier) {\n                    try {\n                        org.apache.flink.runtime.state.StateHandle<?> state = operatorState.deserializeValue(userCodeClassLoader);\n                        org.apache.flink.runtime.jobgraph.tasks.OperatorStateCarrier<?> op = ((org.apache.flink.runtime.jobgraph.tasks.OperatorStateCarrier<?>) (invokable));\n                        org.apache.flink.runtime.state.StateUtils.setOperatorState(op, state);\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException(\"Failed to deserialize state handle and setup initial operator state.\", e);\n                    }\n                } else {\n                    throw new java.lang.IllegalStateException(\"Found operator state for a non-stateful task invokable\");\n                }\n            }\n            operatorState = null;\n            this.operatorState = null;\n            this.invokable = invokable;\n            if (!org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, ExecutionState.DEPLOYING, ExecutionState.RUNNING)) {\n                throw new org.apache.flink.runtime.execution.CancelTaskException();\n            }\n            notifyObservers(ExecutionState.RUNNING, null);\n            taskManager.tell(new org.apache.flink.runtime.messages.TaskMessages.UpdateTaskExecutionState(new org.apache.flink.runtime.taskmanager.TaskExecutionState(jobId, executionId, org.apache.flink.runtime.execution.ExecutionState.RUNNING)), akka.actor.ActorRef.noSender());\n            executingThread.setContextClassLoader(userCodeClassLoader);\n            invokable.invoke();\n            if (isCanceledOrFailed()) {\n                throw new org.apache.flink.runtime.execution.CancelTaskException();\n            }\n            for (org.apache.flink.runtime.io.network.partition.ResultPartition partition : producedPartitions) {\n                if (partition != null) {\n                    partition.finish();\n                }\n            }\n            if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, ExecutionState.RUNNING, ExecutionState.FINISHED)) {\n                notifyObservers(ExecutionState.FINISHED, null);\n            } else {\n                throw new org.apache.flink.runtime.execution.CancelTaskException();\n            }\n        } catch (java.lang.Throwable t) {\n            try {\n                while (true) {\n                    org.apache.flink.runtime.execution.ExecutionState current = this.executionState;\n                    if ((current == org.apache.flink.runtime.execution.ExecutionState.RUNNING) || (current == org.apache.flink.runtime.execution.ExecutionState.DEPLOYING)) {\n                        if (t instanceof org.apache.flink.runtime.execution.CancelTaskException) {\n                            if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.CANCELED)) {\n                                cancelInvokable();\n                                notifyObservers(ExecutionState.CANCELED, null);\n                                break;\n                            }\n                        } else if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.FAILED)) {\n                            failureCause = t;\n                            cancelInvokable();\n                            notifyObservers(ExecutionState.FAILED, t);\n                            break;\n                        }\n                    } else if (current == org.apache.flink.runtime.execution.ExecutionState.CANCELING) {\n                        if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.CANCELED)) {\n                            notifyObservers(ExecutionState.CANCELED, null);\n                            break;\n                        }\n                    } else if (current == org.apache.flink.runtime.execution.ExecutionState.FAILED) {\n                        break;\n                    } else if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.FAILED)) {\n                        org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Unexpected state in Task during an exception: \" + current);\n                        break;\n                    }\n                } \n            } catch (java.lang.Throwable tt) {\n                java.lang.String message = \"FATAL - exception in task exception handler\";\n                org.apache.flink.runtime.taskmanager.Task.LOG.error(message, tt);\n                notifyFatalError(message, tt);\n            }\n        } finally {\n            try {\n                org.apache.flink.runtime.taskmanager.Task.LOG.info(\"Freeing task resources for \" + taskNameWithSubtask);\n                network.unregisterTask(this);\n                if (invokable != null) {\n                    memoryManager.releaseAll(invokable);\n                }\n                libraryCache.unregisterTask(jobId, executionId);\n                removeCachedFiles(distributedCacheEntries, fileCache);\n                notifyFinalState();\n            } catch (java.lang.Throwable t) {\n                java.lang.String message = \"FATAL - exception in task resource cleanup\";\n                org.apache.flink.runtime.taskmanager.Task.LOG.error(message, t);\n                notifyFatalError(message, t);\n            }\n        }\n    }\n\n    private java.lang.ClassLoader createUserCodeClassloader(org.apache.flink.runtime.execution.librarycache.LibraryCacheManager libraryCache) throws java.lang.Exception {\n        long startDownloadTime = java.lang.System.currentTimeMillis();\n        libraryCache.registerTask(jobId, executionId, requiredJarFiles);\n        org.apache.flink.runtime.taskmanager.Task.LOG.debug(\"Register task {} at library cache manager took {} milliseconds\", executionId, java.lang.System.currentTimeMillis() - startDownloadTime);\n        java.lang.ClassLoader userCodeClassLoader = libraryCache.getClassLoader(jobId);\n        if (userCodeClassLoader == null) {\n            throw new java.lang.Exception(\"No user code classloader available.\");\n        }\n        return userCodeClassLoader;\n    }\n\n    private org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable loadAndInstantiateInvokable(java.lang.ClassLoader classLoader, java.lang.String className) throws java.lang.Exception {\n        java.lang.Class<? extends org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable> invokableClass;\n        try {\n            invokableClass = java.lang.Class.forName(className, true, classLoader).asSubclass(org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable.class);\n        } catch (java.lang.Throwable t) {\n            throw new java.lang.Exception(\"Could not load the task's invokable class.\", t);\n        }\n        try {\n            return invokableClass.newInstance();\n        } catch (java.lang.Throwable t) {\n            throw new java.lang.Exception(\"Could not instantiate the task's invokable class.\", t);\n        }\n    }\n\n    private void removeCachedFiles(java.util.Map<java.lang.String, java.util.concurrent.Future<org.apache.flink.core.fs.Path>> entries, org.apache.flink.runtime.filecache.FileCache fileCache) {\n        try {\n            for (java.util.Map.Entry<java.lang.String, java.util.concurrent.Future<org.apache.flink.core.fs.Path>> entry : entries.entrySet()) {\n                java.lang.String name = entry.getKey();\n                try {\n                    fileCache.deleteTmpFile(name, jobId);\n                } catch (java.lang.Exception e) {\n                    org.apache.flink.runtime.taskmanager.Task.LOG.error((\"Distributed Cache could not remove cached file registered under '\" + name) + \"'.\", e);\n                }\n            }\n        } catch (java.lang.Throwable t) {\n            org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Error while removing cached local files from distributed cache.\");\n        }\n    }\n\n    private void notifyFinalState() {\n        taskManager.tell(new org.apache.flink.runtime.messages.TaskMessages.TaskInFinalState(executionId), akka.actor.ActorRef.noSender());\n    }\n\n    private void notifyFatalError(java.lang.String message, java.lang.Throwable cause) {\n        taskManager.tell(new org.apache.flink.runtime.messages.TaskManagerMessages.FatalError(message, cause), akka.actor.ActorRef.noSender());\n    }\n\n    public void cancelExecution() {\n        org.apache.flink.runtime.taskmanager.Task.LOG.info(\"Attempting to cancel task \" + taskNameWithSubtask);\n        cancelOrFailAndCancelInvokable(ExecutionState.CANCELING, null);\n    }\n\n    public void failExternally(java.lang.Throwable cause) {\n        org.apache.flink.runtime.taskmanager.Task.LOG.info(\"Attempting to fail task externally \" + taskNameWithSubtask);\n        cancelOrFailAndCancelInvokable(ExecutionState.FAILED, cause);\n    }\n\n    private void cancelOrFailAndCancelInvokable(org.apache.flink.runtime.execution.ExecutionState targetState, java.lang.Throwable cause) {\n        while (true) {\n            org.apache.flink.runtime.execution.ExecutionState current = this.executionState;\n            if (current.isTerminal() || (current == org.apache.flink.runtime.execution.ExecutionState.CANCELING)) {\n                org.apache.flink.runtime.taskmanager.Task.LOG.info(((\"Task \" + taskNameWithSubtask) + \" is already in state \") + current);\n                return;\n            }\n            if ((current == org.apache.flink.runtime.execution.ExecutionState.DEPLOYING) || (current == org.apache.flink.runtime.execution.ExecutionState.CREATED)) {\n                if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, targetState)) {\n                    this.failureCause = cause;\n                    notifyObservers(targetState, cause);\n                    return;\n                }\n            } else if (current == org.apache.flink.runtime.execution.ExecutionState.RUNNING) {\n                if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, ExecutionState.RUNNING, targetState)) {\n                    if ((invokable != null) && invokableHasBeenCanceled.compareAndSet(false, true)) {\n                        this.failureCause = cause;\n                        notifyObservers(targetState, cause);\n                        org.apache.flink.runtime.taskmanager.Task.LOG.info(\"Triggering cancellation of task code {} ({}).\", taskNameWithSubtask, executionId);\n                        java.lang.Runnable canceler = new org.apache.flink.runtime.taskmanager.Task.TaskCanceler(org.apache.flink.runtime.taskmanager.Task.LOG, invokable, executingThread, taskNameWithSubtask);\n                        java.lang.Thread cancelThread = new java.lang.Thread(executingThread.getThreadGroup(), canceler, \"Canceler for \" + taskNameWithSubtask);\n                        cancelThread.start();\n                    }\n                    return;\n                }\n            } else {\n                throw new java.lang.IllegalStateException(\"Unexpected task state: \" + current);\n            }\n        } \n    }\n\n    public void registerExecutionListener(akka.actor.ActorRef listener) {\n        executionListenerActors.add(listener);\n    }\n\n    public void unregisterExecutionListener(akka.actor.ActorRef listener) {\n        executionListenerActors.remove(listener);\n    }\n\n    private void notifyObservers(org.apache.flink.runtime.execution.ExecutionState newState, java.lang.Throwable error) {\n        if (error == null) {\n            org.apache.flink.runtime.taskmanager.Task.LOG.info((taskNameWithSubtask + \" switched to \") + newState);\n        } else {\n            org.apache.flink.runtime.taskmanager.Task.LOG.info(((taskNameWithSubtask + \" switched to \") + newState) + \" with exception.\", error);\n        }\n        org.apache.flink.runtime.taskmanager.TaskExecutionState stateUpdate = new org.apache.flink.runtime.taskmanager.TaskExecutionState(jobId, executionId, newState, error);\n        org.apache.flink.runtime.messages.TaskMessages.UpdateTaskExecutionState actorMessage = new org.apache.flink.runtime.messages.TaskMessages.UpdateTaskExecutionState(stateUpdate);\n        for (akka.actor.ActorRef listener : executionListenerActors) {\n            listener.tell(actorMessage, akka.actor.ActorRef.noSender());\n        }\n    }\n\n    public void triggerCheckpointBarrier(final long checkpointID, final long checkpointTimestamp) {\n        org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable invokable = this.invokable;\n        if ((executionState == org.apache.flink.runtime.execution.ExecutionState.RUNNING) && (invokable != null)) {\n            if (invokable instanceof org.apache.flink.runtime.jobgraph.tasks.CheckpointedOperator) {\n                final org.apache.flink.runtime.jobgraph.tasks.CheckpointedOperator checkpointer = ((org.apache.flink.runtime.jobgraph.tasks.CheckpointedOperator) (invokable));\n                final org.slf4j.Logger logger = org.apache.flink.runtime.taskmanager.Task.LOG;\n                final java.lang.String taskName = taskNameWithSubtask;\n                java.lang.Runnable runnable = new java.lang.Runnable() {\n                    @java.lang.Override\n                    public void run() {\n                        try {\n                            checkpointer.triggerCheckpoint(checkpointID, checkpointTimestamp);\n                        } catch (java.lang.Throwable t) {\n                            logger.error(\"Error while triggering checkpoint for \" + taskName, t);\n                        }\n                    }\n                };\n                executeAsyncCallRunnable(runnable, \"Checkpoint Trigger\");\n            } else {\n                org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Task received a checkpoint request, but is not a checkpointing task - \" + taskNameWithSubtask);\n            }\n        } else {\n            org.apache.flink.runtime.taskmanager.Task.LOG.debug(\"Ignoring request to trigger a checkpoint for non-running task.\");\n        }\n    }\n\n    public void confirmCheckpoint(final long checkpointID, final long checkpointTimestamp) {\n        org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable invokable = this.invokable;\n        if ((executionState == org.apache.flink.runtime.execution.ExecutionState.RUNNING) && (invokable != null)) {\n            if (invokable instanceof org.apache.flink.runtime.jobgraph.tasks.CheckpointCommittingOperator) {\n                final org.apache.flink.runtime.jobgraph.tasks.CheckpointCommittingOperator checkpointer = ((org.apache.flink.runtime.jobgraph.tasks.CheckpointCommittingOperator) (invokable));\n                final org.slf4j.Logger logger = org.apache.flink.runtime.taskmanager.Task.LOG;\n                final java.lang.String taskName = taskNameWithSubtask;\n                java.lang.Runnable runnable = new java.lang.Runnable() {\n                    @java.lang.Override\n                    public void run() {\n                        try {\n                            checkpointer.confirmCheckpoint(checkpointID, checkpointTimestamp);\n                        } catch (java.lang.Throwable t) {\n                            logger.error(\"Error while confirming checkpoint for \" + taskName, t);\n                        }\n                    }\n                };\n                executeAsyncCallRunnable(runnable, \"Checkpoint Confirmation\");\n            } else {\n                org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Task received a checkpoint commit notification, but is not a checkpoint committing task - \" + taskNameWithSubtask);\n            }\n        } else {\n            org.apache.flink.runtime.taskmanager.Task.LOG.debug(\"Ignoring checkpoint commit notification for non-running task.\");\n        }\n    }\n\n    public void onPartitionStateUpdate(org.apache.flink.runtime.jobgraph.IntermediateDataSetID resultId, org.apache.flink.runtime.jobgraph.IntermediateResultPartitionID partitionId, org.apache.flink.runtime.execution.ExecutionState partitionState) throws java.io.IOException, java.lang.InterruptedException {\n        if (executionState == org.apache.flink.runtime.execution.ExecutionState.RUNNING) {\n            final org.apache.flink.runtime.io.network.partition.consumer.SingleInputGate inputGate = inputGatesById.get(resultId);\n            if (inputGate != null) {\n                if (partitionState == org.apache.flink.runtime.execution.ExecutionState.RUNNING) {\n                    inputGate.retriggerPartitionRequest(partitionId);\n                } else if (((partitionState == org.apache.flink.runtime.execution.ExecutionState.CANCELED) || (partitionState == org.apache.flink.runtime.execution.ExecutionState.CANCELING)) || (partitionState == org.apache.flink.runtime.execution.ExecutionState.FAILED)) {\n                    cancelExecution();\n                } else {\n                    failExternally(new java.lang.IllegalStateException((\"Received unexpected partition state \" + partitionState) + \" for partition request. This is a bug.\"));\n                }\n            } else {\n                failExternally(new java.lang.IllegalStateException(((\"Received partition state for \" + \"unknown input gate \") + resultId) + \". This is a bug.\"));\n            }\n        } else {\n            org.apache.flink.runtime.taskmanager.Task.LOG.debug(\"Ignoring partition state notification for not running task.\");\n        }\n    }\n\n    private void executeAsyncCallRunnable(java.lang.Runnable runnable, java.lang.String callName) {\n        java.lang.Thread thread = new java.lang.Thread(runnable, callName);\n        thread.setDaemon(true);\n        thread.start();\n    }\n\n    private void cancelInvokable() {\n        if (((invokable != null) && (this.invokable != null)) && invokableHasBeenCanceled.compareAndSet(false, true)) {\n            try {\n                invokable.cancel();\n            } catch (java.lang.Throwable t) {\n                org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Error while canceling task \" + taskNameWithSubtask, t);\n            }\n        }\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return ((getTaskNameWithSubtasks() + \" [\") + executionState) + ']';\n    }\n\n    public static java.lang.String getTaskNameWithSubtask(java.lang.String name, int subtask, int numSubtasks) {\n        return ((((name + \" (\") + (subtask + 1)) + '/') + numSubtasks) + ')';\n    }\n\n    public static java.lang.String getTaskNameWithSubtaskAndID(java.lang.String name, int subtask, int numSubtasks, org.apache.flink.runtime.executiongraph.ExecutionAttemptID id) {\n        return ((((((name + \" (\") + (subtask + 1)) + '/') + numSubtasks) + \") (\") + id) + ')';\n    }\n\n    private static class TaskCanceler implements java.lang.Runnable {\n        private final org.slf4j.Logger logger;\n\n        private final org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable invokable;\n\n        private final java.lang.Thread executer;\n\n        private final java.lang.String taskName;\n\n        public TaskCanceler(org.slf4j.Logger logger, org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable invokable, java.lang.Thread executer, java.lang.String taskName) {\n            this.logger = logger;\n            this.invokable = invokable;\n            this.executer = executer;\n            this.taskName = taskName;\n        }\n\n        @java.lang.Override\n        public void run() {\n            try {\n                try {\n                    invokable.cancel();\n                } catch (java.lang.Throwable t) {\n                    logger.error(\"Error while canceling the task\", t);\n                }\n                executer.interrupt();\n                try {\n                    executer.join(10000);\n                } catch (java.lang.InterruptedException e) {\n                }\n                while (executer.isAlive()) {\n                    java.lang.StringBuilder bld = new java.lang.StringBuilder();\n                    java.lang.StackTraceElement[] stack = executer.getStackTrace();\n                    for (java.lang.StackTraceElement e : stack) {\n                        bld.append(e).append('\\n');\n                    }\n                    logger.warn(\"Task \\'{}\\' did not react to cancelling signal, but is stuck in method:\\n {}\", taskName, bld.toString());\n                    executer.interrupt();\n                    try {\n                        executer.join(5000);\n                    } catch (java.lang.InterruptedException e) {\n                    }\n                } \n            } catch (java.lang.Throwable t) {\n                logger.error(\"Error in the task canceler\", t);\n            }\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Break",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "invokable",
            "src_parent": "(invokable != null)",
            "src_parent_type": "BinaryOperator",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "invokable",
            "src_parent": "invokable.cancel()",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    if (t instanceof org.apache.flink.runtime.execution.CancelTaskException) {\n        if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.CANCELED)) {\n            cancelInvokable();\n            notifyObservers(ExecutionState.CANCELED, null);\n            break;\n        }\n    } else if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.FAILED)) {\n        failureCause = t;\n        cancelInvokable();\n        notifyObservers(ExecutionState.FAILED, t);\n        break;\n    }\n}",
            "src_parent": "if ((current == org.apache.flink.runtime.execution.ExecutionState.RUNNING) || (current == org.apache.flink.runtime.execution.ExecutionState.DEPLOYING)) {\n    if (t instanceof org.apache.flink.runtime.execution.CancelTaskException) {\n        if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.CANCELED)) {\n            cancelInvokable();\n            notifyObservers(ExecutionState.CANCELED, null);\n            break;\n        }\n    } else if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.FAILED)) {\n        failureCause = t;\n        cancelInvokable();\n        notifyObservers(ExecutionState.FAILED, t);\n        break;\n    }\n} else if (current == org.apache.flink.runtime.execution.ExecutionState.CANCELING) {\n    if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.CANCELED)) {\n        notifyObservers(ExecutionState.CANCELED, null);\n        break;\n    }\n} else if (current == org.apache.flink.runtime.execution.ExecutionState.FAILED) {\n    break;\n} else if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.FAILED)) {\n    org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Unexpected state in Task during an exception: \" + current);\n    break;\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.CANCELED)",
            "src_parent": "if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.CANCELED)) {\n    cancelInvokable();\n    notifyObservers(ExecutionState.CANCELED, null);\n    break;\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "cancelInvokable()",
            "src_parent": "{\n    cancelInvokable();\n    notifyObservers(ExecutionState.CANCELED, null);\n    break;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "notifyObservers(ExecutionState.CANCELED, null)",
            "src_parent": "{\n    cancelInvokable();\n    notifyObservers(ExecutionState.CANCELED, null);\n    break;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (((invokable != null) && (this.invokable != null)) && invokableHasBeenCanceled.compareAndSet(false, true)) {\n    try {\n        invokable.cancel();\n    } catch (java.lang.Throwable t) {\n        org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Error while canceling task \" + taskNameWithSubtask, t);\n    }\n}",
            "dst_parent": "{\n    if (((invokable != null) && (this.invokable != null)) && invokableHasBeenCanceled.compareAndSet(false, true)) {\n        try {\n            invokable.cancel();\n        } catch (java.lang.Throwable t) {\n            org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Error while canceling task \" + taskNameWithSubtask, t);\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (((invokable != null) && (this.invokable != null)) && invokableHasBeenCanceled.compareAndSet(false, true)) {\n    try {\n        invokable.cancel();\n    } catch (java.lang.Throwable t2) {\n        org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Error while canceling task \" + taskNameWithSubtask, t2);\n    }\n}",
            "src_parent": "{\n    failureCause = t;\n    notifyObservers(ExecutionState.FAILED, t);\n    if (((invokable != null) && (this.invokable != null)) && invokableHasBeenCanceled.compareAndSet(false, true)) {\n        try {\n            invokable.cancel();\n        } catch (java.lang.Throwable t2) {\n            org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Error while canceling task \" + taskNameWithSubtask, t2);\n        }\n    }\n    break;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.CANCELED)) {\n        cancelInvokable();\n        notifyObservers(ExecutionState.CANCELED, null);\n        break;\n    }\n}",
            "dst_parent": "if (t instanceof org.apache.flink.runtime.execution.CancelTaskException) {\n    if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.CANCELED)) {\n        cancelInvokable();\n        notifyObservers(ExecutionState.CANCELED, null);\n        break;\n    }\n} else if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.FAILED)) {\n    failureCause = t;\n    cancelInvokable();\n    notifyObservers(ExecutionState.FAILED, t);\n    break;\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.FAILED)) {\n        failureCause = t;\n        notifyObservers(ExecutionState.FAILED, t);\n        if (((invokable != null) && (this.invokable != null)) && invokableHasBeenCanceled.compareAndSet(false, true)) {\n            try {\n                invokable.cancel();\n            } catch (java.lang.Throwable t2) {\n                org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Error while canceling task \" + taskNameWithSubtask, t2);\n            }\n        }\n        break;\n    }\n}",
            "src_parent": "if ((current == org.apache.flink.runtime.execution.ExecutionState.RUNNING) || (current == org.apache.flink.runtime.execution.ExecutionState.DEPLOYING)) {\n    if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.FAILED)) {\n        failureCause = t;\n        notifyObservers(ExecutionState.FAILED, t);\n        if (((invokable != null) && (this.invokable != null)) && invokableHasBeenCanceled.compareAndSet(false, true)) {\n            try {\n                invokable.cancel();\n            } catch (java.lang.Throwable t2) {\n                org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Error while canceling task \" + taskNameWithSubtask, t2);\n            }\n        }\n        break;\n    }\n} else if (current == org.apache.flink.runtime.execution.ExecutionState.CANCELING) {\n    if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.CANCELED)) {\n        notifyObservers(ExecutionState.CANCELED, null);\n        break;\n    }\n} else if (current == org.apache.flink.runtime.execution.ExecutionState.FAILED) {\n    break;\n} else if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.FAILED)) {\n    org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Unexpected state in Task during an exception: \" + current);\n    break;\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.FAILED)",
            "dst_parent": "if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.FAILED)) {\n    failureCause = t;\n    cancelInvokable();\n    notifyObservers(ExecutionState.FAILED, t);\n    break;\n}",
            "dst_parent_type": "If",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.FAILED)",
            "src_parent": "if (org.apache.flink.runtime.taskmanager.Task.STATE_UPDATER.compareAndSet(this, current, ExecutionState.FAILED)) {\n    failureCause = t;\n    notifyObservers(ExecutionState.FAILED, t);\n    if (((invokable != null) && (this.invokable != null)) && invokableHasBeenCanceled.compareAndSet(false, true)) {\n        try {\n            invokable.cancel();\n        } catch (java.lang.Throwable t2) {\n            org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Error while canceling task \" + taskNameWithSubtask, t2);\n        }\n    }\n    break;\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "failureCause = t",
            "dst_parent": "{\n    failureCause = t;\n    cancelInvokable();\n    notifyObservers(ExecutionState.FAILED, t);\n    break;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "failureCause = t",
            "src_parent": "{\n    failureCause = t;\n    notifyObservers(ExecutionState.FAILED, t);\n    if (((invokable != null) && (this.invokable != null)) && invokableHasBeenCanceled.compareAndSet(false, true)) {\n        try {\n            invokable.cancel();\n        } catch (java.lang.Throwable t2) {\n            org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Error while canceling task \" + taskNameWithSubtask, t2);\n        }\n    }\n    break;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "notifyObservers(ExecutionState.FAILED, t)",
            "dst_parent": "{\n    failureCause = t;\n    cancelInvokable();\n    notifyObservers(ExecutionState.FAILED, t);\n    break;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "notifyObservers(ExecutionState.FAILED, t)",
            "src_parent": "{\n    failureCause = t;\n    notifyObservers(ExecutionState.FAILED, t);\n    if (((invokable != null) && (this.invokable != null)) && invokableHasBeenCanceled.compareAndSet(false, true)) {\n        try {\n            invokable.cancel();\n        } catch (java.lang.Throwable t2) {\n            org.apache.flink.runtime.taskmanager.Task.LOG.error(\"Error while canceling task \" + taskNameWithSubtask, t2);\n        }\n    }\n    break;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "Task"
    }
  ],
  "id": "flink_d594d024"
}