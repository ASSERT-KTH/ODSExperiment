{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "protected void initializeColumnLabels() {\n    if (getNumObjectiveFunctions() == 2) {\n        columnLabels.add(\"W\");\n    }\n    columnLabels.add(\"Z\");\n    for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {\n        columnLabels.add(\"x\" + i);\n    }\n    if (!restrictToNonNegative) {\n        columnLabels.add(\"x-\");\n    }\n    for (int i = 0; i < getNumSlackVariables(); i++) {\n        columnLabels.add(\"s\" + i);\n    }\n    for (int i = 0; i < getNumArtificialVariables(); i++) {\n        columnLabels.add(\"a\" + i);\n    }\n    columnLabels.add(\"RHS\");\n}",
            "dst_parent": "class SimplexTableau implements java.io.Serializable {\n    private static final long serialVersionUID = -1369660067587938365L;\n\n    private final org.apache.commons.math.optimization.linear.LinearObjectiveFunction f;\n\n    private final java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> constraints;\n\n    private final boolean restrictToNonNegative;\n\n    private final java.util.List<java.lang.String> columnLabels = new java.util.ArrayList<java.lang.String>();\n\n    private transient org.apache.commons.math.linear.RealMatrix tableau;\n\n    private final int numDecisionVariables;\n\n    private final int numSlackVariables;\n\n    private int numArtificialVariables;\n\n    private final double epsilon;\n\n    SimplexTableau(final org.apache.commons.math.optimization.linear.LinearObjectiveFunction f, final java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> constraints, final org.apache.commons.math.optimization.GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {\n        this.f = f;\n        this.constraints = normalizeConstraints(constraints);\n        this.restrictToNonNegative = restrictToNonNegative;\n        this.epsilon = epsilon;\n        this.numDecisionVariables = f.getCoefficients().getDimension() + (restrictToNonNegative ? 0 : 1);\n        this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);\n        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);\n        this.tableau = createTableau(goalType == org.apache.commons.math.optimization.GoalType.MAXIMIZE);\n        initializeColumnLabels();\n    }\n\n    protected void initializeColumnLabels() {\n        if (getNumObjectiveFunctions() == 2) {\n            columnLabels.add(\"W\");\n        }\n        columnLabels.add(\"Z\");\n        for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {\n            columnLabels.add(\"x\" + i);\n        }\n        if (!restrictToNonNegative) {\n            columnLabels.add(\"x-\");\n        }\n        for (int i = 0; i < getNumSlackVariables(); i++) {\n            columnLabels.add(\"s\" + i);\n        }\n        for (int i = 0; i < getNumArtificialVariables(); i++) {\n            columnLabels.add(\"a\" + i);\n        }\n        columnLabels.add(\"RHS\");\n    }\n\n    protected org.apache.commons.math.linear.RealMatrix createTableau(final boolean maximize) {\n        int width = (((numDecisionVariables + numSlackVariables) + numArtificialVariables) + getNumObjectiveFunctions()) + 1;\n        int height = constraints.size() + getNumObjectiveFunctions();\n        org.apache.commons.math.linear.Array2DRowRealMatrix matrix = new org.apache.commons.math.linear.Array2DRowRealMatrix(height, width);\n        if (getNumObjectiveFunctions() == 2) {\n            matrix.setEntry(0, 0, -1);\n        }\n        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;\n        matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);\n        org.apache.commons.math.linear.RealVector objectiveCoefficients = (maximize) ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();\n        copyArray(objectiveCoefficients.getData(), matrix.getDataRef()[zIndex]);\n        matrix.setEntry(zIndex, width - 1, maximize ? f.getConstantTerm() : (-1) * f.getConstantTerm());\n        if (!restrictToNonNegative) {\n            matrix.setEntry(zIndex, getSlackVariableOffset() - 1, org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(objectiveCoefficients));\n        }\n        int slackVar = 0;\n        int artificialVar = 0;\n        for (int i = 0; i < constraints.size(); i++) {\n            org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i);\n            int row = getNumObjectiveFunctions() + i;\n            copyArray(constraint.getCoefficients().getData(), matrix.getDataRef()[row]);\n            if (!restrictToNonNegative) {\n                matrix.setEntry(row, getSlackVariableOffset() - 1, org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(constraint.getCoefficients()));\n            }\n            matrix.setEntry(row, width - 1, constraint.getValue());\n            if (constraint.getRelationship() == Relationship.LEQ) {\n                matrix.setEntry(row, getSlackVariableOffset() + (slackVar++), 1);\n            } else if (constraint.getRelationship() == Relationship.GEQ) {\n                matrix.setEntry(row, getSlackVariableOffset() + (slackVar++), -1);\n            }\n            if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {\n                matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);\n                matrix.setEntry(row, getArtificialVariableOffset() + (artificialVar++), 1);\n                matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));\n            }\n        }\n        return matrix;\n    }\n\n    public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalizeConstraints(java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> originalConstraints) {\n        java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>();\n        for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : originalConstraints) {\n            normalized.add(normalize(constraint));\n        }\n        return normalized;\n    }\n\n    private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) {\n        if (constraint.getValue() < 0) {\n            return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());\n        }\n        return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());\n    }\n\n    protected final int getNumObjectiveFunctions() {\n        return this.numArtificialVariables > 0 ? 2 : 1;\n    }\n\n    private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) {\n        int count = 0;\n        for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {\n            if (constraint.getRelationship() == relationship) {\n                ++count;\n            }\n        }\n        return count;\n    }\n\n    protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) {\n        double sum = 0;\n        for (double coefficient : coefficients.getData()) {\n            sum -= coefficient;\n        }\n        return sum;\n    }\n\n    protected java.lang.Integer getBasicRow(final int col) {\n        java.lang.Integer row = null;\n        for (int i = 0; i < getHeight(); i++) {\n            if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n                row = i;\n            } else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                return null;\n            }\n        }\n        return row;\n    }\n\n    protected void dropPhase1Objective() {\n        if (getNumObjectiveFunctions() == 1) {\n            return;\n        }\n        java.util.List<java.lang.Integer> columnsToDrop = new java.util.ArrayList<java.lang.Integer>();\n        columnsToDrop.add(0);\n        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n            if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) > 0) {\n                columnsToDrop.add(i);\n            }\n        }\n        for (int i = 0; i < getNumArtificialVariables(); i++) {\n            int col = i + getArtificialVariableOffset();\n            if (getBasicRow(col) == null) {\n                columnsToDrop.add(col);\n            }\n        }\n        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n        for (int i = 1; i < getHeight(); i++) {\n            int col = 0;\n            for (int j = 0; j < getWidth(); j++) {\n                if (!columnsToDrop.contains(j)) {\n                    matrix[i - 1][col++] = tableau.getEntry(i, j);\n                }\n            }\n        }\n        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n            columnLabels.remove(((int) (columnsToDrop.get(i))));\n        }\n        this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix);\n        this.numArtificialVariables = 0;\n    }\n\n    private void copyArray(final double[] src, final double[] dest) {\n        java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);\n    }\n\n    boolean isOptimal() {\n        for (int i = getNumObjectiveFunctions(); i < (getWidth() - 1); i++) {\n            if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    protected org.apache.commons.math.optimization.RealPointValuePair getSolution() {\n        int negativeVarColumn = columnLabels.indexOf(\"x-\");\n        java.lang.Integer negativeVarBasicRow = (negativeVarColumn > 0) ? getBasicRow(negativeVarColumn) : null;\n        double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n        java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>();\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        for (int i = 0; i < coefficients.length; i++) {\n            int colIndex = columnLabels.indexOf(\"x\" + i);\n            if (colIndex < 0) {\n                coefficients[i] = 0;\n                continue;\n            }\n            java.lang.Integer basicRow = getBasicRow(colIndex);\n            if (basicRows.contains(basicRow)) {\n                coefficients[i] = 0;\n            } else {\n                basicRows.add(basicRow);\n                coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);\n            }\n        }\n        return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));\n    }\n\n    protected void divideRow(final int dividendRow, final double divisor) {\n        for (int j = 0; j < getWidth(); j++) {\n            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);\n        }\n    }\n\n    protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) {\n        tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow).subtract(tableau.getRowVector(subtrahendRow).mapMultiply(multiple)));\n    }\n\n    protected final int getWidth() {\n        return tableau.getColumnDimension();\n    }\n\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    protected final double getEntry(final int row, final int column) {\n        return tableau.getEntry(row, column);\n    }\n\n    protected final void setEntry(final int row, final int column, final double value) {\n        tableau.setEntry(row, column, value);\n    }\n\n    protected final int getSlackVariableOffset() {\n        return getNumObjectiveFunctions() + numDecisionVariables;\n    }\n\n    protected final int getArtificialVariableOffset() {\n        return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;\n    }\n\n    protected final int getRhsOffset() {\n        return getWidth() - 1;\n    }\n\n    protected final int getNumDecisionVariables() {\n        return numDecisionVariables;\n    }\n\n    protected final int getOriginalNumDecisionVariables() {\n        return f.getCoefficients().getDimension();\n    }\n\n    protected final int getNumSlackVariables() {\n        return numSlackVariables;\n    }\n\n    protected final int getNumArtificialVariables() {\n        return numArtificialVariables;\n    }\n\n    protected final double[][] getData() {\n        return tableau.getData();\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (other == null) {\n            return false;\n        }\n        try {\n            org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other));\n            return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);\n        } catch (java.lang.ClassCastException ex) {\n            return false;\n        }\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();\n    }\n\n    private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException {\n        oos.defaultWriteObject();\n        org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);\n    }\n\n    private void readObject(java.io.ObjectInputStream ois) throws java.io.IOException, java.lang.ClassNotFoundException {\n        ois.defaultReadObject();\n        org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois);\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "protected final int getNegativeDecisionVariableOffset() {\n    return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();\n}",
            "src_parent": "class SimplexTableau implements java.io.Serializable {\n    private static final long serialVersionUID = -1369660067587938365L;\n\n    private final org.apache.commons.math.optimization.linear.LinearObjectiveFunction f;\n\n    private final java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> constraints;\n\n    private final boolean restrictToNonNegative;\n\n    private transient org.apache.commons.math.linear.RealMatrix tableau;\n\n    private final int numDecisionVariables;\n\n    private final int numSlackVariables;\n\n    private int numArtificialVariables;\n\n    private final double epsilon;\n\n    SimplexTableau(final org.apache.commons.math.optimization.linear.LinearObjectiveFunction f, final java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> constraints, final org.apache.commons.math.optimization.GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {\n        this.f = f;\n        this.constraints = normalizeConstraints(constraints);\n        this.restrictToNonNegative = restrictToNonNegative;\n        this.epsilon = epsilon;\n        this.numDecisionVariables = f.getCoefficients().getDimension() + (restrictToNonNegative ? 0 : 1);\n        this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);\n        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);\n        this.tableau = createTableau(goalType == org.apache.commons.math.optimization.GoalType.MAXIMIZE);\n    }\n\n    protected org.apache.commons.math.linear.RealMatrix createTableau(final boolean maximize) {\n        int width = (((numDecisionVariables + numSlackVariables) + numArtificialVariables) + getNumObjectiveFunctions()) + 1;\n        int height = constraints.size() + getNumObjectiveFunctions();\n        org.apache.commons.math.linear.Array2DRowRealMatrix matrix = new org.apache.commons.math.linear.Array2DRowRealMatrix(height, width);\n        if (getNumObjectiveFunctions() == 2) {\n            matrix.setEntry(0, 0, -1);\n        }\n        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;\n        matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);\n        org.apache.commons.math.linear.RealVector objectiveCoefficients = (maximize) ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();\n        copyArray(objectiveCoefficients.getData(), matrix.getDataRef()[zIndex]);\n        matrix.setEntry(zIndex, width - 1, maximize ? f.getConstantTerm() : (-1) * f.getConstantTerm());\n        if (!restrictToNonNegative) {\n            matrix.setEntry(zIndex, getSlackVariableOffset() - 1, org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(objectiveCoefficients));\n        }\n        int slackVar = 0;\n        int artificialVar = 0;\n        for (int i = 0; i < constraints.size(); i++) {\n            org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i);\n            int row = getNumObjectiveFunctions() + i;\n            copyArray(constraint.getCoefficients().getData(), matrix.getDataRef()[row]);\n            if (!restrictToNonNegative) {\n                matrix.setEntry(row, getSlackVariableOffset() - 1, org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(constraint.getCoefficients()));\n            }\n            matrix.setEntry(row, width - 1, constraint.getValue());\n            if (constraint.getRelationship() == Relationship.LEQ) {\n                matrix.setEntry(row, getSlackVariableOffset() + (slackVar++), 1);\n            } else if (constraint.getRelationship() == Relationship.GEQ) {\n                matrix.setEntry(row, getSlackVariableOffset() + (slackVar++), -1);\n            }\n            if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {\n                matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);\n                matrix.setEntry(row, getArtificialVariableOffset() + (artificialVar++), 1);\n                matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));\n            }\n        }\n        return matrix;\n    }\n\n    public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalizeConstraints(java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> originalConstraints) {\n        java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>();\n        for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : originalConstraints) {\n            normalized.add(normalize(constraint));\n        }\n        return normalized;\n    }\n\n    private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) {\n        if (constraint.getValue() < 0) {\n            return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());\n        }\n        return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());\n    }\n\n    protected final int getNumObjectiveFunctions() {\n        return this.numArtificialVariables > 0 ? 2 : 1;\n    }\n\n    private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) {\n        int count = 0;\n        for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {\n            if (constraint.getRelationship() == relationship) {\n                ++count;\n            }\n        }\n        return count;\n    }\n\n    protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) {\n        double sum = 0;\n        for (double coefficient : coefficients.getData()) {\n            sum -= coefficient;\n        }\n        return sum;\n    }\n\n    protected java.lang.Integer getBasicRow(final int col) {\n        java.lang.Integer row = null;\n        for (int i = 0; i < getHeight(); i++) {\n            if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n                row = i;\n            } else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                return null;\n            }\n        }\n        return row;\n    }\n\n    protected void dropPhase1Objective() {\n        if (getNumObjectiveFunctions() == 1) {\n            return;\n        }\n        java.util.List<java.lang.Integer> columnsToDrop = new java.util.ArrayList<java.lang.Integer>();\n        columnsToDrop.add(0);\n        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n            if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) > 0) {\n                columnsToDrop.add(i);\n            }\n        }\n        for (int i = 0; i < getNumArtificialVariables(); i++) {\n            int col = i + getArtificialVariableOffset();\n            if (getBasicRow(col) == null) {\n                columnsToDrop.add(col);\n            }\n        }\n        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n        for (int i = 1; i < getHeight(); i++) {\n            int col = 0;\n            for (int j = 0; j < getWidth(); j++) {\n                if (!columnsToDrop.contains(j)) {\n                    matrix[i - 1][col++] = tableau.getEntry(i, j);\n                }\n            }\n        }\n        this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix);\n        this.numArtificialVariables = 0;\n    }\n\n    private void copyArray(final double[] src, final double[] dest) {\n        java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);\n    }\n\n    boolean isOptimal() {\n        for (int i = getNumObjectiveFunctions(); i < (getWidth() - 1); i++) {\n            if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    protected org.apache.commons.math.optimization.RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        java.lang.Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());\n        double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n        java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>();\n        for (int i = 0; i < coefficients.length; i++) {\n            java.lang.Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            if (basicRows.contains(basicRow)) {\n                coefficients[i] = 0;\n            } else {\n                basicRows.add(basicRow);\n                coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);\n            }\n        }\n        return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));\n    }\n\n    protected void divideRow(final int dividendRow, final double divisor) {\n        for (int j = 0; j < getWidth(); j++) {\n            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);\n        }\n    }\n\n    protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) {\n        tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow).subtract(tableau.getRowVector(subtrahendRow).mapMultiply(multiple)));\n    }\n\n    protected final int getWidth() {\n        return tableau.getColumnDimension();\n    }\n\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    protected final double getEntry(final int row, final int column) {\n        return tableau.getEntry(row, column);\n    }\n\n    protected final void setEntry(final int row, final int column, final double value) {\n        tableau.setEntry(row, column, value);\n    }\n\n    protected final int getSlackVariableOffset() {\n        return getNumObjectiveFunctions() + numDecisionVariables;\n    }\n\n    protected final int getArtificialVariableOffset() {\n        return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;\n    }\n\n    protected final int getRhsOffset() {\n        return getWidth() - 1;\n    }\n\n    protected final int getNegativeDecisionVariableOffset() {\n        return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();\n    }\n\n    protected final int getNumDecisionVariables() {\n        return numDecisionVariables;\n    }\n\n    protected final int getOriginalNumDecisionVariables() {\n        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;\n    }\n\n    protected final int getNumSlackVariables() {\n        return numSlackVariables;\n    }\n\n    protected final int getNumArtificialVariables() {\n        return numArtificialVariables;\n    }\n\n    protected final double[][] getData() {\n        return tableau.getData();\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (other == null) {\n            return false;\n        }\n        try {\n            org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other));\n            return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);\n        } catch (java.lang.ClassCastException ex) {\n            return false;\n        }\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();\n    }\n\n    private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException {\n        oos.defaultWriteObject();\n        org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);\n    }\n\n    private void readObject(java.io.ObjectInputStream ois) throws java.io.IOException, java.lang.ClassNotFoundException {\n        ois.defaultReadObject();\n        org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "void",
            "dst_parent": "protected void initializeColumnLabels() {\n    if (getNumObjectiveFunctions() == 2) {\n        columnLabels.add(\"W\");\n    }\n    columnLabels.add(\"Z\");\n    for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {\n        columnLabels.add(\"x\" + i);\n    }\n    if (!restrictToNonNegative) {\n        columnLabels.add(\"x-\");\n    }\n    for (int i = 0; i < getNumSlackVariables(); i++) {\n        columnLabels.add(\"s\" + i);\n    }\n    for (int i = 0; i < getNumArtificialVariables(); i++) {\n        columnLabels.add(\"a\" + i);\n    }\n    columnLabels.add(\"RHS\");\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "int",
            "src_parent": "protected final int getNegativeDecisionVariableOffset() {\n    return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "getNumObjectiveFunctions() == 2",
            "dst_parent": "if (getNumObjectiveFunctions() == 2) {\n    columnLabels.add(\"W\");\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "UPD",
            "src": "getNumObjectiveFunctions() + i",
            "src_parent": "getBasicRow(getNumObjectiveFunctions() + i)",
            "src_parent_type": "Invocation",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "getNumSlackVariables()",
            "dst_parent": "i < getNumSlackVariables()",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "getNumObjectiveFunctions()",
            "src_parent": "getNumObjectiveFunctions() + getOriginalNumDecisionVariables()",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Wrapper",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "final",
            "src_parent": "protected final int getNegativeDecisionVariableOffset() {\n    return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();\n}",
            "src_parent_type": "Method",
            "src_type": "Wra"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "getBasicRow(getNegativeDecisionVariableOffset())",
            "src_parent": "java.lang.Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset())",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1",
            "src_parent": "return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1",
            "src_parent_type": "Return",
            "src_type": "Conditional"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private final java.util.List<java.lang.String> columnLabels = new java.util.ArrayList<java.lang.String>();",
            "src_parent": "class SimplexTableau implements java.io.Serializable {\n    private static final long serialVersionUID = -1369660067587938365L;\n\n    private final org.apache.commons.math.optimization.linear.LinearObjectiveFunction f;\n\n    private final java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> constraints;\n\n    private final boolean restrictToNonNegative;\n\n    private final java.util.List<java.lang.String> columnLabels = new java.util.ArrayList<java.lang.String>();\n\n    private transient org.apache.commons.math.linear.RealMatrix tableau;\n\n    private final int numDecisionVariables;\n\n    private final int numSlackVariables;\n\n    private int numArtificialVariables;\n\n    private final double epsilon;\n\n    SimplexTableau(final org.apache.commons.math.optimization.linear.LinearObjectiveFunction f, final java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> constraints, final org.apache.commons.math.optimization.GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {\n        this.f = f;\n        this.constraints = normalizeConstraints(constraints);\n        this.restrictToNonNegative = restrictToNonNegative;\n        this.epsilon = epsilon;\n        this.numDecisionVariables = f.getCoefficients().getDimension() + (restrictToNonNegative ? 0 : 1);\n        this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);\n        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);\n        this.tableau = createTableau(goalType == org.apache.commons.math.optimization.GoalType.MAXIMIZE);\n        initializeColumnLabels();\n    }\n\n    protected void initializeColumnLabels() {\n        if (getNumObjectiveFunctions() == 2) {\n            columnLabels.add(\"W\");\n        }\n        columnLabels.add(\"Z\");\n        for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {\n            columnLabels.add(\"x\" + i);\n        }\n        if (!restrictToNonNegative) {\n            columnLabels.add(\"x-\");\n        }\n        for (int i = 0; i < getNumSlackVariables(); i++) {\n            columnLabels.add(\"s\" + i);\n        }\n        for (int i = 0; i < getNumArtificialVariables(); i++) {\n            columnLabels.add(\"a\" + i);\n        }\n        columnLabels.add(\"RHS\");\n    }\n\n    protected org.apache.commons.math.linear.RealMatrix createTableau(final boolean maximize) {\n        int width = (((numDecisionVariables + numSlackVariables) + numArtificialVariables) + getNumObjectiveFunctions()) + 1;\n        int height = constraints.size() + getNumObjectiveFunctions();\n        org.apache.commons.math.linear.Array2DRowRealMatrix matrix = new org.apache.commons.math.linear.Array2DRowRealMatrix(height, width);\n        if (getNumObjectiveFunctions() == 2) {\n            matrix.setEntry(0, 0, -1);\n        }\n        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;\n        matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);\n        org.apache.commons.math.linear.RealVector objectiveCoefficients = (maximize) ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();\n        copyArray(objectiveCoefficients.getData(), matrix.getDataRef()[zIndex]);\n        matrix.setEntry(zIndex, width - 1, maximize ? f.getConstantTerm() : (-1) * f.getConstantTerm());\n        if (!restrictToNonNegative) {\n            matrix.setEntry(zIndex, getSlackVariableOffset() - 1, org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(objectiveCoefficients));\n        }\n        int slackVar = 0;\n        int artificialVar = 0;\n        for (int i = 0; i < constraints.size(); i++) {\n            org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i);\n            int row = getNumObjectiveFunctions() + i;\n            copyArray(constraint.getCoefficients().getData(), matrix.getDataRef()[row]);\n            if (!restrictToNonNegative) {\n                matrix.setEntry(row, getSlackVariableOffset() - 1, org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(constraint.getCoefficients()));\n            }\n            matrix.setEntry(row, width - 1, constraint.getValue());\n            if (constraint.getRelationship() == Relationship.LEQ) {\n                matrix.setEntry(row, getSlackVariableOffset() + (slackVar++), 1);\n            } else if (constraint.getRelationship() == Relationship.GEQ) {\n                matrix.setEntry(row, getSlackVariableOffset() + (slackVar++), -1);\n            }\n            if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {\n                matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);\n                matrix.setEntry(row, getArtificialVariableOffset() + (artificialVar++), 1);\n                matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));\n            }\n        }\n        return matrix;\n    }\n\n    public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalizeConstraints(java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> originalConstraints) {\n        java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>();\n        for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : originalConstraints) {\n            normalized.add(normalize(constraint));\n        }\n        return normalized;\n    }\n\n    private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) {\n        if (constraint.getValue() < 0) {\n            return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());\n        }\n        return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());\n    }\n\n    protected final int getNumObjectiveFunctions() {\n        return this.numArtificialVariables > 0 ? 2 : 1;\n    }\n\n    private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) {\n        int count = 0;\n        for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {\n            if (constraint.getRelationship() == relationship) {\n                ++count;\n            }\n        }\n        return count;\n    }\n\n    protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) {\n        double sum = 0;\n        for (double coefficient : coefficients.getData()) {\n            sum -= coefficient;\n        }\n        return sum;\n    }\n\n    protected java.lang.Integer getBasicRow(final int col) {\n        java.lang.Integer row = null;\n        for (int i = 0; i < getHeight(); i++) {\n            if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n                row = i;\n            } else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                return null;\n            }\n        }\n        return row;\n    }\n\n    protected void dropPhase1Objective() {\n        if (getNumObjectiveFunctions() == 1) {\n            return;\n        }\n        java.util.List<java.lang.Integer> columnsToDrop = new java.util.ArrayList<java.lang.Integer>();\n        columnsToDrop.add(0);\n        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n            if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) > 0) {\n                columnsToDrop.add(i);\n            }\n        }\n        for (int i = 0; i < getNumArtificialVariables(); i++) {\n            int col = i + getArtificialVariableOffset();\n            if (getBasicRow(col) == null) {\n                columnsToDrop.add(col);\n            }\n        }\n        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n        for (int i = 1; i < getHeight(); i++) {\n            int col = 0;\n            for (int j = 0; j < getWidth(); j++) {\n                if (!columnsToDrop.contains(j)) {\n                    matrix[i - 1][col++] = tableau.getEntry(i, j);\n                }\n            }\n        }\n        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n            columnLabels.remove(((int) (columnsToDrop.get(i))));\n        }\n        this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix);\n        this.numArtificialVariables = 0;\n    }\n\n    private void copyArray(final double[] src, final double[] dest) {\n        java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);\n    }\n\n    boolean isOptimal() {\n        for (int i = getNumObjectiveFunctions(); i < (getWidth() - 1); i++) {\n            if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    protected org.apache.commons.math.optimization.RealPointValuePair getSolution() {\n        int negativeVarColumn = columnLabels.indexOf(\"x-\");\n        java.lang.Integer negativeVarBasicRow = (negativeVarColumn > 0) ? getBasicRow(negativeVarColumn) : null;\n        double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n        java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>();\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        for (int i = 0; i < coefficients.length; i++) {\n            int colIndex = columnLabels.indexOf(\"x\" + i);\n            if (colIndex < 0) {\n                coefficients[i] = 0;\n                continue;\n            }\n            java.lang.Integer basicRow = getBasicRow(colIndex);\n            if (basicRows.contains(basicRow)) {\n                coefficients[i] = 0;\n            } else {\n                basicRows.add(basicRow);\n                coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);\n            }\n        }\n        return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));\n    }\n\n    protected void divideRow(final int dividendRow, final double divisor) {\n        for (int j = 0; j < getWidth(); j++) {\n            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);\n        }\n    }\n\n    protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) {\n        tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow).subtract(tableau.getRowVector(subtrahendRow).mapMultiply(multiple)));\n    }\n\n    protected final int getWidth() {\n        return tableau.getColumnDimension();\n    }\n\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    protected final double getEntry(final int row, final int column) {\n        return tableau.getEntry(row, column);\n    }\n\n    protected final void setEntry(final int row, final int column, final double value) {\n        tableau.setEntry(row, column, value);\n    }\n\n    protected final int getSlackVariableOffset() {\n        return getNumObjectiveFunctions() + numDecisionVariables;\n    }\n\n    protected final int getArtificialVariableOffset() {\n        return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;\n    }\n\n    protected final int getRhsOffset() {\n        return getWidth() - 1;\n    }\n\n    protected final int getNumDecisionVariables() {\n        return numDecisionVariables;\n    }\n\n    protected final int getOriginalNumDecisionVariables() {\n        return f.getCoefficients().getDimension();\n    }\n\n    protected final int getNumSlackVariables() {\n        return numSlackVariables;\n    }\n\n    protected final int getNumArtificialVariables() {\n        return numArtificialVariables;\n    }\n\n    protected final double[][] getData() {\n        return tableau.getData();\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (other == null) {\n            return false;\n        }\n        try {\n            org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other));\n            return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);\n        } catch (java.lang.ClassCastException ex) {\n            return false;\n        }\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();\n    }\n\n    private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException {\n        oos.defaultWriteObject();\n        org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);\n    }\n\n    private void readObject(java.io.ObjectInputStream ois) throws java.io.IOException, java.lang.ClassNotFoundException {\n        ois.defaultReadObject();\n        org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Constructor",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "initializeColumnLabels()",
            "src_parent": "{\n    this.f = f;\n    this.constraints = normalizeConstraints(constraints);\n    this.restrictToNonNegative = restrictToNonNegative;\n    this.epsilon = epsilon;\n    this.numDecisionVariables = f.getCoefficients().getDimension() + (restrictToNonNegative ? 0 : 1);\n    this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);\n    this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);\n    this.tableau = createTableau(goalType == org.apache.commons.math.optimization.GoalType.MAXIMIZE);\n    initializeColumnLabels();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n    columnLabels.remove(((int) (columnsToDrop.get(i))));\n}",
            "src_parent": "{\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n    java.util.List<java.lang.Integer> columnsToDrop = new java.util.ArrayList<java.lang.Integer>();\n    columnsToDrop.add(0);\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) > 0) {\n            columnsToDrop.add(i);\n        }\n    }\n    for (int i = 0; i < getNumArtificialVariables(); i++) {\n        int col = i + getArtificialVariableOffset();\n        if (getBasicRow(col) == null) {\n            columnsToDrop.add(col);\n        }\n    }\n    double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n    for (int i = 1; i < getHeight(); i++) {\n        int col = 0;\n        for (int j = 0; j < getWidth(); j++) {\n            if (!columnsToDrop.contains(j)) {\n                matrix[i - 1][col++] = tableau.getEntry(i, j);\n            }\n        }\n    }\n    for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n        columnLabels.remove(((int) (columnsToDrop.get(i))));\n    }\n    this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix);\n    this.numArtificialVariables = 0;\n}",
            "src_parent_type": "Block",
            "src_type": "For"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "int negativeVarColumn = columnLabels.indexOf(\"x-\")",
            "src_parent": "{\n    int negativeVarColumn = columnLabels.indexOf(\"x-\");\n    java.lang.Integer negativeVarBasicRow = (negativeVarColumn > 0) ? getBasicRow(negativeVarColumn) : null;\n    double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n    java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>();\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    for (int i = 0; i < coefficients.length; i++) {\n        int colIndex = columnLabels.indexOf(\"x\" + i);\n        if (colIndex < 0) {\n            coefficients[i] = 0;\n            continue;\n        }\n        java.lang.Integer basicRow = getBasicRow(colIndex);\n        if (basicRows.contains(basicRow)) {\n            coefficients[i] = 0;\n        } else {\n            basicRows.add(basicRow);\n            coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);\n        }\n    }\n    return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "(negativeVarColumn > 0) ? getBasicRow(negativeVarColumn) : null",
            "src_parent": "java.lang.Integer negativeVarBasicRow = (negativeVarColumn > 0) ? getBasicRow(negativeVarColumn) : null",
            "src_parent_type": "LocalVariable",
            "src_type": "Conditional"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "int colIndex = columnLabels.indexOf(\"x\" + i)",
            "src_parent": "{\n    int colIndex = columnLabels.indexOf(\"x\" + i);\n    if (colIndex < 0) {\n        coefficients[i] = 0;\n        continue;\n    }\n    java.lang.Integer basicRow = getBasicRow(colIndex);\n    if (basicRows.contains(basicRow)) {\n        coefficients[i] = 0;\n    } else {\n        basicRows.add(basicRow);\n        coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (colIndex < 0) {\n    coefficients[i] = 0;\n    continue;\n}",
            "src_parent": "{\n    int colIndex = columnLabels.indexOf(\"x\" + i);\n    if (colIndex < 0) {\n        coefficients[i] = 0;\n        continue;\n    }\n    java.lang.Integer basicRow = getBasicRow(colIndex);\n    if (basicRows.contains(basicRow)) {\n        coefficients[i] = 0;\n    } else {\n        basicRows.add(basicRow);\n        coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "f.getCoefficients().getDimension()",
            "src_parent": "return f.getCoefficients().getDimension()",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "colIndex",
            "src_parent": "getBasicRow(colIndex)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "protected void initializeColumnLabels() {\n    if (getNumObjectiveFunctions() == 2) {\n        columnLabels.add(\"W\");\n    }\n    columnLabels.add(\"Z\");\n    for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {\n        columnLabels.add(\"x\" + i);\n    }\n    if (!restrictToNonNegative) {\n        columnLabels.add(\"x-\");\n    }\n    for (int i = 0; i < getNumSlackVariables(); i++) {\n        columnLabels.add(\"s\" + i);\n    }\n    for (int i = 0; i < getNumArtificialVariables(); i++) {\n        columnLabels.add(\"a\" + i);\n    }\n    columnLabels.add(\"RHS\");\n}",
            "dst_parent": "class SimplexTableau implements java.io.Serializable {\n    private static final long serialVersionUID = -1369660067587938365L;\n\n    private final org.apache.commons.math.optimization.linear.LinearObjectiveFunction f;\n\n    private final java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> constraints;\n\n    private final boolean restrictToNonNegative;\n\n    private final java.util.List<java.lang.String> columnLabels = new java.util.ArrayList<java.lang.String>();\n\n    private transient org.apache.commons.math.linear.RealMatrix tableau;\n\n    private final int numDecisionVariables;\n\n    private final int numSlackVariables;\n\n    private int numArtificialVariables;\n\n    private final double epsilon;\n\n    SimplexTableau(final org.apache.commons.math.optimization.linear.LinearObjectiveFunction f, final java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> constraints, final org.apache.commons.math.optimization.GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {\n        this.f = f;\n        this.constraints = normalizeConstraints(constraints);\n        this.restrictToNonNegative = restrictToNonNegative;\n        this.epsilon = epsilon;\n        this.numDecisionVariables = f.getCoefficients().getDimension() + (restrictToNonNegative ? 0 : 1);\n        this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);\n        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);\n        this.tableau = createTableau(goalType == org.apache.commons.math.optimization.GoalType.MAXIMIZE);\n        initializeColumnLabels();\n    }\n\n    protected void initializeColumnLabels() {\n        if (getNumObjectiveFunctions() == 2) {\n            columnLabels.add(\"W\");\n        }\n        columnLabels.add(\"Z\");\n        for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {\n            columnLabels.add(\"x\" + i);\n        }\n        if (!restrictToNonNegative) {\n            columnLabels.add(\"x-\");\n        }\n        for (int i = 0; i < getNumSlackVariables(); i++) {\n            columnLabels.add(\"s\" + i);\n        }\n        for (int i = 0; i < getNumArtificialVariables(); i++) {\n            columnLabels.add(\"a\" + i);\n        }\n        columnLabels.add(\"RHS\");\n    }\n\n    protected org.apache.commons.math.linear.RealMatrix createTableau(final boolean maximize) {\n        int width = (((numDecisionVariables + numSlackVariables) + numArtificialVariables) + getNumObjectiveFunctions()) + 1;\n        int height = constraints.size() + getNumObjectiveFunctions();\n        org.apache.commons.math.linear.Array2DRowRealMatrix matrix = new org.apache.commons.math.linear.Array2DRowRealMatrix(height, width);\n        if (getNumObjectiveFunctions() == 2) {\n            matrix.setEntry(0, 0, -1);\n        }\n        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;\n        matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);\n        org.apache.commons.math.linear.RealVector objectiveCoefficients = (maximize) ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();\n        copyArray(objectiveCoefficients.getData(), matrix.getDataRef()[zIndex]);\n        matrix.setEntry(zIndex, width - 1, maximize ? f.getConstantTerm() : (-1) * f.getConstantTerm());\n        if (!restrictToNonNegative) {\n            matrix.setEntry(zIndex, getSlackVariableOffset() - 1, org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(objectiveCoefficients));\n        }\n        int slackVar = 0;\n        int artificialVar = 0;\n        for (int i = 0; i < constraints.size(); i++) {\n            org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i);\n            int row = getNumObjectiveFunctions() + i;\n            copyArray(constraint.getCoefficients().getData(), matrix.getDataRef()[row]);\n            if (!restrictToNonNegative) {\n                matrix.setEntry(row, getSlackVariableOffset() - 1, org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(constraint.getCoefficients()));\n            }\n            matrix.setEntry(row, width - 1, constraint.getValue());\n            if (constraint.getRelationship() == Relationship.LEQ) {\n                matrix.setEntry(row, getSlackVariableOffset() + (slackVar++), 1);\n            } else if (constraint.getRelationship() == Relationship.GEQ) {\n                matrix.setEntry(row, getSlackVariableOffset() + (slackVar++), -1);\n            }\n            if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {\n                matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);\n                matrix.setEntry(row, getArtificialVariableOffset() + (artificialVar++), 1);\n                matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));\n            }\n        }\n        return matrix;\n    }\n\n    public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalizeConstraints(java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> originalConstraints) {\n        java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>();\n        for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : originalConstraints) {\n            normalized.add(normalize(constraint));\n        }\n        return normalized;\n    }\n\n    private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) {\n        if (constraint.getValue() < 0) {\n            return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());\n        }\n        return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());\n    }\n\n    protected final int getNumObjectiveFunctions() {\n        return this.numArtificialVariables > 0 ? 2 : 1;\n    }\n\n    private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) {\n        int count = 0;\n        for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {\n            if (constraint.getRelationship() == relationship) {\n                ++count;\n            }\n        }\n        return count;\n    }\n\n    protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) {\n        double sum = 0;\n        for (double coefficient : coefficients.getData()) {\n            sum -= coefficient;\n        }\n        return sum;\n    }\n\n    protected java.lang.Integer getBasicRow(final int col) {\n        java.lang.Integer row = null;\n        for (int i = 0; i < getHeight(); i++) {\n            if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n                row = i;\n            } else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                return null;\n            }\n        }\n        return row;\n    }\n\n    protected void dropPhase1Objective() {\n        if (getNumObjectiveFunctions() == 1) {\n            return;\n        }\n        java.util.List<java.lang.Integer> columnsToDrop = new java.util.ArrayList<java.lang.Integer>();\n        columnsToDrop.add(0);\n        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n            if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) > 0) {\n                columnsToDrop.add(i);\n            }\n        }\n        for (int i = 0; i < getNumArtificialVariables(); i++) {\n            int col = i + getArtificialVariableOffset();\n            if (getBasicRow(col) == null) {\n                columnsToDrop.add(col);\n            }\n        }\n        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n        for (int i = 1; i < getHeight(); i++) {\n            int col = 0;\n            for (int j = 0; j < getWidth(); j++) {\n                if (!columnsToDrop.contains(j)) {\n                    matrix[i - 1][col++] = tableau.getEntry(i, j);\n                }\n            }\n        }\n        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n            columnLabels.remove(((int) (columnsToDrop.get(i))));\n        }\n        this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix);\n        this.numArtificialVariables = 0;\n    }\n\n    private void copyArray(final double[] src, final double[] dest) {\n        java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);\n    }\n\n    boolean isOptimal() {\n        for (int i = getNumObjectiveFunctions(); i < (getWidth() - 1); i++) {\n            if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    protected org.apache.commons.math.optimization.RealPointValuePair getSolution() {\n        int negativeVarColumn = columnLabels.indexOf(\"x-\");\n        java.lang.Integer negativeVarBasicRow = (negativeVarColumn > 0) ? getBasicRow(negativeVarColumn) : null;\n        double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n        java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>();\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        for (int i = 0; i < coefficients.length; i++) {\n            int colIndex = columnLabels.indexOf(\"x\" + i);\n            if (colIndex < 0) {\n                coefficients[i] = 0;\n                continue;\n            }\n            java.lang.Integer basicRow = getBasicRow(colIndex);\n            if (basicRows.contains(basicRow)) {\n                coefficients[i] = 0;\n            } else {\n                basicRows.add(basicRow);\n                coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);\n            }\n        }\n        return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));\n    }\n\n    protected void divideRow(final int dividendRow, final double divisor) {\n        for (int j = 0; j < getWidth(); j++) {\n            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);\n        }\n    }\n\n    protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) {\n        tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow).subtract(tableau.getRowVector(subtrahendRow).mapMultiply(multiple)));\n    }\n\n    protected final int getWidth() {\n        return tableau.getColumnDimension();\n    }\n\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    protected final double getEntry(final int row, final int column) {\n        return tableau.getEntry(row, column);\n    }\n\n    protected final void setEntry(final int row, final int column, final double value) {\n        tableau.setEntry(row, column, value);\n    }\n\n    protected final int getSlackVariableOffset() {\n        return getNumObjectiveFunctions() + numDecisionVariables;\n    }\n\n    protected final int getArtificialVariableOffset() {\n        return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;\n    }\n\n    protected final int getRhsOffset() {\n        return getWidth() - 1;\n    }\n\n    protected final int getNumDecisionVariables() {\n        return numDecisionVariables;\n    }\n\n    protected final int getOriginalNumDecisionVariables() {\n        return f.getCoefficients().getDimension();\n    }\n\n    protected final int getNumSlackVariables() {\n        return numSlackVariables;\n    }\n\n    protected final int getNumArtificialVariables() {\n        return numArtificialVariables;\n    }\n\n    protected final double[][] getData() {\n        return tableau.getData();\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (other == null) {\n            return false;\n        }\n        try {\n            org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other));\n            return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);\n        } catch (java.lang.ClassCastException ex) {\n            return false;\n        }\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();\n    }\n\n    private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException {\n        oos.defaultWriteObject();\n        org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);\n    }\n\n    private void readObject(java.io.ObjectInputStream ois) throws java.io.IOException, java.lang.ClassNotFoundException {\n        ois.defaultReadObject();\n        org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois);\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "MOV",
            "src": "protected final int getNegativeDecisionVariableOffset() {\n    return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();\n}",
            "src_parent": "class SimplexTableau implements java.io.Serializable {\n    private static final long serialVersionUID = -1369660067587938365L;\n\n    private final org.apache.commons.math.optimization.linear.LinearObjectiveFunction f;\n\n    private final java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> constraints;\n\n    private final boolean restrictToNonNegative;\n\n    private transient org.apache.commons.math.linear.RealMatrix tableau;\n\n    private final int numDecisionVariables;\n\n    private final int numSlackVariables;\n\n    private int numArtificialVariables;\n\n    private final double epsilon;\n\n    SimplexTableau(final org.apache.commons.math.optimization.linear.LinearObjectiveFunction f, final java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> constraints, final org.apache.commons.math.optimization.GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {\n        this.f = f;\n        this.constraints = normalizeConstraints(constraints);\n        this.restrictToNonNegative = restrictToNonNegative;\n        this.epsilon = epsilon;\n        this.numDecisionVariables = f.getCoefficients().getDimension() + (restrictToNonNegative ? 0 : 1);\n        this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);\n        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);\n        this.tableau = createTableau(goalType == org.apache.commons.math.optimization.GoalType.MAXIMIZE);\n    }\n\n    protected org.apache.commons.math.linear.RealMatrix createTableau(final boolean maximize) {\n        int width = (((numDecisionVariables + numSlackVariables) + numArtificialVariables) + getNumObjectiveFunctions()) + 1;\n        int height = constraints.size() + getNumObjectiveFunctions();\n        org.apache.commons.math.linear.Array2DRowRealMatrix matrix = new org.apache.commons.math.linear.Array2DRowRealMatrix(height, width);\n        if (getNumObjectiveFunctions() == 2) {\n            matrix.setEntry(0, 0, -1);\n        }\n        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;\n        matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);\n        org.apache.commons.math.linear.RealVector objectiveCoefficients = (maximize) ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();\n        copyArray(objectiveCoefficients.getData(), matrix.getDataRef()[zIndex]);\n        matrix.setEntry(zIndex, width - 1, maximize ? f.getConstantTerm() : (-1) * f.getConstantTerm());\n        if (!restrictToNonNegative) {\n            matrix.setEntry(zIndex, getSlackVariableOffset() - 1, org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(objectiveCoefficients));\n        }\n        int slackVar = 0;\n        int artificialVar = 0;\n        for (int i = 0; i < constraints.size(); i++) {\n            org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i);\n            int row = getNumObjectiveFunctions() + i;\n            copyArray(constraint.getCoefficients().getData(), matrix.getDataRef()[row]);\n            if (!restrictToNonNegative) {\n                matrix.setEntry(row, getSlackVariableOffset() - 1, org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(constraint.getCoefficients()));\n            }\n            matrix.setEntry(row, width - 1, constraint.getValue());\n            if (constraint.getRelationship() == Relationship.LEQ) {\n                matrix.setEntry(row, getSlackVariableOffset() + (slackVar++), 1);\n            } else if (constraint.getRelationship() == Relationship.GEQ) {\n                matrix.setEntry(row, getSlackVariableOffset() + (slackVar++), -1);\n            }\n            if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {\n                matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);\n                matrix.setEntry(row, getArtificialVariableOffset() + (artificialVar++), 1);\n                matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));\n            }\n        }\n        return matrix;\n    }\n\n    public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalizeConstraints(java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> originalConstraints) {\n        java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>();\n        for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : originalConstraints) {\n            normalized.add(normalize(constraint));\n        }\n        return normalized;\n    }\n\n    private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) {\n        if (constraint.getValue() < 0) {\n            return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());\n        }\n        return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());\n    }\n\n    protected final int getNumObjectiveFunctions() {\n        return this.numArtificialVariables > 0 ? 2 : 1;\n    }\n\n    private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) {\n        int count = 0;\n        for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {\n            if (constraint.getRelationship() == relationship) {\n                ++count;\n            }\n        }\n        return count;\n    }\n\n    protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) {\n        double sum = 0;\n        for (double coefficient : coefficients.getData()) {\n            sum -= coefficient;\n        }\n        return sum;\n    }\n\n    protected java.lang.Integer getBasicRow(final int col) {\n        java.lang.Integer row = null;\n        for (int i = 0; i < getHeight(); i++) {\n            if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n                row = i;\n            } else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                return null;\n            }\n        }\n        return row;\n    }\n\n    protected void dropPhase1Objective() {\n        if (getNumObjectiveFunctions() == 1) {\n            return;\n        }\n        java.util.List<java.lang.Integer> columnsToDrop = new java.util.ArrayList<java.lang.Integer>();\n        columnsToDrop.add(0);\n        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n            if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) > 0) {\n                columnsToDrop.add(i);\n            }\n        }\n        for (int i = 0; i < getNumArtificialVariables(); i++) {\n            int col = i + getArtificialVariableOffset();\n            if (getBasicRow(col) == null) {\n                columnsToDrop.add(col);\n            }\n        }\n        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n        for (int i = 1; i < getHeight(); i++) {\n            int col = 0;\n            for (int j = 0; j < getWidth(); j++) {\n                if (!columnsToDrop.contains(j)) {\n                    matrix[i - 1][col++] = tableau.getEntry(i, j);\n                }\n            }\n        }\n        this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix);\n        this.numArtificialVariables = 0;\n    }\n\n    private void copyArray(final double[] src, final double[] dest) {\n        java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);\n    }\n\n    boolean isOptimal() {\n        for (int i = getNumObjectiveFunctions(); i < (getWidth() - 1); i++) {\n            if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    protected org.apache.commons.math.optimization.RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        java.lang.Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());\n        double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n        java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>();\n        for (int i = 0; i < coefficients.length; i++) {\n            java.lang.Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            if (basicRows.contains(basicRow)) {\n                coefficients[i] = 0;\n            } else {\n                basicRows.add(basicRow);\n                coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);\n            }\n        }\n        return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));\n    }\n\n    protected void divideRow(final int dividendRow, final double divisor) {\n        for (int j = 0; j < getWidth(); j++) {\n            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);\n        }\n    }\n\n    protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) {\n        tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow).subtract(tableau.getRowVector(subtrahendRow).mapMultiply(multiple)));\n    }\n\n    protected final int getWidth() {\n        return tableau.getColumnDimension();\n    }\n\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    protected final double getEntry(final int row, final int column) {\n        return tableau.getEntry(row, column);\n    }\n\n    protected final void setEntry(final int row, final int column, final double value) {\n        tableau.setEntry(row, column, value);\n    }\n\n    protected final int getSlackVariableOffset() {\n        return getNumObjectiveFunctions() + numDecisionVariables;\n    }\n\n    protected final int getArtificialVariableOffset() {\n        return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;\n    }\n\n    protected final int getRhsOffset() {\n        return getWidth() - 1;\n    }\n\n    protected final int getNegativeDecisionVariableOffset() {\n        return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();\n    }\n\n    protected final int getNumDecisionVariables() {\n        return numDecisionVariables;\n    }\n\n    protected final int getOriginalNumDecisionVariables() {\n        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;\n    }\n\n    protected final int getNumSlackVariables() {\n        return numSlackVariables;\n    }\n\n    protected final int getNumArtificialVariables() {\n        return numArtificialVariables;\n    }\n\n    protected final double[][] getData() {\n        return tableau.getData();\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (other == null) {\n            return false;\n        }\n        try {\n            org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other));\n            return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);\n        } catch (java.lang.ClassCastException ex) {\n            return false;\n        }\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();\n    }\n\n    private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException {\n        oos.defaultWriteObject();\n        org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);\n    }\n\n    private void readObject(java.io.ObjectInputStream ois) throws java.io.IOException, java.lang.ClassNotFoundException {\n        ois.defaultReadObject();\n        org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "double[] coefficients = new double[getOriginalNumDecisionVariables()]",
            "dst_parent": "{\n    int negativeVarColumn = columnLabels.indexOf(\"x-\");\n    java.lang.Integer negativeVarBasicRow = (negativeVarColumn > 0) ? getBasicRow(negativeVarColumn) : null;\n    double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n    java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>();\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    for (int i = 0; i < coefficients.length; i++) {\n        int colIndex = columnLabels.indexOf(\"x\" + i);\n        if (colIndex < 0) {\n            coefficients[i] = 0;\n            continue;\n        }\n        java.lang.Integer basicRow = getBasicRow(colIndex);\n        if (basicRows.contains(basicRow)) {\n            coefficients[i] = 0;\n        } else {\n            basicRows.add(basicRow);\n            coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);\n        }\n    }\n    return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "double[] coefficients = new double[getOriginalNumDecisionVariables()]",
            "src_parent": "{\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    java.lang.Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());\n    double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n    java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>();\n    for (int i = 0; i < coefficients.length; i++) {\n        java.lang.Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        if (basicRows.contains(basicRow)) {\n            coefficients[i] = 0;\n        } else {\n            basicRows.add(basicRow);\n            coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);\n        }\n    }\n    return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "getNumObjectiveFunctions() == 2",
            "dst_parent": "if (getNumObjectiveFunctions() == 2) {\n    columnLabels.add(\"W\");\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "getNumObjectiveFunctions() + i",
            "src_parent": "getBasicRow(getNumObjectiveFunctions() + i)",
            "src_parent_type": "Invocation",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "getOriginalNumDecisionVariables()",
            "dst_parent": "i < getOriginalNumDecisionVariables()",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "getOriginalNumDecisionVariables()",
            "src_parent": "getNumObjectiveFunctions() + getOriginalNumDecisionVariables()",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "restrictToNonNegative",
            "dst_parent": "!restrictToNonNegative",
            "dst_parent_type": "UnaryOperator",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "restrictToNonNegative",
            "src_parent": "restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1",
            "src_parent_type": "Conditional",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "getNumSlackVariables()",
            "dst_parent": "i < getNumSlackVariables()",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "getNumObjectiveFunctions()",
            "src_parent": "getNumObjectiveFunctions() + getOriginalNumDecisionVariables()",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.commons.math.optimization.linear.SimplexTableau",
            "dst_parent": "",
            "dst_parent_type": "ThisAccess",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "org.apache.commons.math.optimization.linear.SimplexTableau",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.commons.math.optimization.linear.SimplexTableau",
            "dst_parent": "",
            "dst_parent_type": "ThisAccess",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "org.apache.commons.math.optimization.linear.SimplexTableau",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        }
      ],
      "file_name": "SimplexTableau"
    }
  ],
  "id": "commons-math_59a0da9c"
}