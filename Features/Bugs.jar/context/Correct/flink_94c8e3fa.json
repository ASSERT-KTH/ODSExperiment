{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "iterNode.acceptForStepFunction(identifier)",
            "dst_parent": "{\n    final org.apache.flink.compiler.dag.BulkIterationNode iterNode = ((org.apache.flink.compiler.dag.BulkIterationNode) (n));\n    final org.apache.flink.api.common.operators.base.BulkIterationBase<?> iter = iterNode.getIterationContract();\n    java.util.HashMap<org.apache.flink.api.common.operators.Operator<?>, org.apache.flink.compiler.dag.OptimizerNode> closure = new java.util.HashMap<org.apache.flink.api.common.operators.Operator<?>, org.apache.flink.compiler.dag.OptimizerNode>(con2node);\n    final org.apache.flink.compiler.PactCompiler.GraphCreatingVisitor recursiveCreator = new org.apache.flink.compiler.PactCompiler.GraphCreatingVisitor(this, true, iterNode.getDegreeOfParallelism(), closure);\n    org.apache.flink.compiler.dag.BulkPartialSolutionNode partialSolution = null;\n    iter.getNextPartialSolution().accept(recursiveCreator);\n    partialSolution = ((org.apache.flink.compiler.dag.BulkPartialSolutionNode) (recursiveCreator.con2node.get(iter.getPartialSolution())));\n    org.apache.flink.compiler.dag.OptimizerNode rootOfStepFunction = recursiveCreator.con2node.get(iter.getNextPartialSolution());\n    if (partialSolution == null) {\n        throw new org.apache.flink.compiler.CompilerException(\"Error: The step functions result does not depend on the partial solution.\");\n    }\n    org.apache.flink.compiler.dag.OptimizerNode terminationCriterion = null;\n    if (iter.getTerminationCriterion() != null) {\n        terminationCriterion = recursiveCreator.con2node.get(iter.getTerminationCriterion());\n        if (terminationCriterion == null) {\n            iter.getTerminationCriterion().accept(recursiveCreator);\n            terminationCriterion = recursiveCreator.con2node.get(iter.getTerminationCriterion());\n        }\n    }\n    iterNode.setPartialSolution(partialSolution);\n    iterNode.setNextPartialSolution(rootOfStepFunction, terminationCriterion);\n    org.apache.flink.compiler.PactCompiler.StaticDynamicPathIdentifier identifier = new org.apache.flink.compiler.PactCompiler.StaticDynamicPathIdentifier(iterNode.getCostWeight());\n    iterNode.acceptForStepFunction(identifier);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "terminationCriterion.accept(identifier)",
            "src_parent": "{\n    terminationCriterion.accept(identifier);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "iterNode",
            "dst_parent": "iterNode.acceptForStepFunction(identifier)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "terminationCriterion",
            "src_parent": "terminationCriterion.accept(identifier)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "iterNode.acceptForStepFunction(pathIdentifier)",
            "dst_parent": "{\n    final org.apache.flink.compiler.dag.WorksetIterationNode iterNode = ((org.apache.flink.compiler.dag.WorksetIterationNode) (n));\n    final org.apache.flink.api.common.operators.base.DeltaIterationBase<?, ?> iter = iterNode.getIterationContract();\n    {\n        org.apache.flink.compiler.PactCompiler.StepFunctionValidator wsf = new org.apache.flink.compiler.PactCompiler.StepFunctionValidator();\n        iter.getNextWorkset().accept(wsf);\n        if (!wsf.foundWorkset) {\n            throw new org.apache.flink.compiler.CompilerException(\"In the given program, the next workset does not depend on the workset. This is a prerequisite in delta iterations.\");\n        }\n    }\n    java.util.HashMap<org.apache.flink.api.common.operators.Operator<?>, org.apache.flink.compiler.dag.OptimizerNode> closure = new java.util.HashMap<org.apache.flink.api.common.operators.Operator<?>, org.apache.flink.compiler.dag.OptimizerNode>(con2node);\n    final org.apache.flink.compiler.PactCompiler.GraphCreatingVisitor recursiveCreator = new org.apache.flink.compiler.PactCompiler.GraphCreatingVisitor(this, true, iterNode.getDegreeOfParallelism(), closure);\n    iter.getSolutionSetDelta().accept(recursiveCreator);\n    final org.apache.flink.compiler.dag.WorksetNode worksetNode = ((org.apache.flink.compiler.dag.WorksetNode) (recursiveCreator.con2node.get(iter.getWorkset())));\n    if (worksetNode == null) {\n        throw new org.apache.flink.compiler.CompilerException(\"In the given program, the solution set delta does not depend on the workset. This is a prerequisite in delta iterations.\");\n    }\n    iter.getNextWorkset().accept(recursiveCreator);\n    org.apache.flink.compiler.dag.SolutionSetNode solutionSetNode = ((org.apache.flink.compiler.dag.SolutionSetNode) (recursiveCreator.con2node.get(iter.getSolutionSet())));\n    if (((solutionSetNode == null) || (solutionSetNode.getOutgoingConnections() == null)) || solutionSetNode.getOutgoingConnections().isEmpty()) {\n        solutionSetNode = new org.apache.flink.compiler.dag.SolutionSetNode(((org.apache.flink.api.common.operators.base.DeltaIterationBase.SolutionSetPlaceHolder<?>) (iter.getSolutionSet())), iterNode);\n    } else {\n        for (org.apache.flink.compiler.dag.PactConnection conn : solutionSetNode.getOutgoingConnections()) {\n            org.apache.flink.compiler.dag.OptimizerNode successor = conn.getTarget();\n            if (successor.getClass() == org.apache.flink.compiler.dag.JoinNode.class) {\n                org.apache.flink.compiler.dag.JoinNode mn = ((org.apache.flink.compiler.dag.JoinNode) (successor));\n                if (mn.getFirstPredecessorNode() == solutionSetNode) {\n                    mn.makeJoinWithSolutionSet(0);\n                } else if (mn.getSecondPredecessorNode() == solutionSetNode) {\n                    mn.makeJoinWithSolutionSet(1);\n                } else {\n                    throw new org.apache.flink.compiler.CompilerException();\n                }\n            } else if (successor.getClass() == org.apache.flink.compiler.dag.CoGroupNode.class) {\n                org.apache.flink.compiler.dag.CoGroupNode cg = ((org.apache.flink.compiler.dag.CoGroupNode) (successor));\n                if (cg.getFirstPredecessorNode() == solutionSetNode) {\n                    cg.makeCoGroupWithSolutionSet(0);\n                } else if (cg.getSecondPredecessorNode() == solutionSetNode) {\n                    cg.makeCoGroupWithSolutionSet(1);\n                } else {\n                    throw new org.apache.flink.compiler.CompilerException();\n                }\n            } else {\n                throw new org.apache.flink.api.common.InvalidProgramException(\"Error: The only operations allowed on the solution set are Join and CoGroup.\");\n            }\n        }\n    }\n    final org.apache.flink.compiler.dag.OptimizerNode nextWorksetNode = recursiveCreator.con2node.get(iter.getNextWorkset());\n    final org.apache.flink.compiler.dag.OptimizerNode solutionSetDeltaNode = recursiveCreator.con2node.get(iter.getSolutionSetDelta());\n    iterNode.setPartialSolution(solutionSetNode, worksetNode);\n    iterNode.setNextPartialSolution(solutionSetDeltaNode, nextWorksetNode);\n    org.apache.flink.compiler.PactCompiler.StaticDynamicPathIdentifier pathIdentifier = new org.apache.flink.compiler.PactCompiler.StaticDynamicPathIdentifier(iterNode.getCostWeight());\n    iterNode.acceptForStepFunction(pathIdentifier);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "iterNode.getSolutionSetDelta().accept(pathIdentifier)",
            "src_parent": "{\n    final org.apache.flink.compiler.dag.WorksetIterationNode iterNode = ((org.apache.flink.compiler.dag.WorksetIterationNode) (n));\n    final org.apache.flink.api.common.operators.base.DeltaIterationBase<?, ?> iter = iterNode.getIterationContract();\n    {\n        org.apache.flink.compiler.PactCompiler.StepFunctionValidator wsf = new org.apache.flink.compiler.PactCompiler.StepFunctionValidator();\n        iter.getNextWorkset().accept(wsf);\n        if (!wsf.foundWorkset) {\n            throw new org.apache.flink.compiler.CompilerException(\"In the given program, the next workset does not depend on the workset. This is a prerequisite in delta iterations.\");\n        }\n    }\n    java.util.HashMap<org.apache.flink.api.common.operators.Operator<?>, org.apache.flink.compiler.dag.OptimizerNode> closure = new java.util.HashMap<org.apache.flink.api.common.operators.Operator<?>, org.apache.flink.compiler.dag.OptimizerNode>(con2node);\n    final org.apache.flink.compiler.PactCompiler.GraphCreatingVisitor recursiveCreator = new org.apache.flink.compiler.PactCompiler.GraphCreatingVisitor(this, true, iterNode.getDegreeOfParallelism(), closure);\n    iter.getSolutionSetDelta().accept(recursiveCreator);\n    final org.apache.flink.compiler.dag.WorksetNode worksetNode = ((org.apache.flink.compiler.dag.WorksetNode) (recursiveCreator.con2node.get(iter.getWorkset())));\n    if (worksetNode == null) {\n        throw new org.apache.flink.compiler.CompilerException(\"In the given program, the solution set delta does not depend on the workset. This is a prerequisite in delta iterations.\");\n    }\n    iter.getNextWorkset().accept(recursiveCreator);\n    org.apache.flink.compiler.dag.SolutionSetNode solutionSetNode = ((org.apache.flink.compiler.dag.SolutionSetNode) (recursiveCreator.con2node.get(iter.getSolutionSet())));\n    if (((solutionSetNode == null) || (solutionSetNode.getOutgoingConnections() == null)) || solutionSetNode.getOutgoingConnections().isEmpty()) {\n        solutionSetNode = new org.apache.flink.compiler.dag.SolutionSetNode(((org.apache.flink.api.common.operators.base.DeltaIterationBase.SolutionSetPlaceHolder<?>) (iter.getSolutionSet())), iterNode);\n    } else {\n        for (org.apache.flink.compiler.dag.PactConnection conn : solutionSetNode.getOutgoingConnections()) {\n            org.apache.flink.compiler.dag.OptimizerNode successor = conn.getTarget();\n            if (successor.getClass() == org.apache.flink.compiler.dag.JoinNode.class) {\n                org.apache.flink.compiler.dag.JoinNode mn = ((org.apache.flink.compiler.dag.JoinNode) (successor));\n                if (mn.getFirstPredecessorNode() == solutionSetNode) {\n                    mn.makeJoinWithSolutionSet(0);\n                } else if (mn.getSecondPredecessorNode() == solutionSetNode) {\n                    mn.makeJoinWithSolutionSet(1);\n                } else {\n                    throw new org.apache.flink.compiler.CompilerException();\n                }\n            } else if (successor.getClass() == org.apache.flink.compiler.dag.CoGroupNode.class) {\n                org.apache.flink.compiler.dag.CoGroupNode cg = ((org.apache.flink.compiler.dag.CoGroupNode) (successor));\n                if (cg.getFirstPredecessorNode() == solutionSetNode) {\n                    cg.makeCoGroupWithSolutionSet(0);\n                } else if (cg.getSecondPredecessorNode() == solutionSetNode) {\n                    cg.makeCoGroupWithSolutionSet(1);\n                } else {\n                    throw new org.apache.flink.compiler.CompilerException();\n                }\n            } else {\n                throw new org.apache.flink.api.common.InvalidProgramException(\"Error: The only operations allowed on the solution set are Join and CoGroup.\");\n            }\n        }\n    }\n    final org.apache.flink.compiler.dag.OptimizerNode nextWorksetNode = recursiveCreator.con2node.get(iter.getNextWorkset());\n    final org.apache.flink.compiler.dag.OptimizerNode solutionSetDeltaNode = recursiveCreator.con2node.get(iter.getSolutionSetDelta());\n    iterNode.setPartialSolution(solutionSetNode, worksetNode);\n    iterNode.setNextPartialSolution(solutionSetDeltaNode, nextWorksetNode);\n    org.apache.flink.compiler.PactCompiler.StaticDynamicPathIdentifier pathIdentifier = new org.apache.flink.compiler.PactCompiler.StaticDynamicPathIdentifier(iterNode.getCostWeight());\n    nextWorksetNode.accept(pathIdentifier);\n    iterNode.getSolutionSetDelta().accept(pathIdentifier);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "rootOfStepFunction.accept(identifier)",
            "src_parent": "{\n    final org.apache.flink.compiler.dag.BulkIterationNode iterNode = ((org.apache.flink.compiler.dag.BulkIterationNode) (n));\n    final org.apache.flink.api.common.operators.base.BulkIterationBase<?> iter = iterNode.getIterationContract();\n    java.util.HashMap<org.apache.flink.api.common.operators.Operator<?>, org.apache.flink.compiler.dag.OptimizerNode> closure = new java.util.HashMap<org.apache.flink.api.common.operators.Operator<?>, org.apache.flink.compiler.dag.OptimizerNode>(con2node);\n    final org.apache.flink.compiler.PactCompiler.GraphCreatingVisitor recursiveCreator = new org.apache.flink.compiler.PactCompiler.GraphCreatingVisitor(this, true, iterNode.getDegreeOfParallelism(), closure);\n    org.apache.flink.compiler.dag.BulkPartialSolutionNode partialSolution = null;\n    iter.getNextPartialSolution().accept(recursiveCreator);\n    partialSolution = ((org.apache.flink.compiler.dag.BulkPartialSolutionNode) (recursiveCreator.con2node.get(iter.getPartialSolution())));\n    org.apache.flink.compiler.dag.OptimizerNode rootOfStepFunction = recursiveCreator.con2node.get(iter.getNextPartialSolution());\n    if (partialSolution == null) {\n        throw new org.apache.flink.compiler.CompilerException(\"Error: The step functions result does not depend on the partial solution.\");\n    }\n    org.apache.flink.compiler.dag.OptimizerNode terminationCriterion = null;\n    if (iter.getTerminationCriterion() != null) {\n        terminationCriterion = recursiveCreator.con2node.get(iter.getTerminationCriterion());\n        if (terminationCriterion == null) {\n            iter.getTerminationCriterion().accept(recursiveCreator);\n            terminationCriterion = recursiveCreator.con2node.get(iter.getTerminationCriterion());\n        }\n    }\n    iterNode.setPartialSolution(partialSolution);\n    iterNode.setNextPartialSolution(rootOfStepFunction, terminationCriterion);\n    org.apache.flink.compiler.PactCompiler.StaticDynamicPathIdentifier identifier = new org.apache.flink.compiler.PactCompiler.StaticDynamicPathIdentifier(iterNode.getCostWeight());\n    rootOfStepFunction.accept(identifier);\n    if (terminationCriterion != null) {\n        terminationCriterion.accept(identifier);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (terminationCriterion != null) {\n    terminationCriterion.accept(identifier);\n}",
            "src_parent": "{\n    final org.apache.flink.compiler.dag.BulkIterationNode iterNode = ((org.apache.flink.compiler.dag.BulkIterationNode) (n));\n    final org.apache.flink.api.common.operators.base.BulkIterationBase<?> iter = iterNode.getIterationContract();\n    java.util.HashMap<org.apache.flink.api.common.operators.Operator<?>, org.apache.flink.compiler.dag.OptimizerNode> closure = new java.util.HashMap<org.apache.flink.api.common.operators.Operator<?>, org.apache.flink.compiler.dag.OptimizerNode>(con2node);\n    final org.apache.flink.compiler.PactCompiler.GraphCreatingVisitor recursiveCreator = new org.apache.flink.compiler.PactCompiler.GraphCreatingVisitor(this, true, iterNode.getDegreeOfParallelism(), closure);\n    org.apache.flink.compiler.dag.BulkPartialSolutionNode partialSolution = null;\n    iter.getNextPartialSolution().accept(recursiveCreator);\n    partialSolution = ((org.apache.flink.compiler.dag.BulkPartialSolutionNode) (recursiveCreator.con2node.get(iter.getPartialSolution())));\n    org.apache.flink.compiler.dag.OptimizerNode rootOfStepFunction = recursiveCreator.con2node.get(iter.getNextPartialSolution());\n    if (partialSolution == null) {\n        throw new org.apache.flink.compiler.CompilerException(\"Error: The step functions result does not depend on the partial solution.\");\n    }\n    org.apache.flink.compiler.dag.OptimizerNode terminationCriterion = null;\n    if (iter.getTerminationCriterion() != null) {\n        terminationCriterion = recursiveCreator.con2node.get(iter.getTerminationCriterion());\n        if (terminationCriterion == null) {\n            iter.getTerminationCriterion().accept(recursiveCreator);\n            terminationCriterion = recursiveCreator.con2node.get(iter.getTerminationCriterion());\n        }\n    }\n    iterNode.setPartialSolution(partialSolution);\n    iterNode.setNextPartialSolution(rootOfStepFunction, terminationCriterion);\n    org.apache.flink.compiler.PactCompiler.StaticDynamicPathIdentifier identifier = new org.apache.flink.compiler.PactCompiler.StaticDynamicPathIdentifier(iterNode.getCostWeight());\n    rootOfStepFunction.accept(identifier);\n    if (terminationCriterion != null) {\n        terminationCriterion.accept(identifier);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "nextWorksetNode.accept(pathIdentifier)",
            "src_parent": "{\n    final org.apache.flink.compiler.dag.WorksetIterationNode iterNode = ((org.apache.flink.compiler.dag.WorksetIterationNode) (n));\n    final org.apache.flink.api.common.operators.base.DeltaIterationBase<?, ?> iter = iterNode.getIterationContract();\n    {\n        org.apache.flink.compiler.PactCompiler.StepFunctionValidator wsf = new org.apache.flink.compiler.PactCompiler.StepFunctionValidator();\n        iter.getNextWorkset().accept(wsf);\n        if (!wsf.foundWorkset) {\n            throw new org.apache.flink.compiler.CompilerException(\"In the given program, the next workset does not depend on the workset. This is a prerequisite in delta iterations.\");\n        }\n    }\n    java.util.HashMap<org.apache.flink.api.common.operators.Operator<?>, org.apache.flink.compiler.dag.OptimizerNode> closure = new java.util.HashMap<org.apache.flink.api.common.operators.Operator<?>, org.apache.flink.compiler.dag.OptimizerNode>(con2node);\n    final org.apache.flink.compiler.PactCompiler.GraphCreatingVisitor recursiveCreator = new org.apache.flink.compiler.PactCompiler.GraphCreatingVisitor(this, true, iterNode.getDegreeOfParallelism(), closure);\n    iter.getSolutionSetDelta().accept(recursiveCreator);\n    final org.apache.flink.compiler.dag.WorksetNode worksetNode = ((org.apache.flink.compiler.dag.WorksetNode) (recursiveCreator.con2node.get(iter.getWorkset())));\n    if (worksetNode == null) {\n        throw new org.apache.flink.compiler.CompilerException(\"In the given program, the solution set delta does not depend on the workset. This is a prerequisite in delta iterations.\");\n    }\n    iter.getNextWorkset().accept(recursiveCreator);\n    org.apache.flink.compiler.dag.SolutionSetNode solutionSetNode = ((org.apache.flink.compiler.dag.SolutionSetNode) (recursiveCreator.con2node.get(iter.getSolutionSet())));\n    if (((solutionSetNode == null) || (solutionSetNode.getOutgoingConnections() == null)) || solutionSetNode.getOutgoingConnections().isEmpty()) {\n        solutionSetNode = new org.apache.flink.compiler.dag.SolutionSetNode(((org.apache.flink.api.common.operators.base.DeltaIterationBase.SolutionSetPlaceHolder<?>) (iter.getSolutionSet())), iterNode);\n    } else {\n        for (org.apache.flink.compiler.dag.PactConnection conn : solutionSetNode.getOutgoingConnections()) {\n            org.apache.flink.compiler.dag.OptimizerNode successor = conn.getTarget();\n            if (successor.getClass() == org.apache.flink.compiler.dag.JoinNode.class) {\n                org.apache.flink.compiler.dag.JoinNode mn = ((org.apache.flink.compiler.dag.JoinNode) (successor));\n                if (mn.getFirstPredecessorNode() == solutionSetNode) {\n                    mn.makeJoinWithSolutionSet(0);\n                } else if (mn.getSecondPredecessorNode() == solutionSetNode) {\n                    mn.makeJoinWithSolutionSet(1);\n                } else {\n                    throw new org.apache.flink.compiler.CompilerException();\n                }\n            } else if (successor.getClass() == org.apache.flink.compiler.dag.CoGroupNode.class) {\n                org.apache.flink.compiler.dag.CoGroupNode cg = ((org.apache.flink.compiler.dag.CoGroupNode) (successor));\n                if (cg.getFirstPredecessorNode() == solutionSetNode) {\n                    cg.makeCoGroupWithSolutionSet(0);\n                } else if (cg.getSecondPredecessorNode() == solutionSetNode) {\n                    cg.makeCoGroupWithSolutionSet(1);\n                } else {\n                    throw new org.apache.flink.compiler.CompilerException();\n                }\n            } else {\n                throw new org.apache.flink.api.common.InvalidProgramException(\"Error: The only operations allowed on the solution set are Join and CoGroup.\");\n            }\n        }\n    }\n    final org.apache.flink.compiler.dag.OptimizerNode nextWorksetNode = recursiveCreator.con2node.get(iter.getNextWorkset());\n    final org.apache.flink.compiler.dag.OptimizerNode solutionSetDeltaNode = recursiveCreator.con2node.get(iter.getSolutionSetDelta());\n    iterNode.setPartialSolution(solutionSetNode, worksetNode);\n    iterNode.setNextPartialSolution(solutionSetDeltaNode, nextWorksetNode);\n    org.apache.flink.compiler.PactCompiler.StaticDynamicPathIdentifier pathIdentifier = new org.apache.flink.compiler.PactCompiler.StaticDynamicPathIdentifier(iterNode.getCostWeight());\n    nextWorksetNode.accept(pathIdentifier);\n    iterNode.getSolutionSetDelta().accept(pathIdentifier);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "iterNode.acceptForStepFunction(identifier)",
            "dst_parent": "{\n    final org.apache.flink.compiler.dag.BulkIterationNode iterNode = ((org.apache.flink.compiler.dag.BulkIterationNode) (n));\n    final org.apache.flink.api.common.operators.base.BulkIterationBase<?> iter = iterNode.getIterationContract();\n    java.util.HashMap<org.apache.flink.api.common.operators.Operator<?>, org.apache.flink.compiler.dag.OptimizerNode> closure = new java.util.HashMap<org.apache.flink.api.common.operators.Operator<?>, org.apache.flink.compiler.dag.OptimizerNode>(con2node);\n    final org.apache.flink.compiler.PactCompiler.GraphCreatingVisitor recursiveCreator = new org.apache.flink.compiler.PactCompiler.GraphCreatingVisitor(this, true, iterNode.getDegreeOfParallelism(), closure);\n    org.apache.flink.compiler.dag.BulkPartialSolutionNode partialSolution = null;\n    iter.getNextPartialSolution().accept(recursiveCreator);\n    partialSolution = ((org.apache.flink.compiler.dag.BulkPartialSolutionNode) (recursiveCreator.con2node.get(iter.getPartialSolution())));\n    org.apache.flink.compiler.dag.OptimizerNode rootOfStepFunction = recursiveCreator.con2node.get(iter.getNextPartialSolution());\n    if (partialSolution == null) {\n        throw new org.apache.flink.compiler.CompilerException(\"Error: The step functions result does not depend on the partial solution.\");\n    }\n    org.apache.flink.compiler.dag.OptimizerNode terminationCriterion = null;\n    if (iter.getTerminationCriterion() != null) {\n        terminationCriterion = recursiveCreator.con2node.get(iter.getTerminationCriterion());\n        if (terminationCriterion == null) {\n            iter.getTerminationCriterion().accept(recursiveCreator);\n            terminationCriterion = recursiveCreator.con2node.get(iter.getTerminationCriterion());\n        }\n    }\n    iterNode.setPartialSolution(partialSolution);\n    iterNode.setNextPartialSolution(rootOfStepFunction, terminationCriterion);\n    org.apache.flink.compiler.PactCompiler.StaticDynamicPathIdentifier identifier = new org.apache.flink.compiler.PactCompiler.StaticDynamicPathIdentifier(iterNode.getCostWeight());\n    iterNode.acceptForStepFunction(identifier);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "terminationCriterion.accept(identifier)",
            "src_parent": "{\n    terminationCriterion.accept(identifier);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "iterNode",
            "dst_parent": "iterNode.acceptForStepFunction(pathIdentifier)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "iterNode",
            "src_parent": "iterNode.getSolutionSetDelta()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        }
      ],
      "file_name": "PactCompiler"
    }
  ],
  "id": "flink_94c8e3fa"
}