{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> revisions = getLocalRevisions()",
            "dst_parent": "{\n    final java.util.Map<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> validRevisions = com.google.common.collect.Maps.newHashMap();\n    com.google.common.base.Predicate<org.apache.jackrabbit.oak.plugins.document.Revision> predicate = new com.google.common.base.Predicate<org.apache.jackrabbit.oak.plugins.document.Revision>() {\n        @java.lang.Override\n        public boolean apply(org.apache.jackrabbit.oak.plugins.document.Revision input) {\n            if (input.equals(changeRev)) {\n                return false;\n            }\n            if (isValidRevision(context, input, null, changeRev, validRevisions)) {\n                return true;\n            }\n            handler.concurrentModification(input);\n            return false;\n        }\n    };\n    org.apache.jackrabbit.oak.plugins.document.Revision newestRev = null;\n    java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> revisions = getLocalRevisions();\n    java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> commitRoots = getLocalCommitRoot();\n    java.util.Iterator<org.apache.jackrabbit.oak.plugins.document.Revision> it = com.google.common.collect.Iterables.filter(com.google.common.collect.Iterables.mergeSorted(com.google.common.collect.ImmutableList.of(revisions.keySet(), commitRoots.keySet()), revisions.comparator()), predicate).iterator();\n    if (it.hasNext()) {\n        newestRev = it.next();\n    } else {\n        if (org.apache.jackrabbit.oak.plugins.document.NodeDocument.LOG.isDebugEnabled()) {\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.LOG.debug(\"getNewestRevision() with changeRev {} on {}, \" + \"_revisions {}, _commitRoot {}\", changeRev, getId(), getLocalRevisions(), getLocalCommitRoot());\n        }\n        it = com.google.common.collect.Iterables.filter(getAllChanges(), predicate).iterator();\n        if (it.hasNext()) {\n            newestRev = it.next();\n        }\n    }\n    if (newestRev == null) {\n        return null;\n    }\n    java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> deleted = getLocalDeleted();\n    java.lang.String value = deleted.get(newestRev);\n    if ((value == null) && deleted.headMap(newestRev).isEmpty()) {\n        return newestRev;\n    }\n    if (value == null) {\n        value = getDeleted().get(newestRev);\n    }\n    if (\"true\".equals(value)) {\n        return null;\n    }\n    return newestRev;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "UPD",
            "src": "java.util.Comparator<org.apache.jackrabbit.oak.plugins.document.Revision> comp = java.util.Collections.reverseOrder(context.getRevisionComparator())",
            "src_parent": "{\n    final java.util.Map<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> validRevisions = com.google.common.collect.Maps.newHashMap();\n    com.google.common.base.Predicate<org.apache.jackrabbit.oak.plugins.document.Revision> predicate = new com.google.common.base.Predicate<org.apache.jackrabbit.oak.plugins.document.Revision>() {\n        @java.lang.Override\n        public boolean apply(org.apache.jackrabbit.oak.plugins.document.Revision input) {\n            if (input.equals(changeRev)) {\n                return false;\n            }\n            if (isValidRevision(context, input, null, changeRev, validRevisions)) {\n                return true;\n            }\n            handler.concurrentModification(input);\n            return false;\n        }\n    };\n    org.apache.jackrabbit.oak.plugins.document.Revision newestRev = null;\n    java.util.Comparator<org.apache.jackrabbit.oak.plugins.document.Revision> comp = java.util.Collections.reverseOrder(context.getRevisionComparator());\n    java.util.SortedSet<org.apache.jackrabbit.oak.plugins.document.Revision> revisions = com.google.common.collect.Sets.newTreeSet(comp);\n    revisions.addAll(getLocalRevisions().keySet());\n    revisions.addAll(getLocalCommitRoot().keySet());\n    java.util.Iterator<org.apache.jackrabbit.oak.plugins.document.Revision> it = com.google.common.collect.Iterables.filter(revisions, predicate).iterator();\n    if (it.hasNext()) {\n        newestRev = it.next();\n    } else {\n        if (org.apache.jackrabbit.oak.plugins.document.NodeDocument.LOG.isDebugEnabled()) {\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.LOG.debug(\"getNewestRevision() with changeRev {} on {}, \" + \"_revisions {}, _commitRoot {}\", changeRev, getId(), getLocalRevisions(), getLocalCommitRoot());\n        }\n        it = com.google.common.collect.Iterables.filter(getAllChanges(), predicate).iterator();\n        if (it.hasNext()) {\n            newestRev = it.next();\n        }\n    }\n    if (newestRev == null) {\n        return null;\n    }\n    java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> deleted = getLocalDeleted();\n    java.lang.String value = deleted.get(newestRev);\n    if ((value == null) && deleted.headMap(newestRev).isEmpty()) {\n        return newestRev;\n    }\n    if (value == null) {\n        value = getDeleted().get(newestRev);\n    }\n    if (\"true\".equals(value)) {\n        return null;\n    }\n    return newestRev;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> commitRoots = getLocalCommitRoot()",
            "dst_parent": "{\n    final java.util.Map<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> validRevisions = com.google.common.collect.Maps.newHashMap();\n    com.google.common.base.Predicate<org.apache.jackrabbit.oak.plugins.document.Revision> predicate = new com.google.common.base.Predicate<org.apache.jackrabbit.oak.plugins.document.Revision>() {\n        @java.lang.Override\n        public boolean apply(org.apache.jackrabbit.oak.plugins.document.Revision input) {\n            if (input.equals(changeRev)) {\n                return false;\n            }\n            if (isValidRevision(context, input, null, changeRev, validRevisions)) {\n                return true;\n            }\n            handler.concurrentModification(input);\n            return false;\n        }\n    };\n    org.apache.jackrabbit.oak.plugins.document.Revision newestRev = null;\n    java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> revisions = getLocalRevisions();\n    java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> commitRoots = getLocalCommitRoot();\n    java.util.Iterator<org.apache.jackrabbit.oak.plugins.document.Revision> it = com.google.common.collect.Iterables.filter(com.google.common.collect.Iterables.mergeSorted(com.google.common.collect.ImmutableList.of(revisions.keySet(), commitRoots.keySet()), revisions.comparator()), predicate).iterator();\n    if (it.hasNext()) {\n        newestRev = it.next();\n    } else {\n        if (org.apache.jackrabbit.oak.plugins.document.NodeDocument.LOG.isDebugEnabled()) {\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.LOG.debug(\"getNewestRevision() with changeRev {} on {}, \" + \"_revisions {}, _commitRoot {}\", changeRev, getId(), getLocalRevisions(), getLocalCommitRoot());\n        }\n        it = com.google.common.collect.Iterables.filter(getAllChanges(), predicate).iterator();\n        if (it.hasNext()) {\n            newestRev = it.next();\n        }\n    }\n    if (newestRev == null) {\n        return null;\n    }\n    java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> deleted = getLocalDeleted();\n    java.lang.String value = deleted.get(newestRev);\n    if ((value == null) && deleted.headMap(newestRev).isEmpty()) {\n        return newestRev;\n    }\n    if (value == null) {\n        value = getDeleted().get(newestRev);\n    }\n    if (\"true\".equals(value)) {\n        return null;\n    }\n    return newestRev;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "UPD",
            "src": "java.util.SortedSet<org.apache.jackrabbit.oak.plugins.document.Revision> revisions = com.google.common.collect.Sets.newTreeSet(comp)",
            "src_parent": "{\n    final java.util.Map<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> validRevisions = com.google.common.collect.Maps.newHashMap();\n    com.google.common.base.Predicate<org.apache.jackrabbit.oak.plugins.document.Revision> predicate = new com.google.common.base.Predicate<org.apache.jackrabbit.oak.plugins.document.Revision>() {\n        @java.lang.Override\n        public boolean apply(org.apache.jackrabbit.oak.plugins.document.Revision input) {\n            if (input.equals(changeRev)) {\n                return false;\n            }\n            if (isValidRevision(context, input, null, changeRev, validRevisions)) {\n                return true;\n            }\n            handler.concurrentModification(input);\n            return false;\n        }\n    };\n    org.apache.jackrabbit.oak.plugins.document.Revision newestRev = null;\n    java.util.Comparator<org.apache.jackrabbit.oak.plugins.document.Revision> comp = java.util.Collections.reverseOrder(context.getRevisionComparator());\n    java.util.SortedSet<org.apache.jackrabbit.oak.plugins.document.Revision> revisions = com.google.common.collect.Sets.newTreeSet(comp);\n    revisions.addAll(getLocalRevisions().keySet());\n    revisions.addAll(getLocalCommitRoot().keySet());\n    java.util.Iterator<org.apache.jackrabbit.oak.plugins.document.Revision> it = com.google.common.collect.Iterables.filter(revisions, predicate).iterator();\n    if (it.hasNext()) {\n        newestRev = it.next();\n    } else {\n        if (org.apache.jackrabbit.oak.plugins.document.NodeDocument.LOG.isDebugEnabled()) {\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.LOG.debug(\"getNewestRevision() with changeRev {} on {}, \" + \"_revisions {}, _commitRoot {}\", changeRev, getId(), getLocalRevisions(), getLocalCommitRoot());\n        }\n        it = com.google.common.collect.Iterables.filter(getAllChanges(), predicate).iterator();\n        if (it.hasNext()) {\n            newestRev = it.next();\n        }\n    }\n    if (newestRev == null) {\n        return null;\n    }\n    java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> deleted = getLocalDeleted();\n    java.lang.String value = deleted.get(newestRev);\n    if ((value == null) && deleted.headMap(newestRev).isEmpty()) {\n        return newestRev;\n    }\n    if (value == null) {\n        value = getDeleted().get(newestRev);\n    }\n    if (\"true\".equals(value)) {\n        return null;\n    }\n    return newestRev;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>",
            "dst_parent": "java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> revisions = getLocalRevisions()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.util.Comparator<org.apache.jackrabbit.oak.plugins.document.Revision>",
            "src_parent": "java.util.Comparator<org.apache.jackrabbit.oak.plugins.document.Revision> comp = java.util.Collections.reverseOrder(context.getRevisionComparator())",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String>",
            "dst_parent": "java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> commitRoots = getLocalCommitRoot()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.util.SortedSet<org.apache.jackrabbit.oak.plugins.document.Revision>",
            "src_parent": "java.util.SortedSet<org.apache.jackrabbit.oak.plugins.document.Revision> revisions = com.google.common.collect.Sets.newTreeSet(comp)",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "revisions.addAll(getLocalRevisions().keySet())",
            "src_parent": "{\n    final java.util.Map<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> validRevisions = com.google.common.collect.Maps.newHashMap();\n    com.google.common.base.Predicate<org.apache.jackrabbit.oak.plugins.document.Revision> predicate = new com.google.common.base.Predicate<org.apache.jackrabbit.oak.plugins.document.Revision>() {\n        @java.lang.Override\n        public boolean apply(org.apache.jackrabbit.oak.plugins.document.Revision input) {\n            if (input.equals(changeRev)) {\n                return false;\n            }\n            if (isValidRevision(context, input, null, changeRev, validRevisions)) {\n                return true;\n            }\n            handler.concurrentModification(input);\n            return false;\n        }\n    };\n    org.apache.jackrabbit.oak.plugins.document.Revision newestRev = null;\n    java.util.Comparator<org.apache.jackrabbit.oak.plugins.document.Revision> comp = java.util.Collections.reverseOrder(context.getRevisionComparator());\n    java.util.SortedSet<org.apache.jackrabbit.oak.plugins.document.Revision> revisions = com.google.common.collect.Sets.newTreeSet(comp);\n    revisions.addAll(getLocalRevisions().keySet());\n    revisions.addAll(getLocalCommitRoot().keySet());\n    java.util.Iterator<org.apache.jackrabbit.oak.plugins.document.Revision> it = com.google.common.collect.Iterables.filter(revisions, predicate).iterator();\n    if (it.hasNext()) {\n        newestRev = it.next();\n    } else {\n        if (org.apache.jackrabbit.oak.plugins.document.NodeDocument.LOG.isDebugEnabled()) {\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.LOG.debug(\"getNewestRevision() with changeRev {} on {}, \" + \"_revisions {}, _commitRoot {}\", changeRev, getId(), getLocalRevisions(), getLocalCommitRoot());\n        }\n        it = com.google.common.collect.Iterables.filter(getAllChanges(), predicate).iterator();\n        if (it.hasNext()) {\n            newestRev = it.next();\n        }\n    }\n    if (newestRev == null) {\n        return null;\n    }\n    java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> deleted = getLocalDeleted();\n    java.lang.String value = deleted.get(newestRev);\n    if ((value == null) && deleted.headMap(newestRev).isEmpty()) {\n        return newestRev;\n    }\n    if (value == null) {\n        value = getDeleted().get(newestRev);\n    }\n    if (\"true\".equals(value)) {\n        return null;\n    }\n    return newestRev;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "revisions.addAll(getLocalCommitRoot().keySet())",
            "src_parent": "{\n    final java.util.Map<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> validRevisions = com.google.common.collect.Maps.newHashMap();\n    com.google.common.base.Predicate<org.apache.jackrabbit.oak.plugins.document.Revision> predicate = new com.google.common.base.Predicate<org.apache.jackrabbit.oak.plugins.document.Revision>() {\n        @java.lang.Override\n        public boolean apply(org.apache.jackrabbit.oak.plugins.document.Revision input) {\n            if (input.equals(changeRev)) {\n                return false;\n            }\n            if (isValidRevision(context, input, null, changeRev, validRevisions)) {\n                return true;\n            }\n            handler.concurrentModification(input);\n            return false;\n        }\n    };\n    org.apache.jackrabbit.oak.plugins.document.Revision newestRev = null;\n    java.util.Comparator<org.apache.jackrabbit.oak.plugins.document.Revision> comp = java.util.Collections.reverseOrder(context.getRevisionComparator());\n    java.util.SortedSet<org.apache.jackrabbit.oak.plugins.document.Revision> revisions = com.google.common.collect.Sets.newTreeSet(comp);\n    revisions.addAll(getLocalRevisions().keySet());\n    revisions.addAll(getLocalCommitRoot().keySet());\n    java.util.Iterator<org.apache.jackrabbit.oak.plugins.document.Revision> it = com.google.common.collect.Iterables.filter(revisions, predicate).iterator();\n    if (it.hasNext()) {\n        newestRev = it.next();\n    } else {\n        if (org.apache.jackrabbit.oak.plugins.document.NodeDocument.LOG.isDebugEnabled()) {\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.LOG.debug(\"getNewestRevision() with changeRev {} on {}, \" + \"_revisions {}, _commitRoot {}\", changeRev, getId(), getLocalRevisions(), getLocalCommitRoot());\n        }\n        it = com.google.common.collect.Iterables.filter(getAllChanges(), predicate).iterator();\n        if (it.hasNext()) {\n            newestRev = it.next();\n        }\n    }\n    if (newestRev == null) {\n        return null;\n    }\n    java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> deleted = getLocalDeleted();\n    java.lang.String value = deleted.get(newestRev);\n    if ((value == null) && deleted.headMap(newestRev).isEmpty()) {\n        return newestRev;\n    }\n    if (value == null) {\n        value = getDeleted().get(newestRev);\n    }\n    if (\"true\".equals(value)) {\n        return null;\n    }\n    return newestRev;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "com.google.common.collect.Iterables.mergeSorted(com.google.common.collect.ImmutableList.of(revisions.keySet(), commitRoots.keySet()), revisions.comparator())",
            "src_parent": "com.google.common.collect.Iterables.filter(com.google.common.collect.Iterables.mergeSorted(com.google.common.collect.ImmutableList.of(revisions.keySet(), commitRoots.keySet()), revisions.comparator()), predicate)",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "getLocalRevisions()",
            "dst_parent": "java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> revisions = getLocalRevisions()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "getLocalRevisions()",
            "src_parent": "getLocalRevisions().keySet()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "getLocalCommitRoot()",
            "dst_parent": "java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> commitRoots = getLocalCommitRoot()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "getLocalCommitRoot()",
            "src_parent": "getLocalCommitRoot().keySet()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "revisions",
            "dst_parent": "revisions.keySet()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "revisions",
            "src_parent": "com.google.common.collect.Iterables.filter(revisions, predicate)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        }
      ],
      "file_name": "NodeDocument"
    }
  ],
  "id": "jackrabbit-oak_978c77ff"
}