{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "protected org.apache.wicket.request.Url encryptEntireUrl(final org.apache.wicket.request.Url url) {\n    java.lang.String encryptedUrlString = getCrypt().encryptUrlSafe(url.toString());\n    org.apache.wicket.request.Url encryptedUrl = new org.apache.wicket.request.Url(url.getCharset());\n    encryptedUrl.getSegments().add(encryptedUrlString);\n    int numberOfSegments = url.getSegments().size() - 1;\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    for (int segNo = 0; segNo < numberOfSegments; segNo++) {\n        encryptedUrl.getSegments().add(generator.next());\n    }\n    return encryptedUrl;\n}",
            "dst_parent": "public class CryptoMapper implements org.apache.wicket.request.mapper.IRequestMapperDelegate {\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.core.request.mapper.CryptoMapper.class);\n\n    private static final java.lang.String ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER = \"wicket\";\n\n    private final org.apache.wicket.request.IRequestMapper wrappedMapper;\n\n    private final org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> cryptProvider;\n\n    public CryptoMapper(final org.apache.wicket.request.IRequestMapper wrappedMapper, final org.apache.wicket.Application application) {\n        this(wrappedMapper, new org.apache.wicket.core.request.mapper.CryptoMapper.ApplicationCryptProvider(application));\n    }\n\n    public CryptoMapper(final org.apache.wicket.request.IRequestMapper wrappedMapper, final org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> cryptProvider) {\n        this.wrappedMapper = org.apache.wicket.util.lang.Args.notNull(wrappedMapper, \"wrappedMapper\");\n        this.cryptProvider = org.apache.wicket.util.lang.Args.notNull(cryptProvider, \"cryptProvider\");\n    }\n\n    @java.lang.Override\n    public int getCompatibilityScore(final org.apache.wicket.request.Request request) {\n        org.apache.wicket.request.Url decryptedUrl = decryptUrl(request, request.getUrl());\n        if (decryptedUrl == null) {\n            return 0;\n        }\n        org.apache.wicket.request.Request decryptedRequest = request.cloneWithUrl(decryptedUrl);\n        return wrappedMapper.getCompatibilityScore(decryptedRequest);\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.Url mapHandler(final org.apache.wicket.request.IRequestHandler requestHandler) {\n        final org.apache.wicket.request.Url url = wrappedMapper.mapHandler(requestHandler);\n        if (url == null) {\n            return null;\n        }\n        if (url.isFull()) {\n            return url;\n        }\n        return encryptUrl(url);\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.IRequestHandler mapRequest(final org.apache.wicket.request.Request request) {\n        org.apache.wicket.request.Url url = decryptUrl(request, request.getUrl());\n        if (url == null) {\n            return null;\n        }\n        org.apache.wicket.request.Request decryptedRequest = request.cloneWithUrl(url);\n        org.apache.wicket.request.IRequestHandler handler = wrappedMapper.mapRequest(decryptedRequest);\n        if (handler != null) {\n            handler = new org.apache.wicket.core.request.handler.RequestSettingRequestHandler(decryptedRequest, handler);\n        }\n        return handler;\n    }\n\n    protected final org.apache.wicket.util.crypt.ICrypt getCrypt() {\n        return cryptProvider.get();\n    }\n\n    @java.lang.Override\n    public final org.apache.wicket.request.IRequestMapper getDelegateMapper() {\n        return wrappedMapper;\n    }\n\n    protected org.apache.wicket.request.Url encryptUrl(final org.apache.wicket.request.Url url) {\n        if ((url.getSegments().size() > 0) && url.getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n            return encryptEntireUrl(url);\n        } else {\n            return encryptRequestListenerParameter(url);\n        }\n    }\n\n    protected org.apache.wicket.request.Url encryptEntireUrl(final org.apache.wicket.request.Url url) {\n        java.lang.String encryptedUrlString = getCrypt().encryptUrlSafe(url.toString());\n        org.apache.wicket.request.Url encryptedUrl = new org.apache.wicket.request.Url(url.getCharset());\n        encryptedUrl.getSegments().add(encryptedUrlString);\n        int numberOfSegments = url.getSegments().size() - 1;\n        org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n        for (int segNo = 0; segNo < numberOfSegments; segNo++) {\n            encryptedUrl.getSegments().add(generator.next());\n        }\n        return encryptedUrl;\n    }\n\n    protected org.apache.wicket.request.Url encryptRequestListenerParameter(final org.apache.wicket.request.Url url) {\n        org.apache.wicket.request.Url encryptedUrl = new org.apache.wicket.request.Url(url);\n        for (java.util.Iterator<org.apache.wicket.request.Url.QueryParameter> it = encryptedUrl.getQueryParameters().iterator(); it.hasNext();) {\n            org.apache.wicket.request.Url.QueryParameter qp = it.next();\n            if ((org.apache.wicket.util.string.Strings.isEmpty(qp.getValue()) == true) && (org.apache.wicket.util.string.Strings.isEmpty(qp.getName()) == false)) {\n                if (org.apache.wicket.request.mapper.info.PageComponentInfo.parse(qp.getName()) != null) {\n                    it.remove();\n                    java.lang.String encryptedParameterValue = getCrypt().encryptUrlSafe(qp.getName());\n                    org.apache.wicket.request.Url.QueryParameter encryptedParameter = new org.apache.wicket.request.Url.QueryParameter(org.apache.wicket.core.request.mapper.CryptoMapper.ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER, encryptedParameterValue);\n                    encryptedUrl.getQueryParameters().add(0, encryptedParameter);\n                    break;\n                }\n            }\n        }\n        return encryptedUrl;\n    }\n\n    protected org.apache.wicket.request.Url decryptUrl(final org.apache.wicket.request.Request request, final org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = decryptEntireUrl(request, encryptedUrl);\n        if (url == null) {\n            if ((encryptedUrl.getSegments().size() > 0) && encryptedUrl.getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n                if ((request.getOriginalUrl().getSegments().size() > 0) && request.getOriginalUrl().getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n                    return null;\n                } else {\n                    return encryptedUrl;\n                }\n            }\n        }\n        if (url == null) {\n            url = decryptRequestListenerParameter(request, encryptedUrl);\n        }\n        return url;\n    }\n\n    protected org.apache.wicket.request.Url decryptEntireUrl(final org.apache.wicket.request.Request request, final org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n        java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n        if (encryptedSegments.isEmpty()) {\n            return null;\n        }\n        java.lang.String encryptedUrlString = encryptedSegments.get(0);\n        if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n            return null;\n        }\n        java.lang.String decryptedUrl;\n        try {\n            decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n        } catch (java.lang.Exception e) {\n            org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n            return null;\n        }\n        if (decryptedUrl == null) {\n            return null;\n        }\n        org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n        int originalNumberOfSegments = originalUrl.getSegments().size();\n        int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n        if (originalNumberOfSegments > 0) {\n            url.getSegments().add(originalUrl.getSegments().get(0));\n        }\n        org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n        int segNo = 1;\n        for (; segNo < encryptedNumberOfSegments; segNo++) {\n            if (segNo > originalNumberOfSegments) {\n                break;\n            }\n            java.lang.String next = generator.next();\n            java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n            if (!next.equals(encryptedSegment)) {\n                break;\n            }\n            url.getSegments().add(originalUrl.getSegments().get(segNo));\n        }\n        for (; segNo < encryptedNumberOfSegments; segNo++) {\n            url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n        }\n        url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n        url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n        return url;\n    }\n\n    protected org.apache.wicket.request.Url decryptRequestListenerParameter(final org.apache.wicket.request.Request request, org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(encryptedUrl);\n        url.getQueryParameters().clear();\n        for (org.apache.wicket.request.Url.QueryParameter qp : encryptedUrl.getQueryParameters()) {\n            if (org.apache.wicket.util.string.Strings.isEmpty(qp.getValue()) && (org.apache.wicket.util.string.Strings.isEmpty(qp.getName()) == false)) {\n                if (org.apache.wicket.request.mapper.info.PageComponentInfo.parse(qp.getName()) != null) {\n                    if (request.getOriginalUrl().getQueryParameter(qp.getName()) == null) {\n                        url.getQueryParameters().add(qp);\n                    } else {\n                        return null;\n                    }\n                }\n            } else if (org.apache.wicket.core.request.mapper.CryptoMapper.ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER.equals(qp.getName())) {\n                java.lang.String encryptedValue = qp.getValue();\n                if (org.apache.wicket.util.string.Strings.isEmpty(encryptedValue)) {\n                    url.getQueryParameters().add(qp);\n                } else {\n                    java.lang.String decryptedValue = null;\n                    try {\n                        decryptedValue = getCrypt().decryptUrlSafe(encryptedValue);\n                    } catch (java.lang.Exception e) {\n                        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting encrypted request listener query parameter\", e);\n                    }\n                    if (org.apache.wicket.util.string.Strings.isEmpty(decryptedValue)) {\n                        url.getQueryParameters().add(qp);\n                    } else {\n                        org.apache.wicket.request.Url.QueryParameter decryptedParamter = new org.apache.wicket.request.Url.QueryParameter(decryptedValue, \"\");\n                        url.getQueryParameters().add(0, decryptedParamter);\n                    }\n                }\n            } else {\n                url.getQueryParameters().add(qp);\n            }\n        }\n        return url;\n    }\n\n    private static class ApplicationCryptProvider implements org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> {\n        private final org.apache.wicket.Application application;\n\n        public ApplicationCryptProvider(final org.apache.wicket.Application application) {\n            this.application = application;\n        }\n\n        @java.lang.Override\n        public org.apache.wicket.util.crypt.ICrypt get() {\n            return application.getSecuritySettings().getCryptFactory().newCrypt();\n        }\n    }\n\n    public static class HashedSegmentGenerator {\n        private char[] characters;\n\n        private int hash = 0;\n\n        public HashedSegmentGenerator(java.lang.String string) {\n            characters = string.toCharArray();\n        }\n\n        public java.lang.String next() {\n            char a = characters[java.lang.Math.abs(hash % characters.length)];\n            hash++;\n            char b = characters[java.lang.Math.abs(hash % characters.length)];\n            hash++;\n            char c = characters[java.lang.Math.abs(hash % characters.length)];\n            java.lang.String segment = ((\"\" + a) + b) + c;\n            hash = hashString(segment);\n            segment += java.lang.String.format(\"%02x\", java.lang.Math.abs(hash % 256));\n            hash = hashString(segment);\n            return segment;\n        }\n\n        public int hashString(final java.lang.String str) {\n            int hash = 97;\n            for (char c : str.toCharArray()) {\n                int i = c;\n                hash = (47 * hash) + i;\n            }\n            return hash;\n        }\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "protected org.apache.wicket.request.Url encryptUrl(final org.apache.wicket.request.Url url) {\n    if (url.getSegments().isEmpty()) {\n        return url;\n    }\n    java.lang.String encryptedUrlString = getCrypt().encryptUrlSafe(url.toString());\n    org.apache.wicket.request.Url encryptedUrl = new org.apache.wicket.request.Url(url.getCharset());\n    encryptedUrl.getSegments().add(encryptedUrlString);\n    int numberOfSegments = url.getSegments().size();\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    for (int segNo = 0; segNo < numberOfSegments; segNo++) {\n        encryptedUrl.getSegments().add(generator.next());\n    }\n    return encryptedUrl;\n}",
            "src_parent": "public class CryptoMapper implements org.apache.wicket.request.mapper.IRequestMapperDelegate {\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.core.request.mapper.CryptoMapper.class);\n\n    private final org.apache.wicket.request.IRequestMapper wrappedMapper;\n\n    private final org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> cryptProvider;\n\n    public CryptoMapper(final org.apache.wicket.request.IRequestMapper wrappedMapper, final org.apache.wicket.Application application) {\n        this(wrappedMapper, new org.apache.wicket.core.request.mapper.CryptoMapper.ApplicationCryptProvider(application));\n    }\n\n    public CryptoMapper(final org.apache.wicket.request.IRequestMapper wrappedMapper, final org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> cryptProvider) {\n        this.wrappedMapper = org.apache.wicket.util.lang.Args.notNull(wrappedMapper, \"wrappedMapper\");\n        this.cryptProvider = org.apache.wicket.util.lang.Args.notNull(cryptProvider, \"cryptProvider\");\n    }\n\n    @java.lang.Override\n    public int getCompatibilityScore(final org.apache.wicket.request.Request request) {\n        return wrappedMapper.getCompatibilityScore(request);\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.Url mapHandler(final org.apache.wicket.request.IRequestHandler requestHandler) {\n        final org.apache.wicket.request.Url url = wrappedMapper.mapHandler(requestHandler);\n        if (url == null) {\n            return null;\n        }\n        if (url.isFull()) {\n            return url;\n        }\n        return encryptUrl(url);\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.IRequestHandler mapRequest(final org.apache.wicket.request.Request request) {\n        org.apache.wicket.request.Url url = decryptUrl(request, request.getUrl());\n        if (url == null) {\n            return wrappedMapper.mapRequest(request);\n        }\n        org.apache.wicket.request.Request decryptedRequest = request.cloneWithUrl(url);\n        org.apache.wicket.request.IRequestHandler handler = wrappedMapper.mapRequest(decryptedRequest);\n        if (handler != null) {\n            handler = new org.apache.wicket.core.request.handler.RequestSettingRequestHandler(decryptedRequest, handler);\n        }\n        return handler;\n    }\n\n    protected final org.apache.wicket.util.crypt.ICrypt getCrypt() {\n        return cryptProvider.get();\n    }\n\n    @java.lang.Override\n    public final org.apache.wicket.request.IRequestMapper getDelegateMapper() {\n        return wrappedMapper;\n    }\n\n    protected org.apache.wicket.request.Url encryptUrl(final org.apache.wicket.request.Url url) {\n        if (url.getSegments().isEmpty()) {\n            return url;\n        }\n        java.lang.String encryptedUrlString = getCrypt().encryptUrlSafe(url.toString());\n        org.apache.wicket.request.Url encryptedUrl = new org.apache.wicket.request.Url(url.getCharset());\n        encryptedUrl.getSegments().add(encryptedUrlString);\n        int numberOfSegments = url.getSegments().size();\n        org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n        for (int segNo = 0; segNo < numberOfSegments; segNo++) {\n            encryptedUrl.getSegments().add(generator.next());\n        }\n        return encryptedUrl;\n    }\n\n    protected org.apache.wicket.request.Url decryptUrl(final org.apache.wicket.request.Request request, final org.apache.wicket.request.Url encryptedUrl) {\n        if (encryptedUrl.getSegments().isEmpty()) {\n            return encryptedUrl;\n        }\n        java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n        org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n        try {\n            java.lang.String encryptedUrlString = encryptedSegments.get(0);\n            if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n                return null;\n            }\n            java.lang.String decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n            if (decryptedUrl == null) {\n                return null;\n            }\n            org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n            int originalNumberOfSegments = originalUrl.getSegments().size();\n            int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n            org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n            int segNo = 1;\n            for (; segNo < encryptedNumberOfSegments; segNo++) {\n                if (segNo > originalNumberOfSegments) {\n                    break;\n                }\n                java.lang.String next = generator.next();\n                java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n                if (!next.equals(encryptedSegment)) {\n                    break;\n                }\n                url.getSegments().add(originalUrl.getSegments().get(segNo - 1));\n            }\n            for (; segNo < encryptedNumberOfSegments; segNo++) {\n                url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n            }\n            url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n            url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n        } catch (java.lang.Exception e) {\n            org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n            url = null;\n        }\n        return url;\n    }\n\n    private static class ApplicationCryptProvider implements org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> {\n        private final org.apache.wicket.Application application;\n\n        public ApplicationCryptProvider(final org.apache.wicket.Application application) {\n            this.application = application;\n        }\n\n        @java.lang.Override\n        public org.apache.wicket.util.crypt.ICrypt get() {\n            return application.getSecuritySettings().getCryptFactory().newCrypt();\n        }\n    }\n\n    public static class HashedSegmentGenerator {\n        private char[] characters;\n\n        private int hash = 0;\n\n        public HashedSegmentGenerator(java.lang.String string) {\n            characters = string.toCharArray();\n        }\n\n        public java.lang.String next() {\n            char a = characters[java.lang.Math.abs(hash % characters.length)];\n            hash++;\n            char b = characters[java.lang.Math.abs(hash % characters.length)];\n            hash++;\n            char c = characters[java.lang.Math.abs(hash % characters.length)];\n            java.lang.String segment = ((\"\" + a) + b) + c;\n            hash = hashString(segment);\n            segment += java.lang.String.format(\"%02x\", java.lang.Math.abs(hash % 256));\n            hash = hashString(segment);\n            return segment;\n        }\n\n        public int hashString(final java.lang.String str) {\n            int hash = 97;\n            for (char c : str.toCharArray()) {\n                int i = c;\n                hash = (47 * hash) + i;\n            }\n            return hash;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "protected org.apache.wicket.request.Url decryptEntireUrl(final org.apache.wicket.request.Request request, final org.apache.wicket.request.Url encryptedUrl) {\n    org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n    java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n    if (encryptedSegments.isEmpty()) {\n        return null;\n    }\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl;\n    try {\n        decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    } catch (java.lang.Exception e) {\n        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n        return null;\n    }\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    if (originalNumberOfSegments > 0) {\n        url.getSegments().add(originalUrl.getSegments().get(0));\n    }\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n    return url;\n}",
            "dst_parent": "public class CryptoMapper implements org.apache.wicket.request.mapper.IRequestMapperDelegate {\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.core.request.mapper.CryptoMapper.class);\n\n    private static final java.lang.String ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER = \"wicket\";\n\n    private final org.apache.wicket.request.IRequestMapper wrappedMapper;\n\n    private final org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> cryptProvider;\n\n    public CryptoMapper(final org.apache.wicket.request.IRequestMapper wrappedMapper, final org.apache.wicket.Application application) {\n        this(wrappedMapper, new org.apache.wicket.core.request.mapper.CryptoMapper.ApplicationCryptProvider(application));\n    }\n\n    public CryptoMapper(final org.apache.wicket.request.IRequestMapper wrappedMapper, final org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> cryptProvider) {\n        this.wrappedMapper = org.apache.wicket.util.lang.Args.notNull(wrappedMapper, \"wrappedMapper\");\n        this.cryptProvider = org.apache.wicket.util.lang.Args.notNull(cryptProvider, \"cryptProvider\");\n    }\n\n    @java.lang.Override\n    public int getCompatibilityScore(final org.apache.wicket.request.Request request) {\n        org.apache.wicket.request.Url decryptedUrl = decryptUrl(request, request.getUrl());\n        if (decryptedUrl == null) {\n            return 0;\n        }\n        org.apache.wicket.request.Request decryptedRequest = request.cloneWithUrl(decryptedUrl);\n        return wrappedMapper.getCompatibilityScore(decryptedRequest);\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.Url mapHandler(final org.apache.wicket.request.IRequestHandler requestHandler) {\n        final org.apache.wicket.request.Url url = wrappedMapper.mapHandler(requestHandler);\n        if (url == null) {\n            return null;\n        }\n        if (url.isFull()) {\n            return url;\n        }\n        return encryptUrl(url);\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.IRequestHandler mapRequest(final org.apache.wicket.request.Request request) {\n        org.apache.wicket.request.Url url = decryptUrl(request, request.getUrl());\n        if (url == null) {\n            return null;\n        }\n        org.apache.wicket.request.Request decryptedRequest = request.cloneWithUrl(url);\n        org.apache.wicket.request.IRequestHandler handler = wrappedMapper.mapRequest(decryptedRequest);\n        if (handler != null) {\n            handler = new org.apache.wicket.core.request.handler.RequestSettingRequestHandler(decryptedRequest, handler);\n        }\n        return handler;\n    }\n\n    protected final org.apache.wicket.util.crypt.ICrypt getCrypt() {\n        return cryptProvider.get();\n    }\n\n    @java.lang.Override\n    public final org.apache.wicket.request.IRequestMapper getDelegateMapper() {\n        return wrappedMapper;\n    }\n\n    protected org.apache.wicket.request.Url encryptUrl(final org.apache.wicket.request.Url url) {\n        if ((url.getSegments().size() > 0) && url.getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n            return encryptEntireUrl(url);\n        } else {\n            return encryptRequestListenerParameter(url);\n        }\n    }\n\n    protected org.apache.wicket.request.Url encryptEntireUrl(final org.apache.wicket.request.Url url) {\n        java.lang.String encryptedUrlString = getCrypt().encryptUrlSafe(url.toString());\n        org.apache.wicket.request.Url encryptedUrl = new org.apache.wicket.request.Url(url.getCharset());\n        encryptedUrl.getSegments().add(encryptedUrlString);\n        int numberOfSegments = url.getSegments().size() - 1;\n        org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n        for (int segNo = 0; segNo < numberOfSegments; segNo++) {\n            encryptedUrl.getSegments().add(generator.next());\n        }\n        return encryptedUrl;\n    }\n\n    protected org.apache.wicket.request.Url encryptRequestListenerParameter(final org.apache.wicket.request.Url url) {\n        org.apache.wicket.request.Url encryptedUrl = new org.apache.wicket.request.Url(url);\n        for (java.util.Iterator<org.apache.wicket.request.Url.QueryParameter> it = encryptedUrl.getQueryParameters().iterator(); it.hasNext();) {\n            org.apache.wicket.request.Url.QueryParameter qp = it.next();\n            if ((org.apache.wicket.util.string.Strings.isEmpty(qp.getValue()) == true) && (org.apache.wicket.util.string.Strings.isEmpty(qp.getName()) == false)) {\n                if (org.apache.wicket.request.mapper.info.PageComponentInfo.parse(qp.getName()) != null) {\n                    it.remove();\n                    java.lang.String encryptedParameterValue = getCrypt().encryptUrlSafe(qp.getName());\n                    org.apache.wicket.request.Url.QueryParameter encryptedParameter = new org.apache.wicket.request.Url.QueryParameter(org.apache.wicket.core.request.mapper.CryptoMapper.ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER, encryptedParameterValue);\n                    encryptedUrl.getQueryParameters().add(0, encryptedParameter);\n                    break;\n                }\n            }\n        }\n        return encryptedUrl;\n    }\n\n    protected org.apache.wicket.request.Url decryptUrl(final org.apache.wicket.request.Request request, final org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = decryptEntireUrl(request, encryptedUrl);\n        if (url == null) {\n            if ((encryptedUrl.getSegments().size() > 0) && encryptedUrl.getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n                if ((request.getOriginalUrl().getSegments().size() > 0) && request.getOriginalUrl().getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n                    return null;\n                } else {\n                    return encryptedUrl;\n                }\n            }\n        }\n        if (url == null) {\n            url = decryptRequestListenerParameter(request, encryptedUrl);\n        }\n        return url;\n    }\n\n    protected org.apache.wicket.request.Url decryptEntireUrl(final org.apache.wicket.request.Request request, final org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n        java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n        if (encryptedSegments.isEmpty()) {\n            return null;\n        }\n        java.lang.String encryptedUrlString = encryptedSegments.get(0);\n        if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n            return null;\n        }\n        java.lang.String decryptedUrl;\n        try {\n            decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n        } catch (java.lang.Exception e) {\n            org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n            return null;\n        }\n        if (decryptedUrl == null) {\n            return null;\n        }\n        org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n        int originalNumberOfSegments = originalUrl.getSegments().size();\n        int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n        if (originalNumberOfSegments > 0) {\n            url.getSegments().add(originalUrl.getSegments().get(0));\n        }\n        org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n        int segNo = 1;\n        for (; segNo < encryptedNumberOfSegments; segNo++) {\n            if (segNo > originalNumberOfSegments) {\n                break;\n            }\n            java.lang.String next = generator.next();\n            java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n            if (!next.equals(encryptedSegment)) {\n                break;\n            }\n            url.getSegments().add(originalUrl.getSegments().get(segNo));\n        }\n        for (; segNo < encryptedNumberOfSegments; segNo++) {\n            url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n        }\n        url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n        url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n        return url;\n    }\n\n    protected org.apache.wicket.request.Url decryptRequestListenerParameter(final org.apache.wicket.request.Request request, org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(encryptedUrl);\n        url.getQueryParameters().clear();\n        for (org.apache.wicket.request.Url.QueryParameter qp : encryptedUrl.getQueryParameters()) {\n            if (org.apache.wicket.util.string.Strings.isEmpty(qp.getValue()) && (org.apache.wicket.util.string.Strings.isEmpty(qp.getName()) == false)) {\n                if (org.apache.wicket.request.mapper.info.PageComponentInfo.parse(qp.getName()) != null) {\n                    if (request.getOriginalUrl().getQueryParameter(qp.getName()) == null) {\n                        url.getQueryParameters().add(qp);\n                    } else {\n                        return null;\n                    }\n                }\n            } else if (org.apache.wicket.core.request.mapper.CryptoMapper.ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER.equals(qp.getName())) {\n                java.lang.String encryptedValue = qp.getValue();\n                if (org.apache.wicket.util.string.Strings.isEmpty(encryptedValue)) {\n                    url.getQueryParameters().add(qp);\n                } else {\n                    java.lang.String decryptedValue = null;\n                    try {\n                        decryptedValue = getCrypt().decryptUrlSafe(encryptedValue);\n                    } catch (java.lang.Exception e) {\n                        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting encrypted request listener query parameter\", e);\n                    }\n                    if (org.apache.wicket.util.string.Strings.isEmpty(decryptedValue)) {\n                        url.getQueryParameters().add(qp);\n                    } else {\n                        org.apache.wicket.request.Url.QueryParameter decryptedParamter = new org.apache.wicket.request.Url.QueryParameter(decryptedValue, \"\");\n                        url.getQueryParameters().add(0, decryptedParamter);\n                    }\n                }\n            } else {\n                url.getQueryParameters().add(qp);\n            }\n        }\n        return url;\n    }\n\n    private static class ApplicationCryptProvider implements org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> {\n        private final org.apache.wicket.Application application;\n\n        public ApplicationCryptProvider(final org.apache.wicket.Application application) {\n            this.application = application;\n        }\n\n        @java.lang.Override\n        public org.apache.wicket.util.crypt.ICrypt get() {\n            return application.getSecuritySettings().getCryptFactory().newCrypt();\n        }\n    }\n\n    public static class HashedSegmentGenerator {\n        private char[] characters;\n\n        private int hash = 0;\n\n        public HashedSegmentGenerator(java.lang.String string) {\n            characters = string.toCharArray();\n        }\n\n        public java.lang.String next() {\n            char a = characters[java.lang.Math.abs(hash % characters.length)];\n            hash++;\n            char b = characters[java.lang.Math.abs(hash % characters.length)];\n            hash++;\n            char c = characters[java.lang.Math.abs(hash % characters.length)];\n            java.lang.String segment = ((\"\" + a) + b) + c;\n            hash = hashString(segment);\n            segment += java.lang.String.format(\"%02x\", java.lang.Math.abs(hash % 256));\n            hash = hashString(segment);\n            return segment;\n        }\n\n        public int hashString(final java.lang.String str) {\n            int hash = 97;\n            for (char c : str.toCharArray()) {\n                int i = c;\n                hash = (47 * hash) + i;\n            }\n            return hash;\n        }\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "protected org.apache.wicket.request.Url decryptUrl(final org.apache.wicket.request.Request request, final org.apache.wicket.request.Url encryptedUrl) {\n    if (encryptedUrl.getSegments().isEmpty()) {\n        return encryptedUrl;\n    }\n    java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n    org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n    try {\n        java.lang.String encryptedUrlString = encryptedSegments.get(0);\n        if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n            return null;\n        }\n        java.lang.String decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n        if (decryptedUrl == null) {\n            return null;\n        }\n        org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n        int originalNumberOfSegments = originalUrl.getSegments().size();\n        int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n        org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n        int segNo = 1;\n        for (; segNo < encryptedNumberOfSegments; segNo++) {\n            if (segNo > originalNumberOfSegments) {\n                break;\n            }\n            java.lang.String next = generator.next();\n            java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n            if (!next.equals(encryptedSegment)) {\n                break;\n            }\n            url.getSegments().add(originalUrl.getSegments().get(segNo - 1));\n        }\n        for (; segNo < encryptedNumberOfSegments; segNo++) {\n            url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n        }\n        url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n        url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n    } catch (java.lang.Exception e) {\n        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n        url = null;\n    }\n    return url;\n}",
            "src_parent": "public class CryptoMapper implements org.apache.wicket.request.mapper.IRequestMapperDelegate {\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.core.request.mapper.CryptoMapper.class);\n\n    private final org.apache.wicket.request.IRequestMapper wrappedMapper;\n\n    private final org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> cryptProvider;\n\n    public CryptoMapper(final org.apache.wicket.request.IRequestMapper wrappedMapper, final org.apache.wicket.Application application) {\n        this(wrappedMapper, new org.apache.wicket.core.request.mapper.CryptoMapper.ApplicationCryptProvider(application));\n    }\n\n    public CryptoMapper(final org.apache.wicket.request.IRequestMapper wrappedMapper, final org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> cryptProvider) {\n        this.wrappedMapper = org.apache.wicket.util.lang.Args.notNull(wrappedMapper, \"wrappedMapper\");\n        this.cryptProvider = org.apache.wicket.util.lang.Args.notNull(cryptProvider, \"cryptProvider\");\n    }\n\n    @java.lang.Override\n    public int getCompatibilityScore(final org.apache.wicket.request.Request request) {\n        return wrappedMapper.getCompatibilityScore(request);\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.Url mapHandler(final org.apache.wicket.request.IRequestHandler requestHandler) {\n        final org.apache.wicket.request.Url url = wrappedMapper.mapHandler(requestHandler);\n        if (url == null) {\n            return null;\n        }\n        if (url.isFull()) {\n            return url;\n        }\n        return encryptUrl(url);\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.IRequestHandler mapRequest(final org.apache.wicket.request.Request request) {\n        org.apache.wicket.request.Url url = decryptUrl(request, request.getUrl());\n        if (url == null) {\n            return wrappedMapper.mapRequest(request);\n        }\n        org.apache.wicket.request.Request decryptedRequest = request.cloneWithUrl(url);\n        org.apache.wicket.request.IRequestHandler handler = wrappedMapper.mapRequest(decryptedRequest);\n        if (handler != null) {\n            handler = new org.apache.wicket.core.request.handler.RequestSettingRequestHandler(decryptedRequest, handler);\n        }\n        return handler;\n    }\n\n    protected final org.apache.wicket.util.crypt.ICrypt getCrypt() {\n        return cryptProvider.get();\n    }\n\n    @java.lang.Override\n    public final org.apache.wicket.request.IRequestMapper getDelegateMapper() {\n        return wrappedMapper;\n    }\n\n    protected org.apache.wicket.request.Url encryptUrl(final org.apache.wicket.request.Url url) {\n        if (url.getSegments().isEmpty()) {\n            return url;\n        }\n        java.lang.String encryptedUrlString = getCrypt().encryptUrlSafe(url.toString());\n        org.apache.wicket.request.Url encryptedUrl = new org.apache.wicket.request.Url(url.getCharset());\n        encryptedUrl.getSegments().add(encryptedUrlString);\n        int numberOfSegments = url.getSegments().size();\n        org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n        for (int segNo = 0; segNo < numberOfSegments; segNo++) {\n            encryptedUrl.getSegments().add(generator.next());\n        }\n        return encryptedUrl;\n    }\n\n    protected org.apache.wicket.request.Url decryptUrl(final org.apache.wicket.request.Request request, final org.apache.wicket.request.Url encryptedUrl) {\n        if (encryptedUrl.getSegments().isEmpty()) {\n            return encryptedUrl;\n        }\n        java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n        org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n        try {\n            java.lang.String encryptedUrlString = encryptedSegments.get(0);\n            if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n                return null;\n            }\n            java.lang.String decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n            if (decryptedUrl == null) {\n                return null;\n            }\n            org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n            int originalNumberOfSegments = originalUrl.getSegments().size();\n            int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n            org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n            int segNo = 1;\n            for (; segNo < encryptedNumberOfSegments; segNo++) {\n                if (segNo > originalNumberOfSegments) {\n                    break;\n                }\n                java.lang.String next = generator.next();\n                java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n                if (!next.equals(encryptedSegment)) {\n                    break;\n                }\n                url.getSegments().add(originalUrl.getSegments().get(segNo - 1));\n            }\n            for (; segNo < encryptedNumberOfSegments; segNo++) {\n                url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n            }\n            url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n            url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n        } catch (java.lang.Exception e) {\n            org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n            url = null;\n        }\n        return url;\n    }\n\n    private static class ApplicationCryptProvider implements org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> {\n        private final org.apache.wicket.Application application;\n\n        public ApplicationCryptProvider(final org.apache.wicket.Application application) {\n            this.application = application;\n        }\n\n        @java.lang.Override\n        public org.apache.wicket.util.crypt.ICrypt get() {\n            return application.getSecuritySettings().getCryptFactory().newCrypt();\n        }\n    }\n\n    public static class HashedSegmentGenerator {\n        private char[] characters;\n\n        private int hash = 0;\n\n        public HashedSegmentGenerator(java.lang.String string) {\n            characters = string.toCharArray();\n        }\n\n        public java.lang.String next() {\n            char a = characters[java.lang.Math.abs(hash % characters.length)];\n            hash++;\n            char b = characters[java.lang.Math.abs(hash % characters.length)];\n            hash++;\n            char c = characters[java.lang.Math.abs(hash % characters.length)];\n            java.lang.String segment = ((\"\" + a) + b) + c;\n            hash = hashString(segment);\n            segment += java.lang.String.format(\"%02x\", java.lang.Math.abs(hash % 256));\n            hash = hashString(segment);\n            return segment;\n        }\n\n        public int hashString(final java.lang.String str) {\n            int hash = 97;\n            for (char c : str.toCharArray()) {\n                int i = c;\n                hash = (47 * hash) + i;\n            }\n            return hash;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "decryptedRequest",
            "dst_parent": "wrappedMapper.getCompatibilityScore(decryptedRequest)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "request",
            "src_parent": "wrappedMapper.getCompatibilityScore(request)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "url.getSegments().get(0)",
            "dst_parent": "url.getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "url.getSegments().isEmpty()",
            "src_parent": "if (url.getSegments().isEmpty()) {\n    return url;\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "encryptedUrl.getSegments().size()",
            "dst_parent": "(encryptedUrl.getSegments().size() > 0)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "encryptedUrl.getSegments().isEmpty()",
            "src_parent": "if (encryptedUrl.getSegments().isEmpty()) {\n    return encryptedUrl;\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "wrappedMapper.mapRequest(request)",
            "src_parent": "return wrappedMapper.mapRequest(request)",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "url = null",
            "src_parent": "{\n    org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n    url = null;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "segNo - 1",
            "src_parent": "originalUrl.getSegments().get(segNo - 1)",
            "src_parent_type": "Invocation",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static final java.lang.String ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER = \"wicket\";",
            "src_parent": "public class CryptoMapper implements org.apache.wicket.request.mapper.IRequestMapperDelegate {\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.core.request.mapper.CryptoMapper.class);\n\n    private static final java.lang.String ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER = \"wicket\";\n\n    private final org.apache.wicket.request.IRequestMapper wrappedMapper;\n\n    private final org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> cryptProvider;\n\n    public CryptoMapper(final org.apache.wicket.request.IRequestMapper wrappedMapper, final org.apache.wicket.Application application) {\n        this(wrappedMapper, new org.apache.wicket.core.request.mapper.CryptoMapper.ApplicationCryptProvider(application));\n    }\n\n    public CryptoMapper(final org.apache.wicket.request.IRequestMapper wrappedMapper, final org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> cryptProvider) {\n        this.wrappedMapper = org.apache.wicket.util.lang.Args.notNull(wrappedMapper, \"wrappedMapper\");\n        this.cryptProvider = org.apache.wicket.util.lang.Args.notNull(cryptProvider, \"cryptProvider\");\n    }\n\n    @java.lang.Override\n    public int getCompatibilityScore(final org.apache.wicket.request.Request request) {\n        org.apache.wicket.request.Url decryptedUrl = decryptUrl(request, request.getUrl());\n        if (decryptedUrl == null) {\n            return 0;\n        }\n        org.apache.wicket.request.Request decryptedRequest = request.cloneWithUrl(decryptedUrl);\n        return wrappedMapper.getCompatibilityScore(decryptedRequest);\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.Url mapHandler(final org.apache.wicket.request.IRequestHandler requestHandler) {\n        final org.apache.wicket.request.Url url = wrappedMapper.mapHandler(requestHandler);\n        if (url == null) {\n            return null;\n        }\n        if (url.isFull()) {\n            return url;\n        }\n        return encryptUrl(url);\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.IRequestHandler mapRequest(final org.apache.wicket.request.Request request) {\n        org.apache.wicket.request.Url url = decryptUrl(request, request.getUrl());\n        if (url == null) {\n            return null;\n        }\n        org.apache.wicket.request.Request decryptedRequest = request.cloneWithUrl(url);\n        org.apache.wicket.request.IRequestHandler handler = wrappedMapper.mapRequest(decryptedRequest);\n        if (handler != null) {\n            handler = new org.apache.wicket.core.request.handler.RequestSettingRequestHandler(decryptedRequest, handler);\n        }\n        return handler;\n    }\n\n    protected final org.apache.wicket.util.crypt.ICrypt getCrypt() {\n        return cryptProvider.get();\n    }\n\n    @java.lang.Override\n    public final org.apache.wicket.request.IRequestMapper getDelegateMapper() {\n        return wrappedMapper;\n    }\n\n    protected org.apache.wicket.request.Url encryptUrl(final org.apache.wicket.request.Url url) {\n        if ((url.getSegments().size() > 0) && url.getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n            return encryptEntireUrl(url);\n        } else {\n            return encryptRequestListenerParameter(url);\n        }\n    }\n\n    protected org.apache.wicket.request.Url encryptEntireUrl(final org.apache.wicket.request.Url url) {\n        java.lang.String encryptedUrlString = getCrypt().encryptUrlSafe(url.toString());\n        org.apache.wicket.request.Url encryptedUrl = new org.apache.wicket.request.Url(url.getCharset());\n        encryptedUrl.getSegments().add(encryptedUrlString);\n        int numberOfSegments = url.getSegments().size() - 1;\n        org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n        for (int segNo = 0; segNo < numberOfSegments; segNo++) {\n            encryptedUrl.getSegments().add(generator.next());\n        }\n        return encryptedUrl;\n    }\n\n    protected org.apache.wicket.request.Url encryptRequestListenerParameter(final org.apache.wicket.request.Url url) {\n        org.apache.wicket.request.Url encryptedUrl = new org.apache.wicket.request.Url(url);\n        for (java.util.Iterator<org.apache.wicket.request.Url.QueryParameter> it = encryptedUrl.getQueryParameters().iterator(); it.hasNext();) {\n            org.apache.wicket.request.Url.QueryParameter qp = it.next();\n            if ((org.apache.wicket.util.string.Strings.isEmpty(qp.getValue()) == true) && (org.apache.wicket.util.string.Strings.isEmpty(qp.getName()) == false)) {\n                if (org.apache.wicket.request.mapper.info.PageComponentInfo.parse(qp.getName()) != null) {\n                    it.remove();\n                    java.lang.String encryptedParameterValue = getCrypt().encryptUrlSafe(qp.getName());\n                    org.apache.wicket.request.Url.QueryParameter encryptedParameter = new org.apache.wicket.request.Url.QueryParameter(org.apache.wicket.core.request.mapper.CryptoMapper.ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER, encryptedParameterValue);\n                    encryptedUrl.getQueryParameters().add(0, encryptedParameter);\n                    break;\n                }\n            }\n        }\n        return encryptedUrl;\n    }\n\n    protected org.apache.wicket.request.Url decryptUrl(final org.apache.wicket.request.Request request, final org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = decryptEntireUrl(request, encryptedUrl);\n        if (url == null) {\n            if ((encryptedUrl.getSegments().size() > 0) && encryptedUrl.getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n                if ((request.getOriginalUrl().getSegments().size() > 0) && request.getOriginalUrl().getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n                    return null;\n                } else {\n                    return encryptedUrl;\n                }\n            }\n        }\n        if (url == null) {\n            url = decryptRequestListenerParameter(request, encryptedUrl);\n        }\n        return url;\n    }\n\n    protected org.apache.wicket.request.Url decryptEntireUrl(final org.apache.wicket.request.Request request, final org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n        java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n        if (encryptedSegments.isEmpty()) {\n            return null;\n        }\n        java.lang.String encryptedUrlString = encryptedSegments.get(0);\n        if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n            return null;\n        }\n        java.lang.String decryptedUrl;\n        try {\n            decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n        } catch (java.lang.Exception e) {\n            org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n            return null;\n        }\n        if (decryptedUrl == null) {\n            return null;\n        }\n        org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n        int originalNumberOfSegments = originalUrl.getSegments().size();\n        int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n        if (originalNumberOfSegments > 0) {\n            url.getSegments().add(originalUrl.getSegments().get(0));\n        }\n        org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n        int segNo = 1;\n        for (; segNo < encryptedNumberOfSegments; segNo++) {\n            if (segNo > originalNumberOfSegments) {\n                break;\n            }\n            java.lang.String next = generator.next();\n            java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n            if (!next.equals(encryptedSegment)) {\n                break;\n            }\n            url.getSegments().add(originalUrl.getSegments().get(segNo));\n        }\n        for (; segNo < encryptedNumberOfSegments; segNo++) {\n            url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n        }\n        url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n        url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n        return url;\n    }\n\n    protected org.apache.wicket.request.Url decryptRequestListenerParameter(final org.apache.wicket.request.Request request, org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(encryptedUrl);\n        url.getQueryParameters().clear();\n        for (org.apache.wicket.request.Url.QueryParameter qp : encryptedUrl.getQueryParameters()) {\n            if (org.apache.wicket.util.string.Strings.isEmpty(qp.getValue()) && (org.apache.wicket.util.string.Strings.isEmpty(qp.getName()) == false)) {\n                if (org.apache.wicket.request.mapper.info.PageComponentInfo.parse(qp.getName()) != null) {\n                    if (request.getOriginalUrl().getQueryParameter(qp.getName()) == null) {\n                        url.getQueryParameters().add(qp);\n                    } else {\n                        return null;\n                    }\n                }\n            } else if (org.apache.wicket.core.request.mapper.CryptoMapper.ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER.equals(qp.getName())) {\n                java.lang.String encryptedValue = qp.getValue();\n                if (org.apache.wicket.util.string.Strings.isEmpty(encryptedValue)) {\n                    url.getQueryParameters().add(qp);\n                } else {\n                    java.lang.String decryptedValue = null;\n                    try {\n                        decryptedValue = getCrypt().decryptUrlSafe(encryptedValue);\n                    } catch (java.lang.Exception e) {\n                        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting encrypted request listener query parameter\", e);\n                    }\n                    if (org.apache.wicket.util.string.Strings.isEmpty(decryptedValue)) {\n                        url.getQueryParameters().add(qp);\n                    } else {\n                        org.apache.wicket.request.Url.QueryParameter decryptedParamter = new org.apache.wicket.request.Url.QueryParameter(decryptedValue, \"\");\n                        url.getQueryParameters().add(0, decryptedParamter);\n                    }\n                }\n            } else {\n                url.getQueryParameters().add(qp);\n            }\n        }\n        return url;\n    }\n\n    private static class ApplicationCryptProvider implements org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> {\n        private final org.apache.wicket.Application application;\n\n        public ApplicationCryptProvider(final org.apache.wicket.Application application) {\n            this.application = application;\n        }\n\n        @java.lang.Override\n        public org.apache.wicket.util.crypt.ICrypt get() {\n            return application.getSecuritySettings().getCryptFactory().newCrypt();\n        }\n    }\n\n    public static class HashedSegmentGenerator {\n        private char[] characters;\n\n        private int hash = 0;\n\n        public HashedSegmentGenerator(java.lang.String string) {\n            characters = string.toCharArray();\n        }\n\n        public java.lang.String next() {\n            char a = characters[java.lang.Math.abs(hash % characters.length)];\n            hash++;\n            char b = characters[java.lang.Math.abs(hash % characters.length)];\n            hash++;\n            char c = characters[java.lang.Math.abs(hash % characters.length)];\n            java.lang.String segment = ((\"\" + a) + b) + c;\n            hash = hashString(segment);\n            segment += java.lang.String.format(\"%02x\", java.lang.Math.abs(hash % 256));\n            hash = hashString(segment);\n            return segment;\n        }\n\n        public int hashString(final java.lang.String str) {\n            int hash = 97;\n            for (char c : str.toCharArray()) {\n                int i = c;\n                hash = (47 * hash) + i;\n            }\n            return hash;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "protected org.apache.wicket.request.Url encryptUrl(final org.apache.wicket.request.Url url) {\n    if ((url.getSegments().size() > 0) && url.getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n        return encryptEntireUrl(url);\n    } else {\n        return encryptRequestListenerParameter(url);\n    }\n}",
            "src_parent": "public class CryptoMapper implements org.apache.wicket.request.mapper.IRequestMapperDelegate {\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.core.request.mapper.CryptoMapper.class);\n\n    private static final java.lang.String ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER = \"wicket\";\n\n    private final org.apache.wicket.request.IRequestMapper wrappedMapper;\n\n    private final org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> cryptProvider;\n\n    public CryptoMapper(final org.apache.wicket.request.IRequestMapper wrappedMapper, final org.apache.wicket.Application application) {\n        this(wrappedMapper, new org.apache.wicket.core.request.mapper.CryptoMapper.ApplicationCryptProvider(application));\n    }\n\n    public CryptoMapper(final org.apache.wicket.request.IRequestMapper wrappedMapper, final org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> cryptProvider) {\n        this.wrappedMapper = org.apache.wicket.util.lang.Args.notNull(wrappedMapper, \"wrappedMapper\");\n        this.cryptProvider = org.apache.wicket.util.lang.Args.notNull(cryptProvider, \"cryptProvider\");\n    }\n\n    @java.lang.Override\n    public int getCompatibilityScore(final org.apache.wicket.request.Request request) {\n        org.apache.wicket.request.Url decryptedUrl = decryptUrl(request, request.getUrl());\n        if (decryptedUrl == null) {\n            return 0;\n        }\n        org.apache.wicket.request.Request decryptedRequest = request.cloneWithUrl(decryptedUrl);\n        return wrappedMapper.getCompatibilityScore(decryptedRequest);\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.Url mapHandler(final org.apache.wicket.request.IRequestHandler requestHandler) {\n        final org.apache.wicket.request.Url url = wrappedMapper.mapHandler(requestHandler);\n        if (url == null) {\n            return null;\n        }\n        if (url.isFull()) {\n            return url;\n        }\n        return encryptUrl(url);\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.IRequestHandler mapRequest(final org.apache.wicket.request.Request request) {\n        org.apache.wicket.request.Url url = decryptUrl(request, request.getUrl());\n        if (url == null) {\n            return null;\n        }\n        org.apache.wicket.request.Request decryptedRequest = request.cloneWithUrl(url);\n        org.apache.wicket.request.IRequestHandler handler = wrappedMapper.mapRequest(decryptedRequest);\n        if (handler != null) {\n            handler = new org.apache.wicket.core.request.handler.RequestSettingRequestHandler(decryptedRequest, handler);\n        }\n        return handler;\n    }\n\n    protected final org.apache.wicket.util.crypt.ICrypt getCrypt() {\n        return cryptProvider.get();\n    }\n\n    @java.lang.Override\n    public final org.apache.wicket.request.IRequestMapper getDelegateMapper() {\n        return wrappedMapper;\n    }\n\n    protected org.apache.wicket.request.Url encryptUrl(final org.apache.wicket.request.Url url) {\n        if ((url.getSegments().size() > 0) && url.getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n            return encryptEntireUrl(url);\n        } else {\n            return encryptRequestListenerParameter(url);\n        }\n    }\n\n    protected org.apache.wicket.request.Url encryptEntireUrl(final org.apache.wicket.request.Url url) {\n        java.lang.String encryptedUrlString = getCrypt().encryptUrlSafe(url.toString());\n        org.apache.wicket.request.Url encryptedUrl = new org.apache.wicket.request.Url(url.getCharset());\n        encryptedUrl.getSegments().add(encryptedUrlString);\n        int numberOfSegments = url.getSegments().size() - 1;\n        org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n        for (int segNo = 0; segNo < numberOfSegments; segNo++) {\n            encryptedUrl.getSegments().add(generator.next());\n        }\n        return encryptedUrl;\n    }\n\n    protected org.apache.wicket.request.Url encryptRequestListenerParameter(final org.apache.wicket.request.Url url) {\n        org.apache.wicket.request.Url encryptedUrl = new org.apache.wicket.request.Url(url);\n        for (java.util.Iterator<org.apache.wicket.request.Url.QueryParameter> it = encryptedUrl.getQueryParameters().iterator(); it.hasNext();) {\n            org.apache.wicket.request.Url.QueryParameter qp = it.next();\n            if ((org.apache.wicket.util.string.Strings.isEmpty(qp.getValue()) == true) && (org.apache.wicket.util.string.Strings.isEmpty(qp.getName()) == false)) {\n                if (org.apache.wicket.request.mapper.info.PageComponentInfo.parse(qp.getName()) != null) {\n                    it.remove();\n                    java.lang.String encryptedParameterValue = getCrypt().encryptUrlSafe(qp.getName());\n                    org.apache.wicket.request.Url.QueryParameter encryptedParameter = new org.apache.wicket.request.Url.QueryParameter(org.apache.wicket.core.request.mapper.CryptoMapper.ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER, encryptedParameterValue);\n                    encryptedUrl.getQueryParameters().add(0, encryptedParameter);\n                    break;\n                }\n            }\n        }\n        return encryptedUrl;\n    }\n\n    protected org.apache.wicket.request.Url decryptUrl(final org.apache.wicket.request.Request request, final org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = decryptEntireUrl(request, encryptedUrl);\n        if (url == null) {\n            if ((encryptedUrl.getSegments().size() > 0) && encryptedUrl.getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n                if ((request.getOriginalUrl().getSegments().size() > 0) && request.getOriginalUrl().getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n                    return null;\n                } else {\n                    return encryptedUrl;\n                }\n            }\n        }\n        if (url == null) {\n            url = decryptRequestListenerParameter(request, encryptedUrl);\n        }\n        return url;\n    }\n\n    protected org.apache.wicket.request.Url decryptEntireUrl(final org.apache.wicket.request.Request request, final org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n        java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n        if (encryptedSegments.isEmpty()) {\n            return null;\n        }\n        java.lang.String encryptedUrlString = encryptedSegments.get(0);\n        if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n            return null;\n        }\n        java.lang.String decryptedUrl;\n        try {\n            decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n        } catch (java.lang.Exception e) {\n            org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n            return null;\n        }\n        if (decryptedUrl == null) {\n            return null;\n        }\n        org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n        int originalNumberOfSegments = originalUrl.getSegments().size();\n        int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n        if (originalNumberOfSegments > 0) {\n            url.getSegments().add(originalUrl.getSegments().get(0));\n        }\n        org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n        int segNo = 1;\n        for (; segNo < encryptedNumberOfSegments; segNo++) {\n            if (segNo > originalNumberOfSegments) {\n                break;\n            }\n            java.lang.String next = generator.next();\n            java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n            if (!next.equals(encryptedSegment)) {\n                break;\n            }\n            url.getSegments().add(originalUrl.getSegments().get(segNo));\n        }\n        for (; segNo < encryptedNumberOfSegments; segNo++) {\n            url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n        }\n        url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n        url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n        return url;\n    }\n\n    protected org.apache.wicket.request.Url decryptRequestListenerParameter(final org.apache.wicket.request.Request request, org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(encryptedUrl);\n        url.getQueryParameters().clear();\n        for (org.apache.wicket.request.Url.QueryParameter qp : encryptedUrl.getQueryParameters()) {\n            if (org.apache.wicket.util.string.Strings.isEmpty(qp.getValue()) && (org.apache.wicket.util.string.Strings.isEmpty(qp.getName()) == false)) {\n                if (org.apache.wicket.request.mapper.info.PageComponentInfo.parse(qp.getName()) != null) {\n                    if (request.getOriginalUrl().getQueryParameter(qp.getName()) == null) {\n                        url.getQueryParameters().add(qp);\n                    } else {\n                        return null;\n                    }\n                }\n            } else if (org.apache.wicket.core.request.mapper.CryptoMapper.ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER.equals(qp.getName())) {\n                java.lang.String encryptedValue = qp.getValue();\n                if (org.apache.wicket.util.string.Strings.isEmpty(encryptedValue)) {\n                    url.getQueryParameters().add(qp);\n                } else {\n                    java.lang.String decryptedValue = null;\n                    try {\n                        decryptedValue = getCrypt().decryptUrlSafe(encryptedValue);\n                    } catch (java.lang.Exception e) {\n                        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting encrypted request listener query parameter\", e);\n                    }\n                    if (org.apache.wicket.util.string.Strings.isEmpty(decryptedValue)) {\n                        url.getQueryParameters().add(qp);\n                    } else {\n                        org.apache.wicket.request.Url.QueryParameter decryptedParamter = new org.apache.wicket.request.Url.QueryParameter(decryptedValue, \"\");\n                        url.getQueryParameters().add(0, decryptedParamter);\n                    }\n                }\n            } else {\n                url.getQueryParameters().add(qp);\n            }\n        }\n        return url;\n    }\n\n    private static class ApplicationCryptProvider implements org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> {\n        private final org.apache.wicket.Application application;\n\n        public ApplicationCryptProvider(final org.apache.wicket.Application application) {\n            this.application = application;\n        }\n\n        @java.lang.Override\n        public org.apache.wicket.util.crypt.ICrypt get() {\n            return application.getSecuritySettings().getCryptFactory().newCrypt();\n        }\n    }\n\n    public static class HashedSegmentGenerator {\n        private char[] characters;\n\n        private int hash = 0;\n\n        public HashedSegmentGenerator(java.lang.String string) {\n            characters = string.toCharArray();\n        }\n\n        public java.lang.String next() {\n            char a = characters[java.lang.Math.abs(hash % characters.length)];\n            hash++;\n            char b = characters[java.lang.Math.abs(hash % characters.length)];\n            hash++;\n            char c = characters[java.lang.Math.abs(hash % characters.length)];\n            java.lang.String segment = ((\"\" + a) + b) + c;\n            hash = hashString(segment);\n            segment += java.lang.String.format(\"%02x\", java.lang.Math.abs(hash % 256));\n            hash = hashString(segment);\n            return segment;\n        }\n\n        public int hashString(final java.lang.String str) {\n            int hash = 97;\n            for (char c : str.toCharArray()) {\n                int i = c;\n                hash = (47 * hash) + i;\n            }\n            return hash;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "protected org.apache.wicket.request.Url encryptRequestListenerParameter(final org.apache.wicket.request.Url url) {\n    org.apache.wicket.request.Url encryptedUrl = new org.apache.wicket.request.Url(url);\n    for (java.util.Iterator<org.apache.wicket.request.Url.QueryParameter> it = encryptedUrl.getQueryParameters().iterator(); it.hasNext();) {\n        org.apache.wicket.request.Url.QueryParameter qp = it.next();\n        if ((org.apache.wicket.util.string.Strings.isEmpty(qp.getValue()) == true) && (org.apache.wicket.util.string.Strings.isEmpty(qp.getName()) == false)) {\n            if (org.apache.wicket.request.mapper.info.PageComponentInfo.parse(qp.getName()) != null) {\n                it.remove();\n                java.lang.String encryptedParameterValue = getCrypt().encryptUrlSafe(qp.getName());\n                org.apache.wicket.request.Url.QueryParameter encryptedParameter = new org.apache.wicket.request.Url.QueryParameter(org.apache.wicket.core.request.mapper.CryptoMapper.ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER, encryptedParameterValue);\n                encryptedUrl.getQueryParameters().add(0, encryptedParameter);\n                break;\n            }\n        }\n    }\n    return encryptedUrl;\n}",
            "src_parent": "public class CryptoMapper implements org.apache.wicket.request.mapper.IRequestMapperDelegate {\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.core.request.mapper.CryptoMapper.class);\n\n    private static final java.lang.String ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER = \"wicket\";\n\n    private final org.apache.wicket.request.IRequestMapper wrappedMapper;\n\n    private final org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> cryptProvider;\n\n    public CryptoMapper(final org.apache.wicket.request.IRequestMapper wrappedMapper, final org.apache.wicket.Application application) {\n        this(wrappedMapper, new org.apache.wicket.core.request.mapper.CryptoMapper.ApplicationCryptProvider(application));\n    }\n\n    public CryptoMapper(final org.apache.wicket.request.IRequestMapper wrappedMapper, final org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> cryptProvider) {\n        this.wrappedMapper = org.apache.wicket.util.lang.Args.notNull(wrappedMapper, \"wrappedMapper\");\n        this.cryptProvider = org.apache.wicket.util.lang.Args.notNull(cryptProvider, \"cryptProvider\");\n    }\n\n    @java.lang.Override\n    public int getCompatibilityScore(final org.apache.wicket.request.Request request) {\n        org.apache.wicket.request.Url decryptedUrl = decryptUrl(request, request.getUrl());\n        if (decryptedUrl == null) {\n            return 0;\n        }\n        org.apache.wicket.request.Request decryptedRequest = request.cloneWithUrl(decryptedUrl);\n        return wrappedMapper.getCompatibilityScore(decryptedRequest);\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.Url mapHandler(final org.apache.wicket.request.IRequestHandler requestHandler) {\n        final org.apache.wicket.request.Url url = wrappedMapper.mapHandler(requestHandler);\n        if (url == null) {\n            return null;\n        }\n        if (url.isFull()) {\n            return url;\n        }\n        return encryptUrl(url);\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.IRequestHandler mapRequest(final org.apache.wicket.request.Request request) {\n        org.apache.wicket.request.Url url = decryptUrl(request, request.getUrl());\n        if (url == null) {\n            return null;\n        }\n        org.apache.wicket.request.Request decryptedRequest = request.cloneWithUrl(url);\n        org.apache.wicket.request.IRequestHandler handler = wrappedMapper.mapRequest(decryptedRequest);\n        if (handler != null) {\n            handler = new org.apache.wicket.core.request.handler.RequestSettingRequestHandler(decryptedRequest, handler);\n        }\n        return handler;\n    }\n\n    protected final org.apache.wicket.util.crypt.ICrypt getCrypt() {\n        return cryptProvider.get();\n    }\n\n    @java.lang.Override\n    public final org.apache.wicket.request.IRequestMapper getDelegateMapper() {\n        return wrappedMapper;\n    }\n\n    protected org.apache.wicket.request.Url encryptUrl(final org.apache.wicket.request.Url url) {\n        if ((url.getSegments().size() > 0) && url.getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n            return encryptEntireUrl(url);\n        } else {\n            return encryptRequestListenerParameter(url);\n        }\n    }\n\n    protected org.apache.wicket.request.Url encryptEntireUrl(final org.apache.wicket.request.Url url) {\n        java.lang.String encryptedUrlString = getCrypt().encryptUrlSafe(url.toString());\n        org.apache.wicket.request.Url encryptedUrl = new org.apache.wicket.request.Url(url.getCharset());\n        encryptedUrl.getSegments().add(encryptedUrlString);\n        int numberOfSegments = url.getSegments().size() - 1;\n        org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n        for (int segNo = 0; segNo < numberOfSegments; segNo++) {\n            encryptedUrl.getSegments().add(generator.next());\n        }\n        return encryptedUrl;\n    }\n\n    protected org.apache.wicket.request.Url encryptRequestListenerParameter(final org.apache.wicket.request.Url url) {\n        org.apache.wicket.request.Url encryptedUrl = new org.apache.wicket.request.Url(url);\n        for (java.util.Iterator<org.apache.wicket.request.Url.QueryParameter> it = encryptedUrl.getQueryParameters().iterator(); it.hasNext();) {\n            org.apache.wicket.request.Url.QueryParameter qp = it.next();\n            if ((org.apache.wicket.util.string.Strings.isEmpty(qp.getValue()) == true) && (org.apache.wicket.util.string.Strings.isEmpty(qp.getName()) == false)) {\n                if (org.apache.wicket.request.mapper.info.PageComponentInfo.parse(qp.getName()) != null) {\n                    it.remove();\n                    java.lang.String encryptedParameterValue = getCrypt().encryptUrlSafe(qp.getName());\n                    org.apache.wicket.request.Url.QueryParameter encryptedParameter = new org.apache.wicket.request.Url.QueryParameter(org.apache.wicket.core.request.mapper.CryptoMapper.ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER, encryptedParameterValue);\n                    encryptedUrl.getQueryParameters().add(0, encryptedParameter);\n                    break;\n                }\n            }\n        }\n        return encryptedUrl;\n    }\n\n    protected org.apache.wicket.request.Url decryptUrl(final org.apache.wicket.request.Request request, final org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = decryptEntireUrl(request, encryptedUrl);\n        if (url == null) {\n            if ((encryptedUrl.getSegments().size() > 0) && encryptedUrl.getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n                if ((request.getOriginalUrl().getSegments().size() > 0) && request.getOriginalUrl().getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n                    return null;\n                } else {\n                    return encryptedUrl;\n                }\n            }\n        }\n        if (url == null) {\n            url = decryptRequestListenerParameter(request, encryptedUrl);\n        }\n        return url;\n    }\n\n    protected org.apache.wicket.request.Url decryptEntireUrl(final org.apache.wicket.request.Request request, final org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n        java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n        if (encryptedSegments.isEmpty()) {\n            return null;\n        }\n        java.lang.String encryptedUrlString = encryptedSegments.get(0);\n        if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n            return null;\n        }\n        java.lang.String decryptedUrl;\n        try {\n            decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n        } catch (java.lang.Exception e) {\n            org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n            return null;\n        }\n        if (decryptedUrl == null) {\n            return null;\n        }\n        org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n        int originalNumberOfSegments = originalUrl.getSegments().size();\n        int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n        if (originalNumberOfSegments > 0) {\n            url.getSegments().add(originalUrl.getSegments().get(0));\n        }\n        org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n        int segNo = 1;\n        for (; segNo < encryptedNumberOfSegments; segNo++) {\n            if (segNo > originalNumberOfSegments) {\n                break;\n            }\n            java.lang.String next = generator.next();\n            java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n            if (!next.equals(encryptedSegment)) {\n                break;\n            }\n            url.getSegments().add(originalUrl.getSegments().get(segNo));\n        }\n        for (; segNo < encryptedNumberOfSegments; segNo++) {\n            url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n        }\n        url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n        url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n        return url;\n    }\n\n    protected org.apache.wicket.request.Url decryptRequestListenerParameter(final org.apache.wicket.request.Request request, org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(encryptedUrl);\n        url.getQueryParameters().clear();\n        for (org.apache.wicket.request.Url.QueryParameter qp : encryptedUrl.getQueryParameters()) {\n            if (org.apache.wicket.util.string.Strings.isEmpty(qp.getValue()) && (org.apache.wicket.util.string.Strings.isEmpty(qp.getName()) == false)) {\n                if (org.apache.wicket.request.mapper.info.PageComponentInfo.parse(qp.getName()) != null) {\n                    if (request.getOriginalUrl().getQueryParameter(qp.getName()) == null) {\n                        url.getQueryParameters().add(qp);\n                    } else {\n                        return null;\n                    }\n                }\n            } else if (org.apache.wicket.core.request.mapper.CryptoMapper.ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER.equals(qp.getName())) {\n                java.lang.String encryptedValue = qp.getValue();\n                if (org.apache.wicket.util.string.Strings.isEmpty(encryptedValue)) {\n                    url.getQueryParameters().add(qp);\n                } else {\n                    java.lang.String decryptedValue = null;\n                    try {\n                        decryptedValue = getCrypt().decryptUrlSafe(encryptedValue);\n                    } catch (java.lang.Exception e) {\n                        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting encrypted request listener query parameter\", e);\n                    }\n                    if (org.apache.wicket.util.string.Strings.isEmpty(decryptedValue)) {\n                        url.getQueryParameters().add(qp);\n                    } else {\n                        org.apache.wicket.request.Url.QueryParameter decryptedParamter = new org.apache.wicket.request.Url.QueryParameter(decryptedValue, \"\");\n                        url.getQueryParameters().add(0, decryptedParamter);\n                    }\n                }\n            } else {\n                url.getQueryParameters().add(qp);\n            }\n        }\n        return url;\n    }\n\n    private static class ApplicationCryptProvider implements org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> {\n        private final org.apache.wicket.Application application;\n\n        public ApplicationCryptProvider(final org.apache.wicket.Application application) {\n            this.application = application;\n        }\n\n        @java.lang.Override\n        public org.apache.wicket.util.crypt.ICrypt get() {\n            return application.getSecuritySettings().getCryptFactory().newCrypt();\n        }\n    }\n\n    public static class HashedSegmentGenerator {\n        private char[] characters;\n\n        private int hash = 0;\n\n        public HashedSegmentGenerator(java.lang.String string) {\n            characters = string.toCharArray();\n        }\n\n        public java.lang.String next() {\n            char a = characters[java.lang.Math.abs(hash % characters.length)];\n            hash++;\n            char b = characters[java.lang.Math.abs(hash % characters.length)];\n            hash++;\n            char c = characters[java.lang.Math.abs(hash % characters.length)];\n            java.lang.String segment = ((\"\" + a) + b) + c;\n            hash = hashString(segment);\n            segment += java.lang.String.format(\"%02x\", java.lang.Math.abs(hash % 256));\n            hash = hashString(segment);\n            return segment;\n        }\n\n        public int hashString(final java.lang.String str) {\n            int hash = 97;\n            for (char c : str.toCharArray()) {\n                int i = c;\n                hash = (47 * hash) + i;\n            }\n            return hash;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "protected org.apache.wicket.request.Url decryptUrl(final org.apache.wicket.request.Request request, final org.apache.wicket.request.Url encryptedUrl) {\n    org.apache.wicket.request.Url url = decryptEntireUrl(request, encryptedUrl);\n    if (url == null) {\n        if ((encryptedUrl.getSegments().size() > 0) && encryptedUrl.getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n            if ((request.getOriginalUrl().getSegments().size() > 0) && request.getOriginalUrl().getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n                return null;\n            } else {\n                return encryptedUrl;\n            }\n        }\n    }\n    if (url == null) {\n        url = decryptRequestListenerParameter(request, encryptedUrl);\n    }\n    return url;\n}",
            "src_parent": "public class CryptoMapper implements org.apache.wicket.request.mapper.IRequestMapperDelegate {\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.core.request.mapper.CryptoMapper.class);\n\n    private static final java.lang.String ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER = \"wicket\";\n\n    private final org.apache.wicket.request.IRequestMapper wrappedMapper;\n\n    private final org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> cryptProvider;\n\n    public CryptoMapper(final org.apache.wicket.request.IRequestMapper wrappedMapper, final org.apache.wicket.Application application) {\n        this(wrappedMapper, new org.apache.wicket.core.request.mapper.CryptoMapper.ApplicationCryptProvider(application));\n    }\n\n    public CryptoMapper(final org.apache.wicket.request.IRequestMapper wrappedMapper, final org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> cryptProvider) {\n        this.wrappedMapper = org.apache.wicket.util.lang.Args.notNull(wrappedMapper, \"wrappedMapper\");\n        this.cryptProvider = org.apache.wicket.util.lang.Args.notNull(cryptProvider, \"cryptProvider\");\n    }\n\n    @java.lang.Override\n    public int getCompatibilityScore(final org.apache.wicket.request.Request request) {\n        org.apache.wicket.request.Url decryptedUrl = decryptUrl(request, request.getUrl());\n        if (decryptedUrl == null) {\n            return 0;\n        }\n        org.apache.wicket.request.Request decryptedRequest = request.cloneWithUrl(decryptedUrl);\n        return wrappedMapper.getCompatibilityScore(decryptedRequest);\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.Url mapHandler(final org.apache.wicket.request.IRequestHandler requestHandler) {\n        final org.apache.wicket.request.Url url = wrappedMapper.mapHandler(requestHandler);\n        if (url == null) {\n            return null;\n        }\n        if (url.isFull()) {\n            return url;\n        }\n        return encryptUrl(url);\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.IRequestHandler mapRequest(final org.apache.wicket.request.Request request) {\n        org.apache.wicket.request.Url url = decryptUrl(request, request.getUrl());\n        if (url == null) {\n            return null;\n        }\n        org.apache.wicket.request.Request decryptedRequest = request.cloneWithUrl(url);\n        org.apache.wicket.request.IRequestHandler handler = wrappedMapper.mapRequest(decryptedRequest);\n        if (handler != null) {\n            handler = new org.apache.wicket.core.request.handler.RequestSettingRequestHandler(decryptedRequest, handler);\n        }\n        return handler;\n    }\n\n    protected final org.apache.wicket.util.crypt.ICrypt getCrypt() {\n        return cryptProvider.get();\n    }\n\n    @java.lang.Override\n    public final org.apache.wicket.request.IRequestMapper getDelegateMapper() {\n        return wrappedMapper;\n    }\n\n    protected org.apache.wicket.request.Url encryptUrl(final org.apache.wicket.request.Url url) {\n        if ((url.getSegments().size() > 0) && url.getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n            return encryptEntireUrl(url);\n        } else {\n            return encryptRequestListenerParameter(url);\n        }\n    }\n\n    protected org.apache.wicket.request.Url encryptEntireUrl(final org.apache.wicket.request.Url url) {\n        java.lang.String encryptedUrlString = getCrypt().encryptUrlSafe(url.toString());\n        org.apache.wicket.request.Url encryptedUrl = new org.apache.wicket.request.Url(url.getCharset());\n        encryptedUrl.getSegments().add(encryptedUrlString);\n        int numberOfSegments = url.getSegments().size() - 1;\n        org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n        for (int segNo = 0; segNo < numberOfSegments; segNo++) {\n            encryptedUrl.getSegments().add(generator.next());\n        }\n        return encryptedUrl;\n    }\n\n    protected org.apache.wicket.request.Url encryptRequestListenerParameter(final org.apache.wicket.request.Url url) {\n        org.apache.wicket.request.Url encryptedUrl = new org.apache.wicket.request.Url(url);\n        for (java.util.Iterator<org.apache.wicket.request.Url.QueryParameter> it = encryptedUrl.getQueryParameters().iterator(); it.hasNext();) {\n            org.apache.wicket.request.Url.QueryParameter qp = it.next();\n            if ((org.apache.wicket.util.string.Strings.isEmpty(qp.getValue()) == true) && (org.apache.wicket.util.string.Strings.isEmpty(qp.getName()) == false)) {\n                if (org.apache.wicket.request.mapper.info.PageComponentInfo.parse(qp.getName()) != null) {\n                    it.remove();\n                    java.lang.String encryptedParameterValue = getCrypt().encryptUrlSafe(qp.getName());\n                    org.apache.wicket.request.Url.QueryParameter encryptedParameter = new org.apache.wicket.request.Url.QueryParameter(org.apache.wicket.core.request.mapper.CryptoMapper.ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER, encryptedParameterValue);\n                    encryptedUrl.getQueryParameters().add(0, encryptedParameter);\n                    break;\n                }\n            }\n        }\n        return encryptedUrl;\n    }\n\n    protected org.apache.wicket.request.Url decryptUrl(final org.apache.wicket.request.Request request, final org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = decryptEntireUrl(request, encryptedUrl);\n        if (url == null) {\n            if ((encryptedUrl.getSegments().size() > 0) && encryptedUrl.getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n                if ((request.getOriginalUrl().getSegments().size() > 0) && request.getOriginalUrl().getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n                    return null;\n                } else {\n                    return encryptedUrl;\n                }\n            }\n        }\n        if (url == null) {\n            url = decryptRequestListenerParameter(request, encryptedUrl);\n        }\n        return url;\n    }\n\n    protected org.apache.wicket.request.Url decryptEntireUrl(final org.apache.wicket.request.Request request, final org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n        java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n        if (encryptedSegments.isEmpty()) {\n            return null;\n        }\n        java.lang.String encryptedUrlString = encryptedSegments.get(0);\n        if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n            return null;\n        }\n        java.lang.String decryptedUrl;\n        try {\n            decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n        } catch (java.lang.Exception e) {\n            org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n            return null;\n        }\n        if (decryptedUrl == null) {\n            return null;\n        }\n        org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n        int originalNumberOfSegments = originalUrl.getSegments().size();\n        int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n        if (originalNumberOfSegments > 0) {\n            url.getSegments().add(originalUrl.getSegments().get(0));\n        }\n        org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n        int segNo = 1;\n        for (; segNo < encryptedNumberOfSegments; segNo++) {\n            if (segNo > originalNumberOfSegments) {\n                break;\n            }\n            java.lang.String next = generator.next();\n            java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n            if (!next.equals(encryptedSegment)) {\n                break;\n            }\n            url.getSegments().add(originalUrl.getSegments().get(segNo));\n        }\n        for (; segNo < encryptedNumberOfSegments; segNo++) {\n            url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n        }\n        url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n        url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n        return url;\n    }\n\n    protected org.apache.wicket.request.Url decryptRequestListenerParameter(final org.apache.wicket.request.Request request, org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(encryptedUrl);\n        url.getQueryParameters().clear();\n        for (org.apache.wicket.request.Url.QueryParameter qp : encryptedUrl.getQueryParameters()) {\n            if (org.apache.wicket.util.string.Strings.isEmpty(qp.getValue()) && (org.apache.wicket.util.string.Strings.isEmpty(qp.getName()) == false)) {\n                if (org.apache.wicket.request.mapper.info.PageComponentInfo.parse(qp.getName()) != null) {\n                    if (request.getOriginalUrl().getQueryParameter(qp.getName()) == null) {\n                        url.getQueryParameters().add(qp);\n                    } else {\n                        return null;\n                    }\n                }\n            } else if (org.apache.wicket.core.request.mapper.CryptoMapper.ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER.equals(qp.getName())) {\n                java.lang.String encryptedValue = qp.getValue();\n                if (org.apache.wicket.util.string.Strings.isEmpty(encryptedValue)) {\n                    url.getQueryParameters().add(qp);\n                } else {\n                    java.lang.String decryptedValue = null;\n                    try {\n                        decryptedValue = getCrypt().decryptUrlSafe(encryptedValue);\n                    } catch (java.lang.Exception e) {\n                        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting encrypted request listener query parameter\", e);\n                    }\n                    if (org.apache.wicket.util.string.Strings.isEmpty(decryptedValue)) {\n                        url.getQueryParameters().add(qp);\n                    } else {\n                        org.apache.wicket.request.Url.QueryParameter decryptedParamter = new org.apache.wicket.request.Url.QueryParameter(decryptedValue, \"\");\n                        url.getQueryParameters().add(0, decryptedParamter);\n                    }\n                }\n            } else {\n                url.getQueryParameters().add(qp);\n            }\n        }\n        return url;\n    }\n\n    private static class ApplicationCryptProvider implements org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> {\n        private final org.apache.wicket.Application application;\n\n        public ApplicationCryptProvider(final org.apache.wicket.Application application) {\n            this.application = application;\n        }\n\n        @java.lang.Override\n        public org.apache.wicket.util.crypt.ICrypt get() {\n            return application.getSecuritySettings().getCryptFactory().newCrypt();\n        }\n    }\n\n    public static class HashedSegmentGenerator {\n        private char[] characters;\n\n        private int hash = 0;\n\n        public HashedSegmentGenerator(java.lang.String string) {\n            characters = string.toCharArray();\n        }\n\n        public java.lang.String next() {\n            char a = characters[java.lang.Math.abs(hash % characters.length)];\n            hash++;\n            char b = characters[java.lang.Math.abs(hash % characters.length)];\n            hash++;\n            char c = characters[java.lang.Math.abs(hash % characters.length)];\n            java.lang.String segment = ((\"\" + a) + b) + c;\n            hash = hashString(segment);\n            segment += java.lang.String.format(\"%02x\", java.lang.Math.abs(hash % 256));\n            hash = hashString(segment);\n            return segment;\n        }\n\n        public int hashString(final java.lang.String str) {\n            int hash = 97;\n            for (char c : str.toCharArray()) {\n                int i = c;\n                hash = (47 * hash) + i;\n            }\n            return hash;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "protected org.apache.wicket.request.Url decryptRequestListenerParameter(final org.apache.wicket.request.Request request, org.apache.wicket.request.Url encryptedUrl) {\n    org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(encryptedUrl);\n    url.getQueryParameters().clear();\n    for (org.apache.wicket.request.Url.QueryParameter qp : encryptedUrl.getQueryParameters()) {\n        if (org.apache.wicket.util.string.Strings.isEmpty(qp.getValue()) && (org.apache.wicket.util.string.Strings.isEmpty(qp.getName()) == false)) {\n            if (org.apache.wicket.request.mapper.info.PageComponentInfo.parse(qp.getName()) != null) {\n                if (request.getOriginalUrl().getQueryParameter(qp.getName()) == null) {\n                    url.getQueryParameters().add(qp);\n                } else {\n                    return null;\n                }\n            }\n        } else if (org.apache.wicket.core.request.mapper.CryptoMapper.ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER.equals(qp.getName())) {\n            java.lang.String encryptedValue = qp.getValue();\n            if (org.apache.wicket.util.string.Strings.isEmpty(encryptedValue)) {\n                url.getQueryParameters().add(qp);\n            } else {\n                java.lang.String decryptedValue = null;\n                try {\n                    decryptedValue = getCrypt().decryptUrlSafe(encryptedValue);\n                } catch (java.lang.Exception e) {\n                    org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting encrypted request listener query parameter\", e);\n                }\n                if (org.apache.wicket.util.string.Strings.isEmpty(decryptedValue)) {\n                    url.getQueryParameters().add(qp);\n                } else {\n                    org.apache.wicket.request.Url.QueryParameter decryptedParamter = new org.apache.wicket.request.Url.QueryParameter(decryptedValue, \"\");\n                    url.getQueryParameters().add(0, decryptedParamter);\n                }\n            }\n        } else {\n            url.getQueryParameters().add(qp);\n        }\n    }\n    return url;\n}",
            "src_parent": "public class CryptoMapper implements org.apache.wicket.request.mapper.IRequestMapperDelegate {\n    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.wicket.core.request.mapper.CryptoMapper.class);\n\n    private static final java.lang.String ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER = \"wicket\";\n\n    private final org.apache.wicket.request.IRequestMapper wrappedMapper;\n\n    private final org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> cryptProvider;\n\n    public CryptoMapper(final org.apache.wicket.request.IRequestMapper wrappedMapper, final org.apache.wicket.Application application) {\n        this(wrappedMapper, new org.apache.wicket.core.request.mapper.CryptoMapper.ApplicationCryptProvider(application));\n    }\n\n    public CryptoMapper(final org.apache.wicket.request.IRequestMapper wrappedMapper, final org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> cryptProvider) {\n        this.wrappedMapper = org.apache.wicket.util.lang.Args.notNull(wrappedMapper, \"wrappedMapper\");\n        this.cryptProvider = org.apache.wicket.util.lang.Args.notNull(cryptProvider, \"cryptProvider\");\n    }\n\n    @java.lang.Override\n    public int getCompatibilityScore(final org.apache.wicket.request.Request request) {\n        org.apache.wicket.request.Url decryptedUrl = decryptUrl(request, request.getUrl());\n        if (decryptedUrl == null) {\n            return 0;\n        }\n        org.apache.wicket.request.Request decryptedRequest = request.cloneWithUrl(decryptedUrl);\n        return wrappedMapper.getCompatibilityScore(decryptedRequest);\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.Url mapHandler(final org.apache.wicket.request.IRequestHandler requestHandler) {\n        final org.apache.wicket.request.Url url = wrappedMapper.mapHandler(requestHandler);\n        if (url == null) {\n            return null;\n        }\n        if (url.isFull()) {\n            return url;\n        }\n        return encryptUrl(url);\n    }\n\n    @java.lang.Override\n    public org.apache.wicket.request.IRequestHandler mapRequest(final org.apache.wicket.request.Request request) {\n        org.apache.wicket.request.Url url = decryptUrl(request, request.getUrl());\n        if (url == null) {\n            return null;\n        }\n        org.apache.wicket.request.Request decryptedRequest = request.cloneWithUrl(url);\n        org.apache.wicket.request.IRequestHandler handler = wrappedMapper.mapRequest(decryptedRequest);\n        if (handler != null) {\n            handler = new org.apache.wicket.core.request.handler.RequestSettingRequestHandler(decryptedRequest, handler);\n        }\n        return handler;\n    }\n\n    protected final org.apache.wicket.util.crypt.ICrypt getCrypt() {\n        return cryptProvider.get();\n    }\n\n    @java.lang.Override\n    public final org.apache.wicket.request.IRequestMapper getDelegateMapper() {\n        return wrappedMapper;\n    }\n\n    protected org.apache.wicket.request.Url encryptUrl(final org.apache.wicket.request.Url url) {\n        if ((url.getSegments().size() > 0) && url.getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n            return encryptEntireUrl(url);\n        } else {\n            return encryptRequestListenerParameter(url);\n        }\n    }\n\n    protected org.apache.wicket.request.Url encryptEntireUrl(final org.apache.wicket.request.Url url) {\n        java.lang.String encryptedUrlString = getCrypt().encryptUrlSafe(url.toString());\n        org.apache.wicket.request.Url encryptedUrl = new org.apache.wicket.request.Url(url.getCharset());\n        encryptedUrl.getSegments().add(encryptedUrlString);\n        int numberOfSegments = url.getSegments().size() - 1;\n        org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n        for (int segNo = 0; segNo < numberOfSegments; segNo++) {\n            encryptedUrl.getSegments().add(generator.next());\n        }\n        return encryptedUrl;\n    }\n\n    protected org.apache.wicket.request.Url encryptRequestListenerParameter(final org.apache.wicket.request.Url url) {\n        org.apache.wicket.request.Url encryptedUrl = new org.apache.wicket.request.Url(url);\n        for (java.util.Iterator<org.apache.wicket.request.Url.QueryParameter> it = encryptedUrl.getQueryParameters().iterator(); it.hasNext();) {\n            org.apache.wicket.request.Url.QueryParameter qp = it.next();\n            if ((org.apache.wicket.util.string.Strings.isEmpty(qp.getValue()) == true) && (org.apache.wicket.util.string.Strings.isEmpty(qp.getName()) == false)) {\n                if (org.apache.wicket.request.mapper.info.PageComponentInfo.parse(qp.getName()) != null) {\n                    it.remove();\n                    java.lang.String encryptedParameterValue = getCrypt().encryptUrlSafe(qp.getName());\n                    org.apache.wicket.request.Url.QueryParameter encryptedParameter = new org.apache.wicket.request.Url.QueryParameter(org.apache.wicket.core.request.mapper.CryptoMapper.ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER, encryptedParameterValue);\n                    encryptedUrl.getQueryParameters().add(0, encryptedParameter);\n                    break;\n                }\n            }\n        }\n        return encryptedUrl;\n    }\n\n    protected org.apache.wicket.request.Url decryptUrl(final org.apache.wicket.request.Request request, final org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = decryptEntireUrl(request, encryptedUrl);\n        if (url == null) {\n            if ((encryptedUrl.getSegments().size() > 0) && encryptedUrl.getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n                if ((request.getOriginalUrl().getSegments().size() > 0) && request.getOriginalUrl().getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n                    return null;\n                } else {\n                    return encryptedUrl;\n                }\n            }\n        }\n        if (url == null) {\n            url = decryptRequestListenerParameter(request, encryptedUrl);\n        }\n        return url;\n    }\n\n    protected org.apache.wicket.request.Url decryptEntireUrl(final org.apache.wicket.request.Request request, final org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n        java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n        if (encryptedSegments.isEmpty()) {\n            return null;\n        }\n        java.lang.String encryptedUrlString = encryptedSegments.get(0);\n        if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n            return null;\n        }\n        java.lang.String decryptedUrl;\n        try {\n            decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n        } catch (java.lang.Exception e) {\n            org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n            return null;\n        }\n        if (decryptedUrl == null) {\n            return null;\n        }\n        org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n        int originalNumberOfSegments = originalUrl.getSegments().size();\n        int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n        if (originalNumberOfSegments > 0) {\n            url.getSegments().add(originalUrl.getSegments().get(0));\n        }\n        org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n        int segNo = 1;\n        for (; segNo < encryptedNumberOfSegments; segNo++) {\n            if (segNo > originalNumberOfSegments) {\n                break;\n            }\n            java.lang.String next = generator.next();\n            java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n            if (!next.equals(encryptedSegment)) {\n                break;\n            }\n            url.getSegments().add(originalUrl.getSegments().get(segNo));\n        }\n        for (; segNo < encryptedNumberOfSegments; segNo++) {\n            url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n        }\n        url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n        url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n        return url;\n    }\n\n    protected org.apache.wicket.request.Url decryptRequestListenerParameter(final org.apache.wicket.request.Request request, org.apache.wicket.request.Url encryptedUrl) {\n        org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(encryptedUrl);\n        url.getQueryParameters().clear();\n        for (org.apache.wicket.request.Url.QueryParameter qp : encryptedUrl.getQueryParameters()) {\n            if (org.apache.wicket.util.string.Strings.isEmpty(qp.getValue()) && (org.apache.wicket.util.string.Strings.isEmpty(qp.getName()) == false)) {\n                if (org.apache.wicket.request.mapper.info.PageComponentInfo.parse(qp.getName()) != null) {\n                    if (request.getOriginalUrl().getQueryParameter(qp.getName()) == null) {\n                        url.getQueryParameters().add(qp);\n                    } else {\n                        return null;\n                    }\n                }\n            } else if (org.apache.wicket.core.request.mapper.CryptoMapper.ENCRYPTED_PAGE_COMPONENT_INFO_PARAMETER.equals(qp.getName())) {\n                java.lang.String encryptedValue = qp.getValue();\n                if (org.apache.wicket.util.string.Strings.isEmpty(encryptedValue)) {\n                    url.getQueryParameters().add(qp);\n                } else {\n                    java.lang.String decryptedValue = null;\n                    try {\n                        decryptedValue = getCrypt().decryptUrlSafe(encryptedValue);\n                    } catch (java.lang.Exception e) {\n                        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting encrypted request listener query parameter\", e);\n                    }\n                    if (org.apache.wicket.util.string.Strings.isEmpty(decryptedValue)) {\n                        url.getQueryParameters().add(qp);\n                    } else {\n                        org.apache.wicket.request.Url.QueryParameter decryptedParamter = new org.apache.wicket.request.Url.QueryParameter(decryptedValue, \"\");\n                        url.getQueryParameters().add(0, decryptedParamter);\n                    }\n                }\n            } else {\n                url.getQueryParameters().add(qp);\n            }\n        }\n        return url;\n    }\n\n    private static class ApplicationCryptProvider implements org.apache.wicket.util.IProvider<org.apache.wicket.util.crypt.ICrypt> {\n        private final org.apache.wicket.Application application;\n\n        public ApplicationCryptProvider(final org.apache.wicket.Application application) {\n            this.application = application;\n        }\n\n        @java.lang.Override\n        public org.apache.wicket.util.crypt.ICrypt get() {\n            return application.getSecuritySettings().getCryptFactory().newCrypt();\n        }\n    }\n\n    public static class HashedSegmentGenerator {\n        private char[] characters;\n\n        private int hash = 0;\n\n        public HashedSegmentGenerator(java.lang.String string) {\n            characters = string.toCharArray();\n        }\n\n        public java.lang.String next() {\n            char a = characters[java.lang.Math.abs(hash % characters.length)];\n            hash++;\n            char b = characters[java.lang.Math.abs(hash % characters.length)];\n            hash++;\n            char c = characters[java.lang.Math.abs(hash % characters.length)];\n            java.lang.String segment = ((\"\" + a) + b) + c;\n            hash = hashString(segment);\n            segment += java.lang.String.format(\"%02x\", java.lang.Math.abs(hash % 256));\n            hash = hashString(segment);\n            return segment;\n        }\n\n        public int hashString(final java.lang.String str) {\n            int hash = 97;\n            for (char c : str.toCharArray()) {\n                int i = c;\n                hash = (47 * hash) + i;\n            }\n            return hash;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.wicket.request.Url decryptedUrl = decryptUrl(request, request.getUrl())",
            "src_parent": "{\n    org.apache.wicket.request.Url decryptedUrl = decryptUrl(request, request.getUrl());\n    if (decryptedUrl == null) {\n        return 0;\n    }\n    org.apache.wicket.request.Request decryptedRequest = request.cloneWithUrl(decryptedUrl);\n    return wrappedMapper.getCompatibilityScore(decryptedRequest);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (decryptedUrl == null) {\n    return 0;\n}",
            "src_parent": "{\n    org.apache.wicket.request.Url decryptedUrl = decryptUrl(request, request.getUrl());\n    if (decryptedUrl == null) {\n        return 0;\n    }\n    org.apache.wicket.request.Request decryptedRequest = request.cloneWithUrl(decryptedUrl);\n    return wrappedMapper.getCompatibilityScore(decryptedRequest);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.wicket.request.Request decryptedRequest = request.cloneWithUrl(decryptedUrl)",
            "src_parent": "{\n    org.apache.wicket.request.Url decryptedUrl = decryptUrl(request, request.getUrl());\n    if (decryptedUrl == null) {\n        return 0;\n    }\n    org.apache.wicket.request.Request decryptedRequest = request.cloneWithUrl(decryptedUrl);\n    return wrappedMapper.getCompatibilityScore(decryptedRequest);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "url.getSegments().size() - 1",
            "src_parent": "int numberOfSegments = url.getSegments().size() - 1",
            "src_parent_type": "LocalVariable",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "encryptedSegments.isEmpty()",
            "src_parent": "if (encryptedSegments.isEmpty()) {\n    return null;\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "return null",
            "src_parent": "{\n    return null;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "return null",
            "src_parent": "{\n    org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n    return null;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "url.getSegments()",
            "src_parent": "url.getSegments().add(originalUrl.getSegments().get(segNo))",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "null",
            "src_parent": "return null",
            "src_parent_type": "Return",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "originalUrl.getSegments()",
            "src_parent": "originalUrl.getSegments().get(segNo)",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "segNo",
            "src_parent": "originalUrl.getSegments().get(segNo)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (encryptedSegments.isEmpty()) {\n    return null;\n}",
            "dst_parent": "{\n    org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n    java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n    if (encryptedSegments.isEmpty()) {\n        return null;\n    }\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl;\n    try {\n        decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    } catch (java.lang.Exception e) {\n        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n        return null;\n    }\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    if (originalNumberOfSegments > 0) {\n        url.getSegments().add(originalUrl.getSegments().get(0));\n    }\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n    return url;\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (encryptedUrl.getSegments().isEmpty()) {\n    return encryptedUrl;\n}",
            "src_parent": "{\n    if (encryptedUrl.getSegments().isEmpty()) {\n        return encryptedUrl;\n    }\n    java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n    org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n    try {\n        java.lang.String encryptedUrlString = encryptedSegments.get(0);\n        if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n            return null;\n        }\n        java.lang.String decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n        if (decryptedUrl == null) {\n            return null;\n        }\n        org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n        int originalNumberOfSegments = originalUrl.getSegments().size();\n        int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n        org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n        int segNo = 1;\n        for (; segNo < encryptedNumberOfSegments; segNo++) {\n            if (segNo > originalNumberOfSegments) {\n                break;\n            }\n            java.lang.String next = generator.next();\n            java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n            if (!next.equals(encryptedSegment)) {\n                break;\n            }\n            url.getSegments().add(originalUrl.getSegments().get(segNo - 1));\n        }\n        for (; segNo < encryptedNumberOfSegments; segNo++) {\n            url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n        }\n        url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n        url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n    } catch (java.lang.Exception e) {\n        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n        url = null;\n    }\n    return url;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments()",
            "dst_parent": "{\n    org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n    java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n    if (encryptedSegments.isEmpty()) {\n        return null;\n    }\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl;\n    try {\n        decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    } catch (java.lang.Exception e) {\n        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n        return null;\n    }\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    if (originalNumberOfSegments > 0) {\n        url.getSegments().add(originalUrl.getSegments().get(0));\n    }\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n    return url;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments()",
            "src_parent": "{\n    if (encryptedUrl.getSegments().isEmpty()) {\n        return encryptedUrl;\n    }\n    java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n    org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n    try {\n        java.lang.String encryptedUrlString = encryptedSegments.get(0);\n        if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n            return null;\n        }\n        java.lang.String decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n        if (decryptedUrl == null) {\n            return null;\n        }\n        org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n        int originalNumberOfSegments = originalUrl.getSegments().size();\n        int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n        org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n        int segNo = 1;\n        for (; segNo < encryptedNumberOfSegments; segNo++) {\n            if (segNo > originalNumberOfSegments) {\n                break;\n            }\n            java.lang.String next = generator.next();\n            java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n            if (!next.equals(encryptedSegment)) {\n                break;\n            }\n            url.getSegments().add(originalUrl.getSegments().get(segNo - 1));\n        }\n        for (; segNo < encryptedNumberOfSegments; segNo++) {\n            url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n        }\n        url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n        url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n    } catch (java.lang.Exception e) {\n        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n        url = null;\n    }\n    return url;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return url",
            "dst_parent": "{\n    org.apache.wicket.request.Url url = decryptEntireUrl(request, encryptedUrl);\n    if (url == null) {\n        if ((encryptedUrl.getSegments().size() > 0) && encryptedUrl.getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n            if ((request.getOriginalUrl().getSegments().size() > 0) && request.getOriginalUrl().getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())) {\n                return null;\n            } else {\n                return encryptedUrl;\n            }\n        }\n    }\n    if (url == null) {\n        url = decryptRequestListenerParameter(request, encryptedUrl);\n    }\n    return url;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return url",
            "src_parent": "{\n    return url;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String encryptedUrlString = encryptedSegments.get(0)",
            "dst_parent": "{\n    org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n    java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n    if (encryptedSegments.isEmpty()) {\n        return null;\n    }\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl;\n    try {\n        decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    } catch (java.lang.Exception e) {\n        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n        return null;\n    }\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    if (originalNumberOfSegments > 0) {\n        url.getSegments().add(originalUrl.getSegments().get(0));\n    }\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n    return url;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.lang.String encryptedUrlString = encryptedSegments.get(0)",
            "src_parent": "{\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo - 1));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n    return null;\n}",
            "dst_parent": "{\n    org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n    java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n    if (encryptedSegments.isEmpty()) {\n        return null;\n    }\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl;\n    try {\n        decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    } catch (java.lang.Exception e) {\n        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n        return null;\n    }\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    if (originalNumberOfSegments > 0) {\n        url.getSegments().add(originalUrl.getSegments().get(0));\n    }\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n    return url;\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n    return null;\n}",
            "src_parent": "{\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo - 1));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (decryptedUrl == null) {\n    return null;\n}",
            "dst_parent": "{\n    org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n    java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n    if (encryptedSegments.isEmpty()) {\n        return null;\n    }\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl;\n    try {\n        decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    } catch (java.lang.Exception e) {\n        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n        return null;\n    }\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    if (originalNumberOfSegments > 0) {\n        url.getSegments().add(originalUrl.getSegments().get(0));\n    }\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n    return url;\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (decryptedUrl == null) {\n    return null;\n}",
            "src_parent": "{\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo - 1));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset())",
            "dst_parent": "{\n    org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n    java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n    if (encryptedSegments.isEmpty()) {\n        return null;\n    }\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl;\n    try {\n        decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    } catch (java.lang.Exception e) {\n        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n        return null;\n    }\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    if (originalNumberOfSegments > 0) {\n        url.getSegments().add(originalUrl.getSegments().get(0));\n    }\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n    return url;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset())",
            "src_parent": "{\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo - 1));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "int originalNumberOfSegments = originalUrl.getSegments().size()",
            "dst_parent": "{\n    org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n    java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n    if (encryptedSegments.isEmpty()) {\n        return null;\n    }\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl;\n    try {\n        decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    } catch (java.lang.Exception e) {\n        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n        return null;\n    }\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    if (originalNumberOfSegments > 0) {\n        url.getSegments().add(originalUrl.getSegments().get(0));\n    }\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n    return url;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "int originalNumberOfSegments = originalUrl.getSegments().size()",
            "src_parent": "{\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo - 1));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "int encryptedNumberOfSegments = encryptedUrl.getSegments().size()",
            "dst_parent": "{\n    org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n    java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n    if (encryptedSegments.isEmpty()) {\n        return null;\n    }\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl;\n    try {\n        decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    } catch (java.lang.Exception e) {\n        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n        return null;\n    }\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    if (originalNumberOfSegments > 0) {\n        url.getSegments().add(originalUrl.getSegments().get(0));\n    }\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n    return url;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "int encryptedNumberOfSegments = encryptedUrl.getSegments().size()",
            "src_parent": "{\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo - 1));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString)",
            "dst_parent": "{\n    org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n    java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n    if (encryptedSegments.isEmpty()) {\n        return null;\n    }\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl;\n    try {\n        decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    } catch (java.lang.Exception e) {\n        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n        return null;\n    }\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    if (originalNumberOfSegments > 0) {\n        url.getSegments().add(originalUrl.getSegments().get(0));\n    }\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n    return url;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString)",
            "src_parent": "{\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo - 1));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "int segNo = 1",
            "dst_parent": "{\n    org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n    java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n    if (encryptedSegments.isEmpty()) {\n        return null;\n    }\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl;\n    try {\n        decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    } catch (java.lang.Exception e) {\n        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n        return null;\n    }\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    if (originalNumberOfSegments > 0) {\n        url.getSegments().add(originalUrl.getSegments().get(0));\n    }\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n    return url;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "int segNo = 1",
            "src_parent": "{\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo - 1));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "for (; segNo < encryptedNumberOfSegments; segNo++) {\n    if (segNo > originalNumberOfSegments) {\n        break;\n    }\n    java.lang.String next = generator.next();\n    java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n    if (!next.equals(encryptedSegment)) {\n        break;\n    }\n    url.getSegments().add(originalUrl.getSegments().get(segNo));\n}",
            "dst_parent": "{\n    org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n    java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n    if (encryptedSegments.isEmpty()) {\n        return null;\n    }\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl;\n    try {\n        decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    } catch (java.lang.Exception e) {\n        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n        return null;\n    }\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    if (originalNumberOfSegments > 0) {\n        url.getSegments().add(originalUrl.getSegments().get(0));\n    }\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n    return url;\n}",
            "dst_parent_type": "Block",
            "dst_type": "For",
            "operator": "MOV",
            "src": "for (; segNo < encryptedNumberOfSegments; segNo++) {\n    if (segNo > originalNumberOfSegments) {\n        break;\n    }\n    java.lang.String next = generator.next();\n    java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n    if (!next.equals(encryptedSegment)) {\n        break;\n    }\n    url.getSegments().add(originalUrl.getSegments().get(segNo - 1));\n}",
            "src_parent": "{\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo - 1));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n}",
            "src_parent_type": "Block",
            "src_type": "For"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "for (; segNo < encryptedNumberOfSegments; segNo++) {\n    url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n}",
            "dst_parent": "{\n    org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n    java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n    if (encryptedSegments.isEmpty()) {\n        return null;\n    }\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl;\n    try {\n        decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    } catch (java.lang.Exception e) {\n        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n        return null;\n    }\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    if (originalNumberOfSegments > 0) {\n        url.getSegments().add(originalUrl.getSegments().get(0));\n    }\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n    return url;\n}",
            "dst_parent_type": "Block",
            "dst_type": "For",
            "operator": "MOV",
            "src": "for (; segNo < encryptedNumberOfSegments; segNo++) {\n    url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n}",
            "src_parent": "{\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo - 1));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n}",
            "src_parent_type": "Block",
            "src_type": "For"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "url.getQueryParameters().addAll(originalUrl.getQueryParameters())",
            "dst_parent": "{\n    org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n    java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n    if (encryptedSegments.isEmpty()) {\n        return null;\n    }\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl;\n    try {\n        decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    } catch (java.lang.Exception e) {\n        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n        return null;\n    }\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    if (originalNumberOfSegments > 0) {\n        url.getSegments().add(originalUrl.getSegments().get(0));\n    }\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n    return url;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "url.getQueryParameters().addAll(originalUrl.getQueryParameters())",
            "src_parent": "{\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo - 1));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "url.getQueryParameters().addAll(encryptedUrl.getQueryParameters())",
            "dst_parent": "{\n    org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(request.getCharset());\n    java.util.List<java.lang.String> encryptedSegments = encryptedUrl.getSegments();\n    if (encryptedSegments.isEmpty()) {\n        return null;\n    }\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl;\n    try {\n        decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    } catch (java.lang.Exception e) {\n        org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n        return null;\n    }\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    if (originalNumberOfSegments > 0) {\n        url.getSegments().add(originalUrl.getSegments().get(0));\n    }\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n    return url;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "url.getQueryParameters().addAll(encryptedUrl.getQueryParameters())",
            "src_parent": "{\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo - 1));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String",
            "dst_parent": "java.lang.String decryptedUrl",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "java.lang.String",
            "src_parent": "java.lang.String decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString)",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "catch (java.lang.Exception e) {\n    org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n    return null;\n}",
            "dst_parent": "try {\n    decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n} catch (java.lang.Exception e) {\n    org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n    return null;\n}",
            "dst_parent_type": "Try",
            "dst_type": "Catch",
            "operator": "MOV",
            "src": "catch (java.lang.Exception e) {\n    org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n    url = null;\n}",
            "src_parent": "try {\n    java.lang.String encryptedUrlString = encryptedSegments.get(0);\n    if (org.apache.wicket.util.string.Strings.isEmpty(encryptedUrlString)) {\n        return null;\n    }\n    java.lang.String decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString);\n    if (decryptedUrl == null) {\n        return null;\n    }\n    org.apache.wicket.request.Url originalUrl = org.apache.wicket.request.Url.parse(decryptedUrl, request.getCharset());\n    int originalNumberOfSegments = originalUrl.getSegments().size();\n    int encryptedNumberOfSegments = encryptedUrl.getSegments().size();\n    org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator generator = new org.apache.wicket.core.request.mapper.CryptoMapper.HashedSegmentGenerator(encryptedUrlString);\n    int segNo = 1;\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        if (segNo > originalNumberOfSegments) {\n            break;\n        }\n        java.lang.String next = generator.next();\n        java.lang.String encryptedSegment = encryptedSegments.get(segNo);\n        if (!next.equals(encryptedSegment)) {\n            break;\n        }\n        url.getSegments().add(originalUrl.getSegments().get(segNo - 1));\n    }\n    for (; segNo < encryptedNumberOfSegments; segNo++) {\n        url.getSegments().add(encryptedUrl.getSegments().get(segNo));\n    }\n    url.getQueryParameters().addAll(originalUrl.getQueryParameters());\n    url.getQueryParameters().addAll(encryptedUrl.getQueryParameters());\n} catch (java.lang.Exception e) {\n    org.apache.wicket.core.request.mapper.CryptoMapper.log.error(\"Error decrypting URL\", e);\n    url = null;\n}",
            "src_parent_type": "Try",
            "src_type": "Catch"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "getCrypt().decryptUrlSafe(encryptedUrlString)",
            "dst_parent": "decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString)",
            "dst_parent_type": "Assignment",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "getCrypt().decryptUrlSafe(encryptedUrlString)",
            "src_parent": "java.lang.String decryptedUrl = getCrypt().decryptUrlSafe(encryptedUrlString)",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "url.getSegments().size()",
            "dst_parent": "(url.getSegments().size() > 0)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "url.getSegments().size()",
            "src_parent": "int numberOfSegments = url.getSegments().size()",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "url.getSegments().get(0)",
            "dst_parent": "url.getSegments().get(0).equals(org.apache.wicket.Application.get().getMapperContext().getNamespace())",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "url.getSegments().isEmpty()",
            "src_parent": "if (url.getSegments().isEmpty()) {\n    return url;\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "url.getSegments()",
            "dst_parent": "url.getSegments().add(originalUrl.getSegments().get(0))",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "url.getSegments()",
            "src_parent": "url.getSegments().add(originalUrl.getSegments().get(segNo - 1))",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "originalUrl.getSegments()",
            "dst_parent": "originalUrl.getSegments().get(0)",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "originalUrl.getSegments()",
            "src_parent": "originalUrl.getSegments().get(segNo - 1)",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "encryptedUrl.getSegments().size()",
            "dst_parent": "(encryptedUrl.getSegments().size() > 0)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "encryptedUrl.getSegments().isEmpty()",
            "src_parent": "if (encryptedUrl.getSegments().isEmpty()) {\n    return encryptedUrl;\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return encryptedUrl",
            "dst_parent": "{\n    return encryptedUrl;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return encryptedUrl",
            "src_parent": "{\n    return encryptedUrl;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        }
      ],
      "file_name": "CryptoMapper"
    }
  ],
  "id": "wicket_ded3c583"
}