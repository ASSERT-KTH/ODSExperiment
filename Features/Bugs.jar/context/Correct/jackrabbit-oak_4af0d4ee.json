{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "rootcount--",
            "src_parent": "{\n    rootcount--;\n}",
            "src_parent_type": "Block",
            "src_type": "UnaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "com.google.common.base.Preconditions.checkState(length <= buffer.length)",
            "src_parent": "{\n    int refcount = segment.getRefCount();\n    int rootcount = roots.size();\n    buffer[Segment.ROOT_COUNT_OFFSET] = ((byte) (rootcount >> 8));\n    buffer[Segment.ROOT_COUNT_OFFSET + 1] = ((byte) (rootcount));\n    int blobrefcount = blobrefs.size();\n    buffer[Segment.BLOBREF_COUNT_OFFSET] = ((byte) (blobrefcount >> 8));\n    buffer[Segment.BLOBREF_COUNT_OFFSET + 1] = ((byte) (blobrefcount));\n    length = org.apache.jackrabbit.oak.plugins.segment.SegmentWriter.align((((refcount * 16) + (rootcount * 3)) + (blobrefcount * 2)) + length, 16);\n    com.google.common.base.Preconditions.checkState(length <= buffer.length);\n    int pos = refcount * 16;\n    if ((pos + length) <= buffer.length) {\n        java.lang.System.arraycopy(buffer, 0, buffer, buffer.length - length, pos);\n        pos += buffer.length - length;\n    } else {\n        length = buffer.length;\n    }\n    for (java.util.Map.Entry<org.apache.jackrabbit.oak.plugins.segment.RecordId, org.apache.jackrabbit.oak.plugins.segment.RecordType> entry : roots.entrySet()) {\n        int offset = entry.getKey().getOffset();\n        buffer[pos++] = ((byte) (entry.getValue().ordinal()));\n        buffer[pos++] = ((byte) (offset >> (8 + Segment.RECORD_ALIGN_BITS)));\n        buffer[pos++] = ((byte) (offset >> Segment.RECORD_ALIGN_BITS));\n    }\n    for (org.apache.jackrabbit.oak.plugins.segment.RecordId blobref : blobrefs) {\n        int offset = blobref.getOffset();\n        buffer[pos++] = ((byte) (offset >> (8 + Segment.RECORD_ALIGN_BITS)));\n        buffer[pos++] = ((byte) (offset >> Segment.RECORD_ALIGN_BITS));\n    }\n    org.apache.jackrabbit.oak.plugins.segment.SegmentId id = segment.getSegmentId();\n    org.apache.jackrabbit.oak.plugins.segment.SegmentWriter.log.debug(\"Writing data segment {} ({} bytes)\", id, length);\n    store.writeSegment(id, buffer, buffer.length - length, length);\n    java.nio.ByteBuffer data;\n    if ((buffer.length - length) > 4096) {\n        data = java.nio.ByteBuffer.allocate(length);\n        data.put(buffer, buffer.length - length, length);\n        data.rewind();\n    } else {\n        data = java.nio.ByteBuffer.wrap(buffer, buffer.length - length, length);\n    }\n    tracker.setSegment(id, new org.apache.jackrabbit.oak.plugins.segment.Segment(tracker, id, data));\n    buffer = org.apache.jackrabbit.oak.plugins.segment.SegmentWriter.createNewBuffer();\n    roots.clear();\n    blobrefs.clear();\n    length = 0;\n    position = buffer.length;\n    segment = new org.apache.jackrabbit.oak.plugins.segment.Segment(tracker, buffer);\n    segment.getSegmentId().setSegment(segment);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.util.Set<org.apache.jackrabbit.oak.plugins.segment.RecordId> notRoots = new java.util.HashSet<org.apache.jackrabbit.oak.plugins.segment.RecordId>()",
            "src_parent": "{\n    refcount -= idcount;\n    java.util.Set<org.apache.jackrabbit.oak.plugins.segment.SegmentId> segmentIds = com.google.common.collect.Sets.newIdentityHashSet();\n    java.util.Set<org.apache.jackrabbit.oak.plugins.segment.RecordId> notRoots = new java.util.HashSet<org.apache.jackrabbit.oak.plugins.segment.RecordId>();\n    for (org.apache.jackrabbit.oak.plugins.segment.RecordId recordId : ids) {\n        org.apache.jackrabbit.oak.plugins.segment.SegmentId segmentId = recordId.getSegmentId();\n        if (segmentId != segment.getSegmentId()) {\n            segmentIds.add(segmentId);\n        } else if (roots.containsKey(recordId)) {\n            notRoots.add(recordId);\n        }\n    }\n    rootcount -= notRoots.size();\n    if (!segmentIds.isEmpty()) {\n        for (int refid = 1; refid < refcount; refid++) {\n            segmentIds.remove(segment.getRefId(refid));\n        }\n        refcount += segmentIds.size();\n    }\n    headerSize = ((refcount * 16) + (rootcount * 3)) + (blobrefcount * 2);\n    segmentSize = org.apache.jackrabbit.oak.plugins.segment.SegmentWriter.align((headerSize + recordSize) + length, 16);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "rootcount -= notRoots.size()",
            "src_parent": "{\n    refcount -= idcount;\n    java.util.Set<org.apache.jackrabbit.oak.plugins.segment.SegmentId> segmentIds = com.google.common.collect.Sets.newIdentityHashSet();\n    java.util.Set<org.apache.jackrabbit.oak.plugins.segment.RecordId> notRoots = new java.util.HashSet<org.apache.jackrabbit.oak.plugins.segment.RecordId>();\n    for (org.apache.jackrabbit.oak.plugins.segment.RecordId recordId : ids) {\n        org.apache.jackrabbit.oak.plugins.segment.SegmentId segmentId = recordId.getSegmentId();\n        if (segmentId != segment.getSegmentId()) {\n            segmentIds.add(segmentId);\n        } else if (roots.containsKey(recordId)) {\n            notRoots.add(recordId);\n        }\n    }\n    rootcount -= notRoots.size();\n    if (!segmentIds.isEmpty()) {\n        for (int refid = 1; refid < refcount; refid++) {\n            segmentIds.remove(segment.getRefId(refid));\n        }\n        refcount += segmentIds.size();\n    }\n    headerSize = ((refcount * 16) + (rootcount * 3)) + (blobrefcount * 2);\n    segmentSize = org.apache.jackrabbit.oak.plugins.segment.SegmentWriter.align((headerSize + recordSize) + length, 16);\n}",
            "src_parent_type": "Block",
            "src_type": "OperatorAssignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "notRoots.add(recordId)",
            "src_parent": "{\n    notRoots.add(recordId);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "SegmentWriter"
    }
  ],
  "id": "jackrabbit-oak_4af0d4ee"
}