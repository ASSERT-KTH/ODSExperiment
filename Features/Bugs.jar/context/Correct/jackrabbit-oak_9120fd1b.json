{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "boolean beforeChildStillExists = false",
            "src_parent": "{\n    boolean beforeChildStillExists = false;\n    for (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry entry : afterTemplate.getChildNodeEntries(afterId)) {\n        java.lang.String childName = entry.getName();\n        beforeChildStillExists |= childName.equals(beforeChildName);\n        org.apache.jackrabbit.oak.spi.state.NodeState afterChild = entry.getNodeState();\n        if (beforeChildName.equals(childName)) {\n            org.apache.jackrabbit.oak.spi.state.NodeState beforeChild = beforeTemplate.getChildNode(beforeChildName, beforeId);\n            if (beforeChild.exists()) {\n                if ((!fastEquals(afterChild, beforeChild)) && (!diff.childNodeChanged(childName, beforeChild, afterChild))) {\n                    return false;\n                }\n            } else if (!diff.childNodeAdded(childName, afterChild)) {\n                return false;\n            }\n        } else if (!diff.childNodeAdded(childName, afterChild)) {\n            return false;\n        }\n    }\n    if (!beforeChildStillExists) {\n        org.apache.jackrabbit.oak.spi.state.NodeState beforeChild = beforeTemplate.getChildNode(beforeChildName, beforeId);\n        if (!diff.childNodeDeleted(beforeChildName, beforeChild)) {\n            return false;\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (!beforeChildStillExists) {\n    org.apache.jackrabbit.oak.spi.state.NodeState beforeChild = beforeTemplate.getChildNode(beforeChildName, beforeId);\n    if (!diff.childNodeDeleted(beforeChildName, beforeChild)) {\n        return false;\n    }\n}",
            "src_parent": "{\n    boolean beforeChildStillExists = false;\n    for (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry entry : afterTemplate.getChildNodeEntries(afterId)) {\n        java.lang.String childName = entry.getName();\n        beforeChildStillExists |= childName.equals(beforeChildName);\n        org.apache.jackrabbit.oak.spi.state.NodeState afterChild = entry.getNodeState();\n        if (beforeChildName.equals(childName)) {\n            org.apache.jackrabbit.oak.spi.state.NodeState beforeChild = beforeTemplate.getChildNode(beforeChildName, beforeId);\n            if (beforeChild.exists()) {\n                if ((!fastEquals(afterChild, beforeChild)) && (!diff.childNodeChanged(childName, beforeChild, afterChild))) {\n                    return false;\n                }\n            } else if (!diff.childNodeAdded(childName, afterChild)) {\n                return false;\n            }\n        } else if (!diff.childNodeAdded(childName, afterChild)) {\n            return false;\n        }\n    }\n    if (!beforeChildStillExists) {\n        org.apache.jackrabbit.oak.spi.state.NodeState beforeChild = beforeTemplate.getChildNode(beforeChildName, beforeId);\n        if (!diff.childNodeDeleted(beforeChildName, beforeChild)) {\n            return false;\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "beforeChildStillExists |= childName.equals(beforeChildName)",
            "src_parent": "{\n    java.lang.String childName = entry.getName();\n    beforeChildStillExists |= childName.equals(beforeChildName);\n    org.apache.jackrabbit.oak.spi.state.NodeState afterChild = entry.getNodeState();\n    if (beforeChildName.equals(childName)) {\n        org.apache.jackrabbit.oak.spi.state.NodeState beforeChild = beforeTemplate.getChildNode(beforeChildName, beforeId);\n        if (beforeChild.exists()) {\n            if ((!fastEquals(afterChild, beforeChild)) && (!diff.childNodeChanged(childName, beforeChild, afterChild))) {\n                return false;\n            }\n        } else if (!diff.childNodeAdded(childName, afterChild)) {\n            return false;\n        }\n    } else if (!diff.childNodeAdded(childName, afterChild)) {\n        return false;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "OperatorAssignment"
          }
        }
      ],
      "file_name": "SegmentNodeState"
    }
  ],
  "id": "jackrabbit-oak_9120fd1b"
}