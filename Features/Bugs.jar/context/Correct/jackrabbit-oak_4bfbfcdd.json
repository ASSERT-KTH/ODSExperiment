{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.lang.String pathPrefix = plan.getPathPrefix();",
            "src_parent": "public class UniqueEntryStoreStrategy implements org.apache.jackrabbit.oak.plugins.index.property.strategy.IndexStoreStrategy {\n    static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.plugins.index.property.strategy.UniqueEntryStoreStrategy.class);\n\n    @java.lang.Override\n    @java.lang.Override\n    public void update(org.apache.jackrabbit.oak.spi.state.NodeBuilder index, java.lang.String path, java.util.Set<java.lang.String> beforeKeys, java.util.Set<java.lang.String> afterKeys) {\n        for (java.lang.String key : beforeKeys) {\n            org.apache.jackrabbit.oak.plugins.index.property.strategy.UniqueEntryStoreStrategy.remove(index, key, path);\n        }\n        for (java.lang.String key : afterKeys) {\n            org.apache.jackrabbit.oak.plugins.index.property.strategy.UniqueEntryStoreStrategy.insert(index, key, path);\n        }\n    }\n\n    private static void remove(org.apache.jackrabbit.oak.spi.state.NodeBuilder index, java.lang.String key, java.lang.String value) {\n        @java.lang.Override\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder builder = index.getChildNode(key);\n        if (builder.exists()) {\n            org.apache.jackrabbit.oak.api.PropertyState s = builder.getProperty(\"entry\");\n            if (s.count() == 1) {\n                builder.remove();\n            } else {\n                java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>();\n                for (int i = 0; i < s.count(); i++) {\n                    java.lang.String r = s.getValue(Type.STRING, i);\n                    if (!r.equals(value)) {\n                        list.add(r);\n                    }\n                }\n                org.apache.jackrabbit.oak.api.PropertyState s2 = org.apache.jackrabbit.oak.plugins.memory.MultiStringPropertyState.stringProperty(\"entry\", list);\n                builder.setProperty(s2);\n            }\n        }\n    }\n\n    private static void insert(org.apache.jackrabbit.oak.spi.state.NodeBuilder index, java.lang.String key, java.lang.String value) {\n        org.apache.jackrabbit.oak.spi.state.NodeBuilder k = index.child(key);\n        java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>();\n        list.add(value);\n        if (k.hasProperty(\"entry\")) {\n            org.apache.jackrabbit.oak.api.PropertyState s = k.getProperty(\"entry\");\n            for (int i = 0; i < s.count(); i++) {\n                java.lang.String r = s.getValue(Type.STRING, i);\n                list.add(r);\n            }\n        }\n        org.apache.jackrabbit.oak.api.PropertyState s2 = org.apache.jackrabbit.oak.plugins.memory.MultiStringPropertyState.stringProperty(\"entry\", list);\n        k.setProperty(s2);\n    }\n\n    @java.lang.Override\n    public java.lang.Iterable<java.lang.String> query(final org.apache.jackrabbit.oak.spi.query.Filter filter, final java.lang.String indexName, final org.apache.jackrabbit.oak.spi.state.NodeState indexMeta, final java.lang.Iterable<java.lang.String> values) {\n        final org.apache.jackrabbit.oak.spi.state.NodeState index = indexMeta.getChildNode(org.apache.jackrabbit.oak.plugins.index.IndexConstants.INDEX_CONTENT_NODE_NAME);\n        return new java.lang.Iterable<java.lang.String>() {\n            @java.lang.Override\n            public java.util.Iterator<java.lang.String> iterator() {\n                if (values == null) {\n                    return new java.util.Iterator<java.lang.String>() {\n                        java.util.Iterator<? extends org.apache.jackrabbit.oak.spi.state.ChildNodeEntry> it = index.getChildNodeEntries().iterator();\n\n                        @java.lang.Override\n                        public boolean hasNext() {\n                            return it.hasNext();\n                        }\n\n                        @java.lang.Override\n                        public java.lang.String next() {\n                            org.apache.jackrabbit.oak.api.PropertyState s = it.next().getNodeState().getProperty(\"entry\");\n                            return s.getValue(Type.STRING, 0);\n                        }\n\n                        @java.lang.Override\n                        public void remove() {\n                            it.remove();\n                        }\n                    };\n                }\n                java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>();\n                for (java.lang.String p : values) {\n                    org.apache.jackrabbit.oak.spi.state.NodeState key = index.getChildNode(p);\n                    if (key.exists()) {\n                        org.apache.jackrabbit.oak.api.PropertyState s = key.getProperty(\"entry\");\n                        java.lang.String v = s.getValue(Type.STRING, 0);\n                        list.add(v);\n                    }\n                }\n                return list.iterator();\n            }\n        };\n    }\n\n    @java.lang.Override\n    public long count(org.apache.jackrabbit.oak.spi.state.NodeState indexMeta, java.util.Set<java.lang.String> values, int max) {\n        org.apache.jackrabbit.oak.spi.state.NodeState index = indexMeta.getChildNode(org.apache.jackrabbit.oak.plugins.index.IndexConstants.INDEX_CONTENT_NODE_NAME);\n        long count = 0;\n        if (values == null) {\n            org.apache.jackrabbit.oak.api.PropertyState ec = indexMeta.getProperty(org.apache.jackrabbit.oak.plugins.index.IndexConstants.ENTRY_COUNT_PROPERTY_NAME);\n            if (ec != null) {\n                return ec.getValue(Type.LONG);\n            }\n            count = 1 + index.getChildNodeCount(max);\n            count *= 10;\n        } else if (values.size() == 1) {\n            org.apache.jackrabbit.oak.spi.state.NodeState k = index.getChildNode(values.iterator().next());\n            if (k.exists()) {\n                count = k.getProperty(\"entry\").count();\n            } else {\n                count = 0;\n            }\n        } else {\n            count = values.size();\n        }\n        return count;\n    }\n\n    java.lang.String pathPrefix = plan.getPathPrefix();\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "@java.lang.Override",
            "src_parent": "@java.lang.Override\n@java.lang.Override\npublic void update(org.apache.jackrabbit.oak.spi.state.NodeBuilder index, java.lang.String path, java.util.Set<java.lang.String> beforeKeys, java.util.Set<java.lang.String> afterKeys) {\n    for (java.lang.String key : beforeKeys) {\n        org.apache.jackrabbit.oak.plugins.index.property.strategy.UniqueEntryStoreStrategy.remove(index, key, path);\n    }\n    for (java.lang.String key : afterKeys) {\n        org.apache.jackrabbit.oak.plugins.index.property.strategy.UniqueEntryStoreStrategy.insert(index, key, path);\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "Annotation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "@java.lang.Override",
            "src_parent": "@java.lang.Override\norg.apache.jackrabbit.oak.spi.state.NodeBuilder builder = index.getChildNode(key)",
            "src_parent_type": "LocalVariable",
            "src_type": "Annotation"
          }
        }
      ],
      "file_name": "UniqueEntryStoreStrategy"
    }
  ],
  "id": "jackrabbit-oak_4bfbfcdd"
}