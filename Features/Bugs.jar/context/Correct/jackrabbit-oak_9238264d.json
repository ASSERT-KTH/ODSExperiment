{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (list.size() == 0) {\n    return null;\n}",
            "src_parent": "{\n    org.apache.jackrabbit.oak.api.Tree t = currentTree();\n    java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue> list = new java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue>();\n    readOakProperties(list, t, oakPropertyName, propertyType);\n    if (list.size() == 0) {\n        return null;\n    }\n    java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();\n    for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n        com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n    }\n    return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "boolean skipCurrentNode = false",
            "src_parent": "{\n    boolean skipCurrentNode = false;\n    while (true) {\n        if ((t == null) || (!t.exists())) {\n            return;\n        }\n        int slash = oakPropertyName.indexOf('/');\n        if (slash < 0) {\n            break;\n        }\n        java.lang.String parent = oakPropertyName.substring(0, slash);\n        oakPropertyName = oakPropertyName.substring(slash + 1);\n        if (parent.equals(\"..\")) {\n            t = (t.isRoot()) ? null : t.getParent();\n        } else if (parent.equals(\".\")) {\n        } else if (parent.equals(\"*\")) {\n            for (org.apache.jackrabbit.oak.api.Tree child : t.getChildren()) {\n                readOakProperties(target, child, oakPropertyName, propertyType);\n            }\n            skipCurrentNode = true;\n        } else {\n            t = t.getChild(parent);\n        }\n    } \n    if (skipCurrentNode) {\n        return;\n    }\n    if (!\"*\".equals(oakPropertyName)) {\n        org.apache.jackrabbit.oak.api.PropertyValue value = currentOakProperty(t, oakPropertyName, propertyType);\n        if (value != null) {\n            target.add(value);\n        }\n        return;\n    }\n    for (org.apache.jackrabbit.oak.api.PropertyState p : t.getProperties()) {\n        if ((propertyType == null) || (p.getType().tag() == propertyType)) {\n            org.apache.jackrabbit.oak.api.PropertyValue v = org.apache.jackrabbit.oak.spi.query.PropertyValues.create(p);\n            target.add(v);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (skipCurrentNode) {\n    return;\n}",
            "src_parent": "{\n    boolean skipCurrentNode = false;\n    while (true) {\n        if ((t == null) || (!t.exists())) {\n            return;\n        }\n        int slash = oakPropertyName.indexOf('/');\n        if (slash < 0) {\n            break;\n        }\n        java.lang.String parent = oakPropertyName.substring(0, slash);\n        oakPropertyName = oakPropertyName.substring(slash + 1);\n        if (parent.equals(\"..\")) {\n            t = (t.isRoot()) ? null : t.getParent();\n        } else if (parent.equals(\".\")) {\n        } else if (parent.equals(\"*\")) {\n            for (org.apache.jackrabbit.oak.api.Tree child : t.getChildren()) {\n                readOakProperties(target, child, oakPropertyName, propertyType);\n            }\n            skipCurrentNode = true;\n        } else {\n            t = t.getChild(parent);\n        }\n    } \n    if (skipCurrentNode) {\n        return;\n    }\n    if (!\"*\".equals(oakPropertyName)) {\n        org.apache.jackrabbit.oak.api.PropertyValue value = currentOakProperty(t, oakPropertyName, propertyType);\n        if (value != null) {\n            target.add(value);\n        }\n        return;\n    }\n    for (org.apache.jackrabbit.oak.api.PropertyState p : t.getProperties()) {\n        if ((propertyType == null) || (p.getType().tag() == propertyType)) {\n            org.apache.jackrabbit.oak.api.PropertyValue v = org.apache.jackrabbit.oak.spi.query.PropertyValues.create(p);\n            target.add(v);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (list.size() == 0) {\n    return null;\n} else if (list.size() == 1) {\n    return list.get(0);\n}",
            "src_parent": "{\n    org.apache.jackrabbit.oak.api.Tree t = currentTree();\n    java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue> list = new java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue>();\n    readOakProperties(list, t, oakPropertyName, propertyType);\n    if (list.size() == 0) {\n        return null;\n    } else if (list.size() == 1) {\n        return list.get(0);\n    }\n    org.apache.jackrabbit.oak.api.Type<?> type = list.get(0).getType();\n    for (int i = 1; i < list.size(); i++) {\n        org.apache.jackrabbit.oak.api.Type<?> t2 = list.get(i).getType();\n        if (t2 != type) {\n            type = org.apache.jackrabbit.oak.api.Type.STRING;\n            break;\n        }\n    }\n    if (type == org.apache.jackrabbit.oak.api.Type.STRING) {\n        java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();\n        for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n            com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n        }\n        return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings);\n    }\n    @java.lang.SuppressWarnings(\"unchecked\")\n    org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object> builder = ((org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object>) (org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder.array(type)));\n    builder.setName(\"\");\n    for (org.apache.jackrabbit.oak.api.PropertyValue v : list) {\n        builder.addValue(v.getValue(type));\n    }\n    org.apache.jackrabbit.oak.api.PropertyState s = builder.getPropertyState();\n    return org.apache.jackrabbit.oak.spi.query.PropertyValues.create(s);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.api.Type<?> type = list.get(0).getType()",
            "src_parent": "{\n    org.apache.jackrabbit.oak.api.Tree t = currentTree();\n    java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue> list = new java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue>();\n    readOakProperties(list, t, oakPropertyName, propertyType);\n    if (list.size() == 0) {\n        return null;\n    } else if (list.size() == 1) {\n        return list.get(0);\n    }\n    org.apache.jackrabbit.oak.api.Type<?> type = list.get(0).getType();\n    for (int i = 1; i < list.size(); i++) {\n        org.apache.jackrabbit.oak.api.Type<?> t2 = list.get(i).getType();\n        if (t2 != type) {\n            type = org.apache.jackrabbit.oak.api.Type.STRING;\n            break;\n        }\n    }\n    if (type == org.apache.jackrabbit.oak.api.Type.STRING) {\n        java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();\n        for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n            com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n        }\n        return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings);\n    }\n    @java.lang.SuppressWarnings(\"unchecked\")\n    org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object> builder = ((org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object>) (org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder.array(type)));\n    builder.setName(\"\");\n    for (org.apache.jackrabbit.oak.api.PropertyValue v : list) {\n        builder.addValue(v.getValue(type));\n    }\n    org.apache.jackrabbit.oak.api.PropertyState s = builder.getPropertyState();\n    return org.apache.jackrabbit.oak.spi.query.PropertyValues.create(s);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "for (int i = 1; i < list.size(); i++) {\n    org.apache.jackrabbit.oak.api.Type<?> t2 = list.get(i).getType();\n    if (t2 != type) {\n        type = org.apache.jackrabbit.oak.api.Type.STRING;\n        break;\n    }\n}",
            "src_parent": "{\n    org.apache.jackrabbit.oak.api.Tree t = currentTree();\n    java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue> list = new java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue>();\n    readOakProperties(list, t, oakPropertyName, propertyType);\n    if (list.size() == 0) {\n        return null;\n    } else if (list.size() == 1) {\n        return list.get(0);\n    }\n    org.apache.jackrabbit.oak.api.Type<?> type = list.get(0).getType();\n    for (int i = 1; i < list.size(); i++) {\n        org.apache.jackrabbit.oak.api.Type<?> t2 = list.get(i).getType();\n        if (t2 != type) {\n            type = org.apache.jackrabbit.oak.api.Type.STRING;\n            break;\n        }\n    }\n    if (type == org.apache.jackrabbit.oak.api.Type.STRING) {\n        java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();\n        for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n            com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n        }\n        return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings);\n    }\n    @java.lang.SuppressWarnings(\"unchecked\")\n    org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object> builder = ((org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object>) (org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder.array(type)));\n    builder.setName(\"\");\n    for (org.apache.jackrabbit.oak.api.PropertyValue v : list) {\n        builder.addValue(v.getValue(type));\n    }\n    org.apache.jackrabbit.oak.api.PropertyState s = builder.getPropertyState();\n    return org.apache.jackrabbit.oak.spi.query.PropertyValues.create(s);\n}",
            "src_parent_type": "Block",
            "src_type": "For"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (type == org.apache.jackrabbit.oak.api.Type.STRING) {\n    java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();\n    for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n        com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n    }\n    return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings);\n}",
            "src_parent": "{\n    org.apache.jackrabbit.oak.api.Tree t = currentTree();\n    java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue> list = new java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue>();\n    readOakProperties(list, t, oakPropertyName, propertyType);\n    if (list.size() == 0) {\n        return null;\n    } else if (list.size() == 1) {\n        return list.get(0);\n    }\n    org.apache.jackrabbit.oak.api.Type<?> type = list.get(0).getType();\n    for (int i = 1; i < list.size(); i++) {\n        org.apache.jackrabbit.oak.api.Type<?> t2 = list.get(i).getType();\n        if (t2 != type) {\n            type = org.apache.jackrabbit.oak.api.Type.STRING;\n            break;\n        }\n    }\n    if (type == org.apache.jackrabbit.oak.api.Type.STRING) {\n        java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();\n        for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n            com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n        }\n        return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings);\n    }\n    @java.lang.SuppressWarnings(\"unchecked\")\n    org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object> builder = ((org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object>) (org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder.array(type)));\n    builder.setName(\"\");\n    for (org.apache.jackrabbit.oak.api.PropertyValue v : list) {\n        builder.addValue(v.getValue(type));\n    }\n    org.apache.jackrabbit.oak.api.PropertyState s = builder.getPropertyState();\n    return org.apache.jackrabbit.oak.spi.query.PropertyValues.create(s);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "@java.lang.SuppressWarnings(\"unchecked\")\norg.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object> builder = ((org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object>) (org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder.array(type)))",
            "src_parent": "{\n    org.apache.jackrabbit.oak.api.Tree t = currentTree();\n    java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue> list = new java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue>();\n    readOakProperties(list, t, oakPropertyName, propertyType);\n    if (list.size() == 0) {\n        return null;\n    } else if (list.size() == 1) {\n        return list.get(0);\n    }\n    org.apache.jackrabbit.oak.api.Type<?> type = list.get(0).getType();\n    for (int i = 1; i < list.size(); i++) {\n        org.apache.jackrabbit.oak.api.Type<?> t2 = list.get(i).getType();\n        if (t2 != type) {\n            type = org.apache.jackrabbit.oak.api.Type.STRING;\n            break;\n        }\n    }\n    if (type == org.apache.jackrabbit.oak.api.Type.STRING) {\n        java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();\n        for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n            com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n        }\n        return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings);\n    }\n    @java.lang.SuppressWarnings(\"unchecked\")\n    org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object> builder = ((org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object>) (org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder.array(type)));\n    builder.setName(\"\");\n    for (org.apache.jackrabbit.oak.api.PropertyValue v : list) {\n        builder.addValue(v.getValue(type));\n    }\n    org.apache.jackrabbit.oak.api.PropertyState s = builder.getPropertyState();\n    return org.apache.jackrabbit.oak.spi.query.PropertyValues.create(s);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "builder.setName(\"\")",
            "src_parent": "{\n    org.apache.jackrabbit.oak.api.Tree t = currentTree();\n    java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue> list = new java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue>();\n    readOakProperties(list, t, oakPropertyName, propertyType);\n    if (list.size() == 0) {\n        return null;\n    } else if (list.size() == 1) {\n        return list.get(0);\n    }\n    org.apache.jackrabbit.oak.api.Type<?> type = list.get(0).getType();\n    for (int i = 1; i < list.size(); i++) {\n        org.apache.jackrabbit.oak.api.Type<?> t2 = list.get(i).getType();\n        if (t2 != type) {\n            type = org.apache.jackrabbit.oak.api.Type.STRING;\n            break;\n        }\n    }\n    if (type == org.apache.jackrabbit.oak.api.Type.STRING) {\n        java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();\n        for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n            com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n        }\n        return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings);\n    }\n    @java.lang.SuppressWarnings(\"unchecked\")\n    org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object> builder = ((org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object>) (org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder.array(type)));\n    builder.setName(\"\");\n    for (org.apache.jackrabbit.oak.api.PropertyValue v : list) {\n        builder.addValue(v.getValue(type));\n    }\n    org.apache.jackrabbit.oak.api.PropertyState s = builder.getPropertyState();\n    return org.apache.jackrabbit.oak.spi.query.PropertyValues.create(s);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "for (org.apache.jackrabbit.oak.api.PropertyValue v : list) {\n    builder.addValue(v.getValue(type));\n}",
            "src_parent": "{\n    org.apache.jackrabbit.oak.api.Tree t = currentTree();\n    java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue> list = new java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue>();\n    readOakProperties(list, t, oakPropertyName, propertyType);\n    if (list.size() == 0) {\n        return null;\n    } else if (list.size() == 1) {\n        return list.get(0);\n    }\n    org.apache.jackrabbit.oak.api.Type<?> type = list.get(0).getType();\n    for (int i = 1; i < list.size(); i++) {\n        org.apache.jackrabbit.oak.api.Type<?> t2 = list.get(i).getType();\n        if (t2 != type) {\n            type = org.apache.jackrabbit.oak.api.Type.STRING;\n            break;\n        }\n    }\n    if (type == org.apache.jackrabbit.oak.api.Type.STRING) {\n        java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();\n        for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n            com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n        }\n        return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings);\n    }\n    @java.lang.SuppressWarnings(\"unchecked\")\n    org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object> builder = ((org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object>) (org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder.array(type)));\n    builder.setName(\"\");\n    for (org.apache.jackrabbit.oak.api.PropertyValue v : list) {\n        builder.addValue(v.getValue(type));\n    }\n    org.apache.jackrabbit.oak.api.PropertyState s = builder.getPropertyState();\n    return org.apache.jackrabbit.oak.spi.query.PropertyValues.create(s);\n}",
            "src_parent_type": "Block",
            "src_type": "ForEach"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.api.PropertyState s = builder.getPropertyState()",
            "src_parent": "{\n    org.apache.jackrabbit.oak.api.Tree t = currentTree();\n    java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue> list = new java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue>();\n    readOakProperties(list, t, oakPropertyName, propertyType);\n    if (list.size() == 0) {\n        return null;\n    } else if (list.size() == 1) {\n        return list.get(0);\n    }\n    org.apache.jackrabbit.oak.api.Type<?> type = list.get(0).getType();\n    for (int i = 1; i < list.size(); i++) {\n        org.apache.jackrabbit.oak.api.Type<?> t2 = list.get(i).getType();\n        if (t2 != type) {\n            type = org.apache.jackrabbit.oak.api.Type.STRING;\n            break;\n        }\n    }\n    if (type == org.apache.jackrabbit.oak.api.Type.STRING) {\n        java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();\n        for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n            com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n        }\n        return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings);\n    }\n    @java.lang.SuppressWarnings(\"unchecked\")\n    org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object> builder = ((org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object>) (org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder.array(type)));\n    builder.setName(\"\");\n    for (org.apache.jackrabbit.oak.api.PropertyValue v : list) {\n        builder.addValue(v.getValue(type));\n    }\n    org.apache.jackrabbit.oak.api.PropertyState s = builder.getPropertyState();\n    return org.apache.jackrabbit.oak.spi.query.PropertyValues.create(s);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "return org.apache.jackrabbit.oak.spi.query.PropertyValues.create(s)",
            "src_parent": "{\n    org.apache.jackrabbit.oak.api.Tree t = currentTree();\n    java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue> list = new java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue>();\n    readOakProperties(list, t, oakPropertyName, propertyType);\n    if (list.size() == 0) {\n        return null;\n    } else if (list.size() == 1) {\n        return list.get(0);\n    }\n    org.apache.jackrabbit.oak.api.Type<?> type = list.get(0).getType();\n    for (int i = 1; i < list.size(); i++) {\n        org.apache.jackrabbit.oak.api.Type<?> t2 = list.get(i).getType();\n        if (t2 != type) {\n            type = org.apache.jackrabbit.oak.api.Type.STRING;\n            break;\n        }\n    }\n    if (type == org.apache.jackrabbit.oak.api.Type.STRING) {\n        java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();\n        for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n            com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n        }\n        return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings);\n    }\n    @java.lang.SuppressWarnings(\"unchecked\")\n    org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object> builder = ((org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object>) (org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder.array(type)));\n    builder.setName(\"\");\n    for (org.apache.jackrabbit.oak.api.PropertyValue v : list) {\n        builder.addValue(v.getValue(type));\n    }\n    org.apache.jackrabbit.oak.api.PropertyState s = builder.getPropertyState();\n    return org.apache.jackrabbit.oak.spi.query.PropertyValues.create(s);\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "skipCurrentNode = true",
            "src_parent": "{\n    for (org.apache.jackrabbit.oak.api.Tree child : t.getChildren()) {\n        readOakProperties(target, child, oakPropertyName, propertyType);\n    }\n    skipCurrentNode = true;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "list.size() == 0",
            "dst_parent": "if (list.size() == 0) {\n    return null;\n} else if (list.size() == 1) {\n    return list.get(0);\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "list.size() == 0",
            "src_parent": "if (list.size() == 0) {\n    return null;\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    return null;\n}",
            "dst_parent": "if (list.size() == 0) {\n    return null;\n} else if (list.size() == 1) {\n    return list.get(0);\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    return null;\n}",
            "src_parent": "if (list.size() == 0) {\n    return null;\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()",
            "dst_parent": "{\n    java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();\n    for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n        com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n    }\n    return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()",
            "src_parent": "{\n    org.apache.jackrabbit.oak.api.Tree t = currentTree();\n    java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue> list = new java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue>();\n    readOakProperties(list, t, oakPropertyName, propertyType);\n    if (list.size() == 0) {\n        return null;\n    }\n    java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();\n    for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n        com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n    }\n    return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n    com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n}",
            "dst_parent": "{\n    java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();\n    for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n        com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n    }\n    return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings);\n}",
            "dst_parent_type": "Block",
            "dst_type": "ForEach",
            "operator": "MOV",
            "src": "for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n    com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n}",
            "src_parent": "{\n    org.apache.jackrabbit.oak.api.Tree t = currentTree();\n    java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue> list = new java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue>();\n    readOakProperties(list, t, oakPropertyName, propertyType);\n    if (list.size() == 0) {\n        return null;\n    }\n    java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();\n    for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n        com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n    }\n    return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings);\n}",
            "src_parent_type": "Block",
            "src_type": "ForEach"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings)",
            "dst_parent": "{\n    java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();\n    for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n        com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n    }\n    return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings)",
            "src_parent": "{\n    org.apache.jackrabbit.oak.api.Tree t = currentTree();\n    java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue> list = new java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue>();\n    readOakProperties(list, t, oakPropertyName, propertyType);\n    if (list.size() == 0) {\n        return null;\n    }\n    java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();\n    for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n        com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n    }\n    return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings);\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        }
      ],
      "file_name": "SelectorImpl"
    }
  ],
  "id": "jackrabbit-oak_9238264d"
}