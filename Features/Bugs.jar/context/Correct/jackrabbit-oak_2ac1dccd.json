{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "newestRevs.containsKey(r.getClusterId())",
            "dst_parent": "isRevisionNewer(context, lower, r) && newestRevs.containsKey(r.getClusterId())",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "clusterIds.contains(r.getClusterId())",
            "src_parent": "if (clusterIds.contains(r.getClusterId())) {\n    if (isRevisionNewer(context, lower, r)) {\n        clusterIds.remove(r.getClusterId());\n        if (clusterIds.isEmpty()) {\n            break;\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "newestRevs",
            "dst_parent": "newestRevs.containsKey(r.getClusterId())",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "clusterIds",
            "src_parent": "clusterIds.contains(r.getClusterId())",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (!getPreviousRanges().isEmpty()) {\n    clusterIds = com.google.common.collect.Sets.newHashSet();\n    for (org.apache.jackrabbit.oak.plugins.document.Revision prevRev : getPreviousRanges().keySet()) {\n        if (!isRevisionNewer(context, lower, prevRev)) {\n            clusterIds.add(prevRev.getClusterId());\n        }\n    }\n}",
            "src_parent": "{\n    com.google.common.base.Preconditions.checkArgument((!baseRev.isBranch()) || (branch != null), \"Branch must be non-null if baseRev is a branch revision\");\n    org.apache.jackrabbit.oak.plugins.document.Revision head = context.getHeadRevision();\n    org.apache.jackrabbit.oak.plugins.document.Revision lower = (branch != null) ? branch.getBase() : baseRev;\n    java.util.Set<java.lang.Integer> clusterIds = java.util.Collections.emptySet();\n    if (!getPreviousRanges().isEmpty()) {\n        clusterIds = com.google.common.collect.Sets.newHashSet();\n        for (org.apache.jackrabbit.oak.plugins.document.Revision prevRev : getPreviousRanges().keySet()) {\n            if (!isRevisionNewer(context, lower, prevRev)) {\n                clusterIds.add(prevRev.getClusterId());\n            }\n        }\n    }\n    boolean fullScan = true;\n    java.lang.Iterable<org.apache.jackrabbit.oak.plugins.document.Revision> changes;\n    if (clusterIds.isEmpty()) {\n        changes = com.google.common.collect.Iterables.mergeSorted(com.google.common.collect.ImmutableList.of(getLocalRevisions().keySet(), getLocalCommitRoot().keySet()), getLocalRevisions().comparator());\n    } else {\n        fullScan = false;\n        changes = getAllChanges();\n        if (org.apache.jackrabbit.oak.plugins.document.NodeDocument.LOG.isDebugEnabled()) {\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.LOG.debug(\"getNewestRevision() with changeRev {} on {}, \" + \"_revisions {}, _commitRoot {}\", changeRev, getId(), getLocalRevisions(), getLocalCommitRoot());\n        }\n    }\n    java.util.Map<java.lang.Integer, org.apache.jackrabbit.oak.plugins.document.Revision> newestRevs = com.google.common.collect.Maps.newHashMap();\n    java.util.Map<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> validRevisions = com.google.common.collect.Maps.newHashMap();\n    for (org.apache.jackrabbit.oak.plugins.document.Revision r : changes) {\n        if (r.equals(changeRev)) {\n            continue;\n        }\n        if (!fullScan) {\n            if (clusterIds.contains(r.getClusterId())) {\n                if (isRevisionNewer(context, lower, r)) {\n                    clusterIds.remove(r.getClusterId());\n                    if (clusterIds.isEmpty()) {\n                        break;\n                    }\n                }\n            }\n        }\n        if (newestRevs.containsKey(r.getClusterId())) {\n            if ((branch != null) && (!branch.containsCommit(r))) {\n                if (isRevisionNewer(context, r, branch.getBase())) {\n                    collisions.add(r);\n                }\n            }\n        } else if (isValidRevision(context, r, null, baseRev, validRevisions)) {\n            newestRevs.put(r.getClusterId(), r);\n        } else {\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument commitRoot = getCommitRoot(r);\n            org.apache.jackrabbit.oak.plugins.document.Revision commitRevision = null;\n            if (commitRoot != null) {\n                commitRevision = commitRoot.getCommitRevision(r);\n            }\n            if ((commitRevision != null) && isRevisionNewer(context, commitRevision, head)) {\n                collisions.add(r);\n            } else if (((commitRevision != null) && (branch == null)) && isRevisionNewer(context, r, baseRev)) {\n                newestRevs.put(r.getClusterId(), r);\n            } else {\n                collisions.add(r);\n            }\n        }\n    }\n    org.apache.jackrabbit.oak.plugins.document.Revision newestRev = null;\n    for (org.apache.jackrabbit.oak.plugins.document.Revision r : newestRevs.values()) {\n        newestRev = org.apache.jackrabbit.oak.plugins.document.util.Utils.max(newestRev, r, context.getRevisionComparator());\n    }\n    if (newestRev == null) {\n        return null;\n    }\n    java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> deleted = getLocalDeleted();\n    java.lang.String value = deleted.get(newestRev);\n    if ((value == null) && deleted.headMap(newestRev).isEmpty()) {\n        return newestRev;\n    }\n    if (value == null) {\n        value = getDeleted().get(newestRev);\n    }\n    if (\"true\".equals(value)) {\n        return null;\n    }\n    return newestRev;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (!getPreviousRanges().isEmpty()) {\n    clusterIds = com.google.common.collect.Sets.newHashSet();\n    for (org.apache.jackrabbit.oak.plugins.document.Revision prevRev : getPreviousRanges().keySet()) {\n        if (!isRevisionNewer(context, lower, prevRev)) {\n            clusterIds.add(prevRev.getClusterId());\n        }\n    }\n    if (!clusterIds.isEmpty()) {\n        for (org.apache.jackrabbit.oak.plugins.document.Revision r : getLocalCommitRoot().keySet()) {\n            clusterIds.add(r.getClusterId());\n        }\n        for (org.apache.jackrabbit.oak.plugins.document.Revision r : getLocalRevisions().keySet()) {\n            clusterIds.add(r.getClusterId());\n        }\n    }\n}",
            "src_parent": "{\n    com.google.common.base.Preconditions.checkArgument((!baseRev.isBranch()) || (branch != null), \"Branch must be non-null if baseRev is a branch revision\");\n    org.apache.jackrabbit.oak.plugins.document.Revision head = context.getHeadRevision();\n    org.apache.jackrabbit.oak.plugins.document.Revision lower = (branch != null) ? branch.getBase() : baseRev;\n    java.util.Set<java.lang.Integer> clusterIds = java.util.Collections.emptySet();\n    if (!getPreviousRanges().isEmpty()) {\n        clusterIds = com.google.common.collect.Sets.newHashSet();\n        for (org.apache.jackrabbit.oak.plugins.document.Revision prevRev : getPreviousRanges().keySet()) {\n            if (!isRevisionNewer(context, lower, prevRev)) {\n                clusterIds.add(prevRev.getClusterId());\n            }\n        }\n        if (!clusterIds.isEmpty()) {\n            for (org.apache.jackrabbit.oak.plugins.document.Revision r : getLocalCommitRoot().keySet()) {\n                clusterIds.add(r.getClusterId());\n            }\n            for (org.apache.jackrabbit.oak.plugins.document.Revision r : getLocalRevisions().keySet()) {\n                clusterIds.add(r.getClusterId());\n            }\n        }\n    }\n    boolean fullScan = true;\n    java.lang.Iterable<org.apache.jackrabbit.oak.plugins.document.Revision> changes;\n    if (clusterIds.isEmpty()) {\n        changes = com.google.common.collect.Iterables.mergeSorted(com.google.common.collect.ImmutableList.of(getLocalRevisions().keySet(), getLocalCommitRoot().keySet()), getLocalRevisions().comparator());\n    } else {\n        fullScan = false;\n        changes = getAllChanges();\n        if (org.apache.jackrabbit.oak.plugins.document.NodeDocument.LOG.isDebugEnabled()) {\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument.LOG.debug(\"getNewestRevision() with changeRev {} on {}, \" + \"_revisions {}, _commitRoot {}\", changeRev, getId(), getLocalRevisions(), getLocalCommitRoot());\n        }\n    }\n    java.util.Map<java.lang.Integer, org.apache.jackrabbit.oak.plugins.document.Revision> newestRevs = com.google.common.collect.Maps.newHashMap();\n    java.util.Map<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> validRevisions = com.google.common.collect.Maps.newHashMap();\n    for (org.apache.jackrabbit.oak.plugins.document.Revision r : changes) {\n        if (r.equals(changeRev)) {\n            continue;\n        }\n        if (!fullScan) {\n            if (isRevisionNewer(context, lower, r) && newestRevs.containsKey(r.getClusterId())) {\n                if (isRevisionNewer(context, lower, r)) {\n                    clusterIds.remove(r.getClusterId());\n                    if (clusterIds.isEmpty()) {\n                        break;\n                    }\n                }\n            }\n        }\n        if (newestRevs.containsKey(r.getClusterId())) {\n            if ((branch != null) && (!branch.containsCommit(r))) {\n                if (isRevisionNewer(context, r, branch.getBase())) {\n                    collisions.add(r);\n                }\n            }\n        } else if (isValidRevision(context, r, null, baseRev, validRevisions)) {\n            newestRevs.put(r.getClusterId(), r);\n        } else {\n            org.apache.jackrabbit.oak.plugins.document.NodeDocument commitRoot = getCommitRoot(r);\n            org.apache.jackrabbit.oak.plugins.document.Revision commitRevision = null;\n            if (commitRoot != null) {\n                commitRevision = commitRoot.getCommitRevision(r);\n            }\n            if ((commitRevision != null) && isRevisionNewer(context, commitRevision, head)) {\n                collisions.add(r);\n            } else if (((commitRevision != null) && (branch == null)) && isRevisionNewer(context, r, baseRev)) {\n                newestRevs.put(r.getClusterId(), r);\n            } else {\n                collisions.add(r);\n            }\n        }\n    }\n    org.apache.jackrabbit.oak.plugins.document.Revision newestRev = null;\n    for (org.apache.jackrabbit.oak.plugins.document.Revision r : newestRevs.values()) {\n        newestRev = org.apache.jackrabbit.oak.plugins.document.util.Utils.max(newestRev, r, context.getRevisionComparator());\n    }\n    if (newestRev == null) {\n        return null;\n    }\n    java.util.SortedMap<org.apache.jackrabbit.oak.plugins.document.Revision, java.lang.String> deleted = getLocalDeleted();\n    java.lang.String value = deleted.get(newestRev);\n    if ((value == null) && deleted.headMap(newestRev).isEmpty()) {\n        return newestRev;\n    }\n    if (value == null) {\n        value = getDeleted().get(newestRev);\n    }\n    if (\"true\".equals(value)) {\n        return null;\n    }\n    return newestRev;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "for (org.apache.jackrabbit.oak.plugins.document.Revision r : getLocalCommitRoot().keySet()) {\n    clusterIds.add(r.getClusterId());\n}",
            "src_parent": "{\n    for (org.apache.jackrabbit.oak.plugins.document.Revision r : getLocalCommitRoot().keySet()) {\n        clusterIds.add(r.getClusterId());\n    }\n    for (org.apache.jackrabbit.oak.plugins.document.Revision r : getLocalRevisions().keySet()) {\n        clusterIds.add(r.getClusterId());\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "ForEach"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "for (org.apache.jackrabbit.oak.plugins.document.Revision r : getLocalRevisions().keySet()) {\n    clusterIds.add(r.getClusterId());\n}",
            "src_parent": "{\n    for (org.apache.jackrabbit.oak.plugins.document.Revision r : getLocalCommitRoot().keySet()) {\n        clusterIds.add(r.getClusterId());\n    }\n    for (org.apache.jackrabbit.oak.plugins.document.Revision r : getLocalRevisions().keySet()) {\n        clusterIds.add(r.getClusterId());\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "ForEach"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "isRevisionNewer(context, lower, r) && newestRevs.containsKey(r.getClusterId())",
            "src_parent": "if (isRevisionNewer(context, lower, r) && newestRevs.containsKey(r.getClusterId())) {\n    if (isRevisionNewer(context, lower, r)) {\n        clusterIds.remove(r.getClusterId());\n        if (clusterIds.isEmpty()) {\n            break;\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "!getPreviousRanges().isEmpty()",
            "dst_parent": "if (!getPreviousRanges().isEmpty()) {\n    clusterIds = com.google.common.collect.Sets.newHashSet();\n    for (org.apache.jackrabbit.oak.plugins.document.Revision prevRev : getPreviousRanges().keySet()) {\n        if (!isRevisionNewer(context, lower, prevRev)) {\n            clusterIds.add(prevRev.getClusterId());\n        }\n    }\n    if (!clusterIds.isEmpty()) {\n        for (org.apache.jackrabbit.oak.plugins.document.Revision r : getLocalCommitRoot().keySet()) {\n            clusterIds.add(r.getClusterId());\n        }\n        for (org.apache.jackrabbit.oak.plugins.document.Revision r : getLocalRevisions().keySet()) {\n            clusterIds.add(r.getClusterId());\n        }\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "UnaryOperator",
            "operator": "MOV",
            "src": "!getPreviousRanges().isEmpty()",
            "src_parent": "if (!getPreviousRanges().isEmpty()) {\n    clusterIds = com.google.common.collect.Sets.newHashSet();\n    for (org.apache.jackrabbit.oak.plugins.document.Revision prevRev : getPreviousRanges().keySet()) {\n        if (!isRevisionNewer(context, lower, prevRev)) {\n            clusterIds.add(prevRev.getClusterId());\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "UnaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "clusterIds = com.google.common.collect.Sets.newHashSet()",
            "dst_parent": "{\n    clusterIds = com.google.common.collect.Sets.newHashSet();\n    for (org.apache.jackrabbit.oak.plugins.document.Revision prevRev : getPreviousRanges().keySet()) {\n        if (!isRevisionNewer(context, lower, prevRev)) {\n            clusterIds.add(prevRev.getClusterId());\n        }\n    }\n    if (!clusterIds.isEmpty()) {\n        for (org.apache.jackrabbit.oak.plugins.document.Revision r : getLocalCommitRoot().keySet()) {\n            clusterIds.add(r.getClusterId());\n        }\n        for (org.apache.jackrabbit.oak.plugins.document.Revision r : getLocalRevisions().keySet()) {\n            clusterIds.add(r.getClusterId());\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "clusterIds = com.google.common.collect.Sets.newHashSet()",
            "src_parent": "{\n    clusterIds = com.google.common.collect.Sets.newHashSet();\n    for (org.apache.jackrabbit.oak.plugins.document.Revision prevRev : getPreviousRanges().keySet()) {\n        if (!isRevisionNewer(context, lower, prevRev)) {\n            clusterIds.add(prevRev.getClusterId());\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "for (org.apache.jackrabbit.oak.plugins.document.Revision prevRev : getPreviousRanges().keySet()) {\n    if (!isRevisionNewer(context, lower, prevRev)) {\n        clusterIds.add(prevRev.getClusterId());\n    }\n}",
            "dst_parent": "{\n    clusterIds = com.google.common.collect.Sets.newHashSet();\n    for (org.apache.jackrabbit.oak.plugins.document.Revision prevRev : getPreviousRanges().keySet()) {\n        if (!isRevisionNewer(context, lower, prevRev)) {\n            clusterIds.add(prevRev.getClusterId());\n        }\n    }\n    if (!clusterIds.isEmpty()) {\n        for (org.apache.jackrabbit.oak.plugins.document.Revision r : getLocalCommitRoot().keySet()) {\n            clusterIds.add(r.getClusterId());\n        }\n        for (org.apache.jackrabbit.oak.plugins.document.Revision r : getLocalRevisions().keySet()) {\n            clusterIds.add(r.getClusterId());\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "ForEach",
            "operator": "MOV",
            "src": "for (org.apache.jackrabbit.oak.plugins.document.Revision prevRev : getPreviousRanges().keySet()) {\n    if (!isRevisionNewer(context, lower, prevRev)) {\n        clusterIds.add(prevRev.getClusterId());\n    }\n}",
            "src_parent": "{\n    clusterIds = com.google.common.collect.Sets.newHashSet();\n    for (org.apache.jackrabbit.oak.plugins.document.Revision prevRev : getPreviousRanges().keySet()) {\n        if (!isRevisionNewer(context, lower, prevRev)) {\n            clusterIds.add(prevRev.getClusterId());\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "ForEach"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    for (org.apache.jackrabbit.oak.plugins.document.Revision r : getLocalCommitRoot().keySet()) {\n        clusterIds.add(r.getClusterId());\n    }\n    for (org.apache.jackrabbit.oak.plugins.document.Revision r : getLocalRevisions().keySet()) {\n        clusterIds.add(r.getClusterId());\n    }\n}",
            "dst_parent": "if (!clusterIds.isEmpty()) {\n    for (org.apache.jackrabbit.oak.plugins.document.Revision r : getLocalCommitRoot().keySet()) {\n        clusterIds.add(r.getClusterId());\n    }\n    for (org.apache.jackrabbit.oak.plugins.document.Revision r : getLocalRevisions().keySet()) {\n        clusterIds.add(r.getClusterId());\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    clusterIds = com.google.common.collect.Sets.newHashSet();\n    for (org.apache.jackrabbit.oak.plugins.document.Revision prevRev : getPreviousRanges().keySet()) {\n        if (!isRevisionNewer(context, lower, prevRev)) {\n            clusterIds.add(prevRev.getClusterId());\n        }\n    }\n}",
            "src_parent": "if (!getPreviousRanges().isEmpty()) {\n    clusterIds = com.google.common.collect.Sets.newHashSet();\n    for (org.apache.jackrabbit.oak.plugins.document.Revision prevRev : getPreviousRanges().keySet()) {\n        if (!isRevisionNewer(context, lower, prevRev)) {\n            clusterIds.add(prevRev.getClusterId());\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "newestRevs.containsKey(r.getClusterId())",
            "dst_parent": "isRevisionNewer(context, lower, r) && newestRevs.containsKey(r.getClusterId())",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "clusterIds.contains(r.getClusterId())",
            "src_parent": "if (clusterIds.contains(r.getClusterId())) {\n    if (isRevisionNewer(context, lower, r)) {\n        clusterIds.remove(r.getClusterId());\n        if (clusterIds.isEmpty()) {\n            break;\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "NodeDocument"
    }
  ],
  "id": "jackrabbit-oak_2ac1dccd"
}