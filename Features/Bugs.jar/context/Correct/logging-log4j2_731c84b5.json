{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "final java.util.Set<org.apache.logging.log4j.core.config.LoggerConfig> alreadyStarted = new java.util.HashSet<org.apache.logging.log4j.core.config.LoggerConfig>()",
            "src_parent": "{\n    org.apache.logging.log4j.core.AbstractLifeCycle.LOGGER.debug(\"Starting configuration {}\", this);\n    this.setStarting();\n    pluginManager.collectPlugins();\n    final org.apache.logging.log4j.core.config.plugins.util.PluginManager levelPlugins = new org.apache.logging.log4j.core.config.plugins.util.PluginManager(\"Level\");\n    levelPlugins.collectPlugins();\n    final java.util.Map<java.lang.String, org.apache.logging.log4j.core.config.plugins.util.PluginType<?>> plugins = levelPlugins.getPlugins();\n    if (plugins != null) {\n        for (final org.apache.logging.log4j.core.config.plugins.util.PluginType<?> type : plugins.values()) {\n            try {\n                org.apache.logging.log4j.core.util.Loader.initializeClass(type.getPluginClass().getName(), type.getPluginClass().getClassLoader());\n            } catch (final java.lang.Exception ex) {\n                org.apache.logging.log4j.core.AbstractLifeCycle.LOGGER.error(\"Unable to initialize {} due to {}: {}\", type.getPluginClass().getName(), ex.getClass().getSimpleName(), ex.getMessage());\n            }\n        }\n    }\n    setup();\n    setupAdvertisement();\n    doConfigure();\n    final java.util.Set<org.apache.logging.log4j.core.config.LoggerConfig> alreadyStarted = new java.util.HashSet<org.apache.logging.log4j.core.config.LoggerConfig>();\n    for (final org.apache.logging.log4j.core.config.LoggerConfig logger : loggers.values()) {\n        logger.start();\n        alreadyStarted.add(logger);\n    }\n    for (final org.apache.logging.log4j.core.Appender appender : appenders.values()) {\n        appender.start();\n    }\n    if (!alreadyStarted.contains(root)) {\n        root.start();\n    }\n    super.start();\n    org.apache.logging.log4j.core.AbstractLifeCycle.LOGGER.debug(\"Started configuration {} OK.\", this);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (!alreadyStarted.contains(root)) {\n    root.start();\n}",
            "src_parent": "{\n    org.apache.logging.log4j.core.AbstractLifeCycle.LOGGER.debug(\"Starting configuration {}\", this);\n    this.setStarting();\n    pluginManager.collectPlugins();\n    final org.apache.logging.log4j.core.config.plugins.util.PluginManager levelPlugins = new org.apache.logging.log4j.core.config.plugins.util.PluginManager(\"Level\");\n    levelPlugins.collectPlugins();\n    final java.util.Map<java.lang.String, org.apache.logging.log4j.core.config.plugins.util.PluginType<?>> plugins = levelPlugins.getPlugins();\n    if (plugins != null) {\n        for (final org.apache.logging.log4j.core.config.plugins.util.PluginType<?> type : plugins.values()) {\n            try {\n                org.apache.logging.log4j.core.util.Loader.initializeClass(type.getPluginClass().getName(), type.getPluginClass().getClassLoader());\n            } catch (final java.lang.Exception ex) {\n                org.apache.logging.log4j.core.AbstractLifeCycle.LOGGER.error(\"Unable to initialize {} due to {}: {}\", type.getPluginClass().getName(), ex.getClass().getSimpleName(), ex.getMessage());\n            }\n        }\n    }\n    setup();\n    setupAdvertisement();\n    doConfigure();\n    final java.util.Set<org.apache.logging.log4j.core.config.LoggerConfig> alreadyStarted = new java.util.HashSet<org.apache.logging.log4j.core.config.LoggerConfig>();\n    for (final org.apache.logging.log4j.core.config.LoggerConfig logger : loggers.values()) {\n        logger.start();\n        alreadyStarted.add(logger);\n    }\n    for (final org.apache.logging.log4j.core.Appender appender : appenders.values()) {\n        appender.start();\n    }\n    if (!alreadyStarted.contains(root)) {\n        root.start();\n    }\n    super.start();\n    org.apache.logging.log4j.core.AbstractLifeCycle.LOGGER.debug(\"Started configuration {} OK.\", this);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "alreadyStarted.add(logger)",
            "src_parent": "{\n    logger.start();\n    alreadyStarted.add(logger);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "VE: Modifiers_LocalVariable",
            "src_parent": "final java.util.Set<org.apache.logging.log4j.core.config.LoggerConfig> alreadyStopped = new java.util.HashSet<org.apache.logging.log4j.core.config.LoggerConfig>()",
            "src_parent_type": "LocalVariable",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "root.start()",
            "dst_parent": "{\n    root.start();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "root.start()",
            "src_parent": "{\n    org.apache.logging.log4j.core.AbstractLifeCycle.LOGGER.debug(\"Starting configuration {}\", this);\n    this.setStarting();\n    pluginManager.collectPlugins();\n    final org.apache.logging.log4j.core.config.plugins.util.PluginManager levelPlugins = new org.apache.logging.log4j.core.config.plugins.util.PluginManager(\"Level\");\n    levelPlugins.collectPlugins();\n    final java.util.Map<java.lang.String, org.apache.logging.log4j.core.config.plugins.util.PluginType<?>> plugins = levelPlugins.getPlugins();\n    if (plugins != null) {\n        for (final org.apache.logging.log4j.core.config.plugins.util.PluginType<?> type : plugins.values()) {\n            try {\n                org.apache.logging.log4j.core.util.Loader.initializeClass(type.getPluginClass().getName(), type.getPluginClass().getClassLoader());\n            } catch (final java.lang.Exception ex) {\n                org.apache.logging.log4j.core.AbstractLifeCycle.LOGGER.error(\"Unable to initialize {} due to {}: {}\", type.getPluginClass().getName(), ex.getClass().getSimpleName(), ex.getMessage());\n            }\n        }\n    }\n    setup();\n    setupAdvertisement();\n    doConfigure();\n    for (final org.apache.logging.log4j.core.config.LoggerConfig logger : loggers.values()) {\n        logger.start();\n    }\n    for (final org.apache.logging.log4j.core.Appender appender : appenders.values()) {\n        appender.start();\n    }\n    root.start();\n    super.start();\n    org.apache.logging.log4j.core.AbstractLifeCycle.LOGGER.debug(\"Started configuration {} OK.\", this);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "AbstractConfiguration"
    }
  ],
  "id": "logging-log4j2_731c84b5"
}