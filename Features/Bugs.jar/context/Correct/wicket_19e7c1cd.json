{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "private java.lang.String encoding;",
            "dst_parent": "public final class XmlPullParser implements org.apache.wicket.markup.parser.IXmlPullParser {\n    public static final java.lang.String STYLE = \"style\";\n\n    public static final java.lang.String SCRIPT = \"script\";\n\n    private java.lang.String encoding;\n\n    private org.apache.wicket.util.io.FullyBufferedReader input;\n\n    private java.lang.String skipUntilText;\n\n    private java.lang.CharSequence lastText;\n\n    private java.lang.CharSequence doctype;\n\n    private org.apache.wicket.markup.parser.HttpTagType lastType = HttpTagType.NOT_INITIALIZED;\n\n    private org.apache.wicket.markup.parser.XmlTag lastTag;\n\n    public XmlPullParser() {\n    }\n\n    @java.lang.Override\n    public final java.lang.String getEncoding() {\n        return encoding;\n    }\n\n    @java.lang.Override\n    public final java.lang.CharSequence getDoctype() {\n        return doctype;\n    }\n\n    @java.lang.Override\n    public final java.lang.CharSequence getInputFromPositionMarker(final int toPos) {\n        return input.getSubstring(toPos);\n    }\n\n    @java.lang.Override\n    public final java.lang.CharSequence getInput(final int fromPos, final int toPos) {\n        return input.getSubstring(fromPos, toPos);\n    }\n\n    private final void skipUntil() throws java.text.ParseException {\n        final int startIndex = input.getPosition();\n        final int tagNameLen = skipUntilText.length();\n        int pos = input.getPosition() - 1;\n        java.lang.String endTagText = null;\n        int lastPos = 0;\n        while (!skipUntilText.equalsIgnoreCase(endTagText)) {\n            pos = input.find(\"</\", pos + 1);\n            if ((pos == (-1)) || ((pos + (tagNameLen + 2)) >= input.size())) {\n                throw new java.text.ParseException((skipUntilText + \" tag not closed\") + getLineAndColumnText(), startIndex);\n            }\n            lastPos = pos + 2;\n            endTagText = input.getSubstring(lastPos, lastPos + tagNameLen).toString();\n        } \n        input.setPosition(pos);\n        lastText = input.getSubstring(startIndex, pos);\n        lastType = HttpTagType.BODY;\n        lastPos = input.find('>', lastPos + tagNameLen);\n        if (lastPos == (-1)) {\n            throw new java.text.ParseException((skipUntilText + \" tag not closed\") + getLineAndColumnText(), startIndex);\n        }\n        skipUntilText = null;\n    }\n\n    private java.lang.String getLineAndColumnText() {\n        return (((\" (line \" + input.getLineNumber()) + \", column \") + input.getColumnNumber()) + \")\";\n    }\n\n    @java.lang.Override\n    public final org.apache.wicket.markup.parser.HttpTagType next() throws java.text.ParseException {\n        if (input.getPosition() >= input.size()) {\n            return HttpTagType.NOT_INITIALIZED;\n        }\n        if (skipUntilText != null) {\n            skipUntil();\n            return lastType;\n        }\n        final int openBracketIndex = input.find('<');\n        if (input.charAt(input.getPosition()) != '<') {\n            if (openBracketIndex == (-1)) {\n                lastText = input.getSubstring(-1);\n                input.setPosition(input.size());\n                lastType = HttpTagType.BODY;\n                return lastType;\n            }\n            lastText = input.getSubstring(openBracketIndex);\n            input.setPosition(openBracketIndex);\n            lastType = HttpTagType.BODY;\n            return lastType;\n        }\n        input.countLinesTo(openBracketIndex);\n        int closeBracketIndex = -1;\n        if ((openBracketIndex != (-1)) && (openBracketIndex < (input.size() - 1))) {\n            char nextChar = input.charAt(openBracketIndex + 1);\n            if ((nextChar == '!') || (nextChar == '?')) {\n                closeBracketIndex = input.find('>', openBracketIndex);\n            } else {\n                closeBracketIndex = input.findOutOfQuotes('>', openBracketIndex);\n            }\n        }\n        if (closeBracketIndex == (-1)) {\n            throw new java.text.ParseException(\"No matching close bracket at\" + getLineAndColumnText(), input.getPosition());\n        }\n        lastText = input.getSubstring(openBracketIndex, closeBracketIndex + 1);\n        java.lang.String tagText = lastText.subSequence(1, lastText.length() - 1).toString();\n        if (tagText.length() == 0) {\n            throw new java.text.ParseException(\"Found empty tag: '<>' at\" + getLineAndColumnText(), input.getPosition());\n        }\n        final org.apache.wicket.markup.parser.XmlTag.TagType type;\n        if (tagText.endsWith(\"/\")) {\n            type = org.apache.wicket.markup.parser.XmlTag.TagType.OPEN_CLOSE;\n            tagText = tagText.substring(0, tagText.length() - 1);\n        } else if (tagText.startsWith(\"/\")) {\n            type = org.apache.wicket.markup.parser.XmlTag.TagType.CLOSE;\n            tagText = tagText.substring(1);\n        } else {\n            type = org.apache.wicket.markup.parser.XmlTag.TagType.OPEN;\n            if ((tagText.length() > org.apache.wicket.markup.parser.XmlPullParser.STYLE.length()) && ((tagText.charAt(0) == 's') || (tagText.charAt(0) == 'S'))) {\n                final java.lang.String lowerCase = tagText.substring(0, 6).toLowerCase();\n                if (lowerCase.startsWith(org.apache.wicket.markup.parser.XmlPullParser.SCRIPT)) {\n                    skipUntilText = org.apache.wicket.markup.parser.XmlPullParser.SCRIPT;\n                } else if (lowerCase.startsWith(org.apache.wicket.markup.parser.XmlPullParser.STYLE)) {\n                    skipUntilText = org.apache.wicket.markup.parser.XmlPullParser.STYLE;\n                }\n            }\n        }\n        final char firstChar = tagText.charAt(0);\n        if ((firstChar == '!') || (firstChar == '?')) {\n            specialTagHandling(tagText, openBracketIndex, closeBracketIndex);\n            input.countLinesTo(openBracketIndex);\n            org.apache.wicket.markup.parser.XmlTag.TextSegment text = new org.apache.wicket.markup.parser.XmlTag.TextSegment(lastText, openBracketIndex, input.getLineNumber(), input.getColumnNumber());\n            lastTag = new org.apache.wicket.markup.parser.XmlTag(text, type);\n            return lastType;\n        }\n        org.apache.wicket.markup.parser.XmlTag.TextSegment text = new org.apache.wicket.markup.parser.XmlTag.TextSegment(lastText, openBracketIndex, input.getLineNumber(), input.getColumnNumber());\n        org.apache.wicket.markup.parser.XmlTag tag = new org.apache.wicket.markup.parser.XmlTag(text, type);\n        lastTag = tag;\n        if (parseTagText(tag, tagText)) {\n            input.setPosition(closeBracketIndex + 1);\n            lastType = HttpTagType.TAG;\n            return lastType;\n        } else {\n            throw new java.text.ParseException(\"Malformed tag\" + getLineAndColumnText(), openBracketIndex);\n        }\n    }\n\n    protected void specialTagHandling(java.lang.String tagText, final int openBracketIndex, int closeBracketIndex) throws java.text.ParseException {\n        if (tagText.startsWith(\"!--\")) {\n            if (tagText.contains(\"![endif]--\")) {\n                lastType = HttpTagType.CONDITIONAL_COMMENT_ENDIF;\n                input.setPosition(closeBracketIndex + 1);\n                return;\n            }\n            if (tagText.startsWith(\"!--[if \") && tagText.endsWith(\"]\")) {\n                int pos = input.find(\"]-->\", openBracketIndex + 1);\n                if (pos == (-1)) {\n                    throw new java.text.ParseException(\"Unclosed conditional comment beginning at\" + getLineAndColumnText(), openBracketIndex);\n                }\n                pos += 4;\n                lastText = input.getSubstring(openBracketIndex, pos);\n                input.setPosition(closeBracketIndex + 1);\n                lastType = HttpTagType.CONDITIONAL_COMMENT;\n            } else {\n                int pos = input.find(\"-->\", openBracketIndex + 1);\n                if (pos == (-1)) {\n                    throw new java.text.ParseException(\"Unclosed comment beginning at\" + getLineAndColumnText(), openBracketIndex);\n                }\n                pos += 3;\n                lastText = input.getSubstring(openBracketIndex, pos);\n                lastType = HttpTagType.COMMENT;\n                input.setPosition(pos);\n            }\n            return;\n        }\n        if (tagText.equals(\"![endif]--\")) {\n            lastType = HttpTagType.CONDITIONAL_COMMENT_ENDIF;\n            input.setPosition(closeBracketIndex + 1);\n            return;\n        }\n        if (tagText.startsWith(\"![\")) {\n            final java.lang.String startText = (tagText.length() <= 8) ? tagText : tagText.substring(0, 8);\n            if (startText.toUpperCase().equals(\"![CDATA[\")) {\n                int pos1 = openBracketIndex;\n                do {\n                    closeBracketIndex = findChar('>', pos1);\n                    if (closeBracketIndex == (-1)) {\n                        throw new java.text.ParseException(\"No matching close bracket at\" + getLineAndColumnText(), input.getPosition());\n                    }\n                    tagText = input.getSubstring(openBracketIndex + 1, closeBracketIndex).toString();\n                    pos1 = closeBracketIndex + 1;\n                } while (tagText.endsWith(\"]]\") == false );\n                input.setPosition(closeBracketIndex + 1);\n                lastText = tagText;\n                lastType = HttpTagType.CDATA;\n                return;\n            }\n        }\n        if (tagText.charAt(0) == '?') {\n            lastType = HttpTagType.PROCESSING_INSTRUCTION;\n            input.setPosition(closeBracketIndex + 1);\n            return;\n        }\n        if (tagText.startsWith(\"!DOCTYPE\")) {\n            lastType = HttpTagType.DOCTYPE;\n            doctype = input.getSubstring(openBracketIndex + 1, closeBracketIndex);\n            input.setPosition(closeBracketIndex + 1);\n            return;\n        }\n        lastType = HttpTagType.SPECIAL_TAG;\n        input.setPosition(closeBracketIndex + 1);\n    }\n\n    @java.lang.Override\n    public final org.apache.wicket.markup.parser.XmlTag getElement() {\n        return lastTag;\n    }\n\n    @java.lang.Override\n    public final java.lang.CharSequence getString() {\n        return lastText;\n    }\n\n    public final org.apache.wicket.markup.parser.XmlTag nextTag() throws java.text.ParseException {\n        while (next() != HttpTagType.NOT_INITIALIZED) {\n            switch (lastType) {\n                case TAG :\n                    return lastTag;\n                case BODY :\n                    break;\n                case COMMENT :\n                    break;\n                case CONDITIONAL_COMMENT :\n                    break;\n                case CDATA :\n                    break;\n                case PROCESSING_INSTRUCTION :\n                    break;\n                case SPECIAL_TAG :\n                    break;\n            }\n        } \n        return null;\n    }\n\n    private int findChar(final char ch, int startIndex) {\n        char quote = 0;\n        for (; startIndex < input.size(); startIndex++) {\n            final char charAt = input.charAt(startIndex);\n            if (quote != 0) {\n                if (quote == charAt) {\n                    quote = 0;\n                }\n            } else if ((charAt == '\"') || (charAt == '\\'')) {\n                quote = charAt;\n            } else if (charAt == ch) {\n                return startIndex;\n            }\n        }\n        return -1;\n    }\n\n    @java.lang.Override\n    public void parse(final java.lang.CharSequence string) throws java.io.IOException {\n        org.apache.wicket.util.lang.Args.notNull(string, \"string\");\n        this.input = new org.apache.wicket.util.io.FullyBufferedReader(new java.io.StringReader(string.toString()));\n        this.encoding = null;\n    }\n\n    @java.lang.Override\n    public void parse(final java.io.InputStream in) throws java.io.IOException {\n        parse(in, \"UTF-8\");\n    }\n\n    @java.lang.Override\n    public void parse(final java.io.InputStream inputStream, final java.lang.String encoding) throws java.io.IOException {\n        org.apache.wicket.util.lang.Args.notNull(inputStream, \"inputStream\");\n        try {\n            org.apache.wicket.util.io.XmlReader xmlReader = new org.apache.wicket.util.io.XmlReader(new java.io.BufferedInputStream(inputStream, 4000), encoding);\n            this.input = new org.apache.wicket.util.io.FullyBufferedReader(xmlReader);\n            this.encoding = xmlReader.getEncoding();\n        } finally {\n            org.apache.wicket.util.io.IOUtils.closeQuietly(inputStream);\n        }\n    }\n\n    @java.lang.Override\n    public final void setPositionMarker() {\n        input.setPositionMarker(input.getPosition());\n    }\n\n    @java.lang.Override\n    public final void setPositionMarker(final int pos) {\n        input.setPositionMarker(pos);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return input.toString();\n    }\n\n    private boolean parseTagText(final org.apache.wicket.markup.parser.XmlTag tag, final java.lang.String tagText) throws java.text.ParseException {\n        final int tagTextLength = tagText.length();\n        final org.apache.wicket.util.parse.metapattern.parsers.TagNameParser tagnameParser = new org.apache.wicket.util.parse.metapattern.parsers.TagNameParser(tagText);\n        if (tagnameParser.matcher().lookingAt()) {\n            tag.name = tagnameParser.getName();\n            tag.namespace = tagnameParser.getNamespace();\n            int pos = tagnameParser.matcher().end(0);\n            if (pos == tagTextLength) {\n                return true;\n            }\n            final org.apache.wicket.util.parse.metapattern.parsers.VariableAssignmentParser attributeParser = new org.apache.wicket.util.parse.metapattern.parsers.VariableAssignmentParser(tagText);\n            while (attributeParser.matcher().find(pos)) {\n                java.lang.String value = attributeParser.getValue();\n                if (value == null) {\n                    value = \"\";\n                }\n                pos = attributeParser.matcher().end(0);\n                if (value.startsWith(\"\\\"\") || value.startsWith(\"\\'\")) {\n                    value = value.substring(1, value.length() - 1);\n                }\n                value = value.trim();\n                value = org.apache.wicket.util.string.Strings.unescapeMarkup(value).toString();\n                final java.lang.String key = attributeParser.getKey();\n                if (null != tag.getAttributes().put(key, value)) {\n                    throw new java.text.ParseException((\"Same attribute found twice: \" + key) + getLineAndColumnText(), input.getPosition());\n                }\n                if (pos == tagTextLength) {\n                    return true;\n                }\n            } \n            return true;\n        }\n        return false;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Field",
            "operator": "UPD",
            "src": "private org.apache.wicket.util.io.XmlReader xmlReader;",
            "src_parent": "public final class XmlPullParser implements org.apache.wicket.markup.parser.IXmlPullParser {\n    public static final java.lang.String STYLE = \"style\";\n\n    public static final java.lang.String SCRIPT = \"script\";\n\n    private org.apache.wicket.util.io.XmlReader xmlReader;\n\n    private org.apache.wicket.util.io.FullyBufferedReader input;\n\n    private java.lang.String skipUntilText;\n\n    private java.lang.CharSequence lastText;\n\n    private java.lang.CharSequence doctype;\n\n    private org.apache.wicket.markup.parser.HttpTagType lastType = HttpTagType.NOT_INITIALIZED;\n\n    private org.apache.wicket.markup.parser.XmlTag lastTag;\n\n    public XmlPullParser() {\n    }\n\n    @java.lang.Override\n    public final java.lang.String getEncoding() {\n        return xmlReader.getEncoding();\n    }\n\n    @java.lang.Override\n    public final java.lang.CharSequence getDoctype() {\n        return doctype;\n    }\n\n    @java.lang.Override\n    public final java.lang.CharSequence getInputFromPositionMarker(final int toPos) {\n        return input.getSubstring(toPos);\n    }\n\n    @java.lang.Override\n    public final java.lang.CharSequence getInput(final int fromPos, final int toPos) {\n        return input.getSubstring(fromPos, toPos);\n    }\n\n    private final void skipUntil() throws java.text.ParseException {\n        final int startIndex = input.getPosition();\n        final int tagNameLen = skipUntilText.length();\n        int pos = input.getPosition() - 1;\n        java.lang.String endTagText = null;\n        int lastPos = 0;\n        while (!skipUntilText.equalsIgnoreCase(endTagText)) {\n            pos = input.find(\"</\", pos + 1);\n            if ((pos == (-1)) || ((pos + (tagNameLen + 2)) >= input.size())) {\n                throw new java.text.ParseException((skipUntilText + \" tag not closed\") + getLineAndColumnText(), startIndex);\n            }\n            lastPos = pos + 2;\n            endTagText = input.getSubstring(lastPos, lastPos + tagNameLen).toString();\n        } \n        input.setPosition(pos);\n        lastText = input.getSubstring(startIndex, pos);\n        lastType = HttpTagType.BODY;\n        lastPos = input.find('>', lastPos + tagNameLen);\n        if (lastPos == (-1)) {\n            throw new java.text.ParseException((skipUntilText + \" tag not closed\") + getLineAndColumnText(), startIndex);\n        }\n        skipUntilText = null;\n    }\n\n    private java.lang.String getLineAndColumnText() {\n        return (((\" (line \" + input.getLineNumber()) + \", column \") + input.getColumnNumber()) + \")\";\n    }\n\n    @java.lang.Override\n    public final org.apache.wicket.markup.parser.HttpTagType next() throws java.text.ParseException {\n        if (input.getPosition() >= input.size()) {\n            return HttpTagType.NOT_INITIALIZED;\n        }\n        if (skipUntilText != null) {\n            skipUntil();\n            return lastType;\n        }\n        final int openBracketIndex = input.find('<');\n        if (input.charAt(input.getPosition()) != '<') {\n            if (openBracketIndex == (-1)) {\n                lastText = input.getSubstring(-1);\n                input.setPosition(input.size());\n                lastType = HttpTagType.BODY;\n                return lastType;\n            }\n            lastText = input.getSubstring(openBracketIndex);\n            input.setPosition(openBracketIndex);\n            lastType = HttpTagType.BODY;\n            return lastType;\n        }\n        input.countLinesTo(openBracketIndex);\n        int closeBracketIndex = -1;\n        if ((openBracketIndex != (-1)) && (openBracketIndex < (input.size() - 1))) {\n            char nextChar = input.charAt(openBracketIndex + 1);\n            if ((nextChar == '!') || (nextChar == '?')) {\n                closeBracketIndex = input.find('>', openBracketIndex);\n            } else {\n                closeBracketIndex = input.findOutOfQuotes('>', openBracketIndex);\n            }\n        }\n        if (closeBracketIndex == (-1)) {\n            throw new java.text.ParseException(\"No matching close bracket at\" + getLineAndColumnText(), input.getPosition());\n        }\n        lastText = input.getSubstring(openBracketIndex, closeBracketIndex + 1);\n        java.lang.String tagText = lastText.subSequence(1, lastText.length() - 1).toString();\n        if (tagText.length() == 0) {\n            throw new java.text.ParseException(\"Found empty tag: '<>' at\" + getLineAndColumnText(), input.getPosition());\n        }\n        final org.apache.wicket.markup.parser.XmlTag.TagType type;\n        if (tagText.endsWith(\"/\")) {\n            type = org.apache.wicket.markup.parser.XmlTag.TagType.OPEN_CLOSE;\n            tagText = tagText.substring(0, tagText.length() - 1);\n        } else if (tagText.startsWith(\"/\")) {\n            type = org.apache.wicket.markup.parser.XmlTag.TagType.CLOSE;\n            tagText = tagText.substring(1);\n        } else {\n            type = org.apache.wicket.markup.parser.XmlTag.TagType.OPEN;\n            if ((tagText.length() > org.apache.wicket.markup.parser.XmlPullParser.STYLE.length()) && ((tagText.charAt(0) == 's') || (tagText.charAt(0) == 'S'))) {\n                final java.lang.String lowerCase = tagText.substring(0, 6).toLowerCase();\n                if (lowerCase.startsWith(org.apache.wicket.markup.parser.XmlPullParser.SCRIPT)) {\n                    skipUntilText = org.apache.wicket.markup.parser.XmlPullParser.SCRIPT;\n                } else if (lowerCase.startsWith(org.apache.wicket.markup.parser.XmlPullParser.STYLE)) {\n                    skipUntilText = org.apache.wicket.markup.parser.XmlPullParser.STYLE;\n                }\n            }\n        }\n        final char firstChar = tagText.charAt(0);\n        if ((firstChar == '!') || (firstChar == '?')) {\n            specialTagHandling(tagText, openBracketIndex, closeBracketIndex);\n            input.countLinesTo(openBracketIndex);\n            org.apache.wicket.markup.parser.XmlTag.TextSegment text = new org.apache.wicket.markup.parser.XmlTag.TextSegment(lastText, openBracketIndex, input.getLineNumber(), input.getColumnNumber());\n            lastTag = new org.apache.wicket.markup.parser.XmlTag(text, type);\n            return lastType;\n        }\n        org.apache.wicket.markup.parser.XmlTag.TextSegment text = new org.apache.wicket.markup.parser.XmlTag.TextSegment(lastText, openBracketIndex, input.getLineNumber(), input.getColumnNumber());\n        org.apache.wicket.markup.parser.XmlTag tag = new org.apache.wicket.markup.parser.XmlTag(text, type);\n        lastTag = tag;\n        if (parseTagText(tag, tagText)) {\n            input.setPosition(closeBracketIndex + 1);\n            lastType = HttpTagType.TAG;\n            return lastType;\n        } else {\n            throw new java.text.ParseException(\"Malformed tag\" + getLineAndColumnText(), openBracketIndex);\n        }\n    }\n\n    protected void specialTagHandling(java.lang.String tagText, final int openBracketIndex, int closeBracketIndex) throws java.text.ParseException {\n        if (tagText.startsWith(\"!--\")) {\n            if (tagText.contains(\"![endif]--\")) {\n                lastType = HttpTagType.CONDITIONAL_COMMENT_ENDIF;\n                input.setPosition(closeBracketIndex + 1);\n                return;\n            }\n            if (tagText.startsWith(\"!--[if \") && tagText.endsWith(\"]\")) {\n                int pos = input.find(\"]-->\", openBracketIndex + 1);\n                if (pos == (-1)) {\n                    throw new java.text.ParseException(\"Unclosed conditional comment beginning at\" + getLineAndColumnText(), openBracketIndex);\n                }\n                pos += 4;\n                lastText = input.getSubstring(openBracketIndex, pos);\n                input.setPosition(closeBracketIndex + 1);\n                lastType = HttpTagType.CONDITIONAL_COMMENT;\n            } else {\n                int pos = input.find(\"-->\", openBracketIndex + 1);\n                if (pos == (-1)) {\n                    throw new java.text.ParseException(\"Unclosed comment beginning at\" + getLineAndColumnText(), openBracketIndex);\n                }\n                pos += 3;\n                lastText = input.getSubstring(openBracketIndex, pos);\n                lastType = HttpTagType.COMMENT;\n                input.setPosition(pos);\n            }\n            return;\n        }\n        if (tagText.equals(\"![endif]--\")) {\n            lastType = HttpTagType.CONDITIONAL_COMMENT_ENDIF;\n            input.setPosition(closeBracketIndex + 1);\n            return;\n        }\n        if (tagText.startsWith(\"![\")) {\n            final java.lang.String startText = (tagText.length() <= 8) ? tagText : tagText.substring(0, 8);\n            if (startText.toUpperCase().equals(\"![CDATA[\")) {\n                int pos1 = openBracketIndex;\n                do {\n                    closeBracketIndex = findChar('>', pos1);\n                    if (closeBracketIndex == (-1)) {\n                        throw new java.text.ParseException(\"No matching close bracket at\" + getLineAndColumnText(), input.getPosition());\n                    }\n                    tagText = input.getSubstring(openBracketIndex + 1, closeBracketIndex).toString();\n                    pos1 = closeBracketIndex + 1;\n                } while (tagText.endsWith(\"]]\") == false );\n                input.setPosition(closeBracketIndex + 1);\n                lastText = tagText;\n                lastType = HttpTagType.CDATA;\n                return;\n            }\n        }\n        if (tagText.charAt(0) == '?') {\n            lastType = HttpTagType.PROCESSING_INSTRUCTION;\n            input.setPosition(closeBracketIndex + 1);\n            return;\n        }\n        if (tagText.startsWith(\"!DOCTYPE\")) {\n            lastType = HttpTagType.DOCTYPE;\n            doctype = input.getSubstring(openBracketIndex + 1, closeBracketIndex);\n            input.setPosition(closeBracketIndex + 1);\n            return;\n        }\n        lastType = HttpTagType.SPECIAL_TAG;\n        input.setPosition(closeBracketIndex + 1);\n    }\n\n    @java.lang.Override\n    public final org.apache.wicket.markup.parser.XmlTag getElement() {\n        return lastTag;\n    }\n\n    @java.lang.Override\n    public final java.lang.CharSequence getString() {\n        return lastText;\n    }\n\n    public final org.apache.wicket.markup.parser.XmlTag nextTag() throws java.text.ParseException {\n        while (next() != HttpTagType.NOT_INITIALIZED) {\n            switch (lastType) {\n                case TAG :\n                    return lastTag;\n                case BODY :\n                    break;\n                case COMMENT :\n                    break;\n                case CONDITIONAL_COMMENT :\n                    break;\n                case CDATA :\n                    break;\n                case PROCESSING_INSTRUCTION :\n                    break;\n                case SPECIAL_TAG :\n                    break;\n            }\n        } \n        return null;\n    }\n\n    private int findChar(final char ch, int startIndex) {\n        char quote = 0;\n        for (; startIndex < input.size(); startIndex++) {\n            final char charAt = input.charAt(startIndex);\n            if (quote != 0) {\n                if (quote == charAt) {\n                    quote = 0;\n                }\n            } else if ((charAt == '\"') || (charAt == '\\'')) {\n                quote = charAt;\n            } else if (charAt == ch) {\n                return startIndex;\n            }\n        }\n        return -1;\n    }\n\n    @java.lang.Override\n    public void parse(final java.lang.CharSequence string) throws java.io.IOException {\n        parse(new java.io.ByteArrayInputStream(string.toString().getBytes()), null);\n    }\n\n    @java.lang.Override\n    public void parse(final java.io.InputStream in) throws java.io.IOException {\n        parse(in, \"UTF-8\");\n    }\n\n    @java.lang.Override\n    public void parse(final java.io.InputStream inputStream, final java.lang.String encoding) throws java.io.IOException {\n        org.apache.wicket.util.lang.Args.notNull(inputStream, \"inputStream\");\n        try {\n            xmlReader = new org.apache.wicket.util.io.XmlReader(new java.io.BufferedInputStream(inputStream, 4000), encoding);\n            input = new org.apache.wicket.util.io.FullyBufferedReader(xmlReader);\n        } finally {\n            org.apache.wicket.util.io.IOUtils.closeQuietly(inputStream);\n            org.apache.wicket.util.io.IOUtils.closeQuietly(xmlReader);\n        }\n    }\n\n    @java.lang.Override\n    public final void setPositionMarker() {\n        input.setPositionMarker(input.getPosition());\n    }\n\n    @java.lang.Override\n    public final void setPositionMarker(final int pos) {\n        input.setPositionMarker(pos);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return input.toString();\n    }\n\n    private boolean parseTagText(final org.apache.wicket.markup.parser.XmlTag tag, final java.lang.String tagText) throws java.text.ParseException {\n        final int tagTextLength = tagText.length();\n        final org.apache.wicket.util.parse.metapattern.parsers.TagNameParser tagnameParser = new org.apache.wicket.util.parse.metapattern.parsers.TagNameParser(tagText);\n        if (tagnameParser.matcher().lookingAt()) {\n            tag.name = tagnameParser.getName();\n            tag.namespace = tagnameParser.getNamespace();\n            int pos = tagnameParser.matcher().end(0);\n            if (pos == tagTextLength) {\n                return true;\n            }\n            final org.apache.wicket.util.parse.metapattern.parsers.VariableAssignmentParser attributeParser = new org.apache.wicket.util.parse.metapattern.parsers.VariableAssignmentParser(tagText);\n            while (attributeParser.matcher().find(pos)) {\n                java.lang.String value = attributeParser.getValue();\n                if (value == null) {\n                    value = \"\";\n                }\n                pos = attributeParser.matcher().end(0);\n                if (value.startsWith(\"\\\"\") || value.startsWith(\"\\'\")) {\n                    value = value.substring(1, value.length() - 1);\n                }\n                value = value.trim();\n                value = org.apache.wicket.util.string.Strings.unescapeMarkup(value).toString();\n                final java.lang.String key = attributeParser.getKey();\n                if (null != tag.getAttributes().put(key, value)) {\n                    throw new java.text.ParseException((\"Same attribute found twice: \" + key) + getLineAndColumnText(), input.getPosition());\n                }\n                if (pos == tagTextLength) {\n                    return true;\n                }\n            } \n            return true;\n        }\n        return false;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Field",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String",
            "dst_parent": "private java.lang.String encoding;",
            "dst_parent_type": "Field",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "org.apache.wicket.util.io.XmlReader",
            "src_parent": "private org.apache.wicket.util.io.XmlReader xmlReader;",
            "src_parent_type": "Field",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "new java.io.StringReader(string.toString())",
            "dst_parent": "new org.apache.wicket.util.io.FullyBufferedReader(new java.io.StringReader(string.toString()))",
            "dst_parent_type": "ConstructorCall",
            "dst_type": "ConstructorCall",
            "operator": "UPD",
            "src": "new java.io.ByteArrayInputStream(string.toString().getBytes())",
            "src_parent": "parse(new java.io.ByteArrayInputStream(string.toString().getBytes()), null)",
            "src_parent_type": "Invocation",
            "src_type": "ConstructorCall"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "this.input",
            "dst_parent": "this.input = new org.apache.wicket.util.io.FullyBufferedReader(xmlReader)",
            "dst_parent_type": "Assignment",
            "dst_type": "FieldWrite",
            "operator": "UPD",
            "src": "xmlReader",
            "src_parent": "xmlReader = new org.apache.wicket.util.io.XmlReader(new java.io.BufferedInputStream(inputStream, 4000), encoding)",
            "src_parent_type": "Assignment",
            "src_type": "FieldWrite"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "this.encoding",
            "dst_parent": "this.encoding = xmlReader.getEncoding()",
            "dst_parent_type": "Assignment",
            "dst_type": "FieldWrite",
            "operator": "UPD",
            "src": "input",
            "src_parent": "input = new org.apache.wicket.util.io.FullyBufferedReader(xmlReader)",
            "src_parent_type": "Assignment",
            "src_type": "FieldWrite"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "xmlReader.getEncoding()",
            "src_parent": "return xmlReader.getEncoding()",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "parse(new java.io.ByteArrayInputStream(string.toString().getBytes()), null)",
            "src_parent": "{\n    parse(new java.io.ByteArrayInputStream(string.toString().getBytes()), null);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "new org.apache.wicket.util.io.FullyBufferedReader(xmlReader)",
            "src_parent": "input = new org.apache.wicket.util.io.FullyBufferedReader(xmlReader)",
            "src_parent_type": "Assignment",
            "src_type": "ConstructorCall"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "org.apache.wicket.util.io.IOUtils.closeQuietly(xmlReader)",
            "src_parent": "{\n    org.apache.wicket.util.io.IOUtils.closeQuietly(inputStream);\n    org.apache.wicket.util.io.IOUtils.closeQuietly(xmlReader);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.wicket.util.lang.Args.notNull(string, \"string\")",
            "src_parent": "{\n    org.apache.wicket.util.lang.Args.notNull(string, \"string\");\n    this.input = new org.apache.wicket.util.io.FullyBufferedReader(new java.io.StringReader(string.toString()));\n    this.encoding = null;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "this.input = new org.apache.wicket.util.io.FullyBufferedReader(new java.io.StringReader(string.toString()))",
            "src_parent": "{\n    org.apache.wicket.util.lang.Args.notNull(string, \"string\");\n    this.input = new org.apache.wicket.util.io.FullyBufferedReader(new java.io.StringReader(string.toString()));\n    this.encoding = null;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "this.encoding = null",
            "src_parent": "{\n    org.apache.wicket.util.lang.Args.notNull(string, \"string\");\n    this.input = new org.apache.wicket.util.io.FullyBufferedReader(new java.io.StringReader(string.toString()));\n    this.encoding = null;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "encoding",
            "src_parent": "return encoding",
            "src_parent_type": "Return",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.wicket.util.io.XmlReader xmlReader = new org.apache.wicket.util.io.XmlReader(new java.io.BufferedInputStream(inputStream, 4000), encoding)",
            "src_parent": "{\n    org.apache.wicket.util.io.XmlReader xmlReader = new org.apache.wicket.util.io.XmlReader(new java.io.BufferedInputStream(inputStream, 4000), encoding);\n    this.input = new org.apache.wicket.util.io.FullyBufferedReader(xmlReader);\n    this.encoding = xmlReader.getEncoding();\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "new org.apache.wicket.util.io.FullyBufferedReader(xmlReader)",
            "src_parent": "this.input = new org.apache.wicket.util.io.FullyBufferedReader(xmlReader)",
            "src_parent_type": "Assignment",
            "src_type": "ConstructorCall"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "xmlReader.getEncoding()",
            "src_parent": "this.encoding = xmlReader.getEncoding()",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.wicket.markup.parser.XmlPullParser",
            "dst_parent": "",
            "dst_parent_type": "ThisAccess",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "org.apache.wicket.markup.parser.XmlPullParser",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "new java.io.StringReader(string.toString())",
            "dst_parent": "new org.apache.wicket.util.io.FullyBufferedReader(new java.io.StringReader(string.toString()))",
            "dst_parent_type": "ConstructorCall",
            "dst_type": "ConstructorCall",
            "operator": "MOV",
            "src": "new java.io.ByteArrayInputStream(string.toString().getBytes())",
            "src_parent": "parse(new java.io.ByteArrayInputStream(string.toString().getBytes()), null)",
            "src_parent_type": "Invocation",
            "src_type": "ConstructorCall"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "new org.apache.wicket.util.io.XmlReader(new java.io.BufferedInputStream(inputStream, 4000), encoding)",
            "dst_parent": "org.apache.wicket.util.io.XmlReader xmlReader = new org.apache.wicket.util.io.XmlReader(new java.io.BufferedInputStream(inputStream, 4000), encoding)",
            "dst_parent_type": "LocalVariable",
            "dst_type": "ConstructorCall",
            "operator": "MOV",
            "src": "new org.apache.wicket.util.io.XmlReader(new java.io.BufferedInputStream(inputStream, 4000), encoding)",
            "src_parent": "xmlReader = new org.apache.wicket.util.io.XmlReader(new java.io.BufferedInputStream(inputStream, 4000), encoding)",
            "src_parent_type": "Assignment",
            "src_type": "ConstructorCall"
          }
        }
      ],
      "file_name": "XmlPullParser"
    }
  ],
  "id": "wicket_19e7c1cd"
}