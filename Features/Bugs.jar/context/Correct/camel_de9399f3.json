{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Synchronized",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "synchronized(misses) {\n    misses.put(key, key);\n}",
            "src_parent": "{\n    if (log.isTraceEnabled()) {\n        log.trace(\"Converting {} -> {} with value: {}\", new java.lang.Object[]{ value == null ? \"null\" : value.getClass().getCanonicalName(), type.getCanonicalName(), value });\n    }\n    if (value == null) {\n        if (boolean.class.isAssignableFrom(type)) {\n            return java.lang.Boolean.FALSE;\n        }\n        return null;\n    }\n    if (type.isInstance(value)) {\n        return type.cast(value);\n    }\n    org.apache.camel.impl.converter.BaseTypeConverterRegistry.TypeMapping key = new org.apache.camel.impl.converter.BaseTypeConverterRegistry.TypeMapping(type, value.getClass());\n    if (misses.containsKey(key)) {\n        return java.lang.Void.TYPE;\n    }\n    org.apache.camel.TypeConverter converter = getOrFindTypeConverter(type, value);\n    if (converter != null) {\n        log.trace(\"Using converter: {} to convert {}\", converter, key);\n        java.lang.Object rc = converter.convertTo(type, exchange, value);\n        if (rc != null) {\n            return rc;\n        }\n    }\n    for (org.apache.camel.impl.converter.BaseTypeConverterRegistry.FallbackTypeConverter fallback : fallbackConverters) {\n        java.lang.Object rc = fallback.getFallbackTypeConverter().convertTo(type, exchange, value);\n        if (java.lang.Void.TYPE.equals(rc)) {\n            return java.lang.Void.TYPE;\n        }\n        if (rc != null) {\n            if (fallback.isCanPromote()) {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"Promoting fallback type converter as a known type converter to convert from: {} to: {} for the fallback converter: {}\", new java.lang.Object[]{ type.getCanonicalName(), value.getClass().getCanonicalName(), fallback.getFallbackTypeConverter() });\n                }\n                addTypeConverter(type, value.getClass(), fallback.getFallbackTypeConverter());\n            }\n            if (log.isTraceEnabled()) {\n                log.trace(\"Fallback type converter {} converted type from: {} to: {}\", new java.lang.Object[]{ fallback.getFallbackTypeConverter(), type.getCanonicalName(), value.getClass().getCanonicalName() });\n            }\n            return rc;\n        }\n    }\n    if (type.isPrimitive()) {\n        java.lang.Class primitiveType = org.apache.camel.util.ObjectHelper.convertPrimitiveTypeToWrapperType(type);\n        if (primitiveType != type) {\n            return convertTo(primitiveType, exchange, value);\n        }\n    }\n    synchronized(misses) {\n        misses.put(key, key);\n    }\n    return java.lang.Void.TYPE;\n}",
            "src_parent_type": "Block",
            "src_type": "Synchronized"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Synchronized",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "misses.remove(key)",
            "src_parent": "{\n    if (converter != null) {\n        log.warn(((\"Overriding type converter from: \" + converter) + \" to: \") + typeConverter);\n    }\n    typeMappings.put(key, typeConverter);\n    misses.remove(key);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Synchronized",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "misses.put(key, key)",
            "dst_parent": "{\n    if (log.isTraceEnabled()) {\n        log.trace(\"Converting {} -> {} with value: {}\", new java.lang.Object[]{ value == null ? \"null\" : value.getClass().getCanonicalName(), type.getCanonicalName(), value });\n    }\n    if (value == null) {\n        if (boolean.class.isAssignableFrom(type)) {\n            return java.lang.Boolean.FALSE;\n        }\n        return null;\n    }\n    if (type.isInstance(value)) {\n        return type.cast(value);\n    }\n    org.apache.camel.impl.converter.BaseTypeConverterRegistry.TypeMapping key = new org.apache.camel.impl.converter.BaseTypeConverterRegistry.TypeMapping(type, value.getClass());\n    if (misses.containsKey(key)) {\n        return java.lang.Void.TYPE;\n    }\n    org.apache.camel.TypeConverter converter = getOrFindTypeConverter(type, value);\n    if (converter != null) {\n        log.trace(\"Using converter: {} to convert {}\", converter, key);\n        java.lang.Object rc = converter.convertTo(type, exchange, value);\n        if (rc != null) {\n            return rc;\n        }\n    }\n    for (org.apache.camel.impl.converter.BaseTypeConverterRegistry.FallbackTypeConverter fallback : fallbackConverters) {\n        java.lang.Object rc = fallback.getFallbackTypeConverter().convertTo(type, exchange, value);\n        if (java.lang.Void.TYPE.equals(rc)) {\n            return java.lang.Void.TYPE;\n        }\n        if (rc != null) {\n            if (fallback.isCanPromote()) {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"Promoting fallback type converter as a known type converter to convert from: {} to: {} for the fallback converter: {}\", new java.lang.Object[]{ type.getCanonicalName(), value.getClass().getCanonicalName(), fallback.getFallbackTypeConverter() });\n                }\n                addTypeConverter(type, value.getClass(), fallback.getFallbackTypeConverter());\n            }\n            if (log.isTraceEnabled()) {\n                log.trace(\"Fallback type converter {} converted type from: {} to: {}\", new java.lang.Object[]{ fallback.getFallbackTypeConverter(), type.getCanonicalName(), value.getClass().getCanonicalName() });\n            }\n            return rc;\n        }\n    }\n    if (type.isPrimitive()) {\n        java.lang.Class primitiveType = org.apache.camel.util.ObjectHelper.convertPrimitiveTypeToWrapperType(type);\n        if (primitiveType != type) {\n            return convertTo(primitiveType, exchange, value);\n        }\n    }\n    misses.put(key, key);\n    return java.lang.Void.TYPE;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "misses.put(key, key)",
            "src_parent": "{\n    misses.put(key, key);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Synchronized",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "misses",
            "dst_parent": "misses.remove(key)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "misses",
            "src_parent": "synchronized(misses) {\n    misses.put(key, key);\n}",
            "src_parent_type": "Synchronized",
            "src_type": "FieldRead"
          }
        }
      ],
      "file_name": "BaseTypeConverterRegistry"
    }
  ],
  "id": "camel_de9399f3"
}