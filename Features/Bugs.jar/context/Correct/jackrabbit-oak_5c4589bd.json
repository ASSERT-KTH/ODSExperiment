{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "true",
            "src_parent": "while (true) {\n    if ((t == null) || (!t.exists())) {\n        return;\n    }\n    int slash = oakPropertyName.indexOf('/');\n    if (slash < 0) {\n        break;\n    }\n    java.lang.String parent = oakPropertyName.substring(0, slash);\n    oakPropertyName = oakPropertyName.substring(slash + 1);\n    if (parent.equals(\"..\")) {\n        t = (t.isRoot()) ? null : t.getParent();\n    } else if (parent.equals(\".\")) {\n    } else if (parent.equals(\"*\")) {\n        for (org.apache.jackrabbit.oak.api.Tree child : t.getChildren()) {\n            readOakProperties(target, child, oakPropertyName, propertyType);\n        }\n        skipCurrentNode = true;\n    } else {\n        t = t.getChild(parent);\n    }\n} ",
            "src_parent_type": "While",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.query.ast.SelectorImpl.class);",
            "src_parent": "public class SelectorImpl extends org.apache.jackrabbit.oak.query.ast.SourceImpl {\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.jackrabbit.oak.query.ast.SelectorImpl.class);\n\n    private org.apache.jackrabbit.oak.query.plan.SelectorExecutionPlan plan;\n\n    private org.apache.jackrabbit.oak.query.ast.ConstraintImpl queryConstraint;\n\n    private org.apache.jackrabbit.oak.query.ast.JoinConditionImpl joinCondition;\n\n    private final org.apache.jackrabbit.oak.spi.state.NodeState nodeType;\n\n    private final java.lang.String selectorName;\n\n    private final java.lang.String nodeTypeName;\n\n    private final boolean matchesAllTypes;\n\n    private final java.util.Set<java.lang.String> supertypes;\n\n    private final java.util.Set<java.lang.String> primaryTypes;\n\n    private final java.util.Set<java.lang.String> mixinTypes;\n\n    private boolean isParent;\n\n    private boolean outerJoinLeftHandSide;\n\n    private boolean outerJoinRightHandSide;\n\n    private java.util.ArrayList<org.apache.jackrabbit.oak.query.ast.JoinConditionImpl> allJoinConditions = new java.util.ArrayList<org.apache.jackrabbit.oak.query.ast.JoinConditionImpl>();\n\n    private final java.util.List<org.apache.jackrabbit.oak.query.ast.ConstraintImpl> selectorConstraints = com.google.common.collect.Lists.newArrayList();\n\n    private org.apache.jackrabbit.oak.spi.query.Cursor cursor;\n\n    private org.apache.jackrabbit.oak.spi.query.IndexRow currentRow;\n\n    private int scanCount;\n\n    private org.apache.jackrabbit.oak.api.Tree lastTree;\n\n    private java.lang.String lastPath;\n\n    public SelectorImpl(org.apache.jackrabbit.oak.spi.state.NodeState nodeType, java.lang.String selectorName) {\n        this.nodeType = com.google.common.base.Preconditions.checkNotNull(nodeType);\n        this.selectorName = com.google.common.base.Preconditions.checkNotNull(selectorName);\n        this.nodeTypeName = nodeType.getName(org.apache.jackrabbit.JcrConstants.JCR_NODETYPENAME);\n        this.matchesAllTypes = org.apache.jackrabbit.JcrConstants.NT_BASE.equals(nodeTypeName);\n        if (!this.matchesAllTypes) {\n            this.supertypes = com.google.common.collect.Sets.newHashSet(nodeType.getNames(org.apache.jackrabbit.oak.query.ast.REP_SUPERTYPES));\n            supertypes.add(nodeTypeName);\n            this.primaryTypes = com.google.common.collect.Sets.newHashSet(nodeType.getNames(org.apache.jackrabbit.oak.query.ast.REP_PRIMARY_SUBTYPES));\n            this.mixinTypes = com.google.common.collect.Sets.newHashSet(nodeType.getNames(org.apache.jackrabbit.oak.query.ast.REP_MIXIN_SUBTYPES));\n            if (nodeType.getBoolean(org.apache.jackrabbit.JcrConstants.JCR_ISMIXIN)) {\n                mixinTypes.add(nodeTypeName);\n            } else {\n                primaryTypes.add(nodeTypeName);\n            }\n        } else {\n            this.supertypes = com.google.common.collect.ImmutableSet.of();\n            this.primaryTypes = com.google.common.collect.ImmutableSet.of();\n            this.mixinTypes = com.google.common.collect.ImmutableSet.of();\n        }\n    }\n\n    public java.lang.String getSelectorName() {\n        return selectorName;\n    }\n\n    public boolean matchesAllTypes() {\n        return matchesAllTypes;\n    }\n\n    @javax.annotation.Nonnull\n    public java.util.Set<java.lang.String> getSupertypes() {\n        return supertypes;\n    }\n\n    @javax.annotation.Nonnull\n    public java.util.Set<java.lang.String> getPrimaryTypes() {\n        return primaryTypes;\n    }\n\n    @javax.annotation.Nonnull\n    public java.util.Set<java.lang.String> getMixinTypes() {\n        return mixinTypes;\n    }\n\n    public java.lang.Iterable<java.lang.String> getWildcardColumns() {\n        return nodeType.getNames(org.apache.jackrabbit.oak.query.ast.REP_NAMED_SINGLE_VALUED_PROPERTIES);\n    }\n\n    @java.lang.Override\n    boolean accept(org.apache.jackrabbit.oak.query.ast.AstVisitor v) {\n        return v.visit(this);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return (quote(nodeTypeName) + \" as \") + quote(selectorName);\n    }\n\n    public boolean isPrepared() {\n        return plan != null;\n    }\n\n    @java.lang.Override\n    public void unprepare() {\n        plan = null;\n        selectorConstraints.clear();\n        isParent = false;\n        joinCondition = null;\n        allJoinConditions.clear();\n    }\n\n    @java.lang.Override\n    public void prepare(org.apache.jackrabbit.oak.query.plan.ExecutionPlan p) {\n        if (!(p instanceof org.apache.jackrabbit.oak.query.plan.SelectorExecutionPlan)) {\n            throw new java.lang.IllegalArgumentException(\"Not a selector plan\");\n        }\n        org.apache.jackrabbit.oak.query.plan.SelectorExecutionPlan selectorPlan = ((org.apache.jackrabbit.oak.query.plan.SelectorExecutionPlan) (p));\n        if (selectorPlan.getSelector() != this) {\n            throw new java.lang.IllegalArgumentException(\"Not a plan for this selector\");\n        }\n        pushDown();\n        this.plan = selectorPlan;\n    }\n\n    private void pushDown() {\n        if (queryConstraint != null) {\n            queryConstraint.restrictPushDown(this);\n        }\n        if ((!outerJoinLeftHandSide) && (!outerJoinRightHandSide)) {\n            for (org.apache.jackrabbit.oak.query.ast.JoinConditionImpl c : allJoinConditions) {\n                c.restrictPushDown(this);\n            }\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.query.plan.ExecutionPlan prepare() {\n        if (plan != null) {\n            return plan;\n        }\n        pushDown();\n        plan = query.getBestSelectorExecutionPlan(createFilter(true));\n        return plan;\n    }\n\n    public org.apache.jackrabbit.oak.query.plan.SelectorExecutionPlan getExecutionPlan() {\n        return plan;\n    }\n\n    @java.lang.Override\n    public void setQueryConstraint(org.apache.jackrabbit.oak.query.ast.ConstraintImpl queryConstraint) {\n        this.queryConstraint = queryConstraint;\n    }\n\n    @java.lang.Override\n    public void setOuterJoin(boolean outerJoinLeftHandSide, boolean outerJoinRightHandSide) {\n        this.outerJoinLeftHandSide = outerJoinLeftHandSide;\n        this.outerJoinRightHandSide = outerJoinRightHandSide;\n    }\n\n    @java.lang.Override\n    public void addJoinCondition(org.apache.jackrabbit.oak.query.ast.JoinConditionImpl joinCondition, boolean forThisSelector) {\n        if (forThisSelector) {\n            this.joinCondition = joinCondition;\n        }\n        allJoinConditions.add(joinCondition);\n        if (joinCondition.isParent(this)) {\n            isParent = true;\n        }\n    }\n\n    @java.lang.Override\n    public void execute(org.apache.jackrabbit.oak.spi.state.NodeState rootState) {\n        org.apache.jackrabbit.oak.spi.query.QueryIndex index = plan.getIndex();\n        if (index == null) {\n            cursor = org.apache.jackrabbit.oak.spi.query.Cursors.newPathCursor(new java.util.ArrayList<java.lang.String>(), query.getSettings());\n            return;\n        }\n        org.apache.jackrabbit.oak.spi.query.QueryIndex.IndexPlan p = plan.getIndexPlan();\n        if (p != null) {\n            p.setFilter(createFilter(false));\n            org.apache.jackrabbit.oak.spi.query.QueryIndex.AdvancedQueryIndex adv = ((org.apache.jackrabbit.oak.spi.query.QueryIndex.AdvancedQueryIndex) (index));\n            cursor = adv.query(p, rootState);\n        } else {\n            cursor = index.query(createFilter(false), rootState);\n        }\n    }\n\n    @java.lang.Override\n    public java.lang.String getPlan(org.apache.jackrabbit.oak.spi.state.NodeState rootState) {\n        java.lang.StringBuilder buff = new java.lang.StringBuilder();\n        buff.append(toString());\n        buff.append(\" /* \");\n        org.apache.jackrabbit.oak.spi.query.QueryIndex index = getIndex();\n        if (index != null) {\n            if (index instanceof org.apache.jackrabbit.oak.spi.query.QueryIndex.AdvancedQueryIndex) {\n                org.apache.jackrabbit.oak.spi.query.QueryIndex.AdvancedQueryIndex adv = ((org.apache.jackrabbit.oak.spi.query.QueryIndex.AdvancedQueryIndex) (index));\n                org.apache.jackrabbit.oak.spi.query.QueryIndex.IndexPlan p = plan.getIndexPlan();\n                buff.append(adv.getPlanDescription(p, rootState));\n            } else {\n                buff.append(index.getPlan(createFilter(true), rootState));\n            }\n        } else {\n            buff.append(\"no-index\");\n        }\n        if (!selectorConstraints.isEmpty()) {\n            buff.append(\" where \").append(new org.apache.jackrabbit.oak.query.ast.AndImpl(selectorConstraints).toString());\n        }\n        buff.append(\" */\");\n        return buff.toString();\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.query.index.FilterImpl createFilter(boolean preparing) {\n        org.apache.jackrabbit.oak.query.index.FilterImpl f = new org.apache.jackrabbit.oak.query.index.FilterImpl(this, query.getStatement(), query.getSettings());\n        f.setPreparing(preparing);\n        if (joinCondition != null) {\n            joinCondition.restrict(f);\n        }\n        for (org.apache.jackrabbit.oak.query.ast.ColumnImpl c : query.getColumns()) {\n            if (c.getSelector().equals(this)) {\n                if (c.getColumnName().equals(\"rep:excerpt\")) {\n                    f.restrictProperty(\"rep:excerpt\", Operator.NOT_EQUAL, null);\n                }\n            }\n        }\n        if (queryConstraint != null) {\n            queryConstraint.restrict(f);\n            org.apache.jackrabbit.oak.query.fulltext.FullTextExpression ft = queryConstraint.getFullTextConstraint(this);\n            f.setFullTextConstraint(ft);\n        }\n        for (org.apache.jackrabbit.oak.query.ast.ConstraintImpl constraint : selectorConstraints) {\n            constraint.restrict(f);\n        }\n        return f;\n    }\n\n    @java.lang.Override\n    public boolean next() {\n        while ((cursor != null) && cursor.hasNext()) {\n            scanCount++;\n            currentRow = cursor.next();\n            if (isParent) {\n            } else {\n                org.apache.jackrabbit.oak.api.Tree tree = getTree(currentRow.getPath());\n                if ((tree == null) || (!tree.exists())) {\n                    continue;\n                }\n            }\n            if (evaluateCurrentRow()) {\n                return true;\n            }\n        } \n        cursor = null;\n        currentRow = null;\n        return false;\n    }\n\n    private boolean evaluateCurrentRow() {\n        if ((!matchesAllTypes) && (!evaluateTypeMatch())) {\n            return false;\n        }\n        for (org.apache.jackrabbit.oak.query.ast.ConstraintImpl constraint : selectorConstraints) {\n            if (!constraint.evaluate()) {\n                return false;\n            }\n        }\n        if ((joinCondition != null) && (!joinCondition.evaluate())) {\n            return false;\n        }\n        return true;\n    }\n\n    private boolean evaluateTypeMatch() {\n        org.apache.jackrabbit.oak.api.Tree tree = getTree(currentRow.getPath());\n        if ((tree == null) || (!tree.exists())) {\n            return false;\n        }\n        org.apache.jackrabbit.oak.api.PropertyState primary = tree.getProperty(org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE);\n        if ((primary != null) && (primary.getType() == NAME)) {\n            java.lang.String name = primary.getValue(org.apache.jackrabbit.oak.query.ast.NAME);\n            if (primaryTypes.contains(name)) {\n                return true;\n            }\n        }\n        org.apache.jackrabbit.oak.api.PropertyState mixins = tree.getProperty(org.apache.jackrabbit.JcrConstants.JCR_MIXINTYPES);\n        if ((mixins != null) && (mixins.getType() == NAMES)) {\n            for (java.lang.String name : mixins.getValue(org.apache.jackrabbit.oak.query.ast.NAMES)) {\n                if (mixinTypes.contains(name)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public java.lang.String currentPath() {\n        return cursor == null ? null : currentRow.getPath();\n    }\n\n    public org.apache.jackrabbit.oak.api.Tree currentTree() {\n        java.lang.String path = currentPath();\n        if (path == null) {\n            return null;\n        }\n        return getTree(path);\n    }\n\n    org.apache.jackrabbit.oak.api.Tree getTree(java.lang.String path) {\n        if ((lastPath == null) || (!path.equals(lastPath))) {\n            lastTree = query.getTree(path);\n            lastPath = path;\n        }\n        return lastTree;\n    }\n\n    public org.apache.jackrabbit.oak.api.PropertyValue currentProperty(java.lang.String propertyName) {\n        java.lang.String pn = normalizePropertyName(propertyName);\n        return currentOakProperty(pn);\n    }\n\n    public org.apache.jackrabbit.oak.api.PropertyValue currentProperty(java.lang.String propertyName, int propertyType) {\n        java.lang.String pn = normalizePropertyName(propertyName);\n        return currentOakProperty(pn, propertyType);\n    }\n\n    public org.apache.jackrabbit.oak.api.PropertyValue currentOakProperty(java.lang.String oakPropertyName) {\n        return currentOakProperty(oakPropertyName, null);\n    }\n\n    private org.apache.jackrabbit.oak.api.PropertyValue currentOakProperty(java.lang.String oakPropertyName, java.lang.Integer propertyType) {\n        boolean asterisk = oakPropertyName.indexOf('*') >= 0;\n        if (asterisk) {\n            org.apache.jackrabbit.oak.api.Tree t = currentTree();\n            if (t != null) {\n                org.apache.jackrabbit.oak.query.ast.SelectorImpl.LOG.trace(\"currentOakProperty() - '*' case. looking for '{}' in '{}'\", oakPropertyName, t.getPath());\n            }\n            java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue> list = new java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue>();\n            readOakProperties(list, t, oakPropertyName, propertyType);\n            if (list.size() == 0) {\n                return null;\n            } else if (list.size() == 1) {\n                return list.get(0);\n            }\n            org.apache.jackrabbit.oak.api.Type<?> type = list.get(0).getType();\n            for (int i = 1; i < list.size(); i++) {\n                org.apache.jackrabbit.oak.api.Type<?> t2 = list.get(i).getType();\n                if (t2 != type) {\n                    type = org.apache.jackrabbit.oak.api.Type.STRING;\n                    break;\n                }\n            }\n            if (type == org.apache.jackrabbit.oak.api.Type.STRING) {\n                java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();\n                for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n                    com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n                }\n                return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings);\n            }\n            @java.lang.SuppressWarnings(\"unchecked\")\n            org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object> builder = ((org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object>) (org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder.array(type)));\n            builder.setName(\"\");\n            for (org.apache.jackrabbit.oak.api.PropertyValue v : list) {\n                builder.addValue(v.getValue(type));\n            }\n            org.apache.jackrabbit.oak.api.PropertyState s = builder.getPropertyState();\n            return org.apache.jackrabbit.oak.spi.query.PropertyValues.create(s);\n        }\n        boolean relative = oakPropertyName.indexOf('/') >= 0;\n        org.apache.jackrabbit.oak.api.Tree t = currentTree();\n        if (relative) {\n            for (java.lang.String p : org.apache.jackrabbit.oak.commons.PathUtils.elements(org.apache.jackrabbit.oak.commons.PathUtils.getParentPath(oakPropertyName))) {\n                if (t == null) {\n                    return null;\n                }\n                if (p.equals(\"..\")) {\n                    t = (t.isRoot()) ? null : t.getParent();\n                } else if (p.equals(\".\")) {\n                } else {\n                    t = t.getChild(p);\n                }\n            }\n            oakPropertyName = org.apache.jackrabbit.oak.commons.PathUtils.getName(oakPropertyName);\n        }\n        return currentOakProperty(t, oakPropertyName, propertyType);\n    }\n\n    private org.apache.jackrabbit.oak.api.PropertyValue currentOakProperty(org.apache.jackrabbit.oak.api.Tree t, java.lang.String oakPropertyName, java.lang.Integer propertyType) {\n        org.apache.jackrabbit.oak.api.PropertyValue result;\n        if ((t == null) || (!t.exists())) {\n            return null;\n        }\n        if (oakPropertyName.equals(QueryImpl.JCR_PATH)) {\n            java.lang.String path = currentPath();\n            java.lang.String local = getLocalPath(path);\n            if (local == null) {\n                return null;\n            }\n            result = org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(local);\n        } else if (oakPropertyName.equals(QueryImpl.JCR_SCORE)) {\n            result = currentRow.getValue(QueryImpl.JCR_SCORE);\n        } else if (oakPropertyName.equals(QueryImpl.REP_EXCERPT)) {\n            result = currentRow.getValue(QueryImpl.REP_EXCERPT);\n        } else {\n            result = org.apache.jackrabbit.oak.spi.query.PropertyValues.create(t.getProperty(oakPropertyName));\n        }\n        if (result == null) {\n            return null;\n        }\n        if ((propertyType != null) && (result.getType().tag() != propertyType)) {\n            return null;\n        }\n        return result;\n    }\n\n    private void readOakProperties(java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue> target, org.apache.jackrabbit.oak.api.Tree t, java.lang.String oakPropertyName, java.lang.Integer propertyType) {\n        boolean skipCurrentNode = false;\n        while (!skipCurrentNode) {\n            if ((t == null) || (!t.exists())) {\n                return;\n            }\n            org.apache.jackrabbit.oak.query.ast.SelectorImpl.LOG.trace(\"readOakProperties() - reading '{}' for '{}'\", t.getPath(), oakPropertyName);\n            int slash = oakPropertyName.indexOf('/');\n            if (slash < 0) {\n                break;\n            }\n            java.lang.String parent = oakPropertyName.substring(0, slash);\n            oakPropertyName = oakPropertyName.substring(slash + 1);\n            if (parent.equals(\"..\")) {\n                t = (t.isRoot()) ? null : t.getParent();\n            } else if (parent.equals(\".\")) {\n            } else if (parent.equals(\"*\")) {\n                for (org.apache.jackrabbit.oak.api.Tree child : t.getChildren()) {\n                    readOakProperties(target, child, oakPropertyName, propertyType);\n                }\n                skipCurrentNode = true;\n            } else {\n                t = t.getChild(parent);\n            }\n        } \n        if (skipCurrentNode) {\n            return;\n        }\n        if (!\"*\".equals(oakPropertyName)) {\n            org.apache.jackrabbit.oak.api.PropertyValue value = currentOakProperty(t, oakPropertyName, propertyType);\n            if (value != null) {\n                org.apache.jackrabbit.oak.query.ast.SelectorImpl.LOG.trace(\"readOakProperties() - adding: '{}' from '{}'\", value, t.getPath());\n                target.add(value);\n            }\n            return;\n        }\n        for (org.apache.jackrabbit.oak.api.PropertyState p : t.getProperties()) {\n            if ((propertyType == null) || (p.getType().tag() == propertyType)) {\n                org.apache.jackrabbit.oak.api.PropertyValue v = org.apache.jackrabbit.oak.spi.query.PropertyValues.create(p);\n                target.add(v);\n            }\n        }\n    }\n\n    @java.lang.Override\n    public org.apache.jackrabbit.oak.query.ast.SelectorImpl getSelector(java.lang.String selectorName) {\n        if (selectorName.equals(this.selectorName)) {\n            return this;\n        }\n        return null;\n    }\n\n    public long getScanCount() {\n        return scanCount;\n    }\n\n    public void restrictSelector(org.apache.jackrabbit.oak.query.ast.ConstraintImpl constraint) {\n        selectorConstraints.add(constraint);\n    }\n\n    public java.util.List<org.apache.jackrabbit.oak.query.ast.ConstraintImpl> getSelectorConstraints() {\n        return selectorConstraints;\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object other) {\n        if (this == other) {\n            return true;\n        } else if (!(this instanceof org.apache.jackrabbit.oak.query.ast.SelectorImpl)) {\n            return false;\n        }\n        return selectorName.equals(((org.apache.jackrabbit.oak.query.ast.SelectorImpl) (other)).selectorName);\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return selectorName.hashCode();\n    }\n\n    org.apache.jackrabbit.oak.spi.query.QueryIndex getIndex() {\n        return plan == null ? null : plan.getIndex();\n    }\n\n    @java.lang.Override\n    public java.util.ArrayList<org.apache.jackrabbit.oak.query.ast.SourceImpl> getInnerJoinSelectors() {\n        java.util.ArrayList<org.apache.jackrabbit.oak.query.ast.SourceImpl> list = new java.util.ArrayList<org.apache.jackrabbit.oak.query.ast.SourceImpl>();\n        list.add(this);\n        return list;\n    }\n\n    @java.lang.Override\n    public boolean isOuterJoinRightHandSide() {\n        return this.outerJoinRightHandSide;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "!skipCurrentNode",
            "src_parent": "while (!skipCurrentNode) {\n    if ((t == null) || (!t.exists())) {\n        return;\n    }\n    org.apache.jackrabbit.oak.query.ast.SelectorImpl.LOG.trace(\"readOakProperties() - reading '{}' for '{}'\", t.getPath(), oakPropertyName);\n    int slash = oakPropertyName.indexOf('/');\n    if (slash < 0) {\n        break;\n    }\n    java.lang.String parent = oakPropertyName.substring(0, slash);\n    oakPropertyName = oakPropertyName.substring(slash + 1);\n    if (parent.equals(\"..\")) {\n        t = (t.isRoot()) ? null : t.getParent();\n    } else if (parent.equals(\".\")) {\n    } else if (parent.equals(\"*\")) {\n        for (org.apache.jackrabbit.oak.api.Tree child : t.getChildren()) {\n            readOakProperties(target, child, oakPropertyName, propertyType);\n        }\n        skipCurrentNode = true;\n    } else {\n        t = t.getChild(parent);\n    }\n} ",
            "src_parent_type": "While",
            "src_type": "UnaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.query.ast.SelectorImpl.LOG.trace(\"readOakProperties() - reading '{}' for '{}'\", t.getPath(), oakPropertyName)",
            "src_parent": "{\n    if ((t == null) || (!t.exists())) {\n        return;\n    }\n    org.apache.jackrabbit.oak.query.ast.SelectorImpl.LOG.trace(\"readOakProperties() - reading '{}' for '{}'\", t.getPath(), oakPropertyName);\n    int slash = oakPropertyName.indexOf('/');\n    if (slash < 0) {\n        break;\n    }\n    java.lang.String parent = oakPropertyName.substring(0, slash);\n    oakPropertyName = oakPropertyName.substring(slash + 1);\n    if (parent.equals(\"..\")) {\n        t = (t.isRoot()) ? null : t.getParent();\n    } else if (parent.equals(\".\")) {\n    } else if (parent.equals(\"*\")) {\n        for (org.apache.jackrabbit.oak.api.Tree child : t.getChildren()) {\n            readOakProperties(target, child, oakPropertyName, propertyType);\n        }\n        skipCurrentNode = true;\n    } else {\n        t = t.getChild(parent);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (t != null) {\n    org.apache.jackrabbit.oak.query.ast.SelectorImpl.LOG.trace(\"currentOakProperty() - '*' case. looking for '{}' in '{}'\", oakPropertyName, t.getPath());\n}",
            "src_parent": "{\n    org.apache.jackrabbit.oak.api.Tree t = currentTree();\n    if (t != null) {\n        org.apache.jackrabbit.oak.query.ast.SelectorImpl.LOG.trace(\"currentOakProperty() - '*' case. looking for '{}' in '{}'\", oakPropertyName, t.getPath());\n    }\n    java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue> list = new java.util.ArrayList<org.apache.jackrabbit.oak.api.PropertyValue>();\n    readOakProperties(list, t, oakPropertyName, propertyType);\n    if (list.size() == 0) {\n        return null;\n    } else if (list.size() == 1) {\n        return list.get(0);\n    }\n    org.apache.jackrabbit.oak.api.Type<?> type = list.get(0).getType();\n    for (int i = 1; i < list.size(); i++) {\n        org.apache.jackrabbit.oak.api.Type<?> t2 = list.get(i).getType();\n        if (t2 != type) {\n            type = org.apache.jackrabbit.oak.api.Type.STRING;\n            break;\n        }\n    }\n    if (type == org.apache.jackrabbit.oak.api.Type.STRING) {\n        java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();\n        for (org.apache.jackrabbit.oak.api.PropertyValue p : list) {\n            com.google.common.collect.Iterables.addAll(strings, p.getValue(Type.STRINGS));\n        }\n        return org.apache.jackrabbit.oak.spi.query.PropertyValues.newString(strings);\n    }\n    @java.lang.SuppressWarnings(\"unchecked\")\n    org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object> builder = ((org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder<java.lang.Object>) (org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder.array(type)));\n    builder.setName(\"\");\n    for (org.apache.jackrabbit.oak.api.PropertyValue v : list) {\n        builder.addValue(v.getValue(type));\n    }\n    org.apache.jackrabbit.oak.api.PropertyState s = builder.getPropertyState();\n    return org.apache.jackrabbit.oak.spi.query.PropertyValues.create(s);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.jackrabbit.oak.query.ast.SelectorImpl.LOG.trace(\"readOakProperties() - adding: '{}' from '{}'\", value, t.getPath())",
            "src_parent": "{\n    org.apache.jackrabbit.oak.query.ast.SelectorImpl.LOG.trace(\"readOakProperties() - adding: '{}' from '{}'\", value, t.getPath());\n    target.add(value);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "SelectorImpl"
    }
  ],
  "id": "jackrabbit-oak_5c4589bd"
}