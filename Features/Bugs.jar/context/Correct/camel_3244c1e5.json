{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n}",
            "src_parent": "public class MBeanInfoAssembler implements org.apache.camel.Service {\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.camel.management.MBeanInfoAssembler.class);\n\n    private final org.apache.camel.util.LRUCache<java.lang.Class<?>, org.apache.camel.management.MBeanInfoAssembler.MBeanAttributesAndOperations> cache = new org.apache.camel.util.LRUWeakCache<java.lang.Class<?>, org.apache.camel.management.MBeanInfoAssembler.MBeanAttributesAndOperations>(1000);\n\n    private final org.apache.camel.CamelContext camelContext;\n\n    public MBeanInfoAssembler(org.apache.camel.CamelContext camelContext) {\n        this.camelContext = camelContext;\n    }\n\n    @java.lang.Override\n    public void start() throws java.lang.Exception {\n    }\n\n    @java.lang.Override\n    public void stop() throws java.lang.Exception {\n        if (org.apache.camel.management.MBeanInfoAssembler.LOG.isDebugEnabled()) {\n            org.apache.camel.management.MBeanInfoAssembler.LOG.debug(\"Clearing cache[size={}, hits={}, misses={}, evicted={}]\", new java.lang.Object[]{ cache.size(), cache.getHits(), cache.getMisses(), cache.getEvicted() });\n        }\n        cache.clear();\n    }\n\n    private static final class MBeanAttributesAndOperations {\n        private java.util.Map<java.lang.String, org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo> attributes;\n\n        private java.util.Set<org.apache.camel.management.MBeanInfoAssembler.ManagedOperationInfo> operations;\n    }\n\n    public javax.management.modelmbean.ModelMBeanInfo getMBeanInfo(java.lang.Object defaultManagedBean, java.lang.Object customManagedBean, java.lang.String objectName) throws javax.management.JMException {\n        if (java.lang.reflect.Proxy.isProxyClass(defaultManagedBean.getClass())) {\n            org.apache.camel.management.MBeanInfoAssembler.LOG.trace(\"Skip creating ModelMBeanInfo due proxy class {}\", defaultManagedBean.getClass());\n            return null;\n        }\n        java.util.Map<java.lang.String, org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo> attributes = new java.util.LinkedHashMap<java.lang.String, org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo>();\n        java.util.Set<org.apache.camel.management.MBeanInfoAssembler.ManagedOperationInfo> operations = new java.util.LinkedHashSet<org.apache.camel.management.MBeanInfoAssembler.ManagedOperationInfo>();\n        java.util.Set<javax.management.modelmbean.ModelMBeanAttributeInfo> mBeanAttributes = new java.util.LinkedHashSet<javax.management.modelmbean.ModelMBeanAttributeInfo>();\n        java.util.Set<javax.management.modelmbean.ModelMBeanOperationInfo> mBeanOperations = new java.util.LinkedHashSet<javax.management.modelmbean.ModelMBeanOperationInfo>();\n        java.util.Set<javax.management.modelmbean.ModelMBeanNotificationInfo> mBeanNotifications = new java.util.LinkedHashSet<javax.management.modelmbean.ModelMBeanNotificationInfo>();\n        extractAttributesAndOperations(defaultManagedBean.getClass(), attributes, operations);\n        extractMbeanAttributes(defaultManagedBean, attributes, mBeanAttributes, mBeanOperations);\n        extractMbeanOperations(defaultManagedBean, operations, mBeanOperations);\n        extractMbeanNotifications(defaultManagedBean, mBeanNotifications);\n        if (customManagedBean != null) {\n            extractAttributesAndOperations(customManagedBean.getClass(), attributes, operations);\n            extractMbeanAttributes(customManagedBean, attributes, mBeanAttributes, mBeanOperations);\n            extractMbeanOperations(customManagedBean, operations, mBeanOperations);\n            extractMbeanNotifications(customManagedBean, mBeanNotifications);\n        }\n        java.lang.String name = getName(customManagedBean != null ? customManagedBean : defaultManagedBean, objectName);\n        java.lang.String description = getDescription(customManagedBean != null ? customManagedBean : defaultManagedBean, objectName);\n        javax.management.modelmbean.ModelMBeanAttributeInfo[] arrayAttributes = mBeanAttributes.toArray(new javax.management.modelmbean.ModelMBeanAttributeInfo[mBeanAttributes.size()]);\n        javax.management.modelmbean.ModelMBeanOperationInfo[] arrayOperations = mBeanOperations.toArray(new javax.management.modelmbean.ModelMBeanOperationInfo[mBeanOperations.size()]);\n        javax.management.modelmbean.ModelMBeanNotificationInfo[] arrayNotifications = mBeanNotifications.toArray(new javax.management.modelmbean.ModelMBeanNotificationInfo[mBeanNotifications.size()]);\n        javax.management.modelmbean.ModelMBeanInfo info = new javax.management.modelmbean.ModelMBeanInfoSupport(name, description, arrayAttributes, null, arrayOperations, arrayNotifications);\n        org.apache.camel.management.MBeanInfoAssembler.LOG.trace(\"Created ModelMBeanInfo {}\", info);\n        return info;\n    }\n\n    private void extractAttributesAndOperations(java.lang.Class<?> managedClass, java.util.Map<java.lang.String, org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo> attributes, java.util.Set<org.apache.camel.management.MBeanInfoAssembler.ManagedOperationInfo> operations) {\n        org.apache.camel.management.MBeanInfoAssembler.MBeanAttributesAndOperations cached = cache.get(managedClass);\n        if (cached == null) {\n            doExtractAttributesAndOperations(managedClass, attributes, operations);\n            cached = new org.apache.camel.management.MBeanInfoAssembler.MBeanAttributesAndOperations();\n            cached.attributes = new java.util.LinkedHashMap<java.lang.String, org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo>(attributes);\n            cached.operations = new java.util.LinkedHashSet<org.apache.camel.management.MBeanInfoAssembler.ManagedOperationInfo>(operations);\n            attributes.clear();\n            operations.clear();\n            cache.put(managedClass, cached);\n        }\n        attributes.putAll(cached.attributes);\n        operations.addAll(cached.operations);\n    }\n\n    private void doExtractAttributesAndOperations(java.lang.Class<?> managedClass, java.util.Map<java.lang.String, org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo> attributes, java.util.Set<org.apache.camel.management.MBeanInfoAssembler.ManagedOperationInfo> operations) {\n        doDoExtractAttributesAndOperations(managedClass, attributes, operations);\n        if (managedClass.getSuperclass() != null) {\n            java.lang.Class<?> clazz = managedClass.getSuperclass();\n            if (!clazz.getName().startsWith(\"java\")) {\n                org.apache.camel.management.MBeanInfoAssembler.LOG.trace(\"Extracting attributes and operations from sub class: {}\", clazz);\n                doExtractAttributesAndOperations(clazz, attributes, operations);\n            }\n        }\n        if (managedClass.getInterfaces() != null) {\n            for (java.lang.Class<?> clazz : managedClass.getInterfaces()) {\n                if (clazz.getName().startsWith(\"java\")) {\n                    continue;\n                }\n                org.apache.camel.management.MBeanInfoAssembler.LOG.trace(\"Extracting attributes and operations from implemented interface: {}\", clazz);\n                doExtractAttributesAndOperations(clazz, attributes, operations);\n            }\n        }\n    }\n\n    private void doDoExtractAttributesAndOperations(java.lang.Class<?> managedClass, java.util.Map<java.lang.String, org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo> attributes, java.util.Set<org.apache.camel.management.MBeanInfoAssembler.ManagedOperationInfo> operations) {\n        org.apache.camel.management.MBeanInfoAssembler.LOG.trace(\"Extracting attributes and operations from class: {}\", managedClass);\n        org.apache.camel.util.IntrospectionSupport.ClassInfo cache = org.apache.camel.util.IntrospectionSupport.cacheClass(managedClass);\n        for (org.apache.camel.util.IntrospectionSupport.MethodInfo cacheInfo : cache.methods) {\n            if (cacheInfo.method.getDeclaringClass() != managedClass) {\n                continue;\n            }\n            org.apache.camel.management.MBeanInfoAssembler.LOG.trace(\"Extracting attributes and operations from method: {}\", cacheInfo.method);\n            org.apache.camel.api.management.ManagedAttribute ma = cacheInfo.method.getAnnotation(org.apache.camel.api.management.ManagedAttribute.class);\n            if (ma != null) {\n                java.lang.String key;\n                java.lang.String desc = ma.description();\n                java.lang.reflect.Method getter = null;\n                java.lang.reflect.Method setter = null;\n                boolean mask = ma.mask();\n                if (cacheInfo.isGetter) {\n                    key = cacheInfo.getterOrSetterShorthandName;\n                    getter = cacheInfo.method;\n                } else if (cacheInfo.isSetter) {\n                    key = cacheInfo.getterOrSetterShorthandName;\n                    setter = cacheInfo.method;\n                } else {\n                    throw new java.lang.IllegalArgumentException(((\"@ManagedAttribute can only be used on Java bean methods, was: \" + cacheInfo.method) + \" on bean: \") + managedClass);\n                }\n                key = org.apache.camel.util.ObjectHelper.capitalize(key);\n                org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo info = attributes.get(key);\n                if (info == null) {\n                    info = new org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo(key, desc);\n                }\n                if (getter != null) {\n                    info.setGetter(getter);\n                }\n                if (setter != null) {\n                    info.setSetter(setter);\n                }\n                info.setMask(mask);\n                attributes.put(key, info);\n            }\n            org.apache.camel.api.management.ManagedOperation mo = cacheInfo.method.getAnnotation(org.apache.camel.api.management.ManagedOperation.class);\n            if (mo != null) {\n                java.lang.String desc = mo.description();\n                java.lang.reflect.Method operation = cacheInfo.method;\n                boolean mask = mo.mask();\n                operations.add(new org.apache.camel.management.MBeanInfoAssembler.ManagedOperationInfo(desc, operation, mask));\n            }\n        }\n    }\n\n    private void extractMbeanAttributes(java.lang.Object managedBean, java.util.Map<java.lang.String, org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo> attributes, java.util.Set<javax.management.modelmbean.ModelMBeanAttributeInfo> mBeanAttributes, java.util.Set<javax.management.modelmbean.ModelMBeanOperationInfo> mBeanOperations) throws javax.management.IntrospectionException {\n        for (org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo info : attributes.values()) {\n            javax.management.modelmbean.ModelMBeanAttributeInfo mbeanAttribute = new javax.management.modelmbean.ModelMBeanAttributeInfo(info.getKey(), info.getDescription(), info.getGetter(), info.getSetter());\n            javax.management.Descriptor desc = mbeanAttribute.getDescriptor();\n            desc.setField(\"mask\", info.isMask() ? \"true\" : \"false\");\n            if (info.getGetter() != null) {\n                desc.setField(\"getMethod\", info.getGetter().getName());\n                javax.management.modelmbean.ModelMBeanOperationInfo mbeanOperation = new javax.management.modelmbean.ModelMBeanOperationInfo(info.getKey(), info.getGetter());\n                javax.management.Descriptor opDesc = mbeanOperation.getDescriptor();\n                opDesc.setField(\"mask\", info.isMask() ? \"true\" : \"false\");\n                mbeanOperation.setDescriptor(opDesc);\n                mBeanOperations.add(mbeanOperation);\n            }\n            if (info.getSetter() != null) {\n                desc.setField(\"setMethod\", info.getSetter().getName());\n                javax.management.modelmbean.ModelMBeanOperationInfo mbeanOperation = new javax.management.modelmbean.ModelMBeanOperationInfo(info.getKey(), info.getSetter());\n                mBeanOperations.add(mbeanOperation);\n            }\n            mbeanAttribute.setDescriptor(desc);\n            mBeanAttributes.add(mbeanAttribute);\n            org.apache.camel.management.MBeanInfoAssembler.LOG.trace(\"Assembled attribute: {}\", mbeanAttribute);\n        }\n    }\n\n    private void extractMbeanOperations(java.lang.Object managedBean, java.util.Set<org.apache.camel.management.MBeanInfoAssembler.ManagedOperationInfo> operations, java.util.Set<javax.management.modelmbean.ModelMBeanOperationInfo> mBeanOperations) {\n        for (org.apache.camel.management.MBeanInfoAssembler.ManagedOperationInfo info : operations) {\n            javax.management.modelmbean.ModelMBeanOperationInfo mbean = new javax.management.modelmbean.ModelMBeanOperationInfo(info.getDescription(), info.getOperation());\n            javax.management.Descriptor opDesc = mbean.getDescriptor();\n            opDesc.setField(\"mask\", info.isMask() ? \"true\" : \"false\");\n            mbean.setDescriptor(opDesc);\n            mBeanOperations.add(mbean);\n            org.apache.camel.management.MBeanInfoAssembler.LOG.trace(\"Assembled operation: {}\", mbean);\n        }\n    }\n\n    private void extractMbeanNotifications(java.lang.Object managedBean, java.util.Set<javax.management.modelmbean.ModelMBeanNotificationInfo> mBeanNotifications) {\n        org.apache.camel.api.management.ManagedNotifications notifications = managedBean.getClass().getAnnotation(org.apache.camel.api.management.ManagedNotifications.class);\n        if (notifications != null) {\n            for (org.apache.camel.api.management.ManagedNotification notification : notifications.value()) {\n                javax.management.modelmbean.ModelMBeanNotificationInfo info = new javax.management.modelmbean.ModelMBeanNotificationInfo(notification.notificationTypes(), notification.name(), notification.description());\n                mBeanNotifications.add(info);\n                org.apache.camel.management.MBeanInfoAssembler.LOG.trace(\"Assembled notification: {}\", info);\n            }\n        }\n    }\n\n    private java.lang.String getDescription(java.lang.Object managedBean, java.lang.String objectName) {\n        org.apache.camel.api.management.ManagedResource mr = org.apache.camel.util.ObjectHelper.getAnnotation(managedBean, org.apache.camel.api.management.ManagedResource.class);\n        return mr != null ? mr.description() : \"\";\n    }\n\n    private java.lang.String getName(java.lang.Object managedBean, java.lang.String objectName) {\n        return managedBean.getClass().getName();\n    }\n\n    private static final class ManagedAttributeInfo {\n        @org.apache.camel.api.management.ManagedAttribute(description = \"Singleton\")\n        private java.lang.String key;\n\n        private java.lang.String description;\n\n        private java.lang.reflect.Method getter;\n\n        private java.lang.reflect.Method setter;\n\n        private boolean mask;\n\n        private ManagedAttributeInfo(java.lang.String key, java.lang.String description) {\n            this.key = key;\n            this.description = description;\n        }\n\n        public java.lang.String getKey() {\n            return key;\n        }\n\n        public java.lang.String getDescription() {\n            return description;\n        }\n\n        public java.lang.reflect.Method getGetter() {\n            return getter;\n        }\n\n        public void setGetter(java.lang.reflect.Method getter) {\n            this.getter = getter;\n        }\n\n        public java.lang.reflect.Method getSetter() {\n            return setter;\n        }\n\n        public void setSetter(java.lang.reflect.Method setter) {\n            this.setter = setter;\n        }\n\n        public boolean isMask() {\n            return mask;\n        }\n\n        public void setMask(boolean mask) {\n            this.mask = mask;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (((((\"ManagedAttributeInfo: [\" + key) + \" + getter: \") + getter) + \", setter: \") + setter) + \"]\";\n        }\n    }\n\n    private static final class ManagedOperationInfo {\n        private final java.lang.String description;\n\n        private final java.lang.reflect.Method operation;\n\n        private final boolean mask;\n\n        private ManagedOperationInfo(java.lang.String description, java.lang.reflect.Method operation, boolean mask) {\n            this.description = description;\n            this.operation = operation;\n            this.mask = mask;\n        }\n\n        public java.lang.String getDescription() {\n            return description;\n        }\n\n        public java.lang.reflect.Method getOperation() {\n            return operation;\n        }\n\n        public boolean isMask() {\n            return mask;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (\"ManagedOperationInfo: [\" + operation) + \"]\";\n        }\n    }\n\n    {\n    }\n\n    @org.apache.camel.api.management.ManagedAttribute(description = \"Endpoint URI\", mask = true)\n    public java.lang.String getEndpointUri() {\n        return super.getEndpointUri();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "AnonymousExecutable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "@org.apache.camel.api.management.ManagedAttribute(description = \"Endpoint URI\", mask = true)\npublic java.lang.String getEndpointUri() {\n    return super.getEndpointUri();\n}",
            "src_parent": "public class MBeanInfoAssembler implements org.apache.camel.Service {\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(org.apache.camel.management.MBeanInfoAssembler.class);\n\n    private final org.apache.camel.util.LRUCache<java.lang.Class<?>, org.apache.camel.management.MBeanInfoAssembler.MBeanAttributesAndOperations> cache = new org.apache.camel.util.LRUWeakCache<java.lang.Class<?>, org.apache.camel.management.MBeanInfoAssembler.MBeanAttributesAndOperations>(1000);\n\n    private final org.apache.camel.CamelContext camelContext;\n\n    public MBeanInfoAssembler(org.apache.camel.CamelContext camelContext) {\n        this.camelContext = camelContext;\n    }\n\n    @java.lang.Override\n    public void start() throws java.lang.Exception {\n    }\n\n    @java.lang.Override\n    public void stop() throws java.lang.Exception {\n        if (org.apache.camel.management.MBeanInfoAssembler.LOG.isDebugEnabled()) {\n            org.apache.camel.management.MBeanInfoAssembler.LOG.debug(\"Clearing cache[size={}, hits={}, misses={}, evicted={}]\", new java.lang.Object[]{ cache.size(), cache.getHits(), cache.getMisses(), cache.getEvicted() });\n        }\n        cache.clear();\n    }\n\n    private static final class MBeanAttributesAndOperations {\n        private java.util.Map<java.lang.String, org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo> attributes;\n\n        private java.util.Set<org.apache.camel.management.MBeanInfoAssembler.ManagedOperationInfo> operations;\n    }\n\n    public javax.management.modelmbean.ModelMBeanInfo getMBeanInfo(java.lang.Object defaultManagedBean, java.lang.Object customManagedBean, java.lang.String objectName) throws javax.management.JMException {\n        if (java.lang.reflect.Proxy.isProxyClass(defaultManagedBean.getClass())) {\n            org.apache.camel.management.MBeanInfoAssembler.LOG.trace(\"Skip creating ModelMBeanInfo due proxy class {}\", defaultManagedBean.getClass());\n            return null;\n        }\n        java.util.Map<java.lang.String, org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo> attributes = new java.util.LinkedHashMap<java.lang.String, org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo>();\n        java.util.Set<org.apache.camel.management.MBeanInfoAssembler.ManagedOperationInfo> operations = new java.util.LinkedHashSet<org.apache.camel.management.MBeanInfoAssembler.ManagedOperationInfo>();\n        java.util.Set<javax.management.modelmbean.ModelMBeanAttributeInfo> mBeanAttributes = new java.util.LinkedHashSet<javax.management.modelmbean.ModelMBeanAttributeInfo>();\n        java.util.Set<javax.management.modelmbean.ModelMBeanOperationInfo> mBeanOperations = new java.util.LinkedHashSet<javax.management.modelmbean.ModelMBeanOperationInfo>();\n        java.util.Set<javax.management.modelmbean.ModelMBeanNotificationInfo> mBeanNotifications = new java.util.LinkedHashSet<javax.management.modelmbean.ModelMBeanNotificationInfo>();\n        extractAttributesAndOperations(defaultManagedBean.getClass(), attributes, operations);\n        extractMbeanAttributes(defaultManagedBean, attributes, mBeanAttributes, mBeanOperations);\n        extractMbeanOperations(defaultManagedBean, operations, mBeanOperations);\n        extractMbeanNotifications(defaultManagedBean, mBeanNotifications);\n        if (customManagedBean != null) {\n            extractAttributesAndOperations(customManagedBean.getClass(), attributes, operations);\n            extractMbeanAttributes(customManagedBean, attributes, mBeanAttributes, mBeanOperations);\n            extractMbeanOperations(customManagedBean, operations, mBeanOperations);\n            extractMbeanNotifications(customManagedBean, mBeanNotifications);\n        }\n        java.lang.String name = getName(customManagedBean != null ? customManagedBean : defaultManagedBean, objectName);\n        java.lang.String description = getDescription(customManagedBean != null ? customManagedBean : defaultManagedBean, objectName);\n        javax.management.modelmbean.ModelMBeanAttributeInfo[] arrayAttributes = mBeanAttributes.toArray(new javax.management.modelmbean.ModelMBeanAttributeInfo[mBeanAttributes.size()]);\n        javax.management.modelmbean.ModelMBeanOperationInfo[] arrayOperations = mBeanOperations.toArray(new javax.management.modelmbean.ModelMBeanOperationInfo[mBeanOperations.size()]);\n        javax.management.modelmbean.ModelMBeanNotificationInfo[] arrayNotifications = mBeanNotifications.toArray(new javax.management.modelmbean.ModelMBeanNotificationInfo[mBeanNotifications.size()]);\n        javax.management.modelmbean.ModelMBeanInfo info = new javax.management.modelmbean.ModelMBeanInfoSupport(name, description, arrayAttributes, null, arrayOperations, arrayNotifications);\n        org.apache.camel.management.MBeanInfoAssembler.LOG.trace(\"Created ModelMBeanInfo {}\", info);\n        return info;\n    }\n\n    private void extractAttributesAndOperations(java.lang.Class<?> managedClass, java.util.Map<java.lang.String, org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo> attributes, java.util.Set<org.apache.camel.management.MBeanInfoAssembler.ManagedOperationInfo> operations) {\n        org.apache.camel.management.MBeanInfoAssembler.MBeanAttributesAndOperations cached = cache.get(managedClass);\n        if (cached == null) {\n            doExtractAttributesAndOperations(managedClass, attributes, operations);\n            cached = new org.apache.camel.management.MBeanInfoAssembler.MBeanAttributesAndOperations();\n            cached.attributes = new java.util.LinkedHashMap<java.lang.String, org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo>(attributes);\n            cached.operations = new java.util.LinkedHashSet<org.apache.camel.management.MBeanInfoAssembler.ManagedOperationInfo>(operations);\n            attributes.clear();\n            operations.clear();\n            cache.put(managedClass, cached);\n        }\n        attributes.putAll(cached.attributes);\n        operations.addAll(cached.operations);\n    }\n\n    private void doExtractAttributesAndOperations(java.lang.Class<?> managedClass, java.util.Map<java.lang.String, org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo> attributes, java.util.Set<org.apache.camel.management.MBeanInfoAssembler.ManagedOperationInfo> operations) {\n        doDoExtractAttributesAndOperations(managedClass, attributes, operations);\n        if (managedClass.getSuperclass() != null) {\n            java.lang.Class<?> clazz = managedClass.getSuperclass();\n            if (!clazz.getName().startsWith(\"java\")) {\n                org.apache.camel.management.MBeanInfoAssembler.LOG.trace(\"Extracting attributes and operations from sub class: {}\", clazz);\n                doExtractAttributesAndOperations(clazz, attributes, operations);\n            }\n        }\n        if (managedClass.getInterfaces() != null) {\n            for (java.lang.Class<?> clazz : managedClass.getInterfaces()) {\n                if (clazz.getName().startsWith(\"java\")) {\n                    continue;\n                }\n                org.apache.camel.management.MBeanInfoAssembler.LOG.trace(\"Extracting attributes and operations from implemented interface: {}\", clazz);\n                doExtractAttributesAndOperations(clazz, attributes, operations);\n            }\n        }\n    }\n\n    private void doDoExtractAttributesAndOperations(java.lang.Class<?> managedClass, java.util.Map<java.lang.String, org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo> attributes, java.util.Set<org.apache.camel.management.MBeanInfoAssembler.ManagedOperationInfo> operations) {\n        org.apache.camel.management.MBeanInfoAssembler.LOG.trace(\"Extracting attributes and operations from class: {}\", managedClass);\n        org.apache.camel.util.IntrospectionSupport.ClassInfo cache = org.apache.camel.util.IntrospectionSupport.cacheClass(managedClass);\n        for (org.apache.camel.util.IntrospectionSupport.MethodInfo cacheInfo : cache.methods) {\n            if (cacheInfo.method.getDeclaringClass() != managedClass) {\n                continue;\n            }\n            org.apache.camel.management.MBeanInfoAssembler.LOG.trace(\"Extracting attributes and operations from method: {}\", cacheInfo.method);\n            org.apache.camel.api.management.ManagedAttribute ma = cacheInfo.method.getAnnotation(org.apache.camel.api.management.ManagedAttribute.class);\n            if (ma != null) {\n                java.lang.String key;\n                java.lang.String desc = ma.description();\n                java.lang.reflect.Method getter = null;\n                java.lang.reflect.Method setter = null;\n                boolean mask = ma.mask();\n                if (cacheInfo.isGetter) {\n                    key = cacheInfo.getterOrSetterShorthandName;\n                    getter = cacheInfo.method;\n                } else if (cacheInfo.isSetter) {\n                    key = cacheInfo.getterOrSetterShorthandName;\n                    setter = cacheInfo.method;\n                } else {\n                    throw new java.lang.IllegalArgumentException(((\"@ManagedAttribute can only be used on Java bean methods, was: \" + cacheInfo.method) + \" on bean: \") + managedClass);\n                }\n                key = org.apache.camel.util.ObjectHelper.capitalize(key);\n                org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo info = attributes.get(key);\n                if (info == null) {\n                    info = new org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo(key, desc);\n                }\n                if (getter != null) {\n                    info.setGetter(getter);\n                }\n                if (setter != null) {\n                    info.setSetter(setter);\n                }\n                info.setMask(mask);\n                attributes.put(key, info);\n            }\n            org.apache.camel.api.management.ManagedOperation mo = cacheInfo.method.getAnnotation(org.apache.camel.api.management.ManagedOperation.class);\n            if (mo != null) {\n                java.lang.String desc = mo.description();\n                java.lang.reflect.Method operation = cacheInfo.method;\n                boolean mask = mo.mask();\n                operations.add(new org.apache.camel.management.MBeanInfoAssembler.ManagedOperationInfo(desc, operation, mask));\n            }\n        }\n    }\n\n    private void extractMbeanAttributes(java.lang.Object managedBean, java.util.Map<java.lang.String, org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo> attributes, java.util.Set<javax.management.modelmbean.ModelMBeanAttributeInfo> mBeanAttributes, java.util.Set<javax.management.modelmbean.ModelMBeanOperationInfo> mBeanOperations) throws javax.management.IntrospectionException {\n        for (org.apache.camel.management.MBeanInfoAssembler.ManagedAttributeInfo info : attributes.values()) {\n            javax.management.modelmbean.ModelMBeanAttributeInfo mbeanAttribute = new javax.management.modelmbean.ModelMBeanAttributeInfo(info.getKey(), info.getDescription(), info.getGetter(), info.getSetter());\n            javax.management.Descriptor desc = mbeanAttribute.getDescriptor();\n            desc.setField(\"mask\", info.isMask() ? \"true\" : \"false\");\n            if (info.getGetter() != null) {\n                desc.setField(\"getMethod\", info.getGetter().getName());\n                javax.management.modelmbean.ModelMBeanOperationInfo mbeanOperation = new javax.management.modelmbean.ModelMBeanOperationInfo(info.getKey(), info.getGetter());\n                javax.management.Descriptor opDesc = mbeanOperation.getDescriptor();\n                opDesc.setField(\"mask\", info.isMask() ? \"true\" : \"false\");\n                mbeanOperation.setDescriptor(opDesc);\n                mBeanOperations.add(mbeanOperation);\n            }\n            if (info.getSetter() != null) {\n                desc.setField(\"setMethod\", info.getSetter().getName());\n                javax.management.modelmbean.ModelMBeanOperationInfo mbeanOperation = new javax.management.modelmbean.ModelMBeanOperationInfo(info.getKey(), info.getSetter());\n                mBeanOperations.add(mbeanOperation);\n            }\n            mbeanAttribute.setDescriptor(desc);\n            mBeanAttributes.add(mbeanAttribute);\n            org.apache.camel.management.MBeanInfoAssembler.LOG.trace(\"Assembled attribute: {}\", mbeanAttribute);\n        }\n    }\n\n    private void extractMbeanOperations(java.lang.Object managedBean, java.util.Set<org.apache.camel.management.MBeanInfoAssembler.ManagedOperationInfo> operations, java.util.Set<javax.management.modelmbean.ModelMBeanOperationInfo> mBeanOperations) {\n        for (org.apache.camel.management.MBeanInfoAssembler.ManagedOperationInfo info : operations) {\n            javax.management.modelmbean.ModelMBeanOperationInfo mbean = new javax.management.modelmbean.ModelMBeanOperationInfo(info.getDescription(), info.getOperation());\n            javax.management.Descriptor opDesc = mbean.getDescriptor();\n            opDesc.setField(\"mask\", info.isMask() ? \"true\" : \"false\");\n            mbean.setDescriptor(opDesc);\n            mBeanOperations.add(mbean);\n            org.apache.camel.management.MBeanInfoAssembler.LOG.trace(\"Assembled operation: {}\", mbean);\n        }\n    }\n\n    private void extractMbeanNotifications(java.lang.Object managedBean, java.util.Set<javax.management.modelmbean.ModelMBeanNotificationInfo> mBeanNotifications) {\n        org.apache.camel.api.management.ManagedNotifications notifications = managedBean.getClass().getAnnotation(org.apache.camel.api.management.ManagedNotifications.class);\n        if (notifications != null) {\n            for (org.apache.camel.api.management.ManagedNotification notification : notifications.value()) {\n                javax.management.modelmbean.ModelMBeanNotificationInfo info = new javax.management.modelmbean.ModelMBeanNotificationInfo(notification.notificationTypes(), notification.name(), notification.description());\n                mBeanNotifications.add(info);\n                org.apache.camel.management.MBeanInfoAssembler.LOG.trace(\"Assembled notification: {}\", info);\n            }\n        }\n    }\n\n    private java.lang.String getDescription(java.lang.Object managedBean, java.lang.String objectName) {\n        org.apache.camel.api.management.ManagedResource mr = org.apache.camel.util.ObjectHelper.getAnnotation(managedBean, org.apache.camel.api.management.ManagedResource.class);\n        return mr != null ? mr.description() : \"\";\n    }\n\n    private java.lang.String getName(java.lang.Object managedBean, java.lang.String objectName) {\n        return managedBean.getClass().getName();\n    }\n\n    private static final class ManagedAttributeInfo {\n        @org.apache.camel.api.management.ManagedAttribute(description = \"Singleton\")\n        private java.lang.String key;\n\n        private java.lang.String description;\n\n        private java.lang.reflect.Method getter;\n\n        private java.lang.reflect.Method setter;\n\n        private boolean mask;\n\n        private ManagedAttributeInfo(java.lang.String key, java.lang.String description) {\n            this.key = key;\n            this.description = description;\n        }\n\n        public java.lang.String getKey() {\n            return key;\n        }\n\n        public java.lang.String getDescription() {\n            return description;\n        }\n\n        public java.lang.reflect.Method getGetter() {\n            return getter;\n        }\n\n        public void setGetter(java.lang.reflect.Method getter) {\n            this.getter = getter;\n        }\n\n        public java.lang.reflect.Method getSetter() {\n            return setter;\n        }\n\n        public void setSetter(java.lang.reflect.Method setter) {\n            this.setter = setter;\n        }\n\n        public boolean isMask() {\n            return mask;\n        }\n\n        public void setMask(boolean mask) {\n            this.mask = mask;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (((((\"ManagedAttributeInfo: [\" + key) + \" + getter: \") + getter) + \", setter: \") + setter) + \"]\";\n        }\n    }\n\n    private static final class ManagedOperationInfo {\n        private final java.lang.String description;\n\n        private final java.lang.reflect.Method operation;\n\n        private final boolean mask;\n\n        private ManagedOperationInfo(java.lang.String description, java.lang.reflect.Method operation, boolean mask) {\n            this.description = description;\n            this.operation = operation;\n            this.mask = mask;\n        }\n\n        public java.lang.String getDescription() {\n            return description;\n        }\n\n        public java.lang.reflect.Method getOperation() {\n            return operation;\n        }\n\n        public boolean isMask() {\n            return mask;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (\"ManagedOperationInfo: [\" + operation) + \"]\";\n        }\n    }\n\n    {\n    }\n\n    @org.apache.camel.api.management.ManagedAttribute(description = \"Endpoint URI\", mask = true)\n    public java.lang.String getEndpointUri() {\n        return super.getEndpointUri();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "@org.apache.camel.api.management.ManagedAttribute(description = \"Singleton\")",
            "src_parent": "@org.apache.camel.api.management.ManagedAttribute(description = \"Singleton\")\nprivate java.lang.String key;",
            "src_parent_type": "Field",
            "src_type": "Annotation"
          }
        }
      ],
      "file_name": "MBeanInfoAssembler"
    }
  ],
  "id": "camel_3244c1e5"
}