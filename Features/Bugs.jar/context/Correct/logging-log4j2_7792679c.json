{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.lang.String filterProp = rootProperties.getProperty(\"filters\")",
            "src_parent": "{\n    java.util.Map<java.lang.String, java.lang.String> rootProps = new java.util.HashMap<>();\n    for (java.lang.String key : rootProperties.stringPropertyNames()) {\n        if (!key.contains(\".\")) {\n            builder.addRootProperty(key, rootProperties.getProperty(key));\n        }\n    }\n    builder.setStatusLevel(org.apache.logging.log4j.Level.toLevel(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.STATUS_KEY), org.apache.logging.log4j.Level.ERROR)).setShutdownHook(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.SHUTDOWN_HOOK)).setVerbosity(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.VERBOSE)).setPackages(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.PACKAGES)).setConfigurationName(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.CONFIG_NAME)).setMonitorInterval(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.MONITOR_INTERVAL, \"0\")).setAdvertiser(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.ADVERTISER_KEY));\n    final java.util.Properties propertyPlaceholders = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"property\");\n    for (final java.lang.String key : propertyPlaceholders.stringPropertyNames()) {\n        builder.addProperty(key, propertyPlaceholders.getProperty(key));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> scripts = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"script\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : scripts.entrySet()) {\n        final java.util.Properties scriptProps = entry.getValue();\n        final java.lang.String type = ((java.lang.String) (scriptProps.remove(\"type\")));\n        if (type == null) {\n            throw new org.apache.logging.log4j.core.config.ConfigurationException(\"No type provided for script - must be Script or ScriptFile\");\n        }\n        if (type.equalsIgnoreCase(\"script\")) {\n            builder.add(createScript(scriptProps));\n        } else {\n            builder.add(createScriptFile(scriptProps));\n        }\n    }\n    final java.util.Properties levelProps = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"customLevel\");\n    if (levelProps.size() > 0) {\n        for (final java.lang.String key : levelProps.stringPropertyNames()) {\n            builder.add(builder.newCustomLevel(key, java.lang.Integer.parseInt(levelProps.getProperty(key))));\n        }\n    }\n    java.lang.String filterProp = rootProperties.getProperty(\"filters\");\n    if (filterProp != null) {\n        java.lang.String[] filterNames = filterProp.split(\",\");\n        for (java.lang.String filterName : filterNames) {\n            java.lang.String name = filterName.trim();\n            builder.add(createFilter(name, org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter.\" + name)));\n        }\n    } else {\n        final java.util.Map<java.lang.String, java.util.Properties> filters = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter\"));\n        for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : filters.entrySet()) {\n            builder.add(createFilter(entry.getKey().trim(), entry.getValue()));\n        }\n    }\n    java.lang.String appenderProp = rootProperties.getProperty(\"appenders\");\n    if (appenderProp != null) {\n        java.lang.String[] appenderNames = appenderProp.split(\",\");\n        for (java.lang.String appenderName : appenderNames) {\n            java.lang.String name = appenderName.trim();\n            builder.add(createAppender(appenderName.trim(), org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender.\" + name)));\n        }\n    } else {\n        final java.util.Map<java.lang.String, java.util.Properties> appenders = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender\"));\n        for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : appenders.entrySet()) {\n            builder.add(createAppender(entry.getKey().trim(), entry.getValue()));\n        }\n    }\n    java.lang.String loggerProp = rootProperties.getProperty(\"loggers\");\n    if (loggerProp != null) {\n        java.lang.String[] loggerNames = loggerProp.split(\",\");\n        for (java.lang.String loggerName : loggerNames) {\n            java.lang.String name = loggerName.trim();\n            if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n                builder.add(createLogger(name, org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger.\" + name)));\n            }\n        }\n    } else {\n        final java.util.Map<java.lang.String, java.util.Properties> loggers = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger\"));\n        for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : loggers.entrySet()) {\n            final java.lang.String name = entry.getKey().trim();\n            if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n                builder.add(createLogger(name, entry.getValue()));\n            }\n        }\n    }\n    final java.util.Properties props = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"rootLogger\");\n    if (props.size() > 0) {\n        builder.add(createRootLogger(props));\n    }\n    return builder.build(false);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (filterProp != null) {\n    java.lang.String[] filterNames = filterProp.split(\",\");\n    for (java.lang.String filterName : filterNames) {\n        java.lang.String name = filterName.trim();\n        builder.add(createFilter(name, org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter.\" + name)));\n    }\n} else {\n    final java.util.Map<java.lang.String, java.util.Properties> filters = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : filters.entrySet()) {\n        builder.add(createFilter(entry.getKey().trim(), entry.getValue()));\n    }\n}",
            "src_parent": "{\n    java.util.Map<java.lang.String, java.lang.String> rootProps = new java.util.HashMap<>();\n    for (java.lang.String key : rootProperties.stringPropertyNames()) {\n        if (!key.contains(\".\")) {\n            builder.addRootProperty(key, rootProperties.getProperty(key));\n        }\n    }\n    builder.setStatusLevel(org.apache.logging.log4j.Level.toLevel(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.STATUS_KEY), org.apache.logging.log4j.Level.ERROR)).setShutdownHook(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.SHUTDOWN_HOOK)).setVerbosity(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.VERBOSE)).setPackages(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.PACKAGES)).setConfigurationName(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.CONFIG_NAME)).setMonitorInterval(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.MONITOR_INTERVAL, \"0\")).setAdvertiser(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.ADVERTISER_KEY));\n    final java.util.Properties propertyPlaceholders = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"property\");\n    for (final java.lang.String key : propertyPlaceholders.stringPropertyNames()) {\n        builder.addProperty(key, propertyPlaceholders.getProperty(key));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> scripts = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"script\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : scripts.entrySet()) {\n        final java.util.Properties scriptProps = entry.getValue();\n        final java.lang.String type = ((java.lang.String) (scriptProps.remove(\"type\")));\n        if (type == null) {\n            throw new org.apache.logging.log4j.core.config.ConfigurationException(\"No type provided for script - must be Script or ScriptFile\");\n        }\n        if (type.equalsIgnoreCase(\"script\")) {\n            builder.add(createScript(scriptProps));\n        } else {\n            builder.add(createScriptFile(scriptProps));\n        }\n    }\n    final java.util.Properties levelProps = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"customLevel\");\n    if (levelProps.size() > 0) {\n        for (final java.lang.String key : levelProps.stringPropertyNames()) {\n            builder.add(builder.newCustomLevel(key, java.lang.Integer.parseInt(levelProps.getProperty(key))));\n        }\n    }\n    java.lang.String filterProp = rootProperties.getProperty(\"filters\");\n    if (filterProp != null) {\n        java.lang.String[] filterNames = filterProp.split(\",\");\n        for (java.lang.String filterName : filterNames) {\n            java.lang.String name = filterName.trim();\n            builder.add(createFilter(name, org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter.\" + name)));\n        }\n    } else {\n        final java.util.Map<java.lang.String, java.util.Properties> filters = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter\"));\n        for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : filters.entrySet()) {\n            builder.add(createFilter(entry.getKey().trim(), entry.getValue()));\n        }\n    }\n    java.lang.String appenderProp = rootProperties.getProperty(\"appenders\");\n    if (appenderProp != null) {\n        java.lang.String[] appenderNames = appenderProp.split(\",\");\n        for (java.lang.String appenderName : appenderNames) {\n            java.lang.String name = appenderName.trim();\n            builder.add(createAppender(appenderName.trim(), org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender.\" + name)));\n        }\n    } else {\n        final java.util.Map<java.lang.String, java.util.Properties> appenders = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender\"));\n        for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : appenders.entrySet()) {\n            builder.add(createAppender(entry.getKey().trim(), entry.getValue()));\n        }\n    }\n    java.lang.String loggerProp = rootProperties.getProperty(\"loggers\");\n    if (loggerProp != null) {\n        java.lang.String[] loggerNames = loggerProp.split(\",\");\n        for (java.lang.String loggerName : loggerNames) {\n            java.lang.String name = loggerName.trim();\n            if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n                builder.add(createLogger(name, org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger.\" + name)));\n            }\n        }\n    } else {\n        final java.util.Map<java.lang.String, java.util.Properties> loggers = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger\"));\n        for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : loggers.entrySet()) {\n            final java.lang.String name = entry.getKey().trim();\n            if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n                builder.add(createLogger(name, entry.getValue()));\n            }\n        }\n    }\n    final java.util.Properties props = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"rootLogger\");\n    if (props.size() > 0) {\n        builder.add(createRootLogger(props));\n    }\n    return builder.build(false);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.lang.String appenderProp = rootProperties.getProperty(\"appenders\")",
            "src_parent": "{\n    java.util.Map<java.lang.String, java.lang.String> rootProps = new java.util.HashMap<>();\n    for (java.lang.String key : rootProperties.stringPropertyNames()) {\n        if (!key.contains(\".\")) {\n            builder.addRootProperty(key, rootProperties.getProperty(key));\n        }\n    }\n    builder.setStatusLevel(org.apache.logging.log4j.Level.toLevel(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.STATUS_KEY), org.apache.logging.log4j.Level.ERROR)).setShutdownHook(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.SHUTDOWN_HOOK)).setVerbosity(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.VERBOSE)).setPackages(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.PACKAGES)).setConfigurationName(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.CONFIG_NAME)).setMonitorInterval(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.MONITOR_INTERVAL, \"0\")).setAdvertiser(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.ADVERTISER_KEY));\n    final java.util.Properties propertyPlaceholders = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"property\");\n    for (final java.lang.String key : propertyPlaceholders.stringPropertyNames()) {\n        builder.addProperty(key, propertyPlaceholders.getProperty(key));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> scripts = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"script\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : scripts.entrySet()) {\n        final java.util.Properties scriptProps = entry.getValue();\n        final java.lang.String type = ((java.lang.String) (scriptProps.remove(\"type\")));\n        if (type == null) {\n            throw new org.apache.logging.log4j.core.config.ConfigurationException(\"No type provided for script - must be Script or ScriptFile\");\n        }\n        if (type.equalsIgnoreCase(\"script\")) {\n            builder.add(createScript(scriptProps));\n        } else {\n            builder.add(createScriptFile(scriptProps));\n        }\n    }\n    final java.util.Properties levelProps = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"customLevel\");\n    if (levelProps.size() > 0) {\n        for (final java.lang.String key : levelProps.stringPropertyNames()) {\n            builder.add(builder.newCustomLevel(key, java.lang.Integer.parseInt(levelProps.getProperty(key))));\n        }\n    }\n    java.lang.String filterProp = rootProperties.getProperty(\"filters\");\n    if (filterProp != null) {\n        java.lang.String[] filterNames = filterProp.split(\",\");\n        for (java.lang.String filterName : filterNames) {\n            java.lang.String name = filterName.trim();\n            builder.add(createFilter(name, org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter.\" + name)));\n        }\n    } else {\n        final java.util.Map<java.lang.String, java.util.Properties> filters = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter\"));\n        for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : filters.entrySet()) {\n            builder.add(createFilter(entry.getKey().trim(), entry.getValue()));\n        }\n    }\n    java.lang.String appenderProp = rootProperties.getProperty(\"appenders\");\n    if (appenderProp != null) {\n        java.lang.String[] appenderNames = appenderProp.split(\",\");\n        for (java.lang.String appenderName : appenderNames) {\n            java.lang.String name = appenderName.trim();\n            builder.add(createAppender(appenderName.trim(), org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender.\" + name)));\n        }\n    } else {\n        final java.util.Map<java.lang.String, java.util.Properties> appenders = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender\"));\n        for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : appenders.entrySet()) {\n            builder.add(createAppender(entry.getKey().trim(), entry.getValue()));\n        }\n    }\n    java.lang.String loggerProp = rootProperties.getProperty(\"loggers\");\n    if (loggerProp != null) {\n        java.lang.String[] loggerNames = loggerProp.split(\",\");\n        for (java.lang.String loggerName : loggerNames) {\n            java.lang.String name = loggerName.trim();\n            if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n                builder.add(createLogger(name, org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger.\" + name)));\n            }\n        }\n    } else {\n        final java.util.Map<java.lang.String, java.util.Properties> loggers = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger\"));\n        for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : loggers.entrySet()) {\n            final java.lang.String name = entry.getKey().trim();\n            if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n                builder.add(createLogger(name, entry.getValue()));\n            }\n        }\n    }\n    final java.util.Properties props = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"rootLogger\");\n    if (props.size() > 0) {\n        builder.add(createRootLogger(props));\n    }\n    return builder.build(false);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (appenderProp != null) {\n    java.lang.String[] appenderNames = appenderProp.split(\",\");\n    for (java.lang.String appenderName : appenderNames) {\n        java.lang.String name = appenderName.trim();\n        builder.add(createAppender(appenderName.trim(), org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender.\" + name)));\n    }\n} else {\n    final java.util.Map<java.lang.String, java.util.Properties> appenders = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : appenders.entrySet()) {\n        builder.add(createAppender(entry.getKey().trim(), entry.getValue()));\n    }\n}",
            "src_parent": "{\n    java.util.Map<java.lang.String, java.lang.String> rootProps = new java.util.HashMap<>();\n    for (java.lang.String key : rootProperties.stringPropertyNames()) {\n        if (!key.contains(\".\")) {\n            builder.addRootProperty(key, rootProperties.getProperty(key));\n        }\n    }\n    builder.setStatusLevel(org.apache.logging.log4j.Level.toLevel(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.STATUS_KEY), org.apache.logging.log4j.Level.ERROR)).setShutdownHook(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.SHUTDOWN_HOOK)).setVerbosity(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.VERBOSE)).setPackages(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.PACKAGES)).setConfigurationName(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.CONFIG_NAME)).setMonitorInterval(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.MONITOR_INTERVAL, \"0\")).setAdvertiser(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.ADVERTISER_KEY));\n    final java.util.Properties propertyPlaceholders = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"property\");\n    for (final java.lang.String key : propertyPlaceholders.stringPropertyNames()) {\n        builder.addProperty(key, propertyPlaceholders.getProperty(key));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> scripts = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"script\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : scripts.entrySet()) {\n        final java.util.Properties scriptProps = entry.getValue();\n        final java.lang.String type = ((java.lang.String) (scriptProps.remove(\"type\")));\n        if (type == null) {\n            throw new org.apache.logging.log4j.core.config.ConfigurationException(\"No type provided for script - must be Script or ScriptFile\");\n        }\n        if (type.equalsIgnoreCase(\"script\")) {\n            builder.add(createScript(scriptProps));\n        } else {\n            builder.add(createScriptFile(scriptProps));\n        }\n    }\n    final java.util.Properties levelProps = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"customLevel\");\n    if (levelProps.size() > 0) {\n        for (final java.lang.String key : levelProps.stringPropertyNames()) {\n            builder.add(builder.newCustomLevel(key, java.lang.Integer.parseInt(levelProps.getProperty(key))));\n        }\n    }\n    java.lang.String filterProp = rootProperties.getProperty(\"filters\");\n    if (filterProp != null) {\n        java.lang.String[] filterNames = filterProp.split(\",\");\n        for (java.lang.String filterName : filterNames) {\n            java.lang.String name = filterName.trim();\n            builder.add(createFilter(name, org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter.\" + name)));\n        }\n    } else {\n        final java.util.Map<java.lang.String, java.util.Properties> filters = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter\"));\n        for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : filters.entrySet()) {\n            builder.add(createFilter(entry.getKey().trim(), entry.getValue()));\n        }\n    }\n    java.lang.String appenderProp = rootProperties.getProperty(\"appenders\");\n    if (appenderProp != null) {\n        java.lang.String[] appenderNames = appenderProp.split(\",\");\n        for (java.lang.String appenderName : appenderNames) {\n            java.lang.String name = appenderName.trim();\n            builder.add(createAppender(appenderName.trim(), org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender.\" + name)));\n        }\n    } else {\n        final java.util.Map<java.lang.String, java.util.Properties> appenders = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender\"));\n        for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : appenders.entrySet()) {\n            builder.add(createAppender(entry.getKey().trim(), entry.getValue()));\n        }\n    }\n    java.lang.String loggerProp = rootProperties.getProperty(\"loggers\");\n    if (loggerProp != null) {\n        java.lang.String[] loggerNames = loggerProp.split(\",\");\n        for (java.lang.String loggerName : loggerNames) {\n            java.lang.String name = loggerName.trim();\n            if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n                builder.add(createLogger(name, org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger.\" + name)));\n            }\n        }\n    } else {\n        final java.util.Map<java.lang.String, java.util.Properties> loggers = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger\"));\n        for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : loggers.entrySet()) {\n            final java.lang.String name = entry.getKey().trim();\n            if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n                builder.add(createLogger(name, entry.getValue()));\n            }\n        }\n    }\n    final java.util.Properties props = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"rootLogger\");\n    if (props.size() > 0) {\n        builder.add(createRootLogger(props));\n    }\n    return builder.build(false);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.lang.String loggerProp = rootProperties.getProperty(\"loggers\")",
            "src_parent": "{\n    java.util.Map<java.lang.String, java.lang.String> rootProps = new java.util.HashMap<>();\n    for (java.lang.String key : rootProperties.stringPropertyNames()) {\n        if (!key.contains(\".\")) {\n            builder.addRootProperty(key, rootProperties.getProperty(key));\n        }\n    }\n    builder.setStatusLevel(org.apache.logging.log4j.Level.toLevel(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.STATUS_KEY), org.apache.logging.log4j.Level.ERROR)).setShutdownHook(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.SHUTDOWN_HOOK)).setVerbosity(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.VERBOSE)).setPackages(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.PACKAGES)).setConfigurationName(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.CONFIG_NAME)).setMonitorInterval(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.MONITOR_INTERVAL, \"0\")).setAdvertiser(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.ADVERTISER_KEY));\n    final java.util.Properties propertyPlaceholders = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"property\");\n    for (final java.lang.String key : propertyPlaceholders.stringPropertyNames()) {\n        builder.addProperty(key, propertyPlaceholders.getProperty(key));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> scripts = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"script\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : scripts.entrySet()) {\n        final java.util.Properties scriptProps = entry.getValue();\n        final java.lang.String type = ((java.lang.String) (scriptProps.remove(\"type\")));\n        if (type == null) {\n            throw new org.apache.logging.log4j.core.config.ConfigurationException(\"No type provided for script - must be Script or ScriptFile\");\n        }\n        if (type.equalsIgnoreCase(\"script\")) {\n            builder.add(createScript(scriptProps));\n        } else {\n            builder.add(createScriptFile(scriptProps));\n        }\n    }\n    final java.util.Properties levelProps = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"customLevel\");\n    if (levelProps.size() > 0) {\n        for (final java.lang.String key : levelProps.stringPropertyNames()) {\n            builder.add(builder.newCustomLevel(key, java.lang.Integer.parseInt(levelProps.getProperty(key))));\n        }\n    }\n    java.lang.String filterProp = rootProperties.getProperty(\"filters\");\n    if (filterProp != null) {\n        java.lang.String[] filterNames = filterProp.split(\",\");\n        for (java.lang.String filterName : filterNames) {\n            java.lang.String name = filterName.trim();\n            builder.add(createFilter(name, org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter.\" + name)));\n        }\n    } else {\n        final java.util.Map<java.lang.String, java.util.Properties> filters = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter\"));\n        for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : filters.entrySet()) {\n            builder.add(createFilter(entry.getKey().trim(), entry.getValue()));\n        }\n    }\n    java.lang.String appenderProp = rootProperties.getProperty(\"appenders\");\n    if (appenderProp != null) {\n        java.lang.String[] appenderNames = appenderProp.split(\",\");\n        for (java.lang.String appenderName : appenderNames) {\n            java.lang.String name = appenderName.trim();\n            builder.add(createAppender(appenderName.trim(), org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender.\" + name)));\n        }\n    } else {\n        final java.util.Map<java.lang.String, java.util.Properties> appenders = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender\"));\n        for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : appenders.entrySet()) {\n            builder.add(createAppender(entry.getKey().trim(), entry.getValue()));\n        }\n    }\n    java.lang.String loggerProp = rootProperties.getProperty(\"loggers\");\n    if (loggerProp != null) {\n        java.lang.String[] loggerNames = loggerProp.split(\",\");\n        for (java.lang.String loggerName : loggerNames) {\n            java.lang.String name = loggerName.trim();\n            if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n                builder.add(createLogger(name, org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger.\" + name)));\n            }\n        }\n    } else {\n        final java.util.Map<java.lang.String, java.util.Properties> loggers = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger\"));\n        for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : loggers.entrySet()) {\n            final java.lang.String name = entry.getKey().trim();\n            if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n                builder.add(createLogger(name, entry.getValue()));\n            }\n        }\n    }\n    final java.util.Properties props = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"rootLogger\");\n    if (props.size() > 0) {\n        builder.add(createRootLogger(props));\n    }\n    return builder.build(false);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (loggerProp != null) {\n    java.lang.String[] loggerNames = loggerProp.split(\",\");\n    for (java.lang.String loggerName : loggerNames) {\n        java.lang.String name = loggerName.trim();\n        if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n            builder.add(createLogger(name, org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger.\" + name)));\n        }\n    }\n} else {\n    final java.util.Map<java.lang.String, java.util.Properties> loggers = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : loggers.entrySet()) {\n        final java.lang.String name = entry.getKey().trim();\n        if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n            builder.add(createLogger(name, entry.getValue()));\n        }\n    }\n}",
            "src_parent": "{\n    java.util.Map<java.lang.String, java.lang.String> rootProps = new java.util.HashMap<>();\n    for (java.lang.String key : rootProperties.stringPropertyNames()) {\n        if (!key.contains(\".\")) {\n            builder.addRootProperty(key, rootProperties.getProperty(key));\n        }\n    }\n    builder.setStatusLevel(org.apache.logging.log4j.Level.toLevel(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.STATUS_KEY), org.apache.logging.log4j.Level.ERROR)).setShutdownHook(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.SHUTDOWN_HOOK)).setVerbosity(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.VERBOSE)).setPackages(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.PACKAGES)).setConfigurationName(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.CONFIG_NAME)).setMonitorInterval(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.MONITOR_INTERVAL, \"0\")).setAdvertiser(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.ADVERTISER_KEY));\n    final java.util.Properties propertyPlaceholders = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"property\");\n    for (final java.lang.String key : propertyPlaceholders.stringPropertyNames()) {\n        builder.addProperty(key, propertyPlaceholders.getProperty(key));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> scripts = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"script\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : scripts.entrySet()) {\n        final java.util.Properties scriptProps = entry.getValue();\n        final java.lang.String type = ((java.lang.String) (scriptProps.remove(\"type\")));\n        if (type == null) {\n            throw new org.apache.logging.log4j.core.config.ConfigurationException(\"No type provided for script - must be Script or ScriptFile\");\n        }\n        if (type.equalsIgnoreCase(\"script\")) {\n            builder.add(createScript(scriptProps));\n        } else {\n            builder.add(createScriptFile(scriptProps));\n        }\n    }\n    final java.util.Properties levelProps = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"customLevel\");\n    if (levelProps.size() > 0) {\n        for (final java.lang.String key : levelProps.stringPropertyNames()) {\n            builder.add(builder.newCustomLevel(key, java.lang.Integer.parseInt(levelProps.getProperty(key))));\n        }\n    }\n    java.lang.String filterProp = rootProperties.getProperty(\"filters\");\n    if (filterProp != null) {\n        java.lang.String[] filterNames = filterProp.split(\",\");\n        for (java.lang.String filterName : filterNames) {\n            java.lang.String name = filterName.trim();\n            builder.add(createFilter(name, org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter.\" + name)));\n        }\n    } else {\n        final java.util.Map<java.lang.String, java.util.Properties> filters = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter\"));\n        for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : filters.entrySet()) {\n            builder.add(createFilter(entry.getKey().trim(), entry.getValue()));\n        }\n    }\n    java.lang.String appenderProp = rootProperties.getProperty(\"appenders\");\n    if (appenderProp != null) {\n        java.lang.String[] appenderNames = appenderProp.split(\",\");\n        for (java.lang.String appenderName : appenderNames) {\n            java.lang.String name = appenderName.trim();\n            builder.add(createAppender(appenderName.trim(), org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender.\" + name)));\n        }\n    } else {\n        final java.util.Map<java.lang.String, java.util.Properties> appenders = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender\"));\n        for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : appenders.entrySet()) {\n            builder.add(createAppender(entry.getKey().trim(), entry.getValue()));\n        }\n    }\n    java.lang.String loggerProp = rootProperties.getProperty(\"loggers\");\n    if (loggerProp != null) {\n        java.lang.String[] loggerNames = loggerProp.split(\",\");\n        for (java.lang.String loggerName : loggerNames) {\n            java.lang.String name = loggerName.trim();\n            if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n                builder.add(createLogger(name, org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger.\" + name)));\n            }\n        }\n    } else {\n        final java.util.Map<java.lang.String, java.util.Properties> loggers = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger\"));\n        for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : loggers.entrySet()) {\n            final java.lang.String name = entry.getKey().trim();\n            if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n                builder.add(createLogger(name, entry.getValue()));\n            }\n        }\n    }\n    final java.util.Properties props = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"rootLogger\");\n    if (props.size() > 0) {\n        builder.add(createRootLogger(props));\n    }\n    return builder.build(false);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "ForEach",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "final java.util.Map<java.lang.String, java.util.Properties> filters = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter\"))",
            "dst_parent": "{\n    final java.util.Map<java.lang.String, java.util.Properties> filters = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : filters.entrySet()) {\n        builder.add(createFilter(entry.getKey().trim(), entry.getValue()));\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "final java.util.Map<java.lang.String, java.util.Properties> filters = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter\"))",
            "src_parent": "{\n    java.util.Map<java.lang.String, java.lang.String> rootProps = new java.util.HashMap<>();\n    for (java.lang.String key : rootProperties.stringPropertyNames()) {\n        if (!key.contains(\".\")) {\n            builder.addRootProperty(key, rootProperties.getProperty(key));\n        }\n    }\n    builder.setStatusLevel(org.apache.logging.log4j.Level.toLevel(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.STATUS_KEY), org.apache.logging.log4j.Level.ERROR)).setShutdownHook(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.SHUTDOWN_HOOK)).setVerbosity(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.VERBOSE)).setPackages(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.PACKAGES)).setConfigurationName(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.CONFIG_NAME)).setMonitorInterval(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.MONITOR_INTERVAL, \"0\")).setAdvertiser(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.ADVERTISER_KEY));\n    final java.util.Properties propertyPlaceholders = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"property\");\n    for (final java.lang.String key : propertyPlaceholders.stringPropertyNames()) {\n        builder.addProperty(key, propertyPlaceholders.getProperty(key));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> scripts = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"script\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : scripts.entrySet()) {\n        final java.util.Properties scriptProps = entry.getValue();\n        final java.lang.String type = ((java.lang.String) (scriptProps.remove(\"type\")));\n        if (type == null) {\n            throw new org.apache.logging.log4j.core.config.ConfigurationException(\"No type provided for script - must be Script or ScriptFile\");\n        }\n        if (type.equalsIgnoreCase(\"script\")) {\n            builder.add(createScript(scriptProps));\n        } else {\n            builder.add(createScriptFile(scriptProps));\n        }\n    }\n    final java.util.Properties levelProps = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"customLevel\");\n    if (levelProps.size() > 0) {\n        for (final java.lang.String key : levelProps.stringPropertyNames()) {\n            builder.add(builder.newCustomLevel(key, java.lang.Integer.parseInt(levelProps.getProperty(key))));\n        }\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> filters = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : filters.entrySet()) {\n        builder.add(createFilter(entry.getKey().trim(), entry.getValue()));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> appenders = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : appenders.entrySet()) {\n        builder.add(createAppender(entry.getKey().trim(), entry.getValue()));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> loggers = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : loggers.entrySet()) {\n        final java.lang.String name = entry.getKey().trim();\n        if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n            builder.add(createLogger(name, entry.getValue()));\n        }\n    }\n    final java.util.Properties props = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"rootLogger\");\n    if (props.size() > 0) {\n        builder.add(createRootLogger(props));\n    }\n    return builder.build(false);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : filters.entrySet()) {\n    builder.add(createFilter(entry.getKey().trim(), entry.getValue()));\n}",
            "dst_parent": "{\n    final java.util.Map<java.lang.String, java.util.Properties> filters = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : filters.entrySet()) {\n        builder.add(createFilter(entry.getKey().trim(), entry.getValue()));\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "ForEach",
            "operator": "MOV",
            "src": "for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : filters.entrySet()) {\n    builder.add(createFilter(entry.getKey().trim(), entry.getValue()));\n}",
            "src_parent": "{\n    java.util.Map<java.lang.String, java.lang.String> rootProps = new java.util.HashMap<>();\n    for (java.lang.String key : rootProperties.stringPropertyNames()) {\n        if (!key.contains(\".\")) {\n            builder.addRootProperty(key, rootProperties.getProperty(key));\n        }\n    }\n    builder.setStatusLevel(org.apache.logging.log4j.Level.toLevel(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.STATUS_KEY), org.apache.logging.log4j.Level.ERROR)).setShutdownHook(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.SHUTDOWN_HOOK)).setVerbosity(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.VERBOSE)).setPackages(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.PACKAGES)).setConfigurationName(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.CONFIG_NAME)).setMonitorInterval(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.MONITOR_INTERVAL, \"0\")).setAdvertiser(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.ADVERTISER_KEY));\n    final java.util.Properties propertyPlaceholders = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"property\");\n    for (final java.lang.String key : propertyPlaceholders.stringPropertyNames()) {\n        builder.addProperty(key, propertyPlaceholders.getProperty(key));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> scripts = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"script\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : scripts.entrySet()) {\n        final java.util.Properties scriptProps = entry.getValue();\n        final java.lang.String type = ((java.lang.String) (scriptProps.remove(\"type\")));\n        if (type == null) {\n            throw new org.apache.logging.log4j.core.config.ConfigurationException(\"No type provided for script - must be Script or ScriptFile\");\n        }\n        if (type.equalsIgnoreCase(\"script\")) {\n            builder.add(createScript(scriptProps));\n        } else {\n            builder.add(createScriptFile(scriptProps));\n        }\n    }\n    final java.util.Properties levelProps = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"customLevel\");\n    if (levelProps.size() > 0) {\n        for (final java.lang.String key : levelProps.stringPropertyNames()) {\n            builder.add(builder.newCustomLevel(key, java.lang.Integer.parseInt(levelProps.getProperty(key))));\n        }\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> filters = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : filters.entrySet()) {\n        builder.add(createFilter(entry.getKey().trim(), entry.getValue()));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> appenders = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : appenders.entrySet()) {\n        builder.add(createAppender(entry.getKey().trim(), entry.getValue()));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> loggers = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : loggers.entrySet()) {\n        final java.lang.String name = entry.getKey().trim();\n        if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n            builder.add(createLogger(name, entry.getValue()));\n        }\n    }\n    final java.util.Properties props = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"rootLogger\");\n    if (props.size() > 0) {\n        builder.add(createRootLogger(props));\n    }\n    return builder.build(false);\n}",
            "src_parent_type": "Block",
            "src_type": "ForEach"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "final java.util.Map<java.lang.String, java.util.Properties> appenders = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender\"))",
            "dst_parent": "{\n    final java.util.Map<java.lang.String, java.util.Properties> appenders = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : appenders.entrySet()) {\n        builder.add(createAppender(entry.getKey().trim(), entry.getValue()));\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "final java.util.Map<java.lang.String, java.util.Properties> appenders = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender\"))",
            "src_parent": "{\n    java.util.Map<java.lang.String, java.lang.String> rootProps = new java.util.HashMap<>();\n    for (java.lang.String key : rootProperties.stringPropertyNames()) {\n        if (!key.contains(\".\")) {\n            builder.addRootProperty(key, rootProperties.getProperty(key));\n        }\n    }\n    builder.setStatusLevel(org.apache.logging.log4j.Level.toLevel(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.STATUS_KEY), org.apache.logging.log4j.Level.ERROR)).setShutdownHook(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.SHUTDOWN_HOOK)).setVerbosity(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.VERBOSE)).setPackages(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.PACKAGES)).setConfigurationName(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.CONFIG_NAME)).setMonitorInterval(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.MONITOR_INTERVAL, \"0\")).setAdvertiser(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.ADVERTISER_KEY));\n    final java.util.Properties propertyPlaceholders = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"property\");\n    for (final java.lang.String key : propertyPlaceholders.stringPropertyNames()) {\n        builder.addProperty(key, propertyPlaceholders.getProperty(key));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> scripts = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"script\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : scripts.entrySet()) {\n        final java.util.Properties scriptProps = entry.getValue();\n        final java.lang.String type = ((java.lang.String) (scriptProps.remove(\"type\")));\n        if (type == null) {\n            throw new org.apache.logging.log4j.core.config.ConfigurationException(\"No type provided for script - must be Script or ScriptFile\");\n        }\n        if (type.equalsIgnoreCase(\"script\")) {\n            builder.add(createScript(scriptProps));\n        } else {\n            builder.add(createScriptFile(scriptProps));\n        }\n    }\n    final java.util.Properties levelProps = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"customLevel\");\n    if (levelProps.size() > 0) {\n        for (final java.lang.String key : levelProps.stringPropertyNames()) {\n            builder.add(builder.newCustomLevel(key, java.lang.Integer.parseInt(levelProps.getProperty(key))));\n        }\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> filters = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : filters.entrySet()) {\n        builder.add(createFilter(entry.getKey().trim(), entry.getValue()));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> appenders = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : appenders.entrySet()) {\n        builder.add(createAppender(entry.getKey().trim(), entry.getValue()));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> loggers = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : loggers.entrySet()) {\n        final java.lang.String name = entry.getKey().trim();\n        if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n            builder.add(createLogger(name, entry.getValue()));\n        }\n    }\n    final java.util.Properties props = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"rootLogger\");\n    if (props.size() > 0) {\n        builder.add(createRootLogger(props));\n    }\n    return builder.build(false);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : appenders.entrySet()) {\n    builder.add(createAppender(entry.getKey().trim(), entry.getValue()));\n}",
            "dst_parent": "{\n    final java.util.Map<java.lang.String, java.util.Properties> appenders = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : appenders.entrySet()) {\n        builder.add(createAppender(entry.getKey().trim(), entry.getValue()));\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "ForEach",
            "operator": "MOV",
            "src": "for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : appenders.entrySet()) {\n    builder.add(createAppender(entry.getKey().trim(), entry.getValue()));\n}",
            "src_parent": "{\n    java.util.Map<java.lang.String, java.lang.String> rootProps = new java.util.HashMap<>();\n    for (java.lang.String key : rootProperties.stringPropertyNames()) {\n        if (!key.contains(\".\")) {\n            builder.addRootProperty(key, rootProperties.getProperty(key));\n        }\n    }\n    builder.setStatusLevel(org.apache.logging.log4j.Level.toLevel(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.STATUS_KEY), org.apache.logging.log4j.Level.ERROR)).setShutdownHook(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.SHUTDOWN_HOOK)).setVerbosity(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.VERBOSE)).setPackages(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.PACKAGES)).setConfigurationName(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.CONFIG_NAME)).setMonitorInterval(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.MONITOR_INTERVAL, \"0\")).setAdvertiser(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.ADVERTISER_KEY));\n    final java.util.Properties propertyPlaceholders = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"property\");\n    for (final java.lang.String key : propertyPlaceholders.stringPropertyNames()) {\n        builder.addProperty(key, propertyPlaceholders.getProperty(key));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> scripts = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"script\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : scripts.entrySet()) {\n        final java.util.Properties scriptProps = entry.getValue();\n        final java.lang.String type = ((java.lang.String) (scriptProps.remove(\"type\")));\n        if (type == null) {\n            throw new org.apache.logging.log4j.core.config.ConfigurationException(\"No type provided for script - must be Script or ScriptFile\");\n        }\n        if (type.equalsIgnoreCase(\"script\")) {\n            builder.add(createScript(scriptProps));\n        } else {\n            builder.add(createScriptFile(scriptProps));\n        }\n    }\n    final java.util.Properties levelProps = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"customLevel\");\n    if (levelProps.size() > 0) {\n        for (final java.lang.String key : levelProps.stringPropertyNames()) {\n            builder.add(builder.newCustomLevel(key, java.lang.Integer.parseInt(levelProps.getProperty(key))));\n        }\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> filters = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : filters.entrySet()) {\n        builder.add(createFilter(entry.getKey().trim(), entry.getValue()));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> appenders = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : appenders.entrySet()) {\n        builder.add(createAppender(entry.getKey().trim(), entry.getValue()));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> loggers = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : loggers.entrySet()) {\n        final java.lang.String name = entry.getKey().trim();\n        if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n            builder.add(createLogger(name, entry.getValue()));\n        }\n    }\n    final java.util.Properties props = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"rootLogger\");\n    if (props.size() > 0) {\n        builder.add(createRootLogger(props));\n    }\n    return builder.build(false);\n}",
            "src_parent_type": "Block",
            "src_type": "ForEach"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "ForEach",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "final java.util.Map<java.lang.String, java.util.Properties> loggers = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger\"))",
            "dst_parent": "{\n    final java.util.Map<java.lang.String, java.util.Properties> loggers = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : loggers.entrySet()) {\n        final java.lang.String name = entry.getKey().trim();\n        if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n            builder.add(createLogger(name, entry.getValue()));\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "final java.util.Map<java.lang.String, java.util.Properties> loggers = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger\"))",
            "src_parent": "{\n    java.util.Map<java.lang.String, java.lang.String> rootProps = new java.util.HashMap<>();\n    for (java.lang.String key : rootProperties.stringPropertyNames()) {\n        if (!key.contains(\".\")) {\n            builder.addRootProperty(key, rootProperties.getProperty(key));\n        }\n    }\n    builder.setStatusLevel(org.apache.logging.log4j.Level.toLevel(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.STATUS_KEY), org.apache.logging.log4j.Level.ERROR)).setShutdownHook(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.SHUTDOWN_HOOK)).setVerbosity(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.VERBOSE)).setPackages(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.PACKAGES)).setConfigurationName(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.CONFIG_NAME)).setMonitorInterval(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.MONITOR_INTERVAL, \"0\")).setAdvertiser(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.ADVERTISER_KEY));\n    final java.util.Properties propertyPlaceholders = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"property\");\n    for (final java.lang.String key : propertyPlaceholders.stringPropertyNames()) {\n        builder.addProperty(key, propertyPlaceholders.getProperty(key));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> scripts = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"script\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : scripts.entrySet()) {\n        final java.util.Properties scriptProps = entry.getValue();\n        final java.lang.String type = ((java.lang.String) (scriptProps.remove(\"type\")));\n        if (type == null) {\n            throw new org.apache.logging.log4j.core.config.ConfigurationException(\"No type provided for script - must be Script or ScriptFile\");\n        }\n        if (type.equalsIgnoreCase(\"script\")) {\n            builder.add(createScript(scriptProps));\n        } else {\n            builder.add(createScriptFile(scriptProps));\n        }\n    }\n    final java.util.Properties levelProps = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"customLevel\");\n    if (levelProps.size() > 0) {\n        for (final java.lang.String key : levelProps.stringPropertyNames()) {\n            builder.add(builder.newCustomLevel(key, java.lang.Integer.parseInt(levelProps.getProperty(key))));\n        }\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> filters = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : filters.entrySet()) {\n        builder.add(createFilter(entry.getKey().trim(), entry.getValue()));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> appenders = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : appenders.entrySet()) {\n        builder.add(createAppender(entry.getKey().trim(), entry.getValue()));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> loggers = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : loggers.entrySet()) {\n        final java.lang.String name = entry.getKey().trim();\n        if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n            builder.add(createLogger(name, entry.getValue()));\n        }\n    }\n    final java.util.Properties props = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"rootLogger\");\n    if (props.size() > 0) {\n        builder.add(createRootLogger(props));\n    }\n    return builder.build(false);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : loggers.entrySet()) {\n    final java.lang.String name = entry.getKey().trim();\n    if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n        builder.add(createLogger(name, entry.getValue()));\n    }\n}",
            "dst_parent": "{\n    final java.util.Map<java.lang.String, java.util.Properties> loggers = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : loggers.entrySet()) {\n        final java.lang.String name = entry.getKey().trim();\n        if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n            builder.add(createLogger(name, entry.getValue()));\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "ForEach",
            "operator": "MOV",
            "src": "for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : loggers.entrySet()) {\n    final java.lang.String name = entry.getKey().trim();\n    if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n        builder.add(createLogger(name, entry.getValue()));\n    }\n}",
            "src_parent": "{\n    java.util.Map<java.lang.String, java.lang.String> rootProps = new java.util.HashMap<>();\n    for (java.lang.String key : rootProperties.stringPropertyNames()) {\n        if (!key.contains(\".\")) {\n            builder.addRootProperty(key, rootProperties.getProperty(key));\n        }\n    }\n    builder.setStatusLevel(org.apache.logging.log4j.Level.toLevel(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.STATUS_KEY), org.apache.logging.log4j.Level.ERROR)).setShutdownHook(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.SHUTDOWN_HOOK)).setVerbosity(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.VERBOSE)).setPackages(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.PACKAGES)).setConfigurationName(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.CONFIG_NAME)).setMonitorInterval(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.MONITOR_INTERVAL, \"0\")).setAdvertiser(rootProperties.getProperty(org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder.ADVERTISER_KEY));\n    final java.util.Properties propertyPlaceholders = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"property\");\n    for (final java.lang.String key : propertyPlaceholders.stringPropertyNames()) {\n        builder.addProperty(key, propertyPlaceholders.getProperty(key));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> scripts = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"script\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : scripts.entrySet()) {\n        final java.util.Properties scriptProps = entry.getValue();\n        final java.lang.String type = ((java.lang.String) (scriptProps.remove(\"type\")));\n        if (type == null) {\n            throw new org.apache.logging.log4j.core.config.ConfigurationException(\"No type provided for script - must be Script or ScriptFile\");\n        }\n        if (type.equalsIgnoreCase(\"script\")) {\n            builder.add(createScript(scriptProps));\n        } else {\n            builder.add(createScriptFile(scriptProps));\n        }\n    }\n    final java.util.Properties levelProps = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"customLevel\");\n    if (levelProps.size() > 0) {\n        for (final java.lang.String key : levelProps.stringPropertyNames()) {\n            builder.add(builder.newCustomLevel(key, java.lang.Integer.parseInt(levelProps.getProperty(key))));\n        }\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> filters = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"filter\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : filters.entrySet()) {\n        builder.add(createFilter(entry.getKey().trim(), entry.getValue()));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> appenders = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"appender\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : appenders.entrySet()) {\n        builder.add(createAppender(entry.getKey().trim(), entry.getValue()));\n    }\n    final java.util.Map<java.lang.String, java.util.Properties> loggers = org.apache.logging.log4j.util.PropertiesUtil.partitionOnCommonPrefixes(org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"logger\"));\n    for (final java.util.Map.Entry<java.lang.String, java.util.Properties> entry : loggers.entrySet()) {\n        final java.lang.String name = entry.getKey().trim();\n        if (!name.equals(org.apache.logging.log4j.core.config.LoggerConfig.ROOT)) {\n            builder.add(createLogger(name, entry.getValue()));\n        }\n    }\n    final java.util.Properties props = org.apache.logging.log4j.util.PropertiesUtil.extractSubset(rootProperties, \"rootLogger\");\n    if (props.size() > 0) {\n        builder.add(createRootLogger(props));\n    }\n    return builder.build(false);\n}",
            "src_parent_type": "Block",
            "src_type": "ForEach"
          }
        }
      ],
      "file_name": "PropertiesConfigurationBuilder"
    }
  ],
  "id": "logging-log4j2_7792679c"
}