{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "boolean javaClass = clazz.getName().startsWith(\"java.\") || clazz.getName().startsWith(\"javax.\")",
            "src_parent": "{\n    clazz = org.apache.camel.component.bean.BeanInfo.getTargetClass(clazz);\n    org.apache.camel.util.ObjectHelper.notNull(clazz, \"clazz\", this);\n    org.apache.camel.component.bean.BeanInfo.LOG.trace(\"Introspecting class: {}\", clazz);\n    java.util.List<java.lang.reflect.Method> methods;\n    if (java.lang.reflect.Modifier.isPublic(clazz.getModifiers())) {\n        org.apache.camel.component.bean.BeanInfo.LOG.trace(\"Preferring class methods as class: {} is public accessible\", clazz);\n        methods = new java.util.ArrayList<java.lang.reflect.Method>(java.util.Arrays.asList(clazz.getDeclaredMethods()));\n    } else {\n        org.apache.camel.component.bean.BeanInfo.LOG.trace(\"Preferring interface methods as class: {} is not public accessible\", clazz);\n        methods = org.apache.camel.component.bean.BeanInfo.getInterfaceMethods(clazz);\n        java.util.List<java.lang.reflect.Method> extraMethods = java.util.Arrays.asList(clazz.getDeclaredMethods());\n        methods.addAll(extraMethods);\n    }\n    java.util.Set<java.lang.reflect.Method> overrides = new java.util.HashSet<java.lang.reflect.Method>();\n    boolean javaClass = clazz.getName().startsWith(\"java.\") || clazz.getName().startsWith(\"javax.\");\n    if (!javaClass) {\n        for (java.lang.reflect.Method source : methods) {\n            for (java.lang.reflect.Method target : methods) {\n                if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, true)) {\n                    continue;\n                }\n                if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, false)) {\n                    overrides.add(target);\n                }\n            }\n        }\n        methods.removeAll(overrides);\n        overrides.clear();\n    }\n    if (java.lang.reflect.Modifier.isPublic(clazz.getModifiers())) {\n        java.util.List<java.lang.reflect.Method> extraMethods = org.apache.camel.component.bean.BeanInfo.getInterfaceMethods(clazz);\n        for (java.lang.reflect.Method target : extraMethods) {\n            for (java.lang.reflect.Method source : methods) {\n                if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, false)) {\n                    overrides.add(target);\n                }\n            }\n        }\n        extraMethods.removeAll(overrides);\n        methods.addAll(extraMethods);\n    }\n    for (java.lang.reflect.Method method : methods) {\n        boolean valid = isValidMethod(clazz, method);\n        org.apache.camel.component.bean.BeanInfo.LOG.trace(\"Method: {} is valid: {}\", method, valid);\n        if (valid) {\n            introspect(clazz, method);\n        }\n    }\n    java.lang.Class<?> superclass = clazz.getSuperclass();\n    if ((superclass != null) && (!superclass.equals(java.lang.Object.class))) {\n        introspect(superclass);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (!javaClass) {\n    for (java.lang.reflect.Method source : methods) {\n        for (java.lang.reflect.Method target : methods) {\n            if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, true)) {\n                continue;\n            }\n            if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, false)) {\n                overrides.add(target);\n            }\n        }\n    }\n    methods.removeAll(overrides);\n    overrides.clear();\n}",
            "src_parent": "{\n    clazz = org.apache.camel.component.bean.BeanInfo.getTargetClass(clazz);\n    org.apache.camel.util.ObjectHelper.notNull(clazz, \"clazz\", this);\n    org.apache.camel.component.bean.BeanInfo.LOG.trace(\"Introspecting class: {}\", clazz);\n    java.util.List<java.lang.reflect.Method> methods;\n    if (java.lang.reflect.Modifier.isPublic(clazz.getModifiers())) {\n        org.apache.camel.component.bean.BeanInfo.LOG.trace(\"Preferring class methods as class: {} is public accessible\", clazz);\n        methods = new java.util.ArrayList<java.lang.reflect.Method>(java.util.Arrays.asList(clazz.getDeclaredMethods()));\n    } else {\n        org.apache.camel.component.bean.BeanInfo.LOG.trace(\"Preferring interface methods as class: {} is not public accessible\", clazz);\n        methods = org.apache.camel.component.bean.BeanInfo.getInterfaceMethods(clazz);\n        java.util.List<java.lang.reflect.Method> extraMethods = java.util.Arrays.asList(clazz.getDeclaredMethods());\n        methods.addAll(extraMethods);\n    }\n    java.util.Set<java.lang.reflect.Method> overrides = new java.util.HashSet<java.lang.reflect.Method>();\n    boolean javaClass = clazz.getName().startsWith(\"java.\") || clazz.getName().startsWith(\"javax.\");\n    if (!javaClass) {\n        for (java.lang.reflect.Method source : methods) {\n            for (java.lang.reflect.Method target : methods) {\n                if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, true)) {\n                    continue;\n                }\n                if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, false)) {\n                    overrides.add(target);\n                }\n            }\n        }\n        methods.removeAll(overrides);\n        overrides.clear();\n    }\n    if (java.lang.reflect.Modifier.isPublic(clazz.getModifiers())) {\n        java.util.List<java.lang.reflect.Method> extraMethods = org.apache.camel.component.bean.BeanInfo.getInterfaceMethods(clazz);\n        for (java.lang.reflect.Method target : extraMethods) {\n            for (java.lang.reflect.Method source : methods) {\n                if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, false)) {\n                    overrides.add(target);\n                }\n            }\n        }\n        extraMethods.removeAll(overrides);\n        methods.addAll(extraMethods);\n    }\n    for (java.lang.reflect.Method method : methods) {\n        boolean valid = isValidMethod(clazz, method);\n        org.apache.camel.component.bean.BeanInfo.LOG.trace(\"Method: {} is valid: {}\", method, valid);\n        if (valid) {\n            introspect(clazz, method);\n        }\n    }\n    java.lang.Class<?> superclass = clazz.getSuperclass();\n    if ((superclass != null) && (!superclass.equals(java.lang.Object.class))) {\n        introspect(superclass);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "for (java.lang.reflect.Method source : methods) {\n    for (java.lang.reflect.Method target : methods) {\n        if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, true)) {\n            continue;\n        }\n        if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, false)) {\n            overrides.add(target);\n        }\n    }\n}",
            "dst_parent": "{\n    for (java.lang.reflect.Method source : methods) {\n        for (java.lang.reflect.Method target : methods) {\n            if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, true)) {\n                continue;\n            }\n            if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, false)) {\n                overrides.add(target);\n            }\n        }\n    }\n    methods.removeAll(overrides);\n    overrides.clear();\n}",
            "dst_parent_type": "Block",
            "dst_type": "ForEach",
            "operator": "MOV",
            "src": "for (java.lang.reflect.Method source : methods) {\n    for (java.lang.reflect.Method target : methods) {\n        if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, true)) {\n            continue;\n        }\n        if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, false)) {\n            overrides.add(target);\n        }\n    }\n}",
            "src_parent": "{\n    clazz = org.apache.camel.component.bean.BeanInfo.getTargetClass(clazz);\n    org.apache.camel.util.ObjectHelper.notNull(clazz, \"clazz\", this);\n    org.apache.camel.component.bean.BeanInfo.LOG.trace(\"Introspecting class: {}\", clazz);\n    java.util.List<java.lang.reflect.Method> methods;\n    if (java.lang.reflect.Modifier.isPublic(clazz.getModifiers())) {\n        org.apache.camel.component.bean.BeanInfo.LOG.trace(\"Preferring class methods as class: {} is public accessible\", clazz);\n        methods = new java.util.ArrayList<java.lang.reflect.Method>(java.util.Arrays.asList(clazz.getDeclaredMethods()));\n    } else {\n        org.apache.camel.component.bean.BeanInfo.LOG.trace(\"Preferring interface methods as class: {} is not public accessible\", clazz);\n        methods = org.apache.camel.component.bean.BeanInfo.getInterfaceMethods(clazz);\n        java.util.List<java.lang.reflect.Method> extraMethods = java.util.Arrays.asList(clazz.getDeclaredMethods());\n        methods.addAll(extraMethods);\n    }\n    java.util.Set<java.lang.reflect.Method> overrides = new java.util.HashSet<java.lang.reflect.Method>();\n    for (java.lang.reflect.Method source : methods) {\n        for (java.lang.reflect.Method target : methods) {\n            if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, true)) {\n                continue;\n            }\n            if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, false)) {\n                overrides.add(target);\n            }\n        }\n    }\n    methods.removeAll(overrides);\n    overrides.clear();\n    if (java.lang.reflect.Modifier.isPublic(clazz.getModifiers())) {\n        java.util.List<java.lang.reflect.Method> extraMethods = org.apache.camel.component.bean.BeanInfo.getInterfaceMethods(clazz);\n        for (java.lang.reflect.Method target : extraMethods) {\n            for (java.lang.reflect.Method source : methods) {\n                if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, false)) {\n                    overrides.add(target);\n                }\n            }\n        }\n        extraMethods.removeAll(overrides);\n        methods.addAll(extraMethods);\n    }\n    for (java.lang.reflect.Method method : methods) {\n        boolean valid = isValidMethod(clazz, method);\n        org.apache.camel.component.bean.BeanInfo.LOG.trace(\"Method: {} is valid: {}\", method, valid);\n        if (valid) {\n            introspect(clazz, method);\n        }\n    }\n    java.lang.Class<?> superclass = clazz.getSuperclass();\n    if ((superclass != null) && (!superclass.equals(java.lang.Object.class))) {\n        introspect(superclass);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "ForEach"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "methods.removeAll(overrides)",
            "dst_parent": "{\n    for (java.lang.reflect.Method source : methods) {\n        for (java.lang.reflect.Method target : methods) {\n            if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, true)) {\n                continue;\n            }\n            if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, false)) {\n                overrides.add(target);\n            }\n        }\n    }\n    methods.removeAll(overrides);\n    overrides.clear();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "methods.removeAll(overrides)",
            "src_parent": "{\n    clazz = org.apache.camel.component.bean.BeanInfo.getTargetClass(clazz);\n    org.apache.camel.util.ObjectHelper.notNull(clazz, \"clazz\", this);\n    org.apache.camel.component.bean.BeanInfo.LOG.trace(\"Introspecting class: {}\", clazz);\n    java.util.List<java.lang.reflect.Method> methods;\n    if (java.lang.reflect.Modifier.isPublic(clazz.getModifiers())) {\n        org.apache.camel.component.bean.BeanInfo.LOG.trace(\"Preferring class methods as class: {} is public accessible\", clazz);\n        methods = new java.util.ArrayList<java.lang.reflect.Method>(java.util.Arrays.asList(clazz.getDeclaredMethods()));\n    } else {\n        org.apache.camel.component.bean.BeanInfo.LOG.trace(\"Preferring interface methods as class: {} is not public accessible\", clazz);\n        methods = org.apache.camel.component.bean.BeanInfo.getInterfaceMethods(clazz);\n        java.util.List<java.lang.reflect.Method> extraMethods = java.util.Arrays.asList(clazz.getDeclaredMethods());\n        methods.addAll(extraMethods);\n    }\n    java.util.Set<java.lang.reflect.Method> overrides = new java.util.HashSet<java.lang.reflect.Method>();\n    for (java.lang.reflect.Method source : methods) {\n        for (java.lang.reflect.Method target : methods) {\n            if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, true)) {\n                continue;\n            }\n            if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, false)) {\n                overrides.add(target);\n            }\n        }\n    }\n    methods.removeAll(overrides);\n    overrides.clear();\n    if (java.lang.reflect.Modifier.isPublic(clazz.getModifiers())) {\n        java.util.List<java.lang.reflect.Method> extraMethods = org.apache.camel.component.bean.BeanInfo.getInterfaceMethods(clazz);\n        for (java.lang.reflect.Method target : extraMethods) {\n            for (java.lang.reflect.Method source : methods) {\n                if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, false)) {\n                    overrides.add(target);\n                }\n            }\n        }\n        extraMethods.removeAll(overrides);\n        methods.addAll(extraMethods);\n    }\n    for (java.lang.reflect.Method method : methods) {\n        boolean valid = isValidMethod(clazz, method);\n        org.apache.camel.component.bean.BeanInfo.LOG.trace(\"Method: {} is valid: {}\", method, valid);\n        if (valid) {\n            introspect(clazz, method);\n        }\n    }\n    java.lang.Class<?> superclass = clazz.getSuperclass();\n    if ((superclass != null) && (!superclass.equals(java.lang.Object.class))) {\n        introspect(superclass);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "overrides.clear()",
            "dst_parent": "{\n    for (java.lang.reflect.Method source : methods) {\n        for (java.lang.reflect.Method target : methods) {\n            if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, true)) {\n                continue;\n            }\n            if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, false)) {\n                overrides.add(target);\n            }\n        }\n    }\n    methods.removeAll(overrides);\n    overrides.clear();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "overrides.clear()",
            "src_parent": "{\n    clazz = org.apache.camel.component.bean.BeanInfo.getTargetClass(clazz);\n    org.apache.camel.util.ObjectHelper.notNull(clazz, \"clazz\", this);\n    org.apache.camel.component.bean.BeanInfo.LOG.trace(\"Introspecting class: {}\", clazz);\n    java.util.List<java.lang.reflect.Method> methods;\n    if (java.lang.reflect.Modifier.isPublic(clazz.getModifiers())) {\n        org.apache.camel.component.bean.BeanInfo.LOG.trace(\"Preferring class methods as class: {} is public accessible\", clazz);\n        methods = new java.util.ArrayList<java.lang.reflect.Method>(java.util.Arrays.asList(clazz.getDeclaredMethods()));\n    } else {\n        org.apache.camel.component.bean.BeanInfo.LOG.trace(\"Preferring interface methods as class: {} is not public accessible\", clazz);\n        methods = org.apache.camel.component.bean.BeanInfo.getInterfaceMethods(clazz);\n        java.util.List<java.lang.reflect.Method> extraMethods = java.util.Arrays.asList(clazz.getDeclaredMethods());\n        methods.addAll(extraMethods);\n    }\n    java.util.Set<java.lang.reflect.Method> overrides = new java.util.HashSet<java.lang.reflect.Method>();\n    for (java.lang.reflect.Method source : methods) {\n        for (java.lang.reflect.Method target : methods) {\n            if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, true)) {\n                continue;\n            }\n            if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, false)) {\n                overrides.add(target);\n            }\n        }\n    }\n    methods.removeAll(overrides);\n    overrides.clear();\n    if (java.lang.reflect.Modifier.isPublic(clazz.getModifiers())) {\n        java.util.List<java.lang.reflect.Method> extraMethods = org.apache.camel.component.bean.BeanInfo.getInterfaceMethods(clazz);\n        for (java.lang.reflect.Method target : extraMethods) {\n            for (java.lang.reflect.Method source : methods) {\n                if (org.apache.camel.util.ObjectHelper.isOverridingMethod(source, target, false)) {\n                    overrides.add(target);\n                }\n            }\n        }\n        extraMethods.removeAll(overrides);\n        methods.addAll(extraMethods);\n    }\n    for (java.lang.reflect.Method method : methods) {\n        boolean valid = isValidMethod(clazz, method);\n        org.apache.camel.component.bean.BeanInfo.LOG.trace(\"Method: {} is valid: {}\", method, valid);\n        if (valid) {\n            introspect(clazz, method);\n        }\n    }\n    java.lang.Class<?> superclass = clazz.getSuperclass();\n    if ((superclass != null) && (!superclass.equals(java.lang.Object.class))) {\n        introspect(superclass);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "BeanInfo"
    }
  ],
  "id": "camel_53b4e90c"
}