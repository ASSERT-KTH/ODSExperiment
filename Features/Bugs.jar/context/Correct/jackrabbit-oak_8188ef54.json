{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (p1.isArray()) {\n    org.apache.jackrabbit.oak.api.Type<?> base = p1.getType().getBaseType();\n    for (int i = 0; i < p1.count(); i++) {\n        org.apache.jackrabbit.oak.api.PropertyState value = org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(\"value\", p1.getValue(base, i), base);\n        if (evaluate(org.apache.jackrabbit.oak.spi.query.PropertyValues.create(value), p2)) {\n            return true;\n        }\n    }\n    return false;\n} else {\n    return evaluate(p1, p2);\n}",
            "src_parent": "{\n    org.apache.jackrabbit.oak.api.PropertyValue p1 = operand1.currentProperty();\n    if (p1 == null) {\n        return false;\n    }\n    org.apache.jackrabbit.oak.api.PropertyValue p2 = operand2.currentValue();\n    if (p2 == null) {\n        return false;\n    }\n    try {\n        p2 = convertValueToType(p2, p1);\n    } catch (java.lang.IllegalArgumentException ex) {\n        return false;\n    }\n    if (p1.isArray()) {\n        org.apache.jackrabbit.oak.api.Type<?> base = p1.getType().getBaseType();\n        for (int i = 0; i < p1.count(); i++) {\n            org.apache.jackrabbit.oak.api.PropertyState value = org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty(\"value\", p1.getValue(base, i), base);\n            if (evaluate(org.apache.jackrabbit.oak.spi.query.PropertyValues.create(value), p2)) {\n                return true;\n            }\n        }\n        return false;\n    } else {\n        return evaluate(p1, p2);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return evaluate(p1, p2)",
            "dst_parent": "{\n    return evaluate(p1, p2);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return evaluate(p1, p2)",
            "src_parent": "{\n    org.apache.jackrabbit.oak.api.PropertyValue p1 = operand1.currentProperty();\n    if (p1 == null) {\n        return false;\n    }\n    org.apache.jackrabbit.oak.api.PropertyValue p2 = operand2.currentValue();\n    if (p2 == null) {\n        return false;\n    }\n    try {\n        p2 = convertValueToType(p2, p1);\n    } catch (java.lang.IllegalArgumentException ex) {\n        return false;\n    }\n    return evaluate(p1, p2);\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        }
      ],
      "file_name": "ComparisonImpl"
    }
  ],
  "id": "jackrabbit-oak_8188ef54"
}