{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "map.entrySet()",
            "dst_parent": "for (java.util.Map.Entry<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Revision.RevisionRange>> e : map.entrySet()) {\n    if ((revision.getClusterId() == currentClusterNodeId) && (e.getKey() == currentClusterNodeId)) {\n        continue;\n    }\n    java.util.List<org.apache.jackrabbit.oak.plugins.document.Revision.RevisionRange> list = e.getValue();\n    org.apache.jackrabbit.oak.plugins.document.Revision.RevisionRange range;\n    for (int i = list.size() - 1; i >= 0; i--) {\n        range = list.get(i);\n        if (range.seenAt.compareRevisionTimeThenClusterId(seenAt) <= 0) {\n            java.lang.Long inactiveSince = inactive.get(range.revision.getClusterId());\n            if (((inactiveSince != null) && (revision.getTimestamp() > inactiveSince)) && (range.revision.getTimestamp() < inactiveSince)) {\n            } else {\n                timestamp = java.lang.Math.min(timestamp, range.revision.getTimestamp());\n            }\n            break;\n        }\n    }\n}",
            "dst_parent_type": "ForEach",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "map.values()",
            "src_parent": "for (java.util.List<org.apache.jackrabbit.oak.plugins.document.Revision.RevisionRange> list : map.values()) {\n    org.apache.jackrabbit.oak.plugins.document.Revision.RevisionRange range;\n    for (int i = list.size() - 1; i >= 0; i--) {\n        range = list.get(i);\n        if (range.seenAt.compareRevisionTimeThenClusterId(seenAt) <= 0) {\n            java.lang.Long inactiveSince = inactive.get(range.revision.getClusterId());\n            if (((inactiveSince != null) && (revision.getTimestamp() > inactiveSince)) && (range.revision.getTimestamp() < inactiveSince)) {\n            } else {\n                timestamp = java.lang.Math.min(timestamp, range.revision.getTimestamp());\n            }\n            break;\n        }\n    }\n}",
            "src_parent_type": "ForEach",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.util.Map.Entry<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Revision.RevisionRange>> e",
            "src_parent": "for (java.util.Map.Entry<java.lang.Integer, java.util.List<org.apache.jackrabbit.oak.plugins.document.Revision.RevisionRange>> e : map.entrySet()) {\n    if ((revision.getClusterId() == currentClusterNodeId) && (e.getKey() == currentClusterNodeId)) {\n        continue;\n    }\n    java.util.List<org.apache.jackrabbit.oak.plugins.document.Revision.RevisionRange> list = e.getValue();\n    org.apache.jackrabbit.oak.plugins.document.Revision.RevisionRange range;\n    for (int i = list.size() - 1; i >= 0; i--) {\n        range = list.get(i);\n        if (range.seenAt.compareRevisionTimeThenClusterId(seenAt) <= 0) {\n            java.lang.Long inactiveSince = inactive.get(range.revision.getClusterId());\n            if (((inactiveSince != null) && (revision.getTimestamp() > inactiveSince)) && (range.revision.getTimestamp() < inactiveSince)) {\n            } else {\n                timestamp = java.lang.Math.min(timestamp, range.revision.getTimestamp());\n            }\n            break;\n        }\n    }\n}",
            "src_parent_type": "ForEach",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if ((revision.getClusterId() == currentClusterNodeId) && (e.getKey() == currentClusterNodeId)) {\n    continue;\n}",
            "src_parent": "{\n    if ((revision.getClusterId() == currentClusterNodeId) && (e.getKey() == currentClusterNodeId)) {\n        continue;\n    }\n    java.util.List<org.apache.jackrabbit.oak.plugins.document.Revision.RevisionRange> list = e.getValue();\n    org.apache.jackrabbit.oak.plugins.document.Revision.RevisionRange range;\n    for (int i = list.size() - 1; i >= 0; i--) {\n        range = list.get(i);\n        if (range.seenAt.compareRevisionTimeThenClusterId(seenAt) <= 0) {\n            java.lang.Long inactiveSince = inactive.get(range.revision.getClusterId());\n            if (((inactiveSince != null) && (revision.getTimestamp() > inactiveSince)) && (range.revision.getTimestamp() < inactiveSince)) {\n            } else {\n                timestamp = java.lang.Math.min(timestamp, range.revision.getTimestamp());\n            }\n            break;\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "e.getValue()",
            "src_parent": "java.util.List<org.apache.jackrabbit.oak.plugins.document.Revision.RevisionRange> list = e.getValue()",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.List<org.apache.jackrabbit.oak.plugins.document.Revision.RevisionRange> list = e.getValue()",
            "dst_parent": "{\n    if ((revision.getClusterId() == currentClusterNodeId) && (e.getKey() == currentClusterNodeId)) {\n        continue;\n    }\n    java.util.List<org.apache.jackrabbit.oak.plugins.document.Revision.RevisionRange> list = e.getValue();\n    org.apache.jackrabbit.oak.plugins.document.Revision.RevisionRange range;\n    for (int i = list.size() - 1; i >= 0; i--) {\n        range = list.get(i);\n        if (range.seenAt.compareRevisionTimeThenClusterId(seenAt) <= 0) {\n            java.lang.Long inactiveSince = inactive.get(range.revision.getClusterId());\n            if (((inactiveSince != null) && (revision.getTimestamp() > inactiveSince)) && (range.revision.getTimestamp() < inactiveSince)) {\n            } else {\n                timestamp = java.lang.Math.min(timestamp, range.revision.getTimestamp());\n            }\n            break;\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.util.List<org.apache.jackrabbit.oak.plugins.document.Revision.RevisionRange> list",
            "src_parent": "for (java.util.List<org.apache.jackrabbit.oak.plugins.document.Revision.RevisionRange> list : map.values()) {\n    org.apache.jackrabbit.oak.plugins.document.Revision.RevisionRange range;\n    for (int i = list.size() - 1; i >= 0; i--) {\n        range = list.get(i);\n        if (range.seenAt.compareRevisionTimeThenClusterId(seenAt) <= 0) {\n            java.lang.Long inactiveSince = inactive.get(range.revision.getClusterId());\n            if (((inactiveSince != null) && (revision.getTimestamp() > inactiveSince)) && (range.revision.getTimestamp() < inactiveSince)) {\n            } else {\n                timestamp = java.lang.Math.min(timestamp, range.revision.getTimestamp());\n            }\n            break;\n        }\n    }\n}",
            "src_parent_type": "ForEach",
            "src_type": "LocalVariable"
          }
        }
      ],
      "file_name": "Revision"
    }
  ],
  "id": "jackrabbit-oak_1d08cbd3"
}