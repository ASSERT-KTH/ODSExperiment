{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "protected void handleDoneFile(org.apache.camel.Exchange exchange) {\n    boolean complete = exchange.getProperty(Exchange.BATCH_COMPLETE, false, java.lang.Boolean.class);\n    if ((endpoint.getDoneFileName() != null) && (!endpoint.isNoop())) {\n        java.lang.String doneFileName = endpoint.createDoneFileName(absoluteFileName);\n        org.apache.camel.util.ObjectHelper.notEmpty(doneFileName, \"doneFileName\", endpoint);\n        if ((endpoint.getDoneFileName().indexOf(\"{file:name\") > 0) || complete) {\n            try {\n                boolean deleted = operations.deleteFile(doneFileName);\n                log.trace(\"Done file: {} was deleted: {}\", doneFileName, deleted);\n                if (!deleted) {\n                    log.warn((\"Done file: \" + doneFileName) + \" could not be deleted\");\n                }\n            } catch (java.lang.Exception e) {\n                handleException(\"Error deleting done file: \" + doneFileName, exchange, e);\n            }\n        }\n    }\n}",
            "dst_parent": "public class GenericFileOnCompletion<T> implements org.apache.camel.spi.Synchronization {\n    private final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.camel.component.file.GenericFileOnCompletion.class);\n\n    private org.apache.camel.component.file.GenericFileEndpoint<T> endpoint;\n\n    private org.apache.camel.component.file.GenericFileOperations<T> operations;\n\n    private org.apache.camel.spi.ExceptionHandler exceptionHandler;\n\n    private org.apache.camel.component.file.GenericFile<T> file;\n\n    private java.lang.String absoluteFileName;\n\n    public GenericFileOnCompletion(org.apache.camel.component.file.GenericFileEndpoint<T> endpoint, org.apache.camel.component.file.GenericFileOperations<T> operations, org.apache.camel.component.file.GenericFile<T> file, java.lang.String absoluteFileName) {\n        this.endpoint = endpoint;\n        this.operations = operations;\n        this.file = file;\n        this.absoluteFileName = absoluteFileName;\n        this.exceptionHandler = new org.apache.camel.impl.LoggingExceptionHandler(endpoint.getCamelContext(), getClass());\n    }\n\n    public void onComplete(org.apache.camel.Exchange exchange) {\n        onCompletion(exchange);\n    }\n\n    public void onFailure(org.apache.camel.Exchange exchange) {\n        onCompletion(exchange);\n    }\n\n    public org.apache.camel.spi.ExceptionHandler getExceptionHandler() {\n        return exceptionHandler;\n    }\n\n    public void setExceptionHandler(org.apache.camel.spi.ExceptionHandler exceptionHandler) {\n        this.exceptionHandler = exceptionHandler;\n    }\n\n    protected void onCompletion(org.apache.camel.Exchange exchange) {\n        org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy = endpoint.getGenericFileProcessStrategy();\n        log.debug(\"Done processing file: {} using exchange: {}\", file, exchange);\n        boolean committed = false;\n        try {\n            boolean failed = exchange.isFailed();\n            if (!failed) {\n                processStrategyCommit(processStrategy, exchange, file);\n                committed = true;\n            }\n        } finally {\n            if (!committed) {\n                processStrategyRollback(processStrategy, exchange, file);\n            }\n            endpoint.getInProgressRepository().remove(absoluteFileName);\n        }\n    }\n\n    protected void processStrategyCommit(org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy, org.apache.camel.Exchange exchange, org.apache.camel.component.file.GenericFile<T> file) {\n        if (endpoint.isIdempotent()) {\n            java.lang.String key = absoluteFileName;\n            if (endpoint.getIdempotentKey() != null) {\n                org.apache.camel.Exchange dummy = endpoint.createExchange(file);\n                key = endpoint.getIdempotentKey().evaluate(dummy, java.lang.String.class);\n            }\n            if (key != null) {\n                endpoint.getIdempotentRepository().add(key);\n            }\n        }\n        handleDoneFile(exchange);\n        try {\n            log.trace(\"Commit file strategy: {} for file: {}\", processStrategy, file);\n            processStrategy.commit(operations, endpoint, exchange, file);\n        } catch (java.lang.Exception e) {\n            handleException(\"Error during commit\", exchange, e);\n        }\n    }\n\n    protected void processStrategyRollback(org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy, org.apache.camel.Exchange exchange, org.apache.camel.component.file.GenericFile<T> file) {\n        if (log.isWarnEnabled()) {\n            log.warn(((\"Rollback file strategy: \" + processStrategy) + \" for file: \") + file);\n        }\n        if (endpoint.getMoveFailed() != null) {\n            handleDoneFile(exchange);\n        }\n        try {\n            processStrategy.rollback(operations, endpoint, exchange, file);\n        } catch (java.lang.Exception e) {\n            handleException(\"Error during rollback\", exchange, e);\n        }\n    }\n\n    protected void handleDoneFile(org.apache.camel.Exchange exchange) {\n        boolean complete = exchange.getProperty(Exchange.BATCH_COMPLETE, false, java.lang.Boolean.class);\n        if ((endpoint.getDoneFileName() != null) && (!endpoint.isNoop())) {\n            java.lang.String doneFileName = endpoint.createDoneFileName(absoluteFileName);\n            org.apache.camel.util.ObjectHelper.notEmpty(doneFileName, \"doneFileName\", endpoint);\n            if ((endpoint.getDoneFileName().indexOf(\"{file:name\") > 0) || complete) {\n                try {\n                    boolean deleted = operations.deleteFile(doneFileName);\n                    log.trace(\"Done file: {} was deleted: {}\", doneFileName, deleted);\n                    if (!deleted) {\n                        log.warn((\"Done file: \" + doneFileName) + \" could not be deleted\");\n                    }\n                } catch (java.lang.Exception e) {\n                    handleException(\"Error deleting done file: \" + doneFileName, exchange, e);\n                }\n            }\n        }\n    }\n\n    protected void handleException(java.lang.String message, org.apache.camel.Exchange exchange, java.lang.Throwable t) {\n        java.lang.Throwable newt = (t == null) ? new java.lang.IllegalArgumentException(\"Handling [null] exception\") : t;\n        getExceptionHandler().handleException(message, exchange, newt);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return \"GenericFileOnCompletion\";\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "protected void processStrategyCommit(org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy, org.apache.camel.Exchange exchange, org.apache.camel.component.file.GenericFile<T> file) {\n    if (endpoint.isIdempotent()) {\n        java.lang.String key = absoluteFileName;\n        if (endpoint.getIdempotentKey() != null) {\n            org.apache.camel.Exchange dummy = endpoint.createExchange(file);\n            key = endpoint.getIdempotentKey().evaluate(dummy, java.lang.String.class);\n        }\n        if (key != null) {\n            endpoint.getIdempotentRepository().add(key);\n        }\n    }\n    boolean complete = exchange.getProperty(Exchange.BATCH_COMPLETE, false, java.lang.Boolean.class);\n    if ((endpoint.getDoneFileName() != null) && (!endpoint.isNoop())) {\n        java.lang.String doneFileName = endpoint.createDoneFileName(absoluteFileName);\n        org.apache.camel.util.ObjectHelper.notEmpty(doneFileName, \"doneFileName\", endpoint);\n        if ((endpoint.getDoneFileName().indexOf(\"{file:name\") > 0) || complete) {\n            try {\n                boolean deleted = operations.deleteFile(doneFileName);\n                log.trace(\"Done file: {} was deleted: {}\", doneFileName, deleted);\n                if (!deleted) {\n                    log.warn((\"Done file: \" + doneFileName) + \" could not be deleted\");\n                }\n            } catch (java.lang.Exception e) {\n                handleException(\"Error deleting done file: \" + doneFileName, exchange, e);\n            }\n        }\n    }\n    try {\n        log.trace(\"Commit file strategy: {} for file: {}\", processStrategy, file);\n        processStrategy.commit(operations, endpoint, exchange, file);\n    } catch (java.lang.Exception e) {\n        handleException(\"Error during commit\", exchange, e);\n    }\n}",
            "src_parent": "public class GenericFileOnCompletion<T> implements org.apache.camel.spi.Synchronization {\n    private final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.camel.component.file.GenericFileOnCompletion.class);\n\n    private org.apache.camel.component.file.GenericFileEndpoint<T> endpoint;\n\n    private org.apache.camel.component.file.GenericFileOperations<T> operations;\n\n    private org.apache.camel.spi.ExceptionHandler exceptionHandler;\n\n    private org.apache.camel.component.file.GenericFile<T> file;\n\n    private java.lang.String absoluteFileName;\n\n    public GenericFileOnCompletion(org.apache.camel.component.file.GenericFileEndpoint<T> endpoint, org.apache.camel.component.file.GenericFileOperations<T> operations, org.apache.camel.component.file.GenericFile<T> file, java.lang.String absoluteFileName) {\n        this.endpoint = endpoint;\n        this.operations = operations;\n        this.file = file;\n        this.absoluteFileName = absoluteFileName;\n        this.exceptionHandler = new org.apache.camel.impl.LoggingExceptionHandler(endpoint.getCamelContext(), getClass());\n    }\n\n    public void onComplete(org.apache.camel.Exchange exchange) {\n        onCompletion(exchange);\n    }\n\n    public void onFailure(org.apache.camel.Exchange exchange) {\n        onCompletion(exchange);\n    }\n\n    public org.apache.camel.spi.ExceptionHandler getExceptionHandler() {\n        return exceptionHandler;\n    }\n\n    public void setExceptionHandler(org.apache.camel.spi.ExceptionHandler exceptionHandler) {\n        this.exceptionHandler = exceptionHandler;\n    }\n\n    protected void onCompletion(org.apache.camel.Exchange exchange) {\n        org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy = endpoint.getGenericFileProcessStrategy();\n        log.debug(\"Done processing file: {} using exchange: {}\", file, exchange);\n        boolean committed = false;\n        try {\n            boolean failed = exchange.isFailed();\n            if (!failed) {\n                processStrategyCommit(processStrategy, exchange, file);\n                committed = true;\n            }\n        } finally {\n            if (!committed) {\n                processStrategyRollback(processStrategy, exchange, file);\n            }\n            endpoint.getInProgressRepository().remove(absoluteFileName);\n        }\n    }\n\n    protected void processStrategyCommit(org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy, org.apache.camel.Exchange exchange, org.apache.camel.component.file.GenericFile<T> file) {\n        if (endpoint.isIdempotent()) {\n            java.lang.String key = absoluteFileName;\n            if (endpoint.getIdempotentKey() != null) {\n                org.apache.camel.Exchange dummy = endpoint.createExchange(file);\n                key = endpoint.getIdempotentKey().evaluate(dummy, java.lang.String.class);\n            }\n            if (key != null) {\n                endpoint.getIdempotentRepository().add(key);\n            }\n        }\n        boolean complete = exchange.getProperty(Exchange.BATCH_COMPLETE, false, java.lang.Boolean.class);\n        if ((endpoint.getDoneFileName() != null) && (!endpoint.isNoop())) {\n            java.lang.String doneFileName = endpoint.createDoneFileName(absoluteFileName);\n            org.apache.camel.util.ObjectHelper.notEmpty(doneFileName, \"doneFileName\", endpoint);\n            if ((endpoint.getDoneFileName().indexOf(\"{file:name\") > 0) || complete) {\n                try {\n                    boolean deleted = operations.deleteFile(doneFileName);\n                    log.trace(\"Done file: {} was deleted: {}\", doneFileName, deleted);\n                    if (!deleted) {\n                        log.warn((\"Done file: \" + doneFileName) + \" could not be deleted\");\n                    }\n                } catch (java.lang.Exception e) {\n                    handleException(\"Error deleting done file: \" + doneFileName, exchange, e);\n                }\n            }\n        }\n        try {\n            log.trace(\"Commit file strategy: {} for file: {}\", processStrategy, file);\n            processStrategy.commit(operations, endpoint, exchange, file);\n        } catch (java.lang.Exception e) {\n            handleException(\"Error during commit\", exchange, e);\n        }\n    }\n\n    protected void processStrategyRollback(org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy, org.apache.camel.Exchange exchange, org.apache.camel.component.file.GenericFile<T> file) {\n        if (log.isWarnEnabled()) {\n            log.warn(((\"Rollback file strategy: \" + processStrategy) + \" for file: \") + file);\n        }\n        try {\n            processStrategy.rollback(operations, endpoint, exchange, file);\n        } catch (java.lang.Exception e) {\n            handleException(\"Error during rollback\", exchange, e);\n        }\n    }\n\n    protected void handleException(java.lang.String message, org.apache.camel.Exchange exchange, java.lang.Throwable t) {\n        java.lang.Throwable newt = (t == null) ? new java.lang.IllegalArgumentException(\"Handling [null] exception\") : t;\n        getExceptionHandler().handleException(message, exchange, newt);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return \"GenericFileOnCompletion\";\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "protected void processStrategyCommit(org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy, org.apache.camel.Exchange exchange, org.apache.camel.component.file.GenericFile<T> file) {\n    if (endpoint.isIdempotent()) {\n        java.lang.String key = absoluteFileName;\n        if (endpoint.getIdempotentKey() != null) {\n            org.apache.camel.Exchange dummy = endpoint.createExchange(file);\n            key = endpoint.getIdempotentKey().evaluate(dummy, java.lang.String.class);\n        }\n        if (key != null) {\n            endpoint.getIdempotentRepository().add(key);\n        }\n    }\n    handleDoneFile(exchange);\n    try {\n        log.trace(\"Commit file strategy: {} for file: {}\", processStrategy, file);\n        processStrategy.commit(operations, endpoint, exchange, file);\n    } catch (java.lang.Exception e) {\n        handleException(\"Error during commit\", exchange, e);\n    }\n}",
            "src_parent": "public class GenericFileOnCompletion<T> implements org.apache.camel.spi.Synchronization {\n    private final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.camel.component.file.GenericFileOnCompletion.class);\n\n    private org.apache.camel.component.file.GenericFileEndpoint<T> endpoint;\n\n    private org.apache.camel.component.file.GenericFileOperations<T> operations;\n\n    private org.apache.camel.spi.ExceptionHandler exceptionHandler;\n\n    private org.apache.camel.component.file.GenericFile<T> file;\n\n    private java.lang.String absoluteFileName;\n\n    public GenericFileOnCompletion(org.apache.camel.component.file.GenericFileEndpoint<T> endpoint, org.apache.camel.component.file.GenericFileOperations<T> operations, org.apache.camel.component.file.GenericFile<T> file, java.lang.String absoluteFileName) {\n        this.endpoint = endpoint;\n        this.operations = operations;\n        this.file = file;\n        this.absoluteFileName = absoluteFileName;\n        this.exceptionHandler = new org.apache.camel.impl.LoggingExceptionHandler(endpoint.getCamelContext(), getClass());\n    }\n\n    public void onComplete(org.apache.camel.Exchange exchange) {\n        onCompletion(exchange);\n    }\n\n    public void onFailure(org.apache.camel.Exchange exchange) {\n        onCompletion(exchange);\n    }\n\n    public org.apache.camel.spi.ExceptionHandler getExceptionHandler() {\n        return exceptionHandler;\n    }\n\n    public void setExceptionHandler(org.apache.camel.spi.ExceptionHandler exceptionHandler) {\n        this.exceptionHandler = exceptionHandler;\n    }\n\n    protected void onCompletion(org.apache.camel.Exchange exchange) {\n        org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy = endpoint.getGenericFileProcessStrategy();\n        log.debug(\"Done processing file: {} using exchange: {}\", file, exchange);\n        boolean committed = false;\n        try {\n            boolean failed = exchange.isFailed();\n            if (!failed) {\n                processStrategyCommit(processStrategy, exchange, file);\n                committed = true;\n            }\n        } finally {\n            if (!committed) {\n                processStrategyRollback(processStrategy, exchange, file);\n            }\n            endpoint.getInProgressRepository().remove(absoluteFileName);\n        }\n    }\n\n    protected void processStrategyCommit(org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy, org.apache.camel.Exchange exchange, org.apache.camel.component.file.GenericFile<T> file) {\n        if (endpoint.isIdempotent()) {\n            java.lang.String key = absoluteFileName;\n            if (endpoint.getIdempotentKey() != null) {\n                org.apache.camel.Exchange dummy = endpoint.createExchange(file);\n                key = endpoint.getIdempotentKey().evaluate(dummy, java.lang.String.class);\n            }\n            if (key != null) {\n                endpoint.getIdempotentRepository().add(key);\n            }\n        }\n        handleDoneFile(exchange);\n        try {\n            log.trace(\"Commit file strategy: {} for file: {}\", processStrategy, file);\n            processStrategy.commit(operations, endpoint, exchange, file);\n        } catch (java.lang.Exception e) {\n            handleException(\"Error during commit\", exchange, e);\n        }\n    }\n\n    protected void processStrategyRollback(org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy, org.apache.camel.Exchange exchange, org.apache.camel.component.file.GenericFile<T> file) {\n        if (log.isWarnEnabled()) {\n            log.warn(((\"Rollback file strategy: \" + processStrategy) + \" for file: \") + file);\n        }\n        if (endpoint.getMoveFailed() != null) {\n            handleDoneFile(exchange);\n        }\n        try {\n            processStrategy.rollback(operations, endpoint, exchange, file);\n        } catch (java.lang.Exception e) {\n            handleException(\"Error during rollback\", exchange, e);\n        }\n    }\n\n    protected void handleDoneFile(org.apache.camel.Exchange exchange) {\n        boolean complete = exchange.getProperty(Exchange.BATCH_COMPLETE, false, java.lang.Boolean.class);\n        if ((endpoint.getDoneFileName() != null) && (!endpoint.isNoop())) {\n            java.lang.String doneFileName = endpoint.createDoneFileName(absoluteFileName);\n            org.apache.camel.util.ObjectHelper.notEmpty(doneFileName, \"doneFileName\", endpoint);\n            if ((endpoint.getDoneFileName().indexOf(\"{file:name\") > 0) || complete) {\n                try {\n                    boolean deleted = operations.deleteFile(doneFileName);\n                    log.trace(\"Done file: {} was deleted: {}\", doneFileName, deleted);\n                    if (!deleted) {\n                        log.warn((\"Done file: \" + doneFileName) + \" could not be deleted\");\n                    }\n                } catch (java.lang.Exception e) {\n                    handleException(\"Error deleting done file: \" + doneFileName, exchange, e);\n                }\n            }\n        }\n    }\n\n    protected void handleException(java.lang.String message, org.apache.camel.Exchange exchange, java.lang.Throwable t) {\n        java.lang.Throwable newt = (t == null) ? new java.lang.IllegalArgumentException(\"Handling [null] exception\") : t;\n        getExceptionHandler().handleException(message, exchange, newt);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return \"GenericFileOnCompletion\";\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (endpoint.getMoveFailed() != null) {\n    handleDoneFile(exchange);\n}",
            "src_parent": "{\n    if (log.isWarnEnabled()) {\n        log.warn(((\"Rollback file strategy: \" + processStrategy) + \" for file: \") + file);\n    }\n    if (endpoint.getMoveFailed() != null) {\n        handleDoneFile(exchange);\n    }\n    try {\n        processStrategy.rollback(operations, endpoint, exchange, file);\n    } catch (java.lang.Exception e) {\n        handleException(\"Error during rollback\", exchange, e);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "protected void handleDoneFile(org.apache.camel.Exchange exchange) {\n    boolean complete = exchange.getProperty(Exchange.BATCH_COMPLETE, false, java.lang.Boolean.class);\n    if ((endpoint.getDoneFileName() != null) && (!endpoint.isNoop())) {\n        java.lang.String doneFileName = endpoint.createDoneFileName(absoluteFileName);\n        org.apache.camel.util.ObjectHelper.notEmpty(doneFileName, \"doneFileName\", endpoint);\n        if ((endpoint.getDoneFileName().indexOf(\"{file:name\") > 0) || complete) {\n            try {\n                boolean deleted = operations.deleteFile(doneFileName);\n                log.trace(\"Done file: {} was deleted: {}\", doneFileName, deleted);\n                if (!deleted) {\n                    log.warn((\"Done file: \" + doneFileName) + \" could not be deleted\");\n                }\n            } catch (java.lang.Exception e) {\n                handleException(\"Error deleting done file: \" + doneFileName, exchange, e);\n            }\n        }\n    }\n}",
            "dst_parent": "public class GenericFileOnCompletion<T> implements org.apache.camel.spi.Synchronization {\n    private final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.camel.component.file.GenericFileOnCompletion.class);\n\n    private org.apache.camel.component.file.GenericFileEndpoint<T> endpoint;\n\n    private org.apache.camel.component.file.GenericFileOperations<T> operations;\n\n    private org.apache.camel.spi.ExceptionHandler exceptionHandler;\n\n    private org.apache.camel.component.file.GenericFile<T> file;\n\n    private java.lang.String absoluteFileName;\n\n    public GenericFileOnCompletion(org.apache.camel.component.file.GenericFileEndpoint<T> endpoint, org.apache.camel.component.file.GenericFileOperations<T> operations, org.apache.camel.component.file.GenericFile<T> file, java.lang.String absoluteFileName) {\n        this.endpoint = endpoint;\n        this.operations = operations;\n        this.file = file;\n        this.absoluteFileName = absoluteFileName;\n        this.exceptionHandler = new org.apache.camel.impl.LoggingExceptionHandler(endpoint.getCamelContext(), getClass());\n    }\n\n    public void onComplete(org.apache.camel.Exchange exchange) {\n        onCompletion(exchange);\n    }\n\n    public void onFailure(org.apache.camel.Exchange exchange) {\n        onCompletion(exchange);\n    }\n\n    public org.apache.camel.spi.ExceptionHandler getExceptionHandler() {\n        return exceptionHandler;\n    }\n\n    public void setExceptionHandler(org.apache.camel.spi.ExceptionHandler exceptionHandler) {\n        this.exceptionHandler = exceptionHandler;\n    }\n\n    protected void onCompletion(org.apache.camel.Exchange exchange) {\n        org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy = endpoint.getGenericFileProcessStrategy();\n        log.debug(\"Done processing file: {} using exchange: {}\", file, exchange);\n        boolean committed = false;\n        try {\n            boolean failed = exchange.isFailed();\n            if (!failed) {\n                processStrategyCommit(processStrategy, exchange, file);\n                committed = true;\n            }\n        } finally {\n            if (!committed) {\n                processStrategyRollback(processStrategy, exchange, file);\n            }\n            endpoint.getInProgressRepository().remove(absoluteFileName);\n        }\n    }\n\n    protected void processStrategyCommit(org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy, org.apache.camel.Exchange exchange, org.apache.camel.component.file.GenericFile<T> file) {\n        if (endpoint.isIdempotent()) {\n            java.lang.String key = absoluteFileName;\n            if (endpoint.getIdempotentKey() != null) {\n                org.apache.camel.Exchange dummy = endpoint.createExchange(file);\n                key = endpoint.getIdempotentKey().evaluate(dummy, java.lang.String.class);\n            }\n            if (key != null) {\n                endpoint.getIdempotentRepository().add(key);\n            }\n        }\n        handleDoneFile(exchange);\n        try {\n            log.trace(\"Commit file strategy: {} for file: {}\", processStrategy, file);\n            processStrategy.commit(operations, endpoint, exchange, file);\n        } catch (java.lang.Exception e) {\n            handleException(\"Error during commit\", exchange, e);\n        }\n    }\n\n    protected void processStrategyRollback(org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy, org.apache.camel.Exchange exchange, org.apache.camel.component.file.GenericFile<T> file) {\n        if (log.isWarnEnabled()) {\n            log.warn(((\"Rollback file strategy: \" + processStrategy) + \" for file: \") + file);\n        }\n        if (endpoint.getMoveFailed() != null) {\n            handleDoneFile(exchange);\n        }\n        try {\n            processStrategy.rollback(operations, endpoint, exchange, file);\n        } catch (java.lang.Exception e) {\n            handleException(\"Error during rollback\", exchange, e);\n        }\n    }\n\n    protected void handleDoneFile(org.apache.camel.Exchange exchange) {\n        boolean complete = exchange.getProperty(Exchange.BATCH_COMPLETE, false, java.lang.Boolean.class);\n        if ((endpoint.getDoneFileName() != null) && (!endpoint.isNoop())) {\n            java.lang.String doneFileName = endpoint.createDoneFileName(absoluteFileName);\n            org.apache.camel.util.ObjectHelper.notEmpty(doneFileName, \"doneFileName\", endpoint);\n            if ((endpoint.getDoneFileName().indexOf(\"{file:name\") > 0) || complete) {\n                try {\n                    boolean deleted = operations.deleteFile(doneFileName);\n                    log.trace(\"Done file: {} was deleted: {}\", doneFileName, deleted);\n                    if (!deleted) {\n                        log.warn((\"Done file: \" + doneFileName) + \" could not be deleted\");\n                    }\n                } catch (java.lang.Exception e) {\n                    handleException(\"Error deleting done file: \" + doneFileName, exchange, e);\n                }\n            }\n        }\n    }\n\n    protected void handleException(java.lang.String message, org.apache.camel.Exchange exchange, java.lang.Throwable t) {\n        java.lang.Throwable newt = (t == null) ? new java.lang.IllegalArgumentException(\"Handling [null] exception\") : t;\n        getExceptionHandler().handleException(message, exchange, newt);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return \"GenericFileOnCompletion\";\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "MOV",
            "src": "protected void processStrategyCommit(org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy, org.apache.camel.Exchange exchange, org.apache.camel.component.file.GenericFile<T> file) {\n    if (endpoint.isIdempotent()) {\n        java.lang.String key = absoluteFileName;\n        if (endpoint.getIdempotentKey() != null) {\n            org.apache.camel.Exchange dummy = endpoint.createExchange(file);\n            key = endpoint.getIdempotentKey().evaluate(dummy, java.lang.String.class);\n        }\n        if (key != null) {\n            endpoint.getIdempotentRepository().add(key);\n        }\n    }\n    boolean complete = exchange.getProperty(Exchange.BATCH_COMPLETE, false, java.lang.Boolean.class);\n    if ((endpoint.getDoneFileName() != null) && (!endpoint.isNoop())) {\n        java.lang.String doneFileName = endpoint.createDoneFileName(absoluteFileName);\n        org.apache.camel.util.ObjectHelper.notEmpty(doneFileName, \"doneFileName\", endpoint);\n        if ((endpoint.getDoneFileName().indexOf(\"{file:name\") > 0) || complete) {\n            try {\n                boolean deleted = operations.deleteFile(doneFileName);\n                log.trace(\"Done file: {} was deleted: {}\", doneFileName, deleted);\n                if (!deleted) {\n                    log.warn((\"Done file: \" + doneFileName) + \" could not be deleted\");\n                }\n            } catch (java.lang.Exception e) {\n                handleException(\"Error deleting done file: \" + doneFileName, exchange, e);\n            }\n        }\n    }\n    try {\n        log.trace(\"Commit file strategy: {} for file: {}\", processStrategy, file);\n        processStrategy.commit(operations, endpoint, exchange, file);\n    } catch (java.lang.Exception e) {\n        handleException(\"Error during commit\", exchange, e);\n    }\n}",
            "src_parent": "public class GenericFileOnCompletion<T> implements org.apache.camel.spi.Synchronization {\n    private final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(org.apache.camel.component.file.GenericFileOnCompletion.class);\n\n    private org.apache.camel.component.file.GenericFileEndpoint<T> endpoint;\n\n    private org.apache.camel.component.file.GenericFileOperations<T> operations;\n\n    private org.apache.camel.spi.ExceptionHandler exceptionHandler;\n\n    private org.apache.camel.component.file.GenericFile<T> file;\n\n    private java.lang.String absoluteFileName;\n\n    public GenericFileOnCompletion(org.apache.camel.component.file.GenericFileEndpoint<T> endpoint, org.apache.camel.component.file.GenericFileOperations<T> operations, org.apache.camel.component.file.GenericFile<T> file, java.lang.String absoluteFileName) {\n        this.endpoint = endpoint;\n        this.operations = operations;\n        this.file = file;\n        this.absoluteFileName = absoluteFileName;\n        this.exceptionHandler = new org.apache.camel.impl.LoggingExceptionHandler(endpoint.getCamelContext(), getClass());\n    }\n\n    public void onComplete(org.apache.camel.Exchange exchange) {\n        onCompletion(exchange);\n    }\n\n    public void onFailure(org.apache.camel.Exchange exchange) {\n        onCompletion(exchange);\n    }\n\n    public org.apache.camel.spi.ExceptionHandler getExceptionHandler() {\n        return exceptionHandler;\n    }\n\n    public void setExceptionHandler(org.apache.camel.spi.ExceptionHandler exceptionHandler) {\n        this.exceptionHandler = exceptionHandler;\n    }\n\n    protected void onCompletion(org.apache.camel.Exchange exchange) {\n        org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy = endpoint.getGenericFileProcessStrategy();\n        log.debug(\"Done processing file: {} using exchange: {}\", file, exchange);\n        boolean committed = false;\n        try {\n            boolean failed = exchange.isFailed();\n            if (!failed) {\n                processStrategyCommit(processStrategy, exchange, file);\n                committed = true;\n            }\n        } finally {\n            if (!committed) {\n                processStrategyRollback(processStrategy, exchange, file);\n            }\n            endpoint.getInProgressRepository().remove(absoluteFileName);\n        }\n    }\n\n    protected void processStrategyCommit(org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy, org.apache.camel.Exchange exchange, org.apache.camel.component.file.GenericFile<T> file) {\n        if (endpoint.isIdempotent()) {\n            java.lang.String key = absoluteFileName;\n            if (endpoint.getIdempotentKey() != null) {\n                org.apache.camel.Exchange dummy = endpoint.createExchange(file);\n                key = endpoint.getIdempotentKey().evaluate(dummy, java.lang.String.class);\n            }\n            if (key != null) {\n                endpoint.getIdempotentRepository().add(key);\n            }\n        }\n        boolean complete = exchange.getProperty(Exchange.BATCH_COMPLETE, false, java.lang.Boolean.class);\n        if ((endpoint.getDoneFileName() != null) && (!endpoint.isNoop())) {\n            java.lang.String doneFileName = endpoint.createDoneFileName(absoluteFileName);\n            org.apache.camel.util.ObjectHelper.notEmpty(doneFileName, \"doneFileName\", endpoint);\n            if ((endpoint.getDoneFileName().indexOf(\"{file:name\") > 0) || complete) {\n                try {\n                    boolean deleted = operations.deleteFile(doneFileName);\n                    log.trace(\"Done file: {} was deleted: {}\", doneFileName, deleted);\n                    if (!deleted) {\n                        log.warn((\"Done file: \" + doneFileName) + \" could not be deleted\");\n                    }\n                } catch (java.lang.Exception e) {\n                    handleException(\"Error deleting done file: \" + doneFileName, exchange, e);\n                }\n            }\n        }\n        try {\n            log.trace(\"Commit file strategy: {} for file: {}\", processStrategy, file);\n            processStrategy.commit(operations, endpoint, exchange, file);\n        } catch (java.lang.Exception e) {\n            handleException(\"Error during commit\", exchange, e);\n        }\n    }\n\n    protected void processStrategyRollback(org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy, org.apache.camel.Exchange exchange, org.apache.camel.component.file.GenericFile<T> file) {\n        if (log.isWarnEnabled()) {\n            log.warn(((\"Rollback file strategy: \" + processStrategy) + \" for file: \") + file);\n        }\n        try {\n            processStrategy.rollback(operations, endpoint, exchange, file);\n        } catch (java.lang.Exception e) {\n            handleException(\"Error during rollback\", exchange, e);\n        }\n    }\n\n    protected void handleException(java.lang.String message, org.apache.camel.Exchange exchange, java.lang.Throwable t) {\n        java.lang.Throwable newt = (t == null) ? new java.lang.IllegalArgumentException(\"Handling [null] exception\") : t;\n        getExceptionHandler().handleException(message, exchange, newt);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return \"GenericFileOnCompletion\";\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy",
            "dst_parent": "protected void processStrategyCommit(org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy, org.apache.camel.Exchange exchange, org.apache.camel.component.file.GenericFile<T> file) {\n    if (endpoint.isIdempotent()) {\n        java.lang.String key = absoluteFileName;\n        if (endpoint.getIdempotentKey() != null) {\n            org.apache.camel.Exchange dummy = endpoint.createExchange(file);\n            key = endpoint.getIdempotentKey().evaluate(dummy, java.lang.String.class);\n        }\n        if (key != null) {\n            endpoint.getIdempotentRepository().add(key);\n        }\n    }\n    handleDoneFile(exchange);\n    try {\n        log.trace(\"Commit file strategy: {} for file: {}\", processStrategy, file);\n        processStrategy.commit(operations, endpoint, exchange, file);\n    } catch (java.lang.Exception e) {\n        handleException(\"Error during commit\", exchange, e);\n    }\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy",
            "src_parent": "protected void processStrategyCommit(org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy, org.apache.camel.Exchange exchange, org.apache.camel.component.file.GenericFile<T> file) {\n    if (endpoint.isIdempotent()) {\n        java.lang.String key = absoluteFileName;\n        if (endpoint.getIdempotentKey() != null) {\n            org.apache.camel.Exchange dummy = endpoint.createExchange(file);\n            key = endpoint.getIdempotentKey().evaluate(dummy, java.lang.String.class);\n        }\n        if (key != null) {\n            endpoint.getIdempotentRepository().add(key);\n        }\n    }\n    boolean complete = exchange.getProperty(Exchange.BATCH_COMPLETE, false, java.lang.Boolean.class);\n    if ((endpoint.getDoneFileName() != null) && (!endpoint.isNoop())) {\n        java.lang.String doneFileName = endpoint.createDoneFileName(absoluteFileName);\n        org.apache.camel.util.ObjectHelper.notEmpty(doneFileName, \"doneFileName\", endpoint);\n        if ((endpoint.getDoneFileName().indexOf(\"{file:name\") > 0) || complete) {\n            try {\n                boolean deleted = operations.deleteFile(doneFileName);\n                log.trace(\"Done file: {} was deleted: {}\", doneFileName, deleted);\n                if (!deleted) {\n                    log.warn((\"Done file: \" + doneFileName) + \" could not be deleted\");\n                }\n            } catch (java.lang.Exception e) {\n                handleException(\"Error deleting done file: \" + doneFileName, exchange, e);\n            }\n        }\n    }\n    try {\n        log.trace(\"Commit file strategy: {} for file: {}\", processStrategy, file);\n        processStrategy.commit(operations, endpoint, exchange, file);\n    } catch (java.lang.Exception e) {\n        handleException(\"Error during commit\", exchange, e);\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.camel.component.file.GenericFile<T> file",
            "dst_parent": "protected void processStrategyCommit(org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy, org.apache.camel.Exchange exchange, org.apache.camel.component.file.GenericFile<T> file) {\n    if (endpoint.isIdempotent()) {\n        java.lang.String key = absoluteFileName;\n        if (endpoint.getIdempotentKey() != null) {\n            org.apache.camel.Exchange dummy = endpoint.createExchange(file);\n            key = endpoint.getIdempotentKey().evaluate(dummy, java.lang.String.class);\n        }\n        if (key != null) {\n            endpoint.getIdempotentRepository().add(key);\n        }\n    }\n    handleDoneFile(exchange);\n    try {\n        log.trace(\"Commit file strategy: {} for file: {}\", processStrategy, file);\n        processStrategy.commit(operations, endpoint, exchange, file);\n    } catch (java.lang.Exception e) {\n        handleException(\"Error during commit\", exchange, e);\n    }\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "org.apache.camel.component.file.GenericFile<T> file",
            "src_parent": "protected void processStrategyCommit(org.apache.camel.component.file.GenericFileProcessStrategy<T> processStrategy, org.apache.camel.Exchange exchange, org.apache.camel.component.file.GenericFile<T> file) {\n    if (endpoint.isIdempotent()) {\n        java.lang.String key = absoluteFileName;\n        if (endpoint.getIdempotentKey() != null) {\n            org.apache.camel.Exchange dummy = endpoint.createExchange(file);\n            key = endpoint.getIdempotentKey().evaluate(dummy, java.lang.String.class);\n        }\n        if (key != null) {\n            endpoint.getIdempotentRepository().add(key);\n        }\n    }\n    boolean complete = exchange.getProperty(Exchange.BATCH_COMPLETE, false, java.lang.Boolean.class);\n    if ((endpoint.getDoneFileName() != null) && (!endpoint.isNoop())) {\n        java.lang.String doneFileName = endpoint.createDoneFileName(absoluteFileName);\n        org.apache.camel.util.ObjectHelper.notEmpty(doneFileName, \"doneFileName\", endpoint);\n        if ((endpoint.getDoneFileName().indexOf(\"{file:name\") > 0) || complete) {\n            try {\n                boolean deleted = operations.deleteFile(doneFileName);\n                log.trace(\"Done file: {} was deleted: {}\", doneFileName, deleted);\n                if (!deleted) {\n                    log.warn((\"Done file: \" + doneFileName) + \" could not be deleted\");\n                }\n            } catch (java.lang.Exception e) {\n                handleException(\"Error deleting done file: \" + doneFileName, exchange, e);\n            }\n        }\n    }\n    try {\n        log.trace(\"Commit file strategy: {} for file: {}\", processStrategy, file);\n        processStrategy.commit(operations, endpoint, exchange, file);\n    } catch (java.lang.Exception e) {\n        handleException(\"Error during commit\", exchange, e);\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (endpoint.isIdempotent()) {\n    java.lang.String key = absoluteFileName;\n    if (endpoint.getIdempotentKey() != null) {\n        org.apache.camel.Exchange dummy = endpoint.createExchange(file);\n        key = endpoint.getIdempotentKey().evaluate(dummy, java.lang.String.class);\n    }\n    if (key != null) {\n        endpoint.getIdempotentRepository().add(key);\n    }\n}",
            "dst_parent": "{\n    if (endpoint.isIdempotent()) {\n        java.lang.String key = absoluteFileName;\n        if (endpoint.getIdempotentKey() != null) {\n            org.apache.camel.Exchange dummy = endpoint.createExchange(file);\n            key = endpoint.getIdempotentKey().evaluate(dummy, java.lang.String.class);\n        }\n        if (key != null) {\n            endpoint.getIdempotentRepository().add(key);\n        }\n    }\n    handleDoneFile(exchange);\n    try {\n        log.trace(\"Commit file strategy: {} for file: {}\", processStrategy, file);\n        processStrategy.commit(operations, endpoint, exchange, file);\n    } catch (java.lang.Exception e) {\n        handleException(\"Error during commit\", exchange, e);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (endpoint.isIdempotent()) {\n    java.lang.String key = absoluteFileName;\n    if (endpoint.getIdempotentKey() != null) {\n        org.apache.camel.Exchange dummy = endpoint.createExchange(file);\n        key = endpoint.getIdempotentKey().evaluate(dummy, java.lang.String.class);\n    }\n    if (key != null) {\n        endpoint.getIdempotentRepository().add(key);\n    }\n}",
            "src_parent": "{\n    if (endpoint.isIdempotent()) {\n        java.lang.String key = absoluteFileName;\n        if (endpoint.getIdempotentKey() != null) {\n            org.apache.camel.Exchange dummy = endpoint.createExchange(file);\n            key = endpoint.getIdempotentKey().evaluate(dummy, java.lang.String.class);\n        }\n        if (key != null) {\n            endpoint.getIdempotentRepository().add(key);\n        }\n    }\n    boolean complete = exchange.getProperty(Exchange.BATCH_COMPLETE, false, java.lang.Boolean.class);\n    if ((endpoint.getDoneFileName() != null) && (!endpoint.isNoop())) {\n        java.lang.String doneFileName = endpoint.createDoneFileName(absoluteFileName);\n        org.apache.camel.util.ObjectHelper.notEmpty(doneFileName, \"doneFileName\", endpoint);\n        if ((endpoint.getDoneFileName().indexOf(\"{file:name\") > 0) || complete) {\n            try {\n                boolean deleted = operations.deleteFile(doneFileName);\n                log.trace(\"Done file: {} was deleted: {}\", doneFileName, deleted);\n                if (!deleted) {\n                    log.warn((\"Done file: \" + doneFileName) + \" could not be deleted\");\n                }\n            } catch (java.lang.Exception e) {\n                handleException(\"Error deleting done file: \" + doneFileName, exchange, e);\n            }\n        }\n    }\n    try {\n        log.trace(\"Commit file strategy: {} for file: {}\", processStrategy, file);\n        processStrategy.commit(operations, endpoint, exchange, file);\n    } catch (java.lang.Exception e) {\n        handleException(\"Error during commit\", exchange, e);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "try {\n    log.trace(\"Commit file strategy: {} for file: {}\", processStrategy, file);\n    processStrategy.commit(operations, endpoint, exchange, file);\n} catch (java.lang.Exception e) {\n    handleException(\"Error during commit\", exchange, e);\n}",
            "dst_parent": "{\n    if (endpoint.isIdempotent()) {\n        java.lang.String key = absoluteFileName;\n        if (endpoint.getIdempotentKey() != null) {\n            org.apache.camel.Exchange dummy = endpoint.createExchange(file);\n            key = endpoint.getIdempotentKey().evaluate(dummy, java.lang.String.class);\n        }\n        if (key != null) {\n            endpoint.getIdempotentRepository().add(key);\n        }\n    }\n    handleDoneFile(exchange);\n    try {\n        log.trace(\"Commit file strategy: {} for file: {}\", processStrategy, file);\n        processStrategy.commit(operations, endpoint, exchange, file);\n    } catch (java.lang.Exception e) {\n        handleException(\"Error during commit\", exchange, e);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Try",
            "operator": "MOV",
            "src": "try {\n    log.trace(\"Commit file strategy: {} for file: {}\", processStrategy, file);\n    processStrategy.commit(operations, endpoint, exchange, file);\n} catch (java.lang.Exception e) {\n    handleException(\"Error during commit\", exchange, e);\n}",
            "src_parent": "{\n    if (endpoint.isIdempotent()) {\n        java.lang.String key = absoluteFileName;\n        if (endpoint.getIdempotentKey() != null) {\n            org.apache.camel.Exchange dummy = endpoint.createExchange(file);\n            key = endpoint.getIdempotentKey().evaluate(dummy, java.lang.String.class);\n        }\n        if (key != null) {\n            endpoint.getIdempotentRepository().add(key);\n        }\n    }\n    boolean complete = exchange.getProperty(Exchange.BATCH_COMPLETE, false, java.lang.Boolean.class);\n    if ((endpoint.getDoneFileName() != null) && (!endpoint.isNoop())) {\n        java.lang.String doneFileName = endpoint.createDoneFileName(absoluteFileName);\n        org.apache.camel.util.ObjectHelper.notEmpty(doneFileName, \"doneFileName\", endpoint);\n        if ((endpoint.getDoneFileName().indexOf(\"{file:name\") > 0) || complete) {\n            try {\n                boolean deleted = operations.deleteFile(doneFileName);\n                log.trace(\"Done file: {} was deleted: {}\", doneFileName, deleted);\n                if (!deleted) {\n                    log.warn((\"Done file: \" + doneFileName) + \" could not be deleted\");\n                }\n            } catch (java.lang.Exception e) {\n                handleException(\"Error deleting done file: \" + doneFileName, exchange, e);\n            }\n        }\n    }\n    try {\n        log.trace(\"Commit file strategy: {} for file: {}\", processStrategy, file);\n        processStrategy.commit(operations, endpoint, exchange, file);\n    } catch (java.lang.Exception e) {\n        handleException(\"Error during commit\", exchange, e);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Try"
          }
        }
      ],
      "file_name": "GenericFileOnCompletion"
    }
  ],
  "id": "camel_6b2ffb30"
}