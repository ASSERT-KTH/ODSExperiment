{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (!isSequence(lower, initial, upper)) {\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "src_parent": "{\n    double delta = x1 - x0;\n    double oldDelta = delta;\n    int i = 0;\n    while (i < maximalIterationCount) {\n        throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\", lower, initial, upper);\n    } \n    if (!isSequence(lower, initial, upper)) {\n        if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n            x0 = x1;\n            x1 = x2;\n            x2 = x0;\n            y0 = y1;\n            y1 = y2;\n            y2 = y0;\n        }\n        if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n            setResult(x1, i);\n            return result;\n        }\n        double dx = x2 - x1;\n        double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n        if (java.lang.Math.abs(dx) <= tolerance) {\n            setResult(x1, i);\n            return result;\n        }\n        if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            double r3 = y1 / y0;\n            double p;\n            double p1;\n            if (x0 == x2) {\n                p = dx * r3;\n                p1 = 1.0 - r3;\n            } else {\n                double r1 = y0 / y2;\n                double r2 = y1 / y2;\n                p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n                p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n            }\n            if (p > 0.0) {\n                p1 = -p1;\n            } else {\n                p = -p;\n            }\n            if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n                delta = 0.5 * dx;\n                oldDelta = delta;\n            } else {\n                oldDelta = delta;\n                delta = p / p1;\n            }\n        }\n        x0 = x1;\n        y0 = y1;\n        if (java.lang.Math.abs(delta) > tolerance) {\n            x1 = x1 + delta;\n        } else if (dx > 0.0) {\n            x1 = x1 + (0.5 * tolerance);\n        } else if (dx <= 0.0) {\n            x1 = x1 - (0.5 * tolerance);\n        }\n        y1 = f.value(x1);\n        if ((y1 > 0) == (y2 > 0)) {\n            x2 = x0;\n            y2 = y0;\n            delta = x1 - x0;\n            oldDelta = delta;\n        }\n        i++;\n    }\n    throw new org.apache.commons.math.MaxIterationsExceededException(maximalIterationCount);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Throw",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\", lower, initial, upper)",
            "src_parent": "{\n    throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\", lower, initial, upper);\n}",
            "src_parent_type": "Block",
            "src_type": "Throw"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Throw",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n    x0 = x1;\n    x1 = x2;\n    x2 = x0;\n    y0 = y1;\n    y1 = y2;\n    y2 = y0;\n}",
            "dst_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n    x0 = x1;\n    x1 = x2;\n    x2 = x0;\n    y0 = y1;\n    y1 = y2;\n    y2 = y0;\n}",
            "src_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Throw",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n    setResult(x1, i);\n    return result;\n}",
            "dst_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n    setResult(x1, i);\n    return result;\n}",
            "src_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Throw",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "double dx = x2 - x1",
            "dst_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "double dx = x2 - x1",
            "src_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Throw",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy)",
            "dst_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy)",
            "src_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Throw",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (java.lang.Math.abs(dx) <= tolerance) {\n    setResult(x1, i);\n    return result;\n}",
            "dst_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (java.lang.Math.abs(dx) <= tolerance) {\n    setResult(x1, i);\n    return result;\n}",
            "src_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Throw",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n    delta = 0.5 * dx;\n    oldDelta = delta;\n} else {\n    double r3 = y1 / y0;\n    double p;\n    double p1;\n    if (x0 == x2) {\n        p = dx * r3;\n        p1 = 1.0 - r3;\n    } else {\n        double r1 = y0 / y2;\n        double r2 = y1 / y2;\n        p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n        p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n    }\n    if (p > 0.0) {\n        p1 = -p1;\n    } else {\n        p = -p;\n    }\n    if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        oldDelta = delta;\n        delta = p / p1;\n    }\n}",
            "dst_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n    delta = 0.5 * dx;\n    oldDelta = delta;\n} else {\n    double r3 = y1 / y0;\n    double p;\n    double p1;\n    if (x0 == x2) {\n        p = dx * r3;\n        p1 = 1.0 - r3;\n    } else {\n        double r1 = y0 / y2;\n        double r2 = y1 / y2;\n        p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n        p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n    }\n    if (p > 0.0) {\n        p1 = -p1;\n    } else {\n        p = -p;\n    }\n    if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        oldDelta = delta;\n        delta = p / p1;\n    }\n}",
            "src_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Throw",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "x0 = x1",
            "dst_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "x0 = x1",
            "src_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Throw",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "y0 = y1",
            "dst_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "y0 = y1",
            "src_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Throw",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (java.lang.Math.abs(delta) > tolerance) {\n    x1 = x1 + delta;\n} else if (dx > 0.0) {\n    x1 = x1 + (0.5 * tolerance);\n} else if (dx <= 0.0) {\n    x1 = x1 - (0.5 * tolerance);\n}",
            "dst_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (java.lang.Math.abs(delta) > tolerance) {\n    x1 = x1 + delta;\n} else if (dx > 0.0) {\n    x1 = x1 + (0.5 * tolerance);\n} else if (dx <= 0.0) {\n    x1 = x1 - (0.5 * tolerance);\n}",
            "src_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Throw",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "y1 = f.value(x1)",
            "dst_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "y1 = f.value(x1)",
            "src_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Throw",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if ((y1 > 0) == (y2 > 0)) {\n    x2 = x0;\n    y2 = y0;\n    delta = x1 - x0;\n    oldDelta = delta;\n}",
            "dst_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if ((y1 > 0) == (y2 > 0)) {\n    x2 = x0;\n    y2 = y0;\n    delta = x1 - x0;\n    oldDelta = delta;\n}",
            "src_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Throw",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "i++",
            "dst_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "dst_parent_type": "Block",
            "dst_type": "UnaryOperator",
            "operator": "MOV",
            "src": "i++",
            "src_parent": "{\n    if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {\n        x0 = x1;\n        x1 = x2;\n        x2 = x0;\n        y0 = y1;\n        y1 = y2;\n        y2 = y0;\n    }\n    if (java.lang.Math.abs(y1) <= functionValueAccuracy) {\n        setResult(x1, i);\n        return result;\n    }\n    double dx = x2 - x1;\n    double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);\n    if (java.lang.Math.abs(dx) <= tolerance) {\n        setResult(x1, i);\n        return result;\n    }\n    if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {\n        delta = 0.5 * dx;\n        oldDelta = delta;\n    } else {\n        double r3 = y1 / y0;\n        double p;\n        double p1;\n        if (x0 == x2) {\n            p = dx * r3;\n            p1 = 1.0 - r3;\n        } else {\n            double r1 = y0 / y2;\n            double r2 = y1 / y2;\n            p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));\n            p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);\n        }\n        if (p > 0.0) {\n            p1 = -p1;\n        } else {\n            p = -p;\n        }\n        if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {\n            delta = 0.5 * dx;\n            oldDelta = delta;\n        } else {\n            oldDelta = delta;\n            delta = p / p1;\n        }\n    }\n    x0 = x1;\n    y0 = y1;\n    if (java.lang.Math.abs(delta) > tolerance) {\n        x1 = x1 + delta;\n    } else if (dx > 0.0) {\n        x1 = x1 + (0.5 * tolerance);\n    } else if (dx <= 0.0) {\n        x1 = x1 - (0.5 * tolerance);\n    }\n    y1 = f.value(x1);\n    if ((y1 > 0) == (y2 > 0)) {\n        x2 = x0;\n        y2 = y0;\n        delta = x1 - x0;\n        oldDelta = delta;\n    }\n    i++;\n}",
            "src_parent_type": "Block",
            "src_type": "UnaryOperator"
          }
        }
      ],
      "file_name": "BrentSolver"
    }
  ],
  "id": "Arja_patch_Bugs.jar_Commons-Math_f6dd42b4_0_78"
}