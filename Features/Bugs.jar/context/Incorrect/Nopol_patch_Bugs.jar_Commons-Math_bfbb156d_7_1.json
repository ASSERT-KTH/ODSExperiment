{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (!((hasInfiniteBounds && (this.statisticsDHistory != null)) || (uB.length < this.lambda))) {\n    if (hasInfiniteBounds) {\n        throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();\n    } else {\n        boundaries = new double[2][];\n        boundaries[0] = lB;\n        boundaries[1] = uB;\n        for (int i = 0; i < lB.length; i++) {\n            if (java.lang.Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {\n                final double max = java.lang.Double.MAX_VALUE + boundaries[0][i];\n                final org.apache.commons.math3.exception.NumberIsTooLargeException e = new org.apache.commons.math3.exception.NumberIsTooLargeException(boundaries[1][i], max, true);\n                e.getContext().addMessage(LocalizedFormats.OVERFLOW);\n                e.getContext().addMessage(LocalizedFormats.INDEX, i);\n                throw e;\n            }\n        }\n    }\n}",
            "src_parent": "{\n    for (int i = 0; i < lB.length; i++) {\n        if (java.lang.Double.isInfinite(lB[i]) || java.lang.Double.isInfinite(uB[i])) {\n            hasInfiniteBounds = true;\n            break;\n        }\n    }\n    if (!((hasInfiniteBounds && (this.statisticsDHistory != null)) || (uB.length < this.lambda))) {\n        if (hasInfiniteBounds) {\n            throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();\n        } else {\n            boundaries = new double[2][];\n            boundaries[0] = lB;\n            boundaries[1] = uB;\n            for (int i = 0; i < lB.length; i++) {\n                if (java.lang.Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {\n                    final double max = java.lang.Double.MAX_VALUE + boundaries[0][i];\n                    final org.apache.commons.math3.exception.NumberIsTooLargeException e = new org.apache.commons.math3.exception.NumberIsTooLargeException(boundaries[1][i], max, true);\n                    e.getContext().addMessage(LocalizedFormats.OVERFLOW);\n                    e.getContext().addMessage(LocalizedFormats.INDEX, i);\n                    throw e;\n                }\n            }\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (hasInfiniteBounds) {\n    throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();\n} else {\n    boundaries = new double[2][];\n    boundaries[0] = lB;\n    boundaries[1] = uB;\n    for (int i = 0; i < lB.length; i++) {\n        if (java.lang.Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {\n            final double max = java.lang.Double.MAX_VALUE + boundaries[0][i];\n            final org.apache.commons.math3.exception.NumberIsTooLargeException e = new org.apache.commons.math3.exception.NumberIsTooLargeException(boundaries[1][i], max, true);\n            e.getContext().addMessage(LocalizedFormats.OVERFLOW);\n            e.getContext().addMessage(LocalizedFormats.INDEX, i);\n            throw e;\n        }\n    }\n}",
            "dst_parent": "{\n    if (hasInfiniteBounds) {\n        throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();\n    } else {\n        boundaries = new double[2][];\n        boundaries[0] = lB;\n        boundaries[1] = uB;\n        for (int i = 0; i < lB.length; i++) {\n            if (java.lang.Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {\n                final double max = java.lang.Double.MAX_VALUE + boundaries[0][i];\n                final org.apache.commons.math3.exception.NumberIsTooLargeException e = new org.apache.commons.math3.exception.NumberIsTooLargeException(boundaries[1][i], max, true);\n                e.getContext().addMessage(LocalizedFormats.OVERFLOW);\n                e.getContext().addMessage(LocalizedFormats.INDEX, i);\n                throw e;\n            }\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (hasInfiniteBounds) {\n    throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();\n} else {\n    boundaries = new double[2][];\n    boundaries[0] = lB;\n    boundaries[1] = uB;\n    for (int i = 0; i < lB.length; i++) {\n        if (java.lang.Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {\n            final double max = java.lang.Double.MAX_VALUE + boundaries[0][i];\n            final org.apache.commons.math3.exception.NumberIsTooLargeException e = new org.apache.commons.math3.exception.NumberIsTooLargeException(boundaries[1][i], max, true);\n            e.getContext().addMessage(LocalizedFormats.OVERFLOW);\n            e.getContext().addMessage(LocalizedFormats.INDEX, i);\n            throw e;\n        }\n    }\n}",
            "src_parent": "{\n    for (int i = 0; i < lB.length; i++) {\n        if (java.lang.Double.isInfinite(lB[i]) || java.lang.Double.isInfinite(uB[i])) {\n            hasInfiniteBounds = true;\n            break;\n        }\n    }\n    if (hasInfiniteBounds) {\n        throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();\n    } else {\n        boundaries = new double[2][];\n        boundaries[0] = lB;\n        boundaries[1] = uB;\n        for (int i = 0; i < lB.length; i++) {\n            if (java.lang.Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {\n                final double max = java.lang.Double.MAX_VALUE + boundaries[0][i];\n                final org.apache.commons.math3.exception.NumberIsTooLargeException e = new org.apache.commons.math3.exception.NumberIsTooLargeException(boundaries[1][i], max, true);\n                e.getContext().addMessage(LocalizedFormats.OVERFLOW);\n                e.getContext().addMessage(LocalizedFormats.INDEX, i);\n                throw e;\n            }\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "CMAESOptimizer"
    }
  ],
  "id": "Nopol_patch_Bugs.jar_Commons-Math_bfbb156d_7_1"
}