{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "iterationCounter",
            "dst_parent": "iterationCounter.incrementCount()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "evaluationCounter",
            "src_parent": "evaluationCounter.incrementCount()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "iterationCounter.incrementCount()",
            "dst_parent": "{\n    final int nR = problem.getObservationSize();\n    final int nC = problem.getParameterSize();\n    final double[] currentPoint = problem.getStart().toArray();\n    final org.apache.commons.math3.util.Incrementor iterationCounter = problem.getIterationCounter();\n    final org.apache.commons.math3.util.Incrementor evaluationCounter = problem.getEvaluationCounter();\n    final org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.Evaluation> checker = problem.getConvergenceChecker();\n    final int solvedCols = org.apache.commons.math3.util.FastMath.min(nR, nC);\n    double[] lmDir = new double[nC];\n    double lmPar = 0;\n    double delta = 0;\n    iterationCounter.incrementCount();\n    double xNorm = 0;\n    double[] diag = new double[nC];\n    double[] oldX = new double[nC];\n    double[] oldRes = new double[nR];\n    double[] qtf = new double[nR];\n    double[] work1 = new double[nC];\n    double[] work2 = new double[nC];\n    double[] work3 = new double[nC];\n    org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.Evaluation current = problem.evaluate(new org.apache.commons.math3.linear.ArrayRealVector(currentPoint));\n    double[] currentResiduals = current.getResiduals().toArray();\n    double currentCost = current.getCost();\n    boolean firstIteration = true;\n    while (true) {\n        iterationCounter.incrementCount();\n        final org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.Evaluation previous = current;\n        final org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer.InternalData internalData = qrDecomposition(current.getJacobian(), solvedCols);\n        final double[][] weightedJacobian = internalData.weightedJacobian;\n        final int[] permutation = internalData.permutation;\n        final double[] diagR = internalData.diagR;\n        final double[] jacNorm = internalData.jacNorm;\n        double[] weightedResidual = currentResiduals;\n        for (int i = 0; i < nR; i++) {\n            qtf[i] = weightedResidual[i];\n        }\n        qTy(qtf, internalData);\n        for (int k = 0; k < solvedCols; ++k) {\n            int pk = permutation[k];\n            weightedJacobian[k][pk] = diagR[pk];\n        }\n        if (firstIteration) {\n            xNorm = 0;\n            for (int k = 0; k < nC; ++k) {\n                double dk = jacNorm[k];\n                if (dk == 0) {\n                    dk = 1.0;\n                }\n                double xk = dk * currentPoint[k];\n                xNorm += xk * xk;\n                diag[k] = dk;\n            }\n            xNorm = org.apache.commons.math3.util.FastMath.sqrt(xNorm);\n            delta = (xNorm == 0) ? initialStepBoundFactor : initialStepBoundFactor * xNorm;\n        }\n        double maxCosine = 0;\n        if (currentCost != 0) {\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                double s = jacNorm[pj];\n                if (s != 0) {\n                    double sum = 0;\n                    for (int i = 0; i <= j; ++i) {\n                        sum += weightedJacobian[i][pj] * qtf[i];\n                    }\n                    maxCosine = org.apache.commons.math3.util.FastMath.max(maxCosine, org.apache.commons.math3.util.FastMath.abs(sum) / (s * currentCost));\n                }\n            }\n        }\n        if (maxCosine <= orthoTolerance) {\n            return new org.apache.commons.math3.fitting.leastsquares.OptimumImpl(current, evaluationCounter.getCount(), iterationCounter.getCount());\n        }\n        for (int j = 0; j < nC; ++j) {\n            diag[j] = org.apache.commons.math3.util.FastMath.max(diag[j], jacNorm[j]);\n        }\n        for (double ratio = 0; ratio < 1.0E-4;) {\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                oldX[pj] = currentPoint[pj];\n            }\n            final double previousCost = currentCost;\n            double[] tmpVec = weightedResidual;\n            weightedResidual = oldRes;\n            oldRes = tmpVec;\n            lmPar = determineLMParameter(qtf, delta, diag, internalData, solvedCols, work1, work2, work3, lmDir, lmPar);\n            double lmNorm = 0;\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                lmDir[pj] = -lmDir[pj];\n                currentPoint[pj] = oldX[pj] + lmDir[pj];\n                double s = diag[pj] * lmDir[pj];\n                lmNorm += s * s;\n            }\n            lmNorm = org.apache.commons.math3.util.FastMath.sqrt(lmNorm);\n            if (firstIteration) {\n                delta = org.apache.commons.math3.util.FastMath.min(delta, lmNorm);\n            }\n            evaluationCounter.incrementCount();\n            current = problem.evaluate(new org.apache.commons.math3.linear.ArrayRealVector(currentPoint));\n            currentResiduals = current.getResiduals().toArray();\n            currentCost = current.getCost();\n            double actRed = -1.0;\n            if ((0.1 * currentCost) < previousCost) {\n                double r = currentCost / previousCost;\n                actRed = 1.0 - (r * r);\n            }\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                double dirJ = lmDir[pj];\n                work1[j] = 0;\n                for (int i = 0; i <= j; ++i) {\n                    work1[i] += weightedJacobian[i][pj] * dirJ;\n                }\n            }\n            double coeff1 = 0;\n            for (int j = 0; j < solvedCols; ++j) {\n                coeff1 += work1[j] * work1[j];\n            }\n            double pc2 = previousCost * previousCost;\n            coeff1 /= pc2;\n            double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2;\n            double preRed = coeff1 + (2 * coeff2);\n            double dirDer = -(coeff1 + coeff2);\n            ratio = (preRed == 0) ? 0 : actRed / preRed;\n            if (ratio <= 0.25) {\n                double tmp = (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5;\n                if (((0.1 * currentCost) >= previousCost) || (tmp < 0.1)) {\n                    tmp = 0.1;\n                }\n                delta = tmp * org.apache.commons.math3.util.FastMath.min(delta, 10.0 * lmNorm);\n                lmPar /= tmp;\n            } else if ((lmPar == 0) || (ratio >= 0.75)) {\n                delta = 2 * lmNorm;\n                lmPar *= 0.5;\n            }\n            if (ratio >= 1.0E-4) {\n                firstIteration = false;\n                xNorm = 0;\n                for (int k = 0; k < nC; ++k) {\n                    double xK = diag[k] * currentPoint[k];\n                    xNorm += xK * xK;\n                }\n                xNorm = org.apache.commons.math3.util.FastMath.sqrt(xNorm);\n                if ((checker != null) && checker.converged(iterationCounter.getCount(), previous, current)) {\n                    return new org.apache.commons.math3.fitting.leastsquares.OptimumImpl(current, iterationCounter.getCount(), evaluationCounter.getCount());\n                }\n            } else {\n                currentCost = previousCost;\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    currentPoint[pj] = oldX[pj];\n                }\n                tmpVec = weightedResidual;\n                weightedResidual = oldRes;\n                oldRes = tmpVec;\n                current = previous;\n            }\n            if ((((org.apache.commons.math3.util.FastMath.abs(actRed) <= costRelativeTolerance) && (preRed <= costRelativeTolerance)) && (ratio <= 2.0)) || (delta <= (parRelativeTolerance * xNorm))) {\n                return new org.apache.commons.math3.fitting.leastsquares.OptimumImpl(current, iterationCounter.getCount(), evaluationCounter.getCount());\n            }\n            if (((org.apache.commons.math3.util.FastMath.abs(actRed) <= org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer.TWO_EPS) && (preRed <= org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer.TWO_EPS)) && (ratio <= 2.0)) {\n                throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE, costRelativeTolerance);\n            } else if (delta <= (org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer.TWO_EPS * xNorm)) {\n                throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, parRelativeTolerance);\n            } else if (maxCosine <= org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer.TWO_EPS) {\n                throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance);\n            }\n        }\n    } \n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "evaluationCounter.incrementCount()",
            "src_parent": "{\n    final int nR = problem.getObservationSize();\n    final int nC = problem.getParameterSize();\n    final double[] currentPoint = problem.getStart().toArray();\n    final org.apache.commons.math3.util.Incrementor iterationCounter = problem.getIterationCounter();\n    final org.apache.commons.math3.util.Incrementor evaluationCounter = problem.getEvaluationCounter();\n    final org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.Evaluation> checker = problem.getConvergenceChecker();\n    final int solvedCols = org.apache.commons.math3.util.FastMath.min(nR, nC);\n    double[] lmDir = new double[nC];\n    double lmPar = 0;\n    double delta = 0;\n    double xNorm = 0;\n    double[] diag = new double[nC];\n    double[] oldX = new double[nC];\n    double[] oldRes = new double[nR];\n    double[] qtf = new double[nR];\n    double[] work1 = new double[nC];\n    double[] work2 = new double[nC];\n    double[] work3 = new double[nC];\n    evaluationCounter.incrementCount();\n    org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.Evaluation current = problem.evaluate(new org.apache.commons.math3.linear.ArrayRealVector(currentPoint));\n    double[] currentResiduals = current.getResiduals().toArray();\n    double currentCost = current.getCost();\n    boolean firstIteration = true;\n    while (true) {\n        iterationCounter.incrementCount();\n        final org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.Evaluation previous = current;\n        final org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer.InternalData internalData = qrDecomposition(current.getJacobian(), solvedCols);\n        final double[][] weightedJacobian = internalData.weightedJacobian;\n        final int[] permutation = internalData.permutation;\n        final double[] diagR = internalData.diagR;\n        final double[] jacNorm = internalData.jacNorm;\n        double[] weightedResidual = currentResiduals;\n        for (int i = 0; i < nR; i++) {\n            qtf[i] = weightedResidual[i];\n        }\n        qTy(qtf, internalData);\n        for (int k = 0; k < solvedCols; ++k) {\n            int pk = permutation[k];\n            weightedJacobian[k][pk] = diagR[pk];\n        }\n        if (firstIteration) {\n            xNorm = 0;\n            for (int k = 0; k < nC; ++k) {\n                double dk = jacNorm[k];\n                if (dk == 0) {\n                    dk = 1.0;\n                }\n                double xk = dk * currentPoint[k];\n                xNorm += xk * xk;\n                diag[k] = dk;\n            }\n            xNorm = org.apache.commons.math3.util.FastMath.sqrt(xNorm);\n            delta = (xNorm == 0) ? initialStepBoundFactor : initialStepBoundFactor * xNorm;\n        }\n        double maxCosine = 0;\n        if (currentCost != 0) {\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                double s = jacNorm[pj];\n                if (s != 0) {\n                    double sum = 0;\n                    for (int i = 0; i <= j; ++i) {\n                        sum += weightedJacobian[i][pj] * qtf[i];\n                    }\n                    maxCosine = org.apache.commons.math3.util.FastMath.max(maxCosine, org.apache.commons.math3.util.FastMath.abs(sum) / (s * currentCost));\n                }\n            }\n        }\n        if (maxCosine <= orthoTolerance) {\n            return new org.apache.commons.math3.fitting.leastsquares.OptimumImpl(current, evaluationCounter.getCount(), iterationCounter.getCount());\n        }\n        for (int j = 0; j < nC; ++j) {\n            diag[j] = org.apache.commons.math3.util.FastMath.max(diag[j], jacNorm[j]);\n        }\n        for (double ratio = 0; ratio < 1.0E-4;) {\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                oldX[pj] = currentPoint[pj];\n            }\n            final double previousCost = currentCost;\n            double[] tmpVec = weightedResidual;\n            weightedResidual = oldRes;\n            oldRes = tmpVec;\n            lmPar = determineLMParameter(qtf, delta, diag, internalData, solvedCols, work1, work2, work3, lmDir, lmPar);\n            double lmNorm = 0;\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                lmDir[pj] = -lmDir[pj];\n                currentPoint[pj] = oldX[pj] + lmDir[pj];\n                double s = diag[pj] * lmDir[pj];\n                lmNorm += s * s;\n            }\n            lmNorm = org.apache.commons.math3.util.FastMath.sqrt(lmNorm);\n            if (firstIteration) {\n                delta = org.apache.commons.math3.util.FastMath.min(delta, lmNorm);\n            }\n            evaluationCounter.incrementCount();\n            current = problem.evaluate(new org.apache.commons.math3.linear.ArrayRealVector(currentPoint));\n            currentResiduals = current.getResiduals().toArray();\n            currentCost = current.getCost();\n            double actRed = -1.0;\n            if ((0.1 * currentCost) < previousCost) {\n                double r = currentCost / previousCost;\n                actRed = 1.0 - (r * r);\n            }\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                double dirJ = lmDir[pj];\n                work1[j] = 0;\n                for (int i = 0; i <= j; ++i) {\n                    work1[i] += weightedJacobian[i][pj] * dirJ;\n                }\n            }\n            double coeff1 = 0;\n            for (int j = 0; j < solvedCols; ++j) {\n                coeff1 += work1[j] * work1[j];\n            }\n            double pc2 = previousCost * previousCost;\n            coeff1 /= pc2;\n            double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2;\n            double preRed = coeff1 + (2 * coeff2);\n            double dirDer = -(coeff1 + coeff2);\n            ratio = (preRed == 0) ? 0 : actRed / preRed;\n            if (ratio <= 0.25) {\n                double tmp = (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5;\n                if (((0.1 * currentCost) >= previousCost) || (tmp < 0.1)) {\n                    tmp = 0.1;\n                }\n                delta = tmp * org.apache.commons.math3.util.FastMath.min(delta, 10.0 * lmNorm);\n                lmPar /= tmp;\n            } else if ((lmPar == 0) || (ratio >= 0.75)) {\n                delta = 2 * lmNorm;\n                lmPar *= 0.5;\n            }\n            if (ratio >= 1.0E-4) {\n                firstIteration = false;\n                xNorm = 0;\n                for (int k = 0; k < nC; ++k) {\n                    double xK = diag[k] * currentPoint[k];\n                    xNorm += xK * xK;\n                }\n                xNorm = org.apache.commons.math3.util.FastMath.sqrt(xNorm);\n                if ((checker != null) && checker.converged(iterationCounter.getCount(), previous, current)) {\n                    return new org.apache.commons.math3.fitting.leastsquares.OptimumImpl(current, iterationCounter.getCount(), evaluationCounter.getCount());\n                }\n            } else {\n                currentCost = previousCost;\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    currentPoint[pj] = oldX[pj];\n                }\n                tmpVec = weightedResidual;\n                weightedResidual = oldRes;\n                oldRes = tmpVec;\n                current = previous;\n            }\n            if ((((org.apache.commons.math3.util.FastMath.abs(actRed) <= costRelativeTolerance) && (preRed <= costRelativeTolerance)) && (ratio <= 2.0)) || (delta <= (parRelativeTolerance * xNorm))) {\n                return new org.apache.commons.math3.fitting.leastsquares.OptimumImpl(current, iterationCounter.getCount(), evaluationCounter.getCount());\n            }\n            if (((org.apache.commons.math3.util.FastMath.abs(actRed) <= org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer.TWO_EPS) && (preRed <= org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer.TWO_EPS)) && (ratio <= 2.0)) {\n                throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE, costRelativeTolerance);\n            } else if (delta <= (org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer.TWO_EPS * xNorm)) {\n                throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, parRelativeTolerance);\n            } else if (maxCosine <= org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer.TWO_EPS) {\n                throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance);\n            }\n        }\n    } \n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "LevenbergMarquardtOptimizer"
    }
  ],
  "id": "Arja_patch_Bugs.jar_Commons-Math_e2dc384d_0_24"
}