{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "((scopeElement != null) && (!(scopeElement instanceof spoon.reflect.declaration.CtPackage))) && scopeElement.isParentInitialized()",
            "src_parent": "while (((scopeElement != null) && (!(scopeElement instanceof spoon.reflect.declaration.CtPackage))) && scopeElement.isParentInitialized()) {\n    spoon.reflect.declaration.CtElement parent = scopeElement.getParent();\n    if (parent instanceof spoon.reflect.declaration.CtType<?>) {\n        if (includingFields) {\n            java.util.Collection<spoon.reflect.reference.CtFieldReference<?>> allFields = ((spoon.reflect.declaration.CtType<?>) (parent)).getAllFields();\n            for (spoon.reflect.reference.CtFieldReference<?> fieldReference : allFields) {\n                outputConsumer.accept(fieldReference.getFieldDeclaration());\n            }\n        }\n    } else if ((parent instanceof spoon.reflect.code.CtBodyHolder) || (parent instanceof spoon.reflect.code.CtStatementList)) {\n        siblingsQuery.setInput(scopeElement).forEach(outputConsumer);\n        if (parent instanceof spoon.reflect.code.CtCatch) {\n            spoon.reflect.code.CtCatch ctCatch = ((spoon.reflect.code.CtCatch) (parent));\n            outputConsumer.accept(ctCatch.getParameter());\n        } else if (parent instanceof spoon.reflect.declaration.CtExecutable) {\n            spoon.reflect.declaration.CtExecutable<?> exec = ((spoon.reflect.declaration.CtExecutable<?>) (parent));\n            for (spoon.reflect.declaration.CtParameter<?> param : exec.getParameters()) {\n                outputConsumer.accept(param);\n            }\n        }\n    }\n    scopeElement = parent;\n} ",
            "src_parent_type": "While",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "((scopeElement != null) && (!(scopeElement instanceof spoon.reflect.declaration.CtPackage)))",
            "dst_parent": "((scopeElement != null) && (!(scopeElement instanceof spoon.reflect.declaration.CtPackage))) && scopeElement.isParentInitialized()",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(scopeElement != null) && (!(scopeElement instanceof spoon.reflect.declaration.CtPackage))",
            "src_parent": "while ((scopeElement != null) && (!(scopeElement instanceof spoon.reflect.declaration.CtPackage))) {\n    spoon.reflect.declaration.CtElement parent = scopeElement.getParent();\n    if (parent instanceof spoon.reflect.declaration.CtType<?>) {\n        if (includingFields) {\n            java.util.Collection<spoon.reflect.reference.CtFieldReference<?>> allFields = ((spoon.reflect.declaration.CtType<?>) (parent)).getAllFields();\n            for (spoon.reflect.reference.CtFieldReference<?> fieldReference : allFields) {\n                outputConsumer.accept(fieldReference.getFieldDeclaration());\n            }\n        }\n    } else if ((parent instanceof spoon.reflect.code.CtBodyHolder) || (parent instanceof spoon.reflect.code.CtStatementList)) {\n        siblingsQuery.setInput(scopeElement).forEach(outputConsumer);\n        if (parent instanceof spoon.reflect.code.CtCatch) {\n            spoon.reflect.code.CtCatch ctCatch = ((spoon.reflect.code.CtCatch) (parent));\n            outputConsumer.accept(ctCatch.getParameter());\n        } else if (parent instanceof spoon.reflect.declaration.CtExecutable) {\n            spoon.reflect.declaration.CtExecutable<?> exec = ((spoon.reflect.declaration.CtExecutable<?>) (parent));\n            for (spoon.reflect.declaration.CtParameter<?> param : exec.getParameters()) {\n                outputConsumer.accept(param);\n            }\n        }\n    }\n    scopeElement = parent;\n} ",
            "src_parent_type": "While",
            "src_type": "BinaryOperator"
          }
        }
      ],
      "file_name": "PotentialVariableDeclarationFunction"
    }
  ],
  "id": "bears_42"
}