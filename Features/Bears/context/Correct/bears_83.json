{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (!f.getType().equals(c.getFactory().Type().STRING)) {\n    throw new spoon.template.TemplateException(\"proxy template parameter must be typed as String \" + f.getType().getQualifiedName());\n}",
            "src_parent": "{\n    java.lang.String proxyName = templateParamAnnotation.value();\n    if (!f.getType().equals(c.getFactory().Type().STRING)) {\n        throw new spoon.template.TemplateException(\"proxy template parameter must be typed as String \" + f.getType().getQualifiedName());\n    }\n    boolean found = false;\n    for (spoon.reflect.declaration.CtTypeMember member : c.getTypeMembers()) {\n        if (member.getSimpleName().equals(proxyName)) {\n            found = true;\n        }\n    }\n    if (!found) {\n        throw new spoon.template.TemplateException((\"if a proxy parameter is declared and named \\\"\" + proxyName) + \"\\\", then a type member named \\\"\\\" + proxyName + \\\"\\\" must exist.\");\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    java.lang.String proxyName = templateParamAnnotation.value();\n    java.lang.String fieldTypeQName = f.getType().getQualifiedName();\n    if (fieldTypeQName.equals(java.lang.String.class.getName())) {\n        boolean found = false;\n        for (spoon.reflect.declaration.CtTypeMember member : c.getTypeMembers()) {\n            if (member.getSimpleName().equals(proxyName)) {\n                found = true;\n            }\n        }\n        if (!found) {\n            throw new spoon.template.TemplateException((\"if a proxy parameter is declared and named \\\"\" + proxyName) + \"\\\", then a type member named \\\"\\\" + proxyName + \\\"\\\" must exist.\");\n        }\n    } else if (fieldTypeQName.equals(spoon.reflect.reference.CtTypeReference.class.getName())) {\n    } else {\n        throw new spoon.template.TemplateException(\"proxy template parameter must be typed as String or CtTypeReference, but it is \" + fieldTypeQName);\n    }\n}",
            "src_parent": "if ((templateParamAnnotation != null) && (!templateParamAnnotation.value().equals(\"\"))) {\n    java.lang.String proxyName = templateParamAnnotation.value();\n    java.lang.String fieldTypeQName = f.getType().getQualifiedName();\n    if (fieldTypeQName.equals(java.lang.String.class.getName())) {\n        boolean found = false;\n        for (spoon.reflect.declaration.CtTypeMember member : c.getTypeMembers()) {\n            if (member.getSimpleName().equals(proxyName)) {\n                found = true;\n            }\n        }\n        if (!found) {\n            throw new spoon.template.TemplateException((\"if a proxy parameter is declared and named \\\"\" + proxyName) + \"\\\", then a type member named \\\"\\\" + proxyName + \\\"\\\" must exist.\");\n        }\n    } else if (fieldTypeQName.equals(spoon.reflect.reference.CtTypeReference.class.getName())) {\n    } else {\n        throw new spoon.template.TemplateException(\"proxy template parameter must be typed as String or CtTypeReference, but it is \" + fieldTypeQName);\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String proxyName = templateParamAnnotation.value()",
            "dst_parent": "{\n    java.lang.String proxyName = templateParamAnnotation.value();\n    java.lang.String fieldTypeQName = f.getType().getQualifiedName();\n    if (fieldTypeQName.equals(java.lang.String.class.getName())) {\n        boolean found = false;\n        for (spoon.reflect.declaration.CtTypeMember member : c.getTypeMembers()) {\n            if (member.getSimpleName().equals(proxyName)) {\n                found = true;\n            }\n        }\n        if (!found) {\n            throw new spoon.template.TemplateException((\"if a proxy parameter is declared and named \\\"\" + proxyName) + \"\\\", then a type member named \\\"\\\" + proxyName + \\\"\\\" must exist.\");\n        }\n    } else if (fieldTypeQName.equals(spoon.reflect.reference.CtTypeReference.class.getName())) {\n    } else {\n        throw new spoon.template.TemplateException(\"proxy template parameter must be typed as String or CtTypeReference, but it is \" + fieldTypeQName);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.lang.String proxyName = templateParamAnnotation.value()",
            "src_parent": "{\n    java.lang.String proxyName = templateParamAnnotation.value();\n    if (!f.getType().equals(c.getFactory().Type().STRING)) {\n        throw new spoon.template.TemplateException(\"proxy template parameter must be typed as String \" + f.getType().getQualifiedName());\n    }\n    boolean found = false;\n    for (spoon.reflect.declaration.CtTypeMember member : c.getTypeMembers()) {\n        if (member.getSimpleName().equals(proxyName)) {\n            found = true;\n        }\n    }\n    if (!found) {\n        throw new spoon.template.TemplateException((\"if a proxy parameter is declared and named \\\"\" + proxyName) + \"\\\", then a type member named \\\"\\\" + proxyName + \\\"\\\" must exist.\");\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Throw",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "f.getType().getQualifiedName()",
            "dst_parent": "java.lang.String fieldTypeQName = f.getType().getQualifiedName()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "f.getType().getQualifiedName()",
            "src_parent": "\"proxy template parameter must be typed as String \" + f.getType().getQualifiedName()",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    boolean found = false;\n    for (spoon.reflect.declaration.CtTypeMember member : c.getTypeMembers()) {\n        if (member.getSimpleName().equals(proxyName)) {\n            found = true;\n        }\n    }\n    if (!found) {\n        throw new spoon.template.TemplateException((\"if a proxy parameter is declared and named \\\"\" + proxyName) + \"\\\", then a type member named \\\"\\\" + proxyName + \\\"\\\" must exist.\");\n    }\n}",
            "dst_parent": "if (fieldTypeQName.equals(java.lang.String.class.getName())) {\n    boolean found = false;\n    for (spoon.reflect.declaration.CtTypeMember member : c.getTypeMembers()) {\n        if (member.getSimpleName().equals(proxyName)) {\n            found = true;\n        }\n    }\n    if (!found) {\n        throw new spoon.template.TemplateException((\"if a proxy parameter is declared and named \\\"\" + proxyName) + \"\\\", then a type member named \\\"\\\" + proxyName + \\\"\\\" must exist.\");\n    }\n} else if (fieldTypeQName.equals(spoon.reflect.reference.CtTypeReference.class.getName())) {\n} else {\n    throw new spoon.template.TemplateException(\"proxy template parameter must be typed as String or CtTypeReference, but it is \" + fieldTypeQName);\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    java.lang.String proxyName = templateParamAnnotation.value();\n    if (!f.getType().equals(c.getFactory().Type().STRING)) {\n        throw new spoon.template.TemplateException(\"proxy template parameter must be typed as String \" + f.getType().getQualifiedName());\n    }\n    boolean found = false;\n    for (spoon.reflect.declaration.CtTypeMember member : c.getTypeMembers()) {\n        if (member.getSimpleName().equals(proxyName)) {\n            found = true;\n        }\n    }\n    if (!found) {\n        throw new spoon.template.TemplateException((\"if a proxy parameter is declared and named \\\"\" + proxyName) + \"\\\", then a type member named \\\"\\\" + proxyName + \\\"\\\" must exist.\");\n    }\n}",
            "src_parent": "if ((templateParamAnnotation != null) && (!templateParamAnnotation.value().equals(\"\"))) {\n    java.lang.String proxyName = templateParamAnnotation.value();\n    if (!f.getType().equals(c.getFactory().Type().STRING)) {\n        throw new spoon.template.TemplateException(\"proxy template parameter must be typed as String \" + f.getType().getQualifiedName());\n    }\n    boolean found = false;\n    for (spoon.reflect.declaration.CtTypeMember member : c.getTypeMembers()) {\n        if (member.getSimpleName().equals(proxyName)) {\n            found = true;\n        }\n    }\n    if (!found) {\n        throw new spoon.template.TemplateException((\"if a proxy parameter is declared and named \\\"\" + proxyName) + \"\\\", then a type member named \\\"\\\" + proxyName + \\\"\\\" must exist.\");\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        }
      ],
      "file_name": "Substitution"
    }
  ],
  "id": "bears_83"
}