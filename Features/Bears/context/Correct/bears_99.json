{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "status",
            "src_parent": "org.traccar.helper.BitUtil.check(status, 0)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "status",
            "src_parent": "org.traccar.helper.BitUtil.check(status, 1)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "status",
            "src_parent": "org.traccar.helper.BitUtil.check(status, 2)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "status",
            "src_parent": "org.traccar.helper.BitUtil.check(status, 0)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "position",
            "src_parent": "position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "status",
            "src_parent": "org.traccar.helper.BitUtil.check(status, 1)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "position",
            "src_parent": "position.set(Position.KEY_ALARM, Position.ALARM_SOS)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "status",
            "src_parent": "org.traccar.helper.BitUtil.check(status, 2)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "position",
            "src_parent": "position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "status",
            "src_parent": "org.traccar.helper.BitUtil.check(status, 10)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private void processStatus(org.traccar.model.Position position, long status) {\n    if (((!org.traccar.helper.BitUtil.check(status, 0)) || (!org.traccar.helper.BitUtil.check(status, 1))) || (!org.traccar.helper.BitUtil.check(status, 2))) {\n        if (!org.traccar.helper.BitUtil.check(status, 0)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n        } else if (!org.traccar.helper.BitUtil.check(status, 1)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_SOS);\n        } else if (!org.traccar.helper.BitUtil.check(status, 2)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n        }\n    }\n    position.set(Position.KEY_IGNITION, !org.traccar.helper.BitUtil.check(status, 10));\n    position.set(Position.KEY_STATUS, status);\n}",
            "src_parent": "public class H02ProtocolDecoder extends org.traccar.BaseProtocolDecoder {\n    public H02ProtocolDecoder(org.traccar.protocol.H02Protocol protocol) {\n        super(protocol);\n    }\n\n    private static double readCoordinate(org.jboss.netty.buffer.ChannelBuffer buf, boolean lon) {\n        int degrees = org.traccar.helper.BcdUtil.readInteger(buf, 2);\n        if (lon) {\n            degrees = (degrees * 10) + (buf.getUnsignedByte(buf.readerIndex()) >> 4);\n        }\n        double result = 0;\n        if (lon) {\n            result = buf.readUnsignedByte() & 0xf;\n        }\n        int length = 6;\n        if (lon) {\n            length = 5;\n        }\n        result = (result * 10) + (org.traccar.helper.BcdUtil.readInteger(buf, length) * 1.0E-4);\n        result /= 60;\n        result += degrees;\n        return result;\n    }\n\n    private void processStatus(org.traccar.model.Position position, long status) {\n        if (((!org.traccar.helper.BitUtil.check(status, 0)) || (!org.traccar.helper.BitUtil.check(status, 1))) || (!org.traccar.helper.BitUtil.check(status, 2))) {\n            if (!org.traccar.helper.BitUtil.check(status, 0)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n            } else if (!org.traccar.helper.BitUtil.check(status, 1)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_SOS);\n            } else if (!org.traccar.helper.BitUtil.check(status, 2)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n            }\n        }\n        position.set(Position.KEY_IGNITION, !org.traccar.helper.BitUtil.check(status, 10));\n        position.set(Position.KEY_STATUS, status);\n    }\n\n    private java.lang.String decodeBattery(int value) {\n        switch (value) {\n            case 6 :\n                return \"100%\";\n            case 5 :\n                return \"80%\";\n            case 4 :\n                return \"60%\";\n            case 3 :\n                return \"20%\";\n            case 2 :\n                return \"10%\";\n            default :\n                return null;\n        }\n    }\n\n    private org.traccar.model.Position decodeBinary(org.jboss.netty.buffer.ChannelBuffer buf, org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress) {\n        org.traccar.model.Position position = new org.traccar.model.Position();\n        position.setProtocol(getProtocolName());\n        buf.readByte();\n        org.traccar.DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, org.jboss.netty.buffer.ChannelBuffers.hexDump(buf.readBytes(5)));\n        if (deviceSession == null) {\n            return null;\n        }\n        position.setDeviceId(deviceSession.getDeviceId());\n        org.traccar.helper.DateBuilder dateBuilder = new org.traccar.helper.DateBuilder().setHour(org.traccar.helper.BcdUtil.readInteger(buf, 2)).setMinute(org.traccar.helper.BcdUtil.readInteger(buf, 2)).setSecond(org.traccar.helper.BcdUtil.readInteger(buf, 2)).setDay(org.traccar.helper.BcdUtil.readInteger(buf, 2)).setMonth(org.traccar.helper.BcdUtil.readInteger(buf, 2)).setYear(org.traccar.helper.BcdUtil.readInteger(buf, 2));\n        position.setTime(dateBuilder.getDate());\n        double latitude = org.traccar.protocol.H02ProtocolDecoder.readCoordinate(buf, false);\n        position.set(Position.KEY_BATTERY, decodeBattery(buf.readUnsignedByte()));\n        double longitude = org.traccar.protocol.H02ProtocolDecoder.readCoordinate(buf, true);\n        int flags = buf.readUnsignedByte() & 0xf;\n        position.setValid((flags & 0x2) != 0);\n        if ((flags & 0x4) == 0) {\n            latitude = -latitude;\n        }\n        if ((flags & 0x8) == 0) {\n            longitude = -longitude;\n        }\n        position.setLatitude(latitude);\n        position.setLongitude(longitude);\n        position.setSpeed(org.traccar.helper.BcdUtil.readInteger(buf, 3));\n        position.setCourse(((buf.readUnsignedByte() & 0xf) * 100.0) + org.traccar.helper.BcdUtil.readInteger(buf, 2));\n        processStatus(position, buf.readUnsignedInt());\n        return position;\n    }\n\n    private static final java.util.regex.Pattern PATTERN = new org.traccar.helper.PatternBuilder().text(\"*\").expression(\"..,\").number(\"(d+),\").expression(\"[^,]+,\").any().number(\"(?:(dd)(dd)(dd))?,\").expression(\"([AV])?,\").groupBegin().number(\"-(d+)-(d+.d+),\").or().number(\"(d+)(dd.d+),\").groupEnd().expression(\"([NS]),\").groupBegin().number(\"-(d+)-(d+.d+),\").or().number(\"(d+)(dd.d+),\").groupEnd().expression(\"([EW]),\").number(\"(d+.?d*),\").number(\"(d+.?d*)?,\").number(\"(?:(dd)(dd)(dd))?,\").any().number(\"(x{8})\").groupBegin().number(\", *(x+),\").number(\" *(x+),\").number(\" *(x+),\").number(\" *(x+)\").groupEnd(\"?\").any().compile();\n\n    private static final java.util.regex.Pattern PATTERN_NBR = new org.traccar.helper.PatternBuilder().text(\"*\").expression(\"..,\").number(\"(d+),\").text(\"NBR,\").number(\"(dd)(dd)(dd),\").number(\"(d+),\").number(\"(d+),\").number(\"d+,\").number(\"d+,\").number(\"((?:d+,d+,d+,)+)\").number(\"(dd)(dd)(dd),\").number(\"(x{8})\").any().compile();\n\n    private org.traccar.model.Position decodeText(java.lang.String sentence, org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress) {\n        org.traccar.helper.Parser parser = new org.traccar.helper.Parser(org.traccar.protocol.H02ProtocolDecoder.PATTERN, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n        org.traccar.DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());\n        if (deviceSession == null) {\n            return null;\n        }\n        org.traccar.model.Position position = new org.traccar.model.Position();\n        position.setProtocol(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        org.traccar.helper.DateBuilder dateBuilder = new org.traccar.helper.DateBuilder();\n        if (parser.hasNext(3)) {\n            dateBuilder.setTime(parser.nextInt(), parser.nextInt(), parser.nextInt());\n        }\n        if (parser.hasNext()) {\n            position.setValid(parser.next().equals(\"A\"));\n        }\n        if (parser.hasNext(2)) {\n            position.setLatitude(-parser.nextCoordinate());\n        }\n        if (parser.hasNext(2)) {\n            position.setLatitude(parser.nextCoordinate());\n        }\n        if (parser.hasNext(2)) {\n            position.setLongitude(-parser.nextCoordinate());\n        }\n        if (parser.hasNext(2)) {\n            position.setLongitude(parser.nextCoordinate());\n        }\n        position.setSpeed(parser.nextDouble());\n        position.setCourse(parser.nextDouble());\n        if (parser.hasNext(3)) {\n            dateBuilder.setDateReverse(parser.nextInt(), parser.nextInt(), parser.nextInt());\n            position.setTime(dateBuilder.getDate());\n        } else {\n            position.setTime(new java.util.Date());\n        }\n        processStatus(position, parser.nextLong(16));\n        if (parser.hasNext(4)) {\n            int mcc = parser.nextInt(16);\n            int mnc = parser.nextInt(16);\n            int lac = parser.nextInt(16);\n            int cid = parser.nextInt(16);\n            if ((((mcc != 0) && (mnc != 0)) && (lac != 0)) && (cid != 0)) {\n                position.setNetwork(new org.traccar.model.Network(org.traccar.model.CellTower.from(mcc, mnc, lac, cid)));\n            }\n        }\n        return position;\n    }\n\n    private org.traccar.model.Position decodeLbs(java.lang.String sentence, org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress) {\n        org.traccar.helper.Parser parser = new org.traccar.helper.Parser(org.traccar.protocol.H02ProtocolDecoder.PATTERN_NBR, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n        org.traccar.DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());\n        if (deviceSession == null) {\n            return null;\n        }\n        org.traccar.model.Position position = new org.traccar.model.Position();\n        position.setProtocol(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        org.traccar.helper.DateBuilder dateBuilder = new org.traccar.helper.DateBuilder().setTime(parser.nextInt(), parser.nextInt(), parser.nextInt());\n        org.traccar.model.Network network = new org.traccar.model.Network();\n        int mcc = parser.nextInt();\n        int mnc = parser.nextInt();\n        java.lang.String[] cells = parser.next().split(\",\");\n        for (int i = 0; i < (cells.length / 3); i++) {\n            network.addCellTower(org.traccar.model.CellTower.from(mcc, mnc, java.lang.Integer.parseInt(cells[i * 3]), java.lang.Integer.parseInt(cells[(i * 3) + 1]), java.lang.Integer.parseInt(cells[(i * 3) + 2])));\n        }\n        position.setNetwork(network);\n        dateBuilder.setDateReverse(parser.nextInt(), parser.nextInt(), parser.nextInt());\n        getLastLocation(position, dateBuilder.getDate());\n        processStatus(position, parser.nextLong(16));\n        return position;\n    }\n\n    @java.lang.Override\n    protected java.lang.Object decode(org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress, java.lang.Object msg) throws java.lang.Exception {\n        org.jboss.netty.buffer.ChannelBuffer buf = ((org.jboss.netty.buffer.ChannelBuffer) (msg));\n        java.lang.String marker = buf.toString(0, 1, java.nio.charset.StandardCharsets.US_ASCII);\n        if (marker.equals(\"*\")) {\n            java.lang.String sentence = buf.toString(java.nio.charset.StandardCharsets.US_ASCII);\n            if (sentence.contains(\",NBR,\")) {\n                return decodeLbs(sentence, channel, remoteAddress);\n            } else {\n                return decodeText(sentence, channel, remoteAddress);\n            }\n        } else if (marker.equals(\"$\")) {\n            return decodeBinary(buf, channel, remoteAddress);\n        }\n        return null;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private void processStatus(org.traccar.model.Position position, long status) {\n}",
            "src_parent": "public class H02ProtocolDecoder extends org.traccar.BaseProtocolDecoder {\n    public H02ProtocolDecoder(org.traccar.protocol.H02Protocol protocol) {\n        super(protocol);\n    }\n\n    private static double readCoordinate(org.jboss.netty.buffer.ChannelBuffer buf, boolean lon) {\n        int degrees = org.traccar.helper.BcdUtil.readInteger(buf, 2);\n        if (lon) {\n            degrees = (degrees * 10) + (buf.getUnsignedByte(buf.readerIndex()) >> 4);\n        }\n        double result = 0;\n        if (lon) {\n            result = buf.readUnsignedByte() & 0xf;\n        }\n        int length = 6;\n        if (lon) {\n            length = 5;\n        }\n        result = (result * 10) + (org.traccar.helper.BcdUtil.readInteger(buf, length) * 1.0E-4);\n        result /= 60;\n        result += degrees;\n        return result;\n    }\n\n    private void processStatus(org.traccar.model.Position position, long status) {\n    }\n\n    {\n        if (buf.readableBytes() >= MESSAGE_SHORT) {\n            return buf.readBytes(org.traccar.protocol.MESSAGE_SHORT);\n        }\n        if (((!org.traccar.helper.BitUtil.check(status, 0)) || (!org.traccar.helper.BitUtil.check(status, 1))) || (!org.traccar.helper.BitUtil.check(status, 2))) {\n            if (!org.traccar.helper.BitUtil.check(status, 0)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n            } else if (!org.traccar.helper.BitUtil.check(status, 1)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_SOS);\n            } else if (!org.traccar.helper.BitUtil.check(status, 2)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n            }\n        }\n        position.set(Position.KEY_IGNITION, !org.traccar.helper.BitUtil.check(status, 10));\n        position.set(Position.KEY_STATUS, status);\n    }\n\n    private java.lang.String decodeBattery(int value) {\n        switch (value) {\n            case 6 :\n                return \"100%\";\n            case 5 :\n                return \"80%\";\n            case 4 :\n                return \"60%\";\n            case 3 :\n                return \"20%\";\n            case 2 :\n                return \"10%\";\n            default :\n                return null;\n        }\n    }\n\n    private org.traccar.model.Position decodeBinary(org.jboss.netty.buffer.ChannelBuffer buf, org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress) {\n        org.traccar.model.Position position = new org.traccar.model.Position();\n        position.setProtocol(getProtocolName());\n        buf.readByte();\n        org.traccar.DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, org.jboss.netty.buffer.ChannelBuffers.hexDump(buf.readBytes(5)));\n        if (deviceSession == null) {\n            return null;\n        }\n        position.setDeviceId(deviceSession.getDeviceId());\n        org.traccar.helper.DateBuilder dateBuilder = new org.traccar.helper.DateBuilder().setHour(org.traccar.helper.BcdUtil.readInteger(buf, 2)).setMinute(org.traccar.helper.BcdUtil.readInteger(buf, 2)).setSecond(org.traccar.helper.BcdUtil.readInteger(buf, 2)).setDay(org.traccar.helper.BcdUtil.readInteger(buf, 2)).setMonth(org.traccar.helper.BcdUtil.readInteger(buf, 2)).setYear(org.traccar.helper.BcdUtil.readInteger(buf, 2));\n        position.setTime(dateBuilder.getDate());\n        double latitude = org.traccar.protocol.H02ProtocolDecoder.readCoordinate(buf, false);\n        position.set(Position.KEY_BATTERY, decodeBattery(buf.readUnsignedByte()));\n        double longitude = org.traccar.protocol.H02ProtocolDecoder.readCoordinate(buf, true);\n        int flags = buf.readUnsignedByte() & 0xf;\n        position.setValid((flags & 0x2) != 0);\n        if ((flags & 0x4) == 0) {\n            latitude = -latitude;\n        }\n        if ((flags & 0x8) == 0) {\n            longitude = -longitude;\n        }\n        position.setLatitude(latitude);\n        position.setLongitude(longitude);\n        position.setSpeed(org.traccar.helper.BcdUtil.readInteger(buf, 3));\n        position.setCourse(((buf.readUnsignedByte() & 0xf) * 100.0) + org.traccar.helper.BcdUtil.readInteger(buf, 2));\n        processStatus(position, buf.readUnsignedInt());\n        return position;\n    }\n\n    private static final java.util.regex.Pattern PATTERN = new org.traccar.helper.PatternBuilder().text(\"*\").expression(\"..,\").number(\"(d+),\").expression(\"[^,]+,\").any().number(\"(?:(dd)(dd)(dd))?,\").expression(\"([AV])?,\").groupBegin().number(\"-(d+)-(d+.d+),\").or().number(\"(d+)(dd.d+),\").groupEnd().expression(\"([NS]),\").groupBegin().number(\"-(d+)-(d+.d+),\").or().number(\"(d+)(dd.d+),\").groupEnd().expression(\"([EW]),\").number(\"(d+.?d*),\").number(\"(d+.?d*)?,\").number(\"(?:(dd)(dd)(dd))?,\").any().number(\"(x{8})\").groupBegin().number(\", *(x+),\").number(\" *(x+),\").number(\" *(x+),\").number(\" *(x+)\").groupEnd(\"?\").any().compile();\n\n    private static final java.util.regex.Pattern PATTERN_NBR = new org.traccar.helper.PatternBuilder().text(\"*\").expression(\"..,\").number(\"(d+),\").text(\"NBR,\").number(\"(dd)(dd)(dd),\").number(\"(d+),\").number(\"(d+),\").number(\"d+,\").number(\"d+,\").number(\"((?:d+,d+,d+,)+)\").number(\"(dd)(dd)(dd),\").number(\"(x{8})\").any().compile();\n\n    private org.traccar.model.Position decodeText(java.lang.String sentence, org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress) {\n        org.traccar.helper.Parser parser = new org.traccar.helper.Parser(org.traccar.protocol.H02ProtocolDecoder.PATTERN, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n        org.traccar.DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());\n        if (deviceSession == null) {\n            return null;\n        }\n        org.traccar.model.Position position = new org.traccar.model.Position();\n        position.setProtocol(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        org.traccar.helper.DateBuilder dateBuilder = new org.traccar.helper.DateBuilder();\n        if (parser.hasNext(3)) {\n            dateBuilder.setTime(parser.nextInt(), parser.nextInt(), parser.nextInt());\n        }\n        if (parser.hasNext()) {\n            position.setValid(parser.next().equals(\"A\"));\n        }\n        if (parser.hasNext(2)) {\n            position.setLatitude(-parser.nextCoordinate());\n        }\n        if (parser.hasNext(2)) {\n            position.setLatitude(parser.nextCoordinate());\n        }\n        if (parser.hasNext(2)) {\n            position.setLongitude(-parser.nextCoordinate());\n        }\n        if (parser.hasNext(2)) {\n            position.setLongitude(parser.nextCoordinate());\n        }\n        position.setSpeed(parser.nextDouble());\n        position.setCourse(parser.nextDouble());\n        if (parser.hasNext(3)) {\n            dateBuilder.setDateReverse(parser.nextInt(), parser.nextInt(), parser.nextInt());\n            position.setTime(dateBuilder.getDate());\n        } else {\n            position.setTime(new java.util.Date());\n        }\n        processStatus(position, parser.nextLong(16));\n        if (parser.hasNext(4)) {\n            int mcc = parser.nextInt(16);\n            int mnc = parser.nextInt(16);\n            int lac = parser.nextInt(16);\n            int cid = parser.nextInt(16);\n            if ((((mcc != 0) && (mnc != 0)) && (lac != 0)) && (cid != 0)) {\n                position.setNetwork(new org.traccar.model.Network(org.traccar.model.CellTower.from(mcc, mnc, lac, cid)));\n            }\n        }\n        return position;\n    }\n\n    private org.traccar.model.Position decodeLbs(java.lang.String sentence, org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress) {\n        org.traccar.helper.Parser parser = new org.traccar.helper.Parser(org.traccar.protocol.H02ProtocolDecoder.PATTERN_NBR, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n        org.traccar.DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());\n        if (deviceSession == null) {\n            return null;\n        }\n        org.traccar.model.Position position = new org.traccar.model.Position();\n        position.setProtocol(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        org.traccar.helper.DateBuilder dateBuilder = new org.traccar.helper.DateBuilder().setTime(parser.nextInt(), parser.nextInt(), parser.nextInt());\n        org.traccar.model.Network network = new org.traccar.model.Network();\n        int mcc = parser.nextInt();\n        int mnc = parser.nextInt();\n        java.lang.String[] cells = parser.next().split(\",\");\n        for (int i = 0; i < (cells.length / 3); i++) {\n            network.addCellTower(org.traccar.model.CellTower.from(mcc, mnc, java.lang.Integer.parseInt(cells[i * 3]), java.lang.Integer.parseInt(cells[(i * 3) + 1]), java.lang.Integer.parseInt(cells[(i * 3) + 2])));\n        }\n        position.setNetwork(network);\n        dateBuilder.setDateReverse(parser.nextInt(), parser.nextInt(), parser.nextInt());\n        getLastLocation(position, dateBuilder.getDate());\n        processStatus(position, parser.nextLong(16));\n        return position;\n    }\n\n    @java.lang.Override\n    protected java.lang.Object decode(org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress, java.lang.Object msg) throws java.lang.Exception {\n        org.jboss.netty.buffer.ChannelBuffer buf = ((org.jboss.netty.buffer.ChannelBuffer) (msg));\n        java.lang.String marker = buf.toString(0, 1, java.nio.charset.StandardCharsets.US_ASCII);\n        if (marker.equals(\"*\")) {\n            java.lang.String sentence = buf.toString(java.nio.charset.StandardCharsets.US_ASCII);\n            if (sentence.contains(\",NBR,\")) {\n                return decodeLbs(sentence, channel, remoteAddress);\n            } else {\n                return decodeText(sentence, channel, remoteAddress);\n            }\n        } else if (marker.equals(\"$\")) {\n            return decodeBinary(buf, channel, remoteAddress);\n        }\n        return null;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    if (buf.readableBytes() >= MESSAGE_SHORT) {\n        return buf.readBytes(org.traccar.protocol.MESSAGE_SHORT);\n    }\n    if (((!org.traccar.helper.BitUtil.check(status, 0)) || (!org.traccar.helper.BitUtil.check(status, 1))) || (!org.traccar.helper.BitUtil.check(status, 2))) {\n        if (!org.traccar.helper.BitUtil.check(status, 0)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n        } else if (!org.traccar.helper.BitUtil.check(status, 1)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_SOS);\n        } else if (!org.traccar.helper.BitUtil.check(status, 2)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n        }\n    }\n    position.set(Position.KEY_IGNITION, !org.traccar.helper.BitUtil.check(status, 10));\n    position.set(Position.KEY_STATUS, status);\n}",
            "src_parent": "public class H02ProtocolDecoder extends org.traccar.BaseProtocolDecoder {\n    public H02ProtocolDecoder(org.traccar.protocol.H02Protocol protocol) {\n        super(protocol);\n    }\n\n    private static double readCoordinate(org.jboss.netty.buffer.ChannelBuffer buf, boolean lon) {\n        int degrees = org.traccar.helper.BcdUtil.readInteger(buf, 2);\n        if (lon) {\n            degrees = (degrees * 10) + (buf.getUnsignedByte(buf.readerIndex()) >> 4);\n        }\n        double result = 0;\n        if (lon) {\n            result = buf.readUnsignedByte() & 0xf;\n        }\n        int length = 6;\n        if (lon) {\n            length = 5;\n        }\n        result = (result * 10) + (org.traccar.helper.BcdUtil.readInteger(buf, length) * 1.0E-4);\n        result /= 60;\n        result += degrees;\n        return result;\n    }\n\n    private void processStatus(org.traccar.model.Position position, long status) {\n    }\n\n    {\n        if (buf.readableBytes() >= MESSAGE_SHORT) {\n            return buf.readBytes(org.traccar.protocol.MESSAGE_SHORT);\n        }\n        if (((!org.traccar.helper.BitUtil.check(status, 0)) || (!org.traccar.helper.BitUtil.check(status, 1))) || (!org.traccar.helper.BitUtil.check(status, 2))) {\n            if (!org.traccar.helper.BitUtil.check(status, 0)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n            } else if (!org.traccar.helper.BitUtil.check(status, 1)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_SOS);\n            } else if (!org.traccar.helper.BitUtil.check(status, 2)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n            }\n        }\n        position.set(Position.KEY_IGNITION, !org.traccar.helper.BitUtil.check(status, 10));\n        position.set(Position.KEY_STATUS, status);\n    }\n\n    private java.lang.String decodeBattery(int value) {\n        switch (value) {\n            case 6 :\n                return \"100%\";\n            case 5 :\n                return \"80%\";\n            case 4 :\n                return \"60%\";\n            case 3 :\n                return \"20%\";\n            case 2 :\n                return \"10%\";\n            default :\n                return null;\n        }\n    }\n\n    private org.traccar.model.Position decodeBinary(org.jboss.netty.buffer.ChannelBuffer buf, org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress) {\n        org.traccar.model.Position position = new org.traccar.model.Position();\n        position.setProtocol(getProtocolName());\n        buf.readByte();\n        org.traccar.DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, org.jboss.netty.buffer.ChannelBuffers.hexDump(buf.readBytes(5)));\n        if (deviceSession == null) {\n            return null;\n        }\n        position.setDeviceId(deviceSession.getDeviceId());\n        org.traccar.helper.DateBuilder dateBuilder = new org.traccar.helper.DateBuilder().setHour(org.traccar.helper.BcdUtil.readInteger(buf, 2)).setMinute(org.traccar.helper.BcdUtil.readInteger(buf, 2)).setSecond(org.traccar.helper.BcdUtil.readInteger(buf, 2)).setDay(org.traccar.helper.BcdUtil.readInteger(buf, 2)).setMonth(org.traccar.helper.BcdUtil.readInteger(buf, 2)).setYear(org.traccar.helper.BcdUtil.readInteger(buf, 2));\n        position.setTime(dateBuilder.getDate());\n        double latitude = org.traccar.protocol.H02ProtocolDecoder.readCoordinate(buf, false);\n        position.set(Position.KEY_BATTERY, decodeBattery(buf.readUnsignedByte()));\n        double longitude = org.traccar.protocol.H02ProtocolDecoder.readCoordinate(buf, true);\n        int flags = buf.readUnsignedByte() & 0xf;\n        position.setValid((flags & 0x2) != 0);\n        if ((flags & 0x4) == 0) {\n            latitude = -latitude;\n        }\n        if ((flags & 0x8) == 0) {\n            longitude = -longitude;\n        }\n        position.setLatitude(latitude);\n        position.setLongitude(longitude);\n        position.setSpeed(org.traccar.helper.BcdUtil.readInteger(buf, 3));\n        position.setCourse(((buf.readUnsignedByte() & 0xf) * 100.0) + org.traccar.helper.BcdUtil.readInteger(buf, 2));\n        processStatus(position, buf.readUnsignedInt());\n        return position;\n    }\n\n    private static final java.util.regex.Pattern PATTERN = new org.traccar.helper.PatternBuilder().text(\"*\").expression(\"..,\").number(\"(d+),\").expression(\"[^,]+,\").any().number(\"(?:(dd)(dd)(dd))?,\").expression(\"([AV])?,\").groupBegin().number(\"-(d+)-(d+.d+),\").or().number(\"(d+)(dd.d+),\").groupEnd().expression(\"([NS]),\").groupBegin().number(\"-(d+)-(d+.d+),\").or().number(\"(d+)(dd.d+),\").groupEnd().expression(\"([EW]),\").number(\"(d+.?d*),\").number(\"(d+.?d*)?,\").number(\"(?:(dd)(dd)(dd))?,\").any().number(\"(x{8})\").groupBegin().number(\", *(x+),\").number(\" *(x+),\").number(\" *(x+),\").number(\" *(x+)\").groupEnd(\"?\").any().compile();\n\n    private static final java.util.regex.Pattern PATTERN_NBR = new org.traccar.helper.PatternBuilder().text(\"*\").expression(\"..,\").number(\"(d+),\").text(\"NBR,\").number(\"(dd)(dd)(dd),\").number(\"(d+),\").number(\"(d+),\").number(\"d+,\").number(\"d+,\").number(\"((?:d+,d+,d+,)+)\").number(\"(dd)(dd)(dd),\").number(\"(x{8})\").any().compile();\n\n    private org.traccar.model.Position decodeText(java.lang.String sentence, org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress) {\n        org.traccar.helper.Parser parser = new org.traccar.helper.Parser(org.traccar.protocol.H02ProtocolDecoder.PATTERN, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n        org.traccar.DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());\n        if (deviceSession == null) {\n            return null;\n        }\n        org.traccar.model.Position position = new org.traccar.model.Position();\n        position.setProtocol(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        org.traccar.helper.DateBuilder dateBuilder = new org.traccar.helper.DateBuilder();\n        if (parser.hasNext(3)) {\n            dateBuilder.setTime(parser.nextInt(), parser.nextInt(), parser.nextInt());\n        }\n        if (parser.hasNext()) {\n            position.setValid(parser.next().equals(\"A\"));\n        }\n        if (parser.hasNext(2)) {\n            position.setLatitude(-parser.nextCoordinate());\n        }\n        if (parser.hasNext(2)) {\n            position.setLatitude(parser.nextCoordinate());\n        }\n        if (parser.hasNext(2)) {\n            position.setLongitude(-parser.nextCoordinate());\n        }\n        if (parser.hasNext(2)) {\n            position.setLongitude(parser.nextCoordinate());\n        }\n        position.setSpeed(parser.nextDouble());\n        position.setCourse(parser.nextDouble());\n        if (parser.hasNext(3)) {\n            dateBuilder.setDateReverse(parser.nextInt(), parser.nextInt(), parser.nextInt());\n            position.setTime(dateBuilder.getDate());\n        } else {\n            position.setTime(new java.util.Date());\n        }\n        processStatus(position, parser.nextLong(16));\n        if (parser.hasNext(4)) {\n            int mcc = parser.nextInt(16);\n            int mnc = parser.nextInt(16);\n            int lac = parser.nextInt(16);\n            int cid = parser.nextInt(16);\n            if ((((mcc != 0) && (mnc != 0)) && (lac != 0)) && (cid != 0)) {\n                position.setNetwork(new org.traccar.model.Network(org.traccar.model.CellTower.from(mcc, mnc, lac, cid)));\n            }\n        }\n        return position;\n    }\n\n    private org.traccar.model.Position decodeLbs(java.lang.String sentence, org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress) {\n        org.traccar.helper.Parser parser = new org.traccar.helper.Parser(org.traccar.protocol.H02ProtocolDecoder.PATTERN_NBR, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n        org.traccar.DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());\n        if (deviceSession == null) {\n            return null;\n        }\n        org.traccar.model.Position position = new org.traccar.model.Position();\n        position.setProtocol(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        org.traccar.helper.DateBuilder dateBuilder = new org.traccar.helper.DateBuilder().setTime(parser.nextInt(), parser.nextInt(), parser.nextInt());\n        org.traccar.model.Network network = new org.traccar.model.Network();\n        int mcc = parser.nextInt();\n        int mnc = parser.nextInt();\n        java.lang.String[] cells = parser.next().split(\",\");\n        for (int i = 0; i < (cells.length / 3); i++) {\n            network.addCellTower(org.traccar.model.CellTower.from(mcc, mnc, java.lang.Integer.parseInt(cells[i * 3]), java.lang.Integer.parseInt(cells[(i * 3) + 1]), java.lang.Integer.parseInt(cells[(i * 3) + 2])));\n        }\n        position.setNetwork(network);\n        dateBuilder.setDateReverse(parser.nextInt(), parser.nextInt(), parser.nextInt());\n        getLastLocation(position, dateBuilder.getDate());\n        processStatus(position, parser.nextLong(16));\n        return position;\n    }\n\n    @java.lang.Override\n    protected java.lang.Object decode(org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress, java.lang.Object msg) throws java.lang.Exception {\n        org.jboss.netty.buffer.ChannelBuffer buf = ((org.jboss.netty.buffer.ChannelBuffer) (msg));\n        java.lang.String marker = buf.toString(0, 1, java.nio.charset.StandardCharsets.US_ASCII);\n        if (marker.equals(\"*\")) {\n            java.lang.String sentence = buf.toString(java.nio.charset.StandardCharsets.US_ASCII);\n            if (sentence.contains(\",NBR,\")) {\n                return decodeLbs(sentence, channel, remoteAddress);\n            } else {\n                return decodeText(sentence, channel, remoteAddress);\n            }\n        } else if (marker.equals(\"$\")) {\n            return decodeBinary(buf, channel, remoteAddress);\n        }\n        return null;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "AnonymousExecutable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "status",
            "src_parent": "org.traccar.helper.BitUtil.check(status, 10)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "status",
            "src_parent": "org.traccar.helper.BitUtil.check(status, 2)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "status",
            "src_parent": "org.traccar.helper.BitUtil.check(status, 0)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "status",
            "src_parent": "org.traccar.helper.BitUtil.check(status, 1)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "status",
            "src_parent": "org.traccar.helper.BitUtil.check(status, 0)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "position",
            "src_parent": "position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "status",
            "src_parent": "org.traccar.helper.BitUtil.check(status, 1)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "position",
            "src_parent": "position.set(Position.KEY_ALARM, Position.ALARM_SOS)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "status",
            "src_parent": "org.traccar.helper.BitUtil.check(status, 2)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "position",
            "src_parent": "position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "void",
            "dst_parent": "private void processStatus(org.traccar.model.Position position, long status) {\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "void",
            "src_parent": "private void processStatus(org.traccar.model.Position position, long status) {\n    if (((!org.traccar.helper.BitUtil.check(status, 0)) || (!org.traccar.helper.BitUtil.check(status, 1))) || (!org.traccar.helper.BitUtil.check(status, 2))) {\n        if (!org.traccar.helper.BitUtil.check(status, 0)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n        } else if (!org.traccar.helper.BitUtil.check(status, 1)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_SOS);\n        } else if (!org.traccar.helper.BitUtil.check(status, 2)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n        }\n    }\n    position.set(Position.KEY_IGNITION, !org.traccar.helper.BitUtil.check(status, 10));\n    position.set(Position.KEY_STATUS, status);\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Method",
            "dst_parent": "private void processStatus(org.traccar.model.Position position, long status) {\n}",
            "dst_parent_type": "Method",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Method",
            "src_parent": "private void processStatus(org.traccar.model.Position position, long status) {\n    if (((!org.traccar.helper.BitUtil.check(status, 0)) || (!org.traccar.helper.BitUtil.check(status, 1))) || (!org.traccar.helper.BitUtil.check(status, 2))) {\n        if (!org.traccar.helper.BitUtil.check(status, 0)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n        } else if (!org.traccar.helper.BitUtil.check(status, 1)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_SOS);\n        } else if (!org.traccar.helper.BitUtil.check(status, 2)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n        }\n    }\n    position.set(Position.KEY_IGNITION, !org.traccar.helper.BitUtil.check(status, 10));\n    position.set(Position.KEY_STATUS, status);\n}",
            "src_parent_type": "Method",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.traccar.model.Position position",
            "dst_parent": "private void processStatus(org.traccar.model.Position position, long status) {\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "org.traccar.model.Position position",
            "src_parent": "private void processStatus(org.traccar.model.Position position, long status) {\n    if (((!org.traccar.helper.BitUtil.check(status, 0)) || (!org.traccar.helper.BitUtil.check(status, 1))) || (!org.traccar.helper.BitUtil.check(status, 2))) {\n        if (!org.traccar.helper.BitUtil.check(status, 0)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n        } else if (!org.traccar.helper.BitUtil.check(status, 1)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_SOS);\n        } else if (!org.traccar.helper.BitUtil.check(status, 2)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n        }\n    }\n    position.set(Position.KEY_IGNITION, !org.traccar.helper.BitUtil.check(status, 10));\n    position.set(Position.KEY_STATUS, status);\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "long status",
            "dst_parent": "private void processStatus(org.traccar.model.Position position, long status) {\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "long status",
            "src_parent": "private void processStatus(org.traccar.model.Position position, long status) {\n    if (((!org.traccar.helper.BitUtil.check(status, 0)) || (!org.traccar.helper.BitUtil.check(status, 1))) || (!org.traccar.helper.BitUtil.check(status, 2))) {\n        if (!org.traccar.helper.BitUtil.check(status, 0)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n        } else if (!org.traccar.helper.BitUtil.check(status, 1)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_SOS);\n        } else if (!org.traccar.helper.BitUtil.check(status, 2)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n        }\n    }\n    position.set(Position.KEY_IGNITION, !org.traccar.helper.BitUtil.check(status, 10));\n    position.set(Position.KEY_STATUS, status);\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "((!org.traccar.helper.BitUtil.check(status, 0)) || (!org.traccar.helper.BitUtil.check(status, 1))) || (!org.traccar.helper.BitUtil.check(status, 2))",
            "dst_parent": "if (((!org.traccar.helper.BitUtil.check(status, 0)) || (!org.traccar.helper.BitUtil.check(status, 1))) || (!org.traccar.helper.BitUtil.check(status, 2))) {\n    if (!org.traccar.helper.BitUtil.check(status, 0)) {\n        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n    } else if (!org.traccar.helper.BitUtil.check(status, 1)) {\n        position.set(Position.KEY_ALARM, Position.ALARM_SOS);\n    } else if (!org.traccar.helper.BitUtil.check(status, 2)) {\n        position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "((!org.traccar.helper.BitUtil.check(status, 0)) || (!org.traccar.helper.BitUtil.check(status, 1))) || (!org.traccar.helper.BitUtil.check(status, 2))",
            "src_parent": "if (((!org.traccar.helper.BitUtil.check(status, 0)) || (!org.traccar.helper.BitUtil.check(status, 1))) || (!org.traccar.helper.BitUtil.check(status, 2))) {\n    if (!org.traccar.helper.BitUtil.check(status, 0)) {\n        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n    } else if (!org.traccar.helper.BitUtil.check(status, 1)) {\n        position.set(Position.KEY_ALARM, Position.ALARM_SOS);\n    } else if (!org.traccar.helper.BitUtil.check(status, 2)) {\n        position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    if (!org.traccar.helper.BitUtil.check(status, 0)) {\n        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n    } else if (!org.traccar.helper.BitUtil.check(status, 1)) {\n        position.set(Position.KEY_ALARM, Position.ALARM_SOS);\n    } else if (!org.traccar.helper.BitUtil.check(status, 2)) {\n        position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n    }\n}",
            "dst_parent": "if (((!org.traccar.helper.BitUtil.check(status, 0)) || (!org.traccar.helper.BitUtil.check(status, 1))) || (!org.traccar.helper.BitUtil.check(status, 2))) {\n    if (!org.traccar.helper.BitUtil.check(status, 0)) {\n        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n    } else if (!org.traccar.helper.BitUtil.check(status, 1)) {\n        position.set(Position.KEY_ALARM, Position.ALARM_SOS);\n    } else if (!org.traccar.helper.BitUtil.check(status, 2)) {\n        position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    if (!org.traccar.helper.BitUtil.check(status, 0)) {\n        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n    } else if (!org.traccar.helper.BitUtil.check(status, 1)) {\n        position.set(Position.KEY_ALARM, Position.ALARM_SOS);\n    } else if (!org.traccar.helper.BitUtil.check(status, 2)) {\n        position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n    }\n}",
            "src_parent": "if (((!org.traccar.helper.BitUtil.check(status, 0)) || (!org.traccar.helper.BitUtil.check(status, 1))) || (!org.traccar.helper.BitUtil.check(status, 2))) {\n    if (!org.traccar.helper.BitUtil.check(status, 0)) {\n        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n    } else if (!org.traccar.helper.BitUtil.check(status, 1)) {\n        position.set(Position.KEY_ALARM, Position.ALARM_SOS);\n    } else if (!org.traccar.helper.BitUtil.check(status, 2)) {\n        position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "Position.KEY_IGNITION",
            "dst_parent": "position.set(Position.KEY_IGNITION, !org.traccar.helper.BitUtil.check(status, 10))",
            "dst_parent_type": "Invocation",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "Position.KEY_IGNITION",
            "src_parent": "position.set(Position.KEY_IGNITION, !org.traccar.helper.BitUtil.check(status, 10))",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "!org.traccar.helper.BitUtil.check(status, 10)",
            "dst_parent": "position.set(Position.KEY_IGNITION, !org.traccar.helper.BitUtil.check(status, 10))",
            "dst_parent_type": "Invocation",
            "dst_type": "UnaryOperator",
            "operator": "MOV",
            "src": "!org.traccar.helper.BitUtil.check(status, 10)",
            "src_parent": "position.set(Position.KEY_IGNITION, !org.traccar.helper.BitUtil.check(status, 10))",
            "src_parent_type": "Invocation",
            "src_type": "UnaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "Position.KEY_STATUS",
            "dst_parent": "position.set(Position.KEY_STATUS, status)",
            "dst_parent_type": "Invocation",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "Position.KEY_STATUS",
            "src_parent": "position.set(Position.KEY_STATUS, status)",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        }
      ],
      "file_name": "H02ProtocolDecoder"
    }
  ],
  "id": "bears_99"
}