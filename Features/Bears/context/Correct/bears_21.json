{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "property == null",
            "dst_parent": "if (property == null) {\n    return this;\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "UPD",
            "src": "property != null",
            "src_parent": "if (property != null) {\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format != null) {\n        com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(java.lang.Boolean.TRUE, null);\n        }\n        if ((((shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING) || format.hasPattern()) || format.hasLocale()) || format.hasTimeZone()) {\n            java.util.TimeZone tz = format.getTimeZone();\n            final java.lang.String pattern = (format.hasPattern()) ? format.getPattern() : com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n            java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            return withFormat(java.lang.Boolean.FALSE, df);\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "format == null",
            "dst_parent": "if (format == null) {\n    return this;\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "UPD",
            "src": "format != null",
            "src_parent": "if (format != null) {\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if ((((shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING) || format.hasPattern()) || format.hasLocale()) || format.hasTimeZone()) {\n        java.util.TimeZone tz = format.getTimeZone();\n        final java.lang.String pattern = (format.hasPattern()) ? format.getPattern() : com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601;\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(pattern, loc);\n        if (tz == null) {\n            tz = serializers.getTimeZone();\n        }\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.text.DateFormat",
            "dst_parent": "java.text.DateFormat df0 = serializers.getConfig().getDateFormat()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.util.TimeZone",
            "src_parent": "java.util.TimeZone tz = format.getTimeZone()",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.fasterxml.jackson.databind.util.StdDateFormat",
            "dst_parent": "com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0))",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.lang.String",
            "src_parent": "final java.lang.String pattern = (format.hasPattern()) ? format.getPattern() : com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "df",
            "dst_parent": "df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale())",
            "dst_parent_type": "Assignment",
            "dst_type": "VariableWrite",
            "operator": "UPD",
            "src": "tz",
            "src_parent": "tz = serializers.getTimeZone()",
            "src_parent_type": "Assignment",
            "src_type": "VariableWrite"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Boolean",
            "dst_parent": "java.lang.Boolean.FALSE",
            "dst_parent_type": "FieldRead",
            "dst_type": "TypeAccess",
            "operator": "UPD",
            "src": "com.fasterxml.jackson.databind.util.StdDateFormat",
            "src_parent": "com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601",
            "src_parent_type": "FieldRead",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (property != null) {\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format != null) {\n        com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(java.lang.Boolean.TRUE, null);\n        }\n        if ((((shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING) || format.hasPattern()) || format.hasLocale()) || format.hasTimeZone()) {\n            java.util.TimeZone tz = format.getTimeZone();\n            final java.lang.String pattern = (format.hasPattern()) ? format.getPattern() : com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n            java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            return withFormat(java.lang.Boolean.FALSE, df);\n        }\n    }\n}",
            "src_parent": "{\n    if (property != null) {\n        com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format != null) {\n            com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(java.lang.Boolean.TRUE, null);\n            }\n            if ((((shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING) || format.hasPattern()) || format.hasLocale()) || format.hasTimeZone()) {\n                java.util.TimeZone tz = format.getTimeZone();\n                final java.lang.String pattern = (format.hasPattern()) ? format.getPattern() : com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n                java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(java.lang.Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (property == null) {\n    return this;\n}",
            "src_parent": "{\n    if (property == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n        java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING;\n    if (((!hasLocale) && (!hasTZ)) && (!asString)) {\n        return this;\n    }\n    java.text.DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof com.fasterxml.jackson.databind.util.StdDateFormat) {\n        com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0));\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(java.lang.Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof java.text.SimpleDateFormat)) {\n        serializers.reportMappingProblem(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName());\n    }\n    java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0));\n    if (hasLocale) {\n        df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = ((java.text.SimpleDateFormat) (df.clone()));\n    }\n    java.util.TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && (!newTz.equals(df.getTimeZone()));\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (format == null) {\n    return this;\n}",
            "src_parent": "{\n    if (property == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n        java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING;\n    if (((!hasLocale) && (!hasTZ)) && (!asString)) {\n        return this;\n    }\n    java.text.DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof com.fasterxml.jackson.databind.util.StdDateFormat) {\n        com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0));\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(java.lang.Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof java.text.SimpleDateFormat)) {\n        serializers.reportMappingProblem(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName());\n    }\n    java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0));\n    if (hasLocale) {\n        df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = ((java.text.SimpleDateFormat) (df.clone()));\n    }\n    java.util.TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && (!newTz.equals(df.getTimeZone()));\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (format.hasPattern()) {\n    final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n    java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n    java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n    df.setTimeZone(tz);\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "src_parent": "{\n    if (property == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n        java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING;\n    if (((!hasLocale) && (!hasTZ)) && (!asString)) {\n        return this;\n    }\n    java.text.DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof com.fasterxml.jackson.databind.util.StdDateFormat) {\n        com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0));\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(java.lang.Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof java.text.SimpleDateFormat)) {\n        serializers.reportMappingProblem(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName());\n    }\n    java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0));\n    if (hasLocale) {\n        df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = ((java.text.SimpleDateFormat) (df.clone()));\n    }\n    java.util.TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && (!newTz.equals(df.getTimeZone()));\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "final boolean hasLocale = format.hasLocale()",
            "src_parent": "{\n    if (property == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n        java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING;\n    if (((!hasLocale) && (!hasTZ)) && (!asString)) {\n        return this;\n    }\n    java.text.DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof com.fasterxml.jackson.databind.util.StdDateFormat) {\n        com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0));\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(java.lang.Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof java.text.SimpleDateFormat)) {\n        serializers.reportMappingProblem(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName());\n    }\n    java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0));\n    if (hasLocale) {\n        df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = ((java.text.SimpleDateFormat) (df.clone()));\n    }\n    java.util.TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && (!newTz.equals(df.getTimeZone()));\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "final boolean hasTZ = format.hasTimeZone()",
            "src_parent": "{\n    if (property == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n        java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING;\n    if (((!hasLocale) && (!hasTZ)) && (!asString)) {\n        return this;\n    }\n    java.text.DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof com.fasterxml.jackson.databind.util.StdDateFormat) {\n        com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0));\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(java.lang.Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof java.text.SimpleDateFormat)) {\n        serializers.reportMappingProblem(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName());\n    }\n    java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0));\n    if (hasLocale) {\n        df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = ((java.text.SimpleDateFormat) (df.clone()));\n    }\n    java.util.TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && (!newTz.equals(df.getTimeZone()));\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING",
            "src_parent": "{\n    if (property == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n        java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING;\n    if (((!hasLocale) && (!hasTZ)) && (!asString)) {\n        return this;\n    }\n    java.text.DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof com.fasterxml.jackson.databind.util.StdDateFormat) {\n        com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0));\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(java.lang.Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof java.text.SimpleDateFormat)) {\n        serializers.reportMappingProblem(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName());\n    }\n    java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0));\n    if (hasLocale) {\n        df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = ((java.text.SimpleDateFormat) (df.clone()));\n    }\n    java.util.TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && (!newTz.equals(df.getTimeZone()));\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (((!hasLocale) && (!hasTZ)) && (!asString)) {\n    return this;\n}",
            "src_parent": "{\n    if (property == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n        java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING;\n    if (((!hasLocale) && (!hasTZ)) && (!asString)) {\n        return this;\n    }\n    java.text.DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof com.fasterxml.jackson.databind.util.StdDateFormat) {\n        com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0));\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(java.lang.Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof java.text.SimpleDateFormat)) {\n        serializers.reportMappingProblem(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName());\n    }\n    java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0));\n    if (hasLocale) {\n        df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = ((java.text.SimpleDateFormat) (df.clone()));\n    }\n    java.util.TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && (!newTz.equals(df.getTimeZone()));\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.text.DateFormat df0 = serializers.getConfig().getDateFormat()",
            "src_parent": "{\n    if (property == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n        java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING;\n    if (((!hasLocale) && (!hasTZ)) && (!asString)) {\n        return this;\n    }\n    java.text.DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof com.fasterxml.jackson.databind.util.StdDateFormat) {\n        com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0));\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(java.lang.Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof java.text.SimpleDateFormat)) {\n        serializers.reportMappingProblem(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName());\n    }\n    java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0));\n    if (hasLocale) {\n        df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = ((java.text.SimpleDateFormat) (df.clone()));\n    }\n    java.util.TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && (!newTz.equals(df.getTimeZone()));\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (df0 instanceof com.fasterxml.jackson.databind.util.StdDateFormat) {\n    com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0));\n    if (format.hasLocale()) {\n        std = std.withLocale(format.getLocale());\n    }\n    if (format.hasTimeZone()) {\n        std = std.withTimeZone(format.getTimeZone());\n    }\n    return withFormat(java.lang.Boolean.FALSE, std);\n}",
            "src_parent": "{\n    if (property == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n        java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING;\n    if (((!hasLocale) && (!hasTZ)) && (!asString)) {\n        return this;\n    }\n    java.text.DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof com.fasterxml.jackson.databind.util.StdDateFormat) {\n        com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0));\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(java.lang.Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof java.text.SimpleDateFormat)) {\n        serializers.reportMappingProblem(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName());\n    }\n    java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0));\n    if (hasLocale) {\n        df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = ((java.text.SimpleDateFormat) (df.clone()));\n    }\n    java.util.TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && (!newTz.equals(df.getTimeZone()));\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (!(df0 instanceof java.text.SimpleDateFormat)) {\n    serializers.reportMappingProblem(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName());\n}",
            "src_parent": "{\n    if (property == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n        java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING;\n    if (((!hasLocale) && (!hasTZ)) && (!asString)) {\n        return this;\n    }\n    java.text.DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof com.fasterxml.jackson.databind.util.StdDateFormat) {\n        com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0));\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(java.lang.Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof java.text.SimpleDateFormat)) {\n        serializers.reportMappingProblem(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName());\n    }\n    java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0));\n    if (hasLocale) {\n        df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = ((java.text.SimpleDateFormat) (df.clone()));\n    }\n    java.util.TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && (!newTz.equals(df.getTimeZone()));\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0))",
            "src_parent": "{\n    if (property == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n        java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING;\n    if (((!hasLocale) && (!hasTZ)) && (!asString)) {\n        return this;\n    }\n    java.text.DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof com.fasterxml.jackson.databind.util.StdDateFormat) {\n        com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0));\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(java.lang.Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof java.text.SimpleDateFormat)) {\n        serializers.reportMappingProblem(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName());\n    }\n    java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0));\n    if (hasLocale) {\n        df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = ((java.text.SimpleDateFormat) (df.clone()));\n    }\n    java.util.TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && (!newTz.equals(df.getTimeZone()));\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (hasLocale) {\n    df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n} else {\n    df = ((java.text.SimpleDateFormat) (df.clone()));\n}",
            "src_parent": "{\n    if (property == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n        java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING;\n    if (((!hasLocale) && (!hasTZ)) && (!asString)) {\n        return this;\n    }\n    java.text.DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof com.fasterxml.jackson.databind.util.StdDateFormat) {\n        com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0));\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(java.lang.Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof java.text.SimpleDateFormat)) {\n        serializers.reportMappingProblem(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName());\n    }\n    java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0));\n    if (hasLocale) {\n        df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = ((java.text.SimpleDateFormat) (df.clone()));\n    }\n    java.util.TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && (!newTz.equals(df.getTimeZone()));\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.util.TimeZone newTz = format.getTimeZone()",
            "src_parent": "{\n    if (property == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n        java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING;\n    if (((!hasLocale) && (!hasTZ)) && (!asString)) {\n        return this;\n    }\n    java.text.DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof com.fasterxml.jackson.databind.util.StdDateFormat) {\n        com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0));\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(java.lang.Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof java.text.SimpleDateFormat)) {\n        serializers.reportMappingProblem(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName());\n    }\n    java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0));\n    if (hasLocale) {\n        df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = ((java.text.SimpleDateFormat) (df.clone()));\n    }\n    java.util.TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && (!newTz.equals(df.getTimeZone()));\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "boolean changeTZ = (newTz != null) && (!newTz.equals(df.getTimeZone()))",
            "src_parent": "{\n    if (property == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n        java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING;\n    if (((!hasLocale) && (!hasTZ)) && (!asString)) {\n        return this;\n    }\n    java.text.DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof com.fasterxml.jackson.databind.util.StdDateFormat) {\n        com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0));\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(java.lang.Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof java.text.SimpleDateFormat)) {\n        serializers.reportMappingProblem(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName());\n    }\n    java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0));\n    if (hasLocale) {\n        df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = ((java.text.SimpleDateFormat) (df.clone()));\n    }\n    java.util.TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && (!newTz.equals(df.getTimeZone()));\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (changeTZ) {\n    df.setTimeZone(newTz);\n}",
            "src_parent": "{\n    if (property == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n        java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING;\n    if (((!hasLocale) && (!hasTZ)) && (!asString)) {\n        return this;\n    }\n    java.text.DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof com.fasterxml.jackson.databind.util.StdDateFormat) {\n        com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0));\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(java.lang.Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof java.text.SimpleDateFormat)) {\n        serializers.reportMappingProblem(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName());\n    }\n    java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0));\n    if (hasLocale) {\n        df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = ((java.text.SimpleDateFormat) (df.clone()));\n    }\n    java.util.TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && (!newTz.equals(df.getTimeZone()));\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "return withFormat(java.lang.Boolean.FALSE, df)",
            "src_parent": "{\n    if (property == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n        java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING;\n    if (((!hasLocale) && (!hasTZ)) && (!asString)) {\n        return this;\n    }\n    java.text.DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof com.fasterxml.jackson.databind.util.StdDateFormat) {\n        com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0));\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(java.lang.Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof java.text.SimpleDateFormat)) {\n        serializers.reportMappingProblem(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName());\n    }\n    java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0));\n    if (hasLocale) {\n        df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = ((java.text.SimpleDateFormat) (df.clone()));\n    }\n    java.util.TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && (!newTz.equals(df.getTimeZone()));\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "new java.text.SimpleDateFormat(df.toPattern(), format.getLocale())",
            "src_parent": "df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale())",
            "src_parent_type": "Assignment",
            "src_type": "ConstructorCall"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType())",
            "dst_parent": "{\n    if (property == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n        java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING;\n    if (((!hasLocale) && (!hasTZ)) && (!asString)) {\n        return this;\n    }\n    java.text.DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof com.fasterxml.jackson.databind.util.StdDateFormat) {\n        com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0));\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(java.lang.Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof java.text.SimpleDateFormat)) {\n        serializers.reportMappingProblem(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName());\n    }\n    java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0));\n    if (hasLocale) {\n        df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = ((java.text.SimpleDateFormat) (df.clone()));\n    }\n    java.util.TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && (!newTz.equals(df.getTimeZone()));\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType())",
            "src_parent": "{\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format != null) {\n        com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(java.lang.Boolean.TRUE, null);\n        }\n        if ((((shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING) || format.hasPattern()) || format.hasLocale()) || format.hasTimeZone()) {\n            java.util.TimeZone tz = format.getTimeZone();\n            final java.lang.String pattern = (format.hasPattern()) ? format.getPattern() : com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n            java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            return withFormat(java.lang.Boolean.FALSE, df);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape()",
            "dst_parent": "{\n    if (property == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n        java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING;\n    if (((!hasLocale) && (!hasTZ)) && (!asString)) {\n        return this;\n    }\n    java.text.DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof com.fasterxml.jackson.databind.util.StdDateFormat) {\n        com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0));\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(java.lang.Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof java.text.SimpleDateFormat)) {\n        serializers.reportMappingProblem(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName());\n    }\n    java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0));\n    if (hasLocale) {\n        df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = ((java.text.SimpleDateFormat) (df.clone()));\n    }\n    java.util.TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && (!newTz.equals(df.getTimeZone()));\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape()",
            "src_parent": "{\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if ((((shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING) || format.hasPattern()) || format.hasLocale()) || format.hasTimeZone()) {\n        java.util.TimeZone tz = format.getTimeZone();\n        final java.lang.String pattern = (format.hasPattern()) ? format.getPattern() : com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601;\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(pattern, loc);\n        if (tz == null) {\n            tz = serializers.getTimeZone();\n        }\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (shape.isNumeric()) {\n    return withFormat(java.lang.Boolean.TRUE, null);\n}",
            "dst_parent": "{\n    if (property == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n        java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING;\n    if (((!hasLocale) && (!hasTZ)) && (!asString)) {\n        return this;\n    }\n    java.text.DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof com.fasterxml.jackson.databind.util.StdDateFormat) {\n        com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0));\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(java.lang.Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof java.text.SimpleDateFormat)) {\n        serializers.reportMappingProblem(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName());\n    }\n    java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0));\n    if (hasLocale) {\n        df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = ((java.text.SimpleDateFormat) (df.clone()));\n    }\n    java.util.TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && (!newTz.equals(df.getTimeZone()));\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (shape.isNumeric()) {\n    return withFormat(java.lang.Boolean.TRUE, null);\n}",
            "src_parent": "{\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if ((((shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING) || format.hasPattern()) || format.hasLocale()) || format.hasTimeZone()) {\n        java.util.TimeZone tz = format.getTimeZone();\n        final java.lang.String pattern = (format.hasPattern()) ? format.getPattern() : com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601;\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(pattern, loc);\n        if (tz == null) {\n            tz = serializers.getTimeZone();\n        }\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "property == null",
            "dst_parent": "if (property == null) {\n    return this;\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "property != null",
            "src_parent": "if (property != null) {\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format != null) {\n        com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(java.lang.Boolean.TRUE, null);\n        }\n        if ((((shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING) || format.hasPattern()) || format.hasLocale()) || format.hasTimeZone()) {\n            java.util.TimeZone tz = format.getTimeZone();\n            final java.lang.String pattern = (format.hasPattern()) ? format.getPattern() : com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n            java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            return withFormat(java.lang.Boolean.FALSE, df);\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "format == null",
            "dst_parent": "if (format == null) {\n    return this;\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "format != null",
            "src_parent": "if (format != null) {\n    com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(java.lang.Boolean.TRUE, null);\n    }\n    if ((((shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING) || format.hasPattern()) || format.hasLocale()) || format.hasTimeZone()) {\n        java.util.TimeZone tz = format.getTimeZone();\n        final java.lang.String pattern = (format.hasPattern()) ? format.getPattern() : com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601;\n        final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(pattern, loc);\n        if (tz == null) {\n            tz = serializers.getTimeZone();\n        }\n        df.setTimeZone(tz);\n        return withFormat(java.lang.Boolean.FALSE, df);\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "format.hasPattern()",
            "dst_parent": "if (format.hasPattern()) {\n    final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n    java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n    java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n    df.setTimeZone(tz);\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "dst_parent_type": "If",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "format.hasPattern()",
            "src_parent": "(format.hasPattern()) ? format.getPattern() : com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601",
            "src_parent_type": "Conditional",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_LocalVariable",
            "dst_parent": "final boolean hasLocale = format.hasLocale()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_LocalVariable",
            "src_parent": "final java.lang.String pattern = (format.hasPattern()) ? format.getPattern() : com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601",
            "src_parent_type": "LocalVariable",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "format.hasLocale()",
            "dst_parent": "final boolean hasLocale = format.hasLocale()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "format.hasLocale()",
            "src_parent": "(((shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING) || format.hasPattern()) || format.hasLocale())",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING",
            "dst_parent": "final boolean asString = shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING",
            "dst_parent_type": "LocalVariable",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING)",
            "src_parent": "((shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING) || format.hasPattern())",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.text.DateFormat",
            "dst_parent": "java.text.DateFormat df0 = serializers.getConfig().getDateFormat()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "java.util.TimeZone",
            "src_parent": "java.util.TimeZone tz = format.getTimeZone()",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.text.SimpleDateFormat",
            "dst_parent": "java.text.SimpleDateFormat df = ((java.text.SimpleDateFormat) (df0))",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "java.text.SimpleDateFormat",
            "src_parent": "java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(pattern, loc)",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n}",
            "dst_parent": "if (hasLocale) {\n    df = new java.text.SimpleDateFormat(df.toPattern(), format.getLocale());\n} else {\n    df = ((java.text.SimpleDateFormat) (df.clone()));\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    tz = serializers.getTimeZone();\n}",
            "src_parent": "if (tz == null) {\n    tz = serializers.getTimeZone();\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale()",
            "dst_parent": "{\n    final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n    java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n    java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n    df.setTimeZone(tz);\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale()",
            "src_parent": "{\n    java.util.TimeZone tz = format.getTimeZone();\n    final java.lang.String pattern = (format.hasPattern()) ? format.getPattern() : com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601;\n    final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n    java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(pattern, loc);\n    if (tz == null) {\n        tz = serializers.getTimeZone();\n    }\n    df.setTimeZone(tz);\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "df.setTimeZone(tz)",
            "dst_parent": "{\n    final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n    java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n    java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n    df.setTimeZone(tz);\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "df.setTimeZone(tz)",
            "src_parent": "{\n    java.util.TimeZone tz = format.getTimeZone();\n    final java.lang.String pattern = (format.hasPattern()) ? format.getPattern() : com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601;\n    final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n    java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(pattern, loc);\n    if (tz == null) {\n        tz = serializers.getTimeZone();\n    }\n    df.setTimeZone(tz);\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return withFormat(java.lang.Boolean.FALSE, df)",
            "dst_parent": "{\n    final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n    java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(format.getPattern(), loc);\n    java.util.TimeZone tz = (format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone();\n    df.setTimeZone(tz);\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return withFormat(java.lang.Boolean.FALSE, df)",
            "src_parent": "{\n    java.util.TimeZone tz = format.getTimeZone();\n    final java.lang.String pattern = (format.hasPattern()) ? format.getPattern() : com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601;\n    final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n    java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(pattern, loc);\n    if (tz == null) {\n        tz = serializers.getTimeZone();\n    }\n    df.setTimeZone(tz);\n    return withFormat(java.lang.Boolean.FALSE, df);\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "format",
            "dst_parent": "format.hasTimeZone()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "format",
            "src_parent": "format.hasPattern()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return this",
            "dst_parent": "{\n    return this;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return this",
            "src_parent": "{\n    if (property != null) {\n        com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format != null) {\n            com.fasterxml.jackson.annotation.JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(java.lang.Boolean.TRUE, null);\n            }\n            if ((((shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING) || format.hasPattern()) || format.hasLocale()) || format.hasTimeZone()) {\n                java.util.TimeZone tz = format.getTimeZone();\n                final java.lang.String pattern = (format.hasPattern()) ? format.getPattern() : com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final java.util.Locale loc = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n                java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(java.lang.Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.fasterxml.jackson.databind.util.StdDateFormat",
            "dst_parent": "com.fasterxml.jackson.databind.util.StdDateFormat std = ((com.fasterxml.jackson.databind.util.StdDateFormat) (df0))",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "java.lang.String",
            "src_parent": "final java.lang.String pattern = (format.hasPattern()) ? format.getPattern() : com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "format.getPattern()",
            "dst_parent": "new java.text.SimpleDateFormat(format.getPattern(), loc)",
            "dst_parent_type": "ConstructorCall",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "format.getPattern()",
            "src_parent": "(format.hasPattern()) ? format.getPattern() : com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601",
            "src_parent_type": "Conditional",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "format.hasTimeZone()",
            "dst_parent": "(format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone()",
            "dst_parent_type": "Conditional",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "format.hasTimeZone()",
            "src_parent": "(((shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING) || format.hasPattern()) || format.hasLocale()) || format.hasTimeZone()",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "format.getTimeZone()",
            "dst_parent": "(format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone()",
            "dst_parent_type": "Conditional",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "format.getTimeZone()",
            "src_parent": "java.util.TimeZone tz = format.getTimeZone()",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "serializers.getTimeZone()",
            "dst_parent": "(format.hasTimeZone()) ? format.getTimeZone() : serializers.getTimeZone()",
            "dst_parent_type": "Conditional",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "serializers.getTimeZone()",
            "src_parent": "tz = serializers.getTimeZone()",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Boolean",
            "dst_parent": "java.lang.Boolean.FALSE",
            "dst_parent_type": "FieldRead",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "com.fasterxml.jackson.databind.util.StdDateFormat",
            "src_parent": "com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601",
            "src_parent_type": "FieldRead",
            "src_type": "TypeAccess"
          }
        }
      ],
      "file_name": "DateTimeSerializerBase"
    }
  ],
  "id": "bears_21"
}