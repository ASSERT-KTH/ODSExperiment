{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private boolean hasAnyChildrenAccountEnabled(org.cash.count.model.Account account) {\n    return account.getChildren().stream().filter(( a) -> !a.isDisabled()).findAny().isPresent();\n}",
            "src_parent": "public class AccountManager implements org.cash.count.service.IAccountManager {\n    private final org.cash.count.repository.AccountRepository accountRepository;\n\n    public AccountManager(org.cash.count.repository.AccountRepository accountRepository) {\n        this.accountRepository = accountRepository;\n    }\n\n    @java.lang.Override\n    public void create(org.cash.count.dto.AccountCreationDto account) {\n        if (!hasName(account)) {\n            throw new java.util.NoSuchElementException(\"Missing Account Name\");\n        }\n        if (account.getParentId() == 0) {\n            throw new java.util.NoSuchElementException(\"Missing Parent Account Id\");\n        }\n        java.util.Optional<org.cash.count.model.Account> parentAccountWrapper = accountRepository.findById(account.getParentId());\n        org.cash.count.model.Account parentAccount = parentAccountWrapper.orElseThrow(java.util.NoSuchElementException::new);\n        org.cash.count.model.Account accountEntity = new org.cash.count.model.Account();\n        accountEntity.setId(account.getId());\n        accountEntity.setName(account.getName());\n        accountEntity.setDescription(account.getDescription());\n        accountEntity.setIncreasedBy(parentAccount.getIncreasedBy());\n        accountEntity.setParent(parentAccount);\n        accountEntity.setBalance(java.math.BigDecimal.ZERO);\n        accountRepository.save(accountEntity);\n    }\n\n    private boolean hasName(org.cash.count.dto.NameValidator account) {\n        return java.util.Optional.of(account).map(NameValidator::getName).isPresent();\n    }\n\n    @java.lang.Override\n    public org.cash.count.dto.AccountDto findById(int accountId) {\n        java.util.Optional<org.cash.count.model.Account> wrappedAccount = accountRepository.findById(accountId);\n        org.cash.count.model.Account account = wrappedAccount.orElseThrow(java.util.NoSuchElementException::new);\n        org.cash.count.dto.AccountDto accountDto = new org.cash.count.dto.AccountDto();\n        accountDto.setId(account.getId());\n        accountDto.setName(account.getName());\n        accountDto.setDescription(account.getDescription());\n        accountDto.setParentId(account.getParent().getId());\n        accountDto.setBalance(account.getBalance());\n        accountDto.setDisabled(account.isDisabled());\n        return accountDto;\n    }\n\n    @java.lang.Override\n    public void update(org.cash.count.dto.AccountUpdatedDto accountUpdated) {\n        if (!hasName(accountUpdated)) {\n            throw new java.util.NoSuchElementException(\"Missing account name\");\n        }\n        java.util.Optional<org.cash.count.model.Account> wrappedAccount = accountRepository.findById(accountUpdated.getId());\n        org.cash.count.model.Account account = wrappedAccount.orElseThrow(java.util.NoSuchElementException::new);\n        account.setName(accountUpdated.getName());\n        account.setDescription(accountUpdated.getDescription());\n        accountRepository.save(account);\n    }\n\n    @java.lang.Override\n    public void disable(int accountId) {\n        java.util.Optional<org.cash.count.model.Account> wrappedAccount = accountRepository.findById(accountId);\n        org.cash.count.model.Account account = wrappedAccount.orElseThrow(java.util.NoSuchElementException::new);\n        if (hasAnyChildrenAccountEnabled(account)) {\n            throw new java.lang.IllegalStateException(\"Children accounts enabled\");\n        }\n        account.setDisabled(true);\n        accountRepository.save(account);\n    }\n\n    private boolean hasAnyChildrenAccountEnabled(org.cash.count.model.Account account) {\n        return account.getChildren().stream().filter(( a) -> !a.isDisabled()).findAny().isPresent();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (hasAnyChildrenAccountEnabled(account)) {\n    throw new java.lang.IllegalStateException(\"Children accounts enabled\");\n}",
            "src_parent": "{\n    java.util.Optional<org.cash.count.model.Account> wrappedAccount = accountRepository.findById(accountId);\n    org.cash.count.model.Account account = wrappedAccount.orElseThrow(java.util.NoSuchElementException::new);\n    if (hasAnyChildrenAccountEnabled(account)) {\n        throw new java.lang.IllegalStateException(\"Children accounts enabled\");\n    }\n    account.setDisabled(true);\n    accountRepository.save(account);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "AccountManager"
    }
  ],
  "id": "bears_235"
}