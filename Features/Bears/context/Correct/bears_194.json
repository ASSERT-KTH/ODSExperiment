{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private boolean isSanitized(net.sourceforge.pmd.lang.java.ast.ASTArgumentList argListNode) {\n    try {\n        net.sourceforge.pmd.lang.java.ast.ASTArguments arguments = ((net.sourceforge.pmd.lang.java.ast.ASTArguments) (argListNode.jjtGetParent()));\n        net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix suffix = ((net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix) (arguments.jjtGetParent()));\n        net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression exp = ((net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression) (suffix.jjtGetParent()));\n        java.lang.String method = getMethod(exp);\n        java.lang.Class<?> type = getJavaType(exp);\n        java.lang.String typeName = type.getName();\n        if (isSink(typeName, method)) {\n            return false;\n        }\n        if (isSanitizerMethod(typeName, method) || isSafeType(getReturnType(exp, typeName, method))) {\n            return true;\n        }\n    } catch (java.lang.Exception e) {\n        return false;\n    }\n    return false;\n}",
            "src_parent": "public class DfaSecurityRule extends com.gdssecurity.pmd.rules.BaseSecurityRule implements net.sourceforge.pmd.lang.dfa.pathfinder.Executable {\n    private static final java.lang.String UNKNOWN_TYPE = \"UNKNOWN_TYPE\";\n\n    private java.util.Map<java.lang.String, java.lang.String> cacheReturnTypes = new java.util.HashMap<java.lang.String, java.lang.String>();\n\n    private java.util.Set<java.lang.String> annotatedGenerators = new java.util.HashSet<java.lang.String>();\n\n    private java.util.Set<java.lang.String> annotatedSinks = new java.util.HashSet<java.lang.String>();\n\n    private java.util.Set<java.lang.String> currentPathTaintedVariables;\n\n    private java.util.Set<java.lang.String> functionParameterTainted = new java.util.HashSet<java.lang.String>();\n\n    private java.util.Set<java.lang.String> fieldTypesTainted = new java.util.HashSet<java.lang.String>();\n\n    private java.util.Map<java.lang.String, java.lang.Class<?>> fieldTypes;\n\n    private java.util.Map<java.lang.String, java.lang.Class<?>> functionParameterTypes;\n\n    private java.util.Set<java.lang.String> sinks;\n\n    private java.util.Set<java.lang.String> sanitizers;\n\n    private java.util.Set<java.lang.String> sinkAnnotations;\n\n    private java.util.Set<java.lang.String> generatorAnnotations;\n\n    private java.util.Set<java.lang.String> searchAnnotationsInPackages;\n\n    private java.lang.String[] searchAnnotationsInPackagesArray;\n\n    private final net.sourceforge.pmd.properties.PropertyDescriptor<java.util.List<java.lang.String>> sinkDescriptor = new net.sourceforge.pmd.properties.StringMultiProperty(\"sinks\", \"TODO\", new java.lang.String[]{ \"\" }, 1.0F, '|');\n\n    private final net.sourceforge.pmd.properties.PropertyDescriptor<java.util.List<java.lang.String>> sinkAnnotationsDescriptor = new net.sourceforge.pmd.properties.StringMultiProperty(\"sink-annotations\", \"TODO\", new java.lang.String[]{  }, 1.0F, '|');\n\n    private final net.sourceforge.pmd.properties.PropertyDescriptor<java.util.List<java.lang.String>> sanitizerDescriptor = new net.sourceforge.pmd.properties.StringMultiProperty(\"sanitizers\", \"TODO\", new java.lang.String[]{ \"\" }, 1.0F, '|');\n\n    private final net.sourceforge.pmd.properties.PropertyDescriptor<java.util.List<java.lang.String>> annotationsPackagesDescriptor = new net.sourceforge.pmd.properties.StringMultiProperty(\"search-annotations-in-packages\", \"TODO\", new java.lang.String[]{  }, 1.0F, '|');\n\n    private final net.sourceforge.pmd.properties.PropertyDescriptor<java.util.List<java.lang.String>> generatorAnnotationsDescriptor = new net.sourceforge.pmd.properties.StringMultiProperty(\"generator-annotations\", \"TODO\", new java.lang.String[]{  }, 1.0F, '|');\n\n    private final net.sourceforge.pmd.properties.PropertyDescriptor<java.lang.String> maxDataFlowsDescriptor = new net.sourceforge.pmd.properties.StringProperty(\"max-dataflows\", \"TODO\", \"30\", 1.0F);\n\n    private net.sourceforge.pmd.RuleContext rc;\n\n    private int methodDataFlowCount;\n\n    private java.util.List<net.sourceforge.pmd.lang.dfa.DataFlowNode> additionalDataFlowNodes = new java.util.ArrayList<net.sourceforge.pmd.lang.dfa.DataFlowNode>();\n\n    private int MAX_DATAFLOWS = 30;\n\n    private boolean generator = false;\n\n    private boolean initialized = false;\n\n    public DfaSecurityRule() {\n        super();\n        definePropertyDescriptor(this.sinkDescriptor);\n        definePropertyDescriptor(this.sanitizerDescriptor);\n        definePropertyDescriptor(this.sinkAnnotationsDescriptor);\n        definePropertyDescriptor(this.generatorAnnotationsDescriptor);\n        definePropertyDescriptor(this.annotationsPackagesDescriptor);\n        definePropertyDescriptor(this.maxDataFlowsDescriptor);\n    }\n\n    @java.lang.Override\n    protected void init() {\n        super.init();\n        if (!this.initialized) {\n            init2();\n            this.initialized = true;\n        }\n    }\n\n    private void init2() {\n        this.sinks = getConfig(this.sinkDescriptor);\n        this.sanitizers = getConfig(this.sanitizerDescriptor);\n        this.sinkAnnotations = getConfig(this.sinkAnnotationsDescriptor);\n        this.generatorAnnotations = getConfig(this.generatorAnnotationsDescriptor);\n        this.searchAnnotationsInPackages = getConfig(this.annotationsPackagesDescriptor);\n        this.searchAnnotationsInPackagesArray = this.searchAnnotationsInPackages.toArray(new java.lang.String[0]);\n        try {\n            this.MAX_DATAFLOWS = java.lang.Integer.parseInt(getProperty(this.maxDataFlowsDescriptor));\n        } catch (java.lang.Exception e) {\n            this.MAX_DATAFLOWS = 30;\n        }\n    }\n\n    @java.lang.Override\n    public void execute(net.sourceforge.pmd.lang.dfa.pathfinder.CurrentPath currentPath) {\n        this.methodDataFlowCount++;\n        if (this.currentPathTaintedVariables == null) {\n            this.currentPathTaintedVariables = new java.util.HashSet<java.lang.String>();\n            this.currentPathTaintedVariables.addAll(this.fieldTypesTainted);\n            this.currentPathTaintedVariables.addAll(this.functionParameterTainted);\n        }\n        if (this.methodDataFlowCount < MAX_DATAFLOWS) {\n            for (java.util.Iterator<net.sourceforge.pmd.lang.dfa.DataFlowNode> iterator = currentPath.iterator(); iterator.hasNext();) {\n                net.sourceforge.pmd.lang.dfa.DataFlowNode iDataFlowNode = iterator.next();\n                net.sourceforge.pmd.lang.ast.Node node = iDataFlowNode.getNode();\n                if (node != null) {\n                    java.lang.Class<?> nodeClass = node.getClass();\n                    if ((nodeClass == net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.class) || (nodeClass == net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration.class)) {\n                        this.currentPathTaintedVariables = new java.util.HashSet<java.lang.String>();\n                        this.generator = isGeneratorThisMethodDeclaration(node);\n                        if (!isSinkThisMethodDeclaration(node)) {\n                            addMethodParamsToTaintedVariables(node);\n                        }\n                        addClassFieldsToTaintedVariables(node);\n                        this.currentPathTaintedVariables.addAll(this.fieldTypesTainted);\n                        this.currentPathTaintedVariables.addAll(this.functionParameterTainted);\n                    } else if ((nodeClass == net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator.class) || (nodeClass == net.sourceforge.pmd.lang.java.ast.ASTStatementExpression.class)) {\n                        handleDataFlowNode(iDataFlowNode);\n                    } else if (nodeClass == net.sourceforge.pmd.lang.java.ast.ASTReturnStatement.class) {\n                        handeReturnNode(node, iDataFlowNode);\n                    }\n                }\n            }\n            if (!this.additionalDataFlowNodes.isEmpty()) {\n                net.sourceforge.pmd.lang.dfa.DataFlowNode additionalRootNode = this.additionalDataFlowNodes.remove(0);\n                net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder daaPathFinder = new net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder(additionalRootNode, this, MAX_DATAFLOWS);\n                this.methodDataFlowCount = 0;\n                daaPathFinder.run();\n            }\n        }\n    }\n\n    protected boolean isSanitizerMethod(java.lang.String type, java.lang.String method) {\n        return this.sanitizers.contains((type + \".\") + method);\n    }\n\n    private boolean isSink(java.lang.String objectTypeAndMethod) {\n        return this.sinks.contains(objectTypeAndMethod) || this.annotatedSinks.contains(objectTypeAndMethod);\n    }\n\n    private boolean isSink(java.lang.String objectType, java.lang.String objectMethod) {\n        return isSink((objectType + \".\") + objectMethod);\n    }\n\n    private boolean isGenerator(java.lang.String objectTypeAndMethod) {\n        return this.annotatedGenerators.contains(objectTypeAndMethod);\n    }\n\n    private boolean isGenerator(java.lang.String objectType, java.lang.String objectMethod) {\n        return isGenerator((objectType + \".\") + objectMethod);\n    }\n\n    private boolean isGeneratorThisMethodDeclaration(net.sourceforge.pmd.lang.ast.Node node) {\n        java.lang.String seek = getCurrentMethodName(node);\n        if (!org.apache.commons.lang3.StringUtils.isBlank(seek)) {\n            return isGenerator(seek);\n        }\n        return false;\n    }\n\n    private boolean isSinkThisMethodDeclaration(net.sourceforge.pmd.lang.ast.Node node) {\n        java.lang.String seek = getCurrentMethodName(node);\n        if (!org.apache.commons.lang3.StringUtils.isBlank(seek)) {\n            return isSink(seek);\n        }\n        return false;\n    }\n\n    private java.lang.String getCurrentMethodName(net.sourceforge.pmd.lang.ast.Node node) {\n        java.lang.Class<?> type = getJavaType(node);\n        if (type == null) {\n            return \"\";\n        }\n        java.lang.String methodName = com.gdssecurity.pmd.rules.dfa.DfaSecurityRule.UNKNOWN_TYPE;\n        if ((node.getClass() == net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.class) || (node.getClass() == net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration.class)) {\n            net.sourceforge.pmd.lang.ast.Node declarator = node.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclarator.class);\n            if (declarator == null) {\n                return \"\";\n            }\n            methodName = declarator.getImage();\n            return (type.getCanonicalName() + \".\") + methodName;\n        }\n        return \"\";\n    }\n\n    private boolean isTaintedVariable(java.lang.String variable) {\n        return this.currentPathTaintedVariables.contains(variable);\n    }\n\n    @java.lang.Override\n    public java.lang.Object visit(net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration astConstructorDeclaration, java.lang.Object data) {\n        net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration astClass = astConstructorDeclaration.getFirstParentOfType(net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration.class);\n        if (astClass == null) {\n            return data;\n        }\n        this.rc = ((net.sourceforge.pmd.RuleContext) (data));\n        processReturnStatements(astConstructorDeclaration);\n        processThrowsStatements(astConstructorDeclaration);\n        runFinder(astConstructorDeclaration);\n        return data;\n    }\n\n    @java.lang.Override\n    public java.lang.Object visit(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration astMethodDeclaration, java.lang.Object data) {\n        net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration astClass = astMethodDeclaration.getFirstParentOfType(net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration.class);\n        if (astClass == null) {\n            return data;\n        }\n        this.rc = ((net.sourceforge.pmd.RuleContext) (data));\n        processReturnStatements(astMethodDeclaration);\n        processThrowsStatements(astMethodDeclaration);\n        runFinder(astMethodDeclaration);\n        super.visit(astMethodDeclaration, data);\n        return data;\n    }\n\n    private void runFinder(net.sourceforge.pmd.lang.ast.Node astMethodDeclaration) {\n        net.sourceforge.pmd.lang.dfa.DataFlowNode rootDataFlowNode = astMethodDeclaration.getDataFlowNode().getFlow().get(0);\n        this.methodDataFlowCount = 0;\n        net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder daaPathFinder = new net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder(rootDataFlowNode, this, MAX_DATAFLOWS);\n        daaPathFinder.run();\n    }\n\n    private void processReturnStatements(net.sourceforge.pmd.lang.ast.Node node) {\n        processDataFlow(node, \"./Block/BlockStatement//TryStatement/CatchStatement//ReturnStatement\");\n    }\n\n    private void processThrowsStatements(net.sourceforge.pmd.lang.ast.Node node) {\n        processDataFlow(node, \"./Block/BlockStatement//TryStatement/CatchStatement//ThrowStatement\");\n    }\n\n    private void processDataFlow(net.sourceforge.pmd.lang.ast.Node node, java.lang.String xpath) {\n        try {\n            java.util.List<? extends net.sourceforge.pmd.lang.ast.Node> statements = node.findChildNodesWithXPath(xpath);\n            if ((statements == null) || statements.isEmpty()) {\n                return;\n            }\n            int i = 0;\n            for (net.sourceforge.pmd.lang.dfa.DataFlowNode current : node.getDataFlowNode().getFlow()) {\n                for (net.sourceforge.pmd.lang.ast.Node statement : statements) {\n                    if (current.equals(statement.getDataFlowNode())) {\n                        net.sourceforge.pmd.lang.dfa.DataFlowNode next = node.getDataFlowNode().getFlow().get(i + 1);\n                        this.additionalDataFlowNodes.add(next);\n                    }\n                }\n                i++;\n            }\n        } catch (org.jaxen.JaxenException e) {\n        }\n    }\n\n    private void handeReturnNode(net.sourceforge.pmd.lang.ast.Node node, net.sourceforge.pmd.lang.dfa.DataFlowNode iDataFlowNode) {\n        handleVariableReference(iDataFlowNode);\n        if ((isTainted(node) && this.generator) && (!isSafeType(this.getType(node)))) {\n            addSecurityViolation(this, this.rc, node, getMessage(), \"\");\n        }\n    }\n\n    private void addClassFieldsToTaintedVariables(net.sourceforge.pmd.lang.ast.Node node) {\n        this.fieldTypes = new java.util.HashMap<java.lang.String, java.lang.Class<?>>();\n        this.fieldTypesTainted = new java.util.HashSet<java.lang.String>();\n        net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody astBody = node.getFirstParentOfType(net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody.class);\n        if (astBody == null) {\n            return;\n        }\n        java.util.List<net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBodyDeclaration> declarations = astBody.findChildrenOfType(net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBodyDeclaration.class);\n        for (net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBodyDeclaration declaration : declarations) {\n            net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration field = declaration.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.class);\n            if (field != null) {\n                java.lang.Class<?> type = field.getType();\n                net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator declarator = field.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator.class);\n                net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId name1 = declarator.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.class);\n                if (name1 != null) {\n                    java.lang.String name = name1.getImage();\n                    this.fieldTypes.put(name, type);\n                    if ((!field.isFinal()) && isUnsafeType(field.getType())) {\n                        this.fieldTypesTainted.add(\"this.\" + name);\n                    }\n                }\n            }\n        }\n    }\n\n    private void addMethodParamsToTaintedVariables(net.sourceforge.pmd.lang.ast.Node node) {\n        this.functionParameterTypes = new java.util.HashMap<java.lang.String, java.lang.Class<?>>();\n        this.functionParameterTainted = new java.util.HashSet<java.lang.String>();\n        net.sourceforge.pmd.lang.java.ast.ASTFormalParameters formalParameters = null;\n        if (node == null) {\n            return;\n        }\n        if (node.getClass() == net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.class) {\n            net.sourceforge.pmd.lang.java.ast.ASTMethodDeclarator declarator = node.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclarator.class);\n            formalParameters = declarator.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTFormalParameters.class);\n        } else if (node.getClass() == net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration.class) {\n            formalParameters = node.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTFormalParameters.class);\n        }\n        if (formalParameters == null) {\n            return;\n        }\n        java.util.List<net.sourceforge.pmd.lang.java.ast.ASTFormalParameter> parameters = formalParameters.findChildrenOfType(net.sourceforge.pmd.lang.java.ast.ASTFormalParameter.class);\n        for (net.sourceforge.pmd.lang.java.ast.ASTFormalParameter parameter : parameters) {\n            net.sourceforge.pmd.lang.java.ast.ASTType type = parameter.getTypeNode();\n            net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId name1 = parameter.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.class);\n            java.lang.String name = name1.getImage();\n            if ((name != null) && (type != null)) {\n                this.functionParameterTypes.put(name, type.getType());\n            }\n            if ((name != null) && isUnsafeType(type)) {\n                this.functionParameterTainted.add(name);\n            }\n        }\n    }\n\n    private void handleDataFlowNode(net.sourceforge.pmd.lang.dfa.DataFlowNode iDataFlowNode) {\n        for (net.sourceforge.pmd.lang.dfa.VariableAccess access : iDataFlowNode.getVariableAccess()) {\n            if (access.isDefinition()) {\n                java.lang.String variableName = access.getVariableName();\n                handleVariableDefinition(iDataFlowNode, variableName);\n                return;\n            }\n        }\n        handleVariableReference(iDataFlowNode);\n    }\n\n    private void handleVariableReference(net.sourceforge.pmd.lang.dfa.DataFlowNode iDataFlowNode) {\n        net.sourceforge.pmd.lang.ast.Node simpleNode = iDataFlowNode.getNode();\n        if (isStringConcatenation(simpleNode)) {\n            handleStringConcatenation(iDataFlowNode, simpleNode);\n        } else if (isMethodCall(simpleNode)) {\n            java.lang.Class<?> type = null;\n            java.lang.String method = \"\";\n            net.sourceforge.pmd.lang.ast.Node astMethod = null;\n            if (simpleNode.getFirstDescendantOfType(net.sourceforge.pmd.lang.java.ast.ASTAssignmentOperator.class) == null) {\n                astMethod = simpleNode.getFirstDescendantOfType(net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression.class);\n            } else {\n                astMethod = simpleNode.getFirstDescendantOfType(net.sourceforge.pmd.lang.java.ast.ASTExpression.class);\n            }\n            method = getMethod(astMethod);\n            if (org.apache.commons.lang3.StringUtils.isBlank(method)) {\n                astMethod = astMethod.getFirstDescendantOfType(net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression.class);\n                method = getMethod(astMethod);\n            }\n            type = getJavaType(astMethod);\n            if (isStringBuilderAppend(type, method)) {\n                analizeStringBuilderAppend(simpleNode);\n            }\n            if (isSink(type, method)) {\n                analyzeSinkMethodArgs(simpleNode);\n            }\n        }\n    }\n\n    private boolean isStringBuilderAppend(java.lang.Class<?> type, java.lang.String methodName) {\n        return isStringBuilder(type) && (\"insert\".equals(methodName) || \"append\".equals(methodName));\n    }\n\n    private boolean isStringBuilder(java.lang.Class<?> type) {\n        if (type == null) {\n            return false;\n        }\n        return ((type == java.lang.StringBuilder.class) || (type == java.lang.StringBuffer.class)) || \"java.lang.AbstractStringBuilder\".equals(type.getCanonicalName());\n    }\n\n    private void handleStringConcatenation(net.sourceforge.pmd.lang.dfa.DataFlowNode iDataFlowNode, net.sourceforge.pmd.lang.ast.Node simpleNode) {\n        net.sourceforge.pmd.lang.ast.Node node = simpleNode.jjtGetChild(0);\n        if (node.jjtGetNumChildren() > 0) {\n            node = node.jjtGetChild(0);\n            if ((node.getClass() == net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix.class) && (node.jjtGetNumChildren() > 0)) {\n                net.sourceforge.pmd.lang.ast.Node name = node.jjtGetChild(0);\n                if (name.getClass() == net.sourceforge.pmd.lang.java.ast.ASTName.class) {\n                    handleVariableDefinition(iDataFlowNode, name.getImage());\n                }\n            }\n        }\n    }\n\n    private boolean isStringConcatenation(net.sourceforge.pmd.lang.ast.Node simpleNode) {\n        if (simpleNode.jjtGetNumChildren() > 2) {\n            net.sourceforge.pmd.lang.ast.Node asign = simpleNode.jjtGetChild(1);\n            if (asign.getClass() == net.sourceforge.pmd.lang.java.ast.ASTAssignmentOperator.class) {\n                return \"+=\".equals(asign.getImage());\n            }\n        }\n        return false;\n    }\n\n    private boolean isSink(java.lang.Class<?> type, java.lang.String methodName) {\n        if (type == null) {\n            return false;\n        }\n        return isSink(type.getCanonicalName(), methodName);\n    }\n\n    private boolean analizeTypeWithReflectionForAnnotations(java.lang.Class<?> type) {\n        if (this.searchAnnotationsInPackagesArray.length == 0) {\n            return false;\n        }\n        if ((type == null) || (type.getPackage() == null)) {\n            return false;\n        }\n        java.lang.String packageName = type.getPackage().getName();\n        return org.apache.commons.lang3.StringUtils.startsWithAny(packageName, this.searchAnnotationsInPackagesArray);\n    }\n\n    private void analizeStringBuilderAppend(net.sourceforge.pmd.lang.ast.Node simpleNode) {\n        net.sourceforge.pmd.lang.java.ast.ASTName name = simpleNode.getFirstDescendantOfType(net.sourceforge.pmd.lang.java.ast.ASTName.class);\n        if (name == null) {\n            return;\n        }\n        java.lang.String varName = getVarName(name);\n        if (this.isTaintedVariable(varName)) {\n            return;\n        }\n        if (isTainted(simpleNode)) {\n            this.currentPathTaintedVariables.add(varName);\n        }\n    }\n\n    private void analyzeSinkMethodArgs(net.sourceforge.pmd.lang.ast.Node simpleNode) {\n        if (isAnyArgumentTainted(simpleNode)) {\n            addSecurityViolation(this, this.rc, simpleNode, getMessage(), \"\");\n        }\n    }\n\n    private boolean isAnyArgumentTainted(net.sourceforge.pmd.lang.ast.Node simpleNode) {\n        net.sourceforge.pmd.lang.java.ast.ASTArgumentList argListNode = simpleNode.getFirstDescendantOfType(net.sourceforge.pmd.lang.java.ast.ASTArgumentList.class);\n        if (argListNode != null) {\n            if (isSanitized(argListNode)) {\n                return false;\n            }\n            int numChildren = argListNode.jjtGetNumChildren();\n            for (int i = 0; i < numChildren; i++) {\n                net.sourceforge.pmd.lang.ast.Node argument = argListNode.jjtGetChild(i);\n                if (isTainted(argument)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private boolean isSanitized(net.sourceforge.pmd.lang.java.ast.ASTArgumentList argListNode) {\n        try {\n            net.sourceforge.pmd.lang.java.ast.ASTArguments arguments = ((net.sourceforge.pmd.lang.java.ast.ASTArguments) (argListNode.jjtGetParent()));\n            net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix suffix = ((net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix) (arguments.jjtGetParent()));\n            net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression exp = ((net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression) (suffix.jjtGetParent()));\n            java.lang.String method = getMethod(exp);\n            java.lang.Class<?> type = getJavaType(exp);\n            java.lang.String typeName = type.getName();\n            if (isSink(typeName, method)) {\n                return false;\n            }\n            if (isSanitizerMethod(typeName, method) || isSafeType(getReturnType(exp, typeName, method))) {\n                return true;\n            }\n        } catch (java.lang.Exception e) {\n            return false;\n        }\n        return false;\n    }\n\n    private boolean isMethodCall(net.sourceforge.pmd.lang.ast.Node node) {\n        net.sourceforge.pmd.lang.java.ast.ASTArguments arguments = node.getFirstDescendantOfType(net.sourceforge.pmd.lang.java.ast.ASTArguments.class);\n        return arguments != null;\n    }\n\n    private void handleVariableDefinition(net.sourceforge.pmd.lang.dfa.DataFlowNode iDataFlowNode, java.lang.String variable) {\n        net.sourceforge.pmd.lang.ast.Node simpleNode = iDataFlowNode.getNode();\n        java.lang.Class<?> clazz = java.lang.String.class;\n        net.sourceforge.pmd.lang.ast.Node primaryExpression = simpleNode.jjtGetChild(0);\n        if (primaryExpression != null) {\n            if (primaryExpression.getClass() == net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression.class) {\n                net.sourceforge.pmd.lang.ast.Node primaryPrefix = primaryExpression.jjtGetChild(0);\n                if ((primaryPrefix != null) && (primaryPrefix.getClass() == net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix.class)) {\n                    clazz = ((net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix) (primaryPrefix)).getType();\n                }\n            }\n            if ((primaryExpression.getClass() == net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.class) && (simpleNode.jjtGetNumChildren() > 1)) {\n                net.sourceforge.pmd.lang.ast.Node initializer = simpleNode.jjtGetChild(1);\n                if ((initializer != null) && (initializer.getClass() == net.sourceforge.pmd.lang.java.ast.ASTVariableInitializer.class)) {\n                    clazz = ((net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId) (primaryExpression)).getType();\n                }\n            }\n        }\n        if (isTainted(simpleNode) && isUnsafeType(clazz)) {\n            this.currentPathTaintedVariables.add(variable);\n        }\n    }\n\n    private boolean isTainted(net.sourceforge.pmd.lang.ast.Node node2) {\n        java.util.List<net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression> primaryExpressions = getExp(node2);\n        boolean tainted = false;\n        for (net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression node : primaryExpressions) {\n            if (((node.jjtGetNumChildren() == 1) && (node.jjtGetChild(0).jjtGetNumChildren() == 1)) && (node.jjtGetChild(0).jjtGetChild(0).getClass() == net.sourceforge.pmd.lang.java.ast.ASTLiteral.class)) {\n                continue;\n            }\n            if (((node.jjtGetNumChildren() == 1) && (node.jjtGetChild(0).jjtGetNumChildren() == 1)) && (node.jjtGetChild(0).jjtGetChild(0).getClass() == net.sourceforge.pmd.lang.java.ast.ASTExpression.class)) {\n                boolean t1 = isTainted(node);\n                tainted = tainted || t1;\n                continue;\n            }\n            if ((node.jjtGetParent().getClass() == net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression.class) && (node.jjtGetParent().jjtGetChild(0) == node)) {\n                isTainted(node);\n                continue;\n            }\n            if (node.jjtGetParent().getClass() == net.sourceforge.pmd.lang.java.ast.ASTEqualityExpression.class) {\n                isTainted(node);\n                continue;\n            }\n            if (isMethodCall(node)) {\n                java.lang.String method = getMethod(node);\n                if (org.apache.commons.lang3.StringUtils.isBlank(method)) {\n                    continue;\n                }\n                java.lang.String type = getType(node);\n                if (isSanitizerMethod(type, method) || isGenerator(type, method)) {\n                    continue;\n                } else if (isSink(type, method)) {\n                    analyzeSinkMethodArgs(node);\n                } else if (isSafeType(getReturnType(node, type, method))) {\n                    continue;\n                } else if ((isSource(type, method) || isUsedOverTaintedVariable(node)) || isAnyArgumentTainted(node)) {\n                    return true;\n                }\n            } else if (node.hasDescendantOfType(net.sourceforge.pmd.lang.java.ast.ASTName.class)) {\n                java.util.List<net.sourceforge.pmd.lang.java.ast.ASTName> astNames = node.findDescendantsOfType(net.sourceforge.pmd.lang.java.ast.ASTName.class);\n                if (analyzeVariable(astNames)) {\n                    return true;\n                }\n            } else if (isUsedOverTaintedVariable(node)) {\n                return true;\n            }\n            boolean childsTainted = isTainted(node);\n            if (childsTainted) {\n                return true;\n            }\n        }\n        return tainted;\n    }\n\n    private boolean isUsedOverTaintedVariable(net.sourceforge.pmd.lang.ast.Node node) {\n        net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix prefix = node.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix.class);\n        net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix suffix = node.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix.class);\n        if ((((prefix == null) || (prefix.getImage() == null)) && (suffix != null)) && (suffix.getImage() != null)) {\n            java.lang.String fieldName = suffix.getImage();\n            if (this.currentPathTaintedVariables.contains(\"this.\" + fieldName)) {\n                return true;\n            }\n        }\n        if (prefix != null) {\n            net.sourceforge.pmd.lang.java.ast.ASTName astName = prefix.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTName.class);\n            if (astName != null) {\n                java.lang.String varName = getVarName(astName);\n                return isTaintedVariable(varName);\n            }\n        }\n        return false;\n    }\n\n    private java.lang.String getVarName(net.sourceforge.pmd.lang.java.ast.ASTName name) {\n        java.lang.String varName = name.getImage();\n        if (varName.startsWith(\"this.\")) {\n            varName = org.apache.commons.lang3.StringUtils.removeStart(varName, \"this.\");\n        } else if (varName.contains(\".\")) {\n            varName = org.apache.commons.lang3.StringUtils.split(varName, \".\")[0];\n        }\n        if (varName.indexOf('.') != (-1)) {\n            varName = varName.substring(varName.indexOf('.') + 1);\n        }\n        if (isField(name)) {\n            varName = \"this.\" + varName;\n        }\n        return varName;\n    }\n\n    private java.lang.String getReturnType(java.lang.Class<?> clazz, java.lang.String realType, java.lang.String methodName) {\n        if (!this.cacheReturnTypes.containsKey(realType)) {\n            populateCache(clazz, realType);\n        }\n        java.lang.String retVal = this.cacheReturnTypes.get((realType + \".\") + methodName);\n        if (org.apache.commons.lang3.StringUtils.isBlank(retVal)) {\n            return com.gdssecurity.pmd.rules.dfa.DfaSecurityRule.UNKNOWN_TYPE;\n        }\n        return retVal;\n    }\n\n    private void populateCache(java.lang.Class<?> clz, java.lang.String realType) {\n        if (this.cacheReturnTypes.containsKey(realType)) {\n            return;\n        }\n        this.cacheReturnTypes.put(realType, realType);\n        java.lang.Class<?> clazz = clz;\n        if (clazz == null) {\n            clazz = TypeUtils.INSTANCE.getClassForName(realType);\n        }\n        if (clazz == null) {\n            return;\n        }\n        boolean analizeAnnotations = analizeTypeWithReflectionForAnnotations(clazz);\n        for (java.lang.reflect.Method method : com.gdssecurity.pmd.Utils.getMethods(clazz)) {\n            java.lang.Class<?> returnType = method.getReturnType();\n            java.lang.String methodName = method.getName();\n            java.lang.String key = (clazz.getCanonicalName() + \".\") + methodName;\n            java.lang.String returnTypeName = com.gdssecurity.pmd.rules.dfa.DfaSecurityRule.UNKNOWN_TYPE;\n            if (returnType != null) {\n                returnTypeName = returnType.getCanonicalName();\n            }\n            java.lang.String old = this.cacheReturnTypes.get(key);\n            if ((old == null) || org.apache.commons.lang3.StringUtils.equals(old, returnTypeName)) {\n                this.cacheReturnTypes.put(key, returnTypeName);\n            }\n            if (analizeAnnotations) {\n                registerAnnotations(key, method.getAnnotations());\n            }\n        }\n        for (java.lang.reflect.Constructor<?> constructor : com.gdssecurity.pmd.Utils.getConstructors(clazz)) {\n            java.lang.String methodName = clazz.getSimpleName();\n            java.lang.String key = (clazz.getCanonicalName() + \".\") + methodName;\n            java.lang.String retunTypeName = clazz.getCanonicalName();\n            this.cacheReturnTypes.put(key, retunTypeName);\n            if (analizeAnnotations) {\n                registerAnnotations(key, constructor.getAnnotations());\n            }\n        }\n    }\n\n    private void registerAnnotations(java.lang.String key, java.lang.annotation.Annotation[] annotations) {\n        for (java.lang.annotation.Annotation annotation : annotations) {\n            if (this.sinkAnnotations.contains(annotation.annotationType().getCanonicalName())) {\n                this.annotatedSinks.add(key);\n            }\n            if (this.generatorAnnotations.contains(annotation.annotationType().getCanonicalName())) {\n                this.annotatedGenerators.add(key);\n            }\n        }\n    }\n\n    private java.lang.String getReturnType(net.sourceforge.pmd.lang.ast.Node node, java.lang.String type, java.lang.String methodName) {\n        java.lang.String realType = type;\n        java.lang.Class<?> clazz = null;\n        if (org.apache.commons.lang3.StringUtils.isBlank(realType) || com.gdssecurity.pmd.rules.dfa.DfaSecurityRule.UNKNOWN_TYPE.equals(realType)) {\n            clazz = getContainingType(node);\n            if (clazz != null) {\n                realType = clazz.getCanonicalName();\n            }\n        }\n        if (org.apache.commons.lang3.StringUtils.isBlank(realType) || com.gdssecurity.pmd.rules.dfa.DfaSecurityRule.UNKNOWN_TYPE.equals(realType)) {\n            return com.gdssecurity.pmd.rules.dfa.DfaSecurityRule.UNKNOWN_TYPE;\n        }\n        return getReturnType(clazz, realType, methodName);\n    }\n\n    private java.util.List<net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression> getExp(net.sourceforge.pmd.lang.ast.Node node2) {\n        java.util.List<net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression> expressions = new java.util.ArrayList<net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression>();\n        int numChildren = node2.jjtGetNumChildren();\n        for (int i = 0; i < numChildren; i++) {\n            net.sourceforge.pmd.lang.ast.Node child = node2.jjtGetChild(i);\n            if (child.getClass() == net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression.class) {\n                expressions.add(((net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression) (child)));\n            } else {\n                expressions.addAll(getExp(child));\n            }\n        }\n        return expressions;\n    }\n\n    private java.lang.String getMethod(net.sourceforge.pmd.lang.ast.Node node) {\n        if (node == null) {\n            return \"\";\n        }\n        java.lang.String method = getFullMethodName(node);\n        if (method.indexOf('.') != (-1)) {\n            method = method.substring(method.lastIndexOf('.') + 1);\n        }\n        return method;\n    }\n\n    private java.lang.String getFullMethodName(net.sourceforge.pmd.lang.ast.Node node) {\n        net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType astClass = node.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType.class);\n        if (astClass != null) {\n            return astClass.getImage();\n        }\n        net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix prefix = node.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix.class);\n        if (prefix != null) {\n            net.sourceforge.pmd.lang.java.ast.ASTName astName = prefix.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTName.class);\n            if ((astName != null) && (astName.getImage() != null)) {\n                return astName.getImage();\n            }\n        }\n        if (prefix == null) {\n            net.sourceforge.pmd.lang.java.ast.ASTName astName = node.getFirstDescendantOfType(net.sourceforge.pmd.lang.java.ast.ASTName.class);\n            if ((astName != null) && (astName.getImage() != null)) {\n                return astName.getImage();\n            }\n        }\n        java.lang.StringBuilder mName = new java.lang.StringBuilder();\n        java.util.List<net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix> suffixes = node.findChildrenOfType(net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix.class);\n        for (net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix suffix : suffixes) {\n            if ((!suffix.hasDescendantOfType(net.sourceforge.pmd.lang.java.ast.ASTArguments.class)) && (suffix.getImage() != null)) {\n                if (mName.length() > 0) {\n                    mName.append(\".\");\n                }\n                mName.append(suffix.getImage());\n            }\n        }\n        return mName.toString();\n    }\n\n    private java.lang.String getType(net.sourceforge.pmd.lang.ast.Node node) {\n        java.lang.String cannonicalName = com.gdssecurity.pmd.rules.dfa.DfaSecurityRule.UNKNOWN_TYPE;\n        java.lang.Class<?> type = null;\n        try {\n            type = getJavaType(node);\n            if (type != null) {\n                cannonicalName = type.getCanonicalName();\n            }\n            return cannonicalName;\n        } catch (java.lang.Exception ex1) {\n            return cannonicalName;\n        }\n    }\n\n    private java.lang.Class<?> getJavaType(net.sourceforge.pmd.lang.ast.Node node) {\n        java.lang.Class<?> type = null;\n        if (node == null) {\n            return null;\n        }\n        java.lang.Class<?> nodeClass = node.getClass();\n        if (nodeClass == net.sourceforge.pmd.lang.java.ast.ASTExpression.class) {\n            net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression primaryExpression = node.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression.class);\n            if (primaryExpression != null) {\n                net.sourceforge.pmd.lang.java.ast.ASTName astName = primaryExpression.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTName.class);\n                if (astName != null) {\n                    type = astName.getType();\n                }\n            }\n        } else if (nodeClass == net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression.class) {\n            net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType astClass = node.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType.class);\n            if (astClass != null) {\n                type = astClass.getType();\n            } else {\n                net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix prefix = node.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix.class);\n                net.sourceforge.pmd.lang.java.ast.ASTName astName = prefix.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTName.class);\n                if (astName != null) {\n                    net.sourceforge.pmd.lang.symboltable.NameDeclaration dec = astName.getNameDeclaration();\n                    if ((dec != null) && (dec.getNode() instanceof net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId)) {\n                        net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId declarator = ((net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId) (dec.getNode()));\n                        type = declarator.getType();\n                    }\n                    if (type == null) {\n                        java.lang.String parameterName = astName.getImage();\n                        if (parameterName.indexOf('.') > 0) {\n                            parameterName = parameterName.substring(0, parameterName.lastIndexOf('.'));\n                            type = TypeUtils.INSTANCE.getClassForName(parameterName, astName);\n                        }\n                        if (type == null) {\n                            parameterName = astName.getImage();\n                            if (parameterName.indexOf('.') > 0) {\n                                parameterName = parameterName.substring(0, parameterName.indexOf('.'));\n                            }\n                            if (this.functionParameterTypes.containsKey(parameterName)) {\n                                type = this.functionParameterTypes.get(parameterName);\n                            } else {\n                                type = getTypeFromAttribute(node, parameterName);\n                            }\n                        }\n                    }\n                } else {\n                    net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix suffix = node.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix.class);\n                    net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression constructor = prefix.getFirstChildOfType(net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression.class);\n                    if ((constructor != null) && (suffix == null)) {\n                        type = constructor.getType();\n                    }\n                    if ((type == null) && (suffix != null)) {\n                        if (this.fieldTypes.containsKey(suffix.getImage())) {\n                            type = this.fieldTypes.get(suffix.getImage());\n                        } else {\n                            type = getTypeFromAttribute(node, suffix.getImage());\n                        }\n                    }\n                }\n            }\n        } else if (nodeClass == net.sourceforge.pmd.lang.java.ast.ASTName.class) {\n            type = ((net.sourceforge.pmd.lang.java.ast.ASTName) (node)).getType();\n        } else if ((nodeClass == net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.class) || (nodeClass == net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration.class)) {\n            type = getContainingType(node);\n        }\n        if (type != null) {\n            populateCache(type, type.getCanonicalName());\n        }\n        return type;\n    }\n\n    private java.lang.Class<?> getTypeFromAttribute(net.sourceforge.pmd.lang.ast.Node node, java.lang.String attributeName) {\n        java.lang.Class<?> type = getContainingType(node);\n        if (type != null) {\n            java.lang.reflect.Field field = null;\n            java.util.List<java.lang.Class<?>> inheritanceList = getInheritance(type);\n            for (java.lang.Class<?> clazz : inheritanceList) {\n                try {\n                    field = org.apache.commons.lang3.reflect.FieldUtils.getDeclaredField(clazz, attributeName, true);\n                    if (field != null) {\n                        break;\n                    }\n                } catch (java.lang.SecurityException | java.lang.NoClassDefFoundError e) {\n                    field = null;\n                }\n            }\n            if (field != null) {\n                type = field.getType();\n            }\n        }\n        return type;\n    }\n\n    private java.util.List<java.lang.Class<?>> getInheritance(java.lang.Class<?> declaringClass) {\n        java.util.List<java.lang.Class<?>> list = new java.util.ArrayList<java.lang.Class<?>>();\n        java.lang.Class<?> aux = declaringClass;\n        while (aux != null) {\n            list.add(aux);\n            aux = aux.getSuperclass();\n        } \n        return list;\n    }\n\n    private java.lang.Class<?> getContainingType(net.sourceforge.pmd.lang.ast.Node node) {\n        net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration astClass = node.getFirstParentOfType(net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration.class);\n        if (astClass != null) {\n            return astClass.getType();\n        }\n        return null;\n    }\n\n    private boolean analyzeVariable(java.util.List<net.sourceforge.pmd.lang.java.ast.ASTName> listOfAstNames) {\n        for (net.sourceforge.pmd.lang.java.ast.ASTName name : listOfAstNames) {\n            java.lang.String var = getVarName(name);\n            if (isTaintedVariable(var) || isSource(getType(name), var)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private boolean isField(net.sourceforge.pmd.lang.java.ast.ASTName name) {\n        net.sourceforge.pmd.lang.symboltable.NameDeclaration declaration = name.getNameDeclaration();\n        return (declaration != null) && (!declaration.getNode().getParentsOfType(net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.class).isEmpty());\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (isSanitized(argListNode)) {\n    return false;\n}",
            "src_parent": "{\n    if (isSanitized(argListNode)) {\n        return false;\n    }\n    int numChildren = argListNode.jjtGetNumChildren();\n    for (int i = 0; i < numChildren; i++) {\n        net.sourceforge.pmd.lang.ast.Node argument = argListNode.jjtGetChild(i);\n        if (isTainted(argument)) {\n            return true;\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "DfaSecurityRule"
    }
  ],
  "id": "bears_194"
}