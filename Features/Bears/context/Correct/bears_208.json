{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "private static final java.util.regex.Pattern EPOCH_EQUIVALENT_TIMESTAMP = java.util.regex.Pattern.compile(\"(\\\\d{4}-\\\\d{2}-00|\\\\d{4}-00-\\\\d{2}|0000-\\\\d{2}-\\\\d{2}) (00:00:00(\\\\.\\\\d{1,6})?)\");",
            "dst_parent": "@io.debezium.annotation.Immutable\npublic class MySqlDefaultValuePreConverter {\n    private static final java.util.regex.Pattern EPOCH_EQUIVALENT_TIMESTAMP = java.util.regex.Pattern.compile(\"(\\\\d{4}-\\\\d{2}-00|\\\\d{4}-00-\\\\d{2}|0000-\\\\d{2}-\\\\d{2}) (00:00:00(\\\\.\\\\d{1,6})?)\");\n\n    private static final java.util.regex.Pattern EPOCH_EQUIVALENT_DATE = java.util.regex.Pattern.compile(\"\\\\d{4}-\\\\d{2}-00|\\\\d{4}-00-\\\\d{2}|0000-\\\\d{2}-\\\\d{2}\");\n\n    private static final java.lang.String EPOCH_TIMESTAMP = \"1970-01-01 00:00:00\";\n\n    private static final java.lang.String EPOCH_DATE = \"1970-01-01\";\n\n    public java.lang.Object convert(io.debezium.relational.Column column, java.lang.String value) {\n        if (value == null) {\n            return value;\n        }\n        switch (column.jdbcType()) {\n            case java.sql.Types.DATE :\n                return convertToLocalDate(column, value);\n            case java.sql.Types.TIMESTAMP :\n                return convertToLocalDateTime(column, value);\n            case java.sql.Types.TIMESTAMP_WITH_TIMEZONE :\n                return convertToTimestamp(column, value);\n            case java.sql.Types.TIME :\n                return convertToDuration(column, value);\n            case java.sql.Types.BOOLEAN :\n                return convertToBoolean(value);\n            case java.sql.Types.BIT :\n                return convertToBits(column, value);\n            case java.sql.Types.TINYINT :\n            case java.sql.Types.SMALLINT :\n                return convertToSmallInt(value);\n            case java.sql.Types.NUMERIC :\n            case java.sql.Types.DECIMAL :\n                return convertToDecimal(value);\n            case java.sql.Types.FLOAT :\n            case java.sql.Types.DOUBLE :\n            case java.sql.Types.REAL :\n                return convertToDouble(value);\n            case java.sql.Types.BIGINT :\n                return convertToBigInt(value);\n            case java.sql.Types.INTEGER :\n                return convertToInteger(value);\n        }\n        return value;\n    }\n\n    private java.lang.Object convertToLocalDate(io.debezium.relational.Column column, java.lang.String value) {\n        final boolean zero = io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_EQUIVALENT_DATE.matcher(value).matches() || \"0\".equals(value);\n        if (zero && column.isOptional()) {\n            return null;\n        }\n        if (zero) {\n            value = io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_DATE;\n        }\n        return java.time.LocalDate.from(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE.parse(value));\n    }\n\n    private java.lang.Object convertToLocalDateTime(io.debezium.relational.Column column, java.lang.String value) {\n        final boolean matches = io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_EQUIVALENT_TIMESTAMP.matcher(value).matches() || \"0\".equals(value);\n        if (matches) {\n            if (column.isOptional()) {\n                return null;\n            }\n            value = io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_TIMESTAMP;\n        }\n        return java.time.LocalDateTime.from(timestampFormat(column.length()).parse(value));\n    }\n\n    private java.lang.Object convertToTimestamp(io.debezium.relational.Column column, java.lang.String value) {\n        final boolean matches = (io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_EQUIVALENT_TIMESTAMP.matcher(value).matches() || \"0\".equals(value)) || io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_TIMESTAMP.equals(value);\n        if (matches) {\n            if (column.isOptional()) {\n                return null;\n            }\n            return java.sql.Timestamp.from(java.time.Instant.EPOCH);\n        }\n        return java.sql.Timestamp.valueOf(value).toInstant().atZone(java.time.ZoneId.systemDefault());\n    }\n\n    private java.lang.Object convertToDuration(io.debezium.relational.Column column, java.lang.String value) {\n        return java.time.Duration.between(java.time.LocalTime.MIN, java.time.LocalTime.from(timeFormat(column.length()).parse(value)));\n    }\n\n    private java.lang.Object convertToInteger(java.lang.String value) {\n        return java.lang.Integer.parseInt(value);\n    }\n\n    private java.lang.Object convertToBigInt(java.lang.String value) {\n        return java.lang.Long.valueOf(value);\n    }\n\n    private java.lang.Object convertToDouble(java.lang.String value) {\n        return java.lang.Double.parseDouble(value);\n    }\n\n    private java.lang.Object convertToDecimal(java.lang.String value) {\n        return new java.math.BigDecimal(value);\n    }\n\n    private java.lang.Object convertToBits(io.debezium.relational.Column column, java.lang.String value) {\n        if (column.length() > 1) {\n            return convertToBits(value);\n        }\n        return convertToBit(value);\n    }\n\n    private java.lang.Object convertToBit(java.lang.String value) {\n        try {\n            return java.lang.Short.parseShort(value) != 0;\n        } catch (java.lang.NumberFormatException ignore) {\n            return java.lang.Boolean.parseBoolean(value);\n        }\n    }\n\n    private java.lang.Object convertToBits(java.lang.String value) {\n        int nums = (value.length() / java.lang.Byte.SIZE) + ((value.length() % java.lang.Byte.SIZE) == 0 ? 0 : 1);\n        byte[] bytes = new byte[nums];\n        for (int i = 0; i < nums; i++) {\n            int s = ((value.length() - java.lang.Byte.SIZE) < 0) ? 0 : value.length() - java.lang.Byte.SIZE;\n            int e = value.length();\n            bytes[(nums - i) - 1] = java.lang.Byte.parseByte(value.substring(s, e), 2);\n            value = value.substring(0, s);\n        }\n        return bytes;\n    }\n\n    private java.lang.Object convertToSmallInt(java.lang.String value) {\n        return java.lang.Short.parseShort(value);\n    }\n\n    private java.lang.Object convertToBoolean(java.lang.String value) {\n        try {\n            return java.lang.Integer.parseInt(value) != 0;\n        } catch (java.lang.NumberFormatException ignore) {\n            return java.lang.Boolean.parseBoolean(value);\n        }\n    }\n\n    private java.time.format.DateTimeFormatter timeFormat(int length) {\n        final java.time.format.DateTimeFormatterBuilder dtf = new java.time.format.DateTimeFormatterBuilder().appendPattern(\"HH:mm:ss\");\n        if (length != (-1)) {\n            dtf.appendFraction(java.time.temporal.ChronoField.MICRO_OF_SECOND, 0, length, true);\n        }\n        return dtf.toFormatter();\n    }\n\n    private java.time.format.DateTimeFormatter timestampFormat(int length) {\n        final java.time.format.DateTimeFormatterBuilder dtf = new java.time.format.DateTimeFormatterBuilder().appendPattern(\"yyyy-MM-dd HH:mm:ss\");\n        if (length != (-1)) {\n            dtf.appendFraction(java.time.temporal.ChronoField.MICRO_OF_SECOND, 0, length, true);\n        }\n        return dtf.toFormatter();\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Field",
            "operator": "UPD",
            "src": "private static final java.util.regex.Pattern ALL_ZERO_TIMESTAMP = java.util.regex.Pattern.compile(\"0000-00-00 00:00:00(\\\\.\\\\d{1,6})?\");",
            "src_parent": "@io.debezium.annotation.Immutable\npublic class MySqlDefaultValuePreConverter {\n    private static final java.util.regex.Pattern ALL_ZERO_TIMESTAMP = java.util.regex.Pattern.compile(\"0000-00-00 00:00:00(\\\\.\\\\d{1,6})?\");\n\n    private static final java.lang.String ALL_ZERO_DATE = \"0000-00-00\";\n\n    private static final java.lang.String EPOCH_TIMESTAMP = \"1970-01-01 00:00:00\";\n\n    private static final java.lang.String EPOCH_DATE = \"1970-01-01\";\n\n    public java.lang.Object convert(io.debezium.relational.Column column, java.lang.String value) {\n        if (value == null) {\n            return value;\n        }\n        switch (column.jdbcType()) {\n            case java.sql.Types.DATE :\n                return convertToLocalDate(column, value);\n            case java.sql.Types.TIMESTAMP :\n                return convertToLocalDateTime(column, value);\n            case java.sql.Types.TIMESTAMP_WITH_TIMEZONE :\n                return convertToTimestamp(column, value);\n            case java.sql.Types.TIME :\n                return convertToDuration(column, value);\n            case java.sql.Types.BOOLEAN :\n                return convertToBoolean(value);\n            case java.sql.Types.BIT :\n                return convertToBits(column, value);\n            case java.sql.Types.TINYINT :\n            case java.sql.Types.SMALLINT :\n                return convertToSmallInt(value);\n            case java.sql.Types.NUMERIC :\n            case java.sql.Types.DECIMAL :\n                return convertToDecimal(value);\n            case java.sql.Types.FLOAT :\n            case java.sql.Types.DOUBLE :\n            case java.sql.Types.REAL :\n                return convertToDouble(value);\n            case java.sql.Types.BIGINT :\n                return convertToBigInt(value);\n            case java.sql.Types.INTEGER :\n                return convertToInteger(value);\n        }\n        return value;\n    }\n\n    private java.lang.Object convertToLocalDate(io.debezium.relational.Column column, java.lang.String value) {\n        final boolean zero = io.debezium.connector.mysql.MySqlDefaultValuePreConverter.ALL_ZERO_DATE.equals(value) || \"0\".equals(value);\n        if (zero && column.isOptional()) {\n            return null;\n        }\n        if (zero) {\n            value = io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_DATE;\n        }\n        return java.time.LocalDate.from(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE.parse(value));\n    }\n\n    private java.lang.Object convertToLocalDateTime(io.debezium.relational.Column column, java.lang.String value) {\n        final boolean matches = io.debezium.connector.mysql.MySqlDefaultValuePreConverter.ALL_ZERO_TIMESTAMP.matcher(value).matches() || \"0\".equals(value);\n        if (matches) {\n            if (column.isOptional()) {\n                return null;\n            }\n            value = io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_TIMESTAMP;\n        }\n        return java.time.LocalDateTime.from(timestampFormat(column.length()).parse(value));\n    }\n\n    private java.lang.Object convertToTimestamp(io.debezium.relational.Column column, java.lang.String value) {\n        final boolean matches = (io.debezium.connector.mysql.MySqlDefaultValuePreConverter.ALL_ZERO_TIMESTAMP.matcher(value).matches() || \"0\".equals(value)) || io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_TIMESTAMP.equals(value);\n        if (matches) {\n            if (column.isOptional()) {\n                return null;\n            }\n            return java.sql.Timestamp.from(java.time.Instant.EPOCH);\n        }\n        return java.sql.Timestamp.valueOf(value).toInstant().atZone(java.time.ZoneId.systemDefault());\n    }\n\n    private java.lang.Object convertToDuration(io.debezium.relational.Column column, java.lang.String value) {\n        return java.time.Duration.between(java.time.LocalTime.MIN, java.time.LocalTime.from(timeFormat(column.length()).parse(value)));\n    }\n\n    private java.lang.Object convertToInteger(java.lang.String value) {\n        return java.lang.Integer.parseInt(value);\n    }\n\n    private java.lang.Object convertToBigInt(java.lang.String value) {\n        return java.lang.Long.valueOf(value);\n    }\n\n    private java.lang.Object convertToDouble(java.lang.String value) {\n        return java.lang.Double.parseDouble(value);\n    }\n\n    private java.lang.Object convertToDecimal(java.lang.String value) {\n        return new java.math.BigDecimal(value);\n    }\n\n    private java.lang.Object convertToBits(io.debezium.relational.Column column, java.lang.String value) {\n        if (column.length() > 1) {\n            return convertToBits(value);\n        }\n        return convertToBit(value);\n    }\n\n    private java.lang.Object convertToBit(java.lang.String value) {\n        try {\n            return java.lang.Short.parseShort(value) != 0;\n        } catch (java.lang.NumberFormatException ignore) {\n            return java.lang.Boolean.parseBoolean(value);\n        }\n    }\n\n    private java.lang.Object convertToBits(java.lang.String value) {\n        int nums = (value.length() / java.lang.Byte.SIZE) + ((value.length() % java.lang.Byte.SIZE) == 0 ? 0 : 1);\n        byte[] bytes = new byte[nums];\n        for (int i = 0; i < nums; i++) {\n            int s = ((value.length() - java.lang.Byte.SIZE) < 0) ? 0 : value.length() - java.lang.Byte.SIZE;\n            int e = value.length();\n            bytes[(nums - i) - 1] = java.lang.Byte.parseByte(value.substring(s, e), 2);\n            value = value.substring(0, s);\n        }\n        return bytes;\n    }\n\n    private java.lang.Object convertToSmallInt(java.lang.String value) {\n        return java.lang.Short.parseShort(value);\n    }\n\n    private java.lang.Object convertToBoolean(java.lang.String value) {\n        try {\n            return java.lang.Integer.parseInt(value) != 0;\n        } catch (java.lang.NumberFormatException ignore) {\n            return java.lang.Boolean.parseBoolean(value);\n        }\n    }\n\n    private java.time.format.DateTimeFormatter timeFormat(int length) {\n        final java.time.format.DateTimeFormatterBuilder dtf = new java.time.format.DateTimeFormatterBuilder().appendPattern(\"HH:mm:ss\");\n        if (length != (-1)) {\n            dtf.appendFraction(java.time.temporal.ChronoField.MICRO_OF_SECOND, 0, length, true);\n        }\n        return dtf.toFormatter();\n    }\n\n    private java.time.format.DateTimeFormatter timestampFormat(int length) {\n        final java.time.format.DateTimeFormatterBuilder dtf = new java.time.format.DateTimeFormatterBuilder().appendPattern(\"yyyy-MM-dd HH:mm:ss\");\n        if (length != (-1)) {\n            dtf.appendFraction(java.time.temporal.ChronoField.MICRO_OF_SECOND, 0, length, true);\n        }\n        return dtf.toFormatter();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "private static final java.util.regex.Pattern EPOCH_EQUIVALENT_DATE = java.util.regex.Pattern.compile(\"\\\\d{4}-\\\\d{2}-00|\\\\d{4}-00-\\\\d{2}|0000-\\\\d{2}-\\\\d{2}\");",
            "dst_parent": "@io.debezium.annotation.Immutable\npublic class MySqlDefaultValuePreConverter {\n    private static final java.util.regex.Pattern EPOCH_EQUIVALENT_TIMESTAMP = java.util.regex.Pattern.compile(\"(\\\\d{4}-\\\\d{2}-00|\\\\d{4}-00-\\\\d{2}|0000-\\\\d{2}-\\\\d{2}) (00:00:00(\\\\.\\\\d{1,6})?)\");\n\n    private static final java.util.regex.Pattern EPOCH_EQUIVALENT_DATE = java.util.regex.Pattern.compile(\"\\\\d{4}-\\\\d{2}-00|\\\\d{4}-00-\\\\d{2}|0000-\\\\d{2}-\\\\d{2}\");\n\n    private static final java.lang.String EPOCH_TIMESTAMP = \"1970-01-01 00:00:00\";\n\n    private static final java.lang.String EPOCH_DATE = \"1970-01-01\";\n\n    public java.lang.Object convert(io.debezium.relational.Column column, java.lang.String value) {\n        if (value == null) {\n            return value;\n        }\n        switch (column.jdbcType()) {\n            case java.sql.Types.DATE :\n                return convertToLocalDate(column, value);\n            case java.sql.Types.TIMESTAMP :\n                return convertToLocalDateTime(column, value);\n            case java.sql.Types.TIMESTAMP_WITH_TIMEZONE :\n                return convertToTimestamp(column, value);\n            case java.sql.Types.TIME :\n                return convertToDuration(column, value);\n            case java.sql.Types.BOOLEAN :\n                return convertToBoolean(value);\n            case java.sql.Types.BIT :\n                return convertToBits(column, value);\n            case java.sql.Types.TINYINT :\n            case java.sql.Types.SMALLINT :\n                return convertToSmallInt(value);\n            case java.sql.Types.NUMERIC :\n            case java.sql.Types.DECIMAL :\n                return convertToDecimal(value);\n            case java.sql.Types.FLOAT :\n            case java.sql.Types.DOUBLE :\n            case java.sql.Types.REAL :\n                return convertToDouble(value);\n            case java.sql.Types.BIGINT :\n                return convertToBigInt(value);\n            case java.sql.Types.INTEGER :\n                return convertToInteger(value);\n        }\n        return value;\n    }\n\n    private java.lang.Object convertToLocalDate(io.debezium.relational.Column column, java.lang.String value) {\n        final boolean zero = io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_EQUIVALENT_DATE.matcher(value).matches() || \"0\".equals(value);\n        if (zero && column.isOptional()) {\n            return null;\n        }\n        if (zero) {\n            value = io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_DATE;\n        }\n        return java.time.LocalDate.from(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE.parse(value));\n    }\n\n    private java.lang.Object convertToLocalDateTime(io.debezium.relational.Column column, java.lang.String value) {\n        final boolean matches = io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_EQUIVALENT_TIMESTAMP.matcher(value).matches() || \"0\".equals(value);\n        if (matches) {\n            if (column.isOptional()) {\n                return null;\n            }\n            value = io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_TIMESTAMP;\n        }\n        return java.time.LocalDateTime.from(timestampFormat(column.length()).parse(value));\n    }\n\n    private java.lang.Object convertToTimestamp(io.debezium.relational.Column column, java.lang.String value) {\n        final boolean matches = (io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_EQUIVALENT_TIMESTAMP.matcher(value).matches() || \"0\".equals(value)) || io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_TIMESTAMP.equals(value);\n        if (matches) {\n            if (column.isOptional()) {\n                return null;\n            }\n            return java.sql.Timestamp.from(java.time.Instant.EPOCH);\n        }\n        return java.sql.Timestamp.valueOf(value).toInstant().atZone(java.time.ZoneId.systemDefault());\n    }\n\n    private java.lang.Object convertToDuration(io.debezium.relational.Column column, java.lang.String value) {\n        return java.time.Duration.between(java.time.LocalTime.MIN, java.time.LocalTime.from(timeFormat(column.length()).parse(value)));\n    }\n\n    private java.lang.Object convertToInteger(java.lang.String value) {\n        return java.lang.Integer.parseInt(value);\n    }\n\n    private java.lang.Object convertToBigInt(java.lang.String value) {\n        return java.lang.Long.valueOf(value);\n    }\n\n    private java.lang.Object convertToDouble(java.lang.String value) {\n        return java.lang.Double.parseDouble(value);\n    }\n\n    private java.lang.Object convertToDecimal(java.lang.String value) {\n        return new java.math.BigDecimal(value);\n    }\n\n    private java.lang.Object convertToBits(io.debezium.relational.Column column, java.lang.String value) {\n        if (column.length() > 1) {\n            return convertToBits(value);\n        }\n        return convertToBit(value);\n    }\n\n    private java.lang.Object convertToBit(java.lang.String value) {\n        try {\n            return java.lang.Short.parseShort(value) != 0;\n        } catch (java.lang.NumberFormatException ignore) {\n            return java.lang.Boolean.parseBoolean(value);\n        }\n    }\n\n    private java.lang.Object convertToBits(java.lang.String value) {\n        int nums = (value.length() / java.lang.Byte.SIZE) + ((value.length() % java.lang.Byte.SIZE) == 0 ? 0 : 1);\n        byte[] bytes = new byte[nums];\n        for (int i = 0; i < nums; i++) {\n            int s = ((value.length() - java.lang.Byte.SIZE) < 0) ? 0 : value.length() - java.lang.Byte.SIZE;\n            int e = value.length();\n            bytes[(nums - i) - 1] = java.lang.Byte.parseByte(value.substring(s, e), 2);\n            value = value.substring(0, s);\n        }\n        return bytes;\n    }\n\n    private java.lang.Object convertToSmallInt(java.lang.String value) {\n        return java.lang.Short.parseShort(value);\n    }\n\n    private java.lang.Object convertToBoolean(java.lang.String value) {\n        try {\n            return java.lang.Integer.parseInt(value) != 0;\n        } catch (java.lang.NumberFormatException ignore) {\n            return java.lang.Boolean.parseBoolean(value);\n        }\n    }\n\n    private java.time.format.DateTimeFormatter timeFormat(int length) {\n        final java.time.format.DateTimeFormatterBuilder dtf = new java.time.format.DateTimeFormatterBuilder().appendPattern(\"HH:mm:ss\");\n        if (length != (-1)) {\n            dtf.appendFraction(java.time.temporal.ChronoField.MICRO_OF_SECOND, 0, length, true);\n        }\n        return dtf.toFormatter();\n    }\n\n    private java.time.format.DateTimeFormatter timestampFormat(int length) {\n        final java.time.format.DateTimeFormatterBuilder dtf = new java.time.format.DateTimeFormatterBuilder().appendPattern(\"yyyy-MM-dd HH:mm:ss\");\n        if (length != (-1)) {\n            dtf.appendFraction(java.time.temporal.ChronoField.MICRO_OF_SECOND, 0, length, true);\n        }\n        return dtf.toFormatter();\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Field",
            "operator": "UPD",
            "src": "private static final java.lang.String ALL_ZERO_DATE = \"0000-00-00\";",
            "src_parent": "@io.debezium.annotation.Immutable\npublic class MySqlDefaultValuePreConverter {\n    private static final java.util.regex.Pattern ALL_ZERO_TIMESTAMP = java.util.regex.Pattern.compile(\"0000-00-00 00:00:00(\\\\.\\\\d{1,6})?\");\n\n    private static final java.lang.String ALL_ZERO_DATE = \"0000-00-00\";\n\n    private static final java.lang.String EPOCH_TIMESTAMP = \"1970-01-01 00:00:00\";\n\n    private static final java.lang.String EPOCH_DATE = \"1970-01-01\";\n\n    public java.lang.Object convert(io.debezium.relational.Column column, java.lang.String value) {\n        if (value == null) {\n            return value;\n        }\n        switch (column.jdbcType()) {\n            case java.sql.Types.DATE :\n                return convertToLocalDate(column, value);\n            case java.sql.Types.TIMESTAMP :\n                return convertToLocalDateTime(column, value);\n            case java.sql.Types.TIMESTAMP_WITH_TIMEZONE :\n                return convertToTimestamp(column, value);\n            case java.sql.Types.TIME :\n                return convertToDuration(column, value);\n            case java.sql.Types.BOOLEAN :\n                return convertToBoolean(value);\n            case java.sql.Types.BIT :\n                return convertToBits(column, value);\n            case java.sql.Types.TINYINT :\n            case java.sql.Types.SMALLINT :\n                return convertToSmallInt(value);\n            case java.sql.Types.NUMERIC :\n            case java.sql.Types.DECIMAL :\n                return convertToDecimal(value);\n            case java.sql.Types.FLOAT :\n            case java.sql.Types.DOUBLE :\n            case java.sql.Types.REAL :\n                return convertToDouble(value);\n            case java.sql.Types.BIGINT :\n                return convertToBigInt(value);\n            case java.sql.Types.INTEGER :\n                return convertToInteger(value);\n        }\n        return value;\n    }\n\n    private java.lang.Object convertToLocalDate(io.debezium.relational.Column column, java.lang.String value) {\n        final boolean zero = io.debezium.connector.mysql.MySqlDefaultValuePreConverter.ALL_ZERO_DATE.equals(value) || \"0\".equals(value);\n        if (zero && column.isOptional()) {\n            return null;\n        }\n        if (zero) {\n            value = io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_DATE;\n        }\n        return java.time.LocalDate.from(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE.parse(value));\n    }\n\n    private java.lang.Object convertToLocalDateTime(io.debezium.relational.Column column, java.lang.String value) {\n        final boolean matches = io.debezium.connector.mysql.MySqlDefaultValuePreConverter.ALL_ZERO_TIMESTAMP.matcher(value).matches() || \"0\".equals(value);\n        if (matches) {\n            if (column.isOptional()) {\n                return null;\n            }\n            value = io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_TIMESTAMP;\n        }\n        return java.time.LocalDateTime.from(timestampFormat(column.length()).parse(value));\n    }\n\n    private java.lang.Object convertToTimestamp(io.debezium.relational.Column column, java.lang.String value) {\n        final boolean matches = (io.debezium.connector.mysql.MySqlDefaultValuePreConverter.ALL_ZERO_TIMESTAMP.matcher(value).matches() || \"0\".equals(value)) || io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_TIMESTAMP.equals(value);\n        if (matches) {\n            if (column.isOptional()) {\n                return null;\n            }\n            return java.sql.Timestamp.from(java.time.Instant.EPOCH);\n        }\n        return java.sql.Timestamp.valueOf(value).toInstant().atZone(java.time.ZoneId.systemDefault());\n    }\n\n    private java.lang.Object convertToDuration(io.debezium.relational.Column column, java.lang.String value) {\n        return java.time.Duration.between(java.time.LocalTime.MIN, java.time.LocalTime.from(timeFormat(column.length()).parse(value)));\n    }\n\n    private java.lang.Object convertToInteger(java.lang.String value) {\n        return java.lang.Integer.parseInt(value);\n    }\n\n    private java.lang.Object convertToBigInt(java.lang.String value) {\n        return java.lang.Long.valueOf(value);\n    }\n\n    private java.lang.Object convertToDouble(java.lang.String value) {\n        return java.lang.Double.parseDouble(value);\n    }\n\n    private java.lang.Object convertToDecimal(java.lang.String value) {\n        return new java.math.BigDecimal(value);\n    }\n\n    private java.lang.Object convertToBits(io.debezium.relational.Column column, java.lang.String value) {\n        if (column.length() > 1) {\n            return convertToBits(value);\n        }\n        return convertToBit(value);\n    }\n\n    private java.lang.Object convertToBit(java.lang.String value) {\n        try {\n            return java.lang.Short.parseShort(value) != 0;\n        } catch (java.lang.NumberFormatException ignore) {\n            return java.lang.Boolean.parseBoolean(value);\n        }\n    }\n\n    private java.lang.Object convertToBits(java.lang.String value) {\n        int nums = (value.length() / java.lang.Byte.SIZE) + ((value.length() % java.lang.Byte.SIZE) == 0 ? 0 : 1);\n        byte[] bytes = new byte[nums];\n        for (int i = 0; i < nums; i++) {\n            int s = ((value.length() - java.lang.Byte.SIZE) < 0) ? 0 : value.length() - java.lang.Byte.SIZE;\n            int e = value.length();\n            bytes[(nums - i) - 1] = java.lang.Byte.parseByte(value.substring(s, e), 2);\n            value = value.substring(0, s);\n        }\n        return bytes;\n    }\n\n    private java.lang.Object convertToSmallInt(java.lang.String value) {\n        return java.lang.Short.parseShort(value);\n    }\n\n    private java.lang.Object convertToBoolean(java.lang.String value) {\n        try {\n            return java.lang.Integer.parseInt(value) != 0;\n        } catch (java.lang.NumberFormatException ignore) {\n            return java.lang.Boolean.parseBoolean(value);\n        }\n    }\n\n    private java.time.format.DateTimeFormatter timeFormat(int length) {\n        final java.time.format.DateTimeFormatterBuilder dtf = new java.time.format.DateTimeFormatterBuilder().appendPattern(\"HH:mm:ss\");\n        if (length != (-1)) {\n            dtf.appendFraction(java.time.temporal.ChronoField.MICRO_OF_SECOND, 0, length, true);\n        }\n        return dtf.toFormatter();\n    }\n\n    private java.time.format.DateTimeFormatter timestampFormat(int length) {\n        final java.time.format.DateTimeFormatterBuilder dtf = new java.time.format.DateTimeFormatterBuilder().appendPattern(\"yyyy-MM-dd HH:mm:ss\");\n        if (length != (-1)) {\n            dtf.appendFraction(java.time.temporal.ChronoField.MICRO_OF_SECOND, 0, length, true);\n        }\n        return dtf.toFormatter();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Field",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.regex.Pattern",
            "dst_parent": "private static final java.util.regex.Pattern EPOCH_EQUIVALENT_DATE = java.util.regex.Pattern.compile(\"\\\\d{4}-\\\\d{2}-00|\\\\d{4}-00-\\\\d{2}|0000-\\\\d{2}-\\\\d{2}\");",
            "dst_parent_type": "Field",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.lang.String",
            "src_parent": "private static final java.lang.String ALL_ZERO_DATE = \"0000-00-00\";",
            "src_parent_type": "Field",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Invocation",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Literal",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "\"(\\\\d{4}-\\\\d{2}-00|\\\\d{4}-00-\\\\d{2}|0000-\\\\d{2}-\\\\d{2}) (00:00:00(\\\\.\\\\d{1,6})?)\"",
            "dst_parent": "java.util.regex.Pattern.compile(\"(\\\\d{4}-\\\\d{2}-00|\\\\d{4}-00-\\\\d{2}|0000-\\\\d{2}-\\\\d{2}) (00:00:00(\\\\.\\\\d{1,6})?)\")",
            "dst_parent_type": "Invocation",
            "dst_type": "Literal",
            "operator": "UPD",
            "src": "\"0000-00-00 00:00:00(\\\\.\\\\d{1,6})?\"",
            "src_parent": "java.util.regex.Pattern.compile(\"0000-00-00 00:00:00(\\\\.\\\\d{1,6})?\")",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_EQUIVALENT_DATE.matcher(value).matches()",
            "dst_parent": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_EQUIVALENT_DATE.matcher(value).matches() || \"0\".equals(value)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.ALL_ZERO_DATE.equals(value)",
            "src_parent": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.ALL_ZERO_DATE.equals(value) || \"0\".equals(value)",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_EQUIVALENT_DATE",
            "dst_parent": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_EQUIVALENT_DATE.matcher(value)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "UPD",
            "src": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.ALL_ZERO_DATE",
            "src_parent": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.ALL_ZERO_DATE.equals(value)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_EQUIVALENT_TIMESTAMP",
            "dst_parent": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_EQUIVALENT_TIMESTAMP.matcher(value)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "UPD",
            "src": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.ALL_ZERO_TIMESTAMP",
            "src_parent": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.ALL_ZERO_TIMESTAMP.matcher(value)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_EQUIVALENT_TIMESTAMP",
            "dst_parent": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_EQUIVALENT_TIMESTAMP.matcher(value)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "UPD",
            "src": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.ALL_ZERO_TIMESTAMP",
            "src_parent": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.ALL_ZERO_TIMESTAMP.matcher(value)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_EQUIVALENT_DATE",
            "dst_parent": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_EQUIVALENT_DATE.matcher(value)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.ALL_ZERO_DATE",
            "src_parent": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.ALL_ZERO_DATE.equals(value)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "value",
            "dst_parent": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.EPOCH_EQUIVALENT_DATE.matcher(value)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "value",
            "src_parent": "io.debezium.connector.mysql.MySqlDefaultValuePreConverter.ALL_ZERO_DATE.equals(value)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        }
      ],
      "file_name": "MySqlDefaultValuePreConverter"
    }
  ],
  "id": "bears_208"
}