{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "final spoon.reflect.declaration.CtExecutable executable = ((spoon.reflect.declaration.CtExecutable) (variable.getParent()))",
            "dst_parent": "{\n    final spoon.reflect.declaration.CtExecutable executable = ((spoon.reflect.declaration.CtExecutable) (variable.getParent()));\n    final java.util.List<spoon.reflect.reference.CtTypeReference<?>> parameterTypesOfExecutable = new java.util.ArrayList<>();\n    @java.lang.SuppressWarnings(\"unchecked\")\n    final java.util.List<spoon.reflect.declaration.CtParameter<?>> parametersOfExecutable = executable.getParameters();\n    for (spoon.reflect.declaration.CtParameter<?> parameter : parametersOfExecutable) {\n        if (parameter.getType() != null) {\n            parameterTypesOfExecutable.add(parameter.getType().clone());\n        } else {\n            parameterTypesOfExecutable.add(typeFactory.OBJECT);\n        }\n    }\n    org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration executableJDT = null;\n    for (final spoon.support.compiler.jdt.ASTPair astPair : contextBuilder.stack) {\n        if (astPair.element == executable) {\n            executableJDT = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (astPair.node));\n        }\n    }\n    assert executableJDT != null;\n    final spoon.reflect.reference.CtTypeReference declaringReferenceOfExecutable = (executableJDT.binding == null) ? coreFactory.createTypeReference() : referenceBuilder.getTypeReference(executableJDT.binding.declaringClass);\n    spoon.reflect.reference.CtTypeReference executableTypeReference = (executable instanceof spoon.reflect.declaration.CtConstructor) ? declaringReferenceOfExecutable.clone() : executable.getType().clone();\n    @java.lang.SuppressWarnings(\"unchecked\")\n    final spoon.reflect.reference.CtExecutableReference executableReference = executableFactory.createReference(declaringReferenceOfExecutable, executableTypeReference, executable.getSimpleName(), parameterTypesOfExecutable);\n    parameterReference.setDeclaringExecutable(executableReference);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "UPD",
            "src": "final spoon.reflect.declaration.CtMethod method = ((spoon.reflect.declaration.CtMethod) (variable.getParent()))",
            "src_parent": "{\n    final spoon.reflect.declaration.CtMethod method = ((spoon.reflect.declaration.CtMethod) (variable.getParent()));\n    final java.util.List<spoon.reflect.reference.CtTypeReference<?>> parameterTypesOfMethod = new java.util.ArrayList<>();\n    final java.util.List<spoon.reflect.declaration.CtParameter<?>> parametersOfMethod = method.getParameters();\n    for (spoon.reflect.declaration.CtParameter<?> parameter : parametersOfMethod) {\n        if (parameter.getType() != null) {\n            parameterTypesOfMethod.add(parameter.getType().clone());\n        }\n    }\n    org.eclipse.jdt.internal.compiler.ast.MethodDeclaration methodJDT = null;\n    for (final spoon.support.compiler.jdt.ASTPair astPair : contextBuilder.stack) {\n        if (astPair.element == method) {\n            methodJDT = ((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (astPair.node));\n            break;\n        }\n    }\n    assert methodJDT != null;\n    final spoon.reflect.reference.CtTypeReference declaringReferenceOfMethod = (methodJDT.binding == null) ? coreFactory.createTypeReference() : referenceBuilder.getTypeReference(methodJDT.binding.declaringClass);\n    final spoon.reflect.reference.CtExecutableReference methodReference = executableFactory.createReference(declaringReferenceOfMethod, method.getType().clone(), method.getSimpleName(), parameterTypesOfMethod);\n    parameterReference.setDeclaringExecutable(methodReference);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "final java.util.List<spoon.reflect.reference.CtTypeReference<?>> parameterTypesOfExecutable = new java.util.ArrayList<>()",
            "dst_parent": "{\n    final spoon.reflect.declaration.CtExecutable executable = ((spoon.reflect.declaration.CtExecutable) (variable.getParent()));\n    final java.util.List<spoon.reflect.reference.CtTypeReference<?>> parameterTypesOfExecutable = new java.util.ArrayList<>();\n    @java.lang.SuppressWarnings(\"unchecked\")\n    final java.util.List<spoon.reflect.declaration.CtParameter<?>> parametersOfExecutable = executable.getParameters();\n    for (spoon.reflect.declaration.CtParameter<?> parameter : parametersOfExecutable) {\n        if (parameter.getType() != null) {\n            parameterTypesOfExecutable.add(parameter.getType().clone());\n        } else {\n            parameterTypesOfExecutable.add(typeFactory.OBJECT);\n        }\n    }\n    org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration executableJDT = null;\n    for (final spoon.support.compiler.jdt.ASTPair astPair : contextBuilder.stack) {\n        if (astPair.element == executable) {\n            executableJDT = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (astPair.node));\n        }\n    }\n    assert executableJDT != null;\n    final spoon.reflect.reference.CtTypeReference declaringReferenceOfExecutable = (executableJDT.binding == null) ? coreFactory.createTypeReference() : referenceBuilder.getTypeReference(executableJDT.binding.declaringClass);\n    spoon.reflect.reference.CtTypeReference executableTypeReference = (executable instanceof spoon.reflect.declaration.CtConstructor) ? declaringReferenceOfExecutable.clone() : executable.getType().clone();\n    @java.lang.SuppressWarnings(\"unchecked\")\n    final spoon.reflect.reference.CtExecutableReference executableReference = executableFactory.createReference(declaringReferenceOfExecutable, executableTypeReference, executable.getSimpleName(), parameterTypesOfExecutable);\n    parameterReference.setDeclaringExecutable(executableReference);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "UPD",
            "src": "final java.util.List<spoon.reflect.reference.CtTypeReference<?>> parameterTypesOfMethod = new java.util.ArrayList<>()",
            "src_parent": "{\n    final spoon.reflect.declaration.CtMethod method = ((spoon.reflect.declaration.CtMethod) (variable.getParent()));\n    final java.util.List<spoon.reflect.reference.CtTypeReference<?>> parameterTypesOfMethod = new java.util.ArrayList<>();\n    final java.util.List<spoon.reflect.declaration.CtParameter<?>> parametersOfMethod = method.getParameters();\n    for (spoon.reflect.declaration.CtParameter<?> parameter : parametersOfMethod) {\n        if (parameter.getType() != null) {\n            parameterTypesOfMethod.add(parameter.getType().clone());\n        }\n    }\n    org.eclipse.jdt.internal.compiler.ast.MethodDeclaration methodJDT = null;\n    for (final spoon.support.compiler.jdt.ASTPair astPair : contextBuilder.stack) {\n        if (astPair.element == method) {\n            methodJDT = ((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (astPair.node));\n            break;\n        }\n    }\n    assert methodJDT != null;\n    final spoon.reflect.reference.CtTypeReference declaringReferenceOfMethod = (methodJDT.binding == null) ? coreFactory.createTypeReference() : referenceBuilder.getTypeReference(methodJDT.binding.declaringClass);\n    final spoon.reflect.reference.CtExecutableReference methodReference = executableFactory.createReference(declaringReferenceOfMethod, method.getType().clone(), method.getSimpleName(), parameterTypesOfMethod);\n    parameterReference.setDeclaringExecutable(methodReference);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "@java.lang.SuppressWarnings(\"unchecked\")\nfinal java.util.List<spoon.reflect.declaration.CtParameter<?>> parametersOfExecutable = executable.getParameters()",
            "dst_parent": "{\n    final spoon.reflect.declaration.CtExecutable executable = ((spoon.reflect.declaration.CtExecutable) (variable.getParent()));\n    final java.util.List<spoon.reflect.reference.CtTypeReference<?>> parameterTypesOfExecutable = new java.util.ArrayList<>();\n    @java.lang.SuppressWarnings(\"unchecked\")\n    final java.util.List<spoon.reflect.declaration.CtParameter<?>> parametersOfExecutable = executable.getParameters();\n    for (spoon.reflect.declaration.CtParameter<?> parameter : parametersOfExecutable) {\n        if (parameter.getType() != null) {\n            parameterTypesOfExecutable.add(parameter.getType().clone());\n        } else {\n            parameterTypesOfExecutable.add(typeFactory.OBJECT);\n        }\n    }\n    org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration executableJDT = null;\n    for (final spoon.support.compiler.jdt.ASTPair astPair : contextBuilder.stack) {\n        if (astPair.element == executable) {\n            executableJDT = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (astPair.node));\n        }\n    }\n    assert executableJDT != null;\n    final spoon.reflect.reference.CtTypeReference declaringReferenceOfExecutable = (executableJDT.binding == null) ? coreFactory.createTypeReference() : referenceBuilder.getTypeReference(executableJDT.binding.declaringClass);\n    spoon.reflect.reference.CtTypeReference executableTypeReference = (executable instanceof spoon.reflect.declaration.CtConstructor) ? declaringReferenceOfExecutable.clone() : executable.getType().clone();\n    @java.lang.SuppressWarnings(\"unchecked\")\n    final spoon.reflect.reference.CtExecutableReference executableReference = executableFactory.createReference(declaringReferenceOfExecutable, executableTypeReference, executable.getSimpleName(), parameterTypesOfExecutable);\n    parameterReference.setDeclaringExecutable(executableReference);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "UPD",
            "src": "final java.util.List<spoon.reflect.declaration.CtParameter<?>> parametersOfMethod = method.getParameters()",
            "src_parent": "{\n    final spoon.reflect.declaration.CtMethod method = ((spoon.reflect.declaration.CtMethod) (variable.getParent()));\n    final java.util.List<spoon.reflect.reference.CtTypeReference<?>> parameterTypesOfMethod = new java.util.ArrayList<>();\n    final java.util.List<spoon.reflect.declaration.CtParameter<?>> parametersOfMethod = method.getParameters();\n    for (spoon.reflect.declaration.CtParameter<?> parameter : parametersOfMethod) {\n        if (parameter.getType() != null) {\n            parameterTypesOfMethod.add(parameter.getType().clone());\n        }\n    }\n    org.eclipse.jdt.internal.compiler.ast.MethodDeclaration methodJDT = null;\n    for (final spoon.support.compiler.jdt.ASTPair astPair : contextBuilder.stack) {\n        if (astPair.element == method) {\n            methodJDT = ((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (astPair.node));\n            break;\n        }\n    }\n    assert methodJDT != null;\n    final spoon.reflect.reference.CtTypeReference declaringReferenceOfMethod = (methodJDT.binding == null) ? coreFactory.createTypeReference() : referenceBuilder.getTypeReference(methodJDT.binding.declaringClass);\n    final spoon.reflect.reference.CtExecutableReference methodReference = executableFactory.createReference(declaringReferenceOfMethod, method.getType().clone(), method.getSimpleName(), parameterTypesOfMethod);\n    parameterReference.setDeclaringExecutable(methodReference);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration executableJDT = null",
            "dst_parent": "{\n    final spoon.reflect.declaration.CtExecutable executable = ((spoon.reflect.declaration.CtExecutable) (variable.getParent()));\n    final java.util.List<spoon.reflect.reference.CtTypeReference<?>> parameterTypesOfExecutable = new java.util.ArrayList<>();\n    @java.lang.SuppressWarnings(\"unchecked\")\n    final java.util.List<spoon.reflect.declaration.CtParameter<?>> parametersOfExecutable = executable.getParameters();\n    for (spoon.reflect.declaration.CtParameter<?> parameter : parametersOfExecutable) {\n        if (parameter.getType() != null) {\n            parameterTypesOfExecutable.add(parameter.getType().clone());\n        } else {\n            parameterTypesOfExecutable.add(typeFactory.OBJECT);\n        }\n    }\n    org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration executableJDT = null;\n    for (final spoon.support.compiler.jdt.ASTPair astPair : contextBuilder.stack) {\n        if (astPair.element == executable) {\n            executableJDT = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (astPair.node));\n        }\n    }\n    assert executableJDT != null;\n    final spoon.reflect.reference.CtTypeReference declaringReferenceOfExecutable = (executableJDT.binding == null) ? coreFactory.createTypeReference() : referenceBuilder.getTypeReference(executableJDT.binding.declaringClass);\n    spoon.reflect.reference.CtTypeReference executableTypeReference = (executable instanceof spoon.reflect.declaration.CtConstructor) ? declaringReferenceOfExecutable.clone() : executable.getType().clone();\n    @java.lang.SuppressWarnings(\"unchecked\")\n    final spoon.reflect.reference.CtExecutableReference executableReference = executableFactory.createReference(declaringReferenceOfExecutable, executableTypeReference, executable.getSimpleName(), parameterTypesOfExecutable);\n    parameterReference.setDeclaringExecutable(executableReference);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "UPD",
            "src": "org.eclipse.jdt.internal.compiler.ast.MethodDeclaration methodJDT = null",
            "src_parent": "{\n    final spoon.reflect.declaration.CtMethod method = ((spoon.reflect.declaration.CtMethod) (variable.getParent()));\n    final java.util.List<spoon.reflect.reference.CtTypeReference<?>> parameterTypesOfMethod = new java.util.ArrayList<>();\n    final java.util.List<spoon.reflect.declaration.CtParameter<?>> parametersOfMethod = method.getParameters();\n    for (spoon.reflect.declaration.CtParameter<?> parameter : parametersOfMethod) {\n        if (parameter.getType() != null) {\n            parameterTypesOfMethod.add(parameter.getType().clone());\n        }\n    }\n    org.eclipse.jdt.internal.compiler.ast.MethodDeclaration methodJDT = null;\n    for (final spoon.support.compiler.jdt.ASTPair astPair : contextBuilder.stack) {\n        if (astPair.element == method) {\n            methodJDT = ((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (astPair.node));\n            break;\n        }\n    }\n    assert methodJDT != null;\n    final spoon.reflect.reference.CtTypeReference declaringReferenceOfMethod = (methodJDT.binding == null) ? coreFactory.createTypeReference() : referenceBuilder.getTypeReference(methodJDT.binding.declaringClass);\n    final spoon.reflect.reference.CtExecutableReference methodReference = executableFactory.createReference(declaringReferenceOfMethod, method.getType().clone(), method.getSimpleName(), parameterTypesOfMethod);\n    parameterReference.setDeclaringExecutable(methodReference);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "final spoon.reflect.reference.CtTypeReference declaringReferenceOfExecutable = (executableJDT.binding == null) ? coreFactory.createTypeReference() : referenceBuilder.getTypeReference(executableJDT.binding.declaringClass)",
            "dst_parent": "{\n    final spoon.reflect.declaration.CtExecutable executable = ((spoon.reflect.declaration.CtExecutable) (variable.getParent()));\n    final java.util.List<spoon.reflect.reference.CtTypeReference<?>> parameterTypesOfExecutable = new java.util.ArrayList<>();\n    @java.lang.SuppressWarnings(\"unchecked\")\n    final java.util.List<spoon.reflect.declaration.CtParameter<?>> parametersOfExecutable = executable.getParameters();\n    for (spoon.reflect.declaration.CtParameter<?> parameter : parametersOfExecutable) {\n        if (parameter.getType() != null) {\n            parameterTypesOfExecutable.add(parameter.getType().clone());\n        } else {\n            parameterTypesOfExecutable.add(typeFactory.OBJECT);\n        }\n    }\n    org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration executableJDT = null;\n    for (final spoon.support.compiler.jdt.ASTPair astPair : contextBuilder.stack) {\n        if (astPair.element == executable) {\n            executableJDT = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (astPair.node));\n        }\n    }\n    assert executableJDT != null;\n    final spoon.reflect.reference.CtTypeReference declaringReferenceOfExecutable = (executableJDT.binding == null) ? coreFactory.createTypeReference() : referenceBuilder.getTypeReference(executableJDT.binding.declaringClass);\n    spoon.reflect.reference.CtTypeReference executableTypeReference = (executable instanceof spoon.reflect.declaration.CtConstructor) ? declaringReferenceOfExecutable.clone() : executable.getType().clone();\n    @java.lang.SuppressWarnings(\"unchecked\")\n    final spoon.reflect.reference.CtExecutableReference executableReference = executableFactory.createReference(declaringReferenceOfExecutable, executableTypeReference, executable.getSimpleName(), parameterTypesOfExecutable);\n    parameterReference.setDeclaringExecutable(executableReference);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "UPD",
            "src": "final spoon.reflect.reference.CtTypeReference declaringReferenceOfMethod = (methodJDT.binding == null) ? coreFactory.createTypeReference() : referenceBuilder.getTypeReference(methodJDT.binding.declaringClass)",
            "src_parent": "{\n    final spoon.reflect.declaration.CtMethod method = ((spoon.reflect.declaration.CtMethod) (variable.getParent()));\n    final java.util.List<spoon.reflect.reference.CtTypeReference<?>> parameterTypesOfMethod = new java.util.ArrayList<>();\n    final java.util.List<spoon.reflect.declaration.CtParameter<?>> parametersOfMethod = method.getParameters();\n    for (spoon.reflect.declaration.CtParameter<?> parameter : parametersOfMethod) {\n        if (parameter.getType() != null) {\n            parameterTypesOfMethod.add(parameter.getType().clone());\n        }\n    }\n    org.eclipse.jdt.internal.compiler.ast.MethodDeclaration methodJDT = null;\n    for (final spoon.support.compiler.jdt.ASTPair astPair : contextBuilder.stack) {\n        if (astPair.element == method) {\n            methodJDT = ((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (astPair.node));\n            break;\n        }\n    }\n    assert methodJDT != null;\n    final spoon.reflect.reference.CtTypeReference declaringReferenceOfMethod = (methodJDT.binding == null) ? coreFactory.createTypeReference() : referenceBuilder.getTypeReference(methodJDT.binding.declaringClass);\n    final spoon.reflect.reference.CtExecutableReference methodReference = executableFactory.createReference(declaringReferenceOfMethod, method.getType().clone(), method.getSimpleName(), parameterTypesOfMethod);\n    parameterReference.setDeclaringExecutable(methodReference);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "@java.lang.SuppressWarnings(\"unchecked\")\nfinal spoon.reflect.reference.CtExecutableReference executableReference = executableFactory.createReference(declaringReferenceOfExecutable, executableTypeReference, executable.getSimpleName(), parameterTypesOfExecutable)",
            "dst_parent": "{\n    final spoon.reflect.declaration.CtExecutable executable = ((spoon.reflect.declaration.CtExecutable) (variable.getParent()));\n    final java.util.List<spoon.reflect.reference.CtTypeReference<?>> parameterTypesOfExecutable = new java.util.ArrayList<>();\n    @java.lang.SuppressWarnings(\"unchecked\")\n    final java.util.List<spoon.reflect.declaration.CtParameter<?>> parametersOfExecutable = executable.getParameters();\n    for (spoon.reflect.declaration.CtParameter<?> parameter : parametersOfExecutable) {\n        if (parameter.getType() != null) {\n            parameterTypesOfExecutable.add(parameter.getType().clone());\n        } else {\n            parameterTypesOfExecutable.add(typeFactory.OBJECT);\n        }\n    }\n    org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration executableJDT = null;\n    for (final spoon.support.compiler.jdt.ASTPair astPair : contextBuilder.stack) {\n        if (astPair.element == executable) {\n            executableJDT = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (astPair.node));\n        }\n    }\n    assert executableJDT != null;\n    final spoon.reflect.reference.CtTypeReference declaringReferenceOfExecutable = (executableJDT.binding == null) ? coreFactory.createTypeReference() : referenceBuilder.getTypeReference(executableJDT.binding.declaringClass);\n    spoon.reflect.reference.CtTypeReference executableTypeReference = (executable instanceof spoon.reflect.declaration.CtConstructor) ? declaringReferenceOfExecutable.clone() : executable.getType().clone();\n    @java.lang.SuppressWarnings(\"unchecked\")\n    final spoon.reflect.reference.CtExecutableReference executableReference = executableFactory.createReference(declaringReferenceOfExecutable, executableTypeReference, executable.getSimpleName(), parameterTypesOfExecutable);\n    parameterReference.setDeclaringExecutable(executableReference);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "UPD",
            "src": "final spoon.reflect.reference.CtExecutableReference methodReference = executableFactory.createReference(declaringReferenceOfMethod, method.getType().clone(), method.getSimpleName(), parameterTypesOfMethod)",
            "src_parent": "{\n    final spoon.reflect.declaration.CtMethod method = ((spoon.reflect.declaration.CtMethod) (variable.getParent()));\n    final java.util.List<spoon.reflect.reference.CtTypeReference<?>> parameterTypesOfMethod = new java.util.ArrayList<>();\n    final java.util.List<spoon.reflect.declaration.CtParameter<?>> parametersOfMethod = method.getParameters();\n    for (spoon.reflect.declaration.CtParameter<?> parameter : parametersOfMethod) {\n        if (parameter.getType() != null) {\n            parameterTypesOfMethod.add(parameter.getType().clone());\n        }\n    }\n    org.eclipse.jdt.internal.compiler.ast.MethodDeclaration methodJDT = null;\n    for (final spoon.support.compiler.jdt.ASTPair astPair : contextBuilder.stack) {\n        if (astPair.element == method) {\n            methodJDT = ((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (astPair.node));\n            break;\n        }\n    }\n    assert methodJDT != null;\n    final spoon.reflect.reference.CtTypeReference declaringReferenceOfMethod = (methodJDT.binding == null) ? coreFactory.createTypeReference() : referenceBuilder.getTypeReference(methodJDT.binding.declaringClass);\n    final spoon.reflect.reference.CtExecutableReference methodReference = executableFactory.createReference(declaringReferenceOfMethod, method.getType().clone(), method.getSimpleName(), parameterTypesOfMethod);\n    parameterReference.setDeclaringExecutable(methodReference);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "spoon.reflect.declaration.CtExecutable",
            "dst_parent": "final spoon.reflect.declaration.CtExecutable executable = ((spoon.reflect.declaration.CtExecutable) (variable.getParent()))",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "spoon.reflect.declaration.CtMethod",
            "src_parent": "final spoon.reflect.declaration.CtMethod method = ((spoon.reflect.declaration.CtMethod) (variable.getParent()))",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assert",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "parametersOfExecutable",
            "dst_parent": "for (spoon.reflect.declaration.CtParameter<?> parameter : parametersOfExecutable) {\n    if (parameter.getType() != null) {\n        parameterTypesOfExecutable.add(parameter.getType().clone());\n    } else {\n        parameterTypesOfExecutable.add(typeFactory.OBJECT);\n    }\n}",
            "dst_parent_type": "ForEach",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "parametersOfMethod",
            "src_parent": "for (spoon.reflect.declaration.CtParameter<?> parameter : parametersOfMethod) {\n    if (parameter.getType() != null) {\n        parameterTypesOfMethod.add(parameter.getType().clone());\n    }\n}",
            "src_parent_type": "ForEach",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assert",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration",
            "dst_parent": "org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration executableJDT = null",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "org.eclipse.jdt.internal.compiler.ast.MethodDeclaration",
            "src_parent": "org.eclipse.jdt.internal.compiler.ast.MethodDeclaration methodJDT = null",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assert",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "executableReference",
            "dst_parent": "parameterReference.setDeclaringExecutable(executableReference)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "methodReference",
            "src_parent": "parameterReference.setDeclaringExecutable(methodReference)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "executable",
            "dst_parent": "executable.getParameters()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "method",
            "src_parent": "method.getParameters()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "ForEach",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assert",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "executableJDT",
            "dst_parent": "executableJDT != null",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "methodJDT",
            "src_parent": "methodJDT != null",
            "src_parent_type": "BinaryOperator",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assert",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "ForEach",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "declaringReferenceOfExecutable",
            "dst_parent": "executableFactory.createReference(declaringReferenceOfExecutable, executableTypeReference, executable.getSimpleName(), parameterTypesOfExecutable)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "declaringReferenceOfMethod",
            "src_parent": "executableFactory.createReference(declaringReferenceOfMethod, method.getType().clone(), method.getSimpleName(), parameterTypesOfMethod)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assert",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "ForEach",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "executableTypeReference",
            "dst_parent": "executableFactory.createReference(declaringReferenceOfExecutable, executableTypeReference, executable.getSimpleName(), parameterTypesOfExecutable)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "method",
            "src_parent": "method.getType()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assert",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "ForEach",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "parameterTypesOfExecutable",
            "dst_parent": "executableFactory.createReference(declaringReferenceOfExecutable, executableTypeReference, executable.getSimpleName(), parameterTypesOfExecutable)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "parameterTypesOfMethod",
            "src_parent": "executableFactory.createReference(declaringReferenceOfMethod, method.getType().clone(), method.getSimpleName(), parameterTypesOfMethod)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "executable",
            "dst_parent": "astPair.element == executable",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "method",
            "src_parent": "astPair.element == method",
            "src_parent_type": "BinaryOperator",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assert",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "ForEach",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "executable",
            "dst_parent": "executable.getSimpleName()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "method",
            "src_parent": "method.getSimpleName()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "parameterTypesOfExecutable",
            "dst_parent": "parameterTypesOfExecutable.add(parameter.getType().clone())",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "parameterTypesOfMethod",
            "src_parent": "parameterTypesOfMethod.add(parameter.getType().clone())",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Break",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "executableJDT",
            "dst_parent": "executableJDT = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (astPair.node))",
            "dst_parent_type": "Assignment",
            "dst_type": "VariableWrite",
            "operator": "UPD",
            "src": "methodJDT",
            "src_parent": "methodJDT = ((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (astPair.node))",
            "src_parent_type": "Assignment",
            "src_type": "VariableWrite"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assert",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "executableJDT",
            "dst_parent": "executableJDT.binding",
            "dst_parent_type": "FieldRead",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "methodJDT",
            "src_parent": "methodJDT.binding",
            "src_parent_type": "FieldRead",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assert",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "executableJDT",
            "dst_parent": "executableJDT.binding",
            "dst_parent_type": "FieldRead",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "methodJDT",
            "src_parent": "methodJDT.binding",
            "src_parent_type": "FieldRead",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "break",
            "src_parent": "{\n    methodJDT = ((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (astPair.node));\n    break;\n}",
            "src_parent_type": "Block",
            "src_type": "Break"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assert",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "ForEach",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "method.getType().clone()",
            "src_parent": "executableFactory.createReference(declaringReferenceOfMethod, method.getType().clone(), method.getSimpleName(), parameterTypesOfMethod)",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "final spoon.reflect.factory.TypeFactory typeFactory = jdtTreeBuilder.getFactory().Type()",
            "src_parent": "{\n    final spoon.reflect.factory.TypeFactory typeFactory = jdtTreeBuilder.getFactory().Type();\n    final spoon.reflect.factory.CoreFactory coreFactory = jdtTreeBuilder.getFactory().Core();\n    final spoon.reflect.factory.ExecutableFactory executableFactory = jdtTreeBuilder.getFactory().Executable();\n    final spoon.support.compiler.jdt.ContextBuilder contextBuilder = jdtTreeBuilder.getContextBuilder();\n    final spoon.support.compiler.jdt.ReferenceBuilder referenceBuilder = jdtTreeBuilder.getReferencesBuilder();\n    final spoon.support.compiler.jdt.PositionBuilder positionBuilder = jdtTreeBuilder.getPositionBuilder();\n    final java.lang.String name = org.eclipse.jdt.core.compiler.CharOperation.charToString(singleNameReference.token);\n    final spoon.reflect.declaration.CtVariable<T> variable = contextBuilder.getVariableDeclaration(name);\n    if (variable == null) {\n        return null;\n    }\n    final spoon.reflect.reference.CtVariableReference<T> variableReference;\n    final spoon.reflect.code.CtVariableAccess<T> variableAccess;\n    if (variable instanceof spoon.reflect.declaration.CtParameter) {\n        final spoon.reflect.reference.CtParameterReference<T> parameterReference = coreFactory.createParameterReference();\n        if (variable.getParent() instanceof spoon.reflect.code.CtLambda) {\n            parameterReference.setDeclaringExecutable(referenceBuilder.getLambdaExecutableReference(singleNameReference));\n        } else {\n            final spoon.reflect.declaration.CtExecutable executable = ((spoon.reflect.declaration.CtExecutable) (variable.getParent()));\n            final java.util.List<spoon.reflect.reference.CtTypeReference<?>> parameterTypesOfExecutable = new java.util.ArrayList<>();\n            @java.lang.SuppressWarnings(\"unchecked\")\n            final java.util.List<spoon.reflect.declaration.CtParameter<?>> parametersOfExecutable = executable.getParameters();\n            for (spoon.reflect.declaration.CtParameter<?> parameter : parametersOfExecutable) {\n                if (parameter.getType() != null) {\n                    parameterTypesOfExecutable.add(parameter.getType().clone());\n                } else {\n                    parameterTypesOfExecutable.add(typeFactory.OBJECT);\n                }\n            }\n            org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration executableJDT = null;\n            for (final spoon.support.compiler.jdt.ASTPair astPair : contextBuilder.stack) {\n                if (astPair.element == executable) {\n                    executableJDT = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (astPair.node));\n                }\n            }\n            assert executableJDT != null;\n            final spoon.reflect.reference.CtTypeReference declaringReferenceOfExecutable = (executableJDT.binding == null) ? coreFactory.createTypeReference() : referenceBuilder.getTypeReference(executableJDT.binding.declaringClass);\n            spoon.reflect.reference.CtTypeReference executableTypeReference = (executable instanceof spoon.reflect.declaration.CtConstructor) ? declaringReferenceOfExecutable.clone() : executable.getType().clone();\n            @java.lang.SuppressWarnings(\"unchecked\")\n            final spoon.reflect.reference.CtExecutableReference executableReference = executableFactory.createReference(declaringReferenceOfExecutable, executableTypeReference, executable.getSimpleName(), parameterTypesOfExecutable);\n            parameterReference.setDeclaringExecutable(executableReference);\n        }\n        variableReference = parameterReference;\n        variableAccess = (spoon.support.compiler.jdt.JDTTreeBuilderQuery.isLhsAssignment(contextBuilder, singleNameReference)) ? coreFactory.<T>createVariableWrite() : coreFactory.<T>createVariableRead();\n    } else if (variable instanceof spoon.reflect.declaration.CtField) {\n        variableReference = variable.getReference();\n        variableAccess = (spoon.support.compiler.jdt.JDTTreeBuilderQuery.isLhsAssignment(contextBuilder, singleNameReference)) ? coreFactory.<T>createFieldWrite() : coreFactory.<T>createFieldRead();\n    } else {\n        variableReference = variable.getReference();\n        variableAccess = (spoon.support.compiler.jdt.JDTTreeBuilderQuery.isLhsAssignment(contextBuilder, singleNameReference)) ? coreFactory.<T>createVariableWrite() : coreFactory.<T>createVariableRead();\n    }\n    variableReference.setSimpleName(name);\n    variableReference.setPosition(positionBuilder.buildPosition(singleNameReference.sourceStart(), singleNameReference.sourceEnd()));\n    variableAccess.setVariable(variableReference);\n    return variableAccess;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "spoon.reflect.reference.CtTypeReference executableTypeReference = (executable instanceof spoon.reflect.declaration.CtConstructor) ? declaringReferenceOfExecutable.clone() : executable.getType().clone()",
            "src_parent": "{\n    final spoon.reflect.declaration.CtExecutable executable = ((spoon.reflect.declaration.CtExecutable) (variable.getParent()));\n    final java.util.List<spoon.reflect.reference.CtTypeReference<?>> parameterTypesOfExecutable = new java.util.ArrayList<>();\n    @java.lang.SuppressWarnings(\"unchecked\")\n    final java.util.List<spoon.reflect.declaration.CtParameter<?>> parametersOfExecutable = executable.getParameters();\n    for (spoon.reflect.declaration.CtParameter<?> parameter : parametersOfExecutable) {\n        if (parameter.getType() != null) {\n            parameterTypesOfExecutable.add(parameter.getType().clone());\n        } else {\n            parameterTypesOfExecutable.add(typeFactory.OBJECT);\n        }\n    }\n    org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration executableJDT = null;\n    for (final spoon.support.compiler.jdt.ASTPair astPair : contextBuilder.stack) {\n        if (astPair.element == executable) {\n            executableJDT = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (astPair.node));\n        }\n    }\n    assert executableJDT != null;\n    final spoon.reflect.reference.CtTypeReference declaringReferenceOfExecutable = (executableJDT.binding == null) ? coreFactory.createTypeReference() : referenceBuilder.getTypeReference(executableJDT.binding.declaringClass);\n    spoon.reflect.reference.CtTypeReference executableTypeReference = (executable instanceof spoon.reflect.declaration.CtConstructor) ? declaringReferenceOfExecutable.clone() : executable.getType().clone();\n    @java.lang.SuppressWarnings(\"unchecked\")\n    final spoon.reflect.reference.CtExecutableReference executableReference = executableFactory.createReference(declaringReferenceOfExecutable, executableTypeReference, executable.getSimpleName(), parameterTypesOfExecutable);\n    parameterReference.setDeclaringExecutable(executableReference);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assert",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    parameterTypesOfExecutable.add(typeFactory.OBJECT);\n}",
            "src_parent": "if (parameter.getType() != null) {\n    parameterTypesOfExecutable.add(parameter.getType().clone());\n} else {\n    parameterTypesOfExecutable.add(typeFactory.OBJECT);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_LocalVariable",
            "dst_parent": "final java.util.List<spoon.reflect.reference.CtTypeReference<?>> parameterTypesOfExecutable = new java.util.ArrayList<>()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_LocalVariable",
            "src_parent": "final java.util.List<spoon.reflect.declaration.CtParameter<?>> parametersOfMethod = method.getParameters()",
            "src_parent_type": "LocalVariable",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_LocalVariable",
            "dst_parent": "@java.lang.SuppressWarnings(\"unchecked\")\nfinal java.util.List<spoon.reflect.declaration.CtParameter<?>> parametersOfExecutable = executable.getParameters()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_LocalVariable",
            "src_parent": "final java.util.List<spoon.reflect.reference.CtTypeReference<?>> parameterTypesOfMethod = new java.util.ArrayList<>()",
            "src_parent_type": "LocalVariable",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assert",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "ForEach",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "executableTypeReference",
            "dst_parent": "executableFactory.createReference(declaringReferenceOfExecutable, executableTypeReference, executable.getSimpleName(), parameterTypesOfExecutable)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "method",
            "src_parent": "method.getType()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        }
      ],
      "file_name": "JDTTreeBuilderHelper"
    }
  ],
  "id": "bears_30"
}