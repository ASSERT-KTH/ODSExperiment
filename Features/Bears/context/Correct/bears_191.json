{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "private static final java.util.regex.Pattern ENDPOINT_NAME_PATTERN_IP4 = java.util.regex.Pattern.compile(\"^([0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3})\", java.util.regex.Pattern.MULTILINE | java.util.regex.Pattern.DOTALL);",
            "dst_parent": "public final class NodesStatus {\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_NAME_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_STATUS_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_DC_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_RACK_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_LOAD_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_RELEASE_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_SEVERITY_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_HOSTID_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_TOKENS_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.regex.Pattern ENDPOINT_NAME_PATTERN_IP4 = java.util.regex.Pattern.compile(\"^([0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3})\", java.util.regex.Pattern.MULTILINE | java.util.regex.Pattern.DOTALL);\n\n    private static final java.util.regex.Pattern ENDPOINT_NAME_PATTERN_IP6 = java.util.regex.Pattern.compile(\"^([0-9:a-fA-F\\\\]\\\\[]{3,41})\", java.util.regex.Pattern.MULTILINE | java.util.regex.Pattern.DOTALL);\n\n    private static final java.util.regex.Pattern ENDPOINT_STATUS_22_PATTERN = java.util.regex.Pattern.compile(\"(STATUS):([0-9]*):(\\\\w+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_DC_22_PATTERN = java.util.regex.Pattern.compile(\"(DC):([0-9]*):([0-9a-zA-Z-\\\\.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_RACK_22_PATTERN = java.util.regex.Pattern.compile(\"(RACK):([0-9]*):([0-9a-zA-Z-\\\\.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_LOAD_22_PATTERN = java.util.regex.Pattern.compile(\"(LOAD):([0-9]*):([0-9eE.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_RELEASE_22_PATTERN = java.util.regex.Pattern.compile(\"(RELEASE_VERSION):([0-9]*):([0-9.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_SEVERITY_22_PATTERN = java.util.regex.Pattern.compile(\"(SEVERITY):([0-9]*):([0-9.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_HOSTID_22_PATTERN = java.util.regex.Pattern.compile(\"(HOST_ID):([0-9]*):([0-9a-z-]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_TOKENS_22_PATTERN = java.util.regex.Pattern.compile(\"(TOKENS):([0-9]*)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_STATUS_21_PATTERN = java.util.regex.Pattern.compile(\"(STATUS)(:)(\\\\w+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_DC_21_PATTERN = java.util.regex.Pattern.compile(\"(DC)(:)([0-9a-zA-Z-\\\\.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_RACK_21_PATTERN = java.util.regex.Pattern.compile(\"(RACK)(:)([0-9a-zA-Z-\\\\.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_LOAD_21_PATTERN = java.util.regex.Pattern.compile(\"(LOAD)(:)([0-9eE.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_RELEASE_21_PATTERN = java.util.regex.Pattern.compile(\"(RELEASE_VERSION)(:)([0-9.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_SEVERITY_21_PATTERN = java.util.regex.Pattern.compile(\"(SEVERITY)(:)([0-9.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_HOSTID_21_PATTERN = java.util.regex.Pattern.compile(\"(HOST_ID)(:)([0-9a-z-]+)\");\n\n    private static final java.lang.String NOT_AVAILABLE = \"Not available\";\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    public final java.util.List<io.cassandrareaper.resources.view.NodesStatus.GossipInfo> endpointStates;\n\n    static {\n        initPatterns();\n    }\n\n    public NodesStatus(java.util.List<io.cassandrareaper.resources.view.NodesStatus.GossipInfo> endpointStates) {\n        this.endpointStates = endpointStates;\n    }\n\n    public NodesStatus(java.lang.String sourceNode, java.lang.String allEndpointStates, java.util.Map<java.lang.String, java.lang.String> simpleStates) {\n        this.endpointStates = com.google.common.collect.Lists.newArrayList();\n        this.endpointStates.add(parseEndpointStatesString(sourceNode, allEndpointStates, simpleStates));\n    }\n\n    private io.cassandrareaper.resources.view.NodesStatus.GossipInfo parseEndpointStatesString(java.lang.String sourceNode, java.lang.String allEndpointStates, java.util.Map<java.lang.String, java.lang.String> simpleStates) {\n        java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState> endpointStates = com.google.common.collect.Lists.newArrayList();\n        java.util.Set<java.lang.String> endpoints = com.google.common.collect.Sets.newHashSet();\n        java.util.regex.Matcher matcher;\n        java.lang.String[] endpointLines = allEndpointStates.split(\"\\n\");\n        java.util.List<java.lang.String> strEndpoints = com.google.common.collect.Lists.newArrayList();\n        java.lang.StringBuilder recordBuilder = null;\n        for (java.lang.String line : endpointLines) {\n            if (!line.startsWith(\"  \")) {\n                if (recordBuilder != null) {\n                    strEndpoints.add(recordBuilder.toString());\n                }\n                recordBuilder = new java.lang.StringBuilder(line.substring(line.indexOf('/') + 1));\n            } else if (recordBuilder != null) {\n                recordBuilder.append('\\n');\n                recordBuilder.append(line);\n            }\n        }\n        if (recordBuilder != null) {\n            strEndpoints.add(recordBuilder.toString());\n        }\n        java.util.Map<java.lang.String, java.lang.String> simpleStatesCopy = new java.util.HashMap<>();\n        for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : simpleStates.entrySet()) {\n            java.lang.String entryKey = entry.getKey().substring(entry.getKey().indexOf('/'));\n            simpleStatesCopy.put(entryKey, entry.getValue());\n        }\n        simpleStates = simpleStatesCopy;\n        java.lang.Double totalLoad = 0.0;\n        for (java.lang.String endpointString : strEndpoints) {\n            com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n            com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n            for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n                matcher = endpointStatusPattern.matcher(endpointString);\n                if (matcher.find() && (matcher.groupCount() >= 3)) {\n                    status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n                    break;\n                }\n            }\n            com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n            com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n            com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n            com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n            com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n            com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n            com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n            totalLoad += load.or(0.0);\n            io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n            endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n            endpointStates.add(endpointState);\n        }\n        java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>>> endpointsByDcAndRack = com.google.common.collect.Maps.newHashMap();\n        java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByDc = endpointStates.stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getDc, java.util.stream.Collectors.toList()));\n        for (java.lang.String dc : endpointsByDc.keySet()) {\n            java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByRack = endpointsByDc.get(dc).stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getRack, java.util.stream.Collectors.toList()));\n            endpointsByDcAndRack.put(dc, endpointsByRack);\n        }\n        return new io.cassandrareaper.resources.view.NodesStatus.GossipInfo(sourceNode, endpointsByDcAndRack, totalLoad, endpoints);\n    }\n\n    private <T> com.google.common.base.Optional<T> parseEndpointState(java.util.List<java.util.regex.Pattern> patterns, java.lang.String endpointString, int group, java.lang.Class<T> type) {\n        com.google.common.base.Optional<T> result = com.google.common.base.Optional.absent();\n        for (java.util.regex.Pattern pattern : patterns) {\n            java.util.regex.Matcher matcher = pattern.matcher(endpointString);\n            if (matcher.find() && (matcher.groupCount() >= group)) {\n                result = ((com.google.common.base.Optional<T>) (com.google.common.base.Optional.of(matcher.group(group))));\n                if (type.equals(java.lang.Double.class)) {\n                    result = ((com.google.common.base.Optional<T>) (com.google.common.base.Optional.of(java.lang.Double.parseDouble(matcher.group(group)))));\n                }\n                break;\n            }\n        }\n        return result;\n    }\n\n    private static void initPatterns() {\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN_IP4, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN_IP6));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS.add(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_22_PATTERN);\n    }\n\n    public static final class GossipInfo {\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String sourceNode;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>>> endpoints;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.Double totalLoad;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.util.Set<java.lang.String> endpointNames;\n\n        public GossipInfo(java.lang.String sourceNode, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>>> endpoints, java.lang.Double totalLoad, java.util.Set<java.lang.String> endpointNames) {\n            this.sourceNode = sourceNode;\n            this.endpoints = endpoints;\n            this.totalLoad = totalLoad;\n            this.endpointNames = endpointNames;\n        }\n    }\n\n    public static final class EndpointState {\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String endpoint;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String hostId;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String dc;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String rack;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String status;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.Double severity;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String releaseVersion;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String tokens;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.Double load;\n\n        public EndpointState(java.lang.String endpoint, java.lang.String hostId, java.lang.String dc, java.lang.String rack, java.lang.String status, java.lang.Double severity, java.lang.String releaseVersion, java.lang.String tokens, java.lang.Double load) {\n            this.endpoint = endpoint;\n            this.hostId = hostId;\n            this.dc = dc;\n            this.rack = rack;\n            this.status = status;\n            this.severity = severity;\n            this.releaseVersion = releaseVersion;\n            this.tokens = tokens;\n            this.load = load;\n        }\n\n        public java.lang.String getDc() {\n            return this.dc;\n        }\n\n        public java.lang.String getRack() {\n            return this.rack;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return ((((((((((((((((((((((((\"Endpoint : \" + endpoint) + \" / \") + \"Status : \") + status) + \" / \") + \"DC : \") + dc) + \" / \") + \"Rack : \") + rack) + \" / \") + \"Release version : \") + releaseVersion) + \" / \") + \"Load : \") + load) + \" / \") + \"Severity : \") + severity) + \" / \") + \"Host Id : \") + hostId) + \" / \") + \"Tokens : \") + tokens;\n        }\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Field",
            "operator": "UPD",
            "src": "private static final java.util.regex.Pattern ENDPOINT_NAME_PATTERN = java.util.regex.Pattern.compile(\"^([0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3})\", java.util.regex.Pattern.MULTILINE | java.util.regex.Pattern.DOTALL);",
            "src_parent": "public final class NodesStatus {\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_NAME_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_STATUS_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_DC_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_RACK_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_LOAD_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_RELEASE_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_SEVERITY_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_HOSTID_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_TOKENS_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.regex.Pattern ENDPOINT_NAME_PATTERN = java.util.regex.Pattern.compile(\"^([0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3})\", java.util.regex.Pattern.MULTILINE | java.util.regex.Pattern.DOTALL);\n\n    private static final java.util.regex.Pattern ENDPOINT_STATUS_22_PATTERN = java.util.regex.Pattern.compile(\"(STATUS):([0-9]*):(\\\\w+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_DC_22_PATTERN = java.util.regex.Pattern.compile(\"(DC):([0-9]*):([0-9a-zA-Z-\\\\.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_RACK_22_PATTERN = java.util.regex.Pattern.compile(\"(RACK):([0-9]*):([0-9a-zA-Z-\\\\.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_LOAD_22_PATTERN = java.util.regex.Pattern.compile(\"(LOAD):([0-9]*):([0-9eE.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_RELEASE_22_PATTERN = java.util.regex.Pattern.compile(\"(RELEASE_VERSION):([0-9]*):([0-9.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_SEVERITY_22_PATTERN = java.util.regex.Pattern.compile(\"(SEVERITY):([0-9]*):([0-9.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_HOSTID_22_PATTERN = java.util.regex.Pattern.compile(\"(HOST_ID):([0-9]*):([0-9a-z-]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_TOKENS_22_PATTERN = java.util.regex.Pattern.compile(\"(TOKENS):([0-9]*)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_STATUS_21_PATTERN = java.util.regex.Pattern.compile(\"(STATUS)(:)(\\\\w+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_DC_21_PATTERN = java.util.regex.Pattern.compile(\"(DC)(:)([0-9a-zA-Z-\\\\.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_RACK_21_PATTERN = java.util.regex.Pattern.compile(\"(RACK)(:)([0-9a-zA-Z-\\\\.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_LOAD_21_PATTERN = java.util.regex.Pattern.compile(\"(LOAD)(:)([0-9eE.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_RELEASE_21_PATTERN = java.util.regex.Pattern.compile(\"(RELEASE_VERSION)(:)([0-9.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_SEVERITY_21_PATTERN = java.util.regex.Pattern.compile(\"(SEVERITY)(:)([0-9.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_HOSTID_21_PATTERN = java.util.regex.Pattern.compile(\"(HOST_ID)(:)([0-9a-z-]+)\");\n\n    private static final java.lang.String NOT_AVAILABLE = \"Not available\";\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    public final java.util.List<io.cassandrareaper.resources.view.NodesStatus.GossipInfo> endpointStates;\n\n    static {\n        initPatterns();\n    }\n\n    public NodesStatus(java.util.List<io.cassandrareaper.resources.view.NodesStatus.GossipInfo> endpointStates) {\n        this.endpointStates = endpointStates;\n    }\n\n    public NodesStatus(java.lang.String sourceNode, java.lang.String allEndpointStates, java.util.Map<java.lang.String, java.lang.String> simpleStates) {\n        this.endpointStates = com.google.common.collect.Lists.newArrayList();\n        this.endpointStates.add(parseEndpointStatesString(sourceNode, allEndpointStates, simpleStates));\n    }\n\n    private io.cassandrareaper.resources.view.NodesStatus.GossipInfo parseEndpointStatesString(java.lang.String sourceNode, java.lang.String allEndpointStates, java.util.Map<java.lang.String, java.lang.String> simpleStates) {\n        java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState> endpointStates = com.google.common.collect.Lists.newArrayList();\n        java.util.Set<java.lang.String> endpoints = com.google.common.collect.Sets.newHashSet();\n        java.util.regex.Matcher matcher;\n        java.lang.String[] endpointLines = allEndpointStates.split(\"\\n\");\n        java.util.List<java.lang.String> strEndpoints = com.google.common.collect.Lists.newArrayList();\n        java.lang.StringBuilder recordBuilder = null;\n        for (java.lang.String line : endpointLines) {\n            if (!line.startsWith(\"  \")) {\n                if (recordBuilder != null) {\n                    strEndpoints.add(recordBuilder.toString());\n                }\n                recordBuilder = new java.lang.StringBuilder(line.substring(line.indexOf('/') + 1));\n            } else if (recordBuilder != null) {\n                recordBuilder.append('\\n');\n                recordBuilder.append(line);\n            }\n        }\n        if (recordBuilder != null) {\n            strEndpoints.add(recordBuilder.toString());\n        }\n        java.util.Map<java.lang.String, java.lang.String> simpleStatesCopy = new java.util.HashMap<>();\n        for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : simpleStates.entrySet()) {\n            java.lang.String entryKey = entry.getKey().substring(entry.getKey().indexOf('/'));\n            simpleStatesCopy.put(entryKey, entry.getValue());\n        }\n        simpleStates = simpleStatesCopy;\n        java.lang.Double totalLoad = 0.0;\n        for (java.lang.String endpointString : strEndpoints) {\n            com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n            com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n            for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n                matcher = endpointStatusPattern.matcher(endpointString);\n                if (matcher.find() && (matcher.groupCount() >= 3)) {\n                    status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n                    break;\n                }\n            }\n            com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n            com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n            com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n            com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n            com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n            com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n            com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n            totalLoad += load.or(0.0);\n            io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n            endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n            endpointStates.add(endpointState);\n        }\n        java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>>> endpointsByDcAndRack = com.google.common.collect.Maps.newHashMap();\n        java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByDc = endpointStates.stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getDc, java.util.stream.Collectors.toList()));\n        for (java.lang.String dc : endpointsByDc.keySet()) {\n            java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByRack = endpointsByDc.get(dc).stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getRack, java.util.stream.Collectors.toList()));\n            endpointsByDcAndRack.put(dc, endpointsByRack);\n        }\n        return new io.cassandrareaper.resources.view.NodesStatus.GossipInfo(sourceNode, endpointsByDcAndRack, totalLoad, endpoints);\n    }\n\n    private <T> com.google.common.base.Optional<T> parseEndpointState(java.util.List<java.util.regex.Pattern> patterns, java.lang.String endpointString, int group, java.lang.Class<T> type) {\n        com.google.common.base.Optional<T> result = com.google.common.base.Optional.absent();\n        for (java.util.regex.Pattern pattern : patterns) {\n            java.util.regex.Matcher matcher = pattern.matcher(endpointString);\n            if (matcher.find() && (matcher.groupCount() >= group)) {\n                result = ((com.google.common.base.Optional<T>) (com.google.common.base.Optional.of(matcher.group(group))));\n                if (type.equals(java.lang.Double.class)) {\n                    result = ((com.google.common.base.Optional<T>) (com.google.common.base.Optional.of(java.lang.Double.parseDouble(matcher.group(group)))));\n                }\n                break;\n            }\n        }\n        return result;\n    }\n\n    private static void initPatterns() {\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS.add(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN);\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS.add(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_22_PATTERN);\n    }\n\n    public static final class GossipInfo {\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String sourceNode;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>>> endpoints;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.Double totalLoad;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.util.Set<java.lang.String> endpointNames;\n\n        public GossipInfo(java.lang.String sourceNode, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>>> endpoints, java.lang.Double totalLoad, java.util.Set<java.lang.String> endpointNames) {\n            this.sourceNode = sourceNode;\n            this.endpoints = endpoints;\n            this.totalLoad = totalLoad;\n            this.endpointNames = endpointNames;\n        }\n    }\n\n    public static final class EndpointState {\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String endpoint;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String hostId;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String dc;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String rack;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String status;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.Double severity;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String releaseVersion;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String tokens;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.Double load;\n\n        public EndpointState(java.lang.String endpoint, java.lang.String hostId, java.lang.String dc, java.lang.String rack, java.lang.String status, java.lang.Double severity, java.lang.String releaseVersion, java.lang.String tokens, java.lang.Double load) {\n            this.endpoint = endpoint;\n            this.hostId = hostId;\n            this.dc = dc;\n            this.rack = rack;\n            this.status = status;\n            this.severity = severity;\n            this.releaseVersion = releaseVersion;\n            this.tokens = tokens;\n            this.load = load;\n        }\n\n        public java.lang.String getDc() {\n            return this.dc;\n        }\n\n        public java.lang.String getRack() {\n            return this.rack;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return ((((((((((((((((((((((((\"Endpoint : \" + endpoint) + \" / \") + \"Status : \") + status) + \" / \") + \"DC : \") + dc) + \" / \") + \"Rack : \") + rack) + \" / \") + \"Release version : \") + releaseVersion) + \" / \") + \"Load : \") + load) + \" / \") + \"Severity : \") + severity) + \" / \") + \"Host Id : \") + hostId) + \" / \") + \"Tokens : \") + tokens;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN_IP4, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN_IP6))",
            "dst_parent": "{\n    io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN_IP4, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN_IP6));\n    io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_21_PATTERN));\n    io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_21_PATTERN));\n    io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_21_PATTERN));\n    io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_21_PATTERN));\n    io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_21_PATTERN));\n    io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_21_PATTERN));\n    io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_21_PATTERN));\n    io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS.add(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_22_PATTERN);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS.add(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN)",
            "src_parent": "{\n    io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS.add(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN);\n    io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_21_PATTERN));\n    io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_21_PATTERN));\n    io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_21_PATTERN));\n    io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_21_PATTERN));\n    io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_21_PATTERN));\n    io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_21_PATTERN));\n    io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_21_PATTERN));\n    io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS.add(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_22_PATTERN);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN_IP4",
            "dst_parent": "java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN_IP4, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN_IP6)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "UPD",
            "src": "io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN",
            "src_parent": "io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS.add(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private static final java.util.regex.Pattern ENDPOINT_NAME_PATTERN_IP6 = java.util.regex.Pattern.compile(\"^([0-9:a-fA-F\\\\]\\\\[]{3,41})\", java.util.regex.Pattern.MULTILINE | java.util.regex.Pattern.DOTALL);",
            "src_parent": "public final class NodesStatus {\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_NAME_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_STATUS_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_DC_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_RACK_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_LOAD_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_RELEASE_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_SEVERITY_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_HOSTID_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.List<java.util.regex.Pattern> ENDPOINT_TOKENS_PATTERNS = com.google.common.collect.Lists.newArrayList();\n\n    private static final java.util.regex.Pattern ENDPOINT_NAME_PATTERN_IP4 = java.util.regex.Pattern.compile(\"^([0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3})\", java.util.regex.Pattern.MULTILINE | java.util.regex.Pattern.DOTALL);\n\n    private static final java.util.regex.Pattern ENDPOINT_NAME_PATTERN_IP6 = java.util.regex.Pattern.compile(\"^([0-9:a-fA-F\\\\]\\\\[]{3,41})\", java.util.regex.Pattern.MULTILINE | java.util.regex.Pattern.DOTALL);\n\n    private static final java.util.regex.Pattern ENDPOINT_STATUS_22_PATTERN = java.util.regex.Pattern.compile(\"(STATUS):([0-9]*):(\\\\w+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_DC_22_PATTERN = java.util.regex.Pattern.compile(\"(DC):([0-9]*):([0-9a-zA-Z-\\\\.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_RACK_22_PATTERN = java.util.regex.Pattern.compile(\"(RACK):([0-9]*):([0-9a-zA-Z-\\\\.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_LOAD_22_PATTERN = java.util.regex.Pattern.compile(\"(LOAD):([0-9]*):([0-9eE.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_RELEASE_22_PATTERN = java.util.regex.Pattern.compile(\"(RELEASE_VERSION):([0-9]*):([0-9.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_SEVERITY_22_PATTERN = java.util.regex.Pattern.compile(\"(SEVERITY):([0-9]*):([0-9.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_HOSTID_22_PATTERN = java.util.regex.Pattern.compile(\"(HOST_ID):([0-9]*):([0-9a-z-]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_TOKENS_22_PATTERN = java.util.regex.Pattern.compile(\"(TOKENS):([0-9]*)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_STATUS_21_PATTERN = java.util.regex.Pattern.compile(\"(STATUS)(:)(\\\\w+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_DC_21_PATTERN = java.util.regex.Pattern.compile(\"(DC)(:)([0-9a-zA-Z-\\\\.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_RACK_21_PATTERN = java.util.regex.Pattern.compile(\"(RACK)(:)([0-9a-zA-Z-\\\\.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_LOAD_21_PATTERN = java.util.regex.Pattern.compile(\"(LOAD)(:)([0-9eE.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_RELEASE_21_PATTERN = java.util.regex.Pattern.compile(\"(RELEASE_VERSION)(:)([0-9.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_SEVERITY_21_PATTERN = java.util.regex.Pattern.compile(\"(SEVERITY)(:)([0-9.]+)\");\n\n    private static final java.util.regex.Pattern ENDPOINT_HOSTID_21_PATTERN = java.util.regex.Pattern.compile(\"(HOST_ID)(:)([0-9a-z-]+)\");\n\n    private static final java.lang.String NOT_AVAILABLE = \"Not available\";\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    public final java.util.List<io.cassandrareaper.resources.view.NodesStatus.GossipInfo> endpointStates;\n\n    static {\n        initPatterns();\n    }\n\n    public NodesStatus(java.util.List<io.cassandrareaper.resources.view.NodesStatus.GossipInfo> endpointStates) {\n        this.endpointStates = endpointStates;\n    }\n\n    public NodesStatus(java.lang.String sourceNode, java.lang.String allEndpointStates, java.util.Map<java.lang.String, java.lang.String> simpleStates) {\n        this.endpointStates = com.google.common.collect.Lists.newArrayList();\n        this.endpointStates.add(parseEndpointStatesString(sourceNode, allEndpointStates, simpleStates));\n    }\n\n    private io.cassandrareaper.resources.view.NodesStatus.GossipInfo parseEndpointStatesString(java.lang.String sourceNode, java.lang.String allEndpointStates, java.util.Map<java.lang.String, java.lang.String> simpleStates) {\n        java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState> endpointStates = com.google.common.collect.Lists.newArrayList();\n        java.util.Set<java.lang.String> endpoints = com.google.common.collect.Sets.newHashSet();\n        java.util.regex.Matcher matcher;\n        java.lang.String[] endpointLines = allEndpointStates.split(\"\\n\");\n        java.util.List<java.lang.String> strEndpoints = com.google.common.collect.Lists.newArrayList();\n        java.lang.StringBuilder recordBuilder = null;\n        for (java.lang.String line : endpointLines) {\n            if (!line.startsWith(\"  \")) {\n                if (recordBuilder != null) {\n                    strEndpoints.add(recordBuilder.toString());\n                }\n                recordBuilder = new java.lang.StringBuilder(line.substring(line.indexOf('/') + 1));\n            } else if (recordBuilder != null) {\n                recordBuilder.append('\\n');\n                recordBuilder.append(line);\n            }\n        }\n        if (recordBuilder != null) {\n            strEndpoints.add(recordBuilder.toString());\n        }\n        java.util.Map<java.lang.String, java.lang.String> simpleStatesCopy = new java.util.HashMap<>();\n        for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : simpleStates.entrySet()) {\n            java.lang.String entryKey = entry.getKey().substring(entry.getKey().indexOf('/'));\n            simpleStatesCopy.put(entryKey, entry.getValue());\n        }\n        simpleStates = simpleStatesCopy;\n        java.lang.Double totalLoad = 0.0;\n        for (java.lang.String endpointString : strEndpoints) {\n            com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n            com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n            for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n                matcher = endpointStatusPattern.matcher(endpointString);\n                if (matcher.find() && (matcher.groupCount() >= 3)) {\n                    status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n                    break;\n                }\n            }\n            com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n            com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n            com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n            com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n            com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n            com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n            com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n            totalLoad += load.or(0.0);\n            io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n            endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n            endpointStates.add(endpointState);\n        }\n        java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>>> endpointsByDcAndRack = com.google.common.collect.Maps.newHashMap();\n        java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByDc = endpointStates.stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getDc, java.util.stream.Collectors.toList()));\n        for (java.lang.String dc : endpointsByDc.keySet()) {\n            java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByRack = endpointsByDc.get(dc).stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getRack, java.util.stream.Collectors.toList()));\n            endpointsByDcAndRack.put(dc, endpointsByRack);\n        }\n        return new io.cassandrareaper.resources.view.NodesStatus.GossipInfo(sourceNode, endpointsByDcAndRack, totalLoad, endpoints);\n    }\n\n    private <T> com.google.common.base.Optional<T> parseEndpointState(java.util.List<java.util.regex.Pattern> patterns, java.lang.String endpointString, int group, java.lang.Class<T> type) {\n        com.google.common.base.Optional<T> result = com.google.common.base.Optional.absent();\n        for (java.util.regex.Pattern pattern : patterns) {\n            java.util.regex.Matcher matcher = pattern.matcher(endpointString);\n            if (matcher.find() && (matcher.groupCount() >= group)) {\n                result = ((com.google.common.base.Optional<T>) (com.google.common.base.Optional.of(matcher.group(group))));\n                if (type.equals(java.lang.Double.class)) {\n                    result = ((com.google.common.base.Optional<T>) (com.google.common.base.Optional.of(java.lang.Double.parseDouble(matcher.group(group)))));\n                }\n                break;\n            }\n        }\n        return result;\n    }\n\n    private static void initPatterns() {\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN_IP4, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN_IP6));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS.addAll(java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_22_PATTERN, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_21_PATTERN));\n        io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS.add(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_22_PATTERN);\n    }\n\n    public static final class GossipInfo {\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String sourceNode;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>>> endpoints;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.Double totalLoad;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.util.Set<java.lang.String> endpointNames;\n\n        public GossipInfo(java.lang.String sourceNode, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>>> endpoints, java.lang.Double totalLoad, java.util.Set<java.lang.String> endpointNames) {\n            this.sourceNode = sourceNode;\n            this.endpoints = endpoints;\n            this.totalLoad = totalLoad;\n            this.endpointNames = endpointNames;\n        }\n    }\n\n    public static final class EndpointState {\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String endpoint;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String hostId;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String dc;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String rack;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String status;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.Double severity;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String releaseVersion;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.String tokens;\n\n        @com.fasterxml.jackson.annotation.JsonProperty\n        public final java.lang.Double load;\n\n        public EndpointState(java.lang.String endpoint, java.lang.String hostId, java.lang.String dc, java.lang.String rack, java.lang.String status, java.lang.Double severity, java.lang.String releaseVersion, java.lang.String tokens, java.lang.Double load) {\n            this.endpoint = endpoint;\n            this.hostId = hostId;\n            this.dc = dc;\n            this.rack = rack;\n            this.status = status;\n            this.severity = severity;\n            this.releaseVersion = releaseVersion;\n            this.tokens = tokens;\n            this.load = load;\n        }\n\n        public java.lang.String getDc() {\n            return this.dc;\n        }\n\n        public java.lang.String getRack() {\n            return this.rack;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return ((((((((((((((((((((((((\"Endpoint : \" + endpoint) + \" / \") + \"Status : \") + status) + \" / \") + \"DC : \") + dc) + \" / \") + \"Rack : \") + rack) + \" / \") + \"Release version : \") + releaseVersion) + \" / \") + \"Load : \") + load) + \" / \") + \"Severity : \") + severity) + \" / \") + \"Host Id : \") + hostId) + \" / \") + \"Tokens : \") + tokens;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN_IP4",
            "dst_parent": "java.util.Arrays.asList(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN_IP4, io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN_IP6)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN",
            "src_parent": "io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS.add(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERN)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        }
      ],
      "file_name": "NodesStatus"
    }
  ],
  "id": "bears_191"
}