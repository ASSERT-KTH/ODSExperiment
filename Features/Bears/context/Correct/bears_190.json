{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String[] endpointLines = allEndpointStates.split(\"\\n\")",
            "dst_parent": "{\n    java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState> endpointStates = com.google.common.collect.Lists.newArrayList();\n    java.util.Set<java.lang.String> endpoints = com.google.common.collect.Sets.newHashSet();\n    java.util.regex.Matcher matcher;\n    java.lang.String[] endpointLines = allEndpointStates.split(\"\\n\");\n    java.util.List<java.lang.String> strEndpoints = com.google.common.collect.Lists.newArrayList();\n    java.lang.StringBuilder recordBuilder = null;\n    for (java.lang.String line : endpointLines) {\n        if (!line.startsWith(\"  \")) {\n            if (recordBuilder != null) {\n                strEndpoints.add(recordBuilder.toString());\n            }\n            recordBuilder = new java.lang.StringBuilder(line.substring(line.indexOf('/') + 1));\n        } else if (recordBuilder != null) {\n            recordBuilder.append('\\n');\n            recordBuilder.append(line);\n        }\n    }\n    if (recordBuilder != null) {\n        strEndpoints.add(recordBuilder.toString());\n    }\n    java.util.Map<java.lang.String, java.lang.String> simpleStatesCopy = new java.util.HashMap<>();\n    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : simpleStates.entrySet()) {\n        java.lang.String entryKey = entry.getKey().substring(entry.getKey().indexOf('/'));\n        simpleStatesCopy.put(entryKey, entry.getValue());\n    }\n    simpleStates = simpleStatesCopy;\n    java.lang.Double totalLoad = 0.0;\n    for (java.lang.String endpointString : strEndpoints) {\n        com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n        com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n        for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n            matcher = endpointStatusPattern.matcher(endpointString);\n            if (matcher.find() && (matcher.groupCount() >= 3)) {\n                status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n                break;\n            }\n        }\n        com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n        com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n        totalLoad += load.or(0.0);\n        io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n        endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n        endpointStates.add(endpointState);\n    }\n    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>>> endpointsByDcAndRack = com.google.common.collect.Maps.newHashMap();\n    java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByDc = endpointStates.stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getDc, java.util.stream.Collectors.toList()));\n    for (java.lang.String dc : endpointsByDc.keySet()) {\n        java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByRack = endpointsByDc.get(dc).stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getRack, java.util.stream.Collectors.toList()));\n        endpointsByDcAndRack.put(dc, endpointsByRack);\n    }\n    return new io.cassandrareaper.resources.view.NodesStatus.GossipInfo(sourceNode, endpointsByDcAndRack, totalLoad, endpoints);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "UPD",
            "src": "java.lang.String[] strEndpoints = allEndpointStates.split(\"(?<![0-9a-zA-Z ])/\")",
            "src_parent": "{\n    java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState> endpointStates = jersey.repackaged.com.google.common.collect.Lists.newArrayList();\n    java.util.Set<java.lang.String> endpoints = com.google.common.collect.Sets.newHashSet();\n    java.util.regex.Matcher matcher;\n    java.lang.String[] strEndpoints = allEndpointStates.split(\"(?<![0-9a-zA-Z ])/\");\n    java.lang.Double totalLoad = 0.0;\n    for (int i = 1; i < strEndpoints.length; i++) {\n        java.lang.String endpointString = strEndpoints[i];\n        com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n        com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n        for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n            matcher = endpointStatusPattern.matcher(endpointString);\n            if (matcher.find() && (matcher.groupCount() >= 3)) {\n                status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n                break;\n            }\n        }\n        com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n        com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n        totalLoad += load.or(0.0);\n        io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n        endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n        endpointStates.add(endpointState);\n    }\n    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>>> endpointsByDcAndRack = jersey.repackaged.com.google.common.collect.Maps.newHashMap();\n    java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByDc = endpointStates.stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getDc, java.util.stream.Collectors.toList()));\n    for (java.lang.String dc : endpointsByDc.keySet()) {\n        java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByRack = endpointsByDc.get(dc).stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getRack, java.util.stream.Collectors.toList()));\n        endpointsByDcAndRack.put(dc, endpointsByRack);\n    }\n    return new io.cassandrareaper.resources.view.NodesStatus.GossipInfo(sourceNode, endpointsByDcAndRack, totalLoad, endpoints);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Invocation",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeAccess",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.collect.Lists",
            "dst_parent": "com.google.common.collect.Lists.newArrayList()",
            "dst_parent_type": "Invocation",
            "dst_type": "TypeAccess",
            "operator": "UPD",
            "src": "jersey.repackaged.com.google.common.collect.Lists",
            "src_parent": "jersey.repackaged.com.google.common.collect.Lists.newArrayList()",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Invocation",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeAccess",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.collect.Lists",
            "dst_parent": "com.google.common.collect.Lists.newArrayList()",
            "dst_parent_type": "Invocation",
            "dst_type": "TypeAccess",
            "operator": "UPD",
            "src": "jersey.repackaged.com.google.common.collect.Lists",
            "src_parent": "jersey.repackaged.com.google.common.collect.Lists.newArrayList()",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Invocation",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeAccess",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.collect.Lists",
            "dst_parent": "com.google.common.collect.Lists.newArrayList()",
            "dst_parent_type": "Invocation",
            "dst_type": "TypeAccess",
            "operator": "UPD",
            "src": "jersey.repackaged.com.google.common.collect.Lists",
            "src_parent": "jersey.repackaged.com.google.common.collect.Lists.newArrayList()",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Invocation",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeAccess",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.collect.Lists",
            "dst_parent": "com.google.common.collect.Lists.newArrayList()",
            "dst_parent_type": "Invocation",
            "dst_type": "TypeAccess",
            "operator": "UPD",
            "src": "jersey.repackaged.com.google.common.collect.Lists",
            "src_parent": "jersey.repackaged.com.google.common.collect.Lists.newArrayList()",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Invocation",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeAccess",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.collect.Lists",
            "dst_parent": "com.google.common.collect.Lists.newArrayList()",
            "dst_parent_type": "Invocation",
            "dst_type": "TypeAccess",
            "operator": "UPD",
            "src": "jersey.repackaged.com.google.common.collect.Lists",
            "src_parent": "jersey.repackaged.com.google.common.collect.Lists.newArrayList()",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Invocation",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeAccess",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.collect.Lists",
            "dst_parent": "com.google.common.collect.Lists.newArrayList()",
            "dst_parent_type": "Invocation",
            "dst_type": "TypeAccess",
            "operator": "UPD",
            "src": "jersey.repackaged.com.google.common.collect.Lists",
            "src_parent": "jersey.repackaged.com.google.common.collect.Lists.newArrayList()",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Invocation",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeAccess",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.collect.Lists",
            "dst_parent": "com.google.common.collect.Lists.newArrayList()",
            "dst_parent_type": "Invocation",
            "dst_type": "TypeAccess",
            "operator": "UPD",
            "src": "jersey.repackaged.com.google.common.collect.Lists",
            "src_parent": "jersey.repackaged.com.google.common.collect.Lists.newArrayList()",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Invocation",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeAccess",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.collect.Lists",
            "dst_parent": "com.google.common.collect.Lists.newArrayList()",
            "dst_parent_type": "Invocation",
            "dst_type": "TypeAccess",
            "operator": "UPD",
            "src": "jersey.repackaged.com.google.common.collect.Lists",
            "src_parent": "jersey.repackaged.com.google.common.collect.Lists.newArrayList()",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Invocation",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeAccess",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.collect.Lists",
            "dst_parent": "com.google.common.collect.Lists.newArrayList()",
            "dst_parent_type": "Invocation",
            "dst_type": "TypeAccess",
            "operator": "UPD",
            "src": "jersey.repackaged.com.google.common.collect.Lists",
            "src_parent": "jersey.repackaged.com.google.common.collect.Lists.newArrayList()",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.StringBuilder",
            "dst_parent": "java.lang.StringBuilder recordBuilder = null",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "int",
            "src_parent": "int i = 1",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "java.lang.StringBuilder recordBuilder = null",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Literal",
            "operator": "UPD",
            "src": "1",
            "src_parent": "int i = 1",
            "src_parent_type": "LocalVariable",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.collect.Lists",
            "dst_parent": "com.google.common.collect.Lists.newArrayList()",
            "dst_parent_type": "Invocation",
            "dst_type": "TypeAccess",
            "operator": "UPD",
            "src": "jersey.repackaged.com.google.common.collect.Lists",
            "src_parent": "jersey.repackaged.com.google.common.collect.Lists.newArrayList()",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.collect.Lists",
            "dst_parent": "com.google.common.collect.Lists.newArrayList()",
            "dst_parent_type": "Invocation",
            "dst_type": "TypeAccess",
            "operator": "UPD",
            "src": "jersey.repackaged.com.google.common.collect.Lists",
            "src_parent": "jersey.repackaged.com.google.common.collect.Lists.newArrayList()",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "\"\\n\"",
            "dst_parent": "allEndpointStates.split(\"\\n\")",
            "dst_parent_type": "Invocation",
            "dst_type": "Literal",
            "operator": "UPD",
            "src": "\"(?<![0-9a-zA-Z ])/\"",
            "src_parent": "allEndpointStates.split(\"(?<![0-9a-zA-Z ])/\")",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.collect.Maps",
            "dst_parent": "com.google.common.collect.Maps.newHashMap()",
            "dst_parent_type": "Invocation",
            "dst_type": "TypeAccess",
            "operator": "UPD",
            "src": "jersey.repackaged.com.google.common.collect.Maps",
            "src_parent": "jersey.repackaged.com.google.common.collect.Maps.newHashMap()",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "for (int i = 1; i < strEndpoints.length; i++) {\n    java.lang.String endpointString = strEndpoints[i];\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "src_parent": "{\n    java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState> endpointStates = jersey.repackaged.com.google.common.collect.Lists.newArrayList();\n    java.util.Set<java.lang.String> endpoints = com.google.common.collect.Sets.newHashSet();\n    java.util.regex.Matcher matcher;\n    java.lang.String[] strEndpoints = allEndpointStates.split(\"(?<![0-9a-zA-Z ])/\");\n    java.lang.Double totalLoad = 0.0;\n    for (int i = 1; i < strEndpoints.length; i++) {\n        java.lang.String endpointString = strEndpoints[i];\n        com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n        com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n        for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n            matcher = endpointStatusPattern.matcher(endpointString);\n            if (matcher.find() && (matcher.groupCount() >= 3)) {\n                status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n                break;\n            }\n        }\n        com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n        com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n        totalLoad += load.or(0.0);\n        io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n        endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n        endpointStates.add(endpointState);\n    }\n    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>>> endpointsByDcAndRack = jersey.repackaged.com.google.common.collect.Maps.newHashMap();\n    java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByDc = endpointStates.stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getDc, java.util.stream.Collectors.toList()));\n    for (java.lang.String dc : endpointsByDc.keySet()) {\n        java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByRack = endpointsByDc.get(dc).stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getRack, java.util.stream.Collectors.toList()));\n        endpointsByDcAndRack.put(dc, endpointsByRack);\n    }\n    return new io.cassandrareaper.resources.view.NodesStatus.GossipInfo(sourceNode, endpointsByDcAndRack, totalLoad, endpoints);\n}",
            "src_parent_type": "Block",
            "src_type": "For"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.util.List<java.lang.String> strEndpoints = com.google.common.collect.Lists.newArrayList()",
            "src_parent": "{\n    java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState> endpointStates = com.google.common.collect.Lists.newArrayList();\n    java.util.Set<java.lang.String> endpoints = com.google.common.collect.Sets.newHashSet();\n    java.util.regex.Matcher matcher;\n    java.lang.String[] endpointLines = allEndpointStates.split(\"\\n\");\n    java.util.List<java.lang.String> strEndpoints = com.google.common.collect.Lists.newArrayList();\n    java.lang.StringBuilder recordBuilder = null;\n    for (java.lang.String line : endpointLines) {\n        if (!line.startsWith(\"  \")) {\n            if (recordBuilder != null) {\n                strEndpoints.add(recordBuilder.toString());\n            }\n            recordBuilder = new java.lang.StringBuilder(line.substring(line.indexOf('/') + 1));\n        } else if (recordBuilder != null) {\n            recordBuilder.append('\\n');\n            recordBuilder.append(line);\n        }\n    }\n    if (recordBuilder != null) {\n        strEndpoints.add(recordBuilder.toString());\n    }\n    java.util.Map<java.lang.String, java.lang.String> simpleStatesCopy = new java.util.HashMap<>();\n    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : simpleStates.entrySet()) {\n        java.lang.String entryKey = entry.getKey().substring(entry.getKey().indexOf('/'));\n        simpleStatesCopy.put(entryKey, entry.getValue());\n    }\n    simpleStates = simpleStatesCopy;\n    java.lang.Double totalLoad = 0.0;\n    for (java.lang.String endpointString : strEndpoints) {\n        com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n        com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n        for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n            matcher = endpointStatusPattern.matcher(endpointString);\n            if (matcher.find() && (matcher.groupCount() >= 3)) {\n                status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n                break;\n            }\n        }\n        com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n        com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n        totalLoad += load.or(0.0);\n        io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n        endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n        endpointStates.add(endpointState);\n    }\n    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>>> endpointsByDcAndRack = com.google.common.collect.Maps.newHashMap();\n    java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByDc = endpointStates.stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getDc, java.util.stream.Collectors.toList()));\n    for (java.lang.String dc : endpointsByDc.keySet()) {\n        java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByRack = endpointsByDc.get(dc).stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getRack, java.util.stream.Collectors.toList()));\n        endpointsByDcAndRack.put(dc, endpointsByRack);\n    }\n    return new io.cassandrareaper.resources.view.NodesStatus.GossipInfo(sourceNode, endpointsByDcAndRack, totalLoad, endpoints);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.lang.StringBuilder recordBuilder = null",
            "src_parent": "{\n    java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState> endpointStates = com.google.common.collect.Lists.newArrayList();\n    java.util.Set<java.lang.String> endpoints = com.google.common.collect.Sets.newHashSet();\n    java.util.regex.Matcher matcher;\n    java.lang.String[] endpointLines = allEndpointStates.split(\"\\n\");\n    java.util.List<java.lang.String> strEndpoints = com.google.common.collect.Lists.newArrayList();\n    java.lang.StringBuilder recordBuilder = null;\n    for (java.lang.String line : endpointLines) {\n        if (!line.startsWith(\"  \")) {\n            if (recordBuilder != null) {\n                strEndpoints.add(recordBuilder.toString());\n            }\n            recordBuilder = new java.lang.StringBuilder(line.substring(line.indexOf('/') + 1));\n        } else if (recordBuilder != null) {\n            recordBuilder.append('\\n');\n            recordBuilder.append(line);\n        }\n    }\n    if (recordBuilder != null) {\n        strEndpoints.add(recordBuilder.toString());\n    }\n    java.util.Map<java.lang.String, java.lang.String> simpleStatesCopy = new java.util.HashMap<>();\n    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : simpleStates.entrySet()) {\n        java.lang.String entryKey = entry.getKey().substring(entry.getKey().indexOf('/'));\n        simpleStatesCopy.put(entryKey, entry.getValue());\n    }\n    simpleStates = simpleStatesCopy;\n    java.lang.Double totalLoad = 0.0;\n    for (java.lang.String endpointString : strEndpoints) {\n        com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n        com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n        for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n            matcher = endpointStatusPattern.matcher(endpointString);\n            if (matcher.find() && (matcher.groupCount() >= 3)) {\n                status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n                break;\n            }\n        }\n        com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n        com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n        totalLoad += load.or(0.0);\n        io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n        endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n        endpointStates.add(endpointState);\n    }\n    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>>> endpointsByDcAndRack = com.google.common.collect.Maps.newHashMap();\n    java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByDc = endpointStates.stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getDc, java.util.stream.Collectors.toList()));\n    for (java.lang.String dc : endpointsByDc.keySet()) {\n        java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByRack = endpointsByDc.get(dc).stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getRack, java.util.stream.Collectors.toList()));\n        endpointsByDcAndRack.put(dc, endpointsByRack);\n    }\n    return new io.cassandrareaper.resources.view.NodesStatus.GossipInfo(sourceNode, endpointsByDcAndRack, totalLoad, endpoints);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "for (java.lang.String line : endpointLines) {\n    if (!line.startsWith(\"  \")) {\n        if (recordBuilder != null) {\n            strEndpoints.add(recordBuilder.toString());\n        }\n        recordBuilder = new java.lang.StringBuilder(line.substring(line.indexOf('/') + 1));\n    } else if (recordBuilder != null) {\n        recordBuilder.append('\\n');\n        recordBuilder.append(line);\n    }\n}",
            "src_parent": "{\n    java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState> endpointStates = com.google.common.collect.Lists.newArrayList();\n    java.util.Set<java.lang.String> endpoints = com.google.common.collect.Sets.newHashSet();\n    java.util.regex.Matcher matcher;\n    java.lang.String[] endpointLines = allEndpointStates.split(\"\\n\");\n    java.util.List<java.lang.String> strEndpoints = com.google.common.collect.Lists.newArrayList();\n    java.lang.StringBuilder recordBuilder = null;\n    for (java.lang.String line : endpointLines) {\n        if (!line.startsWith(\"  \")) {\n            if (recordBuilder != null) {\n                strEndpoints.add(recordBuilder.toString());\n            }\n            recordBuilder = new java.lang.StringBuilder(line.substring(line.indexOf('/') + 1));\n        } else if (recordBuilder != null) {\n            recordBuilder.append('\\n');\n            recordBuilder.append(line);\n        }\n    }\n    if (recordBuilder != null) {\n        strEndpoints.add(recordBuilder.toString());\n    }\n    java.util.Map<java.lang.String, java.lang.String> simpleStatesCopy = new java.util.HashMap<>();\n    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : simpleStates.entrySet()) {\n        java.lang.String entryKey = entry.getKey().substring(entry.getKey().indexOf('/'));\n        simpleStatesCopy.put(entryKey, entry.getValue());\n    }\n    simpleStates = simpleStatesCopy;\n    java.lang.Double totalLoad = 0.0;\n    for (java.lang.String endpointString : strEndpoints) {\n        com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n        com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n        for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n            matcher = endpointStatusPattern.matcher(endpointString);\n            if (matcher.find() && (matcher.groupCount() >= 3)) {\n                status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n                break;\n            }\n        }\n        com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n        com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n        totalLoad += load.or(0.0);\n        io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n        endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n        endpointStates.add(endpointState);\n    }\n    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>>> endpointsByDcAndRack = com.google.common.collect.Maps.newHashMap();\n    java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByDc = endpointStates.stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getDc, java.util.stream.Collectors.toList()));\n    for (java.lang.String dc : endpointsByDc.keySet()) {\n        java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByRack = endpointsByDc.get(dc).stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getRack, java.util.stream.Collectors.toList()));\n        endpointsByDcAndRack.put(dc, endpointsByRack);\n    }\n    return new io.cassandrareaper.resources.view.NodesStatus.GossipInfo(sourceNode, endpointsByDcAndRack, totalLoad, endpoints);\n}",
            "src_parent_type": "Block",
            "src_type": "ForEach"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (recordBuilder != null) {\n    strEndpoints.add(recordBuilder.toString());\n}",
            "src_parent": "{\n    java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState> endpointStates = com.google.common.collect.Lists.newArrayList();\n    java.util.Set<java.lang.String> endpoints = com.google.common.collect.Sets.newHashSet();\n    java.util.regex.Matcher matcher;\n    java.lang.String[] endpointLines = allEndpointStates.split(\"\\n\");\n    java.util.List<java.lang.String> strEndpoints = com.google.common.collect.Lists.newArrayList();\n    java.lang.StringBuilder recordBuilder = null;\n    for (java.lang.String line : endpointLines) {\n        if (!line.startsWith(\"  \")) {\n            if (recordBuilder != null) {\n                strEndpoints.add(recordBuilder.toString());\n            }\n            recordBuilder = new java.lang.StringBuilder(line.substring(line.indexOf('/') + 1));\n        } else if (recordBuilder != null) {\n            recordBuilder.append('\\n');\n            recordBuilder.append(line);\n        }\n    }\n    if (recordBuilder != null) {\n        strEndpoints.add(recordBuilder.toString());\n    }\n    java.util.Map<java.lang.String, java.lang.String> simpleStatesCopy = new java.util.HashMap<>();\n    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : simpleStates.entrySet()) {\n        java.lang.String entryKey = entry.getKey().substring(entry.getKey().indexOf('/'));\n        simpleStatesCopy.put(entryKey, entry.getValue());\n    }\n    simpleStates = simpleStatesCopy;\n    java.lang.Double totalLoad = 0.0;\n    for (java.lang.String endpointString : strEndpoints) {\n        com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n        com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n        for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n            matcher = endpointStatusPattern.matcher(endpointString);\n            if (matcher.find() && (matcher.groupCount() >= 3)) {\n                status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n                break;\n            }\n        }\n        com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n        com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n        totalLoad += load.or(0.0);\n        io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n        endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n        endpointStates.add(endpointState);\n    }\n    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>>> endpointsByDcAndRack = com.google.common.collect.Maps.newHashMap();\n    java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByDc = endpointStates.stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getDc, java.util.stream.Collectors.toList()));\n    for (java.lang.String dc : endpointsByDc.keySet()) {\n        java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByRack = endpointsByDc.get(dc).stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getRack, java.util.stream.Collectors.toList()));\n        endpointsByDcAndRack.put(dc, endpointsByRack);\n    }\n    return new io.cassandrareaper.resources.view.NodesStatus.GossipInfo(sourceNode, endpointsByDcAndRack, totalLoad, endpoints);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.util.Map<java.lang.String, java.lang.String> simpleStatesCopy = new java.util.HashMap<>()",
            "src_parent": "{\n    java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState> endpointStates = com.google.common.collect.Lists.newArrayList();\n    java.util.Set<java.lang.String> endpoints = com.google.common.collect.Sets.newHashSet();\n    java.util.regex.Matcher matcher;\n    java.lang.String[] endpointLines = allEndpointStates.split(\"\\n\");\n    java.util.List<java.lang.String> strEndpoints = com.google.common.collect.Lists.newArrayList();\n    java.lang.StringBuilder recordBuilder = null;\n    for (java.lang.String line : endpointLines) {\n        if (!line.startsWith(\"  \")) {\n            if (recordBuilder != null) {\n                strEndpoints.add(recordBuilder.toString());\n            }\n            recordBuilder = new java.lang.StringBuilder(line.substring(line.indexOf('/') + 1));\n        } else if (recordBuilder != null) {\n            recordBuilder.append('\\n');\n            recordBuilder.append(line);\n        }\n    }\n    if (recordBuilder != null) {\n        strEndpoints.add(recordBuilder.toString());\n    }\n    java.util.Map<java.lang.String, java.lang.String> simpleStatesCopy = new java.util.HashMap<>();\n    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : simpleStates.entrySet()) {\n        java.lang.String entryKey = entry.getKey().substring(entry.getKey().indexOf('/'));\n        simpleStatesCopy.put(entryKey, entry.getValue());\n    }\n    simpleStates = simpleStatesCopy;\n    java.lang.Double totalLoad = 0.0;\n    for (java.lang.String endpointString : strEndpoints) {\n        com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n        com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n        for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n            matcher = endpointStatusPattern.matcher(endpointString);\n            if (matcher.find() && (matcher.groupCount() >= 3)) {\n                status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n                break;\n            }\n        }\n        com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n        com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n        totalLoad += load.or(0.0);\n        io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n        endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n        endpointStates.add(endpointState);\n    }\n    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>>> endpointsByDcAndRack = com.google.common.collect.Maps.newHashMap();\n    java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByDc = endpointStates.stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getDc, java.util.stream.Collectors.toList()));\n    for (java.lang.String dc : endpointsByDc.keySet()) {\n        java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByRack = endpointsByDc.get(dc).stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getRack, java.util.stream.Collectors.toList()));\n        endpointsByDcAndRack.put(dc, endpointsByRack);\n    }\n    return new io.cassandrareaper.resources.view.NodesStatus.GossipInfo(sourceNode, endpointsByDcAndRack, totalLoad, endpoints);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : simpleStates.entrySet()) {\n    java.lang.String entryKey = entry.getKey().substring(entry.getKey().indexOf('/'));\n    simpleStatesCopy.put(entryKey, entry.getValue());\n}",
            "src_parent": "{\n    java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState> endpointStates = com.google.common.collect.Lists.newArrayList();\n    java.util.Set<java.lang.String> endpoints = com.google.common.collect.Sets.newHashSet();\n    java.util.regex.Matcher matcher;\n    java.lang.String[] endpointLines = allEndpointStates.split(\"\\n\");\n    java.util.List<java.lang.String> strEndpoints = com.google.common.collect.Lists.newArrayList();\n    java.lang.StringBuilder recordBuilder = null;\n    for (java.lang.String line : endpointLines) {\n        if (!line.startsWith(\"  \")) {\n            if (recordBuilder != null) {\n                strEndpoints.add(recordBuilder.toString());\n            }\n            recordBuilder = new java.lang.StringBuilder(line.substring(line.indexOf('/') + 1));\n        } else if (recordBuilder != null) {\n            recordBuilder.append('\\n');\n            recordBuilder.append(line);\n        }\n    }\n    if (recordBuilder != null) {\n        strEndpoints.add(recordBuilder.toString());\n    }\n    java.util.Map<java.lang.String, java.lang.String> simpleStatesCopy = new java.util.HashMap<>();\n    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : simpleStates.entrySet()) {\n        java.lang.String entryKey = entry.getKey().substring(entry.getKey().indexOf('/'));\n        simpleStatesCopy.put(entryKey, entry.getValue());\n    }\n    simpleStates = simpleStatesCopy;\n    java.lang.Double totalLoad = 0.0;\n    for (java.lang.String endpointString : strEndpoints) {\n        com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n        com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n        for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n            matcher = endpointStatusPattern.matcher(endpointString);\n            if (matcher.find() && (matcher.groupCount() >= 3)) {\n                status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n                break;\n            }\n        }\n        com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n        com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n        totalLoad += load.or(0.0);\n        io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n        endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n        endpointStates.add(endpointState);\n    }\n    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>>> endpointsByDcAndRack = com.google.common.collect.Maps.newHashMap();\n    java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByDc = endpointStates.stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getDc, java.util.stream.Collectors.toList()));\n    for (java.lang.String dc : endpointsByDc.keySet()) {\n        java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByRack = endpointsByDc.get(dc).stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getRack, java.util.stream.Collectors.toList()));\n        endpointsByDcAndRack.put(dc, endpointsByRack);\n    }\n    return new io.cassandrareaper.resources.view.NodesStatus.GossipInfo(sourceNode, endpointsByDcAndRack, totalLoad, endpoints);\n}",
            "src_parent_type": "Block",
            "src_type": "ForEach"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "simpleStates = simpleStatesCopy",
            "src_parent": "{\n    java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState> endpointStates = com.google.common.collect.Lists.newArrayList();\n    java.util.Set<java.lang.String> endpoints = com.google.common.collect.Sets.newHashSet();\n    java.util.regex.Matcher matcher;\n    java.lang.String[] endpointLines = allEndpointStates.split(\"\\n\");\n    java.util.List<java.lang.String> strEndpoints = com.google.common.collect.Lists.newArrayList();\n    java.lang.StringBuilder recordBuilder = null;\n    for (java.lang.String line : endpointLines) {\n        if (!line.startsWith(\"  \")) {\n            if (recordBuilder != null) {\n                strEndpoints.add(recordBuilder.toString());\n            }\n            recordBuilder = new java.lang.StringBuilder(line.substring(line.indexOf('/') + 1));\n        } else if (recordBuilder != null) {\n            recordBuilder.append('\\n');\n            recordBuilder.append(line);\n        }\n    }\n    if (recordBuilder != null) {\n        strEndpoints.add(recordBuilder.toString());\n    }\n    java.util.Map<java.lang.String, java.lang.String> simpleStatesCopy = new java.util.HashMap<>();\n    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : simpleStates.entrySet()) {\n        java.lang.String entryKey = entry.getKey().substring(entry.getKey().indexOf('/'));\n        simpleStatesCopy.put(entryKey, entry.getValue());\n    }\n    simpleStates = simpleStatesCopy;\n    java.lang.Double totalLoad = 0.0;\n    for (java.lang.String endpointString : strEndpoints) {\n        com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n        com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n        for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n            matcher = endpointStatusPattern.matcher(endpointString);\n            if (matcher.find() && (matcher.groupCount() >= 3)) {\n                status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n                break;\n            }\n        }\n        com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n        com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n        totalLoad += load.or(0.0);\n        io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n        endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n        endpointStates.add(endpointState);\n    }\n    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>>> endpointsByDcAndRack = com.google.common.collect.Maps.newHashMap();\n    java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByDc = endpointStates.stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getDc, java.util.stream.Collectors.toList()));\n    for (java.lang.String dc : endpointsByDc.keySet()) {\n        java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByRack = endpointsByDc.get(dc).stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getRack, java.util.stream.Collectors.toList()));\n        endpointsByDcAndRack.put(dc, endpointsByRack);\n    }\n    return new io.cassandrareaper.resources.view.NodesStatus.GossipInfo(sourceNode, endpointsByDcAndRack, totalLoad, endpoints);\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "for (java.lang.String endpointString : strEndpoints) {\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "src_parent": "{\n    java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState> endpointStates = com.google.common.collect.Lists.newArrayList();\n    java.util.Set<java.lang.String> endpoints = com.google.common.collect.Sets.newHashSet();\n    java.util.regex.Matcher matcher;\n    java.lang.String[] endpointLines = allEndpointStates.split(\"\\n\");\n    java.util.List<java.lang.String> strEndpoints = com.google.common.collect.Lists.newArrayList();\n    java.lang.StringBuilder recordBuilder = null;\n    for (java.lang.String line : endpointLines) {\n        if (!line.startsWith(\"  \")) {\n            if (recordBuilder != null) {\n                strEndpoints.add(recordBuilder.toString());\n            }\n            recordBuilder = new java.lang.StringBuilder(line.substring(line.indexOf('/') + 1));\n        } else if (recordBuilder != null) {\n            recordBuilder.append('\\n');\n            recordBuilder.append(line);\n        }\n    }\n    if (recordBuilder != null) {\n        strEndpoints.add(recordBuilder.toString());\n    }\n    java.util.Map<java.lang.String, java.lang.String> simpleStatesCopy = new java.util.HashMap<>();\n    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : simpleStates.entrySet()) {\n        java.lang.String entryKey = entry.getKey().substring(entry.getKey().indexOf('/'));\n        simpleStatesCopy.put(entryKey, entry.getValue());\n    }\n    simpleStates = simpleStatesCopy;\n    java.lang.Double totalLoad = 0.0;\n    for (java.lang.String endpointString : strEndpoints) {\n        com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n        com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n        for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n            matcher = endpointStatusPattern.matcher(endpointString);\n            if (matcher.find() && (matcher.groupCount() >= 3)) {\n                status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n                break;\n            }\n        }\n        com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n        com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n        com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n        totalLoad += load.or(0.0);\n        io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n        endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n        endpointStates.add(endpointState);\n    }\n    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>>> endpointsByDcAndRack = com.google.common.collect.Maps.newHashMap();\n    java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByDc = endpointStates.stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getDc, java.util.stream.Collectors.toList()));\n    for (java.lang.String dc : endpointsByDc.keySet()) {\n        java.util.Map<java.lang.String, java.util.List<io.cassandrareaper.resources.view.NodesStatus.EndpointState>> endpointsByRack = endpointsByDc.get(dc).stream().collect(java.util.stream.Collectors.groupingBy(io.cassandrareaper.resources.view.NodesStatus.EndpointState::getRack, java.util.stream.Collectors.toList()));\n        endpointsByDcAndRack.put(dc, endpointsByRack);\n    }\n    return new io.cassandrareaper.resources.view.NodesStatus.GossipInfo(sourceNode, endpointsByDcAndRack, totalLoad, endpoints);\n}",
            "src_parent_type": "Block",
            "src_type": "ForEach"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.StringBuilder",
            "dst_parent": "java.lang.StringBuilder recordBuilder = null",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "int",
            "src_parent": "int i = 1",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "java.lang.StringBuilder recordBuilder = null",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Literal",
            "operator": "MOV",
            "src": "1",
            "src_parent": "int i = 1",
            "src_parent_type": "LocalVariable",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent()",
            "dst_parent": "{\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent()",
            "src_parent": "{\n    java.lang.String endpointString = strEndpoints[i];\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class)",
            "dst_parent": "{\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class)",
            "src_parent": "{\n    java.lang.String endpointString = strEndpoints[i];\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n    matcher = endpointStatusPattern.matcher(endpointString);\n    if (matcher.find() && (matcher.groupCount() >= 3)) {\n        status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n        break;\n    }\n}",
            "dst_parent": "{\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "dst_parent_type": "Block",
            "dst_type": "ForEach",
            "operator": "MOV",
            "src": "for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n    matcher = endpointStatusPattern.matcher(endpointString);\n    if (matcher.find() && (matcher.groupCount() >= 3)) {\n        status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n        break;\n    }\n}",
            "src_parent": "{\n    java.lang.String endpointString = strEndpoints[i];\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "src_parent_type": "Block",
            "src_type": "ForEach"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class)",
            "dst_parent": "{\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class)",
            "src_parent": "{\n    java.lang.String endpointString = strEndpoints[i];\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class)",
            "dst_parent": "{\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class)",
            "src_parent": "{\n    java.lang.String endpointString = strEndpoints[i];\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class)",
            "dst_parent": "{\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class)",
            "src_parent": "{\n    java.lang.String endpointString = strEndpoints[i];\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class)",
            "dst_parent": "{\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class)",
            "src_parent": "{\n    java.lang.String endpointString = strEndpoints[i];\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class)",
            "dst_parent": "{\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class)",
            "src_parent": "{\n    java.lang.String endpointString = strEndpoints[i];\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class)",
            "dst_parent": "{\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class)",
            "src_parent": "{\n    java.lang.String endpointString = strEndpoints[i];\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class)",
            "dst_parent": "{\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class)",
            "src_parent": "{\n    java.lang.String endpointString = strEndpoints[i];\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "totalLoad += load.or(0.0)",
            "dst_parent": "{\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "dst_parent_type": "Block",
            "dst_type": "OperatorAssignment",
            "operator": "MOV",
            "src": "totalLoad += load.or(0.0)",
            "src_parent": "{\n    java.lang.String endpointString = strEndpoints[i];\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "src_parent_type": "Block",
            "src_type": "OperatorAssignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0))",
            "dst_parent": "{\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0))",
            "src_parent": "{\n    java.lang.String endpointString = strEndpoints[i];\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE))",
            "dst_parent": "{\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE))",
            "src_parent": "{\n    java.lang.String endpointString = strEndpoints[i];\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "endpointStates.add(endpointState)",
            "dst_parent": "{\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "endpointStates.add(endpointState)",
            "src_parent": "{\n    java.lang.String endpointString = strEndpoints[i];\n    com.google.common.base.Optional<java.lang.String> status = com.google.common.base.Optional.absent();\n    com.google.common.base.Optional<java.lang.String> endpoint = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_NAME_PATTERNS, endpointString, 1, java.lang.String.class);\n    for (java.util.regex.Pattern endpointStatusPattern : io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_STATUS_PATTERNS) {\n        matcher = endpointStatusPattern.matcher(endpointString);\n        if (matcher.find() && (matcher.groupCount() >= 3)) {\n            status = com.google.common.base.Optional.of((matcher.group(3) + \" - \") + simpleStates.getOrDefault(\"/\" + endpoint.or(\"\"), \"UNKNOWN\"));\n            break;\n        }\n    }\n    com.google.common.base.Optional<java.lang.String> dc = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_DC_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> rack = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RACK_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> severity = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_SEVERITY_PATTERNS, endpointString, 3, java.lang.Double.class);\n    com.google.common.base.Optional<java.lang.String> releaseVersion = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_RELEASE_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> hostId = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_HOSTID_PATTERNS, endpointString, 3, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.String> tokens = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_TOKENS_PATTERNS, endpointString, 2, java.lang.String.class);\n    com.google.common.base.Optional<java.lang.Double> load = parseEndpointState(io.cassandrareaper.resources.view.NodesStatus.ENDPOINT_LOAD_PATTERNS, endpointString, 3, java.lang.Double.class);\n    totalLoad += load.or(0.0);\n    io.cassandrareaper.resources.view.NodesStatus.EndpointState endpointState = new io.cassandrareaper.resources.view.NodesStatus.EndpointState(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), hostId.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), dc.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), rack.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), status.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), severity.or(0.0), releaseVersion.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), tokens.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE), load.or(0.0));\n    endpoints.add(endpoint.or(io.cassandrareaper.resources.view.NodesStatus.NOT_AVAILABLE));\n    endpointStates.add(endpointState);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String",
            "dst_parent": "java.lang.String entryKey = entry.getKey().substring(entry.getKey().indexOf('/'))",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "java.lang.String",
            "src_parent": "java.lang.String endpointString = strEndpoints[i]",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        }
      ],
      "file_name": "NodesStatus"
    }
  ],
  "id": "bears_190"
}