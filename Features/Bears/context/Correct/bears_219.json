{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2))",
            "src_parent": "return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2))",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2))",
            "src_parent": "return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2))",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2))",
            "src_parent": "return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2))",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2))",
            "src_parent": "return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2))",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2))",
            "src_parent": "return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2))",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "extractVariable(javaVersion).substring(2)",
            "src_parent": "java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2))",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public int getSourceVersion() {\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    return environment.getComplianceLevel();\n}",
            "src_parent": "public class SpoonPom implements spoon.compiler.SpoonResource {\n    static java.lang.String mavenVersionParsing = \"Maven home: \";\n\n    static java.lang.String spoonClasspathTmpFileName = \"spoon.classpath.tmp\";\n\n    static java.lang.String spoonClasspathTmpFileNameApp = \"spoon.classpath-app.tmp\";\n\n    static java.lang.String spoonClasspathTmpFileNameTest = \"spoon.classpath-test.tmp\";\n\n    static long classpathTmpFilesTTL = (60 * 60) * 1000L;\n\n    java.util.List<spoon.support.compiler.SpoonPom> modules = new java.util.ArrayList<>();\n\n    org.apache.maven.model.Model model;\n\n    spoon.support.compiler.SpoonPom parent;\n\n    java.io.File pomFile;\n\n    java.io.File directory;\n\n    spoon.MavenLauncher.SOURCE_TYPE sourceType;\n\n    spoon.compiler.Environment environment;\n\n    public SpoonPom(java.lang.String path, spoon.MavenLauncher.SOURCE_TYPE sourceType, spoon.compiler.Environment environment) throws java.io.IOException, org.codehaus.plexus.util.xml.pull.XmlPullParserException {\n        this(path, null, sourceType, environment);\n    }\n\n    public SpoonPom(java.lang.String path, spoon.support.compiler.SpoonPom parent, spoon.MavenLauncher.SOURCE_TYPE sourceType, spoon.compiler.Environment environment) throws java.io.IOException, org.codehaus.plexus.util.xml.pull.XmlPullParserException {\n        this.parent = parent;\n        this.sourceType = sourceType;\n        this.environment = environment;\n        if ((!path.endsWith(\".xml\")) && (!path.endsWith(\".pom\"))) {\n            path = java.nio.file.Paths.get(path, \"pom.xml\").toString();\n        }\n        this.pomFile = new java.io.File(path);\n        if (!pomFile.exists()) {\n            throw new java.io.IOException(\"Pom does not exists.\");\n        }\n        this.directory = pomFile.getParentFile();\n        org.apache.maven.model.io.xpp3.MavenXpp3Reader pomReader = new org.apache.maven.model.io.xpp3.MavenXpp3Reader();\n        try (final java.io.FileReader reader = new java.io.FileReader(pomFile)) {\n            this.model = pomReader.read(reader);\n            for (java.lang.String module : model.getModules()) {\n                addModule(new spoon.support.compiler.SpoonPom(java.nio.file.Paths.get(pomFile.getParent(), module).toString(), this, sourceType, environment));\n            }\n        } catch (java.io.FileNotFoundException e) {\n            throw new java.io.IOException(\"Pom does not exists.\");\n        }\n    }\n\n    private void addModule(spoon.support.compiler.SpoonPom module) {\n        modules.add(module);\n    }\n\n    public org.apache.maven.model.Model getModel() {\n        return model;\n    }\n\n    public java.util.List<java.io.File> getSourceDirectories() {\n        java.util.List<java.io.File> output = new java.util.ArrayList<>();\n        java.lang.String sourcePath = null;\n        org.apache.maven.model.Build build = model.getBuild();\n        if (build != null) {\n            sourcePath = build.getSourceDirectory();\n        }\n        if (sourcePath == null) {\n            sourcePath = java.nio.file.Paths.get(directory.getAbsolutePath(), \"src\", \"main\", \"java\").toString();\n        }\n        java.io.File source = new java.io.File(sourcePath);\n        if (source.exists()) {\n            output.add(source);\n        }\n        java.io.File generatedSource = java.nio.file.Paths.get(directory.getAbsolutePath(), \"target\", \"generated-sources\").toFile();\n        if (generatedSource.exists()) {\n            output.add(generatedSource);\n        }\n        for (spoon.support.compiler.SpoonPom module : modules) {\n            output.addAll(module.getSourceDirectories());\n        }\n        return output;\n    }\n\n    public java.util.List<java.io.File> getTestDirectories() {\n        java.util.List<java.io.File> output = new java.util.ArrayList<>();\n        java.lang.String sourcePath = null;\n        org.apache.maven.model.Build build = model.getBuild();\n        if (build != null) {\n            sourcePath = build.getTestSourceDirectory();\n        }\n        if (sourcePath == null) {\n            sourcePath = java.nio.file.Paths.get(directory.getAbsolutePath(), \"src\", \"test\", \"java\").toString();\n        }\n        java.io.File source = new java.io.File(sourcePath);\n        if (source.exists()) {\n            output.add(source);\n        }\n        java.io.File generatedSource = java.nio.file.Paths.get(directory.getAbsolutePath(), \"target\", \"generated-test-sources\").toFile();\n        if (generatedSource.exists()) {\n            output.add(generatedSource);\n        }\n        for (spoon.support.compiler.SpoonPom module : modules) {\n            output.addAll(module.getTestDirectories());\n        }\n        return output;\n    }\n\n    public java.util.List<java.io.File> getClasspathTmpFiles(java.lang.String fileName) {\n        java.util.List<java.io.File> output = new java.util.ArrayList<>();\n        java.io.File tmp = new java.io.File(directory, fileName);\n        if (tmp.exists() && tmp.isFile()) {\n            output.add(tmp);\n        }\n        for (spoon.support.compiler.SpoonPom module : modules) {\n            output.addAll(module.getClasspathTmpFiles(fileName));\n        }\n        return output;\n    }\n\n    private static java.util.regex.Pattern mavenProperty = java.util.regex.Pattern.compile(\"\\\\$\\\\{.*\\\\}\");\n\n    private java.lang.String extractVariable(java.lang.String value) {\n        java.lang.String val = value;\n        if ((value != null) && value.contains(\"$\")) {\n            java.util.regex.Matcher matcher = spoon.support.compiler.SpoonPom.mavenProperty.matcher(value);\n            while (matcher.find()) {\n                java.lang.String var = matcher.group();\n                val = val.replace(var, getProperty(var.substring(2, var.length() - 1)));\n            } \n        }\n        return val;\n    }\n\n    private java.lang.String getProperty(java.lang.String key) {\n        if (\"project.version\".equals(key) || \"pom.version\".equals(key)) {\n            if (model.getVersion() != null) {\n                return model.getVersion();\n            } else if (model.getParent() != null) {\n                return model.getParent().getVersion();\n            }\n        } else if (\"project.groupId\".equals(key) || \"pom.groupId\".equals(key)) {\n            if (model.getGroupId() != null) {\n                return model.getGroupId();\n            } else if (model.getParent() != null) {\n                return model.getParent().getGroupId();\n            }\n        } else if (\"project.artifactId\".equals(key) || \"pom.artifactId\".equals(key)) {\n            if (model.getArtifactId() != null) {\n                return model.getArtifactId();\n            } else if (model.getParent() != null) {\n                return model.getParent().getArtifactId();\n            }\n        }\n        java.lang.String value = extractVariable(model.getProperties().getProperty(key));\n        if (value == null) {\n            if (parent == null) {\n                return null;\n            }\n            return parent.getProperty(key);\n        }\n        return value;\n    }\n\n    public int getSourceVersion() {\n        java.lang.String javaVersion = null;\n        if (model.getBuild() != null) {\n            javaVersion = getSourceVersion(model.getBuild());\n        }\n        if (javaVersion != null) {\n            return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n        }\n        for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n            if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n                javaVersion = getSourceVersion(profile.getBuild());\n            }\n        }\n        if (javaVersion != null) {\n            return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n        }\n        javaVersion = getProperty(\"java.version\");\n        if (javaVersion != null) {\n            return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n        }\n        javaVersion = getProperty(\"java.src.version\");\n        if (javaVersion != null) {\n            return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n        }\n        javaVersion = getProperty(\"maven.compiler.source\");\n        if (javaVersion != null) {\n            return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n        }\n        javaVersion = getProperty(\"maven.compile.source\");\n        if (javaVersion != null) {\n            return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n        }\n        return environment.getComplianceLevel();\n    }\n\n    private java.lang.String getSourceVersion(org.apache.maven.model.BuildBase build) {\n        for (org.apache.maven.model.Plugin plugin : build.getPlugins()) {\n            if (!\"maven-compiler-plugin\".equals(plugin.getArtifactId())) {\n                continue;\n            }\n            org.codehaus.plexus.util.xml.Xpp3Dom configuration = ((org.codehaus.plexus.util.xml.Xpp3Dom) (plugin.getConfiguration()));\n            if (configuration != null) {\n                org.codehaus.plexus.util.xml.Xpp3Dom source = configuration.getChild(\"source\");\n                if (source != null) {\n                    return source.getValue();\n                }\n            }\n            break;\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        sb.append(model.getGroupId());\n        sb.append(\":\");\n        sb.append(model.getArtifactId());\n        sb.append(\":\");\n        sb.append(model.getVersion());\n        if (modules.isEmpty()) {\n            return sb.toString();\n        }\n        sb.append(\" {\\n\");\n        for (spoon.support.compiler.SpoonPom spoonPom : modules) {\n            java.lang.String child = spoonPom.toString();\n            for (java.lang.String s : child.split(\"\\n\")) {\n                sb.append(\"\\t\");\n                sb.append(s);\n                sb.append(\"\\n\");\n            }\n        }\n        sb.append(\"}\");\n        return sb.toString();\n    }\n\n    private void generateClassPathFile(java.io.File mvnHome, spoon.MavenLauncher.SOURCE_TYPE sourceType, org.apache.log4j.Logger LOGGER, boolean forceRefresh) {\n        java.io.File classpathFile = new java.io.File(directory, spoon.support.compiler.SpoonPom.getSpoonClasspathTmpFileName(sourceType));\n        java.util.Date date = new java.util.Date();\n        long time = date.getTime();\n        if ((forceRefresh || (!classpathFile.exists())) || ((time - classpathFile.lastModified()) > spoon.support.compiler.SpoonPom.classpathTmpFilesTTL)) {\n            org.apache.maven.shared.invoker.InvocationRequest request = new org.apache.maven.shared.invoker.DefaultInvocationRequest();\n            request.setBatchMode(true);\n            request.setPomFile(pomFile);\n            request.setGoals(java.util.Collections.singletonList(\"dependency:build-classpath\"));\n            java.util.Properties properties = new java.util.Properties();\n            if (sourceType == spoon.MavenLauncher.SOURCE_TYPE.APP_SOURCE) {\n                properties.setProperty(\"includeScope\", \"runtime\");\n            }\n            properties.setProperty(\"mdep.outputFile\", spoon.support.compiler.SpoonPom.getSpoonClasspathTmpFileName(sourceType));\n            request.setProperties(properties);\n            if (LOGGER != null) {\n                request.getOutputHandler(( s) -> LOGGER.debug(s));\n                request.getErrorHandler(( s) -> LOGGER.debug(s));\n            }\n            org.apache.maven.shared.invoker.Invoker invoker = new org.apache.maven.shared.invoker.DefaultInvoker();\n            invoker.setMavenHome(mvnHome);\n            invoker.setWorkingDirectory(directory);\n            invoker.setErrorHandler(( s) -> LOGGER.debug(s));\n            invoker.setOutputHandler(( s) -> LOGGER.debug(s));\n            try {\n                invoker.execute(request);\n            } catch (org.apache.maven.shared.invoker.MavenInvocationException e) {\n                throw new spoon.SpoonException(\"Maven invocation failed to build a classpath.\");\n            }\n            classpathFile.setLastModified(time);\n        }\n    }\n\n    private static java.lang.String[] readClassPath(java.io.File... classPathFiles) throws java.io.IOException {\n        java.util.List<java.lang.String> classpathElements = new java.util.ArrayList<>();\n        for (java.io.File classPathFile : classPathFiles) {\n            try (final java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(classPathFile))) {\n                java.lang.StringBuilder sb = new java.lang.StringBuilder();\n                java.lang.String line = br.readLine();\n                while (line != null) {\n                    sb.append(line);\n                    line = br.readLine();\n                } \n                if (!\"\".equals(sb.toString())) {\n                    java.lang.String[] classpath = sb.toString().split(java.io.File.pathSeparator);\n                    for (java.lang.String cpe : classpath) {\n                        if (!classpathElements.contains(cpe)) {\n                            classpathElements.add(cpe);\n                        }\n                    }\n                }\n            }\n        }\n        return classpathElements.toArray(new java.lang.String[0]);\n    }\n\n    private static java.lang.String guessMavenHome() {\n        java.lang.String mvnHome = null;\n        try {\n            java.lang.String[] cmd;\n            if (java.lang.System.getProperty(\"os.name\").contains(\"Windows\")) {\n                cmd = new java.lang.String[]{ \"mvn.cmd\", \"-version\" };\n            } else {\n                cmd = new java.lang.String[]{ \"mvn\", \"-version\" };\n            }\n            java.lang.Process p = java.lang.Runtime.getRuntime().exec(cmd);\n            try (final java.io.BufferedReader output = new java.io.BufferedReader(new java.io.InputStreamReader(p.getInputStream()))) {\n                java.lang.String line;\n                while ((line = output.readLine()) != null) {\n                    if (line.contains(spoon.support.compiler.SpoonPom.mavenVersionParsing)) {\n                        return line.replace(spoon.support.compiler.SpoonPom.mavenVersionParsing, \"\");\n                    }\n                } \n            }\n            p.waitFor();\n        } catch (java.io.IOException e) {\n            throw new spoon.SpoonException(\"Maven home detection has failed.\");\n        } catch (java.lang.InterruptedException e) {\n            throw new spoon.SpoonException(\"Maven home detection was interrupted.\");\n        }\n        return mvnHome;\n    }\n\n    public java.lang.String[] buildClassPath(java.lang.String mvnHome, spoon.MavenLauncher.SOURCE_TYPE sourceType, org.apache.log4j.Logger LOGGER, boolean forceRefresh) {\n        if (mvnHome == null) {\n            mvnHome = spoon.support.compiler.SpoonPom.guessMavenHome();\n            if (mvnHome == null) {\n                throw new spoon.SpoonException(\"M2_HOME must be initialized to use this MavenLauncher constructor.\");\n            }\n        }\n        generateClassPathFile(new java.io.File(mvnHome), sourceType, LOGGER, forceRefresh);\n        java.util.List<java.io.File> classPathPrints;\n        java.lang.String[] classpath;\n        try {\n            classPathPrints = getClasspathTmpFiles(spoon.support.compiler.SpoonPom.getSpoonClasspathTmpFileName(sourceType));\n            java.io.File[] classPathPrintFiles = new java.io.File[classPathPrints.size()];\n            classPathPrintFiles = classPathPrints.toArray(classPathPrintFiles);\n            classpath = spoon.support.compiler.SpoonPom.readClassPath(classPathPrintFiles);\n        } catch (java.io.IOException e) {\n            throw new spoon.SpoonException((\"Failed to generate class path for \" + pomFile.getAbsolutePath()) + \".\");\n        }\n        return classpath;\n    }\n\n    private static java.lang.String getSpoonClasspathTmpFileName(spoon.MavenLauncher.SOURCE_TYPE sourceType) {\n        if (spoon.MavenLauncher.SOURCE_TYPE.TEST_SOURCE == sourceType) {\n            return spoon.support.compiler.SpoonPom.spoonClasspathTmpFileNameTest;\n        } else if (spoon.MavenLauncher.SOURCE_TYPE.APP_SOURCE == sourceType) {\n            return spoon.support.compiler.SpoonPom.spoonClasspathTmpFileNameApp;\n        } else {\n            return spoon.support.compiler.SpoonPom.spoonClasspathTmpFileName;\n        }\n    }\n\n    public spoon.support.compiler.SpoonPom getParentPom() {\n        return parent;\n    }\n\n    @java.lang.Override\n    public spoon.compiler.SpoonFolder getParent() {\n        try {\n            return spoon.compiler.SpoonResourceHelper.createFolder(directory);\n        } catch (java.io.FileNotFoundException e) {\n            spoon.Launcher.LOGGER.error(e.getMessage(), e);\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.io.File getFileSystemParent() {\n        return directory;\n    }\n\n    @java.lang.Override\n    public java.lang.String getName() {\n        return \"pom\";\n    }\n\n    @java.lang.Override\n    public boolean isFile() {\n        return true;\n    }\n\n    @java.lang.Override\n    public boolean isArchive() {\n        return false;\n    }\n\n    @java.lang.Override\n    public java.lang.String getPath() {\n        return pomFile.getPath();\n    }\n\n    @java.lang.Override\n    public java.io.File toFile() {\n        return pomFile;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public int getSourceVersion() {\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    return environment.getComplianceLevel();\n}",
            "src_parent": "public class SpoonPom implements spoon.compiler.SpoonResource {\n    static java.lang.String mavenVersionParsing = \"Maven home: \";\n\n    static java.lang.String spoonClasspathTmpFileName = \"spoon.classpath.tmp\";\n\n    static java.lang.String spoonClasspathTmpFileNameApp = \"spoon.classpath-app.tmp\";\n\n    static java.lang.String spoonClasspathTmpFileNameTest = \"spoon.classpath-test.tmp\";\n\n    static long classpathTmpFilesTTL = (60 * 60) * 1000L;\n\n    java.util.List<spoon.support.compiler.SpoonPom> modules = new java.util.ArrayList<>();\n\n    org.apache.maven.model.Model model;\n\n    spoon.support.compiler.SpoonPom parent;\n\n    java.io.File pomFile;\n\n    java.io.File directory;\n\n    spoon.MavenLauncher.SOURCE_TYPE sourceType;\n\n    spoon.compiler.Environment environment;\n\n    public SpoonPom(java.lang.String path, spoon.MavenLauncher.SOURCE_TYPE sourceType, spoon.compiler.Environment environment) throws java.io.IOException, org.codehaus.plexus.util.xml.pull.XmlPullParserException {\n        this(path, null, sourceType, environment);\n    }\n\n    public SpoonPom(java.lang.String path, spoon.support.compiler.SpoonPom parent, spoon.MavenLauncher.SOURCE_TYPE sourceType, spoon.compiler.Environment environment) throws java.io.IOException, org.codehaus.plexus.util.xml.pull.XmlPullParserException {\n        this.parent = parent;\n        this.sourceType = sourceType;\n        this.environment = environment;\n        if ((!path.endsWith(\".xml\")) && (!path.endsWith(\".pom\"))) {\n            path = java.nio.file.Paths.get(path, \"pom.xml\").toString();\n        }\n        this.pomFile = new java.io.File(path);\n        if (!pomFile.exists()) {\n            throw new java.io.IOException(\"Pom does not exists.\");\n        }\n        this.directory = pomFile.getParentFile();\n        org.apache.maven.model.io.xpp3.MavenXpp3Reader pomReader = new org.apache.maven.model.io.xpp3.MavenXpp3Reader();\n        try (final java.io.FileReader reader = new java.io.FileReader(pomFile)) {\n            this.model = pomReader.read(reader);\n            for (java.lang.String module : model.getModules()) {\n                addModule(new spoon.support.compiler.SpoonPom(java.nio.file.Paths.get(pomFile.getParent(), module).toString(), this, sourceType, environment));\n            }\n        } catch (java.io.FileNotFoundException e) {\n            throw new java.io.IOException(\"Pom does not exists.\");\n        }\n    }\n\n    private void addModule(spoon.support.compiler.SpoonPom module) {\n        modules.add(module);\n    }\n\n    public org.apache.maven.model.Model getModel() {\n        return model;\n    }\n\n    public java.util.List<java.io.File> getSourceDirectories() {\n        java.util.List<java.io.File> output = new java.util.ArrayList<>();\n        java.lang.String sourcePath = null;\n        org.apache.maven.model.Build build = model.getBuild();\n        if (build != null) {\n            sourcePath = build.getSourceDirectory();\n        }\n        if (sourcePath == null) {\n            sourcePath = java.nio.file.Paths.get(directory.getAbsolutePath(), \"src\", \"main\", \"java\").toString();\n        }\n        java.io.File source = new java.io.File(sourcePath);\n        if (source.exists()) {\n            output.add(source);\n        }\n        java.io.File generatedSource = java.nio.file.Paths.get(directory.getAbsolutePath(), \"target\", \"generated-sources\").toFile();\n        if (generatedSource.exists()) {\n            output.add(generatedSource);\n        }\n        for (spoon.support.compiler.SpoonPom module : modules) {\n            output.addAll(module.getSourceDirectories());\n        }\n        return output;\n    }\n\n    public java.util.List<java.io.File> getTestDirectories() {\n        java.util.List<java.io.File> output = new java.util.ArrayList<>();\n        java.lang.String sourcePath = null;\n        org.apache.maven.model.Build build = model.getBuild();\n        if (build != null) {\n            sourcePath = build.getTestSourceDirectory();\n        }\n        if (sourcePath == null) {\n            sourcePath = java.nio.file.Paths.get(directory.getAbsolutePath(), \"src\", \"test\", \"java\").toString();\n        }\n        java.io.File source = new java.io.File(sourcePath);\n        if (source.exists()) {\n            output.add(source);\n        }\n        java.io.File generatedSource = java.nio.file.Paths.get(directory.getAbsolutePath(), \"target\", \"generated-test-sources\").toFile();\n        if (generatedSource.exists()) {\n            output.add(generatedSource);\n        }\n        for (spoon.support.compiler.SpoonPom module : modules) {\n            output.addAll(module.getTestDirectories());\n        }\n        return output;\n    }\n\n    public java.util.List<java.io.File> getClasspathTmpFiles(java.lang.String fileName) {\n        java.util.List<java.io.File> output = new java.util.ArrayList<>();\n        java.io.File tmp = new java.io.File(directory, fileName);\n        if (tmp.exists() && tmp.isFile()) {\n            output.add(tmp);\n        }\n        for (spoon.support.compiler.SpoonPom module : modules) {\n            output.addAll(module.getClasspathTmpFiles(fileName));\n        }\n        return output;\n    }\n\n    private static java.util.regex.Pattern mavenProperty = java.util.regex.Pattern.compile(\"\\\\$\\\\{.*\\\\}\");\n\n    private java.lang.String extractVariable(java.lang.String value) {\n        java.lang.String val = value;\n        if ((value != null) && value.contains(\"$\")) {\n            java.util.regex.Matcher matcher = spoon.support.compiler.SpoonPom.mavenProperty.matcher(value);\n            while (matcher.find()) {\n                java.lang.String var = matcher.group();\n                val = val.replace(var, getProperty(var.substring(2, var.length() - 1)));\n            } \n        }\n        return val;\n    }\n\n    private java.lang.String getProperty(java.lang.String key) {\n        if (\"project.version\".equals(key) || \"pom.version\".equals(key)) {\n            if (model.getVersion() != null) {\n                return model.getVersion();\n            } else if (model.getParent() != null) {\n                return model.getParent().getVersion();\n            }\n        } else if (\"project.groupId\".equals(key) || \"pom.groupId\".equals(key)) {\n            if (model.getGroupId() != null) {\n                return model.getGroupId();\n            } else if (model.getParent() != null) {\n                return model.getParent().getGroupId();\n            }\n        } else if (\"project.artifactId\".equals(key) || \"pom.artifactId\".equals(key)) {\n            if (model.getArtifactId() != null) {\n                return model.getArtifactId();\n            } else if (model.getParent() != null) {\n                return model.getParent().getArtifactId();\n            }\n        }\n        java.lang.String value = extractVariable(model.getProperties().getProperty(key));\n        if (value == null) {\n            if (parent == null) {\n                return null;\n            }\n            return parent.getProperty(key);\n        }\n        return value;\n    }\n\n    public int getSourceVersion() {\n        java.lang.String javaVersion = null;\n        if (model.getBuild() != null) {\n            javaVersion = getSourceVersion(model.getBuild());\n        }\n        if (javaVersion != null) {\n            return correctJavaVersion(javaVersion);\n        }\n        for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n            if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n                javaVersion = getSourceVersion(profile.getBuild());\n            }\n        }\n        if (javaVersion != null) {\n            return correctJavaVersion(javaVersion);\n        }\n        javaVersion = getProperty(\"java.version\");\n        if (javaVersion != null) {\n            return correctJavaVersion(javaVersion);\n        }\n        javaVersion = getProperty(\"java.src.version\");\n        if (javaVersion != null) {\n            return correctJavaVersion(javaVersion);\n        }\n        javaVersion = getProperty(\"maven.compiler.source\");\n        if (javaVersion != null) {\n            return correctJavaVersion(javaVersion);\n        }\n        javaVersion = getProperty(\"maven.compile.source\");\n        if (javaVersion != null) {\n            return correctJavaVersion(javaVersion);\n        }\n        return environment.getComplianceLevel();\n    }\n\n    private int correctJavaVersion(java.lang.String javaVersion) {\n        java.lang.String version = extractVariable(javaVersion);\n        return java.lang.Integer.parseInt(version.contains(\".\") ? version.substring(2) : version);\n    }\n\n    private java.lang.String getSourceVersion(org.apache.maven.model.BuildBase build) {\n        for (org.apache.maven.model.Plugin plugin : build.getPlugins()) {\n            if (!\"maven-compiler-plugin\".equals(plugin.getArtifactId())) {\n                continue;\n            }\n            org.codehaus.plexus.util.xml.Xpp3Dom configuration = ((org.codehaus.plexus.util.xml.Xpp3Dom) (plugin.getConfiguration()));\n            if (configuration != null) {\n                org.codehaus.plexus.util.xml.Xpp3Dom source = configuration.getChild(\"source\");\n                if (source != null) {\n                    return source.getValue();\n                }\n            }\n            break;\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        sb.append(model.getGroupId());\n        sb.append(\":\");\n        sb.append(model.getArtifactId());\n        sb.append(\":\");\n        sb.append(model.getVersion());\n        if (modules.isEmpty()) {\n            return sb.toString();\n        }\n        sb.append(\" {\\n\");\n        for (spoon.support.compiler.SpoonPom spoonPom : modules) {\n            java.lang.String child = spoonPom.toString();\n            for (java.lang.String s : child.split(\"\\n\")) {\n                sb.append(\"\\t\");\n                sb.append(s);\n                sb.append(\"\\n\");\n            }\n        }\n        sb.append(\"}\");\n        return sb.toString();\n    }\n\n    private void generateClassPathFile(java.io.File mvnHome, spoon.MavenLauncher.SOURCE_TYPE sourceType, org.apache.log4j.Logger LOGGER, boolean forceRefresh) {\n        java.io.File classpathFile = new java.io.File(directory, spoon.support.compiler.SpoonPom.getSpoonClasspathTmpFileName(sourceType));\n        java.util.Date date = new java.util.Date();\n        long time = date.getTime();\n        if ((forceRefresh || (!classpathFile.exists())) || ((time - classpathFile.lastModified()) > spoon.support.compiler.SpoonPom.classpathTmpFilesTTL)) {\n            org.apache.maven.shared.invoker.InvocationRequest request = new org.apache.maven.shared.invoker.DefaultInvocationRequest();\n            request.setBatchMode(true);\n            request.setPomFile(pomFile);\n            request.setGoals(java.util.Collections.singletonList(\"dependency:build-classpath\"));\n            java.util.Properties properties = new java.util.Properties();\n            if (sourceType == spoon.MavenLauncher.SOURCE_TYPE.APP_SOURCE) {\n                properties.setProperty(\"includeScope\", \"runtime\");\n            }\n            properties.setProperty(\"mdep.outputFile\", spoon.support.compiler.SpoonPom.getSpoonClasspathTmpFileName(sourceType));\n            request.setProperties(properties);\n            if (LOGGER != null) {\n                request.getOutputHandler(( s) -> LOGGER.debug(s));\n                request.getErrorHandler(( s) -> LOGGER.debug(s));\n            }\n            org.apache.maven.shared.invoker.Invoker invoker = new org.apache.maven.shared.invoker.DefaultInvoker();\n            invoker.setMavenHome(mvnHome);\n            invoker.setWorkingDirectory(directory);\n            invoker.setErrorHandler(( s) -> LOGGER.debug(s));\n            invoker.setOutputHandler(( s) -> LOGGER.debug(s));\n            try {\n                invoker.execute(request);\n            } catch (org.apache.maven.shared.invoker.MavenInvocationException e) {\n                throw new spoon.SpoonException(\"Maven invocation failed to build a classpath.\");\n            }\n            classpathFile.setLastModified(time);\n        }\n    }\n\n    private static java.lang.String[] readClassPath(java.io.File... classPathFiles) throws java.io.IOException {\n        java.util.List<java.lang.String> classpathElements = new java.util.ArrayList<>();\n        for (java.io.File classPathFile : classPathFiles) {\n            try (final java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(classPathFile))) {\n                java.lang.StringBuilder sb = new java.lang.StringBuilder();\n                java.lang.String line = br.readLine();\n                while (line != null) {\n                    sb.append(line);\n                    line = br.readLine();\n                } \n                if (!\"\".equals(sb.toString())) {\n                    java.lang.String[] classpath = sb.toString().split(java.io.File.pathSeparator);\n                    for (java.lang.String cpe : classpath) {\n                        if (!classpathElements.contains(cpe)) {\n                            classpathElements.add(cpe);\n                        }\n                    }\n                }\n            }\n        }\n        return classpathElements.toArray(new java.lang.String[0]);\n    }\n\n    private static java.lang.String guessMavenHome() {\n        java.lang.String mvnHome = null;\n        try {\n            java.lang.String[] cmd;\n            if (java.lang.System.getProperty(\"os.name\").contains(\"Windows\")) {\n                cmd = new java.lang.String[]{ \"mvn.cmd\", \"-version\" };\n            } else {\n                cmd = new java.lang.String[]{ \"mvn\", \"-version\" };\n            }\n            java.lang.Process p = java.lang.Runtime.getRuntime().exec(cmd);\n            try (final java.io.BufferedReader output = new java.io.BufferedReader(new java.io.InputStreamReader(p.getInputStream()))) {\n                java.lang.String line;\n                while ((line = output.readLine()) != null) {\n                    if (line.contains(spoon.support.compiler.SpoonPom.mavenVersionParsing)) {\n                        return line.replace(spoon.support.compiler.SpoonPom.mavenVersionParsing, \"\");\n                    }\n                } \n            }\n            p.waitFor();\n        } catch (java.io.IOException e) {\n            throw new spoon.SpoonException(\"Maven home detection has failed.\");\n        } catch (java.lang.InterruptedException e) {\n            throw new spoon.SpoonException(\"Maven home detection was interrupted.\");\n        }\n        return mvnHome;\n    }\n\n    public java.lang.String[] buildClassPath(java.lang.String mvnHome, spoon.MavenLauncher.SOURCE_TYPE sourceType, org.apache.log4j.Logger LOGGER, boolean forceRefresh) {\n        if (mvnHome == null) {\n            mvnHome = spoon.support.compiler.SpoonPom.guessMavenHome();\n            if (mvnHome == null) {\n                throw new spoon.SpoonException(\"M2_HOME must be initialized to use this MavenLauncher constructor.\");\n            }\n        }\n        generateClassPathFile(new java.io.File(mvnHome), sourceType, LOGGER, forceRefresh);\n        java.util.List<java.io.File> classPathPrints;\n        java.lang.String[] classpath;\n        try {\n            classPathPrints = getClasspathTmpFiles(spoon.support.compiler.SpoonPom.getSpoonClasspathTmpFileName(sourceType));\n            java.io.File[] classPathPrintFiles = new java.io.File[classPathPrints.size()];\n            classPathPrintFiles = classPathPrints.toArray(classPathPrintFiles);\n            classpath = spoon.support.compiler.SpoonPom.readClassPath(classPathPrintFiles);\n        } catch (java.io.IOException e) {\n            throw new spoon.SpoonException((\"Failed to generate class path for \" + pomFile.getAbsolutePath()) + \".\");\n        }\n        return classpath;\n    }\n\n    private static java.lang.String getSpoonClasspathTmpFileName(spoon.MavenLauncher.SOURCE_TYPE sourceType) {\n        if (spoon.MavenLauncher.SOURCE_TYPE.TEST_SOURCE == sourceType) {\n            return spoon.support.compiler.SpoonPom.spoonClasspathTmpFileNameTest;\n        } else if (spoon.MavenLauncher.SOURCE_TYPE.APP_SOURCE == sourceType) {\n            return spoon.support.compiler.SpoonPom.spoonClasspathTmpFileNameApp;\n        } else {\n            return spoon.support.compiler.SpoonPom.spoonClasspathTmpFileName;\n        }\n    }\n\n    public spoon.support.compiler.SpoonPom getParentPom() {\n        return parent;\n    }\n\n    @java.lang.Override\n    public spoon.compiler.SpoonFolder getParent() {\n        try {\n            return spoon.compiler.SpoonResourceHelper.createFolder(directory);\n        } catch (java.io.FileNotFoundException e) {\n            spoon.Launcher.LOGGER.error(e.getMessage(), e);\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.io.File getFileSystemParent() {\n        return directory;\n    }\n\n    @java.lang.Override\n    public java.lang.String getName() {\n        return \"pom\";\n    }\n\n    @java.lang.Override\n    public boolean isFile() {\n        return true;\n    }\n\n    @java.lang.Override\n    public boolean isArchive() {\n        return false;\n    }\n\n    @java.lang.Override\n    public java.lang.String getPath() {\n        return pomFile.getPath();\n    }\n\n    @java.lang.Override\n    public java.io.File toFile() {\n        return pomFile;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private int correctJavaVersion(java.lang.String javaVersion) {\n    java.lang.String version = extractVariable(javaVersion);\n    return java.lang.Integer.parseInt(version.contains(\".\") ? version.substring(2) : version);\n}",
            "src_parent": "public class SpoonPom implements spoon.compiler.SpoonResource {\n    static java.lang.String mavenVersionParsing = \"Maven home: \";\n\n    static java.lang.String spoonClasspathTmpFileName = \"spoon.classpath.tmp\";\n\n    static java.lang.String spoonClasspathTmpFileNameApp = \"spoon.classpath-app.tmp\";\n\n    static java.lang.String spoonClasspathTmpFileNameTest = \"spoon.classpath-test.tmp\";\n\n    static long classpathTmpFilesTTL = (60 * 60) * 1000L;\n\n    java.util.List<spoon.support.compiler.SpoonPom> modules = new java.util.ArrayList<>();\n\n    org.apache.maven.model.Model model;\n\n    spoon.support.compiler.SpoonPom parent;\n\n    java.io.File pomFile;\n\n    java.io.File directory;\n\n    spoon.MavenLauncher.SOURCE_TYPE sourceType;\n\n    spoon.compiler.Environment environment;\n\n    public SpoonPom(java.lang.String path, spoon.MavenLauncher.SOURCE_TYPE sourceType, spoon.compiler.Environment environment) throws java.io.IOException, org.codehaus.plexus.util.xml.pull.XmlPullParserException {\n        this(path, null, sourceType, environment);\n    }\n\n    public SpoonPom(java.lang.String path, spoon.support.compiler.SpoonPom parent, spoon.MavenLauncher.SOURCE_TYPE sourceType, spoon.compiler.Environment environment) throws java.io.IOException, org.codehaus.plexus.util.xml.pull.XmlPullParserException {\n        this.parent = parent;\n        this.sourceType = sourceType;\n        this.environment = environment;\n        if ((!path.endsWith(\".xml\")) && (!path.endsWith(\".pom\"))) {\n            path = java.nio.file.Paths.get(path, \"pom.xml\").toString();\n        }\n        this.pomFile = new java.io.File(path);\n        if (!pomFile.exists()) {\n            throw new java.io.IOException(\"Pom does not exists.\");\n        }\n        this.directory = pomFile.getParentFile();\n        org.apache.maven.model.io.xpp3.MavenXpp3Reader pomReader = new org.apache.maven.model.io.xpp3.MavenXpp3Reader();\n        try (final java.io.FileReader reader = new java.io.FileReader(pomFile)) {\n            this.model = pomReader.read(reader);\n            for (java.lang.String module : model.getModules()) {\n                addModule(new spoon.support.compiler.SpoonPom(java.nio.file.Paths.get(pomFile.getParent(), module).toString(), this, sourceType, environment));\n            }\n        } catch (java.io.FileNotFoundException e) {\n            throw new java.io.IOException(\"Pom does not exists.\");\n        }\n    }\n\n    private void addModule(spoon.support.compiler.SpoonPom module) {\n        modules.add(module);\n    }\n\n    public org.apache.maven.model.Model getModel() {\n        return model;\n    }\n\n    public java.util.List<java.io.File> getSourceDirectories() {\n        java.util.List<java.io.File> output = new java.util.ArrayList<>();\n        java.lang.String sourcePath = null;\n        org.apache.maven.model.Build build = model.getBuild();\n        if (build != null) {\n            sourcePath = build.getSourceDirectory();\n        }\n        if (sourcePath == null) {\n            sourcePath = java.nio.file.Paths.get(directory.getAbsolutePath(), \"src\", \"main\", \"java\").toString();\n        }\n        java.io.File source = new java.io.File(sourcePath);\n        if (source.exists()) {\n            output.add(source);\n        }\n        java.io.File generatedSource = java.nio.file.Paths.get(directory.getAbsolutePath(), \"target\", \"generated-sources\").toFile();\n        if (generatedSource.exists()) {\n            output.add(generatedSource);\n        }\n        for (spoon.support.compiler.SpoonPom module : modules) {\n            output.addAll(module.getSourceDirectories());\n        }\n        return output;\n    }\n\n    public java.util.List<java.io.File> getTestDirectories() {\n        java.util.List<java.io.File> output = new java.util.ArrayList<>();\n        java.lang.String sourcePath = null;\n        org.apache.maven.model.Build build = model.getBuild();\n        if (build != null) {\n            sourcePath = build.getTestSourceDirectory();\n        }\n        if (sourcePath == null) {\n            sourcePath = java.nio.file.Paths.get(directory.getAbsolutePath(), \"src\", \"test\", \"java\").toString();\n        }\n        java.io.File source = new java.io.File(sourcePath);\n        if (source.exists()) {\n            output.add(source);\n        }\n        java.io.File generatedSource = java.nio.file.Paths.get(directory.getAbsolutePath(), \"target\", \"generated-test-sources\").toFile();\n        if (generatedSource.exists()) {\n            output.add(generatedSource);\n        }\n        for (spoon.support.compiler.SpoonPom module : modules) {\n            output.addAll(module.getTestDirectories());\n        }\n        return output;\n    }\n\n    public java.util.List<java.io.File> getClasspathTmpFiles(java.lang.String fileName) {\n        java.util.List<java.io.File> output = new java.util.ArrayList<>();\n        java.io.File tmp = new java.io.File(directory, fileName);\n        if (tmp.exists() && tmp.isFile()) {\n            output.add(tmp);\n        }\n        for (spoon.support.compiler.SpoonPom module : modules) {\n            output.addAll(module.getClasspathTmpFiles(fileName));\n        }\n        return output;\n    }\n\n    private static java.util.regex.Pattern mavenProperty = java.util.regex.Pattern.compile(\"\\\\$\\\\{.*\\\\}\");\n\n    private java.lang.String extractVariable(java.lang.String value) {\n        java.lang.String val = value;\n        if ((value != null) && value.contains(\"$\")) {\n            java.util.regex.Matcher matcher = spoon.support.compiler.SpoonPom.mavenProperty.matcher(value);\n            while (matcher.find()) {\n                java.lang.String var = matcher.group();\n                val = val.replace(var, getProperty(var.substring(2, var.length() - 1)));\n            } \n        }\n        return val;\n    }\n\n    private java.lang.String getProperty(java.lang.String key) {\n        if (\"project.version\".equals(key) || \"pom.version\".equals(key)) {\n            if (model.getVersion() != null) {\n                return model.getVersion();\n            } else if (model.getParent() != null) {\n                return model.getParent().getVersion();\n            }\n        } else if (\"project.groupId\".equals(key) || \"pom.groupId\".equals(key)) {\n            if (model.getGroupId() != null) {\n                return model.getGroupId();\n            } else if (model.getParent() != null) {\n                return model.getParent().getGroupId();\n            }\n        } else if (\"project.artifactId\".equals(key) || \"pom.artifactId\".equals(key)) {\n            if (model.getArtifactId() != null) {\n                return model.getArtifactId();\n            } else if (model.getParent() != null) {\n                return model.getParent().getArtifactId();\n            }\n        }\n        java.lang.String value = extractVariable(model.getProperties().getProperty(key));\n        if (value == null) {\n            if (parent == null) {\n                return null;\n            }\n            return parent.getProperty(key);\n        }\n        return value;\n    }\n\n    public int getSourceVersion() {\n        java.lang.String javaVersion = null;\n        if (model.getBuild() != null) {\n            javaVersion = getSourceVersion(model.getBuild());\n        }\n        if (javaVersion != null) {\n            return correctJavaVersion(javaVersion);\n        }\n        for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n            if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n                javaVersion = getSourceVersion(profile.getBuild());\n            }\n        }\n        if (javaVersion != null) {\n            return correctJavaVersion(javaVersion);\n        }\n        javaVersion = getProperty(\"java.version\");\n        if (javaVersion != null) {\n            return correctJavaVersion(javaVersion);\n        }\n        javaVersion = getProperty(\"java.src.version\");\n        if (javaVersion != null) {\n            return correctJavaVersion(javaVersion);\n        }\n        javaVersion = getProperty(\"maven.compiler.source\");\n        if (javaVersion != null) {\n            return correctJavaVersion(javaVersion);\n        }\n        javaVersion = getProperty(\"maven.compile.source\");\n        if (javaVersion != null) {\n            return correctJavaVersion(javaVersion);\n        }\n        return environment.getComplianceLevel();\n    }\n\n    private int correctJavaVersion(java.lang.String javaVersion) {\n        java.lang.String version = extractVariable(javaVersion);\n        return java.lang.Integer.parseInt(version.contains(\".\") ? version.substring(2) : version);\n    }\n\n    private java.lang.String getSourceVersion(org.apache.maven.model.BuildBase build) {\n        for (org.apache.maven.model.Plugin plugin : build.getPlugins()) {\n            if (!\"maven-compiler-plugin\".equals(plugin.getArtifactId())) {\n                continue;\n            }\n            org.codehaus.plexus.util.xml.Xpp3Dom configuration = ((org.codehaus.plexus.util.xml.Xpp3Dom) (plugin.getConfiguration()));\n            if (configuration != null) {\n                org.codehaus.plexus.util.xml.Xpp3Dom source = configuration.getChild(\"source\");\n                if (source != null) {\n                    return source.getValue();\n                }\n            }\n            break;\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        sb.append(model.getGroupId());\n        sb.append(\":\");\n        sb.append(model.getArtifactId());\n        sb.append(\":\");\n        sb.append(model.getVersion());\n        if (modules.isEmpty()) {\n            return sb.toString();\n        }\n        sb.append(\" {\\n\");\n        for (spoon.support.compiler.SpoonPom spoonPom : modules) {\n            java.lang.String child = spoonPom.toString();\n            for (java.lang.String s : child.split(\"\\n\")) {\n                sb.append(\"\\t\");\n                sb.append(s);\n                sb.append(\"\\n\");\n            }\n        }\n        sb.append(\"}\");\n        return sb.toString();\n    }\n\n    private void generateClassPathFile(java.io.File mvnHome, spoon.MavenLauncher.SOURCE_TYPE sourceType, org.apache.log4j.Logger LOGGER, boolean forceRefresh) {\n        java.io.File classpathFile = new java.io.File(directory, spoon.support.compiler.SpoonPom.getSpoonClasspathTmpFileName(sourceType));\n        java.util.Date date = new java.util.Date();\n        long time = date.getTime();\n        if ((forceRefresh || (!classpathFile.exists())) || ((time - classpathFile.lastModified()) > spoon.support.compiler.SpoonPom.classpathTmpFilesTTL)) {\n            org.apache.maven.shared.invoker.InvocationRequest request = new org.apache.maven.shared.invoker.DefaultInvocationRequest();\n            request.setBatchMode(true);\n            request.setPomFile(pomFile);\n            request.setGoals(java.util.Collections.singletonList(\"dependency:build-classpath\"));\n            java.util.Properties properties = new java.util.Properties();\n            if (sourceType == spoon.MavenLauncher.SOURCE_TYPE.APP_SOURCE) {\n                properties.setProperty(\"includeScope\", \"runtime\");\n            }\n            properties.setProperty(\"mdep.outputFile\", spoon.support.compiler.SpoonPom.getSpoonClasspathTmpFileName(sourceType));\n            request.setProperties(properties);\n            if (LOGGER != null) {\n                request.getOutputHandler(( s) -> LOGGER.debug(s));\n                request.getErrorHandler(( s) -> LOGGER.debug(s));\n            }\n            org.apache.maven.shared.invoker.Invoker invoker = new org.apache.maven.shared.invoker.DefaultInvoker();\n            invoker.setMavenHome(mvnHome);\n            invoker.setWorkingDirectory(directory);\n            invoker.setErrorHandler(( s) -> LOGGER.debug(s));\n            invoker.setOutputHandler(( s) -> LOGGER.debug(s));\n            try {\n                invoker.execute(request);\n            } catch (org.apache.maven.shared.invoker.MavenInvocationException e) {\n                throw new spoon.SpoonException(\"Maven invocation failed to build a classpath.\");\n            }\n            classpathFile.setLastModified(time);\n        }\n    }\n\n    private static java.lang.String[] readClassPath(java.io.File... classPathFiles) throws java.io.IOException {\n        java.util.List<java.lang.String> classpathElements = new java.util.ArrayList<>();\n        for (java.io.File classPathFile : classPathFiles) {\n            try (final java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(classPathFile))) {\n                java.lang.StringBuilder sb = new java.lang.StringBuilder();\n                java.lang.String line = br.readLine();\n                while (line != null) {\n                    sb.append(line);\n                    line = br.readLine();\n                } \n                if (!\"\".equals(sb.toString())) {\n                    java.lang.String[] classpath = sb.toString().split(java.io.File.pathSeparator);\n                    for (java.lang.String cpe : classpath) {\n                        if (!classpathElements.contains(cpe)) {\n                            classpathElements.add(cpe);\n                        }\n                    }\n                }\n            }\n        }\n        return classpathElements.toArray(new java.lang.String[0]);\n    }\n\n    private static java.lang.String guessMavenHome() {\n        java.lang.String mvnHome = null;\n        try {\n            java.lang.String[] cmd;\n            if (java.lang.System.getProperty(\"os.name\").contains(\"Windows\")) {\n                cmd = new java.lang.String[]{ \"mvn.cmd\", \"-version\" };\n            } else {\n                cmd = new java.lang.String[]{ \"mvn\", \"-version\" };\n            }\n            java.lang.Process p = java.lang.Runtime.getRuntime().exec(cmd);\n            try (final java.io.BufferedReader output = new java.io.BufferedReader(new java.io.InputStreamReader(p.getInputStream()))) {\n                java.lang.String line;\n                while ((line = output.readLine()) != null) {\n                    if (line.contains(spoon.support.compiler.SpoonPom.mavenVersionParsing)) {\n                        return line.replace(spoon.support.compiler.SpoonPom.mavenVersionParsing, \"\");\n                    }\n                } \n            }\n            p.waitFor();\n        } catch (java.io.IOException e) {\n            throw new spoon.SpoonException(\"Maven home detection has failed.\");\n        } catch (java.lang.InterruptedException e) {\n            throw new spoon.SpoonException(\"Maven home detection was interrupted.\");\n        }\n        return mvnHome;\n    }\n\n    public java.lang.String[] buildClassPath(java.lang.String mvnHome, spoon.MavenLauncher.SOURCE_TYPE sourceType, org.apache.log4j.Logger LOGGER, boolean forceRefresh) {\n        if (mvnHome == null) {\n            mvnHome = spoon.support.compiler.SpoonPom.guessMavenHome();\n            if (mvnHome == null) {\n                throw new spoon.SpoonException(\"M2_HOME must be initialized to use this MavenLauncher constructor.\");\n            }\n        }\n        generateClassPathFile(new java.io.File(mvnHome), sourceType, LOGGER, forceRefresh);\n        java.util.List<java.io.File> classPathPrints;\n        java.lang.String[] classpath;\n        try {\n            classPathPrints = getClasspathTmpFiles(spoon.support.compiler.SpoonPom.getSpoonClasspathTmpFileName(sourceType));\n            java.io.File[] classPathPrintFiles = new java.io.File[classPathPrints.size()];\n            classPathPrintFiles = classPathPrints.toArray(classPathPrintFiles);\n            classpath = spoon.support.compiler.SpoonPom.readClassPath(classPathPrintFiles);\n        } catch (java.io.IOException e) {\n            throw new spoon.SpoonException((\"Failed to generate class path for \" + pomFile.getAbsolutePath()) + \".\");\n        }\n        return classpath;\n    }\n\n    private static java.lang.String getSpoonClasspathTmpFileName(spoon.MavenLauncher.SOURCE_TYPE sourceType) {\n        if (spoon.MavenLauncher.SOURCE_TYPE.TEST_SOURCE == sourceType) {\n            return spoon.support.compiler.SpoonPom.spoonClasspathTmpFileNameTest;\n        } else if (spoon.MavenLauncher.SOURCE_TYPE.APP_SOURCE == sourceType) {\n            return spoon.support.compiler.SpoonPom.spoonClasspathTmpFileNameApp;\n        } else {\n            return spoon.support.compiler.SpoonPom.spoonClasspathTmpFileName;\n        }\n    }\n\n    public spoon.support.compiler.SpoonPom getParentPom() {\n        return parent;\n    }\n\n    @java.lang.Override\n    public spoon.compiler.SpoonFolder getParent() {\n        try {\n            return spoon.compiler.SpoonResourceHelper.createFolder(directory);\n        } catch (java.io.FileNotFoundException e) {\n            spoon.Launcher.LOGGER.error(e.getMessage(), e);\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.io.File getFileSystemParent() {\n        return directory;\n    }\n\n    @java.lang.Override\n    public java.lang.String getName() {\n        return \"pom\";\n    }\n\n    @java.lang.Override\n    public boolean isFile() {\n        return true;\n    }\n\n    @java.lang.Override\n    public boolean isArchive() {\n        return false;\n    }\n\n    @java.lang.Override\n    public java.lang.String getPath() {\n        return pomFile.getPath();\n    }\n\n    @java.lang.Override\n    public java.io.File toFile() {\n        return pomFile;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "version.contains(\".\") ? version.substring(2) : version",
            "src_parent": "java.lang.Integer.parseInt(version.contains(\".\") ? version.substring(2) : version)",
            "src_parent_type": "Invocation",
            "src_type": "Conditional"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "correctJavaVersion(javaVersion)",
            "src_parent": "return correctJavaVersion(javaVersion)",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "correctJavaVersion(javaVersion)",
            "src_parent": "return correctJavaVersion(javaVersion)",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "correctJavaVersion(javaVersion)",
            "src_parent": "return correctJavaVersion(javaVersion)",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "correctJavaVersion(javaVersion)",
            "src_parent": "return correctJavaVersion(javaVersion)",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "correctJavaVersion(javaVersion)",
            "src_parent": "return correctJavaVersion(javaVersion)",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "int",
            "dst_parent": "public int getSourceVersion() {\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    return environment.getComplianceLevel();\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "int",
            "src_parent": "public int getSourceVersion() {\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    return environment.getComplianceLevel();\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Method",
            "dst_parent": "public int getSourceVersion() {\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    return environment.getComplianceLevel();\n}",
            "dst_parent_type": "Method",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Method",
            "src_parent": "public int getSourceVersion() {\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    return environment.getComplianceLevel();\n}",
            "src_parent_type": "Method",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String javaVersion = null",
            "dst_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    return environment.getComplianceLevel();\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.lang.String javaVersion = null",
            "src_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    return environment.getComplianceLevel();\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (model.getBuild() != null) {\n    javaVersion = getSourceVersion(model.getBuild());\n}",
            "dst_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    return environment.getComplianceLevel();\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (model.getBuild() != null) {\n    javaVersion = getSourceVersion(model.getBuild());\n}",
            "src_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    return environment.getComplianceLevel();\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (javaVersion != null) {\n    return correctJavaVersion(javaVersion);\n}",
            "dst_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    return environment.getComplianceLevel();\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (javaVersion != null) {\n    return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n}",
            "src_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    return environment.getComplianceLevel();\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n    if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n        javaVersion = getSourceVersion(profile.getBuild());\n    }\n}",
            "dst_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    return environment.getComplianceLevel();\n}",
            "dst_parent_type": "Block",
            "dst_type": "ForEach",
            "operator": "MOV",
            "src": "for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n    if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n        javaVersion = getSourceVersion(profile.getBuild());\n    }\n}",
            "src_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    return environment.getComplianceLevel();\n}",
            "src_parent_type": "Block",
            "src_type": "ForEach"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (javaVersion != null) {\n    return correctJavaVersion(javaVersion);\n}",
            "dst_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    return environment.getComplianceLevel();\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (javaVersion != null) {\n    return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n}",
            "src_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    return environment.getComplianceLevel();\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "javaVersion = getProperty(\"java.version\")",
            "dst_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    return environment.getComplianceLevel();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "javaVersion = getProperty(\"java.version\")",
            "src_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    return environment.getComplianceLevel();\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (javaVersion != null) {\n    return correctJavaVersion(javaVersion);\n}",
            "dst_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    return environment.getComplianceLevel();\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (javaVersion != null) {\n    return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n}",
            "src_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    return environment.getComplianceLevel();\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "javaVersion = getProperty(\"java.src.version\")",
            "dst_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    return environment.getComplianceLevel();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "javaVersion = getProperty(\"java.src.version\")",
            "src_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    return environment.getComplianceLevel();\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (javaVersion != null) {\n    return correctJavaVersion(javaVersion);\n}",
            "dst_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    return environment.getComplianceLevel();\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (javaVersion != null) {\n    return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n}",
            "src_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    return environment.getComplianceLevel();\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "javaVersion = getProperty(\"maven.compiler.source\")",
            "dst_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    return environment.getComplianceLevel();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "javaVersion = getProperty(\"maven.compiler.source\")",
            "src_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    return environment.getComplianceLevel();\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (javaVersion != null) {\n    return correctJavaVersion(javaVersion);\n}",
            "dst_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    return environment.getComplianceLevel();\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (javaVersion != null) {\n    return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n}",
            "src_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    return environment.getComplianceLevel();\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "javaVersion = getProperty(\"maven.compile.source\")",
            "dst_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    return environment.getComplianceLevel();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "javaVersion = getProperty(\"maven.compile.source\")",
            "src_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    return environment.getComplianceLevel();\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return environment.getComplianceLevel()",
            "dst_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return correctJavaVersion(javaVersion);\n    }\n    return environment.getComplianceLevel();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return environment.getComplianceLevel()",
            "src_parent": "{\n    java.lang.String javaVersion = null;\n    if (model.getBuild() != null) {\n        javaVersion = getSourceVersion(model.getBuild());\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    for (org.apache.maven.model.Profile profile : model.getProfiles()) {\n        if ((profile.getActivation() != null) && profile.getActivation().isActiveByDefault()) {\n            javaVersion = getSourceVersion(profile.getBuild());\n        }\n    }\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"java.src.version\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compiler.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    javaVersion = getProperty(\"maven.compile.source\");\n    if (javaVersion != null) {\n        return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n    }\n    return environment.getComplianceLevel();\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "javaVersion != null",
            "dst_parent": "if (javaVersion != null) {\n    return correctJavaVersion(javaVersion);\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "javaVersion != null",
            "src_parent": "if (javaVersion != null) {\n    return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2));\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "extractVariable(javaVersion)",
            "dst_parent": "java.lang.String version = extractVariable(javaVersion)",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "extractVariable(javaVersion)",
            "src_parent": "extractVariable(javaVersion).substring(2)",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Integer.parseInt(version.contains(\".\") ? version.substring(2) : version)",
            "dst_parent": "return java.lang.Integer.parseInt(version.contains(\".\") ? version.substring(2) : version)",
            "dst_parent_type": "Return",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2))",
            "src_parent": "return java.lang.Integer.parseInt(extractVariable(javaVersion).substring(2))",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "spoon.support.compiler.SpoonPom",
            "dst_parent": "",
            "dst_parent_type": "ThisAccess",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "spoon.support.compiler.SpoonPom",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "javaVersion",
            "dst_parent": "correctJavaVersion(javaVersion)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "javaVersion",
            "src_parent": "extractVariable(javaVersion)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "spoon.support.compiler.SpoonPom",
            "dst_parent": "",
            "dst_parent_type": "ThisAccess",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "spoon.support.compiler.SpoonPom",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "javaVersion",
            "dst_parent": "correctJavaVersion(javaVersion)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "javaVersion",
            "src_parent": "extractVariable(javaVersion)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "spoon.support.compiler.SpoonPom",
            "dst_parent": "",
            "dst_parent_type": "ThisAccess",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "spoon.support.compiler.SpoonPom",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "javaVersion",
            "dst_parent": "correctJavaVersion(javaVersion)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "javaVersion",
            "src_parent": "extractVariable(javaVersion)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "spoon.support.compiler.SpoonPom",
            "dst_parent": "",
            "dst_parent_type": "ThisAccess",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "spoon.support.compiler.SpoonPom",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "javaVersion",
            "dst_parent": "correctJavaVersion(javaVersion)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "javaVersion",
            "src_parent": "extractVariable(javaVersion)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "spoon.support.compiler.SpoonPom",
            "dst_parent": "",
            "dst_parent_type": "ThisAccess",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "spoon.support.compiler.SpoonPom",
            "src_parent": "",
            "src_parent_type": "ThisAccess",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "javaVersion",
            "dst_parent": "correctJavaVersion(javaVersion)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "javaVersion",
            "src_parent": "extractVariable(javaVersion)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "2",
            "dst_parent": "version.substring(2)",
            "dst_parent_type": "Invocation",
            "dst_type": "Literal",
            "operator": "MOV",
            "src": "2",
            "src_parent": "extractVariable(javaVersion).substring(2)",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        }
      ],
      "file_name": "SpoonPom"
    }
  ],
  "id": "bears_219"
}