{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Enum",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if ((instrumentedMethod.isStatic() && (!invokedMethod.isStatic())) && (!invokedMethod.isConstructor())) {\n    throw new java.lang.IllegalStateException(((\"Cannot invoke \" + invokedMethod) + \" from \") + instrumentedMethod);\n}",
            "src_parent": "{\n    if ((instrumentedMethod.isStatic() && (!invokedMethod.isStatic())) && (!invokedMethod.isConstructor())) {\n        throw new java.lang.IllegalStateException(((\"Cannot invoke \" + invokedMethod) + \" from \") + instrumentedMethod);\n    }\n    return new net.bytebuddy.implementation.StackManipulation.Compound(invokedMethod.isStatic() ? StackManipulation.Trivial.INSTANCE : net.bytebuddy.implementation.bytecode.member.MethodVariableAccess.loadThis(), invokedMethod.isConstructor() ? Duplication.SINGLE : StackManipulation.Trivial.INSTANCE);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.Iterator<? extends net.bytebuddy.description.method.ParameterDescription> parameterIterator = parameters.iterator()",
            "dst_parent": "{\n    net.bytebuddy.description.method.MethodDescription invokedMethod = methodLocator.resolve(implementationTarget.getInstrumentedType(), instrumentedMethod);\n    if (!invokedMethod.isVisibleTo(implementationTarget.getInstrumentedType())) {\n        throw new java.lang.IllegalStateException(((\"Cannot invoke \" + invokedMethod) + \" from \") + implementationContext.getInstrumentedType());\n    }\n    java.util.List<net.bytebuddy.implementation.MethodCall.ArgumentLoader> argumentLoaders = new java.util.ArrayList<net.bytebuddy.implementation.MethodCall.ArgumentLoader>(this.argumentLoaders.size());\n    for (net.bytebuddy.implementation.MethodCall.ArgumentLoader.Factory argumentLoader : this.argumentLoaders) {\n        argumentLoaders.addAll(argumentLoader.make(implementationTarget.getInstrumentedType(), instrumentedMethod, invokedMethod));\n    }\n    net.bytebuddy.description.method.ParameterList<?> parameters = invokedMethod.getParameters();\n    if (parameters.size() != argumentLoaders.size()) {\n        throw new java.lang.IllegalStateException(((invokedMethod + \" does not take \") + argumentLoaders.size()) + \" arguments\");\n    }\n    java.util.Iterator<? extends net.bytebuddy.description.method.ParameterDescription> parameterIterator = parameters.iterator();\n    java.util.List<net.bytebuddy.implementation.StackManipulation> argumentInstructions = new java.util.ArrayList<net.bytebuddy.implementation.StackManipulation>(argumentLoaders.size());\n    for (net.bytebuddy.implementation.MethodCall.ArgumentLoader argumentLoader : argumentLoaders) {\n        argumentInstructions.add(argumentLoader.resolve(parameterIterator.next(), assigner, typing));\n    }\n    net.bytebuddy.implementation.StackManipulation.Size size = new net.bytebuddy.implementation.StackManipulation.Compound(targetHandler.resolve(invokedMethod, instrumentedMethod, implementationTarget.getInstrumentedType(), assigner, typing), new net.bytebuddy.implementation.StackManipulation.Compound(argumentInstructions), methodInvoker.invoke(invokedMethod, implementationTarget), terminationHandler.resolve(invokedMethod, instrumentedMethod, assigner, typing)).apply(methodVisitor, implementationContext);\n    return new net.bytebuddy.implementation.Size(size.getMaximalSize(), instrumentedMethod.getStackSize());\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.util.Iterator<? extends net.bytebuddy.description.method.ParameterDescription> parameterIterator = parameters.iterator()",
            "src_parent": "{\n    net.bytebuddy.description.method.MethodDescription invokedMethod = methodLocator.resolve(implementationTarget.getInstrumentedType(), instrumentedMethod);\n    if (!invokedMethod.isVisibleTo(implementationTarget.getInstrumentedType())) {\n        throw new java.lang.IllegalStateException(((\"Cannot invoke \" + invokedMethod) + \" from \") + implementationContext.getInstrumentedType());\n    }\n    java.util.List<net.bytebuddy.implementation.MethodCall.ArgumentLoader> argumentLoaders = new java.util.ArrayList<net.bytebuddy.implementation.MethodCall.ArgumentLoader>(this.argumentLoaders.size());\n    for (net.bytebuddy.implementation.MethodCall.ArgumentLoader.Factory argumentLoader : this.argumentLoaders) {\n        argumentLoaders.addAll(argumentLoader.make(implementationTarget.getInstrumentedType(), instrumentedMethod, invokedMethod));\n    }\n    net.bytebuddy.description.method.ParameterList<?> parameters = invokedMethod.getParameters();\n    java.util.Iterator<? extends net.bytebuddy.description.method.ParameterDescription> parameterIterator = parameters.iterator();\n    if (parameters.size() != argumentLoaders.size()) {\n        throw new java.lang.IllegalStateException(((invokedMethod + \" does not take \") + argumentLoaders.size()) + \" arguments\");\n    }\n    java.util.List<net.bytebuddy.implementation.StackManipulation> argumentInstructions = new java.util.ArrayList<net.bytebuddy.implementation.StackManipulation>(argumentLoaders.size());\n    for (net.bytebuddy.implementation.MethodCall.ArgumentLoader argumentLoader : argumentLoaders) {\n        argumentInstructions.add(argumentLoader.resolve(parameterIterator.next(), assigner, typing));\n    }\n    net.bytebuddy.implementation.StackManipulation.Size size = new net.bytebuddy.implementation.StackManipulation.Compound(targetHandler.resolve(invokedMethod, instrumentedMethod, implementationTarget.getInstrumentedType(), assigner, typing), new net.bytebuddy.implementation.StackManipulation.Compound(argumentInstructions), methodInvoker.invoke(invokedMethod, implementationTarget), terminationHandler.resolve(invokedMethod, instrumentedMethod, assigner, typing)).apply(methodVisitor, implementationContext);\n    return new net.bytebuddy.implementation.Size(size.getMaximalSize(), instrumentedMethod.getStackSize());\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        }
      ],
      "file_name": "MethodCall"
    }
  ],
  "id": "bears_178"
}