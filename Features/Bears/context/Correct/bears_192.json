{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "state",
            "dst_parent": "(state == RepairRun.RunState.RUNNING)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "endTime",
            "src_parent": "(endTime == null)",
            "src_parent_type": "BinaryOperator",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "null",
            "src_parent": "(endTime == null)",
            "src_parent_type": "BinaryOperator",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if ((startTime == null) || (endTime == null)) {\n    duration = null;\n} else {\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n}",
            "src_parent": "{\n    this.id = runId;\n    this.cause = cause;\n    this.owner = owner;\n    this.clusterName = clusterName;\n    this.columnFamilies = columnFamilies;\n    this.keyspaceName = keyspaceName;\n    this.state = state;\n    this.creationTime = creationTime;\n    this.startTime = startTime;\n    this.endTime = endTime;\n    this.pauseTime = pauseTime;\n    this.intensity = io.cassandrareaper.resources.view.RepairRunStatus.roundDoubleNicely(intensity);\n    this.incrementalRepair = incrementalRepair;\n    this.totalSegments = totalSegments;\n    this.repairParallelism = repairParallelism;\n    this.segmentsRepaired = segmentsRepaired;\n    this.lastEvent = lastEvent;\n    this.nodes = nodes;\n    this.datacenters = datacenters;\n    this.blacklistedTables = blacklistedTables;\n    if ((startTime == null) || (endTime == null)) {\n        duration = null;\n    } else {\n        duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n    }\n    if ((startTime == null) || ((endTime != null) && endTime.isAfter(startTime))) {\n        estimatedTimeOfArrival = null;\n    } else if ((((state == RepairRun.RunState.ERROR) || (state == RepairRun.RunState.DELETED)) || (state == RepairRun.RunState.ABORTED)) || (segmentsRepaired == 0)) {\n        estimatedTimeOfArrival = null;\n    } else {\n        long now = org.joda.time.DateTime.now().getMillis();\n        long currentDuration = now - startTime.getMillis();\n        long millisecondsPerSegment = currentDuration / segmentsRepaired;\n        int segmentsLeft = totalSegments - segmentsRepaired;\n        estimatedTimeOfArrival = new org.joda.time.DateTime(now + (millisecondsPerSegment * segmentsLeft));\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(startTime == null) || ((endTime != null) && endTime.isAfter(startTime))",
            "src_parent": "if ((startTime == null) || ((endTime != null) && endTime.isAfter(startTime))) {\n    estimatedTimeOfArrival = null;\n} else if ((((state == RepairRun.RunState.ERROR) || (state == RepairRun.RunState.DELETED)) || (state == RepairRun.RunState.ABORTED)) || (segmentsRepaired == 0)) {\n    estimatedTimeOfArrival = null;\n} else {\n    long now = org.joda.time.DateTime.now().getMillis();\n    long currentDuration = now - startTime.getMillis();\n    long millisecondsPerSegment = currentDuration / segmentsRepaired;\n    int segmentsLeft = totalSegments - segmentsRepaired;\n    estimatedTimeOfArrival = new org.joda.time.DateTime(now + (millisecondsPerSegment * segmentsLeft));\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "@com.fasterxml.jackson.annotation.JsonIgnore\nprivate org.joda.time.DateTime currentTime;",
            "src_parent": "public final class RepairRunStatus {\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private java.lang.String cause;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private java.lang.String owner;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private java.util.UUID id;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"cluster_name\")\n    private java.lang.String clusterName;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"column_families\")\n    private java.util.Collection<java.lang.String> columnFamilies;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"keyspace_name\")\n    private java.lang.String keyspaceName;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private RepairRun.RunState state;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime creationTime;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime startTime;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime endTime;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime pauseTime;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime currentTime;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private double intensity;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"incremental_repair\")\n    private boolean incrementalRepair;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"total_segments\")\n    private int totalSegments;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"repair_parallelism\")\n    private org.apache.cassandra.repair.RepairParallelism repairParallelism;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"segments_repaired\")\n    private int segmentsRepaired;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"last_event\")\n    private java.lang.String lastEvent;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private java.lang.String duration;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime estimatedTimeOfArrival;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"nodes\")\n    private java.util.Collection<java.lang.String> nodes;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"datacenters\")\n    private java.util.Collection<java.lang.String> datacenters;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"blacklisted_tables\")\n    private java.util.Collection<java.lang.String> blacklistedTables;\n\n    public RepairRunStatus() {\n    }\n\n    public RepairRunStatus(java.util.UUID runId, java.lang.String clusterName, java.lang.String keyspaceName, java.util.Collection<java.lang.String> columnFamilies, int segmentsRepaired, int totalSegments, io.cassandrareaper.core.RepairRun.RunState state, org.joda.time.DateTime startTime, org.joda.time.DateTime endTime, java.lang.String cause, java.lang.String owner, java.lang.String lastEvent, org.joda.time.DateTime creationTime, org.joda.time.DateTime pauseTime, double intensity, boolean incrementalRepair, org.apache.cassandra.repair.RepairParallelism repairParallelism, java.util.Collection<java.lang.String> nodes, java.util.Collection<java.lang.String> datacenters, java.util.Collection<java.lang.String> blacklistedTables) {\n        this.id = runId;\n        this.cause = cause;\n        this.owner = owner;\n        this.clusterName = clusterName;\n        this.columnFamilies = columnFamilies;\n        this.keyspaceName = keyspaceName;\n        this.state = state;\n        this.creationTime = creationTime;\n        this.startTime = startTime;\n        this.endTime = endTime;\n        this.pauseTime = pauseTime;\n        this.currentTime = org.joda.time.DateTime.now();\n        this.intensity = io.cassandrareaper.resources.view.RepairRunStatus.roundDoubleNicely(intensity);\n        this.incrementalRepair = incrementalRepair;\n        this.totalSegments = totalSegments;\n        this.repairParallelism = repairParallelism;\n        this.segmentsRepaired = segmentsRepaired;\n        this.lastEvent = lastEvent;\n        this.nodes = nodes;\n        this.datacenters = datacenters;\n        this.blacklistedTables = blacklistedTables;\n        if (startTime == null) {\n            duration = null;\n        } else if ((state == RepairRun.RunState.RUNNING) || (state == RepairRun.RunState.PAUSED)) {\n            duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), currentTime.toInstant()).getMillis(), true, false);\n        } else if (state == RepairRun.RunState.ABORTED) {\n            duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), pauseTime.toInstant()).getMillis(), true, false);\n        } else if (endTime != null) {\n            duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n        } else {\n            duration = null;\n        }\n        if (startTime == null) {\n            estimatedTimeOfArrival = null;\n        } else if ((((state == RepairRun.RunState.ERROR) || (state == RepairRun.RunState.DELETED)) || (state == RepairRun.RunState.ABORTED)) || (segmentsRepaired == 0)) {\n            estimatedTimeOfArrival = null;\n        } else {\n            long now = org.joda.time.DateTime.now().getMillis();\n            long currentDuration = now - startTime.getMillis();\n            long millisecondsPerSegment = currentDuration / segmentsRepaired;\n            int segmentsLeft = totalSegments - segmentsRepaired;\n            estimatedTimeOfArrival = new org.joda.time.DateTime(now + (millisecondsPerSegment * segmentsLeft));\n        }\n    }\n\n    public RepairRunStatus(io.cassandrareaper.core.RepairRun repairRun, io.cassandrareaper.core.RepairUnit repairUnit, int segmentsRepaired) {\n        this(repairRun.getId(), repairRun.getClusterName(), repairUnit.getKeyspaceName(), repairUnit.getColumnFamilies(), segmentsRepaired, repairRun.getSegmentCount(), repairRun.getRunState(), repairRun.getStartTime(), repairRun.getEndTime(), repairRun.getCause(), repairRun.getOwner(), repairRun.getLastEvent(), repairRun.getCreationTime(), repairRun.getPauseTime(), repairRun.getIntensity(), repairUnit.getIncrementalRepair(), repairRun.getRepairParallelism(), repairUnit.getNodes(), repairUnit.getDatacenters(), repairUnit.getBlacklistedTables());\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"creation_time\")\n    public java.lang.String getCreationTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(creationTime);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"creation_time\")\n    public void setCreationTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            creationTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"start_time\")\n    public java.lang.String getStartTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(startTime);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"start_time\")\n    public void setStartTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            startTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"end_time\")\n    public java.lang.String getEndTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(endTime);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"end_time\")\n    public void setEndTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            endTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"pause_time\")\n    public java.lang.String getPauseTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(pauseTime);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"pause_time\")\n    public void setPauseTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            pauseTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"current_time\")\n    public void setCurrentTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            currentTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"current_time\")\n    public java.lang.String getCurrentTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(currentTime);\n    }\n\n    public java.lang.String getCause() {\n        return cause;\n    }\n\n    public void setCause(java.lang.String cause) {\n        this.cause = cause;\n    }\n\n    public java.lang.String getOwner() {\n        return owner;\n    }\n\n    public void setOwner(java.lang.String owner) {\n        this.owner = owner;\n    }\n\n    public java.util.UUID getId() {\n        return id;\n    }\n\n    public void setId(java.util.UUID id) {\n        this.id = id;\n    }\n\n    public java.lang.String getClusterName() {\n        return clusterName;\n    }\n\n    public void setClusterName(java.lang.String clusterName) {\n        this.clusterName = clusterName;\n    }\n\n    public java.util.Collection<java.lang.String> getColumnFamilies() {\n        return columnFamilies;\n    }\n\n    public void setColumnFamilies(java.util.Collection<java.lang.String> columnFamilies) {\n        this.columnFamilies = columnFamilies;\n    }\n\n    public java.lang.String getKeyspaceName() {\n        return keyspaceName;\n    }\n\n    public void setKeyspaceName(java.lang.String keyspaceName) {\n        this.keyspaceName = keyspaceName;\n    }\n\n    public RepairRun.RunState getState() {\n        return state;\n    }\n\n    public void setState(io.cassandrareaper.core.RepairRun.RunState runState) {\n        this.state = runState;\n    }\n\n    public org.joda.time.DateTime getCreationTime() {\n        return creationTime;\n    }\n\n    public void setCreationTime(org.joda.time.DateTime creationTime) {\n        this.creationTime = creationTime;\n    }\n\n    public org.joda.time.DateTime getStartTime() {\n        return startTime;\n    }\n\n    public void setStartTime(org.joda.time.DateTime startTime) {\n        this.startTime = startTime;\n    }\n\n    public org.joda.time.DateTime getEndTime() {\n        return endTime;\n    }\n\n    public void setEndTime(org.joda.time.DateTime endTime) {\n        this.endTime = endTime;\n    }\n\n    public org.joda.time.DateTime getPauseTime() {\n        return pauseTime;\n    }\n\n    public void setPauseTime(org.joda.time.DateTime pauseTime) {\n        this.pauseTime = pauseTime;\n    }\n\n    public org.joda.time.DateTime getCurrentTime() {\n        return currentTime;\n    }\n\n    public void setCurrentTime(org.joda.time.DateTime currentTime) {\n        this.currentTime = currentTime;\n    }\n\n    public double getIntensity() {\n        return intensity;\n    }\n\n    public void setIntensity(double intensity) {\n        this.intensity = intensity;\n    }\n\n    public boolean getIncrementalRepair() {\n        return incrementalRepair;\n    }\n\n    public void setIncrementalRepair(boolean incrementalRepair) {\n        this.incrementalRepair = incrementalRepair;\n    }\n\n    public int getTotalSegments() {\n        return totalSegments;\n    }\n\n    public void setTotalSegments(int segmentCount) {\n        this.totalSegments = segmentCount;\n    }\n\n    public org.apache.cassandra.repair.RepairParallelism getRepairParallelism() {\n        return repairParallelism;\n    }\n\n    public void setRepairParallelism(org.apache.cassandra.repair.RepairParallelism repairParallelism) {\n        this.repairParallelism = repairParallelism;\n    }\n\n    public int getSegmentsRepaired() {\n        return segmentsRepaired;\n    }\n\n    public void setSegmentsRepaired(int segmentsRepaired) {\n        this.segmentsRepaired = segmentsRepaired;\n    }\n\n    public java.lang.String getLastEvent() {\n        return lastEvent;\n    }\n\n    public void setLastEvent(java.lang.String lastEvent) {\n        this.lastEvent = lastEvent;\n    }\n\n    public java.lang.String getDuration() {\n        return duration;\n    }\n\n    public void setDuration(java.lang.String duration) {\n        this.duration = duration;\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"estimated_time_of_arrival\")\n    public java.lang.String getEstimatedTimeOfArrivalIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(estimatedTimeOfArrival);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"estimated_time_of_arrival\")\n    public void setEstimatedTimeOfArrivalIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            estimatedTimeOfArrival = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    public java.util.Collection<java.lang.String> getNodes() {\n        return nodes;\n    }\n\n    public void setNodes(java.util.Collection<java.lang.String> nodes) {\n        this.nodes = nodes;\n    }\n\n    public java.util.Collection<java.lang.String> getDatacenters() {\n        return datacenters;\n    }\n\n    public void setDatacenters(java.util.Collection<java.lang.String> datacenters) {\n        this.datacenters = datacenters;\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"blacklisted_tables\")\n    public java.util.Collection<java.lang.String> getBlacklistedTables() {\n        return blacklistedTables;\n    }\n\n    public void setBlacklistedTables(java.util.Collection<java.lang.String> blacklistedTables) {\n        this.blacklistedTables = blacklistedTables;\n    }\n\n    static double roundDoubleNicely(double intensity) {\n        return java.lang.Math.round(intensity * 10000.0F) / 10000.0F;\n    }\n\n    @javax.annotation.Nullable\n    public static java.lang.String dateTimeToIso8601(@javax.annotation.Nullable\n    org.joda.time.DateTime dateTime) {\n        return null != dateTime ? org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().print(dateTime) : null;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "@com.fasterxml.jackson.annotation.JsonProperty(\"current_time\")\npublic void setCurrentTimeIso8601(java.lang.String dateStr) {\n    if (null != dateStr) {\n        currentTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n    }\n}",
            "src_parent": "public final class RepairRunStatus {\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private java.lang.String cause;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private java.lang.String owner;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private java.util.UUID id;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"cluster_name\")\n    private java.lang.String clusterName;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"column_families\")\n    private java.util.Collection<java.lang.String> columnFamilies;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"keyspace_name\")\n    private java.lang.String keyspaceName;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private RepairRun.RunState state;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime creationTime;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime startTime;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime endTime;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime pauseTime;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime currentTime;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private double intensity;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"incremental_repair\")\n    private boolean incrementalRepair;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"total_segments\")\n    private int totalSegments;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"repair_parallelism\")\n    private org.apache.cassandra.repair.RepairParallelism repairParallelism;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"segments_repaired\")\n    private int segmentsRepaired;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"last_event\")\n    private java.lang.String lastEvent;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private java.lang.String duration;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime estimatedTimeOfArrival;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"nodes\")\n    private java.util.Collection<java.lang.String> nodes;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"datacenters\")\n    private java.util.Collection<java.lang.String> datacenters;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"blacklisted_tables\")\n    private java.util.Collection<java.lang.String> blacklistedTables;\n\n    public RepairRunStatus() {\n    }\n\n    public RepairRunStatus(java.util.UUID runId, java.lang.String clusterName, java.lang.String keyspaceName, java.util.Collection<java.lang.String> columnFamilies, int segmentsRepaired, int totalSegments, io.cassandrareaper.core.RepairRun.RunState state, org.joda.time.DateTime startTime, org.joda.time.DateTime endTime, java.lang.String cause, java.lang.String owner, java.lang.String lastEvent, org.joda.time.DateTime creationTime, org.joda.time.DateTime pauseTime, double intensity, boolean incrementalRepair, org.apache.cassandra.repair.RepairParallelism repairParallelism, java.util.Collection<java.lang.String> nodes, java.util.Collection<java.lang.String> datacenters, java.util.Collection<java.lang.String> blacklistedTables) {\n        this.id = runId;\n        this.cause = cause;\n        this.owner = owner;\n        this.clusterName = clusterName;\n        this.columnFamilies = columnFamilies;\n        this.keyspaceName = keyspaceName;\n        this.state = state;\n        this.creationTime = creationTime;\n        this.startTime = startTime;\n        this.endTime = endTime;\n        this.pauseTime = pauseTime;\n        this.currentTime = org.joda.time.DateTime.now();\n        this.intensity = io.cassandrareaper.resources.view.RepairRunStatus.roundDoubleNicely(intensity);\n        this.incrementalRepair = incrementalRepair;\n        this.totalSegments = totalSegments;\n        this.repairParallelism = repairParallelism;\n        this.segmentsRepaired = segmentsRepaired;\n        this.lastEvent = lastEvent;\n        this.nodes = nodes;\n        this.datacenters = datacenters;\n        this.blacklistedTables = blacklistedTables;\n        if (startTime == null) {\n            duration = null;\n        } else if ((state == RepairRun.RunState.RUNNING) || (state == RepairRun.RunState.PAUSED)) {\n            duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), currentTime.toInstant()).getMillis(), true, false);\n        } else if (state == RepairRun.RunState.ABORTED) {\n            duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), pauseTime.toInstant()).getMillis(), true, false);\n        } else if (endTime != null) {\n            duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n        } else {\n            duration = null;\n        }\n        if (startTime == null) {\n            estimatedTimeOfArrival = null;\n        } else if ((((state == RepairRun.RunState.ERROR) || (state == RepairRun.RunState.DELETED)) || (state == RepairRun.RunState.ABORTED)) || (segmentsRepaired == 0)) {\n            estimatedTimeOfArrival = null;\n        } else {\n            long now = org.joda.time.DateTime.now().getMillis();\n            long currentDuration = now - startTime.getMillis();\n            long millisecondsPerSegment = currentDuration / segmentsRepaired;\n            int segmentsLeft = totalSegments - segmentsRepaired;\n            estimatedTimeOfArrival = new org.joda.time.DateTime(now + (millisecondsPerSegment * segmentsLeft));\n        }\n    }\n\n    public RepairRunStatus(io.cassandrareaper.core.RepairRun repairRun, io.cassandrareaper.core.RepairUnit repairUnit, int segmentsRepaired) {\n        this(repairRun.getId(), repairRun.getClusterName(), repairUnit.getKeyspaceName(), repairUnit.getColumnFamilies(), segmentsRepaired, repairRun.getSegmentCount(), repairRun.getRunState(), repairRun.getStartTime(), repairRun.getEndTime(), repairRun.getCause(), repairRun.getOwner(), repairRun.getLastEvent(), repairRun.getCreationTime(), repairRun.getPauseTime(), repairRun.getIntensity(), repairUnit.getIncrementalRepair(), repairRun.getRepairParallelism(), repairUnit.getNodes(), repairUnit.getDatacenters(), repairUnit.getBlacklistedTables());\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"creation_time\")\n    public java.lang.String getCreationTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(creationTime);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"creation_time\")\n    public void setCreationTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            creationTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"start_time\")\n    public java.lang.String getStartTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(startTime);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"start_time\")\n    public void setStartTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            startTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"end_time\")\n    public java.lang.String getEndTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(endTime);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"end_time\")\n    public void setEndTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            endTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"pause_time\")\n    public java.lang.String getPauseTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(pauseTime);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"pause_time\")\n    public void setPauseTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            pauseTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"current_time\")\n    public void setCurrentTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            currentTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"current_time\")\n    public java.lang.String getCurrentTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(currentTime);\n    }\n\n    public java.lang.String getCause() {\n        return cause;\n    }\n\n    public void setCause(java.lang.String cause) {\n        this.cause = cause;\n    }\n\n    public java.lang.String getOwner() {\n        return owner;\n    }\n\n    public void setOwner(java.lang.String owner) {\n        this.owner = owner;\n    }\n\n    public java.util.UUID getId() {\n        return id;\n    }\n\n    public void setId(java.util.UUID id) {\n        this.id = id;\n    }\n\n    public java.lang.String getClusterName() {\n        return clusterName;\n    }\n\n    public void setClusterName(java.lang.String clusterName) {\n        this.clusterName = clusterName;\n    }\n\n    public java.util.Collection<java.lang.String> getColumnFamilies() {\n        return columnFamilies;\n    }\n\n    public void setColumnFamilies(java.util.Collection<java.lang.String> columnFamilies) {\n        this.columnFamilies = columnFamilies;\n    }\n\n    public java.lang.String getKeyspaceName() {\n        return keyspaceName;\n    }\n\n    public void setKeyspaceName(java.lang.String keyspaceName) {\n        this.keyspaceName = keyspaceName;\n    }\n\n    public RepairRun.RunState getState() {\n        return state;\n    }\n\n    public void setState(io.cassandrareaper.core.RepairRun.RunState runState) {\n        this.state = runState;\n    }\n\n    public org.joda.time.DateTime getCreationTime() {\n        return creationTime;\n    }\n\n    public void setCreationTime(org.joda.time.DateTime creationTime) {\n        this.creationTime = creationTime;\n    }\n\n    public org.joda.time.DateTime getStartTime() {\n        return startTime;\n    }\n\n    public void setStartTime(org.joda.time.DateTime startTime) {\n        this.startTime = startTime;\n    }\n\n    public org.joda.time.DateTime getEndTime() {\n        return endTime;\n    }\n\n    public void setEndTime(org.joda.time.DateTime endTime) {\n        this.endTime = endTime;\n    }\n\n    public org.joda.time.DateTime getPauseTime() {\n        return pauseTime;\n    }\n\n    public void setPauseTime(org.joda.time.DateTime pauseTime) {\n        this.pauseTime = pauseTime;\n    }\n\n    public org.joda.time.DateTime getCurrentTime() {\n        return currentTime;\n    }\n\n    public void setCurrentTime(org.joda.time.DateTime currentTime) {\n        this.currentTime = currentTime;\n    }\n\n    public double getIntensity() {\n        return intensity;\n    }\n\n    public void setIntensity(double intensity) {\n        this.intensity = intensity;\n    }\n\n    public boolean getIncrementalRepair() {\n        return incrementalRepair;\n    }\n\n    public void setIncrementalRepair(boolean incrementalRepair) {\n        this.incrementalRepair = incrementalRepair;\n    }\n\n    public int getTotalSegments() {\n        return totalSegments;\n    }\n\n    public void setTotalSegments(int segmentCount) {\n        this.totalSegments = segmentCount;\n    }\n\n    public org.apache.cassandra.repair.RepairParallelism getRepairParallelism() {\n        return repairParallelism;\n    }\n\n    public void setRepairParallelism(org.apache.cassandra.repair.RepairParallelism repairParallelism) {\n        this.repairParallelism = repairParallelism;\n    }\n\n    public int getSegmentsRepaired() {\n        return segmentsRepaired;\n    }\n\n    public void setSegmentsRepaired(int segmentsRepaired) {\n        this.segmentsRepaired = segmentsRepaired;\n    }\n\n    public java.lang.String getLastEvent() {\n        return lastEvent;\n    }\n\n    public void setLastEvent(java.lang.String lastEvent) {\n        this.lastEvent = lastEvent;\n    }\n\n    public java.lang.String getDuration() {\n        return duration;\n    }\n\n    public void setDuration(java.lang.String duration) {\n        this.duration = duration;\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"estimated_time_of_arrival\")\n    public java.lang.String getEstimatedTimeOfArrivalIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(estimatedTimeOfArrival);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"estimated_time_of_arrival\")\n    public void setEstimatedTimeOfArrivalIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            estimatedTimeOfArrival = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    public java.util.Collection<java.lang.String> getNodes() {\n        return nodes;\n    }\n\n    public void setNodes(java.util.Collection<java.lang.String> nodes) {\n        this.nodes = nodes;\n    }\n\n    public java.util.Collection<java.lang.String> getDatacenters() {\n        return datacenters;\n    }\n\n    public void setDatacenters(java.util.Collection<java.lang.String> datacenters) {\n        this.datacenters = datacenters;\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"blacklisted_tables\")\n    public java.util.Collection<java.lang.String> getBlacklistedTables() {\n        return blacklistedTables;\n    }\n\n    public void setBlacklistedTables(java.util.Collection<java.lang.String> blacklistedTables) {\n        this.blacklistedTables = blacklistedTables;\n    }\n\n    static double roundDoubleNicely(double intensity) {\n        return java.lang.Math.round(intensity * 10000.0F) / 10000.0F;\n    }\n\n    @javax.annotation.Nullable\n    public static java.lang.String dateTimeToIso8601(@javax.annotation.Nullable\n    org.joda.time.DateTime dateTime) {\n        return null != dateTime ? org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().print(dateTime) : null;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "@com.fasterxml.jackson.annotation.JsonProperty(\"current_time\")\npublic java.lang.String getCurrentTimeIso8601() {\n    return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(currentTime);\n}",
            "src_parent": "public final class RepairRunStatus {\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private java.lang.String cause;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private java.lang.String owner;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private java.util.UUID id;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"cluster_name\")\n    private java.lang.String clusterName;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"column_families\")\n    private java.util.Collection<java.lang.String> columnFamilies;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"keyspace_name\")\n    private java.lang.String keyspaceName;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private RepairRun.RunState state;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime creationTime;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime startTime;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime endTime;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime pauseTime;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime currentTime;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private double intensity;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"incremental_repair\")\n    private boolean incrementalRepair;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"total_segments\")\n    private int totalSegments;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"repair_parallelism\")\n    private org.apache.cassandra.repair.RepairParallelism repairParallelism;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"segments_repaired\")\n    private int segmentsRepaired;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"last_event\")\n    private java.lang.String lastEvent;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private java.lang.String duration;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime estimatedTimeOfArrival;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"nodes\")\n    private java.util.Collection<java.lang.String> nodes;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"datacenters\")\n    private java.util.Collection<java.lang.String> datacenters;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"blacklisted_tables\")\n    private java.util.Collection<java.lang.String> blacklistedTables;\n\n    public RepairRunStatus() {\n    }\n\n    public RepairRunStatus(java.util.UUID runId, java.lang.String clusterName, java.lang.String keyspaceName, java.util.Collection<java.lang.String> columnFamilies, int segmentsRepaired, int totalSegments, io.cassandrareaper.core.RepairRun.RunState state, org.joda.time.DateTime startTime, org.joda.time.DateTime endTime, java.lang.String cause, java.lang.String owner, java.lang.String lastEvent, org.joda.time.DateTime creationTime, org.joda.time.DateTime pauseTime, double intensity, boolean incrementalRepair, org.apache.cassandra.repair.RepairParallelism repairParallelism, java.util.Collection<java.lang.String> nodes, java.util.Collection<java.lang.String> datacenters, java.util.Collection<java.lang.String> blacklistedTables) {\n        this.id = runId;\n        this.cause = cause;\n        this.owner = owner;\n        this.clusterName = clusterName;\n        this.columnFamilies = columnFamilies;\n        this.keyspaceName = keyspaceName;\n        this.state = state;\n        this.creationTime = creationTime;\n        this.startTime = startTime;\n        this.endTime = endTime;\n        this.pauseTime = pauseTime;\n        this.currentTime = org.joda.time.DateTime.now();\n        this.intensity = io.cassandrareaper.resources.view.RepairRunStatus.roundDoubleNicely(intensity);\n        this.incrementalRepair = incrementalRepair;\n        this.totalSegments = totalSegments;\n        this.repairParallelism = repairParallelism;\n        this.segmentsRepaired = segmentsRepaired;\n        this.lastEvent = lastEvent;\n        this.nodes = nodes;\n        this.datacenters = datacenters;\n        this.blacklistedTables = blacklistedTables;\n        if (startTime == null) {\n            duration = null;\n        } else if ((state == RepairRun.RunState.RUNNING) || (state == RepairRun.RunState.PAUSED)) {\n            duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), currentTime.toInstant()).getMillis(), true, false);\n        } else if (state == RepairRun.RunState.ABORTED) {\n            duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), pauseTime.toInstant()).getMillis(), true, false);\n        } else if (endTime != null) {\n            duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n        } else {\n            duration = null;\n        }\n        if (startTime == null) {\n            estimatedTimeOfArrival = null;\n        } else if ((((state == RepairRun.RunState.ERROR) || (state == RepairRun.RunState.DELETED)) || (state == RepairRun.RunState.ABORTED)) || (segmentsRepaired == 0)) {\n            estimatedTimeOfArrival = null;\n        } else {\n            long now = org.joda.time.DateTime.now().getMillis();\n            long currentDuration = now - startTime.getMillis();\n            long millisecondsPerSegment = currentDuration / segmentsRepaired;\n            int segmentsLeft = totalSegments - segmentsRepaired;\n            estimatedTimeOfArrival = new org.joda.time.DateTime(now + (millisecondsPerSegment * segmentsLeft));\n        }\n    }\n\n    public RepairRunStatus(io.cassandrareaper.core.RepairRun repairRun, io.cassandrareaper.core.RepairUnit repairUnit, int segmentsRepaired) {\n        this(repairRun.getId(), repairRun.getClusterName(), repairUnit.getKeyspaceName(), repairUnit.getColumnFamilies(), segmentsRepaired, repairRun.getSegmentCount(), repairRun.getRunState(), repairRun.getStartTime(), repairRun.getEndTime(), repairRun.getCause(), repairRun.getOwner(), repairRun.getLastEvent(), repairRun.getCreationTime(), repairRun.getPauseTime(), repairRun.getIntensity(), repairUnit.getIncrementalRepair(), repairRun.getRepairParallelism(), repairUnit.getNodes(), repairUnit.getDatacenters(), repairUnit.getBlacklistedTables());\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"creation_time\")\n    public java.lang.String getCreationTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(creationTime);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"creation_time\")\n    public void setCreationTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            creationTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"start_time\")\n    public java.lang.String getStartTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(startTime);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"start_time\")\n    public void setStartTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            startTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"end_time\")\n    public java.lang.String getEndTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(endTime);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"end_time\")\n    public void setEndTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            endTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"pause_time\")\n    public java.lang.String getPauseTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(pauseTime);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"pause_time\")\n    public void setPauseTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            pauseTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"current_time\")\n    public void setCurrentTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            currentTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"current_time\")\n    public java.lang.String getCurrentTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(currentTime);\n    }\n\n    public java.lang.String getCause() {\n        return cause;\n    }\n\n    public void setCause(java.lang.String cause) {\n        this.cause = cause;\n    }\n\n    public java.lang.String getOwner() {\n        return owner;\n    }\n\n    public void setOwner(java.lang.String owner) {\n        this.owner = owner;\n    }\n\n    public java.util.UUID getId() {\n        return id;\n    }\n\n    public void setId(java.util.UUID id) {\n        this.id = id;\n    }\n\n    public java.lang.String getClusterName() {\n        return clusterName;\n    }\n\n    public void setClusterName(java.lang.String clusterName) {\n        this.clusterName = clusterName;\n    }\n\n    public java.util.Collection<java.lang.String> getColumnFamilies() {\n        return columnFamilies;\n    }\n\n    public void setColumnFamilies(java.util.Collection<java.lang.String> columnFamilies) {\n        this.columnFamilies = columnFamilies;\n    }\n\n    public java.lang.String getKeyspaceName() {\n        return keyspaceName;\n    }\n\n    public void setKeyspaceName(java.lang.String keyspaceName) {\n        this.keyspaceName = keyspaceName;\n    }\n\n    public RepairRun.RunState getState() {\n        return state;\n    }\n\n    public void setState(io.cassandrareaper.core.RepairRun.RunState runState) {\n        this.state = runState;\n    }\n\n    public org.joda.time.DateTime getCreationTime() {\n        return creationTime;\n    }\n\n    public void setCreationTime(org.joda.time.DateTime creationTime) {\n        this.creationTime = creationTime;\n    }\n\n    public org.joda.time.DateTime getStartTime() {\n        return startTime;\n    }\n\n    public void setStartTime(org.joda.time.DateTime startTime) {\n        this.startTime = startTime;\n    }\n\n    public org.joda.time.DateTime getEndTime() {\n        return endTime;\n    }\n\n    public void setEndTime(org.joda.time.DateTime endTime) {\n        this.endTime = endTime;\n    }\n\n    public org.joda.time.DateTime getPauseTime() {\n        return pauseTime;\n    }\n\n    public void setPauseTime(org.joda.time.DateTime pauseTime) {\n        this.pauseTime = pauseTime;\n    }\n\n    public org.joda.time.DateTime getCurrentTime() {\n        return currentTime;\n    }\n\n    public void setCurrentTime(org.joda.time.DateTime currentTime) {\n        this.currentTime = currentTime;\n    }\n\n    public double getIntensity() {\n        return intensity;\n    }\n\n    public void setIntensity(double intensity) {\n        this.intensity = intensity;\n    }\n\n    public boolean getIncrementalRepair() {\n        return incrementalRepair;\n    }\n\n    public void setIncrementalRepair(boolean incrementalRepair) {\n        this.incrementalRepair = incrementalRepair;\n    }\n\n    public int getTotalSegments() {\n        return totalSegments;\n    }\n\n    public void setTotalSegments(int segmentCount) {\n        this.totalSegments = segmentCount;\n    }\n\n    public org.apache.cassandra.repair.RepairParallelism getRepairParallelism() {\n        return repairParallelism;\n    }\n\n    public void setRepairParallelism(org.apache.cassandra.repair.RepairParallelism repairParallelism) {\n        this.repairParallelism = repairParallelism;\n    }\n\n    public int getSegmentsRepaired() {\n        return segmentsRepaired;\n    }\n\n    public void setSegmentsRepaired(int segmentsRepaired) {\n        this.segmentsRepaired = segmentsRepaired;\n    }\n\n    public java.lang.String getLastEvent() {\n        return lastEvent;\n    }\n\n    public void setLastEvent(java.lang.String lastEvent) {\n        this.lastEvent = lastEvent;\n    }\n\n    public java.lang.String getDuration() {\n        return duration;\n    }\n\n    public void setDuration(java.lang.String duration) {\n        this.duration = duration;\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"estimated_time_of_arrival\")\n    public java.lang.String getEstimatedTimeOfArrivalIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(estimatedTimeOfArrival);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"estimated_time_of_arrival\")\n    public void setEstimatedTimeOfArrivalIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            estimatedTimeOfArrival = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    public java.util.Collection<java.lang.String> getNodes() {\n        return nodes;\n    }\n\n    public void setNodes(java.util.Collection<java.lang.String> nodes) {\n        this.nodes = nodes;\n    }\n\n    public java.util.Collection<java.lang.String> getDatacenters() {\n        return datacenters;\n    }\n\n    public void setDatacenters(java.util.Collection<java.lang.String> datacenters) {\n        this.datacenters = datacenters;\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"blacklisted_tables\")\n    public java.util.Collection<java.lang.String> getBlacklistedTables() {\n        return blacklistedTables;\n    }\n\n    public void setBlacklistedTables(java.util.Collection<java.lang.String> blacklistedTables) {\n        this.blacklistedTables = blacklistedTables;\n    }\n\n    static double roundDoubleNicely(double intensity) {\n        return java.lang.Math.round(intensity * 10000.0F) / 10000.0F;\n    }\n\n    @javax.annotation.Nullable\n    public static java.lang.String dateTimeToIso8601(@javax.annotation.Nullable\n    org.joda.time.DateTime dateTime) {\n        return null != dateTime ? org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().print(dateTime) : null;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public org.joda.time.DateTime getCurrentTime() {\n    return currentTime;\n}",
            "src_parent": "public final class RepairRunStatus {\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private java.lang.String cause;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private java.lang.String owner;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private java.util.UUID id;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"cluster_name\")\n    private java.lang.String clusterName;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"column_families\")\n    private java.util.Collection<java.lang.String> columnFamilies;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"keyspace_name\")\n    private java.lang.String keyspaceName;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private RepairRun.RunState state;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime creationTime;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime startTime;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime endTime;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime pauseTime;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime currentTime;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private double intensity;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"incremental_repair\")\n    private boolean incrementalRepair;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"total_segments\")\n    private int totalSegments;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"repair_parallelism\")\n    private org.apache.cassandra.repair.RepairParallelism repairParallelism;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"segments_repaired\")\n    private int segmentsRepaired;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"last_event\")\n    private java.lang.String lastEvent;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private java.lang.String duration;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime estimatedTimeOfArrival;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"nodes\")\n    private java.util.Collection<java.lang.String> nodes;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"datacenters\")\n    private java.util.Collection<java.lang.String> datacenters;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"blacklisted_tables\")\n    private java.util.Collection<java.lang.String> blacklistedTables;\n\n    public RepairRunStatus() {\n    }\n\n    public RepairRunStatus(java.util.UUID runId, java.lang.String clusterName, java.lang.String keyspaceName, java.util.Collection<java.lang.String> columnFamilies, int segmentsRepaired, int totalSegments, io.cassandrareaper.core.RepairRun.RunState state, org.joda.time.DateTime startTime, org.joda.time.DateTime endTime, java.lang.String cause, java.lang.String owner, java.lang.String lastEvent, org.joda.time.DateTime creationTime, org.joda.time.DateTime pauseTime, double intensity, boolean incrementalRepair, org.apache.cassandra.repair.RepairParallelism repairParallelism, java.util.Collection<java.lang.String> nodes, java.util.Collection<java.lang.String> datacenters, java.util.Collection<java.lang.String> blacklistedTables) {\n        this.id = runId;\n        this.cause = cause;\n        this.owner = owner;\n        this.clusterName = clusterName;\n        this.columnFamilies = columnFamilies;\n        this.keyspaceName = keyspaceName;\n        this.state = state;\n        this.creationTime = creationTime;\n        this.startTime = startTime;\n        this.endTime = endTime;\n        this.pauseTime = pauseTime;\n        this.currentTime = org.joda.time.DateTime.now();\n        this.intensity = io.cassandrareaper.resources.view.RepairRunStatus.roundDoubleNicely(intensity);\n        this.incrementalRepair = incrementalRepair;\n        this.totalSegments = totalSegments;\n        this.repairParallelism = repairParallelism;\n        this.segmentsRepaired = segmentsRepaired;\n        this.lastEvent = lastEvent;\n        this.nodes = nodes;\n        this.datacenters = datacenters;\n        this.blacklistedTables = blacklistedTables;\n        if (startTime == null) {\n            duration = null;\n        } else if ((state == RepairRun.RunState.RUNNING) || (state == RepairRun.RunState.PAUSED)) {\n            duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), currentTime.toInstant()).getMillis(), true, false);\n        } else if (state == RepairRun.RunState.ABORTED) {\n            duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), pauseTime.toInstant()).getMillis(), true, false);\n        } else if (endTime != null) {\n            duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n        } else {\n            duration = null;\n        }\n        if (startTime == null) {\n            estimatedTimeOfArrival = null;\n        } else if ((((state == RepairRun.RunState.ERROR) || (state == RepairRun.RunState.DELETED)) || (state == RepairRun.RunState.ABORTED)) || (segmentsRepaired == 0)) {\n            estimatedTimeOfArrival = null;\n        } else {\n            long now = org.joda.time.DateTime.now().getMillis();\n            long currentDuration = now - startTime.getMillis();\n            long millisecondsPerSegment = currentDuration / segmentsRepaired;\n            int segmentsLeft = totalSegments - segmentsRepaired;\n            estimatedTimeOfArrival = new org.joda.time.DateTime(now + (millisecondsPerSegment * segmentsLeft));\n        }\n    }\n\n    public RepairRunStatus(io.cassandrareaper.core.RepairRun repairRun, io.cassandrareaper.core.RepairUnit repairUnit, int segmentsRepaired) {\n        this(repairRun.getId(), repairRun.getClusterName(), repairUnit.getKeyspaceName(), repairUnit.getColumnFamilies(), segmentsRepaired, repairRun.getSegmentCount(), repairRun.getRunState(), repairRun.getStartTime(), repairRun.getEndTime(), repairRun.getCause(), repairRun.getOwner(), repairRun.getLastEvent(), repairRun.getCreationTime(), repairRun.getPauseTime(), repairRun.getIntensity(), repairUnit.getIncrementalRepair(), repairRun.getRepairParallelism(), repairUnit.getNodes(), repairUnit.getDatacenters(), repairUnit.getBlacklistedTables());\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"creation_time\")\n    public java.lang.String getCreationTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(creationTime);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"creation_time\")\n    public void setCreationTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            creationTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"start_time\")\n    public java.lang.String getStartTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(startTime);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"start_time\")\n    public void setStartTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            startTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"end_time\")\n    public java.lang.String getEndTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(endTime);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"end_time\")\n    public void setEndTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            endTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"pause_time\")\n    public java.lang.String getPauseTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(pauseTime);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"pause_time\")\n    public void setPauseTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            pauseTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"current_time\")\n    public void setCurrentTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            currentTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"current_time\")\n    public java.lang.String getCurrentTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(currentTime);\n    }\n\n    public java.lang.String getCause() {\n        return cause;\n    }\n\n    public void setCause(java.lang.String cause) {\n        this.cause = cause;\n    }\n\n    public java.lang.String getOwner() {\n        return owner;\n    }\n\n    public void setOwner(java.lang.String owner) {\n        this.owner = owner;\n    }\n\n    public java.util.UUID getId() {\n        return id;\n    }\n\n    public void setId(java.util.UUID id) {\n        this.id = id;\n    }\n\n    public java.lang.String getClusterName() {\n        return clusterName;\n    }\n\n    public void setClusterName(java.lang.String clusterName) {\n        this.clusterName = clusterName;\n    }\n\n    public java.util.Collection<java.lang.String> getColumnFamilies() {\n        return columnFamilies;\n    }\n\n    public void setColumnFamilies(java.util.Collection<java.lang.String> columnFamilies) {\n        this.columnFamilies = columnFamilies;\n    }\n\n    public java.lang.String getKeyspaceName() {\n        return keyspaceName;\n    }\n\n    public void setKeyspaceName(java.lang.String keyspaceName) {\n        this.keyspaceName = keyspaceName;\n    }\n\n    public RepairRun.RunState getState() {\n        return state;\n    }\n\n    public void setState(io.cassandrareaper.core.RepairRun.RunState runState) {\n        this.state = runState;\n    }\n\n    public org.joda.time.DateTime getCreationTime() {\n        return creationTime;\n    }\n\n    public void setCreationTime(org.joda.time.DateTime creationTime) {\n        this.creationTime = creationTime;\n    }\n\n    public org.joda.time.DateTime getStartTime() {\n        return startTime;\n    }\n\n    public void setStartTime(org.joda.time.DateTime startTime) {\n        this.startTime = startTime;\n    }\n\n    public org.joda.time.DateTime getEndTime() {\n        return endTime;\n    }\n\n    public void setEndTime(org.joda.time.DateTime endTime) {\n        this.endTime = endTime;\n    }\n\n    public org.joda.time.DateTime getPauseTime() {\n        return pauseTime;\n    }\n\n    public void setPauseTime(org.joda.time.DateTime pauseTime) {\n        this.pauseTime = pauseTime;\n    }\n\n    public org.joda.time.DateTime getCurrentTime() {\n        return currentTime;\n    }\n\n    public void setCurrentTime(org.joda.time.DateTime currentTime) {\n        this.currentTime = currentTime;\n    }\n\n    public double getIntensity() {\n        return intensity;\n    }\n\n    public void setIntensity(double intensity) {\n        this.intensity = intensity;\n    }\n\n    public boolean getIncrementalRepair() {\n        return incrementalRepair;\n    }\n\n    public void setIncrementalRepair(boolean incrementalRepair) {\n        this.incrementalRepair = incrementalRepair;\n    }\n\n    public int getTotalSegments() {\n        return totalSegments;\n    }\n\n    public void setTotalSegments(int segmentCount) {\n        this.totalSegments = segmentCount;\n    }\n\n    public org.apache.cassandra.repair.RepairParallelism getRepairParallelism() {\n        return repairParallelism;\n    }\n\n    public void setRepairParallelism(org.apache.cassandra.repair.RepairParallelism repairParallelism) {\n        this.repairParallelism = repairParallelism;\n    }\n\n    public int getSegmentsRepaired() {\n        return segmentsRepaired;\n    }\n\n    public void setSegmentsRepaired(int segmentsRepaired) {\n        this.segmentsRepaired = segmentsRepaired;\n    }\n\n    public java.lang.String getLastEvent() {\n        return lastEvent;\n    }\n\n    public void setLastEvent(java.lang.String lastEvent) {\n        this.lastEvent = lastEvent;\n    }\n\n    public java.lang.String getDuration() {\n        return duration;\n    }\n\n    public void setDuration(java.lang.String duration) {\n        this.duration = duration;\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"estimated_time_of_arrival\")\n    public java.lang.String getEstimatedTimeOfArrivalIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(estimatedTimeOfArrival);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"estimated_time_of_arrival\")\n    public void setEstimatedTimeOfArrivalIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            estimatedTimeOfArrival = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    public java.util.Collection<java.lang.String> getNodes() {\n        return nodes;\n    }\n\n    public void setNodes(java.util.Collection<java.lang.String> nodes) {\n        this.nodes = nodes;\n    }\n\n    public java.util.Collection<java.lang.String> getDatacenters() {\n        return datacenters;\n    }\n\n    public void setDatacenters(java.util.Collection<java.lang.String> datacenters) {\n        this.datacenters = datacenters;\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"blacklisted_tables\")\n    public java.util.Collection<java.lang.String> getBlacklistedTables() {\n        return blacklistedTables;\n    }\n\n    public void setBlacklistedTables(java.util.Collection<java.lang.String> blacklistedTables) {\n        this.blacklistedTables = blacklistedTables;\n    }\n\n    static double roundDoubleNicely(double intensity) {\n        return java.lang.Math.round(intensity * 10000.0F) / 10000.0F;\n    }\n\n    @javax.annotation.Nullable\n    public static java.lang.String dateTimeToIso8601(@javax.annotation.Nullable\n    org.joda.time.DateTime dateTime) {\n        return null != dateTime ? org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().print(dateTime) : null;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public void setCurrentTime(org.joda.time.DateTime currentTime) {\n    this.currentTime = currentTime;\n}",
            "src_parent": "public final class RepairRunStatus {\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private java.lang.String cause;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private java.lang.String owner;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private java.util.UUID id;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"cluster_name\")\n    private java.lang.String clusterName;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"column_families\")\n    private java.util.Collection<java.lang.String> columnFamilies;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"keyspace_name\")\n    private java.lang.String keyspaceName;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private RepairRun.RunState state;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime creationTime;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime startTime;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime endTime;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime pauseTime;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime currentTime;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private double intensity;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"incremental_repair\")\n    private boolean incrementalRepair;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"total_segments\")\n    private int totalSegments;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"repair_parallelism\")\n    private org.apache.cassandra.repair.RepairParallelism repairParallelism;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"segments_repaired\")\n    private int segmentsRepaired;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"last_event\")\n    private java.lang.String lastEvent;\n\n    @com.fasterxml.jackson.annotation.JsonProperty\n    private java.lang.String duration;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private org.joda.time.DateTime estimatedTimeOfArrival;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"nodes\")\n    private java.util.Collection<java.lang.String> nodes;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"datacenters\")\n    private java.util.Collection<java.lang.String> datacenters;\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"blacklisted_tables\")\n    private java.util.Collection<java.lang.String> blacklistedTables;\n\n    public RepairRunStatus() {\n    }\n\n    public RepairRunStatus(java.util.UUID runId, java.lang.String clusterName, java.lang.String keyspaceName, java.util.Collection<java.lang.String> columnFamilies, int segmentsRepaired, int totalSegments, io.cassandrareaper.core.RepairRun.RunState state, org.joda.time.DateTime startTime, org.joda.time.DateTime endTime, java.lang.String cause, java.lang.String owner, java.lang.String lastEvent, org.joda.time.DateTime creationTime, org.joda.time.DateTime pauseTime, double intensity, boolean incrementalRepair, org.apache.cassandra.repair.RepairParallelism repairParallelism, java.util.Collection<java.lang.String> nodes, java.util.Collection<java.lang.String> datacenters, java.util.Collection<java.lang.String> blacklistedTables) {\n        this.id = runId;\n        this.cause = cause;\n        this.owner = owner;\n        this.clusterName = clusterName;\n        this.columnFamilies = columnFamilies;\n        this.keyspaceName = keyspaceName;\n        this.state = state;\n        this.creationTime = creationTime;\n        this.startTime = startTime;\n        this.endTime = endTime;\n        this.pauseTime = pauseTime;\n        this.currentTime = org.joda.time.DateTime.now();\n        this.intensity = io.cassandrareaper.resources.view.RepairRunStatus.roundDoubleNicely(intensity);\n        this.incrementalRepair = incrementalRepair;\n        this.totalSegments = totalSegments;\n        this.repairParallelism = repairParallelism;\n        this.segmentsRepaired = segmentsRepaired;\n        this.lastEvent = lastEvent;\n        this.nodes = nodes;\n        this.datacenters = datacenters;\n        this.blacklistedTables = blacklistedTables;\n        if (startTime == null) {\n            duration = null;\n        } else if ((state == RepairRun.RunState.RUNNING) || (state == RepairRun.RunState.PAUSED)) {\n            duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), currentTime.toInstant()).getMillis(), true, false);\n        } else if (state == RepairRun.RunState.ABORTED) {\n            duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), pauseTime.toInstant()).getMillis(), true, false);\n        } else if (endTime != null) {\n            duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n        } else {\n            duration = null;\n        }\n        if (startTime == null) {\n            estimatedTimeOfArrival = null;\n        } else if ((((state == RepairRun.RunState.ERROR) || (state == RepairRun.RunState.DELETED)) || (state == RepairRun.RunState.ABORTED)) || (segmentsRepaired == 0)) {\n            estimatedTimeOfArrival = null;\n        } else {\n            long now = org.joda.time.DateTime.now().getMillis();\n            long currentDuration = now - startTime.getMillis();\n            long millisecondsPerSegment = currentDuration / segmentsRepaired;\n            int segmentsLeft = totalSegments - segmentsRepaired;\n            estimatedTimeOfArrival = new org.joda.time.DateTime(now + (millisecondsPerSegment * segmentsLeft));\n        }\n    }\n\n    public RepairRunStatus(io.cassandrareaper.core.RepairRun repairRun, io.cassandrareaper.core.RepairUnit repairUnit, int segmentsRepaired) {\n        this(repairRun.getId(), repairRun.getClusterName(), repairUnit.getKeyspaceName(), repairUnit.getColumnFamilies(), segmentsRepaired, repairRun.getSegmentCount(), repairRun.getRunState(), repairRun.getStartTime(), repairRun.getEndTime(), repairRun.getCause(), repairRun.getOwner(), repairRun.getLastEvent(), repairRun.getCreationTime(), repairRun.getPauseTime(), repairRun.getIntensity(), repairUnit.getIncrementalRepair(), repairRun.getRepairParallelism(), repairUnit.getNodes(), repairUnit.getDatacenters(), repairUnit.getBlacklistedTables());\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"creation_time\")\n    public java.lang.String getCreationTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(creationTime);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"creation_time\")\n    public void setCreationTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            creationTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"start_time\")\n    public java.lang.String getStartTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(startTime);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"start_time\")\n    public void setStartTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            startTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"end_time\")\n    public java.lang.String getEndTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(endTime);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"end_time\")\n    public void setEndTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            endTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"pause_time\")\n    public java.lang.String getPauseTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(pauseTime);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"pause_time\")\n    public void setPauseTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            pauseTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"current_time\")\n    public void setCurrentTimeIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            currentTime = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"current_time\")\n    public java.lang.String getCurrentTimeIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(currentTime);\n    }\n\n    public java.lang.String getCause() {\n        return cause;\n    }\n\n    public void setCause(java.lang.String cause) {\n        this.cause = cause;\n    }\n\n    public java.lang.String getOwner() {\n        return owner;\n    }\n\n    public void setOwner(java.lang.String owner) {\n        this.owner = owner;\n    }\n\n    public java.util.UUID getId() {\n        return id;\n    }\n\n    public void setId(java.util.UUID id) {\n        this.id = id;\n    }\n\n    public java.lang.String getClusterName() {\n        return clusterName;\n    }\n\n    public void setClusterName(java.lang.String clusterName) {\n        this.clusterName = clusterName;\n    }\n\n    public java.util.Collection<java.lang.String> getColumnFamilies() {\n        return columnFamilies;\n    }\n\n    public void setColumnFamilies(java.util.Collection<java.lang.String> columnFamilies) {\n        this.columnFamilies = columnFamilies;\n    }\n\n    public java.lang.String getKeyspaceName() {\n        return keyspaceName;\n    }\n\n    public void setKeyspaceName(java.lang.String keyspaceName) {\n        this.keyspaceName = keyspaceName;\n    }\n\n    public RepairRun.RunState getState() {\n        return state;\n    }\n\n    public void setState(io.cassandrareaper.core.RepairRun.RunState runState) {\n        this.state = runState;\n    }\n\n    public org.joda.time.DateTime getCreationTime() {\n        return creationTime;\n    }\n\n    public void setCreationTime(org.joda.time.DateTime creationTime) {\n        this.creationTime = creationTime;\n    }\n\n    public org.joda.time.DateTime getStartTime() {\n        return startTime;\n    }\n\n    public void setStartTime(org.joda.time.DateTime startTime) {\n        this.startTime = startTime;\n    }\n\n    public org.joda.time.DateTime getEndTime() {\n        return endTime;\n    }\n\n    public void setEndTime(org.joda.time.DateTime endTime) {\n        this.endTime = endTime;\n    }\n\n    public org.joda.time.DateTime getPauseTime() {\n        return pauseTime;\n    }\n\n    public void setPauseTime(org.joda.time.DateTime pauseTime) {\n        this.pauseTime = pauseTime;\n    }\n\n    public org.joda.time.DateTime getCurrentTime() {\n        return currentTime;\n    }\n\n    public void setCurrentTime(org.joda.time.DateTime currentTime) {\n        this.currentTime = currentTime;\n    }\n\n    public double getIntensity() {\n        return intensity;\n    }\n\n    public void setIntensity(double intensity) {\n        this.intensity = intensity;\n    }\n\n    public boolean getIncrementalRepair() {\n        return incrementalRepair;\n    }\n\n    public void setIncrementalRepair(boolean incrementalRepair) {\n        this.incrementalRepair = incrementalRepair;\n    }\n\n    public int getTotalSegments() {\n        return totalSegments;\n    }\n\n    public void setTotalSegments(int segmentCount) {\n        this.totalSegments = segmentCount;\n    }\n\n    public org.apache.cassandra.repair.RepairParallelism getRepairParallelism() {\n        return repairParallelism;\n    }\n\n    public void setRepairParallelism(org.apache.cassandra.repair.RepairParallelism repairParallelism) {\n        this.repairParallelism = repairParallelism;\n    }\n\n    public int getSegmentsRepaired() {\n        return segmentsRepaired;\n    }\n\n    public void setSegmentsRepaired(int segmentsRepaired) {\n        this.segmentsRepaired = segmentsRepaired;\n    }\n\n    public java.lang.String getLastEvent() {\n        return lastEvent;\n    }\n\n    public void setLastEvent(java.lang.String lastEvent) {\n        this.lastEvent = lastEvent;\n    }\n\n    public java.lang.String getDuration() {\n        return duration;\n    }\n\n    public void setDuration(java.lang.String duration) {\n        this.duration = duration;\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"estimated_time_of_arrival\")\n    public java.lang.String getEstimatedTimeOfArrivalIso8601() {\n        return io.cassandrareaper.resources.view.RepairRunStatus.dateTimeToIso8601(estimatedTimeOfArrival);\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"estimated_time_of_arrival\")\n    public void setEstimatedTimeOfArrivalIso8601(java.lang.String dateStr) {\n        if (null != dateStr) {\n            estimatedTimeOfArrival = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().parseDateTime(dateStr);\n        }\n    }\n\n    public java.util.Collection<java.lang.String> getNodes() {\n        return nodes;\n    }\n\n    public void setNodes(java.util.Collection<java.lang.String> nodes) {\n        this.nodes = nodes;\n    }\n\n    public java.util.Collection<java.lang.String> getDatacenters() {\n        return datacenters;\n    }\n\n    public void setDatacenters(java.util.Collection<java.lang.String> datacenters) {\n        this.datacenters = datacenters;\n    }\n\n    @com.fasterxml.jackson.annotation.JsonProperty(\"blacklisted_tables\")\n    public java.util.Collection<java.lang.String> getBlacklistedTables() {\n        return blacklistedTables;\n    }\n\n    public void setBlacklistedTables(java.util.Collection<java.lang.String> blacklistedTables) {\n        this.blacklistedTables = blacklistedTables;\n    }\n\n    static double roundDoubleNicely(double intensity) {\n        return java.lang.Math.round(intensity * 10000.0F) / 10000.0F;\n    }\n\n    @javax.annotation.Nullable\n    public static java.lang.String dateTimeToIso8601(@javax.annotation.Nullable\n    org.joda.time.DateTime dateTime) {\n        return null != dateTime ? org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis().print(dateTime) : null;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Constructor",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "this.currentTime = org.joda.time.DateTime.now()",
            "src_parent": "{\n    this.id = runId;\n    this.cause = cause;\n    this.owner = owner;\n    this.clusterName = clusterName;\n    this.columnFamilies = columnFamilies;\n    this.keyspaceName = keyspaceName;\n    this.state = state;\n    this.creationTime = creationTime;\n    this.startTime = startTime;\n    this.endTime = endTime;\n    this.pauseTime = pauseTime;\n    this.currentTime = org.joda.time.DateTime.now();\n    this.intensity = io.cassandrareaper.resources.view.RepairRunStatus.roundDoubleNicely(intensity);\n    this.incrementalRepair = incrementalRepair;\n    this.totalSegments = totalSegments;\n    this.repairParallelism = repairParallelism;\n    this.segmentsRepaired = segmentsRepaired;\n    this.lastEvent = lastEvent;\n    this.nodes = nodes;\n    this.datacenters = datacenters;\n    this.blacklistedTables = blacklistedTables;\n    if (startTime == null) {\n        duration = null;\n    } else if ((state == RepairRun.RunState.RUNNING) || (state == RepairRun.RunState.PAUSED)) {\n        duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), currentTime.toInstant()).getMillis(), true, false);\n    } else if (state == RepairRun.RunState.ABORTED) {\n        duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), pauseTime.toInstant()).getMillis(), true, false);\n    } else if (endTime != null) {\n        duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n    } else {\n        duration = null;\n    }\n    if (startTime == null) {\n        estimatedTimeOfArrival = null;\n    } else if ((((state == RepairRun.RunState.ERROR) || (state == RepairRun.RunState.DELETED)) || (state == RepairRun.RunState.ABORTED)) || (segmentsRepaired == 0)) {\n        estimatedTimeOfArrival = null;\n    } else {\n        long now = org.joda.time.DateTime.now().getMillis();\n        long currentDuration = now - startTime.getMillis();\n        long millisecondsPerSegment = currentDuration / segmentsRepaired;\n        int segmentsLeft = totalSegments - segmentsRepaired;\n        estimatedTimeOfArrival = new org.joda.time.DateTime(now + (millisecondsPerSegment * segmentsLeft));\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Constructor",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (startTime == null) {\n    duration = null;\n} else if ((state == RepairRun.RunState.RUNNING) || (state == RepairRun.RunState.PAUSED)) {\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), currentTime.toInstant()).getMillis(), true, false);\n} else if (state == RepairRun.RunState.ABORTED) {\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), pauseTime.toInstant()).getMillis(), true, false);\n} else if (endTime != null) {\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n} else {\n    duration = null;\n}",
            "src_parent": "{\n    this.id = runId;\n    this.cause = cause;\n    this.owner = owner;\n    this.clusterName = clusterName;\n    this.columnFamilies = columnFamilies;\n    this.keyspaceName = keyspaceName;\n    this.state = state;\n    this.creationTime = creationTime;\n    this.startTime = startTime;\n    this.endTime = endTime;\n    this.pauseTime = pauseTime;\n    this.currentTime = org.joda.time.DateTime.now();\n    this.intensity = io.cassandrareaper.resources.view.RepairRunStatus.roundDoubleNicely(intensity);\n    this.incrementalRepair = incrementalRepair;\n    this.totalSegments = totalSegments;\n    this.repairParallelism = repairParallelism;\n    this.segmentsRepaired = segmentsRepaired;\n    this.lastEvent = lastEvent;\n    this.nodes = nodes;\n    this.datacenters = datacenters;\n    this.blacklistedTables = blacklistedTables;\n    if (startTime == null) {\n        duration = null;\n    } else if ((state == RepairRun.RunState.RUNNING) || (state == RepairRun.RunState.PAUSED)) {\n        duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), currentTime.toInstant()).getMillis(), true, false);\n    } else if (state == RepairRun.RunState.ABORTED) {\n        duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), pauseTime.toInstant()).getMillis(), true, false);\n    } else if (endTime != null) {\n        duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n    } else {\n        duration = null;\n    }\n    if (startTime == null) {\n        estimatedTimeOfArrival = null;\n    } else if ((((state == RepairRun.RunState.ERROR) || (state == RepairRun.RunState.DELETED)) || (state == RepairRun.RunState.ABORTED)) || (segmentsRepaired == 0)) {\n        estimatedTimeOfArrival = null;\n    } else {\n        long now = org.joda.time.DateTime.now().getMillis();\n        long currentDuration = now - startTime.getMillis();\n        long millisecondsPerSegment = currentDuration / segmentsRepaired;\n        int segmentsLeft = totalSegments - segmentsRepaired;\n        estimatedTimeOfArrival = new org.joda.time.DateTime(now + (millisecondsPerSegment * segmentsLeft));\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "(state == RepairRun.RunState.PAUSED)",
            "src_parent": "(state == RepairRun.RunState.RUNNING) || (state == RepairRun.RunState.PAUSED)",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "RepairRun.RunState.RUNNING",
            "src_parent": "(state == RepairRun.RunState.RUNNING)",
            "src_parent_type": "BinaryOperator",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (endTime != null) {\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n} else {\n    duration = null;\n}",
            "src_parent": "{\n    if (endTime != null) {\n        duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n    } else {\n        duration = null;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "startTime == null",
            "dst_parent": "if (startTime == null) {\n    duration = null;\n} else if ((state == RepairRun.RunState.RUNNING) || (state == RepairRun.RunState.PAUSED)) {\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), currentTime.toInstant()).getMillis(), true, false);\n} else if (state == RepairRun.RunState.ABORTED) {\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), pauseTime.toInstant()).getMillis(), true, false);\n} else if (endTime != null) {\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n} else {\n    duration = null;\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(startTime == null)",
            "src_parent": "(startTime == null) || ((endTime != null) && endTime.isAfter(startTime))",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    duration = null;\n}",
            "dst_parent": "if (startTime == null) {\n    duration = null;\n} else if ((state == RepairRun.RunState.RUNNING) || (state == RepairRun.RunState.PAUSED)) {\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), currentTime.toInstant()).getMillis(), true, false);\n} else if (state == RepairRun.RunState.ABORTED) {\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), pauseTime.toInstant()).getMillis(), true, false);\n} else if (endTime != null) {\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n} else {\n    duration = null;\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    duration = null;\n}",
            "src_parent": "if ((startTime == null) || (endTime == null)) {\n    duration = null;\n} else {\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "startTime == null",
            "dst_parent": "if (startTime == null) {\n    estimatedTimeOfArrival = null;\n} else if ((((state == RepairRun.RunState.ERROR) || (state == RepairRun.RunState.DELETED)) || (state == RepairRun.RunState.ABORTED)) || (segmentsRepaired == 0)) {\n    estimatedTimeOfArrival = null;\n} else {\n    long now = org.joda.time.DateTime.now().getMillis();\n    long currentDuration = now - startTime.getMillis();\n    long millisecondsPerSegment = currentDuration / segmentsRepaired;\n    int segmentsLeft = totalSegments - segmentsRepaired;\n    estimatedTimeOfArrival = new org.joda.time.DateTime(now + (millisecondsPerSegment * segmentsLeft));\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(startTime == null)",
            "src_parent": "(startTime == null) || (endTime == null)",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(state == RepairRun.RunState.RUNNING) || (state == RepairRun.RunState.PAUSED)",
            "dst_parent": "if ((state == RepairRun.RunState.RUNNING) || (state == RepairRun.RunState.PAUSED)) {\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), currentTime.toInstant()).getMillis(), true, false);\n} else if (state == RepairRun.RunState.ABORTED) {\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), pauseTime.toInstant()).getMillis(), true, false);\n} else if (endTime != null) {\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n} else {\n    duration = null;\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(startTime == null) || (endTime == null)",
            "src_parent": "if ((startTime == null) || (endTime == null)) {\n    duration = null;\n} else {\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    if (endTime != null) {\n        duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n    } else {\n        duration = null;\n    }\n}",
            "dst_parent": "if (state == RepairRun.RunState.ABORTED) {\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), pauseTime.toInstant()).getMillis(), true, false);\n} else if (endTime != null) {\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n} else {\n    duration = null;\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n}",
            "src_parent": "if ((startTime == null) || (endTime == null)) {\n    duration = null;\n} else {\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "endTime != null",
            "dst_parent": "if (endTime != null) {\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n} else {\n    duration = null;\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(endTime != null)",
            "src_parent": "((endTime != null) && endTime.isAfter(startTime))",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false)",
            "dst_parent": "{\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false)",
            "src_parent": "{\n    duration = org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(new org.joda.time.Duration(startTime.toInstant(), endTime.toInstant()).getMillis(), true, false);\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        }
      ],
      "file_name": "RepairRunStatus"
    }
  ],
  "id": "bears_192"
}