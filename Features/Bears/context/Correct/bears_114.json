{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (position.getFixTime() == null) {\n    getLastLocation(position, null);\n}",
            "src_parent": "{\n    org.traccar.helper.Parser parser = new org.traccar.helper.Parser(org.traccar.protocol.StarLinkProtocolDecoder.PATTERN, ((java.lang.String) (msg)));\n    if (!parser.matches()) {\n        return null;\n    }\n    org.traccar.DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n    int type = parser.nextInt(0);\n    if (type != org.traccar.protocol.StarLinkProtocolDecoder.MSG_EVENT_REPORT) {\n        return null;\n    }\n    org.traccar.model.Position position = new org.traccar.model.Position();\n    position.setProtocol(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n    position.setValid(true);\n    position.set(Position.KEY_INDEX, parser.nextInt(0));\n    java.lang.String[] data = parser.next().split(\",\");\n    java.lang.Integer lac = null;\n    java.lang.Integer cid = null;\n    int event = 0;\n    for (int i = 0; i < java.lang.Math.min(data.length, dataTags.length); i++) {\n        if (data[i].isEmpty()) {\n            continue;\n        }\n        switch (dataTags[i]) {\n            case \"#EDT#\" :\n                position.setDeviceTime(dateFormat.parse(data[i]));\n                break;\n            case \"#EID#\" :\n                event = java.lang.Integer.parseInt(data[i]);\n                position.set(Position.KEY_EVENT, event);\n                break;\n            case \"#PDT#\" :\n                position.setFixTime(dateFormat.parse(data[i]));\n                break;\n            case \"#LAT#\" :\n                position.setLatitude(parseCoordinate(data[i]));\n                break;\n            case \"#LONG#\" :\n                position.setLongitude(parseCoordinate(data[i]));\n                break;\n            case \"#SPD#\" :\n                position.setSpeed(java.lang.Double.parseDouble(data[i]));\n                break;\n            case \"#HEAD#\" :\n                position.setCourse(java.lang.Integer.parseInt(data[i]));\n                break;\n            case \"#ODO#\" :\n                position.set(Position.KEY_ODOMETER, java.lang.Long.parseLong(data[i]) * 1000);\n                break;\n            case \"#IN1#\" :\n                position.set(org.traccar.model.Position.PREFIX_IN + 1, java.lang.Integer.parseInt(data[i]));\n                break;\n            case \"#IN2#\" :\n                position.set(org.traccar.model.Position.PREFIX_IN + 2, java.lang.Integer.parseInt(data[i]));\n                break;\n            case \"#IN3#\" :\n                position.set(org.traccar.model.Position.PREFIX_IN + 3, java.lang.Integer.parseInt(data[i]));\n                break;\n            case \"#IN4#\" :\n                position.set(org.traccar.model.Position.PREFIX_IN + 4, java.lang.Integer.parseInt(data[i]));\n                break;\n            case \"#OUT1#\" :\n                position.set(org.traccar.model.Position.PREFIX_OUT + 1, java.lang.Integer.parseInt(data[i]));\n                break;\n            case \"#OUT2#\" :\n                position.set(org.traccar.model.Position.PREFIX_OUT + 2, java.lang.Integer.parseInt(data[i]));\n                break;\n            case \"#OUT3#\" :\n                position.set(org.traccar.model.Position.PREFIX_OUT + 3, java.lang.Integer.parseInt(data[i]));\n                break;\n            case \"#OUT4#\" :\n                position.set(org.traccar.model.Position.PREFIX_OUT + 4, java.lang.Integer.parseInt(data[i]));\n                break;\n            case \"#LAC#\" :\n                if (!data[i].isEmpty()) {\n                    lac = java.lang.Integer.parseInt(data[i]);\n                }\n                break;\n            case \"#CID#\" :\n                if (!data[i].isEmpty()) {\n                    cid = java.lang.Integer.parseInt(data[i]);\n                }\n                break;\n            case \"#VIN#\" :\n                position.set(Position.KEY_POWER, java.lang.Double.parseDouble(data[i]));\n                break;\n            case \"#VBAT#\" :\n                position.set(Position.KEY_BATTERY, java.lang.Double.parseDouble(data[i]));\n                break;\n            case \"#DEST#\" :\n                position.set(\"destination\", data[i]);\n                break;\n            case \"#IGN#\" :\n                position.set(Position.KEY_IGNITION, data[i].equals(\"1\"));\n                break;\n            case \"#ENG#\" :\n                position.set(\"engine\", data[i].equals(\"1\"));\n                break;\n            default :\n                break;\n        }\n    }\n    if (position.getFixTime() == null) {\n        getLastLocation(position, null);\n    }\n    if ((lac != null) && (cid != null)) {\n        position.setNetwork(new org.traccar.model.Network(org.traccar.model.CellTower.fromLacCid(lac, cid)));\n    }\n    if (event == 20) {\n        position.set(Position.KEY_RFID, data[data.length - 1]);\n    }\n    return position;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (data[i].isEmpty()) {\n    continue;\n}",
            "src_parent": "{\n    if (data[i].isEmpty()) {\n        continue;\n    }\n    switch (dataTags[i]) {\n        case \"#EDT#\" :\n            position.setDeviceTime(dateFormat.parse(data[i]));\n            break;\n        case \"#EID#\" :\n            event = java.lang.Integer.parseInt(data[i]);\n            position.set(Position.KEY_EVENT, event);\n            break;\n        case \"#PDT#\" :\n            position.setFixTime(dateFormat.parse(data[i]));\n            break;\n        case \"#LAT#\" :\n            position.setLatitude(parseCoordinate(data[i]));\n            break;\n        case \"#LONG#\" :\n            position.setLongitude(parseCoordinate(data[i]));\n            break;\n        case \"#SPD#\" :\n            position.setSpeed(java.lang.Double.parseDouble(data[i]));\n            break;\n        case \"#HEAD#\" :\n            position.setCourse(java.lang.Integer.parseInt(data[i]));\n            break;\n        case \"#ODO#\" :\n            position.set(Position.KEY_ODOMETER, java.lang.Long.parseLong(data[i]) * 1000);\n            break;\n        case \"#IN1#\" :\n            position.set(org.traccar.model.Position.PREFIX_IN + 1, java.lang.Integer.parseInt(data[i]));\n            break;\n        case \"#IN2#\" :\n            position.set(org.traccar.model.Position.PREFIX_IN + 2, java.lang.Integer.parseInt(data[i]));\n            break;\n        case \"#IN3#\" :\n            position.set(org.traccar.model.Position.PREFIX_IN + 3, java.lang.Integer.parseInt(data[i]));\n            break;\n        case \"#IN4#\" :\n            position.set(org.traccar.model.Position.PREFIX_IN + 4, java.lang.Integer.parseInt(data[i]));\n            break;\n        case \"#OUT1#\" :\n            position.set(org.traccar.model.Position.PREFIX_OUT + 1, java.lang.Integer.parseInt(data[i]));\n            break;\n        case \"#OUT2#\" :\n            position.set(org.traccar.model.Position.PREFIX_OUT + 2, java.lang.Integer.parseInt(data[i]));\n            break;\n        case \"#OUT3#\" :\n            position.set(org.traccar.model.Position.PREFIX_OUT + 3, java.lang.Integer.parseInt(data[i]));\n            break;\n        case \"#OUT4#\" :\n            position.set(org.traccar.model.Position.PREFIX_OUT + 4, java.lang.Integer.parseInt(data[i]));\n            break;\n        case \"#LAC#\" :\n            if (!data[i].isEmpty()) {\n                lac = java.lang.Integer.parseInt(data[i]);\n            }\n            break;\n        case \"#CID#\" :\n            if (!data[i].isEmpty()) {\n                cid = java.lang.Integer.parseInt(data[i]);\n            }\n            break;\n        case \"#VIN#\" :\n            position.set(Position.KEY_POWER, java.lang.Double.parseDouble(data[i]));\n            break;\n        case \"#VBAT#\" :\n            position.set(Position.KEY_BATTERY, java.lang.Double.parseDouble(data[i]));\n            break;\n        case \"#DEST#\" :\n            position.set(\"destination\", data[i]);\n            break;\n        case \"#IGN#\" :\n            position.set(Position.KEY_IGNITION, data[i].equals(\"1\"));\n            break;\n        case \"#ENG#\" :\n            position.set(\"engine\", data[i].equals(\"1\"));\n            break;\n        default :\n            break;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "StarLinkProtocolDecoder"
    }
  ],
  "id": "bears_114"
}