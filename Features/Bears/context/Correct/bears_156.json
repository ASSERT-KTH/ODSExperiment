{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "boolean isFormula = (columnNames.length == 1) && (columnNames[0] == null)",
            "src_parent": "{\n    org.hibernate.persister.entity.AbstractEntityPersister entityPersister = ((org.hibernate.persister.entity.AbstractEntityPersister) (entityPersisters.get(entityType.getJavaType().getName())));\n    org.hibernate.engine.spi.SessionFactoryImplementor sfi = entityPersister.getFactory();\n    java.lang.String[] columnNames = entityPersister.getPropertyColumnNames(attributeName);\n    com.blazebit.persistence.integration.hibernate.base.Database database = sfi.getServiceRegistry().locateServiceBinding(com.blazebit.persistence.integration.hibernate.base.Database.class).getService();\n    org.hibernate.mapping.Table[] tables;\n    if (entityPersister instanceof org.hibernate.persister.entity.JoinedSubclassEntityPersister) {\n        tables = new org.hibernate.mapping.Table[((org.hibernate.persister.entity.JoinedSubclassEntityPersister) (entityPersister)).getSubclassTableSpan()];\n        for (int i = 0; i < tables.length; i++) {\n            tables[i] = database.getTable(entityPersister.getSubclassTableName(i));\n        }\n    } else if (entityPersister instanceof org.hibernate.persister.entity.UnionSubclassEntityPersister) {\n        tables = new org.hibernate.mapping.Table[((org.hibernate.persister.entity.UnionSubclassEntityPersister) (entityPersister)).getSubclassTableSpan()];\n        for (int i = 0; i < tables.length; i++) {\n            tables[i] = database.getTable(entityPersister.getSubclassTableName(i));\n        }\n    } else if (entityPersister instanceof org.hibernate.persister.entity.SingleTableEntityPersister) {\n        tables = new org.hibernate.mapping.Table[((org.hibernate.persister.entity.SingleTableEntityPersister) (entityPersister)).getSubclassTableSpan()];\n        for (int i = 0; i < tables.length; i++) {\n            tables[i] = database.getTable(entityPersister.getSubclassTableName(i));\n        }\n    } else {\n        tables = new org.hibernate.mapping.Table[]{ database.getTable(entityPersister.getTableName()) };\n    }\n    boolean isFormula = (columnNames.length == 1) && (columnNames[0] == null);\n    boolean isSubselect = (tables.length == 1) && (tables[0] == null);\n    if (isFormula || isSubselect) {\n        org.hibernate.type.Type propertyType = entityPersister.getPropertyType(attributeName);\n        long length;\n        int precision;\n        int scale;\n        try {\n            if (propertyType instanceof org.hibernate.type.EntityType) {\n                propertyType = ((org.hibernate.type.EntityType) (propertyType)).getIdentifierOrUniqueKeyType(sfi);\n            }\n            java.lang.reflect.Method m = org.hibernate.type.Type.class.getMethod(\"dictatedSizes\", org.hibernate.engine.spi.Mapping.class);\n            java.lang.Object size = ((java.lang.Object[]) (m.invoke(propertyType, sfi)))[0];\n            length = ((long) (size.getClass().getMethod(\"getLength\").invoke(size)));\n            precision = ((int) (size.getClass().getMethod(\"getPrecision\").invoke(size)));\n            scale = ((int) (size.getClass().getMethod(\"getScale\").invoke(size)));\n        } catch (java.lang.Exception ex) {\n            throw new java.lang.RuntimeException(((\"Could not determine the column type of the attribute: \" + attributeName) + \" of the entity: \") + entityType.getName());\n        }\n        return new java.lang.String[]{ sfi.getDialect().getTypeName(propertyType.sqlTypes(sfi)[0], length, precision, scale) };\n    }\n    java.lang.String[] columnTypes = new java.lang.String[columnNames.length];\n    for (int i = 0; i < columnNames.length; i++) {\n        org.hibernate.mapping.Column column = null;\n        for (int j = 0; j < tables.length; j++) {\n            column = tables[j].getColumn(new org.hibernate.mapping.Column(columnNames[i]));\n            if (column != null) {\n                break;\n            }\n        }\n        if (column == null) {\n            throw new java.lang.IllegalArgumentException(((\"Could not find column '\" + columnNames[i]) + \"' in for entity: \") + entityType.getName());\n        }\n        columnTypes[i] = column.getSqlType();\n    }\n    return columnTypes;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "boolean isSubselect = (tables.length == 1) && (tables[0] == null)",
            "src_parent": "{\n    org.hibernate.persister.entity.AbstractEntityPersister entityPersister = ((org.hibernate.persister.entity.AbstractEntityPersister) (entityPersisters.get(entityType.getJavaType().getName())));\n    org.hibernate.engine.spi.SessionFactoryImplementor sfi = entityPersister.getFactory();\n    java.lang.String[] columnNames = entityPersister.getPropertyColumnNames(attributeName);\n    com.blazebit.persistence.integration.hibernate.base.Database database = sfi.getServiceRegistry().locateServiceBinding(com.blazebit.persistence.integration.hibernate.base.Database.class).getService();\n    org.hibernate.mapping.Table[] tables;\n    if (entityPersister instanceof org.hibernate.persister.entity.JoinedSubclassEntityPersister) {\n        tables = new org.hibernate.mapping.Table[((org.hibernate.persister.entity.JoinedSubclassEntityPersister) (entityPersister)).getSubclassTableSpan()];\n        for (int i = 0; i < tables.length; i++) {\n            tables[i] = database.getTable(entityPersister.getSubclassTableName(i));\n        }\n    } else if (entityPersister instanceof org.hibernate.persister.entity.UnionSubclassEntityPersister) {\n        tables = new org.hibernate.mapping.Table[((org.hibernate.persister.entity.UnionSubclassEntityPersister) (entityPersister)).getSubclassTableSpan()];\n        for (int i = 0; i < tables.length; i++) {\n            tables[i] = database.getTable(entityPersister.getSubclassTableName(i));\n        }\n    } else if (entityPersister instanceof org.hibernate.persister.entity.SingleTableEntityPersister) {\n        tables = new org.hibernate.mapping.Table[((org.hibernate.persister.entity.SingleTableEntityPersister) (entityPersister)).getSubclassTableSpan()];\n        for (int i = 0; i < tables.length; i++) {\n            tables[i] = database.getTable(entityPersister.getSubclassTableName(i));\n        }\n    } else {\n        tables = new org.hibernate.mapping.Table[]{ database.getTable(entityPersister.getTableName()) };\n    }\n    boolean isFormula = (columnNames.length == 1) && (columnNames[0] == null);\n    boolean isSubselect = (tables.length == 1) && (tables[0] == null);\n    if (isFormula || isSubselect) {\n        org.hibernate.type.Type propertyType = entityPersister.getPropertyType(attributeName);\n        long length;\n        int precision;\n        int scale;\n        try {\n            if (propertyType instanceof org.hibernate.type.EntityType) {\n                propertyType = ((org.hibernate.type.EntityType) (propertyType)).getIdentifierOrUniqueKeyType(sfi);\n            }\n            java.lang.reflect.Method m = org.hibernate.type.Type.class.getMethod(\"dictatedSizes\", org.hibernate.engine.spi.Mapping.class);\n            java.lang.Object size = ((java.lang.Object[]) (m.invoke(propertyType, sfi)))[0];\n            length = ((long) (size.getClass().getMethod(\"getLength\").invoke(size)));\n            precision = ((int) (size.getClass().getMethod(\"getPrecision\").invoke(size)));\n            scale = ((int) (size.getClass().getMethod(\"getScale\").invoke(size)));\n        } catch (java.lang.Exception ex) {\n            throw new java.lang.RuntimeException(((\"Could not determine the column type of the attribute: \" + attributeName) + \" of the entity: \") + entityType.getName());\n        }\n        return new java.lang.String[]{ sfi.getDialect().getTypeName(propertyType.sqlTypes(sfi)[0], length, precision, scale) };\n    }\n    java.lang.String[] columnTypes = new java.lang.String[columnNames.length];\n    for (int i = 0; i < columnNames.length; i++) {\n        org.hibernate.mapping.Column column = null;\n        for (int j = 0; j < tables.length; j++) {\n            column = tables[j].getColumn(new org.hibernate.mapping.Column(columnNames[i]));\n            if (column != null) {\n                break;\n            }\n        }\n        if (column == null) {\n            throw new java.lang.IllegalArgumentException(((\"Could not find column '\" + columnNames[i]) + \"' in for entity: \") + entityType.getName());\n        }\n        columnTypes[i] = column.getSqlType();\n    }\n    return columnTypes;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "isFormula || isSubselect",
            "src_parent": "if (isFormula || isSubselect) {\n    org.hibernate.type.Type propertyType = entityPersister.getPropertyType(attributeName);\n    long length;\n    int precision;\n    int scale;\n    try {\n        if (propertyType instanceof org.hibernate.type.EntityType) {\n            propertyType = ((org.hibernate.type.EntityType) (propertyType)).getIdentifierOrUniqueKeyType(sfi);\n        }\n        java.lang.reflect.Method m = org.hibernate.type.Type.class.getMethod(\"dictatedSizes\", org.hibernate.engine.spi.Mapping.class);\n        java.lang.Object size = ((java.lang.Object[]) (m.invoke(propertyType, sfi)))[0];\n        length = ((long) (size.getClass().getMethod(\"getLength\").invoke(size)));\n        precision = ((int) (size.getClass().getMethod(\"getPrecision\").invoke(size)));\n        scale = ((int) (size.getClass().getMethod(\"getScale\").invoke(size)));\n    } catch (java.lang.Exception ex) {\n        throw new java.lang.RuntimeException(((\"Could not determine the column type of the attribute: \" + attributeName) + \" of the entity: \") + entityType.getName());\n    }\n    return new java.lang.String[]{ sfi.getDialect().getTypeName(propertyType.sqlTypes(sfi)[0], length, precision, scale) };\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (propertyType instanceof org.hibernate.type.EntityType) {\n    propertyType = ((org.hibernate.type.EntityType) (propertyType)).getIdentifierOrUniqueKeyType(sfi);\n}",
            "src_parent": "{\n    if (propertyType instanceof org.hibernate.type.EntityType) {\n        propertyType = ((org.hibernate.type.EntityType) (propertyType)).getIdentifierOrUniqueKeyType(sfi);\n    }\n    java.lang.reflect.Method m = org.hibernate.type.Type.class.getMethod(\"dictatedSizes\", org.hibernate.engine.spi.Mapping.class);\n    java.lang.Object size = ((java.lang.Object[]) (m.invoke(propertyType, sfi)))[0];\n    length = ((long) (size.getClass().getMethod(\"getLength\").invoke(size)));\n    precision = ((int) (size.getClass().getMethod(\"getPrecision\").invoke(size)));\n    scale = ((int) (size.getClass().getMethod(\"getScale\").invoke(size)));\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(columnNames.length == 1) && (columnNames[0] == null)",
            "dst_parent": "boolean isFormula = (columnNames.length == 1) && (columnNames[0] == null)",
            "dst_parent_type": "LocalVariable",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(columnNames.length == 1) && (columnNames[0] == null)",
            "src_parent": "if ((columnNames.length == 1) && (columnNames[0] == null)) {\n    org.hibernate.type.Type propertyType = entityPersister.getPropertyType(attributeName);\n    long length;\n    int precision;\n    int scale;\n    try {\n        java.lang.reflect.Method m = org.hibernate.type.Type.class.getMethod(\"dictatedSizes\", org.hibernate.engine.spi.Mapping.class);\n        java.lang.Object size = ((java.lang.Object[]) (m.invoke(propertyType, sfi)))[0];\n        length = ((long) (size.getClass().getMethod(\"getLength\").invoke(size)));\n        precision = ((int) (size.getClass().getMethod(\"getPrecision\").invoke(size)));\n        scale = ((int) (size.getClass().getMethod(\"getScale\").invoke(size)));\n    } catch (java.lang.Exception ex) {\n        throw new java.lang.RuntimeException(((\"Could not determine the column type of the attribute: \" + attributeName) + \" of the entity: \") + entityType.getName());\n    }\n    return new java.lang.String[]{ sfi.getDialect().getTypeName(propertyType.sqlTypes(sfi)[0], length, precision, scale) };\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        }
      ],
      "file_name": "HibernateJpaProvider"
    }
  ],
  "id": "bears_156"
}