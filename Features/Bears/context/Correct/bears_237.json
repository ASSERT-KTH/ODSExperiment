{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (!instrumentedType.isAssignableTo(fieldDescription.getDeclaringType().asErasure())) {\n    throw new java.lang.IllegalStateException((fieldDescription + \" is not declared in the hierarchy of \") + instrumentedType);\n} else if (!fieldDescription.isAccessibleTo(instrumentedType)) {\n    throw new java.lang.IllegalStateException(((\"Cannot access \" + fieldDescription) + \" from \") + instrumentedType);\n} else if ((!fieldDescription.isStatic()) && instrumentedMethod.isStatic()) {\n    throw new java.lang.IllegalStateException(((\"Cannot set instance field \" + fieldDescription) + \" from \") + instrumentedMethod);\n}",
            "src_parent": "{\n    if (!instrumentedMethod.isMethod()) {\n        throw new java.lang.IllegalArgumentException(instrumentedMethod + \" does not describe a field getter or setter\");\n    }\n    net.bytebuddy.description.field.FieldDescription fieldDescription = fieldLocation.resolve(instrumentedMethod);\n    if (!instrumentedType.isAssignableTo(fieldDescription.getDeclaringType().asErasure())) {\n        throw new java.lang.IllegalStateException((fieldDescription + \" is not declared in the hierarchy of \") + instrumentedType);\n    } else if (!fieldDescription.isAccessibleTo(instrumentedType)) {\n        throw new java.lang.IllegalStateException(((\"Cannot access \" + fieldDescription) + \" from \") + instrumentedType);\n    } else if ((!fieldDescription.isStatic()) && instrumentedMethod.isStatic()) {\n        throw new java.lang.IllegalStateException(((\"Cannot set instance field \" + fieldDescription) + \" from \") + instrumentedMethod);\n    }\n    net.bytebuddy.implementation.bytecode.StackManipulation implementation;\n    net.bytebuddy.implementation.bytecode.StackManipulation initialization = (fieldDescription.isStatic()) ? StackManipulation.Trivial.INSTANCE : net.bytebuddy.implementation.bytecode.member.MethodVariableAccess.loadThis();\n    if (!instrumentedMethod.getReturnType().represents(void.class)) {\n        implementation = new net.bytebuddy.implementation.bytecode.StackManipulation.Compound(initialization, net.bytebuddy.implementation.bytecode.member.FieldAccess.forField(fieldDescription).read(), assigner.assign(fieldDescription.getType(), instrumentedMethod.getReturnType(), typing), net.bytebuddy.implementation.bytecode.member.MethodReturn.of(instrumentedMethod.getReturnType()));\n    } else if (instrumentedMethod.getReturnType().represents(void.class) && (instrumentedMethod.getParameters().size() == 1)) {\n        if (fieldDescription.isFinal() && instrumentedMethod.isMethod()) {\n            throw new java.lang.IllegalStateException(((\"Cannot set final field \" + fieldDescription) + \" from \") + instrumentedMethod);\n        }\n        implementation = new net.bytebuddy.implementation.bytecode.StackManipulation.Compound(initialization, net.bytebuddy.implementation.bytecode.member.MethodVariableAccess.load(instrumentedMethod.getParameters().get(0)), assigner.assign(instrumentedMethod.getParameters().get(0).getType(), fieldDescription.getType(), typing), net.bytebuddy.implementation.bytecode.member.FieldAccess.forField(fieldDescription).write(), net.bytebuddy.implementation.bytecode.member.MethodReturn.VOID);\n    } else {\n        throw new java.lang.IllegalArgumentException((\"Method \" + implementationContext) + \" is no bean property\");\n    }\n    if (!implementation.isValid()) {\n        throw new java.lang.IllegalStateException(((\"Cannot set or get value of \" + instrumentedMethod) + \" using \") + fieldDescription);\n    }\n    return new net.bytebuddy.implementation.Size(implementation.apply(methodVisitor, implementationContext).getMaximalSize(), instrumentedMethod.getStackSize());\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "(!fieldDescription.isStatic()) && (!instrumentedType.isAssignableTo(fieldDescription.getDeclaringType().asErasure()))",
            "src_parent": "if ((!fieldDescription.isStatic()) && (!instrumentedType.isAssignableTo(fieldDescription.getDeclaringType().asErasure()))) {\n    throw new java.lang.IllegalStateException((fieldDescription + \" is not declared by \") + instrumentedType);\n} else if (!fieldDescription.isAccessibleTo(instrumentedType)) {\n    throw new java.lang.IllegalStateException(((\"Cannot access \" + fieldDescription) + \" from \") + instrumentedType);\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if ((!fieldDescription.isStatic()) && instrumentedMethod.isStatic()) {\n    throw new java.lang.IllegalStateException(((\"Cannot set instance field \" + fieldDescription) + \" from \") + instrumentedMethod);\n}",
            "dst_parent": "{\n    if (!instrumentedMethod.isMethod()) {\n        throw new java.lang.IllegalArgumentException(instrumentedMethod + \" does not describe a field getter or setter\");\n    }\n    net.bytebuddy.description.field.FieldDescription fieldDescription = fieldLocation.resolve(instrumentedMethod);\n    if ((!fieldDescription.isStatic()) && instrumentedMethod.isStatic()) {\n        throw new java.lang.IllegalStateException(((\"Cannot set instance field \" + fieldDescription) + \" from \") + instrumentedMethod);\n    }\n    net.bytebuddy.implementation.bytecode.StackManipulation implementation;\n    net.bytebuddy.implementation.bytecode.StackManipulation initialization = (fieldDescription.isStatic()) ? StackManipulation.Trivial.INSTANCE : net.bytebuddy.implementation.bytecode.member.MethodVariableAccess.loadThis();\n    if (!instrumentedMethod.getReturnType().represents(void.class)) {\n        implementation = new net.bytebuddy.implementation.bytecode.StackManipulation.Compound(initialization, net.bytebuddy.implementation.bytecode.member.FieldAccess.forField(fieldDescription).read(), assigner.assign(fieldDescription.getType(), instrumentedMethod.getReturnType(), typing), net.bytebuddy.implementation.bytecode.member.MethodReturn.of(instrumentedMethod.getReturnType()));\n    } else if (instrumentedMethod.getReturnType().represents(void.class) && (instrumentedMethod.getParameters().size() == 1)) {\n        if (fieldDescription.isFinal() && instrumentedMethod.isMethod()) {\n            throw new java.lang.IllegalStateException(((\"Cannot set final field \" + fieldDescription) + \" from \") + instrumentedMethod);\n        }\n        implementation = new net.bytebuddy.implementation.bytecode.StackManipulation.Compound(initialization, net.bytebuddy.implementation.bytecode.member.MethodVariableAccess.load(instrumentedMethod.getParameters().get(0)), assigner.assign(instrumentedMethod.getParameters().get(0).getType(), fieldDescription.getType(), typing), net.bytebuddy.implementation.bytecode.member.FieldAccess.forField(fieldDescription).write(), net.bytebuddy.implementation.bytecode.member.MethodReturn.VOID);\n    } else {\n        throw new java.lang.IllegalArgumentException((\"Method \" + implementationContext) + \" is no bean property\");\n    }\n    if (!implementation.isValid()) {\n        throw new java.lang.IllegalStateException(((\"Cannot set or get value of \" + instrumentedMethod) + \" using \") + fieldDescription);\n    }\n    return new net.bytebuddy.implementation.Size(implementation.apply(methodVisitor, implementationContext).getMaximalSize(), instrumentedMethod.getStackSize());\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if ((!fieldDescription.isStatic()) && instrumentedMethod.isStatic()) {\n    throw new java.lang.IllegalStateException(((\"Cannot set instance field \" + fieldDescription) + \" from \") + instrumentedMethod);\n}",
            "src_parent": "{\n    if ((!fieldDescription.isStatic()) && instrumentedMethod.isStatic()) {\n        throw new java.lang.IllegalStateException(((\"Cannot set instance field \" + fieldDescription) + \" from \") + instrumentedMethod);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(!instrumentedType.isAssignableTo(fieldDescription.getDeclaringType().asErasure()))",
            "dst_parent": "(!fieldDescription.isStatic()) && (!instrumentedType.isAssignableTo(fieldDescription.getDeclaringType().asErasure()))",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "UnaryOperator",
            "operator": "MOV",
            "src": "!instrumentedType.isAssignableTo(fieldDescription.getDeclaringType().asErasure())",
            "src_parent": "if (!instrumentedType.isAssignableTo(fieldDescription.getDeclaringType().asErasure())) {\n    throw new java.lang.IllegalStateException((fieldDescription + \" is not declared by \") + instrumentedType);\n} else if (!fieldDescription.isAccessibleTo(instrumentedType)) {\n    throw new java.lang.IllegalStateException(((\"Cannot access \" + fieldDescription) + \" from \") + instrumentedType);\n}",
            "src_parent_type": "If",
            "src_type": "UnaryOperator"
          }
        }
      ],
      "file_name": "FieldAccessor"
    }
  ],
  "id": "bears_237"
}