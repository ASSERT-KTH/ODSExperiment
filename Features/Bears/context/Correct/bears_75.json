{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.eclipse.jdt.internal.compiler.CompilationResult cr = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult",
            "dst_parent": "{\n    spoon.reflect.factory.CoreFactory cf = this.jdtTreeBuilder.getFactory().Core();\n    spoon.reflect.cu.CompilationUnit cu = this.jdtTreeBuilder.getFactory().CompilationUnit().create(new java.lang.String(this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.getFileName()));\n    org.eclipse.jdt.internal.compiler.CompilationResult cr = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult;\n    int[] lineSeparatorPositions = cr.lineSeparatorPositions;\n    char[] contents = cr.compilationUnit.getContents();\n    int sourceStart = node.sourceStart;\n    int sourceEnd = node.sourceEnd;\n    if (node instanceof org.eclipse.jdt.internal.compiler.ast.Annotation) {\n        org.eclipse.jdt.internal.compiler.ast.Annotation ann = ((org.eclipse.jdt.internal.compiler.ast.Annotation) (node));\n        int declEnd = ann.declarationSourceEnd;\n        if (declEnd > 0) {\n            sourceEnd = declEnd;\n        }\n    } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {\n        org.eclipse.jdt.internal.compiler.ast.Expression expression = ((org.eclipse.jdt.internal.compiler.ast.Expression) (node));\n        int statementEnd = expression.statementEnd;\n        if (statementEnd > 0) {\n            sourceEnd = statementEnd;\n        }\n    }\n    if (node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) {\n        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration variableDeclaration = ((org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) (node));\n        int modifiersSourceStart = variableDeclaration.modifiersSourceStart;\n        int declarationSourceStart = variableDeclaration.declarationSourceStart;\n        int declarationSourceEnd = variableDeclaration.declarationSourceEnd;\n        int declarationEnd = variableDeclaration.declarationEnd;\n        org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = variableDeclaration.annotations;\n        if ((annotations != null) && (annotations.length > 0)) {\n            if (annotations[0].sourceStart() == sourceStart) {\n                modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n            }\n        }\n        if (modifiersSourceStart == 0) {\n            modifiersSourceStart = declarationSourceStart;\n        }\n        int modifiersSourceEnd;\n        if (variableDeclaration.type != null) {\n            modifiersSourceEnd = variableDeclaration.type.sourceStart() - 2;\n        } else {\n            modifiersSourceEnd = declarationSourceStart - 1;\n        }\n        if (modifiersSourceStart > modifiersSourceEnd) {\n            modifiersSourceEnd = modifiersSourceStart - 1;\n        }\n        return cf.createDeclarationSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, lineSeparatorPositions);\n    } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {\n        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (node));\n        int declarationSourceStart = typeDeclaration.declarationSourceStart;\n        int declarationSourceEnd = typeDeclaration.declarationSourceEnd;\n        int modifiersSourceStart = typeDeclaration.modifiersSourceStart;\n        int bodyStart = typeDeclaration.bodyStart;\n        int bodyEnd = typeDeclaration.bodyEnd;\n        org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = typeDeclaration.annotations;\n        if ((annotations != null) && (annotations.length > 0)) {\n            if (annotations[0].sourceStart() == declarationSourceStart) {\n                modifiersSourceStart = findNextNonWhitespace(contents, annotations[annotations.length - 1].declarationSourceEnd + 1);\n            }\n        }\n        if (modifiersSourceStart == 0) {\n            modifiersSourceStart = declarationSourceStart;\n        }\n        int modifiersSourceEnd = findPrevNonWhitespace(contents, findPrevWhitespace(contents, findPrevNonWhitespace(contents, sourceStart - 1)));\n        if (modifiersSourceEnd < modifiersSourceStart) {\n            modifiersSourceEnd = modifiersSourceStart - 1;\n        }\n        return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart - 1, bodyEnd, lineSeparatorPositions);\n    } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) {\n        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (node));\n        int bodyStart = methodDeclaration.bodyStart;\n        int bodyEnd = methodDeclaration.bodyEnd;\n        int declarationSourceStart = methodDeclaration.declarationSourceStart;\n        int declarationSourceEnd = methodDeclaration.declarationSourceEnd;\n        int modifiersSourceStart = methodDeclaration.modifiersSourceStart;\n        if (modifiersSourceStart == 0) {\n            modifiersSourceStart = declarationSourceStart;\n        }\n        if ((node instanceof org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration) && (bodyStart == bodyEnd)) {\n            bodyEnd--;\n        }\n        org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc = methodDeclaration.javadoc;\n        if ((javadoc != null) && (javadoc.sourceEnd() > declarationSourceStart)) {\n            modifiersSourceStart = javadoc.sourceEnd() + 1;\n        }\n        org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = methodDeclaration.annotations;\n        if ((annotations != null) && (annotations.length > 0)) {\n            if (annotations[0].sourceStart() == declarationSourceStart) {\n                modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n            }\n        }\n        int modifiersSourceEnd = sourceStart - 1;\n        if ((methodDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) && (((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodDeclaration)).returnType != null)) {\n            modifiersSourceEnd = ((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodDeclaration)).returnType.sourceStart() - 2;\n        }\n        org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters = methodDeclaration.typeParameters();\n        if ((typeParameters != null) && (typeParameters.length > 0)) {\n            modifiersSourceEnd = typeParameters[0].declarationSourceStart - 3;\n        }\n        if (spoon.support.compiler.jdt.JDTTreeBuilderQuery.getModifiers(methodDeclaration.modifiers).isEmpty()) {\n            modifiersSourceStart = modifiersSourceEnd + 1;\n        }\n        sourceEnd = (sourceStart + methodDeclaration.selector.length) - 1;\n        if (e instanceof spoon.reflect.code.CtStatementList) {\n            return cf.createSourcePosition(cu, bodyStart - 1, bodyEnd + 1, lineSeparatorPositions);\n        } else if (bodyStart == 0) {\n            return spoon.reflect.cu.SourcePosition.NOPOSITION;\n        } else {\n            if (bodyStart < bodyEnd) {\n                if (contents[bodyStart - 1] == '{') {\n                    bodyStart--;\n                    if (contents[bodyEnd + 1] == '}') {\n                        bodyEnd++;\n                    } else {\n                        throw new spoon.SpoonException(\"Missing body end in\\n\" + new java.lang.String(contents, sourceStart, sourceEnd - sourceStart));\n                    }\n                }\n            }\n            return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart, bodyEnd, lineSeparatorPositions);\n        }\n    }\n    return cf.createSourcePosition(cu, sourceStart, sourceEnd, lineSeparatorPositions);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "UPD",
            "src": "int[] lineSeparatorPositions = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult.lineSeparatorPositions",
            "src_parent": "{\n    spoon.reflect.factory.CoreFactory cf = this.jdtTreeBuilder.getFactory().Core();\n    spoon.reflect.cu.CompilationUnit cu = this.jdtTreeBuilder.getFactory().CompilationUnit().create(new java.lang.String(this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.getFileName()));\n    int[] lineSeparatorPositions = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult.lineSeparatorPositions;\n    int sourceStart = node.sourceStart;\n    int sourceEnd = node.sourceEnd;\n    if (node instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {\n        if (((org.eclipse.jdt.internal.compiler.ast.Expression) (node)).statementEnd > 0) {\n            sourceEnd = ((org.eclipse.jdt.internal.compiler.ast.Expression) (node)).statementEnd;\n        }\n    }\n    if (node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) {\n        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration variableDeclaration = ((org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) (node));\n        int modifiersSourceStart = variableDeclaration.modifiersSourceStart;\n        int declarationSourceStart = variableDeclaration.declarationSourceStart;\n        int declarationSourceEnd = variableDeclaration.declarationSourceEnd;\n        int declarationEnd = variableDeclaration.declarationEnd;\n        org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = variableDeclaration.annotations;\n        if ((annotations != null) && (annotations.length > 0)) {\n            if (annotations[0].sourceStart() == sourceStart) {\n                modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n            }\n        }\n        if (modifiersSourceStart == 0) {\n            modifiersSourceStart = declarationSourceStart;\n        }\n        int modifiersSourceEnd;\n        if (variableDeclaration.type != null) {\n            modifiersSourceEnd = variableDeclaration.type.sourceStart() - 2;\n        } else {\n            modifiersSourceEnd = declarationSourceStart - 1;\n        }\n        if (modifiersSourceStart > modifiersSourceEnd) {\n            modifiersSourceEnd = modifiersSourceStart - 1;\n        }\n        return cf.createDeclarationSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, lineSeparatorPositions);\n    } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {\n        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (node));\n        int declarationSourceStart = typeDeclaration.declarationSourceStart;\n        int declarationSourceEnd = typeDeclaration.declarationSourceEnd;\n        int modifiersSourceStart = typeDeclaration.modifiersSourceStart;\n        int bodyStart = typeDeclaration.bodyStart;\n        int bodyEnd = typeDeclaration.bodyEnd;\n        org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = typeDeclaration.annotations;\n        if ((annotations != null) && (annotations.length > 0)) {\n            if (annotations[0].sourceStart() == declarationSourceStart) {\n                modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n            }\n        }\n        if (modifiersSourceStart == 0) {\n            modifiersSourceStart = declarationSourceStart;\n        }\n        int modifiersSourceEnd = sourceStart - 8;\n        return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart - 1, bodyEnd, lineSeparatorPositions);\n    } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) {\n        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (node));\n        int bodyStart = methodDeclaration.bodyStart;\n        int bodyEnd = methodDeclaration.bodyEnd;\n        int declarationSourceStart = methodDeclaration.declarationSourceStart;\n        int declarationSourceEnd = methodDeclaration.declarationSourceEnd;\n        int modifiersSourceStart = methodDeclaration.modifiersSourceStart;\n        if (modifiersSourceStart == 0) {\n            modifiersSourceStart = declarationSourceStart;\n        }\n        org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc = methodDeclaration.javadoc;\n        if ((javadoc != null) && (javadoc.sourceEnd() > declarationSourceStart)) {\n            modifiersSourceStart = javadoc.sourceEnd() + 1;\n        }\n        org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = methodDeclaration.annotations;\n        if ((annotations != null) && (annotations.length > 0)) {\n            if (annotations[0].sourceStart() == declarationSourceStart) {\n                modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n            }\n        }\n        int modifiersSourceEnd = sourceStart - 1;\n        if ((methodDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) && (((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodDeclaration)).returnType != null)) {\n            modifiersSourceEnd = ((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodDeclaration)).returnType.sourceStart() - 2;\n        }\n        org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters = methodDeclaration.typeParameters();\n        if ((typeParameters != null) && (typeParameters.length > 0)) {\n            modifiersSourceEnd = typeParameters[0].declarationSourceStart - 3;\n        }\n        if (spoon.support.compiler.jdt.JDTTreeBuilderQuery.getModifiers(methodDeclaration.modifiers).isEmpty()) {\n            modifiersSourceStart = modifiersSourceEnd + 1;\n        }\n        sourceEnd = (sourceStart + methodDeclaration.selector.length) - 1;\n        if (e instanceof spoon.reflect.code.CtStatementList) {\n            return cf.createSourcePosition(cu, bodyStart - 1, bodyEnd + 1, lineSeparatorPositions);\n        } else if (bodyStart == 0) {\n            return spoon.reflect.cu.SourcePosition.NOPOSITION;\n        } else {\n            return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart - 1, bodyEnd + 1, lineSeparatorPositions);\n        }\n    }\n    if (node instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {\n        org.eclipse.jdt.internal.compiler.ast.Expression expression = ((org.eclipse.jdt.internal.compiler.ast.Expression) (node));\n        int statementEnd = expression.statementEnd;\n        if (statementEnd > 0) {\n            sourceEnd = statementEnd;\n        }\n    }\n    return cf.createSourcePosition(cu, sourceStart, sourceEnd, lineSeparatorPositions);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.eclipse.jdt.internal.compiler.CompilationResult",
            "dst_parent": "org.eclipse.jdt.internal.compiler.CompilationResult cr = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "int[]",
            "src_parent": "int[] lineSeparatorPositions = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult.lineSeparatorPositions",
            "src_parent_type": "LocalVariable",
            "src_type": "ArrayTypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.eclipse.jdt.internal.compiler.ast.Annotation",
            "dst_parent": "node instanceof org.eclipse.jdt.internal.compiler.ast.Annotation",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "TypeAccess",
            "operator": "UPD",
            "src": "org.eclipse.jdt.internal.compiler.ast.Expression",
            "src_parent": "node instanceof org.eclipse.jdt.internal.compiler.ast.Expression",
            "src_parent_type": "BinaryOperator",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "1",
            "dst_parent": "sourceStart - 1",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Literal",
            "operator": "UPD",
            "src": "8",
            "src_parent": "sourceStart - 8",
            "src_parent_type": "BinaryOperator",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "1",
            "dst_parent": "annotations[annotations.length - 1].declarationSourceEnd + 1",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Literal",
            "operator": "UPD",
            "src": "2",
            "src_parent": "annotations[annotations.length - 1].sourceEnd() + 2",
            "src_parent_type": "BinaryOperator",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "((org.eclipse.jdt.internal.compiler.ast.Expression) (node)).statementEnd",
            "src_parent": "((org.eclipse.jdt.internal.compiler.ast.Expression) (node)).statementEnd > 0",
            "src_parent_type": "BinaryOperator",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "((org.eclipse.jdt.internal.compiler.ast.Expression) (node)).statementEnd",
            "src_parent": "sourceEnd = ((org.eclipse.jdt.internal.compiler.ast.Expression) (node)).statementEnd",
            "src_parent_type": "Assignment",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "annotations[annotations.length - 1].sourceEnd() + 2",
            "src_parent": "modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2",
            "src_parent_type": "Assignment",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "sourceStart - 8",
            "src_parent": "int modifiersSourceEnd = sourceStart - 8",
            "src_parent_type": "LocalVariable",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private int findNextNonWhitespace(char[] content, int off) {\n    while (off >= 0) {\n        char c = content[off];\n        if (java.lang.Character.isWhitespace(c) == false) {\n            return off;\n        }\n        off++;\n    } \n    return -1;\n}",
            "src_parent": "public class PositionBuilder {\n    private final spoon.support.compiler.jdt.JDTTreeBuilder jdtTreeBuilder;\n\n    public PositionBuilder(spoon.support.compiler.jdt.JDTTreeBuilder jdtTreeBuilder) {\n        this.jdtTreeBuilder = jdtTreeBuilder;\n    }\n\n    spoon.reflect.cu.SourcePosition buildPosition(int sourceStart, int sourceEnd) {\n        spoon.reflect.cu.CompilationUnit cu = this.jdtTreeBuilder.getContextBuilder().compilationUnitSpoon;\n        final int[] lineSeparatorPositions = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult.lineSeparatorPositions;\n        return this.jdtTreeBuilder.getFactory().Core().createSourcePosition(cu, sourceStart, sourceEnd, lineSeparatorPositions);\n    }\n\n    spoon.reflect.cu.SourcePosition buildPositionCtElement(spoon.reflect.declaration.CtElement e, org.eclipse.jdt.internal.compiler.ast.ASTNode node) {\n        spoon.reflect.factory.CoreFactory cf = this.jdtTreeBuilder.getFactory().Core();\n        spoon.reflect.cu.CompilationUnit cu = this.jdtTreeBuilder.getFactory().CompilationUnit().create(new java.lang.String(this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.getFileName()));\n        org.eclipse.jdt.internal.compiler.CompilationResult cr = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult;\n        int[] lineSeparatorPositions = cr.lineSeparatorPositions;\n        char[] contents = cr.compilationUnit.getContents();\n        int sourceStart = node.sourceStart;\n        int sourceEnd = node.sourceEnd;\n        if (node instanceof org.eclipse.jdt.internal.compiler.ast.Annotation) {\n            org.eclipse.jdt.internal.compiler.ast.Annotation ann = ((org.eclipse.jdt.internal.compiler.ast.Annotation) (node));\n            int declEnd = ann.declarationSourceEnd;\n            if (declEnd > 0) {\n                sourceEnd = declEnd;\n            }\n        } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {\n            org.eclipse.jdt.internal.compiler.ast.Expression expression = ((org.eclipse.jdt.internal.compiler.ast.Expression) (node));\n            int statementEnd = expression.statementEnd;\n            if (statementEnd > 0) {\n                sourceEnd = statementEnd;\n            }\n        }\n        if (node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) {\n            org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration variableDeclaration = ((org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) (node));\n            int modifiersSourceStart = variableDeclaration.modifiersSourceStart;\n            int declarationSourceStart = variableDeclaration.declarationSourceStart;\n            int declarationSourceEnd = variableDeclaration.declarationSourceEnd;\n            int declarationEnd = variableDeclaration.declarationEnd;\n            org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = variableDeclaration.annotations;\n            if ((annotations != null) && (annotations.length > 0)) {\n                if (annotations[0].sourceStart() == sourceStart) {\n                    modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n                }\n            }\n            if (modifiersSourceStart == 0) {\n                modifiersSourceStart = declarationSourceStart;\n            }\n            int modifiersSourceEnd;\n            if (variableDeclaration.type != null) {\n                modifiersSourceEnd = variableDeclaration.type.sourceStart() - 2;\n            } else {\n                modifiersSourceEnd = declarationSourceStart - 1;\n            }\n            if (modifiersSourceStart > modifiersSourceEnd) {\n                modifiersSourceEnd = modifiersSourceStart - 1;\n            }\n            return cf.createDeclarationSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, lineSeparatorPositions);\n        } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {\n            org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (node));\n            int declarationSourceStart = typeDeclaration.declarationSourceStart;\n            int declarationSourceEnd = typeDeclaration.declarationSourceEnd;\n            int modifiersSourceStart = typeDeclaration.modifiersSourceStart;\n            int bodyStart = typeDeclaration.bodyStart;\n            int bodyEnd = typeDeclaration.bodyEnd;\n            org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = typeDeclaration.annotations;\n            if ((annotations != null) && (annotations.length > 0)) {\n                if (annotations[0].sourceStart() == declarationSourceStart) {\n                    modifiersSourceStart = findNextNonWhitespace(contents, annotations[annotations.length - 1].declarationSourceEnd + 1);\n                }\n            }\n            if (modifiersSourceStart == 0) {\n                modifiersSourceStart = declarationSourceStart;\n            }\n            int modifiersSourceEnd = findPrevNonWhitespace(contents, findPrevWhitespace(contents, findPrevNonWhitespace(contents, sourceStart - 1)));\n            if (modifiersSourceEnd < modifiersSourceStart) {\n                modifiersSourceEnd = modifiersSourceStart - 1;\n            }\n            return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart - 1, bodyEnd, lineSeparatorPositions);\n        } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) {\n            org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (node));\n            int bodyStart = methodDeclaration.bodyStart;\n            int bodyEnd = methodDeclaration.bodyEnd;\n            int declarationSourceStart = methodDeclaration.declarationSourceStart;\n            int declarationSourceEnd = methodDeclaration.declarationSourceEnd;\n            int modifiersSourceStart = methodDeclaration.modifiersSourceStart;\n            if (modifiersSourceStart == 0) {\n                modifiersSourceStart = declarationSourceStart;\n            }\n            if ((node instanceof org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration) && (bodyStart == bodyEnd)) {\n                bodyEnd--;\n            }\n            org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc = methodDeclaration.javadoc;\n            if ((javadoc != null) && (javadoc.sourceEnd() > declarationSourceStart)) {\n                modifiersSourceStart = javadoc.sourceEnd() + 1;\n            }\n            org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = methodDeclaration.annotations;\n            if ((annotations != null) && (annotations.length > 0)) {\n                if (annotations[0].sourceStart() == declarationSourceStart) {\n                    modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n                }\n            }\n            int modifiersSourceEnd = sourceStart - 1;\n            if ((methodDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) && (((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodDeclaration)).returnType != null)) {\n                modifiersSourceEnd = ((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodDeclaration)).returnType.sourceStart() - 2;\n            }\n            org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters = methodDeclaration.typeParameters();\n            if ((typeParameters != null) && (typeParameters.length > 0)) {\n                modifiersSourceEnd = typeParameters[0].declarationSourceStart - 3;\n            }\n            if (spoon.support.compiler.jdt.JDTTreeBuilderQuery.getModifiers(methodDeclaration.modifiers).isEmpty()) {\n                modifiersSourceStart = modifiersSourceEnd + 1;\n            }\n            sourceEnd = (sourceStart + methodDeclaration.selector.length) - 1;\n            if (e instanceof spoon.reflect.code.CtStatementList) {\n                return cf.createSourcePosition(cu, bodyStart - 1, bodyEnd + 1, lineSeparatorPositions);\n            } else if (bodyStart == 0) {\n                return spoon.reflect.cu.SourcePosition.NOPOSITION;\n            } else {\n                if (bodyStart < bodyEnd) {\n                    if (contents[bodyStart - 1] == '{') {\n                        bodyStart--;\n                        if (contents[bodyEnd + 1] == '}') {\n                            bodyEnd++;\n                        } else {\n                            throw new spoon.SpoonException(\"Missing body end in\\n\" + new java.lang.String(contents, sourceStart, sourceEnd - sourceStart));\n                        }\n                    }\n                }\n                return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart, bodyEnd, lineSeparatorPositions);\n            }\n        }\n        return cf.createSourcePosition(cu, sourceStart, sourceEnd, lineSeparatorPositions);\n    }\n\n    private int findNextNonWhitespace(char[] content, int off) {\n        while (off >= 0) {\n            char c = content[off];\n            if (java.lang.Character.isWhitespace(c) == false) {\n                return off;\n            }\n            off++;\n        } \n        return -1;\n    }\n\n    private int findNextWhitespace(char[] content, int off) {\n        while (off >= 0) {\n            char c = content[off];\n            if (java.lang.Character.isWhitespace(c)) {\n                return off;\n            }\n            off++;\n        } \n        return -1;\n    }\n\n    private int findPrevNonWhitespace(char[] content, int off) {\n        while (off >= 0) {\n            char c = content[off];\n            if (java.lang.Character.isWhitespace(c) == false) {\n                return off;\n            }\n            off--;\n        } \n        return -1;\n    }\n\n    private int findPrevWhitespace(char[] content, int off) {\n        while (off >= 0) {\n            char c = content[off];\n            if (java.lang.Character.isWhitespace(c)) {\n                return off;\n            }\n            off--;\n        } \n        return -1;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private int findNextWhitespace(char[] content, int off) {\n    while (off >= 0) {\n        char c = content[off];\n        if (java.lang.Character.isWhitespace(c)) {\n            return off;\n        }\n        off++;\n    } \n    return -1;\n}",
            "src_parent": "public class PositionBuilder {\n    private final spoon.support.compiler.jdt.JDTTreeBuilder jdtTreeBuilder;\n\n    public PositionBuilder(spoon.support.compiler.jdt.JDTTreeBuilder jdtTreeBuilder) {\n        this.jdtTreeBuilder = jdtTreeBuilder;\n    }\n\n    spoon.reflect.cu.SourcePosition buildPosition(int sourceStart, int sourceEnd) {\n        spoon.reflect.cu.CompilationUnit cu = this.jdtTreeBuilder.getContextBuilder().compilationUnitSpoon;\n        final int[] lineSeparatorPositions = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult.lineSeparatorPositions;\n        return this.jdtTreeBuilder.getFactory().Core().createSourcePosition(cu, sourceStart, sourceEnd, lineSeparatorPositions);\n    }\n\n    spoon.reflect.cu.SourcePosition buildPositionCtElement(spoon.reflect.declaration.CtElement e, org.eclipse.jdt.internal.compiler.ast.ASTNode node) {\n        spoon.reflect.factory.CoreFactory cf = this.jdtTreeBuilder.getFactory().Core();\n        spoon.reflect.cu.CompilationUnit cu = this.jdtTreeBuilder.getFactory().CompilationUnit().create(new java.lang.String(this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.getFileName()));\n        org.eclipse.jdt.internal.compiler.CompilationResult cr = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult;\n        int[] lineSeparatorPositions = cr.lineSeparatorPositions;\n        char[] contents = cr.compilationUnit.getContents();\n        int sourceStart = node.sourceStart;\n        int sourceEnd = node.sourceEnd;\n        if (node instanceof org.eclipse.jdt.internal.compiler.ast.Annotation) {\n            org.eclipse.jdt.internal.compiler.ast.Annotation ann = ((org.eclipse.jdt.internal.compiler.ast.Annotation) (node));\n            int declEnd = ann.declarationSourceEnd;\n            if (declEnd > 0) {\n                sourceEnd = declEnd;\n            }\n        } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {\n            org.eclipse.jdt.internal.compiler.ast.Expression expression = ((org.eclipse.jdt.internal.compiler.ast.Expression) (node));\n            int statementEnd = expression.statementEnd;\n            if (statementEnd > 0) {\n                sourceEnd = statementEnd;\n            }\n        }\n        if (node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) {\n            org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration variableDeclaration = ((org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) (node));\n            int modifiersSourceStart = variableDeclaration.modifiersSourceStart;\n            int declarationSourceStart = variableDeclaration.declarationSourceStart;\n            int declarationSourceEnd = variableDeclaration.declarationSourceEnd;\n            int declarationEnd = variableDeclaration.declarationEnd;\n            org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = variableDeclaration.annotations;\n            if ((annotations != null) && (annotations.length > 0)) {\n                if (annotations[0].sourceStart() == sourceStart) {\n                    modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n                }\n            }\n            if (modifiersSourceStart == 0) {\n                modifiersSourceStart = declarationSourceStart;\n            }\n            int modifiersSourceEnd;\n            if (variableDeclaration.type != null) {\n                modifiersSourceEnd = variableDeclaration.type.sourceStart() - 2;\n            } else {\n                modifiersSourceEnd = declarationSourceStart - 1;\n            }\n            if (modifiersSourceStart > modifiersSourceEnd) {\n                modifiersSourceEnd = modifiersSourceStart - 1;\n            }\n            return cf.createDeclarationSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, lineSeparatorPositions);\n        } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {\n            org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (node));\n            int declarationSourceStart = typeDeclaration.declarationSourceStart;\n            int declarationSourceEnd = typeDeclaration.declarationSourceEnd;\n            int modifiersSourceStart = typeDeclaration.modifiersSourceStart;\n            int bodyStart = typeDeclaration.bodyStart;\n            int bodyEnd = typeDeclaration.bodyEnd;\n            org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = typeDeclaration.annotations;\n            if ((annotations != null) && (annotations.length > 0)) {\n                if (annotations[0].sourceStart() == declarationSourceStart) {\n                    modifiersSourceStart = findNextNonWhitespace(contents, annotations[annotations.length - 1].declarationSourceEnd + 1);\n                }\n            }\n            if (modifiersSourceStart == 0) {\n                modifiersSourceStart = declarationSourceStart;\n            }\n            int modifiersSourceEnd = findPrevNonWhitespace(contents, findPrevWhitespace(contents, findPrevNonWhitespace(contents, sourceStart - 1)));\n            if (modifiersSourceEnd < modifiersSourceStart) {\n                modifiersSourceEnd = modifiersSourceStart - 1;\n            }\n            return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart - 1, bodyEnd, lineSeparatorPositions);\n        } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) {\n            org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (node));\n            int bodyStart = methodDeclaration.bodyStart;\n            int bodyEnd = methodDeclaration.bodyEnd;\n            int declarationSourceStart = methodDeclaration.declarationSourceStart;\n            int declarationSourceEnd = methodDeclaration.declarationSourceEnd;\n            int modifiersSourceStart = methodDeclaration.modifiersSourceStart;\n            if (modifiersSourceStart == 0) {\n                modifiersSourceStart = declarationSourceStart;\n            }\n            if ((node instanceof org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration) && (bodyStart == bodyEnd)) {\n                bodyEnd--;\n            }\n            org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc = methodDeclaration.javadoc;\n            if ((javadoc != null) && (javadoc.sourceEnd() > declarationSourceStart)) {\n                modifiersSourceStart = javadoc.sourceEnd() + 1;\n            }\n            org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = methodDeclaration.annotations;\n            if ((annotations != null) && (annotations.length > 0)) {\n                if (annotations[0].sourceStart() == declarationSourceStart) {\n                    modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n                }\n            }\n            int modifiersSourceEnd = sourceStart - 1;\n            if ((methodDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) && (((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodDeclaration)).returnType != null)) {\n                modifiersSourceEnd = ((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodDeclaration)).returnType.sourceStart() - 2;\n            }\n            org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters = methodDeclaration.typeParameters();\n            if ((typeParameters != null) && (typeParameters.length > 0)) {\n                modifiersSourceEnd = typeParameters[0].declarationSourceStart - 3;\n            }\n            if (spoon.support.compiler.jdt.JDTTreeBuilderQuery.getModifiers(methodDeclaration.modifiers).isEmpty()) {\n                modifiersSourceStart = modifiersSourceEnd + 1;\n            }\n            sourceEnd = (sourceStart + methodDeclaration.selector.length) - 1;\n            if (e instanceof spoon.reflect.code.CtStatementList) {\n                return cf.createSourcePosition(cu, bodyStart - 1, bodyEnd + 1, lineSeparatorPositions);\n            } else if (bodyStart == 0) {\n                return spoon.reflect.cu.SourcePosition.NOPOSITION;\n            } else {\n                if (bodyStart < bodyEnd) {\n                    if (contents[bodyStart - 1] == '{') {\n                        bodyStart--;\n                        if (contents[bodyEnd + 1] == '}') {\n                            bodyEnd++;\n                        } else {\n                            throw new spoon.SpoonException(\"Missing body end in\\n\" + new java.lang.String(contents, sourceStart, sourceEnd - sourceStart));\n                        }\n                    }\n                }\n                return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart, bodyEnd, lineSeparatorPositions);\n            }\n        }\n        return cf.createSourcePosition(cu, sourceStart, sourceEnd, lineSeparatorPositions);\n    }\n\n    private int findNextNonWhitespace(char[] content, int off) {\n        while (off >= 0) {\n            char c = content[off];\n            if (java.lang.Character.isWhitespace(c) == false) {\n                return off;\n            }\n            off++;\n        } \n        return -1;\n    }\n\n    private int findNextWhitespace(char[] content, int off) {\n        while (off >= 0) {\n            char c = content[off];\n            if (java.lang.Character.isWhitespace(c)) {\n                return off;\n            }\n            off++;\n        } \n        return -1;\n    }\n\n    private int findPrevNonWhitespace(char[] content, int off) {\n        while (off >= 0) {\n            char c = content[off];\n            if (java.lang.Character.isWhitespace(c) == false) {\n                return off;\n            }\n            off--;\n        } \n        return -1;\n    }\n\n    private int findPrevWhitespace(char[] content, int off) {\n        while (off >= 0) {\n            char c = content[off];\n            if (java.lang.Character.isWhitespace(c)) {\n                return off;\n            }\n            off--;\n        } \n        return -1;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private int findPrevNonWhitespace(char[] content, int off) {\n    while (off >= 0) {\n        char c = content[off];\n        if (java.lang.Character.isWhitespace(c) == false) {\n            return off;\n        }\n        off--;\n    } \n    return -1;\n}",
            "src_parent": "public class PositionBuilder {\n    private final spoon.support.compiler.jdt.JDTTreeBuilder jdtTreeBuilder;\n\n    public PositionBuilder(spoon.support.compiler.jdt.JDTTreeBuilder jdtTreeBuilder) {\n        this.jdtTreeBuilder = jdtTreeBuilder;\n    }\n\n    spoon.reflect.cu.SourcePosition buildPosition(int sourceStart, int sourceEnd) {\n        spoon.reflect.cu.CompilationUnit cu = this.jdtTreeBuilder.getContextBuilder().compilationUnitSpoon;\n        final int[] lineSeparatorPositions = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult.lineSeparatorPositions;\n        return this.jdtTreeBuilder.getFactory().Core().createSourcePosition(cu, sourceStart, sourceEnd, lineSeparatorPositions);\n    }\n\n    spoon.reflect.cu.SourcePosition buildPositionCtElement(spoon.reflect.declaration.CtElement e, org.eclipse.jdt.internal.compiler.ast.ASTNode node) {\n        spoon.reflect.factory.CoreFactory cf = this.jdtTreeBuilder.getFactory().Core();\n        spoon.reflect.cu.CompilationUnit cu = this.jdtTreeBuilder.getFactory().CompilationUnit().create(new java.lang.String(this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.getFileName()));\n        org.eclipse.jdt.internal.compiler.CompilationResult cr = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult;\n        int[] lineSeparatorPositions = cr.lineSeparatorPositions;\n        char[] contents = cr.compilationUnit.getContents();\n        int sourceStart = node.sourceStart;\n        int sourceEnd = node.sourceEnd;\n        if (node instanceof org.eclipse.jdt.internal.compiler.ast.Annotation) {\n            org.eclipse.jdt.internal.compiler.ast.Annotation ann = ((org.eclipse.jdt.internal.compiler.ast.Annotation) (node));\n            int declEnd = ann.declarationSourceEnd;\n            if (declEnd > 0) {\n                sourceEnd = declEnd;\n            }\n        } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {\n            org.eclipse.jdt.internal.compiler.ast.Expression expression = ((org.eclipse.jdt.internal.compiler.ast.Expression) (node));\n            int statementEnd = expression.statementEnd;\n            if (statementEnd > 0) {\n                sourceEnd = statementEnd;\n            }\n        }\n        if (node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) {\n            org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration variableDeclaration = ((org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) (node));\n            int modifiersSourceStart = variableDeclaration.modifiersSourceStart;\n            int declarationSourceStart = variableDeclaration.declarationSourceStart;\n            int declarationSourceEnd = variableDeclaration.declarationSourceEnd;\n            int declarationEnd = variableDeclaration.declarationEnd;\n            org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = variableDeclaration.annotations;\n            if ((annotations != null) && (annotations.length > 0)) {\n                if (annotations[0].sourceStart() == sourceStart) {\n                    modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n                }\n            }\n            if (modifiersSourceStart == 0) {\n                modifiersSourceStart = declarationSourceStart;\n            }\n            int modifiersSourceEnd;\n            if (variableDeclaration.type != null) {\n                modifiersSourceEnd = variableDeclaration.type.sourceStart() - 2;\n            } else {\n                modifiersSourceEnd = declarationSourceStart - 1;\n            }\n            if (modifiersSourceStart > modifiersSourceEnd) {\n                modifiersSourceEnd = modifiersSourceStart - 1;\n            }\n            return cf.createDeclarationSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, lineSeparatorPositions);\n        } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {\n            org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (node));\n            int declarationSourceStart = typeDeclaration.declarationSourceStart;\n            int declarationSourceEnd = typeDeclaration.declarationSourceEnd;\n            int modifiersSourceStart = typeDeclaration.modifiersSourceStart;\n            int bodyStart = typeDeclaration.bodyStart;\n            int bodyEnd = typeDeclaration.bodyEnd;\n            org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = typeDeclaration.annotations;\n            if ((annotations != null) && (annotations.length > 0)) {\n                if (annotations[0].sourceStart() == declarationSourceStart) {\n                    modifiersSourceStart = findNextNonWhitespace(contents, annotations[annotations.length - 1].declarationSourceEnd + 1);\n                }\n            }\n            if (modifiersSourceStart == 0) {\n                modifiersSourceStart = declarationSourceStart;\n            }\n            int modifiersSourceEnd = findPrevNonWhitespace(contents, findPrevWhitespace(contents, findPrevNonWhitespace(contents, sourceStart - 1)));\n            if (modifiersSourceEnd < modifiersSourceStart) {\n                modifiersSourceEnd = modifiersSourceStart - 1;\n            }\n            return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart - 1, bodyEnd, lineSeparatorPositions);\n        } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) {\n            org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (node));\n            int bodyStart = methodDeclaration.bodyStart;\n            int bodyEnd = methodDeclaration.bodyEnd;\n            int declarationSourceStart = methodDeclaration.declarationSourceStart;\n            int declarationSourceEnd = methodDeclaration.declarationSourceEnd;\n            int modifiersSourceStart = methodDeclaration.modifiersSourceStart;\n            if (modifiersSourceStart == 0) {\n                modifiersSourceStart = declarationSourceStart;\n            }\n            if ((node instanceof org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration) && (bodyStart == bodyEnd)) {\n                bodyEnd--;\n            }\n            org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc = methodDeclaration.javadoc;\n            if ((javadoc != null) && (javadoc.sourceEnd() > declarationSourceStart)) {\n                modifiersSourceStart = javadoc.sourceEnd() + 1;\n            }\n            org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = methodDeclaration.annotations;\n            if ((annotations != null) && (annotations.length > 0)) {\n                if (annotations[0].sourceStart() == declarationSourceStart) {\n                    modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n                }\n            }\n            int modifiersSourceEnd = sourceStart - 1;\n            if ((methodDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) && (((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodDeclaration)).returnType != null)) {\n                modifiersSourceEnd = ((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodDeclaration)).returnType.sourceStart() - 2;\n            }\n            org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters = methodDeclaration.typeParameters();\n            if ((typeParameters != null) && (typeParameters.length > 0)) {\n                modifiersSourceEnd = typeParameters[0].declarationSourceStart - 3;\n            }\n            if (spoon.support.compiler.jdt.JDTTreeBuilderQuery.getModifiers(methodDeclaration.modifiers).isEmpty()) {\n                modifiersSourceStart = modifiersSourceEnd + 1;\n            }\n            sourceEnd = (sourceStart + methodDeclaration.selector.length) - 1;\n            if (e instanceof spoon.reflect.code.CtStatementList) {\n                return cf.createSourcePosition(cu, bodyStart - 1, bodyEnd + 1, lineSeparatorPositions);\n            } else if (bodyStart == 0) {\n                return spoon.reflect.cu.SourcePosition.NOPOSITION;\n            } else {\n                if (bodyStart < bodyEnd) {\n                    if (contents[bodyStart - 1] == '{') {\n                        bodyStart--;\n                        if (contents[bodyEnd + 1] == '}') {\n                            bodyEnd++;\n                        } else {\n                            throw new spoon.SpoonException(\"Missing body end in\\n\" + new java.lang.String(contents, sourceStart, sourceEnd - sourceStart));\n                        }\n                    }\n                }\n                return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart, bodyEnd, lineSeparatorPositions);\n            }\n        }\n        return cf.createSourcePosition(cu, sourceStart, sourceEnd, lineSeparatorPositions);\n    }\n\n    private int findNextNonWhitespace(char[] content, int off) {\n        while (off >= 0) {\n            char c = content[off];\n            if (java.lang.Character.isWhitespace(c) == false) {\n                return off;\n            }\n            off++;\n        } \n        return -1;\n    }\n\n    private int findNextWhitespace(char[] content, int off) {\n        while (off >= 0) {\n            char c = content[off];\n            if (java.lang.Character.isWhitespace(c)) {\n                return off;\n            }\n            off++;\n        } \n        return -1;\n    }\n\n    private int findPrevNonWhitespace(char[] content, int off) {\n        while (off >= 0) {\n            char c = content[off];\n            if (java.lang.Character.isWhitespace(c) == false) {\n                return off;\n            }\n            off--;\n        } \n        return -1;\n    }\n\n    private int findPrevWhitespace(char[] content, int off) {\n        while (off >= 0) {\n            char c = content[off];\n            if (java.lang.Character.isWhitespace(c)) {\n                return off;\n            }\n            off--;\n        } \n        return -1;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private int findPrevWhitespace(char[] content, int off) {\n    while (off >= 0) {\n        char c = content[off];\n        if (java.lang.Character.isWhitespace(c)) {\n            return off;\n        }\n        off--;\n    } \n    return -1;\n}",
            "src_parent": "public class PositionBuilder {\n    private final spoon.support.compiler.jdt.JDTTreeBuilder jdtTreeBuilder;\n\n    public PositionBuilder(spoon.support.compiler.jdt.JDTTreeBuilder jdtTreeBuilder) {\n        this.jdtTreeBuilder = jdtTreeBuilder;\n    }\n\n    spoon.reflect.cu.SourcePosition buildPosition(int sourceStart, int sourceEnd) {\n        spoon.reflect.cu.CompilationUnit cu = this.jdtTreeBuilder.getContextBuilder().compilationUnitSpoon;\n        final int[] lineSeparatorPositions = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult.lineSeparatorPositions;\n        return this.jdtTreeBuilder.getFactory().Core().createSourcePosition(cu, sourceStart, sourceEnd, lineSeparatorPositions);\n    }\n\n    spoon.reflect.cu.SourcePosition buildPositionCtElement(spoon.reflect.declaration.CtElement e, org.eclipse.jdt.internal.compiler.ast.ASTNode node) {\n        spoon.reflect.factory.CoreFactory cf = this.jdtTreeBuilder.getFactory().Core();\n        spoon.reflect.cu.CompilationUnit cu = this.jdtTreeBuilder.getFactory().CompilationUnit().create(new java.lang.String(this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.getFileName()));\n        org.eclipse.jdt.internal.compiler.CompilationResult cr = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult;\n        int[] lineSeparatorPositions = cr.lineSeparatorPositions;\n        char[] contents = cr.compilationUnit.getContents();\n        int sourceStart = node.sourceStart;\n        int sourceEnd = node.sourceEnd;\n        if (node instanceof org.eclipse.jdt.internal.compiler.ast.Annotation) {\n            org.eclipse.jdt.internal.compiler.ast.Annotation ann = ((org.eclipse.jdt.internal.compiler.ast.Annotation) (node));\n            int declEnd = ann.declarationSourceEnd;\n            if (declEnd > 0) {\n                sourceEnd = declEnd;\n            }\n        } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {\n            org.eclipse.jdt.internal.compiler.ast.Expression expression = ((org.eclipse.jdt.internal.compiler.ast.Expression) (node));\n            int statementEnd = expression.statementEnd;\n            if (statementEnd > 0) {\n                sourceEnd = statementEnd;\n            }\n        }\n        if (node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) {\n            org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration variableDeclaration = ((org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) (node));\n            int modifiersSourceStart = variableDeclaration.modifiersSourceStart;\n            int declarationSourceStart = variableDeclaration.declarationSourceStart;\n            int declarationSourceEnd = variableDeclaration.declarationSourceEnd;\n            int declarationEnd = variableDeclaration.declarationEnd;\n            org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = variableDeclaration.annotations;\n            if ((annotations != null) && (annotations.length > 0)) {\n                if (annotations[0].sourceStart() == sourceStart) {\n                    modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n                }\n            }\n            if (modifiersSourceStart == 0) {\n                modifiersSourceStart = declarationSourceStart;\n            }\n            int modifiersSourceEnd;\n            if (variableDeclaration.type != null) {\n                modifiersSourceEnd = variableDeclaration.type.sourceStart() - 2;\n            } else {\n                modifiersSourceEnd = declarationSourceStart - 1;\n            }\n            if (modifiersSourceStart > modifiersSourceEnd) {\n                modifiersSourceEnd = modifiersSourceStart - 1;\n            }\n            return cf.createDeclarationSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, lineSeparatorPositions);\n        } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {\n            org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (node));\n            int declarationSourceStart = typeDeclaration.declarationSourceStart;\n            int declarationSourceEnd = typeDeclaration.declarationSourceEnd;\n            int modifiersSourceStart = typeDeclaration.modifiersSourceStart;\n            int bodyStart = typeDeclaration.bodyStart;\n            int bodyEnd = typeDeclaration.bodyEnd;\n            org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = typeDeclaration.annotations;\n            if ((annotations != null) && (annotations.length > 0)) {\n                if (annotations[0].sourceStart() == declarationSourceStart) {\n                    modifiersSourceStart = findNextNonWhitespace(contents, annotations[annotations.length - 1].declarationSourceEnd + 1);\n                }\n            }\n            if (modifiersSourceStart == 0) {\n                modifiersSourceStart = declarationSourceStart;\n            }\n            int modifiersSourceEnd = findPrevNonWhitespace(contents, findPrevWhitespace(contents, findPrevNonWhitespace(contents, sourceStart - 1)));\n            if (modifiersSourceEnd < modifiersSourceStart) {\n                modifiersSourceEnd = modifiersSourceStart - 1;\n            }\n            return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart - 1, bodyEnd, lineSeparatorPositions);\n        } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) {\n            org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (node));\n            int bodyStart = methodDeclaration.bodyStart;\n            int bodyEnd = methodDeclaration.bodyEnd;\n            int declarationSourceStart = methodDeclaration.declarationSourceStart;\n            int declarationSourceEnd = methodDeclaration.declarationSourceEnd;\n            int modifiersSourceStart = methodDeclaration.modifiersSourceStart;\n            if (modifiersSourceStart == 0) {\n                modifiersSourceStart = declarationSourceStart;\n            }\n            if ((node instanceof org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration) && (bodyStart == bodyEnd)) {\n                bodyEnd--;\n            }\n            org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc = methodDeclaration.javadoc;\n            if ((javadoc != null) && (javadoc.sourceEnd() > declarationSourceStart)) {\n                modifiersSourceStart = javadoc.sourceEnd() + 1;\n            }\n            org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = methodDeclaration.annotations;\n            if ((annotations != null) && (annotations.length > 0)) {\n                if (annotations[0].sourceStart() == declarationSourceStart) {\n                    modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n                }\n            }\n            int modifiersSourceEnd = sourceStart - 1;\n            if ((methodDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) && (((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodDeclaration)).returnType != null)) {\n                modifiersSourceEnd = ((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodDeclaration)).returnType.sourceStart() - 2;\n            }\n            org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters = methodDeclaration.typeParameters();\n            if ((typeParameters != null) && (typeParameters.length > 0)) {\n                modifiersSourceEnd = typeParameters[0].declarationSourceStart - 3;\n            }\n            if (spoon.support.compiler.jdt.JDTTreeBuilderQuery.getModifiers(methodDeclaration.modifiers).isEmpty()) {\n                modifiersSourceStart = modifiersSourceEnd + 1;\n            }\n            sourceEnd = (sourceStart + methodDeclaration.selector.length) - 1;\n            if (e instanceof spoon.reflect.code.CtStatementList) {\n                return cf.createSourcePosition(cu, bodyStart - 1, bodyEnd + 1, lineSeparatorPositions);\n            } else if (bodyStart == 0) {\n                return spoon.reflect.cu.SourcePosition.NOPOSITION;\n            } else {\n                if (bodyStart < bodyEnd) {\n                    if (contents[bodyStart - 1] == '{') {\n                        bodyStart--;\n                        if (contents[bodyEnd + 1] == '}') {\n                            bodyEnd++;\n                        } else {\n                            throw new spoon.SpoonException(\"Missing body end in\\n\" + new java.lang.String(contents, sourceStart, sourceEnd - sourceStart));\n                        }\n                    }\n                }\n                return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart, bodyEnd, lineSeparatorPositions);\n            }\n        }\n        return cf.createSourcePosition(cu, sourceStart, sourceEnd, lineSeparatorPositions);\n    }\n\n    private int findNextNonWhitespace(char[] content, int off) {\n        while (off >= 0) {\n            char c = content[off];\n            if (java.lang.Character.isWhitespace(c) == false) {\n                return off;\n            }\n            off++;\n        } \n        return -1;\n    }\n\n    private int findNextWhitespace(char[] content, int off) {\n        while (off >= 0) {\n            char c = content[off];\n            if (java.lang.Character.isWhitespace(c)) {\n                return off;\n            }\n            off++;\n        } \n        return -1;\n    }\n\n    private int findPrevNonWhitespace(char[] content, int off) {\n        while (off >= 0) {\n            char c = content[off];\n            if (java.lang.Character.isWhitespace(c) == false) {\n                return off;\n            }\n            off--;\n        } \n        return -1;\n    }\n\n    private int findPrevWhitespace(char[] content, int off) {\n        while (off >= 0) {\n            char c = content[off];\n            if (java.lang.Character.isWhitespace(c)) {\n                return off;\n            }\n            off--;\n        } \n        return -1;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "int[] lineSeparatorPositions = cr.lineSeparatorPositions",
            "src_parent": "{\n    spoon.reflect.factory.CoreFactory cf = this.jdtTreeBuilder.getFactory().Core();\n    spoon.reflect.cu.CompilationUnit cu = this.jdtTreeBuilder.getFactory().CompilationUnit().create(new java.lang.String(this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.getFileName()));\n    org.eclipse.jdt.internal.compiler.CompilationResult cr = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult;\n    int[] lineSeparatorPositions = cr.lineSeparatorPositions;\n    char[] contents = cr.compilationUnit.getContents();\n    int sourceStart = node.sourceStart;\n    int sourceEnd = node.sourceEnd;\n    if (node instanceof org.eclipse.jdt.internal.compiler.ast.Annotation) {\n        org.eclipse.jdt.internal.compiler.ast.Annotation ann = ((org.eclipse.jdt.internal.compiler.ast.Annotation) (node));\n        int declEnd = ann.declarationSourceEnd;\n        if (declEnd > 0) {\n            sourceEnd = declEnd;\n        }\n    } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {\n        org.eclipse.jdt.internal.compiler.ast.Expression expression = ((org.eclipse.jdt.internal.compiler.ast.Expression) (node));\n        int statementEnd = expression.statementEnd;\n        if (statementEnd > 0) {\n            sourceEnd = statementEnd;\n        }\n    }\n    if (node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) {\n        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration variableDeclaration = ((org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) (node));\n        int modifiersSourceStart = variableDeclaration.modifiersSourceStart;\n        int declarationSourceStart = variableDeclaration.declarationSourceStart;\n        int declarationSourceEnd = variableDeclaration.declarationSourceEnd;\n        int declarationEnd = variableDeclaration.declarationEnd;\n        org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = variableDeclaration.annotations;\n        if ((annotations != null) && (annotations.length > 0)) {\n            if (annotations[0].sourceStart() == sourceStart) {\n                modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n            }\n        }\n        if (modifiersSourceStart == 0) {\n            modifiersSourceStart = declarationSourceStart;\n        }\n        int modifiersSourceEnd;\n        if (variableDeclaration.type != null) {\n            modifiersSourceEnd = variableDeclaration.type.sourceStart() - 2;\n        } else {\n            modifiersSourceEnd = declarationSourceStart - 1;\n        }\n        if (modifiersSourceStart > modifiersSourceEnd) {\n            modifiersSourceEnd = modifiersSourceStart - 1;\n        }\n        return cf.createDeclarationSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, lineSeparatorPositions);\n    } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {\n        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (node));\n        int declarationSourceStart = typeDeclaration.declarationSourceStart;\n        int declarationSourceEnd = typeDeclaration.declarationSourceEnd;\n        int modifiersSourceStart = typeDeclaration.modifiersSourceStart;\n        int bodyStart = typeDeclaration.bodyStart;\n        int bodyEnd = typeDeclaration.bodyEnd;\n        org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = typeDeclaration.annotations;\n        if ((annotations != null) && (annotations.length > 0)) {\n            if (annotations[0].sourceStart() == declarationSourceStart) {\n                modifiersSourceStart = findNextNonWhitespace(contents, annotations[annotations.length - 1].declarationSourceEnd + 1);\n            }\n        }\n        if (modifiersSourceStart == 0) {\n            modifiersSourceStart = declarationSourceStart;\n        }\n        int modifiersSourceEnd = findPrevNonWhitespace(contents, findPrevWhitespace(contents, findPrevNonWhitespace(contents, sourceStart - 1)));\n        if (modifiersSourceEnd < modifiersSourceStart) {\n            modifiersSourceEnd = modifiersSourceStart - 1;\n        }\n        return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart - 1, bodyEnd, lineSeparatorPositions);\n    } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) {\n        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (node));\n        int bodyStart = methodDeclaration.bodyStart;\n        int bodyEnd = methodDeclaration.bodyEnd;\n        int declarationSourceStart = methodDeclaration.declarationSourceStart;\n        int declarationSourceEnd = methodDeclaration.declarationSourceEnd;\n        int modifiersSourceStart = methodDeclaration.modifiersSourceStart;\n        if (modifiersSourceStart == 0) {\n            modifiersSourceStart = declarationSourceStart;\n        }\n        if ((node instanceof org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration) && (bodyStart == bodyEnd)) {\n            bodyEnd--;\n        }\n        org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc = methodDeclaration.javadoc;\n        if ((javadoc != null) && (javadoc.sourceEnd() > declarationSourceStart)) {\n            modifiersSourceStart = javadoc.sourceEnd() + 1;\n        }\n        org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = methodDeclaration.annotations;\n        if ((annotations != null) && (annotations.length > 0)) {\n            if (annotations[0].sourceStart() == declarationSourceStart) {\n                modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n            }\n        }\n        int modifiersSourceEnd = sourceStart - 1;\n        if ((methodDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) && (((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodDeclaration)).returnType != null)) {\n            modifiersSourceEnd = ((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodDeclaration)).returnType.sourceStart() - 2;\n        }\n        org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters = methodDeclaration.typeParameters();\n        if ((typeParameters != null) && (typeParameters.length > 0)) {\n            modifiersSourceEnd = typeParameters[0].declarationSourceStart - 3;\n        }\n        if (spoon.support.compiler.jdt.JDTTreeBuilderQuery.getModifiers(methodDeclaration.modifiers).isEmpty()) {\n            modifiersSourceStart = modifiersSourceEnd + 1;\n        }\n        sourceEnd = (sourceStart + methodDeclaration.selector.length) - 1;\n        if (e instanceof spoon.reflect.code.CtStatementList) {\n            return cf.createSourcePosition(cu, bodyStart - 1, bodyEnd + 1, lineSeparatorPositions);\n        } else if (bodyStart == 0) {\n            return spoon.reflect.cu.SourcePosition.NOPOSITION;\n        } else {\n            if (bodyStart < bodyEnd) {\n                if (contents[bodyStart - 1] == '{') {\n                    bodyStart--;\n                    if (contents[bodyEnd + 1] == '}') {\n                        bodyEnd++;\n                    } else {\n                        throw new spoon.SpoonException(\"Missing body end in\\n\" + new java.lang.String(contents, sourceStart, sourceEnd - sourceStart));\n                    }\n                }\n            }\n            return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart, bodyEnd, lineSeparatorPositions);\n        }\n    }\n    return cf.createSourcePosition(cu, sourceStart, sourceEnd, lineSeparatorPositions);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "char[] contents = cr.compilationUnit.getContents()",
            "src_parent": "{\n    spoon.reflect.factory.CoreFactory cf = this.jdtTreeBuilder.getFactory().Core();\n    spoon.reflect.cu.CompilationUnit cu = this.jdtTreeBuilder.getFactory().CompilationUnit().create(new java.lang.String(this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.getFileName()));\n    org.eclipse.jdt.internal.compiler.CompilationResult cr = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult;\n    int[] lineSeparatorPositions = cr.lineSeparatorPositions;\n    char[] contents = cr.compilationUnit.getContents();\n    int sourceStart = node.sourceStart;\n    int sourceEnd = node.sourceEnd;\n    if (node instanceof org.eclipse.jdt.internal.compiler.ast.Annotation) {\n        org.eclipse.jdt.internal.compiler.ast.Annotation ann = ((org.eclipse.jdt.internal.compiler.ast.Annotation) (node));\n        int declEnd = ann.declarationSourceEnd;\n        if (declEnd > 0) {\n            sourceEnd = declEnd;\n        }\n    } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {\n        org.eclipse.jdt.internal.compiler.ast.Expression expression = ((org.eclipse.jdt.internal.compiler.ast.Expression) (node));\n        int statementEnd = expression.statementEnd;\n        if (statementEnd > 0) {\n            sourceEnd = statementEnd;\n        }\n    }\n    if (node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) {\n        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration variableDeclaration = ((org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) (node));\n        int modifiersSourceStart = variableDeclaration.modifiersSourceStart;\n        int declarationSourceStart = variableDeclaration.declarationSourceStart;\n        int declarationSourceEnd = variableDeclaration.declarationSourceEnd;\n        int declarationEnd = variableDeclaration.declarationEnd;\n        org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = variableDeclaration.annotations;\n        if ((annotations != null) && (annotations.length > 0)) {\n            if (annotations[0].sourceStart() == sourceStart) {\n                modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n            }\n        }\n        if (modifiersSourceStart == 0) {\n            modifiersSourceStart = declarationSourceStart;\n        }\n        int modifiersSourceEnd;\n        if (variableDeclaration.type != null) {\n            modifiersSourceEnd = variableDeclaration.type.sourceStart() - 2;\n        } else {\n            modifiersSourceEnd = declarationSourceStart - 1;\n        }\n        if (modifiersSourceStart > modifiersSourceEnd) {\n            modifiersSourceEnd = modifiersSourceStart - 1;\n        }\n        return cf.createDeclarationSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, lineSeparatorPositions);\n    } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {\n        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (node));\n        int declarationSourceStart = typeDeclaration.declarationSourceStart;\n        int declarationSourceEnd = typeDeclaration.declarationSourceEnd;\n        int modifiersSourceStart = typeDeclaration.modifiersSourceStart;\n        int bodyStart = typeDeclaration.bodyStart;\n        int bodyEnd = typeDeclaration.bodyEnd;\n        org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = typeDeclaration.annotations;\n        if ((annotations != null) && (annotations.length > 0)) {\n            if (annotations[0].sourceStart() == declarationSourceStart) {\n                modifiersSourceStart = findNextNonWhitespace(contents, annotations[annotations.length - 1].declarationSourceEnd + 1);\n            }\n        }\n        if (modifiersSourceStart == 0) {\n            modifiersSourceStart = declarationSourceStart;\n        }\n        int modifiersSourceEnd = findPrevNonWhitespace(contents, findPrevWhitespace(contents, findPrevNonWhitespace(contents, sourceStart - 1)));\n        if (modifiersSourceEnd < modifiersSourceStart) {\n            modifiersSourceEnd = modifiersSourceStart - 1;\n        }\n        return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart - 1, bodyEnd, lineSeparatorPositions);\n    } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) {\n        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (node));\n        int bodyStart = methodDeclaration.bodyStart;\n        int bodyEnd = methodDeclaration.bodyEnd;\n        int declarationSourceStart = methodDeclaration.declarationSourceStart;\n        int declarationSourceEnd = methodDeclaration.declarationSourceEnd;\n        int modifiersSourceStart = methodDeclaration.modifiersSourceStart;\n        if (modifiersSourceStart == 0) {\n            modifiersSourceStart = declarationSourceStart;\n        }\n        if ((node instanceof org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration) && (bodyStart == bodyEnd)) {\n            bodyEnd--;\n        }\n        org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc = methodDeclaration.javadoc;\n        if ((javadoc != null) && (javadoc.sourceEnd() > declarationSourceStart)) {\n            modifiersSourceStart = javadoc.sourceEnd() + 1;\n        }\n        org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = methodDeclaration.annotations;\n        if ((annotations != null) && (annotations.length > 0)) {\n            if (annotations[0].sourceStart() == declarationSourceStart) {\n                modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n            }\n        }\n        int modifiersSourceEnd = sourceStart - 1;\n        if ((methodDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) && (((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodDeclaration)).returnType != null)) {\n            modifiersSourceEnd = ((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodDeclaration)).returnType.sourceStart() - 2;\n        }\n        org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters = methodDeclaration.typeParameters();\n        if ((typeParameters != null) && (typeParameters.length > 0)) {\n            modifiersSourceEnd = typeParameters[0].declarationSourceStart - 3;\n        }\n        if (spoon.support.compiler.jdt.JDTTreeBuilderQuery.getModifiers(methodDeclaration.modifiers).isEmpty()) {\n            modifiersSourceStart = modifiersSourceEnd + 1;\n        }\n        sourceEnd = (sourceStart + methodDeclaration.selector.length) - 1;\n        if (e instanceof spoon.reflect.code.CtStatementList) {\n            return cf.createSourcePosition(cu, bodyStart - 1, bodyEnd + 1, lineSeparatorPositions);\n        } else if (bodyStart == 0) {\n            return spoon.reflect.cu.SourcePosition.NOPOSITION;\n        } else {\n            if (bodyStart < bodyEnd) {\n                if (contents[bodyStart - 1] == '{') {\n                    bodyStart--;\n                    if (contents[bodyEnd + 1] == '}') {\n                        bodyEnd++;\n                    } else {\n                        throw new spoon.SpoonException(\"Missing body end in\\n\" + new java.lang.String(contents, sourceStart, sourceEnd - sourceStart));\n                    }\n                }\n            }\n            return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart, bodyEnd, lineSeparatorPositions);\n        }\n    }\n    return cf.createSourcePosition(cu, sourceStart, sourceEnd, lineSeparatorPositions);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    if (node instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {\n        org.eclipse.jdt.internal.compiler.ast.Expression expression = ((org.eclipse.jdt.internal.compiler.ast.Expression) (node));\n        int statementEnd = expression.statementEnd;\n        if (statementEnd > 0) {\n            sourceEnd = statementEnd;\n        }\n    }\n}",
            "src_parent": "if (node instanceof org.eclipse.jdt.internal.compiler.ast.Annotation) {\n    org.eclipse.jdt.internal.compiler.ast.Annotation ann = ((org.eclipse.jdt.internal.compiler.ast.Annotation) (node));\n    int declEnd = ann.declarationSourceEnd;\n    if (declEnd > 0) {\n        sourceEnd = declEnd;\n    }\n} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {\n    org.eclipse.jdt.internal.compiler.ast.Expression expression = ((org.eclipse.jdt.internal.compiler.ast.Expression) (node));\n    int statementEnd = expression.statementEnd;\n    if (statementEnd > 0) {\n        sourceEnd = statementEnd;\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.eclipse.jdt.internal.compiler.ast.Annotation ann = ((org.eclipse.jdt.internal.compiler.ast.Annotation) (node))",
            "src_parent": "{\n    org.eclipse.jdt.internal.compiler.ast.Annotation ann = ((org.eclipse.jdt.internal.compiler.ast.Annotation) (node));\n    int declEnd = ann.declarationSourceEnd;\n    if (declEnd > 0) {\n        sourceEnd = declEnd;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "int declEnd = ann.declarationSourceEnd",
            "src_parent": "{\n    org.eclipse.jdt.internal.compiler.ast.Annotation ann = ((org.eclipse.jdt.internal.compiler.ast.Annotation) (node));\n    int declEnd = ann.declarationSourceEnd;\n    if (declEnd > 0) {\n        sourceEnd = declEnd;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "declEnd",
            "src_parent": "declEnd > 0",
            "src_parent_type": "BinaryOperator",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (modifiersSourceEnd < modifiersSourceStart) {\n    modifiersSourceEnd = modifiersSourceStart - 1;\n}",
            "src_parent": "{\n    org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (node));\n    int declarationSourceStart = typeDeclaration.declarationSourceStart;\n    int declarationSourceEnd = typeDeclaration.declarationSourceEnd;\n    int modifiersSourceStart = typeDeclaration.modifiersSourceStart;\n    int bodyStart = typeDeclaration.bodyStart;\n    int bodyEnd = typeDeclaration.bodyEnd;\n    org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = typeDeclaration.annotations;\n    if ((annotations != null) && (annotations.length > 0)) {\n        if (annotations[0].sourceStart() == declarationSourceStart) {\n            modifiersSourceStart = findNextNonWhitespace(contents, annotations[annotations.length - 1].declarationSourceEnd + 1);\n        }\n    }\n    if (modifiersSourceStart == 0) {\n        modifiersSourceStart = declarationSourceStart;\n    }\n    int modifiersSourceEnd = findPrevNonWhitespace(contents, findPrevWhitespace(contents, findPrevNonWhitespace(contents, sourceStart - 1)));\n    if (modifiersSourceEnd < modifiersSourceStart) {\n        modifiersSourceEnd = modifiersSourceStart - 1;\n    }\n    return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart - 1, bodyEnd, lineSeparatorPositions);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "declEnd",
            "src_parent": "sourceEnd = declEnd",
            "src_parent_type": "Assignment",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "findPrevNonWhitespace(contents, findPrevWhitespace(contents, findPrevNonWhitespace(contents, sourceStart - 1)))",
            "src_parent": "int modifiersSourceEnd = findPrevNonWhitespace(contents, findPrevWhitespace(contents, findPrevNonWhitespace(contents, sourceStart - 1)))",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if ((node instanceof org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration) && (bodyStart == bodyEnd)) {\n    bodyEnd--;\n}",
            "src_parent": "{\n    org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (node));\n    int bodyStart = methodDeclaration.bodyStart;\n    int bodyEnd = methodDeclaration.bodyEnd;\n    int declarationSourceStart = methodDeclaration.declarationSourceStart;\n    int declarationSourceEnd = methodDeclaration.declarationSourceEnd;\n    int modifiersSourceStart = methodDeclaration.modifiersSourceStart;\n    if (modifiersSourceStart == 0) {\n        modifiersSourceStart = declarationSourceStart;\n    }\n    if ((node instanceof org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration) && (bodyStart == bodyEnd)) {\n        bodyEnd--;\n    }\n    org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc = methodDeclaration.javadoc;\n    if ((javadoc != null) && (javadoc.sourceEnd() > declarationSourceStart)) {\n        modifiersSourceStart = javadoc.sourceEnd() + 1;\n    }\n    org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = methodDeclaration.annotations;\n    if ((annotations != null) && (annotations.length > 0)) {\n        if (annotations[0].sourceStart() == declarationSourceStart) {\n            modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n        }\n    }\n    int modifiersSourceEnd = sourceStart - 1;\n    if ((methodDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) && (((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodDeclaration)).returnType != null)) {\n        modifiersSourceEnd = ((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodDeclaration)).returnType.sourceStart() - 2;\n    }\n    org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters = methodDeclaration.typeParameters();\n    if ((typeParameters != null) && (typeParameters.length > 0)) {\n        modifiersSourceEnd = typeParameters[0].declarationSourceStart - 3;\n    }\n    if (spoon.support.compiler.jdt.JDTTreeBuilderQuery.getModifiers(methodDeclaration.modifiers).isEmpty()) {\n        modifiersSourceStart = modifiersSourceEnd + 1;\n    }\n    sourceEnd = (sourceStart + methodDeclaration.selector.length) - 1;\n    if (e instanceof spoon.reflect.code.CtStatementList) {\n        return cf.createSourcePosition(cu, bodyStart - 1, bodyEnd + 1, lineSeparatorPositions);\n    } else if (bodyStart == 0) {\n        return spoon.reflect.cu.SourcePosition.NOPOSITION;\n    } else {\n        if (bodyStart < bodyEnd) {\n            if (contents[bodyStart - 1] == '{') {\n                bodyStart--;\n                if (contents[bodyEnd + 1] == '}') {\n                    bodyEnd++;\n                } else {\n                    throw new spoon.SpoonException(\"Missing body end in\\n\" + new java.lang.String(contents, sourceStart, sourceEnd - sourceStart));\n                }\n            }\n        }\n        return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart, bodyEnd, lineSeparatorPositions);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "findNextNonWhitespace(contents, annotations[annotations.length - 1].declarationSourceEnd + 1)",
            "src_parent": "modifiersSourceStart = findNextNonWhitespace(contents, annotations[annotations.length - 1].declarationSourceEnd + 1)",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (bodyStart < bodyEnd) {\n    if (contents[bodyStart - 1] == '{') {\n        bodyStart--;\n        if (contents[bodyEnd + 1] == '}') {\n            bodyEnd++;\n        } else {\n            throw new spoon.SpoonException(\"Missing body end in\\n\" + new java.lang.String(contents, sourceStart, sourceEnd - sourceStart));\n        }\n    }\n}",
            "src_parent": "{\n    if (bodyStart < bodyEnd) {\n        if (contents[bodyStart - 1] == '{') {\n            bodyStart--;\n            if (contents[bodyEnd + 1] == '}') {\n                bodyEnd++;\n            } else {\n                throw new spoon.SpoonException(\"Missing body end in\\n\" + new java.lang.String(contents, sourceStart, sourceEnd - sourceStart));\n            }\n        }\n    }\n    return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart, bodyEnd, lineSeparatorPositions);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "bodyStart",
            "src_parent": "cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart, bodyEnd, lineSeparatorPositions)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "bodyEnd",
            "src_parent": "cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart, bodyEnd, lineSeparatorPositions)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult",
            "dst_parent": "org.eclipse.jdt.internal.compiler.CompilationResult cr = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult",
            "dst_parent_type": "LocalVariable",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult",
            "src_parent": "this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult.lineSeparatorPositions",
            "src_parent_type": "FieldRead",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (node instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {\n    org.eclipse.jdt.internal.compiler.ast.Expression expression = ((org.eclipse.jdt.internal.compiler.ast.Expression) (node));\n    int statementEnd = expression.statementEnd;\n    if (statementEnd > 0) {\n        sourceEnd = statementEnd;\n    }\n}",
            "dst_parent": "{\n    if (node instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {\n        org.eclipse.jdt.internal.compiler.ast.Expression expression = ((org.eclipse.jdt.internal.compiler.ast.Expression) (node));\n        int statementEnd = expression.statementEnd;\n        if (statementEnd > 0) {\n            sourceEnd = statementEnd;\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (node instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {\n    org.eclipse.jdt.internal.compiler.ast.Expression expression = ((org.eclipse.jdt.internal.compiler.ast.Expression) (node));\n    int statementEnd = expression.statementEnd;\n    if (statementEnd > 0) {\n        sourceEnd = statementEnd;\n    }\n}",
            "src_parent": "{\n    spoon.reflect.factory.CoreFactory cf = this.jdtTreeBuilder.getFactory().Core();\n    spoon.reflect.cu.CompilationUnit cu = this.jdtTreeBuilder.getFactory().CompilationUnit().create(new java.lang.String(this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.getFileName()));\n    int[] lineSeparatorPositions = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult.lineSeparatorPositions;\n    int sourceStart = node.sourceStart;\n    int sourceEnd = node.sourceEnd;\n    if (node instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {\n        if (((org.eclipse.jdt.internal.compiler.ast.Expression) (node)).statementEnd > 0) {\n            sourceEnd = ((org.eclipse.jdt.internal.compiler.ast.Expression) (node)).statementEnd;\n        }\n    }\n    if (node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) {\n        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration variableDeclaration = ((org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) (node));\n        int modifiersSourceStart = variableDeclaration.modifiersSourceStart;\n        int declarationSourceStart = variableDeclaration.declarationSourceStart;\n        int declarationSourceEnd = variableDeclaration.declarationSourceEnd;\n        int declarationEnd = variableDeclaration.declarationEnd;\n        org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = variableDeclaration.annotations;\n        if ((annotations != null) && (annotations.length > 0)) {\n            if (annotations[0].sourceStart() == sourceStart) {\n                modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n            }\n        }\n        if (modifiersSourceStart == 0) {\n            modifiersSourceStart = declarationSourceStart;\n        }\n        int modifiersSourceEnd;\n        if (variableDeclaration.type != null) {\n            modifiersSourceEnd = variableDeclaration.type.sourceStart() - 2;\n        } else {\n            modifiersSourceEnd = declarationSourceStart - 1;\n        }\n        if (modifiersSourceStart > modifiersSourceEnd) {\n            modifiersSourceEnd = modifiersSourceStart - 1;\n        }\n        return cf.createDeclarationSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, lineSeparatorPositions);\n    } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {\n        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (node));\n        int declarationSourceStart = typeDeclaration.declarationSourceStart;\n        int declarationSourceEnd = typeDeclaration.declarationSourceEnd;\n        int modifiersSourceStart = typeDeclaration.modifiersSourceStart;\n        int bodyStart = typeDeclaration.bodyStart;\n        int bodyEnd = typeDeclaration.bodyEnd;\n        org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = typeDeclaration.annotations;\n        if ((annotations != null) && (annotations.length > 0)) {\n            if (annotations[0].sourceStart() == declarationSourceStart) {\n                modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n            }\n        }\n        if (modifiersSourceStart == 0) {\n            modifiersSourceStart = declarationSourceStart;\n        }\n        int modifiersSourceEnd = sourceStart - 8;\n        return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart - 1, bodyEnd, lineSeparatorPositions);\n    } else if (node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) {\n        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (node));\n        int bodyStart = methodDeclaration.bodyStart;\n        int bodyEnd = methodDeclaration.bodyEnd;\n        int declarationSourceStart = methodDeclaration.declarationSourceStart;\n        int declarationSourceEnd = methodDeclaration.declarationSourceEnd;\n        int modifiersSourceStart = methodDeclaration.modifiersSourceStart;\n        if (modifiersSourceStart == 0) {\n            modifiersSourceStart = declarationSourceStart;\n        }\n        org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc = methodDeclaration.javadoc;\n        if ((javadoc != null) && (javadoc.sourceEnd() > declarationSourceStart)) {\n            modifiersSourceStart = javadoc.sourceEnd() + 1;\n        }\n        org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = methodDeclaration.annotations;\n        if ((annotations != null) && (annotations.length > 0)) {\n            if (annotations[0].sourceStart() == declarationSourceStart) {\n                modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;\n            }\n        }\n        int modifiersSourceEnd = sourceStart - 1;\n        if ((methodDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) && (((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodDeclaration)).returnType != null)) {\n            modifiersSourceEnd = ((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodDeclaration)).returnType.sourceStart() - 2;\n        }\n        org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters = methodDeclaration.typeParameters();\n        if ((typeParameters != null) && (typeParameters.length > 0)) {\n            modifiersSourceEnd = typeParameters[0].declarationSourceStart - 3;\n        }\n        if (spoon.support.compiler.jdt.JDTTreeBuilderQuery.getModifiers(methodDeclaration.modifiers).isEmpty()) {\n            modifiersSourceStart = modifiersSourceEnd + 1;\n        }\n        sourceEnd = (sourceStart + methodDeclaration.selector.length) - 1;\n        if (e instanceof spoon.reflect.code.CtStatementList) {\n            return cf.createSourcePosition(cu, bodyStart - 1, bodyEnd + 1, lineSeparatorPositions);\n        } else if (bodyStart == 0) {\n            return spoon.reflect.cu.SourcePosition.NOPOSITION;\n        } else {\n            return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart - 1, bodyEnd + 1, lineSeparatorPositions);\n        }\n    }\n    if (node instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {\n        org.eclipse.jdt.internal.compiler.ast.Expression expression = ((org.eclipse.jdt.internal.compiler.ast.Expression) (node));\n        int statementEnd = expression.statementEnd;\n        if (statementEnd > 0) {\n            sourceEnd = statementEnd;\n        }\n    }\n    return cf.createSourcePosition(cu, sourceStart, sourceEnd, lineSeparatorPositions);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "sourceStart",
            "dst_parent": "sourceStart - 1",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "sourceStart",
            "src_parent": "sourceStart - 8",
            "src_parent_type": "BinaryOperator",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "1",
            "dst_parent": "sourceStart - 1",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Literal",
            "operator": "MOV",
            "src": "8",
            "src_parent": "sourceStart - 8",
            "src_parent_type": "BinaryOperator",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "1",
            "dst_parent": "annotations[annotations.length - 1].declarationSourceEnd + 1",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Literal",
            "operator": "MOV",
            "src": "2",
            "src_parent": "annotations[annotations.length - 1].sourceEnd() + 2",
            "src_parent_type": "BinaryOperator",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "annotations",
            "dst_parent": "annotations[annotations.length - 1]",
            "dst_parent_type": "ArrayRead",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "annotations",
            "src_parent": "annotations[annotations.length - 1]",
            "src_parent_type": "ArrayRead",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "annotations.length - 1",
            "dst_parent": "annotations[annotations.length - 1]",
            "dst_parent_type": "ArrayRead",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "annotations.length - 1",
            "src_parent": "annotations[annotations.length - 1]",
            "src_parent_type": "ArrayRead",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "bodyStart - 1",
            "dst_parent": "contents[bodyStart - 1]",
            "dst_parent_type": "ArrayRead",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "bodyStart - 1",
            "src_parent": "cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart - 1, bodyEnd + 1, lineSeparatorPositions)",
            "src_parent_type": "Invocation",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "bodyEnd + 1",
            "dst_parent": "contents[bodyEnd + 1]",
            "dst_parent_type": "ArrayRead",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "bodyEnd + 1",
            "src_parent": "cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd, modifiersSourceStart, modifiersSourceEnd, declarationSourceStart, declarationSourceEnd, bodyStart - 1, bodyEnd + 1, lineSeparatorPositions)",
            "src_parent_type": "Invocation",
            "src_type": "BinaryOperator"
          }
        }
      ],
      "file_name": "PositionBuilder"
    }
  ],
  "id": "bears_75"
}