{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    @java.lang.Override\n    public void addConstructor(spoon.reflect.declaration.CtConstructor<?> ctConstructor) {\n        ctClass.addConstructor(ctConstructor);\n    }\n\n    @java.lang.Override\n    public void addClassReference(spoon.reflect.reference.CtTypeReference<?> typeReference) {\n        ctClass.setSuperclass(typeReference);\n    }\n}",
            "dst_parent": "new spoon.support.visitor.java.internal.TypeRuntimeBuilderContext(ctClass) {\n    @java.lang.Override\n    public void addConstructor(spoon.reflect.declaration.CtConstructor<?> ctConstructor) {\n        ctClass.addConstructor(ctConstructor);\n    }\n\n    @java.lang.Override\n    public void addClassReference(spoon.reflect.reference.CtTypeReference<?> typeReference) {\n        ctClass.setSuperclass(typeReference);\n    }\n}",
            "dst_parent_type": "NewClass",
            "dst_type": "Class",
            "operator": "UPD",
            "src": "{\n    @java.lang.Override\n    public void addConstructor(spoon.reflect.declaration.CtConstructor<?> ctConstructor) {\n        ctClass.addConstructor(ctConstructor);\n    }\n\n    @java.lang.Override\n    public void addClassReference(spoon.reflect.reference.CtTypeReference<?> typeReference) {\n        ctClass.setSuperclass(typeReference);\n    }\n}",
            "src_parent": "new spoon.support.visitor.java.internal.TypeRuntimeBuilderContext(ctClass) {\n    @java.lang.Override\n    public void addConstructor(spoon.reflect.declaration.CtConstructor<?> ctConstructor) {\n        ctClass.addConstructor(ctConstructor);\n    }\n\n    @java.lang.Override\n    public void addClassReference(spoon.reflect.reference.CtTypeReference<?> typeReference) {\n        ctClass.setSuperclass(typeReference);\n    }\n}",
            "src_parent_type": "NewClass",
            "src_type": "Class"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    @java.lang.Override\n    public void addMethod(spoon.reflect.declaration.CtMethod ctMethod) {\n        super.addMethod(ctMethod);\n        ctMethod.setBody(null);\n    }\n}",
            "dst_parent": "new spoon.support.visitor.java.internal.TypeRuntimeBuilderContext(ctInterface) {\n    @java.lang.Override\n    public void addMethod(spoon.reflect.declaration.CtMethod ctMethod) {\n        super.addMethod(ctMethod);\n        ctMethod.setBody(null);\n    }\n}",
            "dst_parent_type": "NewClass",
            "dst_type": "Class",
            "operator": "UPD",
            "src": "{\n    @java.lang.Override\n    public void addMethod(spoon.reflect.declaration.CtMethod ctMethod) {\n        super.addMethod(ctMethod);\n        ctMethod.setBody(null);\n    }\n}",
            "src_parent": "new spoon.support.visitor.java.internal.TypeRuntimeBuilderContext(ctInterface) {\n    @java.lang.Override\n    public void addMethod(spoon.reflect.declaration.CtMethod ctMethod) {\n        super.addMethod(ctMethod);\n        ctMethod.setBody(null);\n    }\n}",
            "src_parent_type": "NewClass",
            "src_type": "Class"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    @java.lang.Override\n    public void addConstructor(spoon.reflect.declaration.CtConstructor<?> ctConstructor) {\n        ctEnum.addConstructor(ctConstructor);\n    }\n\n    @java.lang.Override\n    public void addEnumValue(spoon.reflect.declaration.CtEnumValue<?> ctEnumValue) {\n        ctEnum.addEnumValue(ctEnumValue);\n    }\n}",
            "dst_parent": "new spoon.support.visitor.java.internal.TypeRuntimeBuilderContext(ctEnum) {\n    @java.lang.Override\n    public void addConstructor(spoon.reflect.declaration.CtConstructor<?> ctConstructor) {\n        ctEnum.addConstructor(ctConstructor);\n    }\n\n    @java.lang.Override\n    public void addEnumValue(spoon.reflect.declaration.CtEnumValue<?> ctEnumValue) {\n        ctEnum.addEnumValue(ctEnumValue);\n    }\n}",
            "dst_parent_type": "NewClass",
            "dst_type": "Class",
            "operator": "UPD",
            "src": "{\n    @java.lang.Override\n    public void addConstructor(spoon.reflect.declaration.CtConstructor<?> ctConstructor) {\n        ctEnum.addConstructor(ctConstructor);\n    }\n\n    @java.lang.Override\n    public void addEnumValue(spoon.reflect.declaration.CtEnumValue<?> ctEnumValue) {\n        ctEnum.addEnumValue(ctEnumValue);\n    }\n}",
            "src_parent": "new spoon.support.visitor.java.internal.TypeRuntimeBuilderContext(ctEnum) {\n    @java.lang.Override\n    public void addConstructor(spoon.reflect.declaration.CtConstructor<?> ctConstructor) {\n        ctEnum.addConstructor(ctConstructor);\n    }\n\n    @java.lang.Override\n    public void addEnumValue(spoon.reflect.declaration.CtEnumValue<?> ctEnumValue) {\n        ctEnum.addEnumValue(ctEnumValue);\n    }\n}",
            "src_parent_type": "NewClass",
            "src_type": "Class"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    @java.lang.Override\n    public void addMethod(spoon.reflect.declaration.CtMethod ctMethod) {\n        final spoon.reflect.declaration.CtField<java.lang.Object> field = factory.Core().createField();\n        field.setSimpleName(ctMethod.getSimpleName());\n        field.setModifiers(ctMethod.getModifiers());\n        field.setType(ctMethod.getType());\n        ctAnnotationType.addField(field);\n    }\n}",
            "dst_parent": "new spoon.support.visitor.java.internal.TypeRuntimeBuilderContext(ctAnnotationType) {\n    @java.lang.Override\n    public void addMethod(spoon.reflect.declaration.CtMethod ctMethod) {\n        final spoon.reflect.declaration.CtField<java.lang.Object> field = factory.Core().createField();\n        field.setSimpleName(ctMethod.getSimpleName());\n        field.setModifiers(ctMethod.getModifiers());\n        field.setType(ctMethod.getType());\n        ctAnnotationType.addField(field);\n    }\n}",
            "dst_parent_type": "NewClass",
            "dst_type": "Class",
            "operator": "UPD",
            "src": "{\n    @java.lang.Override\n    public void addMethod(spoon.reflect.declaration.CtMethod ctMethod) {\n        final spoon.reflect.declaration.CtField<java.lang.Object> field = factory.Core().createField();\n        field.setSimpleName(ctMethod.getSimpleName());\n        field.setModifiers(ctMethod.getModifiers());\n        field.setType(ctMethod.getType());\n        ctAnnotationType.addField(field);\n    }\n}",
            "src_parent": "new spoon.support.visitor.java.internal.TypeRuntimeBuilderContext(ctAnnotationType) {\n    @java.lang.Override\n    public void addMethod(spoon.reflect.declaration.CtMethod ctMethod) {\n        final spoon.reflect.declaration.CtField<java.lang.Object> field = factory.Core().createField();\n        field.setSimpleName(ctMethod.getSimpleName());\n        field.setModifiers(ctMethod.getModifiers());\n        field.setType(ctMethod.getType());\n        ctAnnotationType.addField(field);\n    }\n}",
            "src_parent_type": "NewClass",
            "src_type": "Class"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    @java.lang.Override\n    public void addClassReference(spoon.reflect.reference.CtTypeReference<?> typeReference) {\n        ctTypeReference.setSimpleName(typeReference.getSimpleName());\n        ctTypeReference.setPackage(typeReference.getPackage());\n        ctTypeReference.setDeclaringType(typeReference.getDeclaringType());\n        ctTypeReference.setActualTypeArguments(typeReference.getActualTypeArguments());\n        ctTypeReference.setAnnotations(typeReference.getAnnotations());\n    }\n\n    @java.lang.Override\n    public void addType(spoon.reflect.declaration.CtType<?> aType) {\n    }\n}",
            "dst_parent": "new spoon.support.visitor.java.internal.TypeReferenceRuntimeBuilderContext(ctTypeReference) {\n    @java.lang.Override\n    public void addClassReference(spoon.reflect.reference.CtTypeReference<?> typeReference) {\n        ctTypeReference.setSimpleName(typeReference.getSimpleName());\n        ctTypeReference.setPackage(typeReference.getPackage());\n        ctTypeReference.setDeclaringType(typeReference.getDeclaringType());\n        ctTypeReference.setActualTypeArguments(typeReference.getActualTypeArguments());\n        ctTypeReference.setAnnotations(typeReference.getAnnotations());\n    }\n\n    @java.lang.Override\n    public void addType(spoon.reflect.declaration.CtType<?> aType) {\n    }\n}",
            "dst_parent_type": "NewClass",
            "dst_type": "Class",
            "operator": "UPD",
            "src": "{\n    @java.lang.Override\n    public void addClassReference(spoon.reflect.reference.CtTypeReference<?> typeReference) {\n        ctTypeReference.setSimpleName(typeReference.getSimpleName());\n        ctTypeReference.setPackage(typeReference.getPackage());\n        ctTypeReference.setDeclaringType(typeReference.getDeclaringType());\n        ctTypeReference.setActualTypeArguments(typeReference.getActualTypeArguments());\n        ctTypeReference.setAnnotations(typeReference.getAnnotations());\n    }\n\n    @java.lang.Override\n    public void addType(spoon.reflect.declaration.CtType<?> aType) {\n    }\n}",
            "src_parent": "new spoon.support.visitor.java.internal.TypeReferenceRuntimeBuilderContext(ctTypeReference) {\n    @java.lang.Override\n    public void addClassReference(spoon.reflect.reference.CtTypeReference<?> typeReference) {\n        ctTypeReference.setSimpleName(typeReference.getSimpleName());\n        ctTypeReference.setPackage(typeReference.getPackage());\n        ctTypeReference.setDeclaringType(typeReference.getDeclaringType());\n        ctTypeReference.setActualTypeArguments(typeReference.getActualTypeArguments());\n        ctTypeReference.setAnnotations(typeReference.getAnnotations());\n    }\n\n    @java.lang.Override\n    public void addType(spoon.reflect.declaration.CtType<?> aType) {\n    }\n}",
            "src_parent_type": "NewClass",
            "src_type": "Class"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    @java.lang.Override\n    public void addClassReference(spoon.reflect.reference.CtTypeReference<?> typeReference) {\n        if (typeArray.getSimpleName().equals(typeReference.getSimpleName())) {\n            arrayTypeReference.setComponentType(typeReference);\n        } else {\n            arrayTypeReference.setDeclaringType(typeReference);\n        }\n    }\n\n    @java.lang.Override\n    public void addArrayReference(spoon.reflect.reference.CtArrayTypeReference<?> typeReference) {\n        arrayTypeReference.setComponentType(typeReference);\n    }\n}",
            "dst_parent": "new spoon.support.visitor.java.internal.TypeReferenceRuntimeBuilderContext(arrayTypeReference) {\n    @java.lang.Override\n    public void addClassReference(spoon.reflect.reference.CtTypeReference<?> typeReference) {\n        if (typeArray.getSimpleName().equals(typeReference.getSimpleName())) {\n            arrayTypeReference.setComponentType(typeReference);\n        } else {\n            arrayTypeReference.setDeclaringType(typeReference);\n        }\n    }\n\n    @java.lang.Override\n    public void addArrayReference(spoon.reflect.reference.CtArrayTypeReference<?> typeReference) {\n        arrayTypeReference.setComponentType(typeReference);\n    }\n}",
            "dst_parent_type": "NewClass",
            "dst_type": "Class",
            "operator": "UPD",
            "src": "{\n    @java.lang.Override\n    public void addClassReference(spoon.reflect.reference.CtTypeReference<?> typeReference) {\n        if (typeArray.getSimpleName().equals(typeReference.getSimpleName())) {\n            arrayTypeReference.setComponentType(typeReference);\n        } else {\n            arrayTypeReference.setDeclaringType(typeReference);\n        }\n    }\n\n    @java.lang.Override\n    public void addArrayReference(spoon.reflect.reference.CtArrayTypeReference<?> typeReference) {\n        arrayTypeReference.setComponentType(typeReference);\n    }\n}",
            "src_parent": "new spoon.support.visitor.java.internal.TypeReferenceRuntimeBuilderContext(arrayTypeReference) {\n    @java.lang.Override\n    public void addClassReference(spoon.reflect.reference.CtTypeReference<?> typeReference) {\n        if (typeArray.getSimpleName().equals(typeReference.getSimpleName())) {\n            arrayTypeReference.setComponentType(typeReference);\n        } else {\n            arrayTypeReference.setDeclaringType(typeReference);\n        }\n    }\n\n    @java.lang.Override\n    public void addArrayReference(spoon.reflect.reference.CtArrayTypeReference<?> typeReference) {\n        arrayTypeReference.setComponentType(typeReference);\n    }\n}",
            "src_parent_type": "NewClass",
            "src_type": "Class"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "new spoon.support.visitor.java.internal.AnnotationRuntimeBuilderContext(ctAnnotation)",
            "src_parent": "enter(new spoon.support.visitor.java.internal.AnnotationRuntimeBuilderContext(ctAnnotation))",
            "src_parent_type": "Invocation",
            "src_type": "ConstructorCall"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "VE: Modifiers_Parameter",
            "src_parent": "final java.lang.annotation.Annotation annotation",
            "src_parent_type": "Parameter",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "new spoon.support.visitor.java.internal.AnnotationRuntimeBuilderContext(ctAnnotation) {\n    @java.lang.Override\n    public void addMethod(spoon.reflect.declaration.CtMethod ctMethod) {\n        try {\n            java.lang.Object value = annotation.getClass().getMethod(ctMethod.getSimpleName()).invoke(annotation);\n            ctAnnotation.addValue(ctMethod.getSimpleName(), value);\n        } catch (java.lang.Exception ignore) {\n            ctAnnotation.addValue(ctMethod.getSimpleName(), \"\");\n        }\n    }\n}",
            "src_parent": "enter(new spoon.support.visitor.java.internal.AnnotationRuntimeBuilderContext(ctAnnotation) {\n    @java.lang.Override\n    public void addMethod(spoon.reflect.declaration.CtMethod ctMethod) {\n        try {\n            java.lang.Object value = annotation.getClass().getMethod(ctMethod.getSimpleName()).invoke(annotation);\n            ctAnnotation.addValue(ctMethod.getSimpleName(), value);\n        } catch (java.lang.Exception ignore) {\n            ctAnnotation.addValue(ctMethod.getSimpleName(), \"\");\n        }\n    }\n})",
            "src_parent_type": "Invocation",
            "src_type": "NewClass"
          }
        }
      ],
      "file_name": "JavaReflectionTreeBuilder"
    }
  ],
  "id": "bears_65"
}