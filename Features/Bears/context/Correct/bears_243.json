{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Constructor",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "gumtree.spoon.diff.ActionClassifier actionClassifier = new gumtree.spoon.diff.ActionClassifier(matcher.getMappingsAsSet(), actionGenerator.getActions())",
            "src_parent": "{\n    final com.github.gumtreediff.matchers.MappingStore mappingsComp = new com.github.gumtreediff.matchers.MappingStore();\n    final com.github.gumtreediff.matchers.Matcher matcher = new com.github.gumtreediff.matchers.CompositeMatchers.ClassicGumtree(rootSpoonLeft, rootSpoonRight, mappingsComp);\n    matcher.match();\n    final com.github.gumtreediff.actions.ActionGenerator actionGenerator = new com.github.gumtreediff.actions.ActionGenerator(rootSpoonLeft, rootSpoonRight, matcher.getMappings());\n    actionGenerator.generate();\n    gumtree.spoon.diff.ActionClassifier actionClassifier = new gumtree.spoon.diff.ActionClassifier(matcher.getMappingsAsSet(), actionGenerator.getActions());\n    this.rootOperations = convertToSpoon(actionClassifier.getRootActions());\n    this.allOperations = convertToSpoon(actionGenerator.getActions());\n    this._mappingsComp = mappingsComp;\n    this.context = context;\n    for (int i = 0; i < this.getAllOperations().size(); i++) {\n        gumtree.spoon.diff.operations.Operation operation = this.getAllOperations().get(i);\n        if (operation instanceof gumtree.spoon.diff.operations.MoveOperation) {\n            operation.getSrcNode().putMetadata(\"isMoved\", true);\n            operation.getDstNode().putMetadata(\"isMoved\", true);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "actionClassifier",
            "src_parent": "actionClassifier.getRootActions()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "this.allOperations = convertToSpoon(actionGenerator.getActions())",
            "dst_parent": "{\n    final com.github.gumtreediff.matchers.MappingStore mappingsComp = new com.github.gumtreediff.matchers.MappingStore();\n    final com.github.gumtreediff.matchers.Matcher matcher = new com.github.gumtreediff.matchers.CompositeMatchers.ClassicGumtree(rootSpoonLeft, rootSpoonRight, mappingsComp);\n    matcher.match();\n    final com.github.gumtreediff.actions.ActionGenerator actionGenerator = new com.github.gumtreediff.actions.ActionGenerator(rootSpoonLeft, rootSpoonRight, matcher.getMappings());\n    actionGenerator.generate();\n    gumtree.spoon.diff.ActionClassifier actionClassifier = new gumtree.spoon.diff.ActionClassifier(matcher.getMappingsAsSet(), actionGenerator.getActions());\n    this.rootOperations = convertToSpoon(actionClassifier.getRootActions());\n    this.allOperations = convertToSpoon(actionGenerator.getActions());\n    this._mappingsComp = mappingsComp;\n    this.context = context;\n    for (int i = 0; i < this.getAllOperations().size(); i++) {\n        gumtree.spoon.diff.operations.Operation operation = this.getAllOperations().get(i);\n        if (operation instanceof gumtree.spoon.diff.operations.MoveOperation) {\n            operation.getSrcNode().putMetadata(\"isMoved\", true);\n            operation.getDstNode().putMetadata(\"isMoved\", true);\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "this.allOperations = convertToSpoon(actionGenerator.getActions())",
            "src_parent": "{\n    final com.github.gumtreediff.matchers.MappingStore mappingsComp = new com.github.gumtreediff.matchers.MappingStore();\n    final com.github.gumtreediff.matchers.Matcher matcher = new com.github.gumtreediff.matchers.CompositeMatchers.ClassicGumtree(rootSpoonLeft, rootSpoonRight, mappingsComp);\n    matcher.match();\n    final com.github.gumtreediff.actions.ActionGenerator actionGenerator = new com.github.gumtreediff.actions.ActionGenerator(rootSpoonLeft, rootSpoonRight, matcher.getMappings());\n    actionGenerator.generate();\n    this.allOperations = convertToSpoon(actionGenerator.getActions());\n    this.rootOperations = convertToSpoon(new gumtree.spoon.diff.ActionClassifier(matcher.getMappingsAsSet(), actionGenerator.getActions()).getRootActions());\n    this._mappingsComp = mappingsComp;\n    this.context = context;\n    for (int i = 0; i < this.getAllOperations().size(); i++) {\n        gumtree.spoon.diff.operations.Operation operation = this.getAllOperations().get(i);\n        if (operation instanceof gumtree.spoon.diff.operations.MoveOperation) {\n            operation.getSrcNode().putMetadata(\"isMoved\", true);\n            operation.getDstNode().putMetadata(\"isMoved\", true);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "new gumtree.spoon.diff.ActionClassifier(matcher.getMappingsAsSet(), actionGenerator.getActions())",
            "dst_parent": "gumtree.spoon.diff.ActionClassifier actionClassifier = new gumtree.spoon.diff.ActionClassifier(matcher.getMappingsAsSet(), actionGenerator.getActions())",
            "dst_parent_type": "LocalVariable",
            "dst_type": "ConstructorCall",
            "operator": "MOV",
            "src": "new gumtree.spoon.diff.ActionClassifier(matcher.getMappingsAsSet(), actionGenerator.getActions())",
            "src_parent": "new gumtree.spoon.diff.ActionClassifier(matcher.getMappingsAsSet(), actionGenerator.getActions()).getRootActions()",
            "src_parent_type": "Invocation",
            "src_type": "ConstructorCall"
          }
        }
      ],
      "file_name": "DiffImpl"
    }
  ],
  "id": "bears_243"
}