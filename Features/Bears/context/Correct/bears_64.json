{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "getVisitedSet().remove(lastResolvedSuperclass.getQualifiedName())",
            "src_parent": "{\n    final java.lang.String typeQualifiedName = typeRef.getQualifiedName();\n    java.util.List<spoon.reflect.reference.CtTypeReference<?>> args = typeToArguments.get(typeQualifiedName);\n    if (args != null) {\n        return args;\n    }\n    spoon.reflect.reference.CtTypeReference<?> enclosingTypeRef = getEnclosingType(typeRef);\n    if (enclosingTypeRef != null) {\n        if (enclosingClassTypingContext == null) {\n            return null;\n        }\n        if (enclosingClassTypingContext.resolveActualTypeArgumentsOf(enclosingTypeRef) == null) {\n            return null;\n        }\n    }\n    if (lastResolvedSuperclass == null) {\n        return null;\n    }\n    final spoon.support.visitor.ClassTypingContext.HierarchyListener listener = new spoon.support.visitor.ClassTypingContext.HierarchyListener(getVisitedSet());\n    getVisitedSet().remove(lastResolvedSuperclass.getQualifiedName());\n    ((spoon.reflect.declaration.CtElement) (lastResolvedSuperclass)).map(new spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction().includingSelf(false).returnTypeReferences(true).setListener(listener)).forEach(new spoon.reflect.visitor.chain.CtConsumer<spoon.reflect.reference.CtTypeReference<?>>() {\n        @java.lang.Override\n        public void accept(spoon.reflect.reference.CtTypeReference<?> typeRef) {\n            java.lang.String superTypeQualifiedName = typeRef.getQualifiedName();\n            java.util.List<spoon.reflect.reference.CtTypeReference<?>> actualTypeArguments = typeRef.getActualTypeArguments();\n            if (actualTypeArguments.isEmpty()) {\n                java.util.List<spoon.reflect.declaration.CtTypeParameter> typeParams;\n                try {\n                    spoon.reflect.declaration.CtType<?> type = typeRef.getTypeDeclaration();\n                    typeParams = type.getFormalCtTypeParameters();\n                } catch (final spoon.support.SpoonClassNotFoundException e) {\n                    if (typeRef.getFactory().getEnvironment().getNoClasspath()) {\n                        typeParams = java.util.Collections.emptyList();\n                    } else {\n                        throw e;\n                    }\n                }\n                if (typeParams.size() > 0) {\n                    actualTypeArguments = new java.util.ArrayList<>(typeParams.size());\n                    for (spoon.reflect.declaration.CtTypeParameter typeParam : typeParams) {\n                        actualTypeArguments.add(typeParam.getTypeErasure());\n                    }\n                }\n            }\n            java.util.List<spoon.reflect.reference.CtTypeReference<?>> superTypeActualTypeArgumentsResolvedFromSubType = resolveTypeParameters(actualTypeArguments);\n            typeToArguments.put(superTypeQualifiedName, superTypeActualTypeArgumentsResolvedFromSubType);\n            if (typeQualifiedName.equals(superTypeQualifiedName)) {\n                listener.foundArguments = superTypeActualTypeArgumentsResolvedFromSubType;\n            }\n        }\n    });\n    if (listener.foundArguments == null) {\n        lastResolvedSuperclass = null;\n    }\n    return listener.foundArguments;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (listener.foundArguments == null) {\n    lastResolvedSuperclass = null;\n}",
            "src_parent": "{\n    final java.lang.String typeQualifiedName = typeRef.getQualifiedName();\n    java.util.List<spoon.reflect.reference.CtTypeReference<?>> args = typeToArguments.get(typeQualifiedName);\n    if (args != null) {\n        return args;\n    }\n    spoon.reflect.reference.CtTypeReference<?> enclosingTypeRef = getEnclosingType(typeRef);\n    if (enclosingTypeRef != null) {\n        if (enclosingClassTypingContext == null) {\n            return null;\n        }\n        if (enclosingClassTypingContext.resolveActualTypeArgumentsOf(enclosingTypeRef) == null) {\n            return null;\n        }\n    }\n    if (lastResolvedSuperclass == null) {\n        return null;\n    }\n    final spoon.support.visitor.ClassTypingContext.HierarchyListener listener = new spoon.support.visitor.ClassTypingContext.HierarchyListener(getVisitedSet());\n    getVisitedSet().remove(lastResolvedSuperclass.getQualifiedName());\n    ((spoon.reflect.declaration.CtElement) (lastResolvedSuperclass)).map(new spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction().includingSelf(false).returnTypeReferences(true).setListener(listener)).forEach(new spoon.reflect.visitor.chain.CtConsumer<spoon.reflect.reference.CtTypeReference<?>>() {\n        @java.lang.Override\n        public void accept(spoon.reflect.reference.CtTypeReference<?> typeRef) {\n            java.lang.String superTypeQualifiedName = typeRef.getQualifiedName();\n            java.util.List<spoon.reflect.reference.CtTypeReference<?>> actualTypeArguments = typeRef.getActualTypeArguments();\n            if (actualTypeArguments.isEmpty()) {\n                java.util.List<spoon.reflect.declaration.CtTypeParameter> typeParams;\n                try {\n                    spoon.reflect.declaration.CtType<?> type = typeRef.getTypeDeclaration();\n                    typeParams = type.getFormalCtTypeParameters();\n                } catch (final spoon.support.SpoonClassNotFoundException e) {\n                    if (typeRef.getFactory().getEnvironment().getNoClasspath()) {\n                        typeParams = java.util.Collections.emptyList();\n                    } else {\n                        throw e;\n                    }\n                }\n                if (typeParams.size() > 0) {\n                    actualTypeArguments = new java.util.ArrayList<>(typeParams.size());\n                    for (spoon.reflect.declaration.CtTypeParameter typeParam : typeParams) {\n                        actualTypeArguments.add(typeParam.getTypeErasure());\n                    }\n                }\n            }\n            java.util.List<spoon.reflect.reference.CtTypeReference<?>> superTypeActualTypeArgumentsResolvedFromSubType = resolveTypeParameters(actualTypeArguments);\n            typeToArguments.put(superTypeQualifiedName, superTypeActualTypeArgumentsResolvedFromSubType);\n            if (typeQualifiedName.equals(superTypeQualifiedName)) {\n                listener.foundArguments = superTypeActualTypeArgumentsResolvedFromSubType;\n            }\n        }\n    });\n    if (listener.foundArguments == null) {\n        lastResolvedSuperclass = null;\n    }\n    return listener.foundArguments;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.util.List<spoon.reflect.reference.CtTypeReference<?>> actualTypeArguments = typeRef.getActualTypeArguments()",
            "src_parent": "{\n    java.lang.String superTypeQualifiedName = typeRef.getQualifiedName();\n    java.util.List<spoon.reflect.reference.CtTypeReference<?>> actualTypeArguments = typeRef.getActualTypeArguments();\n    if (actualTypeArguments.isEmpty()) {\n        java.util.List<spoon.reflect.declaration.CtTypeParameter> typeParams;\n        try {\n            spoon.reflect.declaration.CtType<?> type = typeRef.getTypeDeclaration();\n            typeParams = type.getFormalCtTypeParameters();\n        } catch (final spoon.support.SpoonClassNotFoundException e) {\n            if (typeRef.getFactory().getEnvironment().getNoClasspath()) {\n                typeParams = java.util.Collections.emptyList();\n            } else {\n                throw e;\n            }\n        }\n        if (typeParams.size() > 0) {\n            actualTypeArguments = new java.util.ArrayList<>(typeParams.size());\n            for (spoon.reflect.declaration.CtTypeParameter typeParam : typeParams) {\n                actualTypeArguments.add(typeParam.getTypeErasure());\n            }\n        }\n    }\n    java.util.List<spoon.reflect.reference.CtTypeReference<?>> superTypeActualTypeArgumentsResolvedFromSubType = resolveTypeParameters(actualTypeArguments);\n    typeToArguments.put(superTypeQualifiedName, superTypeActualTypeArgumentsResolvedFromSubType);\n    if (typeQualifiedName.equals(superTypeQualifiedName)) {\n        listener.foundArguments = superTypeActualTypeArgumentsResolvedFromSubType;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (actualTypeArguments.isEmpty()) {\n    java.util.List<spoon.reflect.declaration.CtTypeParameter> typeParams;\n    try {\n        spoon.reflect.declaration.CtType<?> type = typeRef.getTypeDeclaration();\n        typeParams = type.getFormalCtTypeParameters();\n    } catch (final spoon.support.SpoonClassNotFoundException e) {\n        if (typeRef.getFactory().getEnvironment().getNoClasspath()) {\n            typeParams = java.util.Collections.emptyList();\n        } else {\n            throw e;\n        }\n    }\n    if (typeParams.size() > 0) {\n        actualTypeArguments = new java.util.ArrayList<>(typeParams.size());\n        for (spoon.reflect.declaration.CtTypeParameter typeParam : typeParams) {\n            actualTypeArguments.add(typeParam.getTypeErasure());\n        }\n    }\n}",
            "src_parent": "{\n    java.lang.String superTypeQualifiedName = typeRef.getQualifiedName();\n    java.util.List<spoon.reflect.reference.CtTypeReference<?>> actualTypeArguments = typeRef.getActualTypeArguments();\n    if (actualTypeArguments.isEmpty()) {\n        java.util.List<spoon.reflect.declaration.CtTypeParameter> typeParams;\n        try {\n            spoon.reflect.declaration.CtType<?> type = typeRef.getTypeDeclaration();\n            typeParams = type.getFormalCtTypeParameters();\n        } catch (final spoon.support.SpoonClassNotFoundException e) {\n            if (typeRef.getFactory().getEnvironment().getNoClasspath()) {\n                typeParams = java.util.Collections.emptyList();\n            } else {\n                throw e;\n            }\n        }\n        if (typeParams.size() > 0) {\n            actualTypeArguments = new java.util.ArrayList<>(typeParams.size());\n            for (spoon.reflect.declaration.CtTypeParameter typeParam : typeParams) {\n                actualTypeArguments.add(typeParam.getTypeErasure());\n            }\n        }\n    }\n    java.util.List<spoon.reflect.reference.CtTypeReference<?>> superTypeActualTypeArgumentsResolvedFromSubType = resolveTypeParameters(actualTypeArguments);\n    typeToArguments.put(superTypeQualifiedName, superTypeActualTypeArgumentsResolvedFromSubType);\n    if (typeQualifiedName.equals(superTypeQualifiedName)) {\n        listener.foundArguments = superTypeActualTypeArgumentsResolvedFromSubType;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "actualTypeArguments",
            "src_parent": "resolveTypeParameters(actualTypeArguments)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (isClass) {\n    if (foundArguments != null) {\n        return spoon.reflect.visitor.chain.ScanningMode.SKIP_ALL;\n    }\n    lastResolvedSuperclass = typeRef;\n}",
            "dst_parent": "{\n    if (isClass) {\n        if (foundArguments != null) {\n            return spoon.reflect.visitor.chain.ScanningMode.SKIP_ALL;\n        }\n        lastResolvedSuperclass = typeRef;\n    }\n    spoon.reflect.visitor.chain.ScanningMode mode = super.enter(typeRef);\n    if (mode == spoon.reflect.visitor.chain.ScanningMode.SKIP_ALL) {\n        return mode;\n    }\n    return spoon.reflect.visitor.chain.ScanningMode.NORMAL;\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (isClass) {\n    if (foundArguments != null) {\n        return spoon.reflect.visitor.chain.ScanningMode.SKIP_ALL;\n    }\n    lastResolvedSuperclass = typeRef;\n}",
            "src_parent": "{\n    spoon.reflect.visitor.chain.ScanningMode mode = super.enter(typeRef);\n    if (mode == spoon.reflect.visitor.chain.ScanningMode.SKIP_ALL) {\n        return mode;\n    }\n    if (isClass) {\n        if (foundArguments != null) {\n            return spoon.reflect.visitor.chain.ScanningMode.SKIP_ALL;\n        }\n        lastResolvedSuperclass = typeRef;\n    }\n    return spoon.reflect.visitor.chain.ScanningMode.NORMAL;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "typeRef.getActualTypeArguments()",
            "dst_parent": "java.util.List<spoon.reflect.reference.CtTypeReference<?>> actualTypeArguments = typeRef.getActualTypeArguments()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "typeRef.getActualTypeArguments()",
            "src_parent": "resolveTypeParameters(typeRef.getActualTypeArguments())",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "ClassTypingContext"
    }
  ],
  "id": "bears_64"
}