{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "parentExec",
            "dst_parent": "parentExec.getExecutableDeclaration()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "((spoon.reflect.reference.CtExecutableReference) (parent))",
            "src_parent": "((spoon.reflect.reference.CtExecutableReference) (parent)).getExecutableDeclaration()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (parent instanceof spoon.reflect.reference.CtExecutableReference) {\n    spoon.reflect.reference.CtExecutableReference parentExec = ((spoon.reflect.reference.CtExecutableReference) (parent));\n    if (!parentExec.getDeclaringType().equals(e)) {\n        spoon.reflect.declaration.CtElement parent2 = parentExec.getExecutableDeclaration();\n        if (parent2 instanceof spoon.reflect.declaration.CtMethod) {\n            e = parent2;\n        } else {\n            e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n        }\n    } else {\n        e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n    }\n} else {\n    e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n}",
            "src_parent": "{\n    if (!isParentInitialized()) {\n        return null;\n    }\n    spoon.reflect.declaration.CtElement e = this;\n    spoon.reflect.declaration.CtElement parent = getParent();\n    if (parent instanceof spoon.reflect.reference.CtTypeReference) {\n        if (parent.isParentInitialized() == false) {\n            return null;\n        }\n        parent = parent.getParent();\n    }\n    if (parent instanceof spoon.reflect.reference.CtExecutableReference) {\n        spoon.reflect.reference.CtExecutableReference parentExec = ((spoon.reflect.reference.CtExecutableReference) (parent));\n        if (!parentExec.getDeclaringType().equals(e)) {\n            spoon.reflect.declaration.CtElement parent2 = parentExec.getExecutableDeclaration();\n            if (parent2 instanceof spoon.reflect.declaration.CtMethod) {\n                e = parent2;\n            } else {\n                e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n            }\n        } else {\n            e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n        }\n    } else {\n        e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n    }\n    while (e != null) {\n        spoon.reflect.declaration.CtTypeParameter result = findTypeParamDeclaration(((spoon.reflect.declaration.CtFormalTypeDeclarer) (e)), this.getSimpleName());\n        if (result != null) {\n            return result;\n        }\n        e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n    } \n    return null;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "!parentExec.getDeclaringType().equals(e)",
            "src_parent": "if (!parentExec.getDeclaringType().equals(e)) {\n    spoon.reflect.declaration.CtElement parent2 = parentExec.getExecutableDeclaration();\n    if (parent2 instanceof spoon.reflect.declaration.CtMethod) {\n        e = parent2;\n    } else {\n        e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n    }\n} else {\n    e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n}",
            "src_parent_type": "If",
            "src_type": "UnaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "parent instanceof spoon.reflect.reference.CtExecutableReference",
            "dst_parent": "if (parent instanceof spoon.reflect.reference.CtExecutableReference) {\n    spoon.reflect.reference.CtExecutableReference parentExec = ((spoon.reflect.reference.CtExecutableReference) (parent));\n    if (!parentExec.getDeclaringType().equals(e)) {\n        spoon.reflect.declaration.CtElement parent2 = parentExec.getExecutableDeclaration();\n        if (parent2 instanceof spoon.reflect.declaration.CtMethod) {\n            e = parent2;\n        } else {\n            e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n        }\n    } else {\n        e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n    }\n} else {\n    e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "parent instanceof spoon.reflect.reference.CtExecutableReference",
            "src_parent": "if (parent instanceof spoon.reflect.reference.CtExecutableReference) {\n    spoon.reflect.declaration.CtElement parent2 = ((spoon.reflect.reference.CtExecutableReference) (parent)).getExecutableDeclaration();\n    if (parent2 instanceof spoon.reflect.declaration.CtMethod) {\n        e = parent2;\n    } else {\n        e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n    }\n} else {\n    e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (!parentExec.getDeclaringType().equals(e)) {\n    spoon.reflect.declaration.CtElement parent2 = parentExec.getExecutableDeclaration();\n    if (parent2 instanceof spoon.reflect.declaration.CtMethod) {\n        e = parent2;\n    } else {\n        e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n    }\n} else {\n    e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n}",
            "dst_parent": "{\n    spoon.reflect.reference.CtExecutableReference parentExec = ((spoon.reflect.reference.CtExecutableReference) (parent));\n    if (!parentExec.getDeclaringType().equals(e)) {\n        spoon.reflect.declaration.CtElement parent2 = parentExec.getExecutableDeclaration();\n        if (parent2 instanceof spoon.reflect.declaration.CtMethod) {\n            e = parent2;\n        } else {\n            e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n        }\n    } else {\n        e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (parent instanceof spoon.reflect.reference.CtExecutableReference) {\n    spoon.reflect.declaration.CtElement parent2 = ((spoon.reflect.reference.CtExecutableReference) (parent)).getExecutableDeclaration();\n    if (parent2 instanceof spoon.reflect.declaration.CtMethod) {\n        e = parent2;\n    } else {\n        e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n    }\n} else {\n    e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n}",
            "src_parent": "{\n    if (!isParentInitialized()) {\n        return null;\n    }\n    spoon.reflect.declaration.CtElement e = this;\n    spoon.reflect.declaration.CtElement parent = getParent();\n    if (parent instanceof spoon.reflect.reference.CtTypeReference) {\n        if (parent.isParentInitialized() == false) {\n            return null;\n        }\n        parent = parent.getParent();\n    }\n    if (parent instanceof spoon.reflect.reference.CtExecutableReference) {\n        spoon.reflect.declaration.CtElement parent2 = ((spoon.reflect.reference.CtExecutableReference) (parent)).getExecutableDeclaration();\n        if (parent2 instanceof spoon.reflect.declaration.CtMethod) {\n            e = parent2;\n        } else {\n            e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n        }\n    } else {\n        e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n    }\n    while (e != null) {\n        spoon.reflect.declaration.CtTypeParameter result = findTypeParamDeclaration(((spoon.reflect.declaration.CtFormalTypeDeclarer) (e)), this.getSimpleName());\n        if (result != null) {\n            return result;\n        }\n        e = e.getParent(spoon.reflect.declaration.CtFormalTypeDeclarer.class);\n    } \n    return null;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "CtTypeParameterReferenceImpl"
    }
  ],
  "id": "bears_81"
}