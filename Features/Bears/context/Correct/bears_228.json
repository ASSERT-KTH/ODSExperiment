{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "stripTimeComponent(date)",
            "dst_parent": "stripTimeComponent(date).equals(stripTimeComponent(previousDate))",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "session.getSubmissionActions().getCurrentEncounter()",
            "src_parent": "session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date)",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "date",
            "dst_parent": "stripTimeComponent(date)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "session",
            "src_parent": "session.getSubmissionActions()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "previousDate",
            "dst_parent": "stripTimeComponent(previousDate)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "date",
            "src_parent": "session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if ((session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime() != null) && (!session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime().equals(date))) {\n    session.getContext().setPreviousEncounterDate(new java.util.Date(session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime().getTime()));\n}",
            "src_parent": "{\n    java.util.Date date = ((java.util.Date) (dateWidget.getValue(session.getContext(), submission)));\n    if ((session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime() != null) && (!session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime().equals(date))) {\n        session.getContext().setPreviousEncounterDate(new java.util.Date(session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime().getTime()));\n    }\n    session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private boolean hasTimeComponent(java.util.Date date) {\n    return !new org.joda.time.DateMidnight(date).toDate().equals(date);\n}",
            "src_parent": "public class EncounterDetailSubmissionElement implements org.openmrs.module.htmlformentry.action.FormSubmissionControllerAction , org.openmrs.module.htmlformentry.element.HtmlGeneratorElement {\n    protected final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(getClass());\n\n    private java.lang.String id;\n\n    private org.openmrs.module.htmlformentry.widget.DateWidget dateWidget;\n\n    private org.openmrs.module.htmlformentry.widget.ErrorWidget dateErrorWidget;\n\n    private org.openmrs.module.htmlformentry.widget.TimeWidget timeWidget;\n\n    private org.openmrs.module.htmlformentry.widget.ErrorWidget timeErrorWidget;\n\n    private org.openmrs.module.htmlformentry.widget.SingleOptionWidget providerWidget;\n\n    private org.openmrs.module.htmlformentry.widget.ErrorWidget providerErrorWidget;\n\n    private org.openmrs.module.htmlformentry.widget.SingleOptionWidget locationWidget;\n\n    private org.openmrs.module.htmlformentry.widget.ErrorWidget locationErrorWidget;\n\n    private org.openmrs.module.htmlformentry.widget.ToggleWidget toggleWidget;\n\n    private org.openmrs.module.htmlformentry.widget.CheckboxWidget voidWidget;\n\n    private org.openmrs.module.htmlformentry.widget.ErrorWidget voidErrorWidget;\n\n    private org.openmrs.module.htmlformentry.widget.EncounterTypeWidget encounterTypeWidget;\n\n    private org.openmrs.module.htmlformentry.widget.ErrorWidget encounterTypeErrorWidget;\n\n    boolean locationRequired = true;\n\n    boolean providerRequired = true;\n\n    private org.openmrs.module.htmlformentry.MetadataMappingResolver getMetadataMappingResolver() {\n        return org.openmrs.api.context.Context.getRegisteredComponent(\"metadataMappingResolver\", org.openmrs.module.htmlformentry.MetadataMappingResolver.class);\n    }\n\n    public EncounterDetailSubmissionElement(org.openmrs.module.htmlformentry.FormEntryContext context, java.util.Map<java.lang.String, java.lang.Object> parameters) {\n        if (java.lang.Boolean.TRUE.equals(parameters.get(\"date\"))) {\n            dateWidget = new org.openmrs.module.htmlformentry.widget.DateWidget();\n            dateErrorWidget = new org.openmrs.module.htmlformentry.widget.ErrorWidget();\n            if (context.getExistingEncounter() != null) {\n                dateWidget.setInitialValue(context.getExistingEncounter().getEncounterDatetime());\n            } else if (parameters.get(\"defaultDate\") != null) {\n                dateWidget.setInitialValue(parameters.get(\"defaultDate\"));\n            }\n            if ((parameters.get(\"disallowMultipleEncountersOnDate\") != null) && org.springframework.util.StringUtils.hasText(((java.lang.String) (parameters.get(\"disallowMultipleEncountersOnDate\"))))) {\n                dateWidget.setOnChangeFunction((\"existingEncounterOnDate(this, '\" + parameters.get(\"disallowMultipleEncountersOnDate\")) + \"') \");\n            }\n            if (\"true\".equals(parameters.get(\"showTime\"))) {\n                timeWidget = new org.openmrs.module.htmlformentry.widget.TimeWidget();\n                timeErrorWidget = new org.openmrs.module.htmlformentry.widget.ErrorWidget();\n                if (context.getExistingEncounter() != null) {\n                    timeWidget.setInitialValue(context.getExistingEncounter().getEncounterDatetime());\n                } else if (parameters.get(\"defaultDate\") != null) {\n                    timeWidget.setInitialValue(parameters.get(\"defaultDate\"));\n                }\n                if (\"true\".equals(parameters.get(\"hideSeconds\"))) {\n                    timeWidget.setHideSeconds(true);\n                }\n                context.registerWidget(timeWidget);\n                context.registerErrorWidget(timeWidget, timeErrorWidget);\n            }\n            context.registerWidget(dateWidget);\n            context.registerErrorWidget(dateWidget, dateErrorWidget);\n            if (\"hidden\".equals(parameters.get(\"widget\"))) {\n                dateWidget.setHidden(true);\n                if (timeWidget != null) {\n                    timeWidget.setHidden(true);\n                }\n            }\n        }\n        if (java.lang.Boolean.TRUE.equals(parameters.get(\"provider\"))) {\n            if (\"autocomplete\".equals(parameters.get(\"type\"))) {\n                providerWidget = new org.openmrs.module.htmlformentry.widget.AutocompleteWidget(org.openmrs.Person.class);\n            } else {\n                providerWidget = new org.openmrs.module.htmlformentry.widget.DropdownWidget();\n            }\n            providerErrorWidget = new org.openmrs.module.htmlformentry.widget.ErrorWidget();\n            java.util.List<org.openmrs.module.htmlformentry.widget.Option> providerOptions = new java.util.ArrayList<org.openmrs.module.htmlformentry.widget.Option>();\n            java.lang.String personsParam = ((java.lang.String) (parameters.get(\"persons\")));\n            if (personsParam != null) {\n                for (java.lang.String s : personsParam.split(\",\")) {\n                    org.openmrs.Person p = org.openmrs.module.htmlformentry.HtmlFormEntryUtil.getPerson(s);\n                    if (p == null) {\n                        throw new java.lang.RuntimeException(\"Cannot find Person: \" + s);\n                    }\n                    java.lang.String label = org.apache.commons.lang.StringEscapeUtils.escapeHtml(p.getPersonName().getFullName());\n                    providerOptions.add(new org.openmrs.module.htmlformentry.widget.Option(label, p.getId().toString(), false));\n                }\n                removeNonProviders(providerOptions);\n            }\n            if (providerOptions.isEmpty()) {\n                java.util.List<org.openmrs.module.htmlformentry.element.PersonStub> users = new java.util.ArrayList<org.openmrs.module.htmlformentry.element.PersonStub>();\n                java.util.List<org.openmrs.module.htmlformentry.widget.Option> providerUsers = new java.util.ArrayList<org.openmrs.module.htmlformentry.widget.Option>();\n                java.lang.Object roleParam = parameters.get(\"role\");\n                if (roleParam != null) {\n                    org.openmrs.Role role = null;\n                    org.openmrs.module.htmlformentry.MetadataMappingResolver metadataMappingResolver = getMetadataMappingResolver();\n                    role = metadataMappingResolver.getMetadataItem(org.openmrs.Role.class, roleParam.toString());\n                    if (role == null) {\n                        role = org.openmrs.api.context.Context.getUserService().getRole(((java.lang.String) (roleParam)));\n                    }\n                    if (role == null) {\n                        throw new java.lang.RuntimeException(\"Cannot find role: \" + roleParam);\n                    } else {\n                        users = org.openmrs.api.context.Context.getService(org.openmrs.module.htmlformentry.HtmlFormEntryService.class).getUsersAsPersonStubs(role.getRole());\n                    }\n                } else if (openmrsVersionDoesNotSupportProviders()) {\n                    java.lang.String defaultRole = org.openmrs.util.RoleConstants.PROVIDER;\n                    org.openmrs.Role role = org.openmrs.api.context.Context.getUserService().getRole(defaultRole);\n                    if (role != null) {\n                        users = org.openmrs.api.context.Context.getService(org.openmrs.module.htmlformentry.HtmlFormEntryService.class).getUsersAsPersonStubs(role.getRole());\n                    }\n                    if (users.isEmpty()) {\n                        users = org.openmrs.api.context.Context.getService(org.openmrs.module.htmlformentry.HtmlFormEntryService.class).getUsersAsPersonStubs(null);\n                    }\n                } else {\n                    users = getAllProvidersThatArePersonsAsPersonStubs();\n                }\n                for (org.openmrs.module.htmlformentry.element.PersonStub personStub : users) {\n                    org.openmrs.module.htmlformentry.widget.Option option = new org.openmrs.module.htmlformentry.widget.Option(org.apache.commons.lang.StringEscapeUtils.escapeHtml(personStub.toString()), personStub.getId().toString(), false);\n                    providerUsers.add(option);\n                }\n                providerOptions.addAll(providerUsers);\n            }\n            org.openmrs.Person defaultProvider = null;\n            org.openmrs.module.htmlformentry.widget.Option defProviderOption;\n            if (context.getExistingEncounter() != null) {\n                defaultProvider = org.openmrs.module.htmlformentry.compatibility.EncounterCompatibility.getProvider(context.getExistingEncounter());\n                boolean defaultOptionPresent = false;\n                if (defaultProvider != null) {\n                    for (org.openmrs.module.htmlformentry.widget.Option option : providerOptions) {\n                        if (option.getValue().equals(defaultProvider.getId().toString())) {\n                            defaultOptionPresent = true;\n                            providerOptions.remove(option);\n                            break;\n                        }\n                    }\n                }\n                if (defaultOptionPresent) {\n                    defProviderOption = new org.openmrs.module.htmlformentry.widget.Option(org.apache.commons.lang.StringEscapeUtils.escapeHtml(defaultProvider.getPersonName().getFullName()), defaultProvider.getId().toString(), true);\n                    providerOptions.add(defProviderOption);\n                }\n            } else {\n                java.lang.String defParam = ((java.lang.String) (parameters.get(\"default\")));\n                if (org.springframework.util.StringUtils.hasText(defParam)) {\n                    if (\"currentuser\".equalsIgnoreCase(defParam)) {\n                        defaultProvider = org.openmrs.api.context.Context.getAuthenticatedUser().getPerson();\n                    } else {\n                        defaultProvider = org.openmrs.module.htmlformentry.HtmlFormEntryUtil.getPerson(defParam);\n                    }\n                    if (defaultProvider == null) {\n                        throw new java.lang.IllegalArgumentException(\"Invalid default provider specified for encounter: \" + defParam);\n                    } else {\n                        defProviderOption = new org.openmrs.module.htmlformentry.widget.Option(org.apache.commons.lang.StringEscapeUtils.escapeHtml(defaultProvider.getPersonName().getFullName()), defaultProvider.getId().toString(), true);\n                        for (org.openmrs.module.htmlformentry.widget.Option option : providerOptions) {\n                            if (option.getValue().equals(defProviderOption.getValue())) {\n                                providerOptions.remove(option);\n                                break;\n                            }\n                        }\n                        providerOptions.add(defProviderOption);\n                    }\n                }\n            }\n            if (defaultProvider != null) {\n                providerWidget.setInitialValue(new org.openmrs.module.htmlformentry.element.PersonStub(defaultProvider));\n            }\n            java.util.Collections.sort(providerOptions, new org.openmrs.module.htmlformentry.comparator.OptionComparator());\n            if (\"autocomplete\".equals(parameters.get(\"type\"))) {\n                providerWidget.addOption(new org.openmrs.module.htmlformentry.widget.Option());\n                if (!providerOptions.isEmpty()) {\n                    providerWidget.setOptions(providerOptions);\n                }\n            } else {\n                boolean initialValueIsSet = !(providerWidget.getInitialValue() == null);\n                providerWidget.addOption(new org.openmrs.module.htmlformentry.widget.Option(org.openmrs.api.context.Context.getMessageSourceService().getMessage(\"htmlformentry.chooseAProvider\"), \"\", !initialValueIsSet));\n                if (!providerOptions.isEmpty()) {\n                    for (org.openmrs.module.htmlformentry.widget.Option option : providerOptions) {\n                        providerWidget.addOption(option);\n                    }\n                }\n            }\n            if (parameters.containsKey(\"required\")) {\n                providerRequired = java.lang.Boolean.valueOf(((java.lang.String) (parameters.get(\"required\"))));\n            }\n            context.registerWidget(providerWidget);\n            context.registerErrorWidget(providerWidget, providerErrorWidget);\n        }\n        if (java.lang.Boolean.TRUE.equals(parameters.get(\"encounterType\"))) {\n            encounterTypeWidget = new org.openmrs.module.htmlformentry.widget.EncounterTypeWidget();\n            encounterTypeErrorWidget = new org.openmrs.module.htmlformentry.widget.ErrorWidget();\n            if (parameters.get(\"types\") != null) {\n                java.util.List<org.openmrs.EncounterType> encounterTypes = new java.util.ArrayList<org.openmrs.EncounterType>();\n                java.lang.String[] temp = ((java.lang.String) (parameters.get(\"types\"))).split(\",\");\n                for (java.lang.String s : temp) {\n                    org.openmrs.EncounterType type = org.openmrs.module.htmlformentry.HtmlFormEntryUtil.getEncounterType(s);\n                    if (type == null) {\n                        throw new java.lang.RuntimeException(\"Cannot find encounter type: \" + s);\n                    }\n                    encounterTypes.add(type);\n                }\n                encounterTypeWidget.setOptions(encounterTypes);\n            }\n            org.openmrs.EncounterType defaultEncounterType = null;\n            if (context.getExistingEncounter() != null) {\n                defaultEncounterType = context.getExistingEncounter().getEncounterType();\n            } else {\n                java.lang.String defaultTypeId = ((java.lang.String) (parameters.get(\"default\")));\n                if (org.springframework.util.StringUtils.hasText(defaultTypeId)) {\n                    defaultEncounterType = org.openmrs.module.htmlformentry.HtmlFormEntryUtil.getEncounterType(defaultTypeId);\n                }\n            }\n            encounterTypeWidget.setInitialValue(defaultEncounterType);\n            context.registerWidget(encounterTypeWidget);\n            context.registerErrorWidget(encounterTypeWidget, encounterTypeErrorWidget);\n        }\n        if (java.lang.Boolean.TRUE.equals(parameters.get(\"location\"))) {\n            locationErrorWidget = new org.openmrs.module.htmlformentry.widget.ErrorWidget();\n            java.util.List<org.openmrs.Location> locations = new java.util.ArrayList<org.openmrs.Location>();\n            java.util.List<org.openmrs.module.htmlformentry.widget.Option> locationOptions = new java.util.ArrayList<org.openmrs.module.htmlformentry.widget.Option>();\n            if (\"autocomplete\".equals(parameters.get(\"type\"))) {\n                locationWidget = new org.openmrs.module.htmlformentry.widget.AutocompleteWidget(org.openmrs.Location.class);\n            } else {\n                locationWidget = new org.openmrs.module.htmlformentry.widget.DropdownWidget();\n            }\n            if ((parameters.get(\"tags\") != null) && (parameters.get(\"orders\") != null)) {\n                throw new java.lang.RuntimeException(\"Using both \\\"order\\\" and \\\"tags\\\" attribute in an encounterLocation tag is not currently supported\");\n            }\n            if (parameters.get(\"tags\") != null) {\n                java.util.List<org.openmrs.LocationTag> tags = new java.util.ArrayList<org.openmrs.LocationTag>();\n                java.lang.String[] temp = ((java.lang.String) (parameters.get(\"tags\"))).split(\",\");\n                for (java.lang.String s : temp) {\n                    org.openmrs.LocationTag tag = org.openmrs.module.htmlformentry.HtmlFormEntryUtil.getLocationTag(s);\n                    if (tag == null) {\n                        throw new java.lang.RuntimeException(\"Cannot find tag: \" + tag);\n                    }\n                    tags.add(tag);\n                }\n                locations.addAll(org.openmrs.api.context.Context.getLocationService().getLocationsHavingAnyTag(tags));\n            } else if (parameters.get(\"order\") != null) {\n                java.lang.String[] temp = ((java.lang.String) (parameters.get(\"order\"))).split(\",\");\n                for (java.lang.String s : temp) {\n                    org.openmrs.Location loc = org.openmrs.module.htmlformentry.HtmlFormEntryUtil.getLocation(s, context);\n                    if (loc == null) {\n                        throw new java.lang.RuntimeException(\"Cannot find location: \" + loc);\n                    }\n                    locations.add(loc);\n                }\n            }\n            if (locations.isEmpty()) {\n                locations = org.openmrs.api.context.Context.getLocationService().getAllLocations(false);\n            }\n            org.openmrs.Location defaultLocation = null;\n            if (context.getExistingEncounter() != null) {\n                defaultLocation = context.getExistingEncounter().getLocation();\n            } else {\n                java.lang.String defaultLocId = ((java.lang.String) (parameters.get(\"default\")));\n                if (org.springframework.util.StringUtils.hasText(defaultLocId)) {\n                    defaultLocation = org.openmrs.module.htmlformentry.HtmlFormEntryUtil.getLocation(defaultLocId, context);\n                }\n            }\n            defaultLocation = (defaultLocation == null) ? context.getDefaultLocation() : defaultLocation;\n            locationWidget.setInitialValue(defaultLocation);\n            if ((defaultLocation != null) && context.getMode().equals(Mode.EDIT)) {\n                if (!locations.contains(defaultLocation)) {\n                    locations.add(defaultLocation);\n                }\n            }\n            for (org.openmrs.Location location : locations) {\n                java.lang.String label = org.openmrs.module.htmlformentry.HtmlFormEntryUtil.format(location);\n                org.openmrs.module.htmlformentry.widget.Option option = new org.openmrs.module.htmlformentry.widget.Option(label, location.getId().toString(), location.equals(defaultLocation));\n                locationOptions.add(option);\n            }\n            if (parameters.get(\"order\") == null) {\n                java.util.Collections.sort(locationOptions, new org.openmrs.module.htmlformentry.comparator.OptionComparator());\n            }\n            if (\"autocomplete\".equals(parameters.get(\"type\"))) {\n                locationWidget.addOption(new org.openmrs.module.htmlformentry.widget.Option());\n                if (!locationOptions.isEmpty()) {\n                    locationWidget.setOptions(locationOptions);\n                }\n            } else {\n                boolean initialValueIsSet = !(locationWidget.getInitialValue() == null);\n                locationWidget.addOption(new org.openmrs.module.htmlformentry.widget.Option(org.openmrs.api.context.Context.getMessageSourceService().getMessage(\"htmlformentry.chooseALocation\"), \"\", !initialValueIsSet));\n                if (!locationOptions.isEmpty()) {\n                    for (org.openmrs.module.htmlformentry.widget.Option option : locationOptions) {\n                        locationWidget.addOption(option);\n                    }\n                }\n            }\n            if (parameters.containsKey(\"required\")) {\n                locationRequired = java.lang.Boolean.valueOf(((java.lang.String) (parameters.get(\"required\"))));\n            }\n            context.registerWidget(locationWidget);\n            context.registerErrorWidget(locationWidget, locationErrorWidget);\n        }\n        if (java.lang.Boolean.TRUE.equals(parameters.get(\"showVoidEncounter\")) && (context.getMode() == org.openmrs.module.htmlformentry.FormEntryContext.Mode.EDIT)) {\n            if (parameters.get(\"toggle\") != null) {\n                org.openmrs.module.htmlformentry.widget.ToggleWidget toggleWidget = new org.openmrs.module.htmlformentry.widget.ToggleWidget(((java.lang.String) (parameters.get(\"toggle\"))));\n                voidWidget = new org.openmrs.module.htmlformentry.widget.CheckboxWidget(\" \" + org.openmrs.api.context.Context.getMessageSourceService().getMessage(\"general.voided\"), (context.getExistingEncounter() != null) && context.getExistingEncounter().isVoided().equals(true) ? \"true\" : \"false\", toggleWidget.getTargetId(), toggleWidget.isToggleDim());\n            } else {\n                voidWidget = new org.openmrs.module.htmlformentry.widget.CheckboxWidget();\n            }\n            voidWidget.setLabel(\" \" + org.openmrs.api.context.Context.getMessageSourceService().getMessage(\"general.voided\"));\n            voidErrorWidget = new org.openmrs.module.htmlformentry.widget.ErrorWidget();\n            if ((context.getExistingEncounter() != null) && context.getExistingEncounter().isVoided().equals(true)) {\n                voidWidget.setInitialValue(\"true\");\n            }\n            context.registerWidget(voidWidget);\n            context.registerErrorWidget(voidWidget, voidErrorWidget);\n        }\n        if (parameters.get(\"id\") != null) {\n            id = ((java.lang.String) (parameters.get(\"id\")));\n        }\n    }\n\n    private boolean openmrsVersionDoesNotSupportProviders() {\n        return (OpenmrsConstants.OPENMRS_VERSION_SHORT.startsWith(\"1.6\") || OpenmrsConstants.OPENMRS_VERSION_SHORT.startsWith(\"1.7\")) || OpenmrsConstants.OPENMRS_VERSION_SHORT.startsWith(\"1.8\");\n    }\n\n    private void removeNonProviders(java.util.List<org.openmrs.module.htmlformentry.widget.Option> persons) {\n        if (openmrsVersionDoesNotSupportProviders()) {\n            return;\n        }\n        java.util.Set<java.lang.Integer> legalPersonIds = getAllProviderPersonIds();\n        for (java.util.Iterator<org.openmrs.module.htmlformentry.widget.Option> i = persons.iterator(); i.hasNext();) {\n            org.openmrs.module.htmlformentry.widget.Option candidate = i.next();\n            if (!legalPersonIds.contains(java.lang.Integer.parseInt(candidate.getValue()))) {\n                i.remove();\n            }\n        }\n    }\n\n    private java.util.List<java.lang.Object> getAllProvidersThatArePersons() {\n        if (openmrsVersionDoesNotSupportProviders()) {\n            throw new java.lang.RuntimeException(\"Programming error in HTML Form Entry module. This method should not be called before OpenMRS 1.9.\");\n        }\n        try {\n            java.lang.Object providerService = org.openmrs.api.context.Context.getService(org.openmrs.api.context.Context.loadClass(\"org.openmrs.api.ProviderService\"));\n            java.lang.reflect.Method getProvidersMethod = providerService.getClass().getMethod(\"getAllProviders\");\n            @java.lang.SuppressWarnings(\"rawtypes\")\n            java.util.List allProviders = ((java.util.List) (getProvidersMethod.invoke(providerService)));\n            java.util.List<java.lang.Object> ret = new java.util.ArrayList<java.lang.Object>();\n            for (java.lang.Object provider : allProviders) {\n                org.openmrs.Person person = ((org.openmrs.Person) (org.apache.commons.beanutils.PropertyUtils.getProperty(provider, \"person\")));\n                if (person != null) {\n                    ret.add(provider);\n                }\n            }\n            return ret;\n        } catch (java.lang.Exception ex) {\n            throw new java.lang.RuntimeException(\"Programming error in HTML Form Entry module. This method should be safe!\", ex);\n        }\n    }\n\n    private java.util.List<org.openmrs.module.htmlformentry.element.PersonStub> getAllProvidersThatArePersonsAsPersonStubs() {\n        try {\n            java.util.List<org.openmrs.module.htmlformentry.element.PersonStub> ret = new java.util.ArrayList<org.openmrs.module.htmlformentry.element.PersonStub>();\n            for (java.lang.Object provider : getAllProvidersThatArePersons()) {\n                org.openmrs.Person person = ((org.openmrs.Person) (org.apache.commons.beanutils.PropertyUtils.getProperty(provider, \"person\")));\n                ret.add(new org.openmrs.module.htmlformentry.element.PersonStub(person));\n            }\n            return ret;\n        } catch (java.lang.Exception ex) {\n            throw new java.lang.RuntimeException(\"Programming error in HTML Form Entry module. This method should be safe!\", ex);\n        }\n    }\n\n    private java.util.Set<java.lang.Integer> getAllProviderPersonIds() {\n        try {\n            java.util.Set<java.lang.Integer> ret = new java.util.HashSet<java.lang.Integer>();\n            for (java.lang.Object candidate : getAllProvidersThatArePersons()) {\n                org.openmrs.Person person = ((org.openmrs.Person) (org.apache.commons.beanutils.PropertyUtils.getProperty(candidate, \"person\")));\n                if (person != null) {\n                    ret.add(person.getPersonId());\n                }\n            }\n            return ret;\n        } catch (java.lang.Exception ex) {\n            throw new java.lang.RuntimeException(\"Programming error in HTML Form Entry module. This method should be safe!\", ex);\n        }\n    }\n\n    @java.lang.Override\n    public java.lang.String generateHtml(org.openmrs.module.htmlformentry.FormEntryContext context) {\n        java.lang.StringBuilder ret = new java.lang.StringBuilder();\n        if ((id != null) || (!context.getMode().equals(Mode.VIEW))) {\n            if (dateWidget != null) {\n                id = (id != null) ? id : \"encounterDate\";\n                context.registerPropertyAccessorInfo(id + \".value\", context.getFieldNameIfRegistered(dateWidget), \"dateFieldGetterFunction\", null, \"dateSetterFunction\");\n                context.registerPropertyAccessorInfo(id + \".error\", context.getFieldNameIfRegistered(dateErrorWidget), null, null, null);\n            } else if (providerWidget != null) {\n                id = (id != null) ? id : \"encounterProvider\";\n                context.registerPropertyAccessorInfo(id + \".value\", context.getFieldNameIfRegistered(providerWidget), null, getGetterFunction(providerWidget), getSetterFunction(providerWidget));\n                context.registerPropertyAccessorInfo(id + \".error\", context.getFieldNameIfRegistered(providerErrorWidget), null, null, null);\n            } else if (locationWidget != null) {\n                id = (id != null) ? id : \"encounterLocation\";\n                context.registerPropertyAccessorInfo(id + \".value\", context.getFieldNameIfRegistered(locationWidget), null, getGetterFunction(locationWidget), getSetterFunction(locationWidget));\n                context.registerPropertyAccessorInfo(id + \".error\", context.getFieldNameIfRegistered(locationErrorWidget), null, null, null);\n            } else if (encounterTypeWidget != null) {\n                id = (id != null) ? id : \"encounterType\";\n                context.registerPropertyAccessorInfo(id + \".value\", context.getFieldNameIfRegistered(encounterTypeWidget), null, null, null);\n                context.registerPropertyAccessorInfo(id + \".error\", context.getFieldNameIfRegistered(encounterTypeErrorWidget), null, null, null);\n            }\n            ret.append((\"<span id='\" + id) + \"'>\");\n        }\n        if (dateWidget != null) {\n            ret.append(dateWidget.generateHtml(context));\n            if (context.getMode() != org.openmrs.module.htmlformentry.FormEntryContext.Mode.VIEW) {\n                ret.append(dateErrorWidget.generateHtml(context));\n            }\n        }\n        if (timeWidget != null) {\n            if ((!timeWidget.isHidden()) || (context.getMode() == org.openmrs.module.htmlformentry.FormEntryContext.Mode.VIEW)) {\n                ret.append(\"&#160;\");\n            }\n            ret.append(timeWidget.generateHtml(context));\n            if (context.getMode() != org.openmrs.module.htmlformentry.FormEntryContext.Mode.VIEW) {\n                ret.append(timeErrorWidget.generateHtml(context));\n            }\n        }\n        if (providerWidget != null) {\n            ret.append(providerWidget.generateHtml(context));\n            if (context.getMode() != org.openmrs.module.htmlformentry.FormEntryContext.Mode.VIEW) {\n                ret.append(providerErrorWidget.generateHtml(context));\n            }\n        }\n        if (locationWidget != null) {\n            ret.append(locationWidget.generateHtml(context));\n            if (context.getMode() != org.openmrs.module.htmlformentry.FormEntryContext.Mode.VIEW) {\n                ret.append(locationErrorWidget.generateHtml(context));\n            }\n        }\n        if (encounterTypeWidget != null) {\n            ret.append(encounterTypeWidget.generateHtml(context));\n            if (context.getMode() != org.openmrs.module.htmlformentry.FormEntryContext.Mode.VIEW) {\n                ret.append(encounterTypeErrorWidget.generateHtml(context));\n            }\n        }\n        if (voidWidget != null) {\n            if (context.getMode() == org.openmrs.module.htmlformentry.FormEntryContext.Mode.EDIT) {\n                ret.append(voidWidget.generateHtml(context));\n            }\n        }\n        if (id != null) {\n            ret.append(\"</span>\");\n        }\n        return ret.toString();\n    }\n\n    private java.lang.String getGetterFunction(org.openmrs.module.htmlformentry.widget.Widget widget) {\n        if (widget == null) {\n            return null;\n        }\n        if (widget instanceof org.openmrs.module.htmlformentry.widget.AutocompleteWidget) {\n            return \"autocompleteGetterFunction\";\n        }\n        return null;\n    }\n\n    private java.lang.String getSetterFunction(org.openmrs.module.htmlformentry.widget.Widget widget) {\n        if (widget == null) {\n            return null;\n        }\n        if (widget instanceof org.openmrs.module.htmlformentry.widget.AutocompleteWidget) {\n            return \"autocompleteSetterFunction\";\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.util.Collection<org.openmrs.module.htmlformentry.FormSubmissionError> validateSubmission(org.openmrs.module.htmlformentry.FormEntryContext context, javax.servlet.http.HttpServletRequest submission) {\n        java.util.List<org.openmrs.module.htmlformentry.FormSubmissionError> ret = new java.util.ArrayList<org.openmrs.module.htmlformentry.FormSubmissionError>();\n        try {\n            if (dateWidget != null) {\n                java.util.Date date = ((java.util.Date) (dateWidget.getValue(context, submission)));\n                if (timeWidget != null) {\n                    java.util.Date time = ((java.util.Date) (timeWidget.getValue(context, submission)));\n                    date = org.openmrs.module.htmlformentry.HtmlFormEntryUtil.combineDateAndTime(date, time);\n                }\n                if (date == null) {\n                    throw new java.lang.Exception(\"htmlformentry.error.required\");\n                }\n                if (org.openmrs.util.OpenmrsUtil.compare(((java.util.Date) (date)), new java.util.Date()) > 0) {\n                    throw new java.lang.Exception(\"htmlformentry.error.cannotBeInFuture\");\n                }\n            }\n        } catch (java.lang.Exception ex) {\n            ret.add(new org.openmrs.module.htmlformentry.FormSubmissionError(context.getFieldName(dateErrorWidget), org.openmrs.api.context.Context.getMessageSourceService().getMessage(ex.getMessage())));\n        }\n        try {\n            if (providerWidget != null) {\n                java.lang.Object value = providerWidget.getValue(context, submission);\n                if (value == null) {\n                    if (providerRequired) {\n                        throw new java.lang.Exception(\"required\");\n                    }\n                } else {\n                    org.openmrs.Person provider = ((org.openmrs.Person) (convertValueToProvider(value)));\n                    if (provider == null) {\n                        if (providerRequired) {\n                            throw new java.lang.Exception(\"required\");\n                        }\n                    }\n                }\n            }\n        } catch (java.lang.Exception ex) {\n            ret.add(new org.openmrs.module.htmlformentry.FormSubmissionError(context.getFieldName(providerErrorWidget), org.openmrs.api.context.Context.getMessageSourceService().getMessage(ex.getMessage())));\n        }\n        try {\n            if (locationWidget != null) {\n                java.lang.Object value = locationWidget.getValue(context, submission);\n                if (value == null) {\n                    if (locationRequired) {\n                        throw new java.lang.Exception(\"required\");\n                    }\n                } else {\n                    org.openmrs.Location location = ((org.openmrs.Location) (org.openmrs.module.htmlformentry.HtmlFormEntryUtil.convertToType(value.toString().trim(), org.openmrs.Location.class)));\n                    if (location == null) {\n                        log.debug(\"Location Required \" + locationRequired);\n                        if (locationRequired) {\n                            throw new java.lang.Exception(\"required\");\n                        }\n                    }\n                }\n            }\n        } catch (java.lang.Exception ex) {\n            ret.add(new org.openmrs.module.htmlformentry.FormSubmissionError(context.getFieldName(locationErrorWidget), org.openmrs.api.context.Context.getMessageSourceService().getMessage(ex.getMessage())));\n        }\n        try {\n            if (encounterTypeWidget != null) {\n                java.lang.Object encounterType = encounterTypeWidget.getValue(context, submission);\n                java.lang.System.out.println(((\"the location widget initial value \" + encounterTypeWidget.getClass()) + \" actual value \") + encounterType);\n                if (encounterType == null) {\n                    throw new java.lang.Exception(\"required\");\n                }\n            }\n        } catch (java.lang.Exception ex) {\n            ret.add(new org.openmrs.module.htmlformentry.FormSubmissionError(context.getFieldName(encounterTypeErrorWidget), org.openmrs.api.context.Context.getMessageSourceService().getMessage(ex.getMessage())));\n        }\n        return ret;\n    }\n\n    private java.lang.Object convertValueToProvider(java.lang.Object value) {\n        java.lang.String val = ((java.lang.String) (value));\n        if (org.springframework.util.StringUtils.hasText(val)) {\n            return org.openmrs.module.htmlformentry.HtmlFormEntryUtil.convertToType(val.trim(), org.openmrs.Person.class);\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public void handleSubmission(org.openmrs.module.htmlformentry.FormEntrySession session, javax.servlet.http.HttpServletRequest submission) {\n        if (dateWidget != null) {\n            java.util.Date date = ((java.util.Date) (dateWidget.getValue(session.getContext(), submission)));\n            java.util.Date previousDate = session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime();\n            if (previousDate == null) {\n                session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date);\n            } else if (hasTimeComponent(date) || (!stripTimeComponent(date).equals(stripTimeComponent(previousDate)))) {\n                session.getContext().setPreviousEncounterDate(new java.util.Date(session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime().getTime()));\n                session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date);\n            }\n        }\n        if (timeWidget != null) {\n            java.util.Date time = ((java.util.Date) (timeWidget.getValue(session.getContext(), submission)));\n            org.openmrs.Encounter e = session.getSubmissionActions().getCurrentEncounter();\n            java.util.Date dateAndTime = org.openmrs.module.htmlformentry.HtmlFormEntryUtil.combineDateAndTime(e.getEncounterDatetime(), time);\n            e.setEncounterDatetime(dateAndTime);\n        }\n        if (providerWidget != null) {\n            java.lang.Object value = providerWidget.getValue(session.getContext(), submission);\n            if (value != null) {\n                org.openmrs.Person person = ((org.openmrs.Person) (convertValueToProvider(value)));\n                org.openmrs.module.htmlformentry.compatibility.EncounterCompatibility.setProvider(session.getSubmissionActions().getCurrentEncounter(), person);\n            }\n        }\n        if (locationWidget != null) {\n            java.lang.Object value = locationWidget.getValue(session.getContext(), submission);\n            if (value != null) {\n                org.openmrs.Location location = ((org.openmrs.Location) (org.openmrs.module.htmlformentry.HtmlFormEntryUtil.convertToType(value.toString().trim(), org.openmrs.Location.class)));\n                session.getSubmissionActions().getCurrentEncounter().setLocation(location);\n            }\n        }\n        if (encounterTypeWidget != null) {\n            org.openmrs.EncounterType encounterType = ((org.openmrs.EncounterType) (encounterTypeWidget.getValue(session.getContext(), submission)));\n            session.getSubmissionActions().getCurrentEncounter().setEncounterType(encounterType);\n        }\n        if (voidWidget != null) {\n            if (\"true\".equals(voidWidget.getValue(session.getContext(), submission))) {\n                session.setVoidEncounter(true);\n            } else if (\"false\".equals(voidWidget.getValue(session.getContext(), submission))) {\n            }\n        }\n    }\n\n    private boolean hasTimeComponent(java.util.Date date) {\n        return !new org.joda.time.DateMidnight(date).toDate().equals(date);\n    }\n\n    private org.joda.time.DateMidnight stripTimeComponent(java.util.Date date) {\n        return new org.joda.time.DateMidnight(date);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private org.joda.time.DateMidnight stripTimeComponent(java.util.Date date) {\n    return new org.joda.time.DateMidnight(date);\n}",
            "src_parent": "public class EncounterDetailSubmissionElement implements org.openmrs.module.htmlformentry.action.FormSubmissionControllerAction , org.openmrs.module.htmlformentry.element.HtmlGeneratorElement {\n    protected final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(getClass());\n\n    private java.lang.String id;\n\n    private org.openmrs.module.htmlformentry.widget.DateWidget dateWidget;\n\n    private org.openmrs.module.htmlformentry.widget.ErrorWidget dateErrorWidget;\n\n    private org.openmrs.module.htmlformentry.widget.TimeWidget timeWidget;\n\n    private org.openmrs.module.htmlformentry.widget.ErrorWidget timeErrorWidget;\n\n    private org.openmrs.module.htmlformentry.widget.SingleOptionWidget providerWidget;\n\n    private org.openmrs.module.htmlformentry.widget.ErrorWidget providerErrorWidget;\n\n    private org.openmrs.module.htmlformentry.widget.SingleOptionWidget locationWidget;\n\n    private org.openmrs.module.htmlformentry.widget.ErrorWidget locationErrorWidget;\n\n    private org.openmrs.module.htmlformentry.widget.ToggleWidget toggleWidget;\n\n    private org.openmrs.module.htmlformentry.widget.CheckboxWidget voidWidget;\n\n    private org.openmrs.module.htmlformentry.widget.ErrorWidget voidErrorWidget;\n\n    private org.openmrs.module.htmlformentry.widget.EncounterTypeWidget encounterTypeWidget;\n\n    private org.openmrs.module.htmlformentry.widget.ErrorWidget encounterTypeErrorWidget;\n\n    boolean locationRequired = true;\n\n    boolean providerRequired = true;\n\n    private org.openmrs.module.htmlformentry.MetadataMappingResolver getMetadataMappingResolver() {\n        return org.openmrs.api.context.Context.getRegisteredComponent(\"metadataMappingResolver\", org.openmrs.module.htmlformentry.MetadataMappingResolver.class);\n    }\n\n    public EncounterDetailSubmissionElement(org.openmrs.module.htmlformentry.FormEntryContext context, java.util.Map<java.lang.String, java.lang.Object> parameters) {\n        if (java.lang.Boolean.TRUE.equals(parameters.get(\"date\"))) {\n            dateWidget = new org.openmrs.module.htmlformentry.widget.DateWidget();\n            dateErrorWidget = new org.openmrs.module.htmlformentry.widget.ErrorWidget();\n            if (context.getExistingEncounter() != null) {\n                dateWidget.setInitialValue(context.getExistingEncounter().getEncounterDatetime());\n            } else if (parameters.get(\"defaultDate\") != null) {\n                dateWidget.setInitialValue(parameters.get(\"defaultDate\"));\n            }\n            if ((parameters.get(\"disallowMultipleEncountersOnDate\") != null) && org.springframework.util.StringUtils.hasText(((java.lang.String) (parameters.get(\"disallowMultipleEncountersOnDate\"))))) {\n                dateWidget.setOnChangeFunction((\"existingEncounterOnDate(this, '\" + parameters.get(\"disallowMultipleEncountersOnDate\")) + \"') \");\n            }\n            if (\"true\".equals(parameters.get(\"showTime\"))) {\n                timeWidget = new org.openmrs.module.htmlformentry.widget.TimeWidget();\n                timeErrorWidget = new org.openmrs.module.htmlformentry.widget.ErrorWidget();\n                if (context.getExistingEncounter() != null) {\n                    timeWidget.setInitialValue(context.getExistingEncounter().getEncounterDatetime());\n                } else if (parameters.get(\"defaultDate\") != null) {\n                    timeWidget.setInitialValue(parameters.get(\"defaultDate\"));\n                }\n                if (\"true\".equals(parameters.get(\"hideSeconds\"))) {\n                    timeWidget.setHideSeconds(true);\n                }\n                context.registerWidget(timeWidget);\n                context.registerErrorWidget(timeWidget, timeErrorWidget);\n            }\n            context.registerWidget(dateWidget);\n            context.registerErrorWidget(dateWidget, dateErrorWidget);\n            if (\"hidden\".equals(parameters.get(\"widget\"))) {\n                dateWidget.setHidden(true);\n                if (timeWidget != null) {\n                    timeWidget.setHidden(true);\n                }\n            }\n        }\n        if (java.lang.Boolean.TRUE.equals(parameters.get(\"provider\"))) {\n            if (\"autocomplete\".equals(parameters.get(\"type\"))) {\n                providerWidget = new org.openmrs.module.htmlformentry.widget.AutocompleteWidget(org.openmrs.Person.class);\n            } else {\n                providerWidget = new org.openmrs.module.htmlformentry.widget.DropdownWidget();\n            }\n            providerErrorWidget = new org.openmrs.module.htmlformentry.widget.ErrorWidget();\n            java.util.List<org.openmrs.module.htmlformentry.widget.Option> providerOptions = new java.util.ArrayList<org.openmrs.module.htmlformentry.widget.Option>();\n            java.lang.String personsParam = ((java.lang.String) (parameters.get(\"persons\")));\n            if (personsParam != null) {\n                for (java.lang.String s : personsParam.split(\",\")) {\n                    org.openmrs.Person p = org.openmrs.module.htmlformentry.HtmlFormEntryUtil.getPerson(s);\n                    if (p == null) {\n                        throw new java.lang.RuntimeException(\"Cannot find Person: \" + s);\n                    }\n                    java.lang.String label = org.apache.commons.lang.StringEscapeUtils.escapeHtml(p.getPersonName().getFullName());\n                    providerOptions.add(new org.openmrs.module.htmlformentry.widget.Option(label, p.getId().toString(), false));\n                }\n                removeNonProviders(providerOptions);\n            }\n            if (providerOptions.isEmpty()) {\n                java.util.List<org.openmrs.module.htmlformentry.element.PersonStub> users = new java.util.ArrayList<org.openmrs.module.htmlformentry.element.PersonStub>();\n                java.util.List<org.openmrs.module.htmlformentry.widget.Option> providerUsers = new java.util.ArrayList<org.openmrs.module.htmlformentry.widget.Option>();\n                java.lang.Object roleParam = parameters.get(\"role\");\n                if (roleParam != null) {\n                    org.openmrs.Role role = null;\n                    org.openmrs.module.htmlformentry.MetadataMappingResolver metadataMappingResolver = getMetadataMappingResolver();\n                    role = metadataMappingResolver.getMetadataItem(org.openmrs.Role.class, roleParam.toString());\n                    if (role == null) {\n                        role = org.openmrs.api.context.Context.getUserService().getRole(((java.lang.String) (roleParam)));\n                    }\n                    if (role == null) {\n                        throw new java.lang.RuntimeException(\"Cannot find role: \" + roleParam);\n                    } else {\n                        users = org.openmrs.api.context.Context.getService(org.openmrs.module.htmlformentry.HtmlFormEntryService.class).getUsersAsPersonStubs(role.getRole());\n                    }\n                } else if (openmrsVersionDoesNotSupportProviders()) {\n                    java.lang.String defaultRole = org.openmrs.util.RoleConstants.PROVIDER;\n                    org.openmrs.Role role = org.openmrs.api.context.Context.getUserService().getRole(defaultRole);\n                    if (role != null) {\n                        users = org.openmrs.api.context.Context.getService(org.openmrs.module.htmlformentry.HtmlFormEntryService.class).getUsersAsPersonStubs(role.getRole());\n                    }\n                    if (users.isEmpty()) {\n                        users = org.openmrs.api.context.Context.getService(org.openmrs.module.htmlformentry.HtmlFormEntryService.class).getUsersAsPersonStubs(null);\n                    }\n                } else {\n                    users = getAllProvidersThatArePersonsAsPersonStubs();\n                }\n                for (org.openmrs.module.htmlformentry.element.PersonStub personStub : users) {\n                    org.openmrs.module.htmlformentry.widget.Option option = new org.openmrs.module.htmlformentry.widget.Option(org.apache.commons.lang.StringEscapeUtils.escapeHtml(personStub.toString()), personStub.getId().toString(), false);\n                    providerUsers.add(option);\n                }\n                providerOptions.addAll(providerUsers);\n            }\n            org.openmrs.Person defaultProvider = null;\n            org.openmrs.module.htmlformentry.widget.Option defProviderOption;\n            if (context.getExistingEncounter() != null) {\n                defaultProvider = org.openmrs.module.htmlformentry.compatibility.EncounterCompatibility.getProvider(context.getExistingEncounter());\n                boolean defaultOptionPresent = false;\n                if (defaultProvider != null) {\n                    for (org.openmrs.module.htmlformentry.widget.Option option : providerOptions) {\n                        if (option.getValue().equals(defaultProvider.getId().toString())) {\n                            defaultOptionPresent = true;\n                            providerOptions.remove(option);\n                            break;\n                        }\n                    }\n                }\n                if (defaultOptionPresent) {\n                    defProviderOption = new org.openmrs.module.htmlformentry.widget.Option(org.apache.commons.lang.StringEscapeUtils.escapeHtml(defaultProvider.getPersonName().getFullName()), defaultProvider.getId().toString(), true);\n                    providerOptions.add(defProviderOption);\n                }\n            } else {\n                java.lang.String defParam = ((java.lang.String) (parameters.get(\"default\")));\n                if (org.springframework.util.StringUtils.hasText(defParam)) {\n                    if (\"currentuser\".equalsIgnoreCase(defParam)) {\n                        defaultProvider = org.openmrs.api.context.Context.getAuthenticatedUser().getPerson();\n                    } else {\n                        defaultProvider = org.openmrs.module.htmlformentry.HtmlFormEntryUtil.getPerson(defParam);\n                    }\n                    if (defaultProvider == null) {\n                        throw new java.lang.IllegalArgumentException(\"Invalid default provider specified for encounter: \" + defParam);\n                    } else {\n                        defProviderOption = new org.openmrs.module.htmlformentry.widget.Option(org.apache.commons.lang.StringEscapeUtils.escapeHtml(defaultProvider.getPersonName().getFullName()), defaultProvider.getId().toString(), true);\n                        for (org.openmrs.module.htmlformentry.widget.Option option : providerOptions) {\n                            if (option.getValue().equals(defProviderOption.getValue())) {\n                                providerOptions.remove(option);\n                                break;\n                            }\n                        }\n                        providerOptions.add(defProviderOption);\n                    }\n                }\n            }\n            if (defaultProvider != null) {\n                providerWidget.setInitialValue(new org.openmrs.module.htmlformentry.element.PersonStub(defaultProvider));\n            }\n            java.util.Collections.sort(providerOptions, new org.openmrs.module.htmlformentry.comparator.OptionComparator());\n            if (\"autocomplete\".equals(parameters.get(\"type\"))) {\n                providerWidget.addOption(new org.openmrs.module.htmlformentry.widget.Option());\n                if (!providerOptions.isEmpty()) {\n                    providerWidget.setOptions(providerOptions);\n                }\n            } else {\n                boolean initialValueIsSet = !(providerWidget.getInitialValue() == null);\n                providerWidget.addOption(new org.openmrs.module.htmlformentry.widget.Option(org.openmrs.api.context.Context.getMessageSourceService().getMessage(\"htmlformentry.chooseAProvider\"), \"\", !initialValueIsSet));\n                if (!providerOptions.isEmpty()) {\n                    for (org.openmrs.module.htmlformentry.widget.Option option : providerOptions) {\n                        providerWidget.addOption(option);\n                    }\n                }\n            }\n            if (parameters.containsKey(\"required\")) {\n                providerRequired = java.lang.Boolean.valueOf(((java.lang.String) (parameters.get(\"required\"))));\n            }\n            context.registerWidget(providerWidget);\n            context.registerErrorWidget(providerWidget, providerErrorWidget);\n        }\n        if (java.lang.Boolean.TRUE.equals(parameters.get(\"encounterType\"))) {\n            encounterTypeWidget = new org.openmrs.module.htmlformentry.widget.EncounterTypeWidget();\n            encounterTypeErrorWidget = new org.openmrs.module.htmlformentry.widget.ErrorWidget();\n            if (parameters.get(\"types\") != null) {\n                java.util.List<org.openmrs.EncounterType> encounterTypes = new java.util.ArrayList<org.openmrs.EncounterType>();\n                java.lang.String[] temp = ((java.lang.String) (parameters.get(\"types\"))).split(\",\");\n                for (java.lang.String s : temp) {\n                    org.openmrs.EncounterType type = org.openmrs.module.htmlformentry.HtmlFormEntryUtil.getEncounterType(s);\n                    if (type == null) {\n                        throw new java.lang.RuntimeException(\"Cannot find encounter type: \" + s);\n                    }\n                    encounterTypes.add(type);\n                }\n                encounterTypeWidget.setOptions(encounterTypes);\n            }\n            org.openmrs.EncounterType defaultEncounterType = null;\n            if (context.getExistingEncounter() != null) {\n                defaultEncounterType = context.getExistingEncounter().getEncounterType();\n            } else {\n                java.lang.String defaultTypeId = ((java.lang.String) (parameters.get(\"default\")));\n                if (org.springframework.util.StringUtils.hasText(defaultTypeId)) {\n                    defaultEncounterType = org.openmrs.module.htmlformentry.HtmlFormEntryUtil.getEncounterType(defaultTypeId);\n                }\n            }\n            encounterTypeWidget.setInitialValue(defaultEncounterType);\n            context.registerWidget(encounterTypeWidget);\n            context.registerErrorWidget(encounterTypeWidget, encounterTypeErrorWidget);\n        }\n        if (java.lang.Boolean.TRUE.equals(parameters.get(\"location\"))) {\n            locationErrorWidget = new org.openmrs.module.htmlformentry.widget.ErrorWidget();\n            java.util.List<org.openmrs.Location> locations = new java.util.ArrayList<org.openmrs.Location>();\n            java.util.List<org.openmrs.module.htmlformentry.widget.Option> locationOptions = new java.util.ArrayList<org.openmrs.module.htmlformentry.widget.Option>();\n            if (\"autocomplete\".equals(parameters.get(\"type\"))) {\n                locationWidget = new org.openmrs.module.htmlformentry.widget.AutocompleteWidget(org.openmrs.Location.class);\n            } else {\n                locationWidget = new org.openmrs.module.htmlformentry.widget.DropdownWidget();\n            }\n            if ((parameters.get(\"tags\") != null) && (parameters.get(\"orders\") != null)) {\n                throw new java.lang.RuntimeException(\"Using both \\\"order\\\" and \\\"tags\\\" attribute in an encounterLocation tag is not currently supported\");\n            }\n            if (parameters.get(\"tags\") != null) {\n                java.util.List<org.openmrs.LocationTag> tags = new java.util.ArrayList<org.openmrs.LocationTag>();\n                java.lang.String[] temp = ((java.lang.String) (parameters.get(\"tags\"))).split(\",\");\n                for (java.lang.String s : temp) {\n                    org.openmrs.LocationTag tag = org.openmrs.module.htmlformentry.HtmlFormEntryUtil.getLocationTag(s);\n                    if (tag == null) {\n                        throw new java.lang.RuntimeException(\"Cannot find tag: \" + tag);\n                    }\n                    tags.add(tag);\n                }\n                locations.addAll(org.openmrs.api.context.Context.getLocationService().getLocationsHavingAnyTag(tags));\n            } else if (parameters.get(\"order\") != null) {\n                java.lang.String[] temp = ((java.lang.String) (parameters.get(\"order\"))).split(\",\");\n                for (java.lang.String s : temp) {\n                    org.openmrs.Location loc = org.openmrs.module.htmlformentry.HtmlFormEntryUtil.getLocation(s, context);\n                    if (loc == null) {\n                        throw new java.lang.RuntimeException(\"Cannot find location: \" + loc);\n                    }\n                    locations.add(loc);\n                }\n            }\n            if (locations.isEmpty()) {\n                locations = org.openmrs.api.context.Context.getLocationService().getAllLocations(false);\n            }\n            org.openmrs.Location defaultLocation = null;\n            if (context.getExistingEncounter() != null) {\n                defaultLocation = context.getExistingEncounter().getLocation();\n            } else {\n                java.lang.String defaultLocId = ((java.lang.String) (parameters.get(\"default\")));\n                if (org.springframework.util.StringUtils.hasText(defaultLocId)) {\n                    defaultLocation = org.openmrs.module.htmlformentry.HtmlFormEntryUtil.getLocation(defaultLocId, context);\n                }\n            }\n            defaultLocation = (defaultLocation == null) ? context.getDefaultLocation() : defaultLocation;\n            locationWidget.setInitialValue(defaultLocation);\n            if ((defaultLocation != null) && context.getMode().equals(Mode.EDIT)) {\n                if (!locations.contains(defaultLocation)) {\n                    locations.add(defaultLocation);\n                }\n            }\n            for (org.openmrs.Location location : locations) {\n                java.lang.String label = org.openmrs.module.htmlformentry.HtmlFormEntryUtil.format(location);\n                org.openmrs.module.htmlformentry.widget.Option option = new org.openmrs.module.htmlformentry.widget.Option(label, location.getId().toString(), location.equals(defaultLocation));\n                locationOptions.add(option);\n            }\n            if (parameters.get(\"order\") == null) {\n                java.util.Collections.sort(locationOptions, new org.openmrs.module.htmlformentry.comparator.OptionComparator());\n            }\n            if (\"autocomplete\".equals(parameters.get(\"type\"))) {\n                locationWidget.addOption(new org.openmrs.module.htmlformentry.widget.Option());\n                if (!locationOptions.isEmpty()) {\n                    locationWidget.setOptions(locationOptions);\n                }\n            } else {\n                boolean initialValueIsSet = !(locationWidget.getInitialValue() == null);\n                locationWidget.addOption(new org.openmrs.module.htmlformentry.widget.Option(org.openmrs.api.context.Context.getMessageSourceService().getMessage(\"htmlformentry.chooseALocation\"), \"\", !initialValueIsSet));\n                if (!locationOptions.isEmpty()) {\n                    for (org.openmrs.module.htmlformentry.widget.Option option : locationOptions) {\n                        locationWidget.addOption(option);\n                    }\n                }\n            }\n            if (parameters.containsKey(\"required\")) {\n                locationRequired = java.lang.Boolean.valueOf(((java.lang.String) (parameters.get(\"required\"))));\n            }\n            context.registerWidget(locationWidget);\n            context.registerErrorWidget(locationWidget, locationErrorWidget);\n        }\n        if (java.lang.Boolean.TRUE.equals(parameters.get(\"showVoidEncounter\")) && (context.getMode() == org.openmrs.module.htmlformentry.FormEntryContext.Mode.EDIT)) {\n            if (parameters.get(\"toggle\") != null) {\n                org.openmrs.module.htmlformentry.widget.ToggleWidget toggleWidget = new org.openmrs.module.htmlformentry.widget.ToggleWidget(((java.lang.String) (parameters.get(\"toggle\"))));\n                voidWidget = new org.openmrs.module.htmlformentry.widget.CheckboxWidget(\" \" + org.openmrs.api.context.Context.getMessageSourceService().getMessage(\"general.voided\"), (context.getExistingEncounter() != null) && context.getExistingEncounter().isVoided().equals(true) ? \"true\" : \"false\", toggleWidget.getTargetId(), toggleWidget.isToggleDim());\n            } else {\n                voidWidget = new org.openmrs.module.htmlformentry.widget.CheckboxWidget();\n            }\n            voidWidget.setLabel(\" \" + org.openmrs.api.context.Context.getMessageSourceService().getMessage(\"general.voided\"));\n            voidErrorWidget = new org.openmrs.module.htmlformentry.widget.ErrorWidget();\n            if ((context.getExistingEncounter() != null) && context.getExistingEncounter().isVoided().equals(true)) {\n                voidWidget.setInitialValue(\"true\");\n            }\n            context.registerWidget(voidWidget);\n            context.registerErrorWidget(voidWidget, voidErrorWidget);\n        }\n        if (parameters.get(\"id\") != null) {\n            id = ((java.lang.String) (parameters.get(\"id\")));\n        }\n    }\n\n    private boolean openmrsVersionDoesNotSupportProviders() {\n        return (OpenmrsConstants.OPENMRS_VERSION_SHORT.startsWith(\"1.6\") || OpenmrsConstants.OPENMRS_VERSION_SHORT.startsWith(\"1.7\")) || OpenmrsConstants.OPENMRS_VERSION_SHORT.startsWith(\"1.8\");\n    }\n\n    private void removeNonProviders(java.util.List<org.openmrs.module.htmlformentry.widget.Option> persons) {\n        if (openmrsVersionDoesNotSupportProviders()) {\n            return;\n        }\n        java.util.Set<java.lang.Integer> legalPersonIds = getAllProviderPersonIds();\n        for (java.util.Iterator<org.openmrs.module.htmlformentry.widget.Option> i = persons.iterator(); i.hasNext();) {\n            org.openmrs.module.htmlformentry.widget.Option candidate = i.next();\n            if (!legalPersonIds.contains(java.lang.Integer.parseInt(candidate.getValue()))) {\n                i.remove();\n            }\n        }\n    }\n\n    private java.util.List<java.lang.Object> getAllProvidersThatArePersons() {\n        if (openmrsVersionDoesNotSupportProviders()) {\n            throw new java.lang.RuntimeException(\"Programming error in HTML Form Entry module. This method should not be called before OpenMRS 1.9.\");\n        }\n        try {\n            java.lang.Object providerService = org.openmrs.api.context.Context.getService(org.openmrs.api.context.Context.loadClass(\"org.openmrs.api.ProviderService\"));\n            java.lang.reflect.Method getProvidersMethod = providerService.getClass().getMethod(\"getAllProviders\");\n            @java.lang.SuppressWarnings(\"rawtypes\")\n            java.util.List allProviders = ((java.util.List) (getProvidersMethod.invoke(providerService)));\n            java.util.List<java.lang.Object> ret = new java.util.ArrayList<java.lang.Object>();\n            for (java.lang.Object provider : allProviders) {\n                org.openmrs.Person person = ((org.openmrs.Person) (org.apache.commons.beanutils.PropertyUtils.getProperty(provider, \"person\")));\n                if (person != null) {\n                    ret.add(provider);\n                }\n            }\n            return ret;\n        } catch (java.lang.Exception ex) {\n            throw new java.lang.RuntimeException(\"Programming error in HTML Form Entry module. This method should be safe!\", ex);\n        }\n    }\n\n    private java.util.List<org.openmrs.module.htmlformentry.element.PersonStub> getAllProvidersThatArePersonsAsPersonStubs() {\n        try {\n            java.util.List<org.openmrs.module.htmlformentry.element.PersonStub> ret = new java.util.ArrayList<org.openmrs.module.htmlformentry.element.PersonStub>();\n            for (java.lang.Object provider : getAllProvidersThatArePersons()) {\n                org.openmrs.Person person = ((org.openmrs.Person) (org.apache.commons.beanutils.PropertyUtils.getProperty(provider, \"person\")));\n                ret.add(new org.openmrs.module.htmlformentry.element.PersonStub(person));\n            }\n            return ret;\n        } catch (java.lang.Exception ex) {\n            throw new java.lang.RuntimeException(\"Programming error in HTML Form Entry module. This method should be safe!\", ex);\n        }\n    }\n\n    private java.util.Set<java.lang.Integer> getAllProviderPersonIds() {\n        try {\n            java.util.Set<java.lang.Integer> ret = new java.util.HashSet<java.lang.Integer>();\n            for (java.lang.Object candidate : getAllProvidersThatArePersons()) {\n                org.openmrs.Person person = ((org.openmrs.Person) (org.apache.commons.beanutils.PropertyUtils.getProperty(candidate, \"person\")));\n                if (person != null) {\n                    ret.add(person.getPersonId());\n                }\n            }\n            return ret;\n        } catch (java.lang.Exception ex) {\n            throw new java.lang.RuntimeException(\"Programming error in HTML Form Entry module. This method should be safe!\", ex);\n        }\n    }\n\n    @java.lang.Override\n    public java.lang.String generateHtml(org.openmrs.module.htmlformentry.FormEntryContext context) {\n        java.lang.StringBuilder ret = new java.lang.StringBuilder();\n        if ((id != null) || (!context.getMode().equals(Mode.VIEW))) {\n            if (dateWidget != null) {\n                id = (id != null) ? id : \"encounterDate\";\n                context.registerPropertyAccessorInfo(id + \".value\", context.getFieldNameIfRegistered(dateWidget), \"dateFieldGetterFunction\", null, \"dateSetterFunction\");\n                context.registerPropertyAccessorInfo(id + \".error\", context.getFieldNameIfRegistered(dateErrorWidget), null, null, null);\n            } else if (providerWidget != null) {\n                id = (id != null) ? id : \"encounterProvider\";\n                context.registerPropertyAccessorInfo(id + \".value\", context.getFieldNameIfRegistered(providerWidget), null, getGetterFunction(providerWidget), getSetterFunction(providerWidget));\n                context.registerPropertyAccessorInfo(id + \".error\", context.getFieldNameIfRegistered(providerErrorWidget), null, null, null);\n            } else if (locationWidget != null) {\n                id = (id != null) ? id : \"encounterLocation\";\n                context.registerPropertyAccessorInfo(id + \".value\", context.getFieldNameIfRegistered(locationWidget), null, getGetterFunction(locationWidget), getSetterFunction(locationWidget));\n                context.registerPropertyAccessorInfo(id + \".error\", context.getFieldNameIfRegistered(locationErrorWidget), null, null, null);\n            } else if (encounterTypeWidget != null) {\n                id = (id != null) ? id : \"encounterType\";\n                context.registerPropertyAccessorInfo(id + \".value\", context.getFieldNameIfRegistered(encounterTypeWidget), null, null, null);\n                context.registerPropertyAccessorInfo(id + \".error\", context.getFieldNameIfRegistered(encounterTypeErrorWidget), null, null, null);\n            }\n            ret.append((\"<span id='\" + id) + \"'>\");\n        }\n        if (dateWidget != null) {\n            ret.append(dateWidget.generateHtml(context));\n            if (context.getMode() != org.openmrs.module.htmlformentry.FormEntryContext.Mode.VIEW) {\n                ret.append(dateErrorWidget.generateHtml(context));\n            }\n        }\n        if (timeWidget != null) {\n            if ((!timeWidget.isHidden()) || (context.getMode() == org.openmrs.module.htmlformentry.FormEntryContext.Mode.VIEW)) {\n                ret.append(\"&#160;\");\n            }\n            ret.append(timeWidget.generateHtml(context));\n            if (context.getMode() != org.openmrs.module.htmlformentry.FormEntryContext.Mode.VIEW) {\n                ret.append(timeErrorWidget.generateHtml(context));\n            }\n        }\n        if (providerWidget != null) {\n            ret.append(providerWidget.generateHtml(context));\n            if (context.getMode() != org.openmrs.module.htmlformentry.FormEntryContext.Mode.VIEW) {\n                ret.append(providerErrorWidget.generateHtml(context));\n            }\n        }\n        if (locationWidget != null) {\n            ret.append(locationWidget.generateHtml(context));\n            if (context.getMode() != org.openmrs.module.htmlformentry.FormEntryContext.Mode.VIEW) {\n                ret.append(locationErrorWidget.generateHtml(context));\n            }\n        }\n        if (encounterTypeWidget != null) {\n            ret.append(encounterTypeWidget.generateHtml(context));\n            if (context.getMode() != org.openmrs.module.htmlformentry.FormEntryContext.Mode.VIEW) {\n                ret.append(encounterTypeErrorWidget.generateHtml(context));\n            }\n        }\n        if (voidWidget != null) {\n            if (context.getMode() == org.openmrs.module.htmlformentry.FormEntryContext.Mode.EDIT) {\n                ret.append(voidWidget.generateHtml(context));\n            }\n        }\n        if (id != null) {\n            ret.append(\"</span>\");\n        }\n        return ret.toString();\n    }\n\n    private java.lang.String getGetterFunction(org.openmrs.module.htmlformentry.widget.Widget widget) {\n        if (widget == null) {\n            return null;\n        }\n        if (widget instanceof org.openmrs.module.htmlformentry.widget.AutocompleteWidget) {\n            return \"autocompleteGetterFunction\";\n        }\n        return null;\n    }\n\n    private java.lang.String getSetterFunction(org.openmrs.module.htmlformentry.widget.Widget widget) {\n        if (widget == null) {\n            return null;\n        }\n        if (widget instanceof org.openmrs.module.htmlformentry.widget.AutocompleteWidget) {\n            return \"autocompleteSetterFunction\";\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.util.Collection<org.openmrs.module.htmlformentry.FormSubmissionError> validateSubmission(org.openmrs.module.htmlformentry.FormEntryContext context, javax.servlet.http.HttpServletRequest submission) {\n        java.util.List<org.openmrs.module.htmlformentry.FormSubmissionError> ret = new java.util.ArrayList<org.openmrs.module.htmlformentry.FormSubmissionError>();\n        try {\n            if (dateWidget != null) {\n                java.util.Date date = ((java.util.Date) (dateWidget.getValue(context, submission)));\n                if (timeWidget != null) {\n                    java.util.Date time = ((java.util.Date) (timeWidget.getValue(context, submission)));\n                    date = org.openmrs.module.htmlformentry.HtmlFormEntryUtil.combineDateAndTime(date, time);\n                }\n                if (date == null) {\n                    throw new java.lang.Exception(\"htmlformentry.error.required\");\n                }\n                if (org.openmrs.util.OpenmrsUtil.compare(((java.util.Date) (date)), new java.util.Date()) > 0) {\n                    throw new java.lang.Exception(\"htmlformentry.error.cannotBeInFuture\");\n                }\n            }\n        } catch (java.lang.Exception ex) {\n            ret.add(new org.openmrs.module.htmlformentry.FormSubmissionError(context.getFieldName(dateErrorWidget), org.openmrs.api.context.Context.getMessageSourceService().getMessage(ex.getMessage())));\n        }\n        try {\n            if (providerWidget != null) {\n                java.lang.Object value = providerWidget.getValue(context, submission);\n                if (value == null) {\n                    if (providerRequired) {\n                        throw new java.lang.Exception(\"required\");\n                    }\n                } else {\n                    org.openmrs.Person provider = ((org.openmrs.Person) (convertValueToProvider(value)));\n                    if (provider == null) {\n                        if (providerRequired) {\n                            throw new java.lang.Exception(\"required\");\n                        }\n                    }\n                }\n            }\n        } catch (java.lang.Exception ex) {\n            ret.add(new org.openmrs.module.htmlformentry.FormSubmissionError(context.getFieldName(providerErrorWidget), org.openmrs.api.context.Context.getMessageSourceService().getMessage(ex.getMessage())));\n        }\n        try {\n            if (locationWidget != null) {\n                java.lang.Object value = locationWidget.getValue(context, submission);\n                if (value == null) {\n                    if (locationRequired) {\n                        throw new java.lang.Exception(\"required\");\n                    }\n                } else {\n                    org.openmrs.Location location = ((org.openmrs.Location) (org.openmrs.module.htmlformentry.HtmlFormEntryUtil.convertToType(value.toString().trim(), org.openmrs.Location.class)));\n                    if (location == null) {\n                        log.debug(\"Location Required \" + locationRequired);\n                        if (locationRequired) {\n                            throw new java.lang.Exception(\"required\");\n                        }\n                    }\n                }\n            }\n        } catch (java.lang.Exception ex) {\n            ret.add(new org.openmrs.module.htmlformentry.FormSubmissionError(context.getFieldName(locationErrorWidget), org.openmrs.api.context.Context.getMessageSourceService().getMessage(ex.getMessage())));\n        }\n        try {\n            if (encounterTypeWidget != null) {\n                java.lang.Object encounterType = encounterTypeWidget.getValue(context, submission);\n                java.lang.System.out.println(((\"the location widget initial value \" + encounterTypeWidget.getClass()) + \" actual value \") + encounterType);\n                if (encounterType == null) {\n                    throw new java.lang.Exception(\"required\");\n                }\n            }\n        } catch (java.lang.Exception ex) {\n            ret.add(new org.openmrs.module.htmlformentry.FormSubmissionError(context.getFieldName(encounterTypeErrorWidget), org.openmrs.api.context.Context.getMessageSourceService().getMessage(ex.getMessage())));\n        }\n        return ret;\n    }\n\n    private java.lang.Object convertValueToProvider(java.lang.Object value) {\n        java.lang.String val = ((java.lang.String) (value));\n        if (org.springframework.util.StringUtils.hasText(val)) {\n            return org.openmrs.module.htmlformentry.HtmlFormEntryUtil.convertToType(val.trim(), org.openmrs.Person.class);\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public void handleSubmission(org.openmrs.module.htmlformentry.FormEntrySession session, javax.servlet.http.HttpServletRequest submission) {\n        if (dateWidget != null) {\n            java.util.Date date = ((java.util.Date) (dateWidget.getValue(session.getContext(), submission)));\n            java.util.Date previousDate = session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime();\n            if (previousDate == null) {\n                session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date);\n            } else if (hasTimeComponent(date) || (!stripTimeComponent(date).equals(stripTimeComponent(previousDate)))) {\n                session.getContext().setPreviousEncounterDate(new java.util.Date(session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime().getTime()));\n                session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date);\n            }\n        }\n        if (timeWidget != null) {\n            java.util.Date time = ((java.util.Date) (timeWidget.getValue(session.getContext(), submission)));\n            org.openmrs.Encounter e = session.getSubmissionActions().getCurrentEncounter();\n            java.util.Date dateAndTime = org.openmrs.module.htmlformentry.HtmlFormEntryUtil.combineDateAndTime(e.getEncounterDatetime(), time);\n            e.setEncounterDatetime(dateAndTime);\n        }\n        if (providerWidget != null) {\n            java.lang.Object value = providerWidget.getValue(session.getContext(), submission);\n            if (value != null) {\n                org.openmrs.Person person = ((org.openmrs.Person) (convertValueToProvider(value)));\n                org.openmrs.module.htmlformentry.compatibility.EncounterCompatibility.setProvider(session.getSubmissionActions().getCurrentEncounter(), person);\n            }\n        }\n        if (locationWidget != null) {\n            java.lang.Object value = locationWidget.getValue(session.getContext(), submission);\n            if (value != null) {\n                org.openmrs.Location location = ((org.openmrs.Location) (org.openmrs.module.htmlformentry.HtmlFormEntryUtil.convertToType(value.toString().trim(), org.openmrs.Location.class)));\n                session.getSubmissionActions().getCurrentEncounter().setLocation(location);\n            }\n        }\n        if (encounterTypeWidget != null) {\n            org.openmrs.EncounterType encounterType = ((org.openmrs.EncounterType) (encounterTypeWidget.getValue(session.getContext(), submission)));\n            session.getSubmissionActions().getCurrentEncounter().setEncounterType(encounterType);\n        }\n        if (voidWidget != null) {\n            if (\"true\".equals(voidWidget.getValue(session.getContext(), submission))) {\n                session.setVoidEncounter(true);\n            } else if (\"false\".equals(voidWidget.getValue(session.getContext(), submission))) {\n            }\n        }\n    }\n\n    private boolean hasTimeComponent(java.util.Date date) {\n        return !new org.joda.time.DateMidnight(date).toDate().equals(date);\n    }\n\n    private org.joda.time.DateMidnight stripTimeComponent(java.util.Date date) {\n        return new org.joda.time.DateMidnight(date);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.util.Date previousDate = session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime()",
            "src_parent": "{\n    java.util.Date date = ((java.util.Date) (dateWidget.getValue(session.getContext(), submission)));\n    java.util.Date previousDate = session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime();\n    if (previousDate == null) {\n        session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date);\n    } else if (hasTimeComponent(date) || (!stripTimeComponent(date).equals(stripTimeComponent(previousDate)))) {\n        session.getContext().setPreviousEncounterDate(new java.util.Date(session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime().getTime()));\n        session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (previousDate == null) {\n    session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date);\n} else if (hasTimeComponent(date) || (!stripTimeComponent(date).equals(stripTimeComponent(previousDate)))) {\n    session.getContext().setPreviousEncounterDate(new java.util.Date(session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime().getTime()));\n    session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date);\n}",
            "src_parent": "{\n    java.util.Date date = ((java.util.Date) (dateWidget.getValue(session.getContext(), submission)));\n    java.util.Date previousDate = session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime();\n    if (previousDate == null) {\n        session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date);\n    } else if (hasTimeComponent(date) || (!stripTimeComponent(date).equals(stripTimeComponent(previousDate)))) {\n        session.getContext().setPreviousEncounterDate(new java.util.Date(session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime().getTime()));\n        session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "session.getSubmissionActions().getCurrentEncounter()",
            "src_parent": "session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date)",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "date",
            "src_parent": "session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "session",
            "src_parent": "session.getSubmissionActions()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime()",
            "dst_parent": "java.util.Date previousDate = session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime()",
            "src_parent": "(session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime() != null)",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "previousDate == null",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Literal",
            "operator": "MOV",
            "src": "null",
            "src_parent": "(session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime() != null)",
            "src_parent_type": "BinaryOperator",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "session.getSubmissionActions().getCurrentEncounter()",
            "dst_parent": "session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date)",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "session.getSubmissionActions().getCurrentEncounter()",
            "src_parent": "session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    session.getContext().setPreviousEncounterDate(new java.util.Date(session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime().getTime()));\n    session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date);\n}",
            "dst_parent": "if (hasTimeComponent(date) || (!stripTimeComponent(date).equals(stripTimeComponent(previousDate)))) {\n    session.getContext().setPreviousEncounterDate(new java.util.Date(session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime().getTime()));\n    session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date);\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    session.getContext().setPreviousEncounterDate(new java.util.Date(session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime().getTime()));\n}",
            "src_parent": "if ((session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime() != null) && (!session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime().equals(date))) {\n    session.getContext().setPreviousEncounterDate(new java.util.Date(session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime().getTime()));\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "date",
            "dst_parent": "hasTimeComponent(date)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "date",
            "src_parent": "session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime().equals(date)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "stripTimeComponent(date)",
            "dst_parent": "stripTimeComponent(date).equals(stripTimeComponent(previousDate))",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "session.getSubmissionActions().getCurrentEncounter()",
            "src_parent": "session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date)",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "session.getSubmissionActions()",
            "dst_parent": "session.getSubmissionActions().getCurrentEncounter()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "session.getSubmissionActions()",
            "src_parent": "session.getSubmissionActions().getCurrentEncounter()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "previousDate",
            "dst_parent": "stripTimeComponent(previousDate)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "date",
            "src_parent": "session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        }
      ],
      "file_name": "EncounterDetailSubmissionElement"
    }
  ],
  "id": "bears_228"
}