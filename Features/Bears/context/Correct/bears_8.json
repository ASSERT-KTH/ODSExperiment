{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "protected boolean _hasNullKey(java.util.Map<?, ?> input) {\n    return (input instanceof java.util.HashMap) && input.containsKey(null);\n}",
            "src_parent": "@com.fasterxml.jackson.databind.annotation.JacksonStdImpl\npublic class MapSerializer extends com.fasterxml.jackson.databind.ser.ContainerSerializer<java.util.Map<?, ?>> implements com.fasterxml.jackson.databind.ser.ContextualSerializer {\n    private static final long serialVersionUID = 1L;\n\n    protected static final com.fasterxml.jackson.databind.JavaType UNSPECIFIED_TYPE = com.fasterxml.jackson.databind.type.TypeFactory.unknownType();\n\n    protected final com.fasterxml.jackson.databind.BeanProperty _property;\n\n    protected final java.util.Set<java.lang.String> _ignoredEntries;\n\n    protected final boolean _valueTypeIsStatic;\n\n    protected final com.fasterxml.jackson.databind.JavaType _keyType;\n\n    protected final com.fasterxml.jackson.databind.JavaType _valueType;\n\n    protected com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> _keySerializer;\n\n    protected com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> _valueSerializer;\n\n    protected final com.fasterxml.jackson.databind.jsontype.TypeSerializer _valueTypeSerializer;\n\n    protected com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap _dynamicValueSerializers;\n\n    protected final java.lang.Object _filterId;\n\n    protected final boolean _sortKeys;\n\n    protected final java.lang.Object _suppressableValue;\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    protected MapSerializer(java.util.Set<java.lang.String> ignoredEntries, com.fasterxml.jackson.databind.JavaType keyType, com.fasterxml.jackson.databind.JavaType valueType, boolean valueTypeIsStatic, com.fasterxml.jackson.databind.jsontype.TypeSerializer vts, com.fasterxml.jackson.databind.JsonSerializer<?> keySerializer, com.fasterxml.jackson.databind.JsonSerializer<?> valueSerializer) {\n        super(java.util.Map.class, false);\n        _ignoredEntries = ((ignoredEntries == null) || ignoredEntries.isEmpty()) ? null : ignoredEntries;\n        _keyType = keyType;\n        _valueType = valueType;\n        _valueTypeIsStatic = valueTypeIsStatic;\n        _valueTypeSerializer = vts;\n        _keySerializer = ((com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>) (keySerializer));\n        _valueSerializer = ((com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>) (valueSerializer));\n        _dynamicValueSerializers = com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyForProperties();\n        _property = null;\n        _filterId = null;\n        _sortKeys = false;\n        _suppressableValue = null;\n    }\n\n    protected void _ensureOverride() {\n        if (getClass() != com.fasterxml.jackson.databind.ser.std.MapSerializer.class) {\n            throw new java.lang.IllegalStateException(\"Missing override in class \" + getClass().getName());\n        }\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    protected MapSerializer(com.fasterxml.jackson.databind.ser.std.MapSerializer src, com.fasterxml.jackson.databind.BeanProperty property, com.fasterxml.jackson.databind.JsonSerializer<?> keySerializer, com.fasterxml.jackson.databind.JsonSerializer<?> valueSerializer, java.util.Set<java.lang.String> ignoredEntries) {\n        super(java.util.Map.class, false);\n        _ignoredEntries = ((ignoredEntries == null) || ignoredEntries.isEmpty()) ? null : ignoredEntries;\n        _keyType = src._keyType;\n        _valueType = src._valueType;\n        _valueTypeIsStatic = src._valueTypeIsStatic;\n        _valueTypeSerializer = src._valueTypeSerializer;\n        _keySerializer = ((com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>) (keySerializer));\n        _valueSerializer = ((com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>) (valueSerializer));\n        _dynamicValueSerializers = src._dynamicValueSerializers;\n        _property = property;\n        _filterId = src._filterId;\n        _sortKeys = src._sortKeys;\n        _suppressableValue = src._suppressableValue;\n    }\n\n    @java.lang.Deprecated\n    protected MapSerializer(com.fasterxml.jackson.databind.ser.std.MapSerializer src, com.fasterxml.jackson.databind.jsontype.TypeSerializer vts) {\n        this(src, vts, src._suppressableValue);\n    }\n\n    protected MapSerializer(com.fasterxml.jackson.databind.ser.std.MapSerializer src, com.fasterxml.jackson.databind.jsontype.TypeSerializer vts, java.lang.Object suppressableValue) {\n        super(java.util.Map.class, false);\n        _ignoredEntries = src._ignoredEntries;\n        _keyType = src._keyType;\n        _valueType = src._valueType;\n        _valueTypeIsStatic = src._valueTypeIsStatic;\n        _valueTypeSerializer = vts;\n        _keySerializer = src._keySerializer;\n        _valueSerializer = src._valueSerializer;\n        _dynamicValueSerializers = src._dynamicValueSerializers;\n        _property = src._property;\n        _filterId = src._filterId;\n        _sortKeys = src._sortKeys;\n        if (suppressableValue == com.fasterxml.jackson.annotation.JsonInclude.Include.NON_ABSENT) {\n            suppressableValue = (_valueType.isReferenceType()) ? com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY : com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;\n        }\n        _suppressableValue = suppressableValue;\n    }\n\n    protected MapSerializer(com.fasterxml.jackson.databind.ser.std.MapSerializer src, java.lang.Object filterId, boolean sortKeys) {\n        super(java.util.Map.class, false);\n        _ignoredEntries = src._ignoredEntries;\n        _keyType = src._keyType;\n        _valueType = src._valueType;\n        _valueTypeIsStatic = src._valueTypeIsStatic;\n        _valueTypeSerializer = src._valueTypeSerializer;\n        _keySerializer = src._keySerializer;\n        _valueSerializer = src._valueSerializer;\n        _dynamicValueSerializers = src._dynamicValueSerializers;\n        _property = src._property;\n        _filterId = filterId;\n        _sortKeys = sortKeys;\n        _suppressableValue = src._suppressableValue;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.ser.std.MapSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer vts) {\n        if (_valueTypeSerializer == vts) {\n            return this;\n        }\n        _ensureOverride();\n        return new com.fasterxml.jackson.databind.ser.std.MapSerializer(this, vts, null);\n    }\n\n    public com.fasterxml.jackson.databind.ser.std.MapSerializer withResolved(com.fasterxml.jackson.databind.BeanProperty property, com.fasterxml.jackson.databind.JsonSerializer<?> keySerializer, com.fasterxml.jackson.databind.JsonSerializer<?> valueSerializer, java.util.Set<java.lang.String> ignored, boolean sortKeys) {\n        _ensureOverride();\n        com.fasterxml.jackson.databind.ser.std.MapSerializer ser = new com.fasterxml.jackson.databind.ser.std.MapSerializer(this, property, keySerializer, valueSerializer, ignored);\n        if (sortKeys != ser._sortKeys) {\n            ser = new com.fasterxml.jackson.databind.ser.std.MapSerializer(ser, _filterId, sortKeys);\n        }\n        return ser;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.ser.std.MapSerializer withFilterId(java.lang.Object filterId) {\n        if (_filterId == filterId) {\n            return this;\n        }\n        _ensureOverride();\n        return new com.fasterxml.jackson.databind.ser.std.MapSerializer(this, filterId, _sortKeys);\n    }\n\n    public com.fasterxml.jackson.databind.ser.std.MapSerializer withContentInclusion(java.lang.Object suppressableValue) {\n        if (suppressableValue == _suppressableValue) {\n            return this;\n        }\n        _ensureOverride();\n        return new com.fasterxml.jackson.databind.ser.std.MapSerializer(this, _valueTypeSerializer, suppressableValue);\n    }\n\n    @java.lang.Deprecated\n    public static com.fasterxml.jackson.databind.ser.std.MapSerializer construct(java.lang.String[] ignoredList, com.fasterxml.jackson.databind.JavaType mapType, boolean staticValueType, com.fasterxml.jackson.databind.jsontype.TypeSerializer vts, com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> keySerializer, com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> valueSerializer, java.lang.Object filterId) {\n        java.util.Set<java.lang.String> ignoredEntries = ((ignoredList == null) || (ignoredList.length == 0)) ? null : com.fasterxml.jackson.databind.util.ArrayBuilders.arrayToSet(ignoredList);\n        return com.fasterxml.jackson.databind.ser.std.MapSerializer.construct(ignoredEntries, mapType, staticValueType, vts, keySerializer, valueSerializer, filterId);\n    }\n\n    public static com.fasterxml.jackson.databind.ser.std.MapSerializer construct(java.util.Set<java.lang.String> ignoredEntries, com.fasterxml.jackson.databind.JavaType mapType, boolean staticValueType, com.fasterxml.jackson.databind.jsontype.TypeSerializer vts, com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> keySerializer, com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> valueSerializer, java.lang.Object filterId) {\n        com.fasterxml.jackson.databind.JavaType keyType;\n        com.fasterxml.jackson.databind.JavaType valueType;\n        if (mapType == null) {\n            keyType = valueType = com.fasterxml.jackson.databind.ser.std.MapSerializer.UNSPECIFIED_TYPE;\n        } else {\n            keyType = mapType.getKeyType();\n            valueType = mapType.getContentType();\n        }\n        if (!staticValueType) {\n            staticValueType = (valueType != null) && valueType.isFinal();\n        } else if (valueType.getRawClass() == java.lang.Object.class) {\n            staticValueType = false;\n        }\n        com.fasterxml.jackson.databind.ser.std.MapSerializer ser = new com.fasterxml.jackson.databind.ser.std.MapSerializer(ignoredEntries, keyType, valueType, staticValueType, vts, keySerializer, valueSerializer);\n        if (filterId != null) {\n            ser = ser.withFilterId(filterId);\n        }\n        return ser;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonSerializer<?> createContextual(com.fasterxml.jackson.databind.SerializerProvider provider, com.fasterxml.jackson.databind.BeanProperty property) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n        com.fasterxml.jackson.databind.JsonSerializer<?> keySer = null;\n        final com.fasterxml.jackson.databind.AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n        final com.fasterxml.jackson.databind.introspect.AnnotatedMember propertyAcc = (property == null) ? null : property.getMember();\n        java.lang.Object suppressableValue = _suppressableValue;\n        if ((propertyAcc != null) && (intr != null)) {\n            java.lang.Object serDef = intr.findKeySerializer(propertyAcc);\n            if (serDef != null) {\n                keySer = provider.serializerInstance(propertyAcc, serDef);\n            }\n            serDef = intr.findContentSerializer(propertyAcc);\n            if (serDef != null) {\n                ser = provider.serializerInstance(propertyAcc, serDef);\n            }\n        }\n        com.fasterxml.jackson.annotation.JsonInclude.Value inclV = findIncludeOverrides(provider, property, java.util.Map.class);\n        com.fasterxml.jackson.annotation.JsonInclude.Include incl = inclV.getContentInclusion();\n        if ((incl != null) && (incl != com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS)) {\n            suppressableValue = incl;\n        }\n        if (ser == null) {\n            ser = _valueSerializer;\n        }\n        ser = findConvertingContentSerializer(provider, property, ser);\n        if (ser == null) {\n            if (_valueTypeIsStatic && (!_valueType.isJavaLangObject())) {\n                ser = provider.findValueSerializer(_valueType, property);\n            }\n        } else {\n            ser = provider.handleSecondaryContextualization(ser, property);\n        }\n        if (keySer == null) {\n            keySer = _keySerializer;\n        }\n        if (keySer == null) {\n            keySer = provider.findKeySerializer(_keyType, property);\n        } else {\n            keySer = provider.handleSecondaryContextualization(keySer, property);\n        }\n        java.util.Set<java.lang.String> ignored = _ignoredEntries;\n        boolean sortKeys = false;\n        if ((intr != null) && (propertyAcc != null)) {\n            com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value ignorals = intr.findPropertyIgnorals(propertyAcc);\n            if (ignorals != null) {\n                java.util.Set<java.lang.String> newIgnored = ignorals.findIgnoredForSerialization();\n                if ((newIgnored != null) && (!newIgnored.isEmpty())) {\n                    ignored = (ignored == null) ? new java.util.HashSet<java.lang.String>() : new java.util.HashSet<java.lang.String>(ignored);\n                    for (java.lang.String str : newIgnored) {\n                        ignored.add(str);\n                    }\n                }\n            }\n            java.lang.Boolean b = intr.findSerializationSortAlphabetically(propertyAcc);\n            sortKeys = (b != null) && b.booleanValue();\n        }\n        com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(provider, property, java.util.Map.class);\n        if (format != null) {\n            java.lang.Boolean B = format.getFeature(com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_SORTED_MAP_ENTRIES);\n            if (B != null) {\n                sortKeys = B.booleanValue();\n            }\n        }\n        com.fasterxml.jackson.databind.ser.std.MapSerializer mser = withResolved(property, keySer, ser, ignored, sortKeys);\n        if (suppressableValue != _suppressableValue) {\n            mser = mser.withContentInclusion(suppressableValue);\n        }\n        if (property != null) {\n            com.fasterxml.jackson.databind.introspect.AnnotatedMember m = property.getMember();\n            if (m != null) {\n                java.lang.Object filterId = intr.findFilterId(m);\n                if (filterId != null) {\n                    mser = mser.withFilterId(filterId);\n                }\n            }\n        }\n        return mser;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JavaType getContentType() {\n        return _valueType;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonSerializer<?> getContentSerializer() {\n        return _valueSerializer;\n    }\n\n    @java.lang.Override\n    public boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider prov, java.util.Map<?, ?> value) {\n        if ((value == null) || value.isEmpty()) {\n            return true;\n        }\n        java.lang.Object supp = _suppressableValue;\n        if ((supp == null) || (supp == com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS)) {\n            return false;\n        }\n        com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> valueSer = _valueSerializer;\n        if (valueSer != null) {\n            for (java.lang.Object elemValue : value.values()) {\n                if ((elemValue != null) && (!valueSer.isEmpty(prov, elemValue))) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap serializers = _dynamicValueSerializers;\n        for (java.lang.Object elemValue : value.values()) {\n            if (elemValue == null) {\n                continue;\n            }\n            java.lang.Class<?> cc = elemValue.getClass();\n            valueSer = serializers.serializerFor(cc);\n            if (valueSer == null) {\n                try {\n                    valueSer = _findAndAddDynamic(serializers, cc, prov);\n                } catch (com.fasterxml.jackson.databind.JsonMappingException e) {\n                    return false;\n                }\n                serializers = _dynamicValueSerializers;\n            }\n            if (!valueSer.isEmpty(prov, elemValue)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    @java.lang.Override\n    public boolean hasSingleElement(java.util.Map<?, ?> value) {\n        return value.size() == 1;\n    }\n\n    public com.fasterxml.jackson.databind.JsonSerializer<?> getKeySerializer() {\n        return _keySerializer;\n    }\n\n    @java.lang.Override\n    public void serialize(java.util.Map<?, ?> value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider provider) throws java.io.IOException {\n        gen.writeStartObject(value);\n        if (!value.isEmpty()) {\n            java.lang.Object suppressableValue = _suppressableValue;\n            if (suppressableValue == com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS) {\n                suppressableValue = null;\n            } else if (suppressableValue == null) {\n                if (!provider.isEnabled(com.fasterxml.jackson.databind.SerializationFeature.WRITE_NULL_MAP_VALUES)) {\n                    suppressableValue = com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;\n                }\n            }\n            if (_sortKeys || provider.isEnabled(com.fasterxml.jackson.databind.SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS)) {\n                value = _orderEntries(value, gen, provider, suppressableValue);\n            }\n            com.fasterxml.jackson.databind.ser.PropertyFilter pf;\n            if ((_filterId != null) && ((pf = findPropertyFilter(provider, _filterId, value)) != null)) {\n                serializeFilteredFields(value, gen, provider, pf, suppressableValue);\n            } else if (suppressableValue != null) {\n                serializeOptionalFields(value, gen, provider, suppressableValue);\n            } else if (_valueSerializer != null) {\n                serializeFieldsUsing(value, gen, provider, _valueSerializer);\n            } else {\n                serializeFields(value, gen, provider);\n            }\n        }\n        gen.writeEndObject();\n    }\n\n    @java.lang.Override\n    public void serializeWithType(java.util.Map<?, ?> value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider provider, com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSer) throws java.io.IOException {\n        typeSer.writeTypePrefixForObject(value, gen);\n        gen.setCurrentValue(value);\n        if (!value.isEmpty()) {\n            java.lang.Object suppressableValue = _suppressableValue;\n            if (suppressableValue == com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS) {\n                suppressableValue = null;\n            } else if (suppressableValue == null) {\n                if (!provider.isEnabled(com.fasterxml.jackson.databind.SerializationFeature.WRITE_NULL_MAP_VALUES)) {\n                    suppressableValue = com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;\n                }\n            }\n            if (_sortKeys || provider.isEnabled(com.fasterxml.jackson.databind.SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS)) {\n                value = _orderEntries(value, gen, provider, suppressableValue);\n            }\n            com.fasterxml.jackson.databind.ser.PropertyFilter pf;\n            if ((_filterId != null) && ((pf = findPropertyFilter(provider, _filterId, value)) != null)) {\n                serializeFilteredFields(value, gen, provider, pf, suppressableValue);\n            } else if (suppressableValue != null) {\n                serializeOptionalFields(value, gen, provider, suppressableValue);\n            } else if (_valueSerializer != null) {\n                serializeFieldsUsing(value, gen, provider, _valueSerializer);\n            } else {\n                serializeFields(value, gen, provider);\n            }\n        }\n        typeSer.writeTypeSuffixForObject(value, gen);\n    }\n\n    public void serializeFields(java.util.Map<?, ?> value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider provider) throws java.io.IOException {\n        if (_valueTypeSerializer != null) {\n            serializeTypedFields(value, gen, provider, null);\n            return;\n        }\n        final com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> keySerializer = _keySerializer;\n        final java.util.Set<java.lang.String> ignored = _ignoredEntries;\n        com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap serializers = _dynamicValueSerializers;\n        for (java.util.Map.Entry<?, ?> entry : value.entrySet()) {\n            java.lang.Object valueElem = entry.getValue();\n            java.lang.Object keyElem = entry.getKey();\n            if (keyElem == null) {\n                provider.findNullKeySerializer(_keyType, _property).serialize(null, gen, provider);\n            } else {\n                if ((ignored != null) && ignored.contains(keyElem)) {\n                    continue;\n                }\n                keySerializer.serialize(keyElem, gen, provider);\n            }\n            if (valueElem == null) {\n                provider.defaultSerializeNull(gen);\n                continue;\n            }\n            com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> serializer = _valueSerializer;\n            if (serializer == null) {\n                java.lang.Class<?> cc = valueElem.getClass();\n                serializer = serializers.serializerFor(cc);\n                if (serializer == null) {\n                    if (_valueType.hasGenericTypes()) {\n                        serializer = _findAndAddDynamic(serializers, provider.constructSpecializedType(_valueType, cc), provider);\n                    } else {\n                        serializer = _findAndAddDynamic(serializers, cc, provider);\n                    }\n                    serializers = _dynamicValueSerializers;\n                }\n            }\n            try {\n                serializer.serialize(valueElem, gen, provider);\n            } catch (java.lang.Exception e) {\n                java.lang.String keyDesc = \"\" + keyElem;\n                wrapAndThrow(provider, e, value, keyDesc);\n            }\n        }\n    }\n\n    public void serializeOptionalFields(java.util.Map<?, ?> value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider provider, java.lang.Object suppressableValue) throws java.io.IOException {\n        if (_valueTypeSerializer != null) {\n            serializeTypedFields(value, gen, provider, suppressableValue);\n            return;\n        }\n        final java.util.Set<java.lang.String> ignored = _ignoredEntries;\n        com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap serializers = _dynamicValueSerializers;\n        for (java.util.Map.Entry<?, ?> entry : value.entrySet()) {\n            final java.lang.Object keyElem = entry.getKey();\n            com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> keySerializer;\n            if (keyElem == null) {\n                keySerializer = provider.findNullKeySerializer(_keyType, _property);\n            } else {\n                if ((ignored != null) && ignored.contains(keyElem)) {\n                    continue;\n                }\n                keySerializer = _keySerializer;\n            }\n            final java.lang.Object valueElem = entry.getValue();\n            com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> valueSer;\n            if (valueElem == null) {\n                if (suppressableValue != null) {\n                    continue;\n                }\n                valueSer = provider.getDefaultNullValueSerializer();\n            } else {\n                valueSer = _valueSerializer;\n                if (valueSer == null) {\n                    java.lang.Class<?> cc = valueElem.getClass();\n                    valueSer = serializers.serializerFor(cc);\n                    if (valueSer == null) {\n                        if (_valueType.hasGenericTypes()) {\n                            valueSer = _findAndAddDynamic(serializers, provider.constructSpecializedType(_valueType, cc), provider);\n                        } else {\n                            valueSer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicValueSerializers;\n                    }\n                }\n                if ((suppressableValue == com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY) && valueSer.isEmpty(provider, valueElem)) {\n                    continue;\n                }\n            }\n            try {\n                keySerializer.serialize(keyElem, gen, provider);\n                valueSer.serialize(valueElem, gen, provider);\n            } catch (java.lang.Exception e) {\n                java.lang.String keyDesc = \"\" + keyElem;\n                wrapAndThrow(provider, e, value, keyDesc);\n            }\n        }\n    }\n\n    public void serializeFieldsUsing(java.util.Map<?, ?> value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider provider, com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> ser) throws java.io.IOException {\n        final com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> keySerializer = _keySerializer;\n        final java.util.Set<java.lang.String> ignored = _ignoredEntries;\n        final com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSer = _valueTypeSerializer;\n        for (java.util.Map.Entry<?, ?> entry : value.entrySet()) {\n            java.lang.Object keyElem = entry.getKey();\n            if ((ignored != null) && ignored.contains(keyElem)) {\n                continue;\n            }\n            if (keyElem == null) {\n                provider.findNullKeySerializer(_keyType, _property).serialize(null, gen, provider);\n            } else {\n                keySerializer.serialize(keyElem, gen, provider);\n            }\n            final java.lang.Object valueElem = entry.getValue();\n            if (valueElem == null) {\n                provider.defaultSerializeNull(gen);\n            } else {\n                try {\n                    if (typeSer == null) {\n                        ser.serialize(valueElem, gen, provider);\n                    } else {\n                        ser.serializeWithType(valueElem, gen, provider, typeSer);\n                    }\n                } catch (java.lang.Exception e) {\n                    java.lang.String keyDesc = \"\" + keyElem;\n                    wrapAndThrow(provider, e, value, keyDesc);\n                }\n            }\n        }\n    }\n\n    public void serializeFilteredFields(java.util.Map<?, ?> value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider provider, com.fasterxml.jackson.databind.ser.PropertyFilter filter, java.lang.Object suppressableValue) throws java.io.IOException {\n        final java.util.Set<java.lang.String> ignored = _ignoredEntries;\n        com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap serializers = _dynamicValueSerializers;\n        final com.fasterxml.jackson.databind.ser.std.MapProperty prop = new com.fasterxml.jackson.databind.ser.std.MapProperty(_valueTypeSerializer, _property);\n        for (java.util.Map.Entry<?, ?> entry : value.entrySet()) {\n            final java.lang.Object keyElem = entry.getKey();\n            if ((ignored != null) && ignored.contains(keyElem)) {\n                continue;\n            }\n            com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> keySerializer;\n            if (keyElem == null) {\n                keySerializer = provider.findNullKeySerializer(_keyType, _property);\n            } else {\n                keySerializer = _keySerializer;\n            }\n            final java.lang.Object valueElem = entry.getValue();\n            com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> valueSer;\n            if (valueElem == null) {\n                if (suppressableValue != null) {\n                    continue;\n                }\n                valueSer = provider.getDefaultNullValueSerializer();\n            } else {\n                valueSer = _valueSerializer;\n                if (valueSer == null) {\n                    java.lang.Class<?> cc = valueElem.getClass();\n                    valueSer = serializers.serializerFor(cc);\n                    if (valueSer == null) {\n                        if (_valueType.hasGenericTypes()) {\n                            valueSer = _findAndAddDynamic(serializers, provider.constructSpecializedType(_valueType, cc), provider);\n                        } else {\n                            valueSer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicValueSerializers;\n                    }\n                }\n                if ((suppressableValue == com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY) && valueSer.isEmpty(provider, valueElem)) {\n                    continue;\n                }\n            }\n            prop.reset(keyElem, keySerializer, valueSer);\n            try {\n                filter.serializeAsField(valueElem, gen, provider, prop);\n            } catch (java.lang.Exception e) {\n                java.lang.String keyDesc = \"\" + keyElem;\n                wrapAndThrow(provider, e, value, keyDesc);\n            }\n        }\n    }\n\n    @java.lang.Deprecated\n    public void serializeFilteredFields(java.util.Map<?, ?> value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider provider, com.fasterxml.jackson.databind.ser.PropertyFilter filter) throws java.io.IOException {\n        serializeFilteredFields(value, gen, provider, filter, provider.isEnabled(com.fasterxml.jackson.databind.SerializationFeature.WRITE_NULL_MAP_VALUES) ? null : com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL);\n    }\n\n    public void serializeTypedFields(java.util.Map<?, ?> value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider provider, java.lang.Object suppressableValue) throws java.io.IOException {\n        final java.util.Set<java.lang.String> ignored = _ignoredEntries;\n        com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap serializers = _dynamicValueSerializers;\n        for (java.util.Map.Entry<?, ?> entry : value.entrySet()) {\n            java.lang.Object keyElem = entry.getKey();\n            com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> keySerializer;\n            if (keyElem == null) {\n                keySerializer = provider.findNullKeySerializer(_keyType, _property);\n            } else {\n                if ((ignored != null) && ignored.contains(keyElem)) {\n                    continue;\n                }\n                keySerializer = _keySerializer;\n            }\n            final java.lang.Object valueElem = entry.getValue();\n            com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> valueSer;\n            if (valueElem == null) {\n                if (suppressableValue != null) {\n                    continue;\n                }\n                valueSer = provider.getDefaultNullValueSerializer();\n            } else {\n                valueSer = _valueSerializer;\n                java.lang.Class<?> cc = valueElem.getClass();\n                valueSer = serializers.serializerFor(cc);\n                if (valueSer == null) {\n                    if (_valueType.hasGenericTypes()) {\n                        valueSer = _findAndAddDynamic(serializers, provider.constructSpecializedType(_valueType, cc), provider);\n                    } else {\n                        valueSer = _findAndAddDynamic(serializers, cc, provider);\n                    }\n                    serializers = _dynamicValueSerializers;\n                }\n                if ((suppressableValue == com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY) && valueSer.isEmpty(provider, valueElem)) {\n                    continue;\n                }\n            }\n            keySerializer.serialize(keyElem, gen, provider);\n            try {\n                valueSer.serializeWithType(valueElem, gen, provider, _valueTypeSerializer);\n            } catch (java.lang.Exception e) {\n                java.lang.String keyDesc = \"\" + keyElem;\n                wrapAndThrow(provider, e, value, keyDesc);\n            }\n        }\n    }\n\n    @java.lang.Deprecated\n    protected void serializeTypedFields(java.util.Map<?, ?> value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider provider) throws java.io.IOException {\n        serializeTypedFields(value, gen, provider, provider.isEnabled(com.fasterxml.jackson.databind.SerializationFeature.WRITE_NULL_MAP_VALUES) ? null : com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider provider, java.lang.reflect.Type typeHint) {\n        return createSchemaNode(\"object\", true);\n    }\n\n    @java.lang.Override\n    public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper visitor, com.fasterxml.jackson.databind.JavaType typeHint) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor v2 = (visitor == null) ? null : visitor.expectMapFormat(typeHint);\n        if (v2 != null) {\n            v2.keyFormat(_keySerializer, _keyType);\n            com.fasterxml.jackson.databind.JsonSerializer<?> valueSer = _valueSerializer;\n            if (valueSer == null) {\n                valueSer = _findAndAddDynamic(_dynamicValueSerializers, _valueType, visitor.getProvider());\n            }\n            v2.valueFormat(valueSer, _valueType);\n        }\n    }\n\n    protected final com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap map, java.lang.Class<?> type, com.fasterxml.jackson.databind.SerializerProvider provider) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSecondarySerializer(type, provider, _property);\n        if (map != result.map) {\n            _dynamicValueSerializers = result.map;\n        }\n        return result.serializer;\n    }\n\n    protected final com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap map, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.SerializerProvider provider) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSecondarySerializer(type, provider, _property);\n        if (map != result.map) {\n            _dynamicValueSerializers = result.map;\n        }\n        return result.serializer;\n    }\n\n    protected java.util.Map<?, ?> _orderEntries(java.util.Map<?, ?> input, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider provider, java.lang.Object suppressableValue) throws java.io.IOException {\n        if (input instanceof java.util.SortedMap<?, ?>) {\n            return input;\n        }\n        if (_hasNullKey(input)) {\n            java.util.TreeMap<java.lang.Object, java.lang.Object> result = new java.util.TreeMap<java.lang.Object, java.lang.Object>();\n            for (java.util.Map.Entry<?, ?> entry : input.entrySet()) {\n                java.lang.Object key = entry.getKey();\n                if (key == null) {\n                    _writeNullKeyedEntry(gen, provider, suppressableValue, entry.getValue());\n                    continue;\n                }\n                result.put(key, entry.getValue());\n            }\n            return result;\n        }\n        return new java.util.TreeMap<java.lang.Object, java.lang.Object>(input);\n    }\n\n    protected boolean _hasNullKey(java.util.Map<?, ?> input) {\n        return (input instanceof java.util.HashMap) && input.containsKey(null);\n    }\n\n    protected void _writeNullKeyedEntry(com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider provider, java.lang.Object suppressableValue, java.lang.Object value) throws java.io.IOException {\n        com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> keySerializer = provider.findNullKeySerializer(_keyType, _property);\n        com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> valueSer;\n        if (value == null) {\n            if (suppressableValue != null) {\n                return;\n            }\n            valueSer = provider.getDefaultNullValueSerializer();\n        } else {\n            valueSer = _valueSerializer;\n            if (valueSer == null) {\n                java.lang.Class<?> cc = value.getClass();\n                valueSer = _dynamicValueSerializers.serializerFor(cc);\n                if (valueSer == null) {\n                    if (_valueType.hasGenericTypes()) {\n                        valueSer = _findAndAddDynamic(_dynamicValueSerializers, provider.constructSpecializedType(_valueType, cc), provider);\n                    } else {\n                        valueSer = _findAndAddDynamic(_dynamicValueSerializers, cc, provider);\n                    }\n                }\n            }\n            if ((suppressableValue == com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY) && valueSer.isEmpty(provider, value)) {\n                return;\n            }\n        }\n        try {\n            keySerializer.serialize(null, gen, provider);\n            valueSer.serialize(value, gen, provider);\n        } catch (java.lang.Exception e) {\n            java.lang.String keyDesc = \"\";\n            wrapAndThrow(provider, e, value, keyDesc);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "_hasNullKey(input)",
            "src_parent": "if (_hasNullKey(input)) {\n    java.util.TreeMap<java.lang.Object, java.lang.Object> result = new java.util.TreeMap<java.lang.Object, java.lang.Object>();\n    for (java.util.Map.Entry<?, ?> entry : input.entrySet()) {\n        java.lang.Object key = entry.getKey();\n        if (key == null) {\n            _writeNullKeyedEntry(gen, provider, suppressableValue, entry.getValue());\n            continue;\n        }\n        result.put(key, entry.getValue());\n    }\n    return result;\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "input.containsKey(null)",
            "dst_parent": "(input instanceof java.util.HashMap) && input.containsKey(null)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "input.containsKey(null)",
            "src_parent": "if (input.containsKey(null)) {\n    java.util.TreeMap<java.lang.Object, java.lang.Object> result = new java.util.TreeMap<java.lang.Object, java.lang.Object>();\n    for (java.util.Map.Entry<?, ?> entry : input.entrySet()) {\n        java.lang.Object key = entry.getKey();\n        if (key == null) {\n            _writeNullKeyedEntry(gen, provider, suppressableValue, entry.getValue());\n            continue;\n        }\n        result.put(key, entry.getValue());\n    }\n    return result;\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "MapSerializer"
    }
  ],
  "id": "bears_8"
}