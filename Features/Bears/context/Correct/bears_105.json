{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Invocation",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Literal",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "\"(d+)?\"",
            "dst_parent": "new org.traccar.helper.PatternBuilder().number(\"dddd\").number(\"(d{6})\").number(\"(d+),\").number(\"d{12},\").number(\"d+,\").number(\"(dd)(dd)(dd)\").number(\"(dd)(dd)(dd),\").groupBegin().number(\"(ddd)(dd)(dddd),\").number(\"(dd)(dd)(dddd),\").or().number(\"(-?d+),\").number(\"(-?d+),\").groupEnd().number(\"(d),\").number(\"(d+),\").number(\"(d+),\").number(\"(d+)?,\").expression(\"(?:[^,]*,){7}\").number(\"(d+),\").expression(\"[^,]*,\").number(\"(d+)?\")",
            "dst_parent_type": "Invocation",
            "dst_type": "Literal",
            "operator": "UPD",
            "src": "\"(d+)\"",
            "src_parent": "new org.traccar.helper.PatternBuilder().number(\"dddd\").number(\"(d{6})\").number(\"(d+),\").number(\"d{12},\").number(\"d+,\").number(\"(dd)(dd)(dd)\").number(\"(dd)(dd)(dd),\").groupBegin().number(\"(ddd)(dd)(dddd),\").number(\"(dd)(dd)(dddd),\").or().number(\"(-?d+),\").number(\"(-?d+),\").groupEnd().number(\"(d),\").number(\"(d+),\").number(\"(d+),\").number(\"(d+)?,\").expression(\"(?:[^,]*,){7}\").number(\"(d+),\").expression(\"[^,]*,\").number(\"(d+)\")",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.traccar.helper.PatternUtil.MatchResult matchResult = org.traccar.protocol.PatternUtil.checkPattern(org.traccar.protocol.TelicProtocolDecoder.PATTERN.pattern(), ((java.lang.String) (msg)))",
            "src_parent": "{\n    org.traccar.helper.PatternUtil.MatchResult matchResult = org.traccar.protocol.PatternUtil.checkPattern(org.traccar.protocol.TelicProtocolDecoder.PATTERN.pattern(), ((java.lang.String) (msg)));\n    org.traccar.helper.Parser parser = new org.traccar.helper.Parser(org.traccar.protocol.TelicProtocolDecoder.PATTERN, ((java.lang.String) (msg)));\n    if (!parser.matches()) {\n        return null;\n    }\n    org.traccar.model.Position position = new org.traccar.model.Position();\n    position.setProtocol(getProtocolName());\n    org.traccar.DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n    position.setDeviceId(deviceSession.getDeviceId());\n    int event = parser.nextInt();\n    position.set(Position.KEY_EVENT, event);\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    if (event == 11) {\n        position.set(Position.KEY_IGNITION, true);\n    } else if (event == 12) {\n        position.set(Position.KEY_IGNITION, false);\n    }\n    position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n    if (parser.hasNext(6)) {\n        position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));\n        position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));\n    }\n    if (parser.hasNext(2)) {\n        position.setLongitude(parser.nextDouble() / 10000);\n        position.setLatitude(parser.nextDouble() / 10000);\n    }\n    position.setValid(parser.nextInt() != 1);\n    position.setSpeed(org.traccar.helper.UnitsConverter.knotsFromKph(parser.nextDouble()));\n    position.setCourse(parser.nextDouble());\n    if (parser.hasNext()) {\n        position.set(Position.KEY_SATELLITES, parser.nextInt());\n    }\n    position.set(Position.KEY_BATTERY, parser.nextInt());\n    if (parser.hasNext()) {\n        position.set(Position.KEY_POWER, parser.nextInt());\n    }\n    return position;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (parser.hasNext()) {\n    position.set(Position.KEY_POWER, parser.nextInt());\n}",
            "src_parent": "{\n    org.traccar.helper.PatternUtil.MatchResult matchResult = org.traccar.protocol.PatternUtil.checkPattern(org.traccar.protocol.TelicProtocolDecoder.PATTERN.pattern(), ((java.lang.String) (msg)));\n    org.traccar.helper.Parser parser = new org.traccar.helper.Parser(org.traccar.protocol.TelicProtocolDecoder.PATTERN, ((java.lang.String) (msg)));\n    if (!parser.matches()) {\n        return null;\n    }\n    org.traccar.model.Position position = new org.traccar.model.Position();\n    position.setProtocol(getProtocolName());\n    org.traccar.DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n    position.setDeviceId(deviceSession.getDeviceId());\n    int event = parser.nextInt();\n    position.set(Position.KEY_EVENT, event);\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    if (event == 11) {\n        position.set(Position.KEY_IGNITION, true);\n    } else if (event == 12) {\n        position.set(Position.KEY_IGNITION, false);\n    }\n    position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n    if (parser.hasNext(6)) {\n        position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));\n        position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));\n    }\n    if (parser.hasNext(2)) {\n        position.setLongitude(parser.nextDouble() / 10000);\n        position.setLatitude(parser.nextDouble() / 10000);\n    }\n    position.setValid(parser.nextInt() != 1);\n    position.setSpeed(org.traccar.helper.UnitsConverter.knotsFromKph(parser.nextDouble()));\n    position.setCourse(parser.nextDouble());\n    if (parser.hasNext()) {\n        position.set(Position.KEY_SATELLITES, parser.nextInt());\n    }\n    position.set(Position.KEY_BATTERY, parser.nextInt());\n    if (parser.hasNext()) {\n        position.set(Position.KEY_POWER, parser.nextInt());\n    }\n    return position;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "position.set(Position.KEY_POWER, parser.nextInt())",
            "dst_parent": "{\n    position.set(Position.KEY_POWER, parser.nextInt());\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "position.set(Position.KEY_POWER, parser.nextInt())",
            "src_parent": "{\n    org.traccar.helper.Parser parser = new org.traccar.helper.Parser(org.traccar.protocol.TelicProtocolDecoder.PATTERN, ((java.lang.String) (msg)));\n    if (!parser.matches()) {\n        return null;\n    }\n    org.traccar.model.Position position = new org.traccar.model.Position();\n    position.setProtocol(getProtocolName());\n    org.traccar.DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n    position.setDeviceId(deviceSession.getDeviceId());\n    int event = parser.nextInt();\n    position.set(Position.KEY_EVENT, event);\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    if (event == 11) {\n        position.set(Position.KEY_IGNITION, true);\n    } else if (event == 12) {\n        position.set(Position.KEY_IGNITION, false);\n    }\n    position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n    if (parser.hasNext(6)) {\n        position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));\n        position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));\n    }\n    if (parser.hasNext(2)) {\n        position.setLongitude(parser.nextDouble() / 10000);\n        position.setLatitude(parser.nextDouble() / 10000);\n    }\n    position.setValid(parser.nextInt() != 1);\n    position.setSpeed(org.traccar.helper.UnitsConverter.knotsFromKph(parser.nextDouble()));\n    position.setCourse(parser.nextDouble());\n    if (parser.hasNext()) {\n        position.set(Position.KEY_SATELLITES, parser.nextInt());\n    }\n    position.set(Position.KEY_BATTERY, parser.nextInt());\n    position.set(Position.KEY_POWER, parser.nextInt());\n    return position;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "TelicProtocolDecoder"
    }
  ],
  "id": "bears_105"
}