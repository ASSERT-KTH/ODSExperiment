{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "spoon.reflect.reference.CtTypeReference actualTA = thatType.getActualTypeArguments().get(0);",
            "src_parent": "public abstract class Substitution {\n    private Substitution() {\n    }\n\n    public static <T extends spoon.template.Template<?>> void insertAll(spoon.reflect.declaration.CtType<?> targetType, T template) {\n        spoon.reflect.declaration.CtClass<T> templateClass = spoon.template.Substitution.getTemplateCtClass(targetType, template);\n        spoon.template.Substitution.insertAllSuperInterfaces(targetType, template);\n        spoon.template.Substitution.insertAllMethods(targetType, template);\n        spoon.template.Substitution.insertAllConstructors(targetType, template);\n        for (spoon.reflect.declaration.CtTypeMember typeMember : templateClass.getTypeMembers()) {\n            if (typeMember instanceof spoon.reflect.declaration.CtField) {\n                spoon.template.Substitution.insertGeneratedField(targetType, template, ((spoon.reflect.declaration.CtField<?>) (typeMember)));\n            } else if (typeMember instanceof spoon.reflect.declaration.CtType) {\n                spoon.template.Substitution.insertGeneratedNestedType(targetType, template, ((spoon.reflect.declaration.CtType) (typeMember)));\n            }\n        }\n    }\n\n    public static void insertAllSuperInterfaces(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template) {\n        spoon.reflect.declaration.CtClass<? extends spoon.template.Template<?>> sourceClass = spoon.template.Substitution.getTemplateCtClass(targetType, template);\n        spoon.template.Substitution.insertAllSuperInterfaces(targetType, template, sourceClass);\n    }\n\n    static void insertAllSuperInterfaces(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template, spoon.reflect.declaration.CtClass<? extends spoon.template.Template<?>> sourceClass) {\n        for (spoon.reflect.reference.CtTypeReference<?> t : sourceClass.getSuperInterfaces()) {\n            if (!t.equals(targetType.getFactory().Type().createReference(spoon.template.Template.class))) {\n                spoon.reflect.reference.CtTypeReference<?> t1 = t;\n                if (spoon.support.template.Parameters.getNames(sourceClass).contains(t.getSimpleName())) {\n                    java.lang.Object o = spoon.support.template.Parameters.getValue(template, t.getSimpleName(), null);\n                    if (o instanceof spoon.reflect.reference.CtTypeReference) {\n                        t1 = ((spoon.reflect.reference.CtTypeReference<?>) (o));\n                    } else if (o instanceof java.lang.Class) {\n                        t1 = targetType.getFactory().Type().createReference(((java.lang.Class<?>) (o)));\n                    } else if (o instanceof java.lang.String) {\n                        t1 = targetType.getFactory().Type().createReference(((java.lang.String) (o)));\n                    }\n                }\n                if (!t1.equals(targetType.getReference())) {\n                    java.lang.Class<?> c = null;\n                    try {\n                        c = t1.getActualClass();\n                    } catch (java.lang.Exception e) {\n                    }\n                    if ((c != null) && c.isInterface()) {\n                        targetType.addSuperInterface(t1);\n                    }\n                    if (c == null) {\n                        targetType.addSuperInterface(t1);\n                    }\n                }\n            }\n        }\n    }\n\n    public static void insertAllMethods(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template) {\n        spoon.reflect.declaration.CtClass<?> sourceClass = spoon.template.Substitution.getTemplateCtClass(targetType, template);\n        spoon.template.Substitution.insertAllMethods(targetType, template, sourceClass);\n    }\n\n    static void insertAllMethods(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template, spoon.reflect.declaration.CtClass<?> sourceClass) {\n        for (spoon.reflect.declaration.CtMethod<?> m : sourceClass.getMethods()) {\n            if (m.getAnnotation(spoon.template.Local.class) != null) {\n                continue;\n            }\n            if (m.getAnnotation(spoon.template.Parameter.class) != null) {\n                continue;\n            }\n            spoon.template.Substitution.insertMethod(targetType, template, m);\n        }\n    }\n\n    public static void insertAllFields(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template) {\n        spoon.reflect.declaration.CtClass<?> sourceClass = spoon.template.Substitution.getTemplateCtClass(targetType, template);\n        for (spoon.reflect.declaration.CtTypeMember typeMember : sourceClass.getTypeMembers()) {\n            if (typeMember instanceof spoon.reflect.declaration.CtField) {\n                spoon.template.Substitution.insertGeneratedField(targetType, template, ((spoon.reflect.declaration.CtField<?>) (typeMember)));\n            }\n        }\n    }\n\n    static void insertGeneratedField(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template, spoon.reflect.declaration.CtField<?> field) {\n        if (field.getAnnotation(spoon.template.Local.class) != null) {\n            return;\n        }\n        if (spoon.support.template.Parameters.isParameterSource(field.getReference())) {\n            return;\n        }\n        spoon.template.Substitution.insertField(targetType, template, field);\n    }\n\n    public static void insertAllNestedTypes(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template) {\n        spoon.reflect.declaration.CtClass<?> sourceClass = spoon.template.Substitution.getTemplateCtClass(targetType, template);\n        for (spoon.reflect.declaration.CtTypeMember typeMember : sourceClass.getTypeMembers()) {\n            if (typeMember instanceof spoon.reflect.declaration.CtType) {\n                spoon.template.Substitution.insertGeneratedNestedType(targetType, template, ((spoon.reflect.declaration.CtType<?>) (typeMember)));\n            }\n        }\n    }\n\n    static void insertGeneratedNestedType(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template, spoon.reflect.declaration.CtType<?> nestedType) {\n        spoon.reflect.declaration.CtClass<?> sourceClass = spoon.template.Substitution.getTemplateCtClass(targetType, template);\n        if (nestedType.getAnnotation(spoon.template.Local.class) != null) {\n            return;\n        }\n        spoon.reflect.declaration.CtType<?> result = spoon.template.Substitution.substitute(sourceClass, template, ((spoon.reflect.declaration.CtType) (nestedType)));\n        targetType.addNestedType(result);\n    }\n\n    public static void insertAllConstructors(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template) {\n        spoon.reflect.declaration.CtClass<?> sourceClass = spoon.template.Substitution.getTemplateCtClass(targetType, template);\n        spoon.template.Substitution.insertAllConstructors(targetType, template, sourceClass);\n    }\n\n    static void insertAllConstructors(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template, spoon.reflect.declaration.CtClass<?> sourceClass) {\n        if (targetType instanceof spoon.reflect.declaration.CtClass) {\n            for (spoon.reflect.declaration.CtConstructor<?> c : sourceClass.getConstructors()) {\n                if (c.isImplicit()) {\n                    continue;\n                }\n                if (c.getAnnotation(spoon.template.Local.class) != null) {\n                    continue;\n                }\n                spoon.template.Substitution.insertConstructor(((spoon.reflect.declaration.CtClass<?>) (targetType)), template, c);\n            }\n        }\n        if (targetType instanceof spoon.reflect.declaration.CtClass) {\n            for (spoon.reflect.declaration.CtAnonymousExecutable e : sourceClass.getAnonymousExecutables()) {\n                ((spoon.reflect.declaration.CtClass<?>) (targetType)).addAnonymousExecutable(spoon.template.Substitution.substitute(targetType, template, e));\n            }\n        }\n    }\n\n    public static <T> spoon.reflect.declaration.CtConstructor<T> insertConstructor(spoon.reflect.declaration.CtClass<T> targetClass, spoon.template.Template<?> template, spoon.reflect.declaration.CtMethod<?> sourceMethod) {\n        if (targetClass instanceof spoon.reflect.declaration.CtInterface) {\n            return null;\n        }\n        spoon.reflect.declaration.CtConstructor<T> newConstructor = targetClass.getFactory().Constructor().create(targetClass, sourceMethod);\n        newConstructor = spoon.template.Substitution.substitute(targetClass, template, newConstructor);\n        targetClass.addConstructor(newConstructor);\n        return newConstructor;\n    }\n\n    public static <T> spoon.reflect.declaration.CtMethod<T> insertMethod(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template, spoon.reflect.declaration.CtMethod<T> sourceMethod) {\n        spoon.reflect.declaration.CtMethod<T> newMethod = spoon.template.Substitution.substitute(targetType, template, sourceMethod);\n        if (targetType instanceof spoon.reflect.declaration.CtInterface) {\n            newMethod.setBody(null);\n        }\n        targetType.addMethod(newMethod);\n        return newMethod;\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public static <T> spoon.reflect.declaration.CtConstructor<T> insertConstructor(spoon.reflect.declaration.CtClass<T> targetClass, spoon.template.Template<?> template, spoon.reflect.declaration.CtConstructor<?> sourceConstructor) {\n        spoon.reflect.declaration.CtConstructor<T> newConstrutor = spoon.template.Substitution.substitute(targetClass, template, ((spoon.reflect.declaration.CtConstructor<T>) (sourceConstructor)));\n        if (newConstrutor.getParameters().isEmpty()) {\n            spoon.reflect.declaration.CtConstructor<?> c = targetClass.getConstructor();\n            if ((c != null) && c.isImplicit()) {\n                targetClass.getConstructors().remove(c);\n            }\n        }\n        targetClass.addConstructor(newConstrutor);\n        return newConstrutor;\n    }\n\n    public static spoon.reflect.code.CtBlock<?> substituteMethodBody(spoon.reflect.declaration.CtClass<?> targetClass, spoon.template.Template<?> template, java.lang.String executableName, spoon.reflect.reference.CtTypeReference<?>... parameterTypes) {\n        spoon.reflect.declaration.CtClass<?> sourceClass = spoon.template.Substitution.getTemplateCtClass(targetClass, template);\n        spoon.reflect.declaration.CtExecutable<?> sourceExecutable = (executableName.equals(template.getClass().getSimpleName())) ? sourceClass.getConstructor(parameterTypes) : sourceClass.getMethod(executableName, parameterTypes);\n        return spoon.template.Substitution.substitute(targetClass, template, sourceExecutable.getBody());\n    }\n\n    public static spoon.reflect.code.CtStatement substituteStatement(spoon.reflect.declaration.CtClass<?> targetClass, spoon.template.Template<?> template, int statementIndex, java.lang.String executableName, spoon.reflect.reference.CtTypeReference<?>... parameterTypes) {\n        spoon.reflect.declaration.CtClass<?> sourceClass = spoon.template.Substitution.getTemplateCtClass(targetClass, template);\n        spoon.reflect.declaration.CtExecutable<?> sourceExecutable = (executableName.equals(template.getClass().getSimpleName())) ? sourceClass.getConstructor(parameterTypes) : sourceClass.getMethod(executableName, parameterTypes);\n        return spoon.template.Substitution.substitute(targetClass, template, sourceExecutable.getBody().getStatement(statementIndex));\n    }\n\n    public static spoon.reflect.code.CtExpression<?> substituteFieldDefaultExpression(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template, java.lang.String fieldName) {\n        spoon.reflect.declaration.CtClass<?> sourceClass = spoon.template.Substitution.getTemplateCtClass(targetType, template);\n        spoon.reflect.declaration.CtField<?> sourceField = sourceClass.getField(fieldName);\n        return spoon.template.Substitution.substitute(targetType, template, sourceField.getDefaultExpression());\n    }\n\n    public static <E extends spoon.reflect.declaration.CtElement> E substitute(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template, E code) {\n        if (code == null) {\n            return null;\n        }\n        if (targetType == null) {\n            throw new java.lang.RuntimeException(\"target is null in substitution\");\n        }\n        E result = ((E) (code.clone()));\n        new spoon.support.template.SubstitutionVisitor(targetType.getFactory(), targetType, template).scan(result);\n        return result;\n    }\n\n    public static <T extends spoon.reflect.declaration.CtType<?>> T substitute(spoon.template.Template<?> template, T templateType) {\n        T result = ((T) (templateType.clone()));\n        result.setPositions(null);\n        new spoon.support.template.SubstitutionVisitor(templateType.getFactory(), result, template).scan(result);\n        return result;\n    }\n\n    public static <T> spoon.reflect.declaration.CtField<T> insertField(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template, spoon.reflect.declaration.CtField<T> sourceField) {\n        spoon.reflect.declaration.CtField<T> field = spoon.template.Substitution.substitute(targetType, template, sourceField);\n        targetType.addField(field);\n        return field;\n    }\n\n    public static void redirectTypeReferences(spoon.reflect.declaration.CtElement element, spoon.reflect.reference.CtTypeReference<?> source, spoon.reflect.reference.CtTypeReference<?> target) {\n        java.util.List<spoon.reflect.reference.CtTypeReference<?>> refs = spoon.reflect.visitor.Query.getReferences(element, new spoon.reflect.visitor.filter.ReferenceTypeFilter<spoon.reflect.reference.CtTypeReference<?>>(spoon.reflect.reference.CtTypeReference.class));\n        java.lang.String srcName = source.getQualifiedName();\n        java.lang.String targetName = target.getSimpleName();\n        spoon.reflect.reference.CtPackageReference targetPackage = target.getPackage();\n        for (spoon.reflect.reference.CtTypeReference<?> ref : refs) {\n            if (ref.getQualifiedName().equals(srcName)) {\n                ref.setSimpleName(targetName);\n                ref.setPackage(targetPackage);\n            }\n        }\n    }\n\n    static <T> spoon.reflect.declaration.CtClass<T> getTemplateCtClass(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template) {\n        spoon.reflect.factory.Factory factory;\n        if (targetType != null) {\n            factory = targetType.getFactory();\n        } else {\n            factory = spoon.template.Substitution.getFactory(template);\n        }\n        return spoon.template.Substitution.getTemplateCtClass(factory, template);\n    }\n\n    static <T> spoon.reflect.declaration.CtClass<T> getTemplateCtClass(spoon.reflect.factory.Factory factory, spoon.template.Template<?> template) {\n        spoon.reflect.declaration.CtClass<T> c = factory.Class().get(template.getClass());\n        if (c.isShadow()) {\n            throw new spoon.SpoonException((\"The template \" + template.getClass().getName()) + \" is not part of model. Add template sources to spoon template path.\");\n        }\n        return c;\n    }\n\n    static spoon.reflect.factory.Factory getFactory(spoon.template.Template<?> template) {\n        try {\n            for (java.lang.reflect.Field f : spoon.support.template.Parameters.getAllTemplateParameterFields(template.getClass())) {\n                if ((f.get(template) != null) && (f.get(template) instanceof spoon.processing.FactoryAccessor)) {\n                    return ((spoon.processing.FactoryAccessor) (f.get(template))).getFactory();\n                }\n            }\n        } catch (java.lang.Exception e) {\n            throw new spoon.SpoonException(e);\n        }\n        throw new spoon.template.TemplateException(\"no factory found in template \" + template.getClass().getName());\n    }\n\n    spoon.reflect.reference.CtTypeReference actualTA = thatType.getActualTypeArguments().get(0);\n\n    {\n        if (((spoon.template.CtWildcardReference) (actualTA)).getBoundingType() == null) {\n            thatType.setActualTypeArguments(java.util.Collections.EMPTY_LIST);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    if (((spoon.template.CtWildcardReference) (actualTA)).getBoundingType() == null) {\n        thatType.setActualTypeArguments(java.util.Collections.EMPTY_LIST);\n    }\n}",
            "src_parent": "public abstract class Substitution {\n    private Substitution() {\n    }\n\n    public static <T extends spoon.template.Template<?>> void insertAll(spoon.reflect.declaration.CtType<?> targetType, T template) {\n        spoon.reflect.declaration.CtClass<T> templateClass = spoon.template.Substitution.getTemplateCtClass(targetType, template);\n        spoon.template.Substitution.insertAllSuperInterfaces(targetType, template);\n        spoon.template.Substitution.insertAllMethods(targetType, template);\n        spoon.template.Substitution.insertAllConstructors(targetType, template);\n        for (spoon.reflect.declaration.CtTypeMember typeMember : templateClass.getTypeMembers()) {\n            if (typeMember instanceof spoon.reflect.declaration.CtField) {\n                spoon.template.Substitution.insertGeneratedField(targetType, template, ((spoon.reflect.declaration.CtField<?>) (typeMember)));\n            } else if (typeMember instanceof spoon.reflect.declaration.CtType) {\n                spoon.template.Substitution.insertGeneratedNestedType(targetType, template, ((spoon.reflect.declaration.CtType) (typeMember)));\n            }\n        }\n    }\n\n    public static void insertAllSuperInterfaces(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template) {\n        spoon.reflect.declaration.CtClass<? extends spoon.template.Template<?>> sourceClass = spoon.template.Substitution.getTemplateCtClass(targetType, template);\n        spoon.template.Substitution.insertAllSuperInterfaces(targetType, template, sourceClass);\n    }\n\n    static void insertAllSuperInterfaces(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template, spoon.reflect.declaration.CtClass<? extends spoon.template.Template<?>> sourceClass) {\n        for (spoon.reflect.reference.CtTypeReference<?> t : sourceClass.getSuperInterfaces()) {\n            if (!t.equals(targetType.getFactory().Type().createReference(spoon.template.Template.class))) {\n                spoon.reflect.reference.CtTypeReference<?> t1 = t;\n                if (spoon.support.template.Parameters.getNames(sourceClass).contains(t.getSimpleName())) {\n                    java.lang.Object o = spoon.support.template.Parameters.getValue(template, t.getSimpleName(), null);\n                    if (o instanceof spoon.reflect.reference.CtTypeReference) {\n                        t1 = ((spoon.reflect.reference.CtTypeReference<?>) (o));\n                    } else if (o instanceof java.lang.Class) {\n                        t1 = targetType.getFactory().Type().createReference(((java.lang.Class<?>) (o)));\n                    } else if (o instanceof java.lang.String) {\n                        t1 = targetType.getFactory().Type().createReference(((java.lang.String) (o)));\n                    }\n                }\n                if (!t1.equals(targetType.getReference())) {\n                    java.lang.Class<?> c = null;\n                    try {\n                        c = t1.getActualClass();\n                    } catch (java.lang.Exception e) {\n                    }\n                    if ((c != null) && c.isInterface()) {\n                        targetType.addSuperInterface(t1);\n                    }\n                    if (c == null) {\n                        targetType.addSuperInterface(t1);\n                    }\n                }\n            }\n        }\n    }\n\n    public static void insertAllMethods(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template) {\n        spoon.reflect.declaration.CtClass<?> sourceClass = spoon.template.Substitution.getTemplateCtClass(targetType, template);\n        spoon.template.Substitution.insertAllMethods(targetType, template, sourceClass);\n    }\n\n    static void insertAllMethods(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template, spoon.reflect.declaration.CtClass<?> sourceClass) {\n        for (spoon.reflect.declaration.CtMethod<?> m : sourceClass.getMethods()) {\n            if (m.getAnnotation(spoon.template.Local.class) != null) {\n                continue;\n            }\n            if (m.getAnnotation(spoon.template.Parameter.class) != null) {\n                continue;\n            }\n            spoon.template.Substitution.insertMethod(targetType, template, m);\n        }\n    }\n\n    public static void insertAllFields(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template) {\n        spoon.reflect.declaration.CtClass<?> sourceClass = spoon.template.Substitution.getTemplateCtClass(targetType, template);\n        for (spoon.reflect.declaration.CtTypeMember typeMember : sourceClass.getTypeMembers()) {\n            if (typeMember instanceof spoon.reflect.declaration.CtField) {\n                spoon.template.Substitution.insertGeneratedField(targetType, template, ((spoon.reflect.declaration.CtField<?>) (typeMember)));\n            }\n        }\n    }\n\n    static void insertGeneratedField(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template, spoon.reflect.declaration.CtField<?> field) {\n        if (field.getAnnotation(spoon.template.Local.class) != null) {\n            return;\n        }\n        if (spoon.support.template.Parameters.isParameterSource(field.getReference())) {\n            return;\n        }\n        spoon.template.Substitution.insertField(targetType, template, field);\n    }\n\n    public static void insertAllNestedTypes(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template) {\n        spoon.reflect.declaration.CtClass<?> sourceClass = spoon.template.Substitution.getTemplateCtClass(targetType, template);\n        for (spoon.reflect.declaration.CtTypeMember typeMember : sourceClass.getTypeMembers()) {\n            if (typeMember instanceof spoon.reflect.declaration.CtType) {\n                spoon.template.Substitution.insertGeneratedNestedType(targetType, template, ((spoon.reflect.declaration.CtType<?>) (typeMember)));\n            }\n        }\n    }\n\n    static void insertGeneratedNestedType(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template, spoon.reflect.declaration.CtType<?> nestedType) {\n        spoon.reflect.declaration.CtClass<?> sourceClass = spoon.template.Substitution.getTemplateCtClass(targetType, template);\n        if (nestedType.getAnnotation(spoon.template.Local.class) != null) {\n            return;\n        }\n        spoon.reflect.declaration.CtType<?> result = spoon.template.Substitution.substitute(sourceClass, template, ((spoon.reflect.declaration.CtType) (nestedType)));\n        targetType.addNestedType(result);\n    }\n\n    public static void insertAllConstructors(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template) {\n        spoon.reflect.declaration.CtClass<?> sourceClass = spoon.template.Substitution.getTemplateCtClass(targetType, template);\n        spoon.template.Substitution.insertAllConstructors(targetType, template, sourceClass);\n    }\n\n    static void insertAllConstructors(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template, spoon.reflect.declaration.CtClass<?> sourceClass) {\n        if (targetType instanceof spoon.reflect.declaration.CtClass) {\n            for (spoon.reflect.declaration.CtConstructor<?> c : sourceClass.getConstructors()) {\n                if (c.isImplicit()) {\n                    continue;\n                }\n                if (c.getAnnotation(spoon.template.Local.class) != null) {\n                    continue;\n                }\n                spoon.template.Substitution.insertConstructor(((spoon.reflect.declaration.CtClass<?>) (targetType)), template, c);\n            }\n        }\n        if (targetType instanceof spoon.reflect.declaration.CtClass) {\n            for (spoon.reflect.declaration.CtAnonymousExecutable e : sourceClass.getAnonymousExecutables()) {\n                ((spoon.reflect.declaration.CtClass<?>) (targetType)).addAnonymousExecutable(spoon.template.Substitution.substitute(targetType, template, e));\n            }\n        }\n    }\n\n    public static <T> spoon.reflect.declaration.CtConstructor<T> insertConstructor(spoon.reflect.declaration.CtClass<T> targetClass, spoon.template.Template<?> template, spoon.reflect.declaration.CtMethod<?> sourceMethod) {\n        if (targetClass instanceof spoon.reflect.declaration.CtInterface) {\n            return null;\n        }\n        spoon.reflect.declaration.CtConstructor<T> newConstructor = targetClass.getFactory().Constructor().create(targetClass, sourceMethod);\n        newConstructor = spoon.template.Substitution.substitute(targetClass, template, newConstructor);\n        targetClass.addConstructor(newConstructor);\n        return newConstructor;\n    }\n\n    public static <T> spoon.reflect.declaration.CtMethod<T> insertMethod(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template, spoon.reflect.declaration.CtMethod<T> sourceMethod) {\n        spoon.reflect.declaration.CtMethod<T> newMethod = spoon.template.Substitution.substitute(targetType, template, sourceMethod);\n        if (targetType instanceof spoon.reflect.declaration.CtInterface) {\n            newMethod.setBody(null);\n        }\n        targetType.addMethod(newMethod);\n        return newMethod;\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public static <T> spoon.reflect.declaration.CtConstructor<T> insertConstructor(spoon.reflect.declaration.CtClass<T> targetClass, spoon.template.Template<?> template, spoon.reflect.declaration.CtConstructor<?> sourceConstructor) {\n        spoon.reflect.declaration.CtConstructor<T> newConstrutor = spoon.template.Substitution.substitute(targetClass, template, ((spoon.reflect.declaration.CtConstructor<T>) (sourceConstructor)));\n        if (newConstrutor.getParameters().isEmpty()) {\n            spoon.reflect.declaration.CtConstructor<?> c = targetClass.getConstructor();\n            if ((c != null) && c.isImplicit()) {\n                targetClass.getConstructors().remove(c);\n            }\n        }\n        targetClass.addConstructor(newConstrutor);\n        return newConstrutor;\n    }\n\n    public static spoon.reflect.code.CtBlock<?> substituteMethodBody(spoon.reflect.declaration.CtClass<?> targetClass, spoon.template.Template<?> template, java.lang.String executableName, spoon.reflect.reference.CtTypeReference<?>... parameterTypes) {\n        spoon.reflect.declaration.CtClass<?> sourceClass = spoon.template.Substitution.getTemplateCtClass(targetClass, template);\n        spoon.reflect.declaration.CtExecutable<?> sourceExecutable = (executableName.equals(template.getClass().getSimpleName())) ? sourceClass.getConstructor(parameterTypes) : sourceClass.getMethod(executableName, parameterTypes);\n        return spoon.template.Substitution.substitute(targetClass, template, sourceExecutable.getBody());\n    }\n\n    public static spoon.reflect.code.CtStatement substituteStatement(spoon.reflect.declaration.CtClass<?> targetClass, spoon.template.Template<?> template, int statementIndex, java.lang.String executableName, spoon.reflect.reference.CtTypeReference<?>... parameterTypes) {\n        spoon.reflect.declaration.CtClass<?> sourceClass = spoon.template.Substitution.getTemplateCtClass(targetClass, template);\n        spoon.reflect.declaration.CtExecutable<?> sourceExecutable = (executableName.equals(template.getClass().getSimpleName())) ? sourceClass.getConstructor(parameterTypes) : sourceClass.getMethod(executableName, parameterTypes);\n        return spoon.template.Substitution.substitute(targetClass, template, sourceExecutable.getBody().getStatement(statementIndex));\n    }\n\n    public static spoon.reflect.code.CtExpression<?> substituteFieldDefaultExpression(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template, java.lang.String fieldName) {\n        spoon.reflect.declaration.CtClass<?> sourceClass = spoon.template.Substitution.getTemplateCtClass(targetType, template);\n        spoon.reflect.declaration.CtField<?> sourceField = sourceClass.getField(fieldName);\n        return spoon.template.Substitution.substitute(targetType, template, sourceField.getDefaultExpression());\n    }\n\n    public static <E extends spoon.reflect.declaration.CtElement> E substitute(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template, E code) {\n        if (code == null) {\n            return null;\n        }\n        if (targetType == null) {\n            throw new java.lang.RuntimeException(\"target is null in substitution\");\n        }\n        E result = ((E) (code.clone()));\n        new spoon.support.template.SubstitutionVisitor(targetType.getFactory(), targetType, template).scan(result);\n        return result;\n    }\n\n    public static <T extends spoon.reflect.declaration.CtType<?>> T substitute(spoon.template.Template<?> template, T templateType) {\n        T result = ((T) (templateType.clone()));\n        result.setPositions(null);\n        new spoon.support.template.SubstitutionVisitor(templateType.getFactory(), result, template).scan(result);\n        return result;\n    }\n\n    public static <T> spoon.reflect.declaration.CtField<T> insertField(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template, spoon.reflect.declaration.CtField<T> sourceField) {\n        spoon.reflect.declaration.CtField<T> field = spoon.template.Substitution.substitute(targetType, template, sourceField);\n        targetType.addField(field);\n        return field;\n    }\n\n    public static void redirectTypeReferences(spoon.reflect.declaration.CtElement element, spoon.reflect.reference.CtTypeReference<?> source, spoon.reflect.reference.CtTypeReference<?> target) {\n        java.util.List<spoon.reflect.reference.CtTypeReference<?>> refs = spoon.reflect.visitor.Query.getReferences(element, new spoon.reflect.visitor.filter.ReferenceTypeFilter<spoon.reflect.reference.CtTypeReference<?>>(spoon.reflect.reference.CtTypeReference.class));\n        java.lang.String srcName = source.getQualifiedName();\n        java.lang.String targetName = target.getSimpleName();\n        spoon.reflect.reference.CtPackageReference targetPackage = target.getPackage();\n        for (spoon.reflect.reference.CtTypeReference<?> ref : refs) {\n            if (ref.getQualifiedName().equals(srcName)) {\n                ref.setSimpleName(targetName);\n                ref.setPackage(targetPackage);\n            }\n        }\n    }\n\n    static <T> spoon.reflect.declaration.CtClass<T> getTemplateCtClass(spoon.reflect.declaration.CtType<?> targetType, spoon.template.Template<?> template) {\n        spoon.reflect.factory.Factory factory;\n        if (targetType != null) {\n            factory = targetType.getFactory();\n        } else {\n            factory = spoon.template.Substitution.getFactory(template);\n        }\n        return spoon.template.Substitution.getTemplateCtClass(factory, template);\n    }\n\n    static <T> spoon.reflect.declaration.CtClass<T> getTemplateCtClass(spoon.reflect.factory.Factory factory, spoon.template.Template<?> template) {\n        spoon.reflect.declaration.CtClass<T> c = factory.Class().get(template.getClass());\n        if (c.isShadow()) {\n            throw new spoon.SpoonException((\"The template \" + template.getClass().getName()) + \" is not part of model. Add template sources to spoon template path.\");\n        }\n        return c;\n    }\n\n    static spoon.reflect.factory.Factory getFactory(spoon.template.Template<?> template) {\n        try {\n            for (java.lang.reflect.Field f : spoon.support.template.Parameters.getAllTemplateParameterFields(template.getClass())) {\n                if ((f.get(template) != null) && (f.get(template) instanceof spoon.processing.FactoryAccessor)) {\n                    return ((spoon.processing.FactoryAccessor) (f.get(template))).getFactory();\n                }\n            }\n        } catch (java.lang.Exception e) {\n            throw new spoon.SpoonException(e);\n        }\n        throw new spoon.template.TemplateException(\"no factory found in template \" + template.getClass().getName());\n    }\n\n    spoon.reflect.reference.CtTypeReference actualTA = thatType.getActualTypeArguments().get(0);\n\n    {\n        if (((spoon.template.CtWildcardReference) (actualTA)).getBoundingType() == null) {\n            thatType.setActualTypeArguments(java.util.Collections.EMPTY_LIST);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "AnonymousExecutable"
          }
        }
      ],
      "file_name": "Substitution"
    }
  ],
  "id": "bears_62"
}