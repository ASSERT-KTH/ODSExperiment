{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private boolean hbm;",
            "src_parent": "public class SuntechProtocolDecoder extends org.traccar.BaseProtocolDecoder {\n    private int protocolType;\n\n    private boolean hbm;\n\n    public SuntechProtocolDecoder(org.traccar.protocol.SuntechProtocol protocol) {\n        super(protocol);\n        protocolType = org.traccar.Context.getConfig().getInteger(getProtocolName() + \".protocolType\");\n        hbm = org.traccar.Context.getConfig().getBoolean(getProtocolName() + \".hbm\");\n    }\n\n    public void setProtocolType(int protocolType) {\n        this.protocolType = protocolType;\n    }\n\n    private org.traccar.model.Position decode9(org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress, java.lang.String[] values) throws java.text.ParseException {\n        int index = 1;\n        java.lang.String type = values[index++];\n        if (((!type.equals(\"Location\")) && (!type.equals(\"Emergency\"))) && (!type.equals(\"Alert\"))) {\n            return null;\n        }\n        org.traccar.model.Position position = new org.traccar.model.Position();\n        position.setProtocol(getProtocolName());\n        if (type.equals(\"Emergency\") || type.equals(\"Alert\")) {\n            position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n        }\n        org.traccar.DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        if (deviceSession == null) {\n            return null;\n        }\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_VERSION_FW, values[index++]);\n        java.text.DateFormat dateFormat = new java.text.SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n        dateFormat.setTimeZone(java.util.TimeZone.getTimeZone(\"UTC\"));\n        position.setTime(dateFormat.parse(values[index++] + values[index++]));\n        if (protocolType == 1) {\n            index += 1;\n        }\n        position.setLatitude(java.lang.Double.parseDouble(values[index++]));\n        position.setLongitude(java.lang.Double.parseDouble(values[index++]));\n        position.setSpeed(org.traccar.helper.UnitsConverter.knotsFromKph(java.lang.Double.parseDouble(values[index++])));\n        position.setCourse(java.lang.Double.parseDouble(values[index++]));\n        position.setValid(values[index++].equals(\"1\"));\n        if (protocolType == 1) {\n            position.set(Position.KEY_ODOMETER, java.lang.Integer.parseInt(values[index]));\n        }\n        return position;\n    }\n\n    private org.traccar.model.Position decode23(org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress, java.lang.String protocol, java.lang.String[] values) throws java.text.ParseException {\n        int index = 0;\n        java.lang.String type = values[index++].substring(5);\n        if ((((!type.equals(\"STT\")) && (!type.equals(\"EMG\"))) && (!type.equals(\"EVT\"))) && (!type.equals(\"ALT\"))) {\n            return null;\n        }\n        org.traccar.model.Position position = new org.traccar.model.Position();\n        position.setProtocol(getProtocolName());\n        if (type.equals(\"EMG\") || type.equals(\"ALT\")) {\n            position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n        }\n        org.traccar.DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        if (deviceSession == null) {\n            return null;\n        }\n        position.setDeviceId(deviceSession.getDeviceId());\n        if (protocol.equals(\"ST300\")) {\n            index += 1;\n        }\n        position.set(Position.KEY_VERSION_FW, values[index++]);\n        java.text.DateFormat dateFormat = new java.text.SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n        dateFormat.setTimeZone(java.util.TimeZone.getTimeZone(\"UTC\"));\n        position.setTime(dateFormat.parse(values[index++] + values[index++]));\n        index += 1;\n        position.setLatitude(java.lang.Double.parseDouble(values[index++]));\n        position.setLongitude(java.lang.Double.parseDouble(values[index++]));\n        position.setSpeed(org.traccar.helper.UnitsConverter.knotsFromKph(java.lang.Double.parseDouble(values[index++])));\n        position.setCourse(java.lang.Double.parseDouble(values[index++]));\n        position.set(Position.KEY_SATELLITES, java.lang.Integer.parseInt(values[index++]));\n        position.setValid(values[index++].equals(\"1\"));\n        position.set(Position.KEY_ODOMETER, java.lang.Integer.parseInt(values[index++]));\n        position.set(Position.KEY_POWER, java.lang.Double.parseDouble(values[index++]));\n        position.set(org.traccar.model.Position.PREFIX_IO + 1, values[index++]);\n        index += 1;\n        if (type.equals(\"STT\")) {\n            position.set(Position.KEY_INDEX, java.lang.Integer.parseInt(values[index++]));\n        }\n        if (hbm) {\n            if (index < values.length) {\n                position.set(Position.KEY_HOURS, java.lang.Integer.parseInt(values[index++]));\n            }\n            if (index < values.length) {\n                position.set(Position.KEY_BATTERY, java.lang.Double.parseDouble(values[index]));\n            }\n        }\n        return position;\n    }\n\n    @java.lang.Override\n    protected java.lang.Object decode(org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress, java.lang.Object msg) throws java.lang.Exception {\n        java.lang.String[] values = ((java.lang.String) (msg)).split(\";\");\n        java.lang.String protocol = values[0].substring(0, 5);\n        if (protocol.equals(\"ST910\")) {\n            return decode9(channel, remoteAddress, values);\n        } else {\n            return decode23(channel, remoteAddress, protocol, values);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Constructor",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "hbm = org.traccar.Context.getConfig().getBoolean(getProtocolName() + \".hbm\")",
            "src_parent": "{\n    super(protocol);\n    protocolType = org.traccar.Context.getConfig().getInteger(getProtocolName() + \".protocolType\");\n    hbm = org.traccar.Context.getConfig().getBoolean(getProtocolName() + \".hbm\");\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (hbm) {\n    if (index < values.length) {\n        position.set(Position.KEY_HOURS, java.lang.Integer.parseInt(values[index++]));\n    }\n    if (index < values.length) {\n        position.set(Position.KEY_BATTERY, java.lang.Double.parseDouble(values[index]));\n    }\n}",
            "src_parent": "{\n    int index = 0;\n    java.lang.String type = values[index++].substring(5);\n    if ((((!type.equals(\"STT\")) && (!type.equals(\"EMG\"))) && (!type.equals(\"EVT\"))) && (!type.equals(\"ALT\"))) {\n        return null;\n    }\n    org.traccar.model.Position position = new org.traccar.model.Position();\n    position.setProtocol(getProtocolName());\n    if (type.equals(\"EMG\") || type.equals(\"ALT\")) {\n        position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n    }\n    org.traccar.DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    if (deviceSession == null) {\n        return null;\n    }\n    position.setDeviceId(deviceSession.getDeviceId());\n    if (protocol.equals(\"ST300\")) {\n        index += 1;\n    }\n    position.set(Position.KEY_VERSION_FW, values[index++]);\n    java.text.DateFormat dateFormat = new java.text.SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n    dateFormat.setTimeZone(java.util.TimeZone.getTimeZone(\"UTC\"));\n    position.setTime(dateFormat.parse(values[index++] + values[index++]));\n    index += 1;\n    position.setLatitude(java.lang.Double.parseDouble(values[index++]));\n    position.setLongitude(java.lang.Double.parseDouble(values[index++]));\n    position.setSpeed(org.traccar.helper.UnitsConverter.knotsFromKph(java.lang.Double.parseDouble(values[index++])));\n    position.setCourse(java.lang.Double.parseDouble(values[index++]));\n    position.set(Position.KEY_SATELLITES, java.lang.Integer.parseInt(values[index++]));\n    position.setValid(values[index++].equals(\"1\"));\n    position.set(Position.KEY_ODOMETER, java.lang.Integer.parseInt(values[index++]));\n    position.set(Position.KEY_POWER, java.lang.Double.parseDouble(values[index++]));\n    position.set(org.traccar.model.Position.PREFIX_IO + 1, values[index++]);\n    index += 1;\n    if (type.equals(\"STT\")) {\n        position.set(Position.KEY_INDEX, java.lang.Integer.parseInt(values[index++]));\n    }\n    if (hbm) {\n        if (index < values.length) {\n            position.set(Position.KEY_HOURS, java.lang.Integer.parseInt(values[index++]));\n        }\n        if (index < values.length) {\n            position.set(Position.KEY_BATTERY, java.lang.Double.parseDouble(values[index]));\n        }\n    }\n    return position;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (index < values.length) {\n    position.set(Position.KEY_HOURS, java.lang.Integer.parseInt(values[index++]));\n}",
            "dst_parent": "{\n    if (index < values.length) {\n        position.set(Position.KEY_HOURS, java.lang.Integer.parseInt(values[index++]));\n    }\n    if (index < values.length) {\n        position.set(Position.KEY_BATTERY, java.lang.Double.parseDouble(values[index]));\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (index < values.length) {\n    position.set(Position.KEY_HOURS, java.lang.Integer.parseInt(values[index++]));\n}",
            "src_parent": "{\n    int index = 0;\n    java.lang.String type = values[index++].substring(5);\n    if ((((!type.equals(\"STT\")) && (!type.equals(\"EMG\"))) && (!type.equals(\"EVT\"))) && (!type.equals(\"ALT\"))) {\n        return null;\n    }\n    org.traccar.model.Position position = new org.traccar.model.Position();\n    position.setProtocol(getProtocolName());\n    if (type.equals(\"EMG\") || type.equals(\"ALT\")) {\n        position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n    }\n    org.traccar.DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    if (deviceSession == null) {\n        return null;\n    }\n    position.setDeviceId(deviceSession.getDeviceId());\n    if (protocol.equals(\"ST300\")) {\n        index += 1;\n    }\n    position.set(Position.KEY_VERSION_FW, values[index++]);\n    java.text.DateFormat dateFormat = new java.text.SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n    dateFormat.setTimeZone(java.util.TimeZone.getTimeZone(\"UTC\"));\n    position.setTime(dateFormat.parse(values[index++] + values[index++]));\n    index += 1;\n    position.setLatitude(java.lang.Double.parseDouble(values[index++]));\n    position.setLongitude(java.lang.Double.parseDouble(values[index++]));\n    position.setSpeed(org.traccar.helper.UnitsConverter.knotsFromKph(java.lang.Double.parseDouble(values[index++])));\n    position.setCourse(java.lang.Double.parseDouble(values[index++]));\n    position.set(Position.KEY_SATELLITES, java.lang.Integer.parseInt(values[index++]));\n    position.setValid(values[index++].equals(\"1\"));\n    position.set(Position.KEY_ODOMETER, java.lang.Integer.parseInt(values[index++]));\n    position.set(Position.KEY_POWER, java.lang.Double.parseDouble(values[index++]));\n    position.set(org.traccar.model.Position.PREFIX_IO + 1, values[index++]);\n    index += 1;\n    if (type.equals(\"STT\")) {\n        position.set(Position.KEY_INDEX, java.lang.Integer.parseInt(values[index++]));\n    }\n    if (index < values.length) {\n        position.set(Position.KEY_HOURS, java.lang.Integer.parseInt(values[index++]));\n    }\n    if (index < values.length) {\n        position.set(Position.KEY_BATTERY, java.lang.Double.parseDouble(values[index]));\n    }\n    return position;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "OperatorAssignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (index < values.length) {\n    position.set(Position.KEY_BATTERY, java.lang.Double.parseDouble(values[index]));\n}",
            "dst_parent": "{\n    if (index < values.length) {\n        position.set(Position.KEY_HOURS, java.lang.Integer.parseInt(values[index++]));\n    }\n    if (index < values.length) {\n        position.set(Position.KEY_BATTERY, java.lang.Double.parseDouble(values[index]));\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (index < values.length) {\n    position.set(Position.KEY_BATTERY, java.lang.Double.parseDouble(values[index]));\n}",
            "src_parent": "{\n    int index = 0;\n    java.lang.String type = values[index++].substring(5);\n    if ((((!type.equals(\"STT\")) && (!type.equals(\"EMG\"))) && (!type.equals(\"EVT\"))) && (!type.equals(\"ALT\"))) {\n        return null;\n    }\n    org.traccar.model.Position position = new org.traccar.model.Position();\n    position.setProtocol(getProtocolName());\n    if (type.equals(\"EMG\") || type.equals(\"ALT\")) {\n        position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n    }\n    org.traccar.DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    if (deviceSession == null) {\n        return null;\n    }\n    position.setDeviceId(deviceSession.getDeviceId());\n    if (protocol.equals(\"ST300\")) {\n        index += 1;\n    }\n    position.set(Position.KEY_VERSION_FW, values[index++]);\n    java.text.DateFormat dateFormat = new java.text.SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n    dateFormat.setTimeZone(java.util.TimeZone.getTimeZone(\"UTC\"));\n    position.setTime(dateFormat.parse(values[index++] + values[index++]));\n    index += 1;\n    position.setLatitude(java.lang.Double.parseDouble(values[index++]));\n    position.setLongitude(java.lang.Double.parseDouble(values[index++]));\n    position.setSpeed(org.traccar.helper.UnitsConverter.knotsFromKph(java.lang.Double.parseDouble(values[index++])));\n    position.setCourse(java.lang.Double.parseDouble(values[index++]));\n    position.set(Position.KEY_SATELLITES, java.lang.Integer.parseInt(values[index++]));\n    position.setValid(values[index++].equals(\"1\"));\n    position.set(Position.KEY_ODOMETER, java.lang.Integer.parseInt(values[index++]));\n    position.set(Position.KEY_POWER, java.lang.Double.parseDouble(values[index++]));\n    position.set(org.traccar.model.Position.PREFIX_IO + 1, values[index++]);\n    index += 1;\n    if (type.equals(\"STT\")) {\n        position.set(Position.KEY_INDEX, java.lang.Integer.parseInt(values[index++]));\n    }\n    if (index < values.length) {\n        position.set(Position.KEY_HOURS, java.lang.Integer.parseInt(values[index++]));\n    }\n    if (index < values.length) {\n        position.set(Position.KEY_BATTERY, java.lang.Double.parseDouble(values[index]));\n    }\n    return position;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "SuntechProtocolDecoder"
    }
  ],
  "id": "bears_104"
}