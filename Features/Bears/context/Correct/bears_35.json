{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "protected spoon.reflect.visitor.printer.Set<java.lang.String> lookForLocalVariables(spoon.reflect.declaration.CtElement parent) {\n    spoon.reflect.visitor.printer.Set<java.lang.String> result = new spoon.reflect.visitor.printer.HashSet();\n    while ((parent != null) && (!(parent instanceof spoon.reflect.code.CtBlock))) {\n        if (parent instanceof spoon.reflect.declaration.CtClass) {\n            return result;\n        }\n        parent = parent.getParent();\n    } \n    if (parent != null) {\n        spoon.reflect.code.CtBlock block = ((spoon.reflect.code.CtBlock) (parent));\n        boolean innerClass = false;\n        while ((parent != null) && (!(parent instanceof spoon.reflect.declaration.CtClass))) {\n            parent = parent.getParent();\n        } \n        if (parent != null) {\n            if (!(parent.getParent() instanceof spoon.reflect.visitor.printer.CtPackage)) {\n                while ((parent != null) && (!(parent instanceof spoon.reflect.code.CtBlock))) {\n                    parent = parent.getParent();\n                } \n                if (parent != null) {\n                    block = ((spoon.reflect.code.CtBlock) (parent));\n                }\n            }\n        }\n        spoon.reflect.visitor.printer.AccessibleVariablesFinder avf = new spoon.reflect.visitor.printer.AccessibleVariablesFinder(block);\n        java.util.List<spoon.reflect.visitor.printer.CtVariable> variables = avf.find();\n        for (spoon.reflect.visitor.printer.CtVariable variable : variables) {\n            result.add(variable.getSimpleName());\n        }\n    }\n    return result;\n}",
            "src_parent": "public class ElementPrinterHelper {\n    private final spoon.reflect.visitor.DefaultJavaPrettyPrinter prettyPrinter;\n\n    private final spoon.compiler.Environment env;\n\n    private spoon.reflect.visitor.printer.PrinterHelper printer;\n\n    public ElementPrinterHelper(spoon.reflect.visitor.printer.PrinterHelper printerHelper, spoon.reflect.visitor.DefaultJavaPrettyPrinter prettyPrinter, spoon.compiler.Environment env) {\n        this.printer = printerHelper;\n        this.prettyPrinter = prettyPrinter;\n        private spoon.reflect.visitor.printer.Set<java.lang.String> fieldAndMethodsNames = new spoon.reflect.visitor.printer.HashSet<java.lang.String>();\n        this.env = env;\n    }\n\n    public void setPrinter(spoon.reflect.visitor.printer.PrinterHelper printer) {\n        this.printer = printer;\n    }\n\n    public void writeAnnotations(spoon.reflect.declaration.CtElement element) {\n        for (spoon.reflect.declaration.CtAnnotation<?> annotation : element.getAnnotations()) {\n            prettyPrinter.scan(annotation);\n        }\n    }\n\n    public void writeModifiers(spoon.reflect.declaration.CtModifiable modifiable) {\n        for (spoon.reflect.declaration.ModifierKind modifierKind : modifiable.getModifiers()) {\n            printer.write(modifierKind.toString() + \" \");\n        }\n    }\n\n    public void visitCtNamedElement(spoon.reflect.declaration.CtNamedElement namedElement, spoon.reflect.cu.CompilationUnit sourceCompilationUnit) {\n        writeAnnotations(namedElement);\n        if (env.isPreserveLineNumbers()) {\n            printer.adjustPosition(namedElement, sourceCompilationUnit);\n        }\n    }\n\n    public void writeExtendsClause(spoon.reflect.declaration.CtType<?> type) {\n        if (type.getSuperclass() != null) {\n            printer.write(\" extends \");\n            prettyPrinter.scan(type.getSuperclass());\n        }\n    }\n\n    public void writeImplementsClause(spoon.reflect.declaration.CtType<?> type) {\n        if (type.getSuperInterfaces().size() > 0) {\n            printer.write(\" implements \");\n            for (spoon.reflect.reference.CtTypeReference<?> ref : type.getSuperInterfaces()) {\n                prettyPrinter.scan(ref);\n                printer.write(\" , \");\n            }\n            printer.removeLastChar();\n        }\n    }\n\n    public void writeExecutableParameters(spoon.reflect.declaration.CtExecutable<?> executable) {\n        printer.write(\"(\");\n        if (executable.getParameters().size() > 0) {\n            for (spoon.reflect.declaration.CtParameter<?> p : executable.getParameters()) {\n                prettyPrinter.scan(p);\n                printer.write(\", \");\n            }\n            printer.removeLastChar();\n        }\n        printer.write(\")\");\n    }\n\n    public void writeThrowsClause(spoon.reflect.declaration.CtExecutable<?> executable) {\n        if (executable.getThrownTypes().size() > 0) {\n            printer.write(\" throws \");\n            for (spoon.reflect.reference.CtTypeReference<?> ref : executable.getThrownTypes()) {\n                prettyPrinter.scan(ref);\n                printer.write(\", \");\n            }\n            printer.removeLastChar();\n        }\n    }\n\n    public void writeStatement(spoon.reflect.code.CtStatement statement) {\n        prettyPrinter.scan(statement);\n        if (!((((((((((statement instanceof spoon.reflect.code.CtBlock) || (statement instanceof spoon.reflect.code.CtIf)) || (statement instanceof spoon.reflect.code.CtFor)) || (statement instanceof spoon.reflect.code.CtForEach)) || (statement instanceof spoon.reflect.code.CtWhile)) || (statement instanceof spoon.reflect.code.CtTry)) || (statement instanceof spoon.reflect.code.CtSwitch)) || (statement instanceof spoon.reflect.code.CtSynchronized)) || (statement instanceof spoon.reflect.declaration.CtClass)) || (statement instanceof spoon.reflect.code.CtComment))) {\n            printer.write(\";\");\n        }\n        writeComment(statement, spoon.reflect.visitor.printer.CommentOffset.AFTER);\n    }\n\n    public void writeElementList(java.util.List<spoon.reflect.declaration.CtTypeMember> elements) {\n        for (spoon.reflect.declaration.CtTypeMember element : elements) {\n            if ((element instanceof spoon.reflect.declaration.CtConstructor) && element.isImplicit()) {\n                continue;\n            }\n            printer.writeln().writeTabs();\n            prettyPrinter.scan(element);\n            if (!env.isPreserveLineNumbers()) {\n                printer.writeln();\n            }\n        }\n    }\n\n    public void writeAnnotationElement(spoon.reflect.factory.Factory factory, java.lang.Object value) {\n        if (value instanceof spoon.reflect.code.CtTypeAccess) {\n            prettyPrinter.scan(((spoon.reflect.code.CtTypeAccess) (value)));\n            printer.write(\".class\");\n        } else if (value instanceof spoon.reflect.reference.CtFieldReference) {\n            prettyPrinter.scan(((spoon.reflect.reference.CtFieldReference<?>) (value)).getDeclaringType());\n            printer.write(\".\" + ((spoon.reflect.reference.CtFieldReference<?>) (value)).getSimpleName());\n        } else if (value instanceof spoon.reflect.declaration.CtElement) {\n            prettyPrinter.scan(((spoon.reflect.declaration.CtElement) (value)));\n        } else if (value instanceof java.lang.String) {\n            printer.write((\"\\\"\" + value.toString()) + \"\\\"\");\n        } else if (value instanceof java.util.Collection) {\n            printer.write(\"{\");\n            if (!((java.util.Collection<?>) (value)).isEmpty()) {\n                for (java.lang.Object obj : ((java.util.Collection<?>) (value))) {\n                    writeAnnotationElement(factory, obj);\n                    printer.write(\" ,\");\n                }\n                printer.removeLastChar();\n            }\n            printer.write(\"}\");\n        } else if (value instanceof java.lang.Object[]) {\n            printer.write(\"{\");\n            if (((java.lang.Object[]) (value)).length > 0) {\n                for (java.lang.Object obj : ((java.lang.Object[]) (value))) {\n                    writeAnnotationElement(factory, obj);\n                    printer.write(\" ,\");\n                }\n                printer.removeLastChar();\n            }\n            printer.write(\"}\");\n        } else if (value instanceof java.lang.Enum) {\n            try (final spoon.reflect.visitor.PrintingContext.Writable c = prettyPrinter.getContext().modify().ignoreGenerics(true)) {\n                prettyPrinter.scan(factory.Type().createReference(((java.lang.Enum<?>) (value)).getDeclaringClass()));\n            }\n            printer.write(\".\");\n            printer.write(value.toString());\n        } else {\n            printer.write(value.toString());\n        }\n    }\n\n    public void writeFormalTypeParameters(spoon.reflect.declaration.CtFormalTypeDeclarer ctFormalTypeDeclarer) {\n        final java.util.Collection<spoon.reflect.declaration.CtTypeParameter> parameters = ctFormalTypeDeclarer.getFormalCtTypeParameters();\n        if (parameters == null) {\n            return;\n        }\n        if (parameters.size() > 0) {\n            printer.write('<');\n            for (spoon.reflect.declaration.CtTypeParameter parameter : parameters) {\n                prettyPrinter.scan(parameter);\n                printer.write(\", \");\n            }\n            printer.removeLastChar();\n            printer.write('>');\n        }\n    }\n\n    public void writeActualTypeArguments(spoon.reflect.reference.CtActualTypeContainer ctGenericElementReference) {\n        final java.util.Collection<spoon.reflect.reference.CtTypeReference<?>> arguments = ctGenericElementReference.getActualTypeArguments();\n        if ((arguments != null) && (arguments.size() > 0)) {\n            printer.write(\"<\");\n            boolean isImplicitTypeReference = true;\n            for (spoon.reflect.reference.CtTypeReference<?> argument : arguments) {\n                if (!argument.isImplicit()) {\n                    isImplicitTypeReference = false;\n                    prettyPrinter.scan(argument);\n                    printer.write(\", \");\n                }\n            }\n            if (!isImplicitTypeReference) {\n                printer.removeLastChar();\n            }\n            printer.write(\">\");\n        }\n    }\n\n    public void writeHeader(java.util.List<spoon.reflect.declaration.CtType<?>> types, java.util.Collection<spoon.reflect.reference.CtReference> imports) {\n        if (!types.isEmpty()) {\n            for (spoon.reflect.declaration.CtType<?> ctType : types) {\n                writeComment(ctType, spoon.reflect.visitor.printer.CommentOffset.TOP_FILE);\n                printer.writeln().writeln().writeTabs();\n            }\n            if (!types.get(0).getPackage().isUnnamedPackage()) {\n                printer.write((\"package \" + types.get(0).getPackage().getQualifiedName()) + \";\");\n            }\n            printer.writeln().writeln().writeTabs();\n            for (spoon.reflect.reference.CtReference ref : imports) {\n                if (ref instanceof spoon.reflect.reference.CtTypeReference) {\n                    spoon.reflect.reference.CtTypeReference typeRef = ((spoon.reflect.reference.CtTypeReference) (ref));\n                    printer.write((\"import \" + typeRef.getQualifiedName()) + \";\").writeln().writeTabs();\n                } else if (ref instanceof spoon.reflect.reference.CtExecutableReference) {\n                    spoon.reflect.reference.CtExecutableReference execRef = ((spoon.reflect.reference.CtExecutableReference) (ref));\n                    if (execRef.getDeclaringType() != null) {\n                        printer.write((((\"import static \" + this.removeInnerTypeSeparator(execRef.getDeclaringType().getQualifiedName())) + \".\") + execRef.getSimpleName()) + \";\").writeln().writeTabs();\n                    }\n                } else if (ref instanceof spoon.reflect.reference.CtFieldReference) {\n                    spoon.reflect.reference.CtFieldReference fieldRef = ((spoon.reflect.reference.CtFieldReference) (ref));\n                    printer.write((((\"import static \" + this.removeInnerTypeSeparator(fieldRef.getDeclaringType().getQualifiedName())) + \".\") + fieldRef.getSimpleName()) + \";\").writeln().writeTabs();\n                }\n            }\n            printer.writeln().writeTabs();\n        }\n    }\n\n    private java.lang.String removeInnerTypeSeparator(java.lang.String fqn) {\n        return fqn.replace(spoon.reflect.declaration.CtType.INNERTTYPE_SEPARATOR, \".\");\n    }\n\n    public void writeComment(spoon.reflect.code.CtComment comment) {\n        if ((!env.isCommentsEnabled()) || (comment == null)) {\n            return;\n        }\n        prettyPrinter.scan(comment);\n        printer.writeln().writeTabs();\n    }\n\n    private void writeComment(java.util.List<spoon.reflect.code.CtComment> comments) {\n        if ((!env.isCommentsEnabled()) || (comments == null)) {\n            return;\n        }\n        for (spoon.reflect.code.CtComment comment : comments) {\n            writeComment(comment);\n        }\n    }\n\n    public void writeComment(spoon.reflect.declaration.CtElement element) {\n        if (element == null) {\n            return;\n        }\n        writeComment(element.getComments());\n    }\n\n    public void writeComment(spoon.reflect.declaration.CtElement element, spoon.reflect.visitor.printer.CommentOffset offset) {\n        writeComment(getComments(element, offset));\n    }\n\n    public java.util.List<spoon.reflect.code.CtComment> getComments(spoon.reflect.declaration.CtElement element, spoon.reflect.visitor.printer.CommentOffset offset) {\n        java.util.List<spoon.reflect.code.CtComment> commentsToPrint = new java.util.ArrayList<>();\n        if ((!env.isCommentsEnabled()) || (element == null)) {\n            return commentsToPrint;\n        }\n        for (spoon.reflect.code.CtComment comment : element.getComments()) {\n            if ((comment.getCommentType() == spoon.reflect.code.CtComment.CommentType.FILE) && (offset == spoon.reflect.visitor.printer.CommentOffset.TOP_FILE)) {\n                commentsToPrint.add(comment);\n                continue;\n            }\n            if (comment.getCommentType() == spoon.reflect.code.CtComment.CommentType.FILE) {\n                continue;\n            }\n            if ((comment.getPosition() == null) || (element.getPosition() == null)) {\n                if (offset == spoon.reflect.visitor.printer.CommentOffset.BEFORE) {\n                    commentsToPrint.add(comment);\n                }\n                continue;\n            }\n            final int line = element.getPosition().getLine();\n            final int sourceEnd = element.getPosition().getSourceEnd();\n            final int sourceStart = element.getPosition().getSourceStart();\n            if ((offset == spoon.reflect.visitor.printer.CommentOffset.BEFORE) && ((comment.getPosition().getLine() < line) || ((sourceStart <= comment.getPosition().getSourceStart()) && (sourceEnd >= comment.getPosition().getSourceEnd())))) {\n                commentsToPrint.add(comment);\n            } else if ((offset == spoon.reflect.visitor.printer.CommentOffset.AFTER) && (comment.getPosition().getSourceStart() > sourceEnd)) {\n                commentsToPrint.add(comment);\n            } else {\n                final int endLine = element.getPosition().getEndLine();\n                if (((offset == spoon.reflect.visitor.printer.CommentOffset.INSIDE) && (comment.getPosition().getLine() >= line)) && (comment.getPosition().getEndLine() <= endLine)) {\n                    commentsToPrint.add(comment);\n                }\n            }\n        }\n        return commentsToPrint;\n    }\n\n    public void writeIfOrLoopBlock(spoon.reflect.code.CtStatement block) {\n        if (block != null) {\n            if ((!block.isImplicit()) && ((block instanceof spoon.reflect.code.CtBlock) || (block instanceof spoon.reflect.code.CtIf))) {\n                printer.write(\" \");\n            }\n            if ((!(block instanceof spoon.reflect.code.CtBlock)) && (!(block instanceof spoon.reflect.code.CtIf))) {\n                printer.incTab();\n                printer.writeln().writeTabs();\n            }\n            writeStatement(block);\n            if ((!(block instanceof spoon.reflect.code.CtBlock)) && (!(block instanceof spoon.reflect.code.CtIf))) {\n                printer.decTab().writeln().writeTabs();\n            }\n            if (!block.isImplicit()) {\n                if ((!block.isParentInitialized()) || (((!(block.getParent() instanceof spoon.reflect.code.CtFor)) && (!(block.getParent() instanceof spoon.reflect.code.CtForEach))) && (!(block.getParent() instanceof spoon.reflect.code.CtIf)))) {\n                    printer.write(\" \");\n                }\n            }\n        } else {\n            printer.write(\";\");\n        }\n    }\n\n    protected spoon.reflect.visitor.printer.Set<java.lang.String> lookForLocalVariables(spoon.reflect.declaration.CtElement parent) {\n        spoon.reflect.visitor.printer.Set<java.lang.String> result = new spoon.reflect.visitor.printer.HashSet();\n        while ((parent != null) && (!(parent instanceof spoon.reflect.code.CtBlock))) {\n            if (parent instanceof spoon.reflect.declaration.CtClass) {\n                return result;\n            }\n            parent = parent.getParent();\n        } \n        if (parent != null) {\n            spoon.reflect.code.CtBlock block = ((spoon.reflect.code.CtBlock) (parent));\n            boolean innerClass = false;\n            while ((parent != null) && (!(parent instanceof spoon.reflect.declaration.CtClass))) {\n                parent = parent.getParent();\n            } \n            if (parent != null) {\n                if (!(parent.getParent() instanceof spoon.reflect.visitor.printer.CtPackage)) {\n                    while ((parent != null) && (!(parent instanceof spoon.reflect.code.CtBlock))) {\n                        parent = parent.getParent();\n                    } \n                    if (parent != null) {\n                        block = ((spoon.reflect.code.CtBlock) (parent));\n                    }\n                }\n            }\n            spoon.reflect.visitor.printer.AccessibleVariablesFinder avf = new spoon.reflect.visitor.printer.AccessibleVariablesFinder(block);\n            java.util.List<spoon.reflect.visitor.printer.CtVariable> variables = avf.find();\n            for (spoon.reflect.visitor.printer.CtVariable variable : variables) {\n                result.add(variable.getSimpleName());\n            }\n        }\n        return result;\n    }\n\n    protected boolean isTypeInCollision(spoon.reflect.reference.CtReference ref, boolean fqnMode) {\n        if (targetType.getSimpleName().equals(ref.getSimpleName()) && (!targetType.equals(ref))) {\n            return true;\n        }\n        try {\n            spoon.reflect.declaration.CtElement parent;\n            if (ref instanceof spoon.reflect.reference.CtTypeReference) {\n                parent = ref.getParent();\n            } else {\n                parent = ref;\n            }\n            spoon.reflect.visitor.printer.Set<java.lang.String> localVariablesOfBlock = new spoon.reflect.visitor.printer.HashSet();\n            if (parent instanceof spoon.reflect.visitor.printer.CtField) {\n                this.fieldAndMethodsNames.add(((spoon.reflect.visitor.printer.CtField) (parent)).getSimpleName());\n            } else if (parent instanceof spoon.reflect.visitor.printer.CtMethod) {\n                this.fieldAndMethodsNames.add(((spoon.reflect.visitor.printer.CtMethod) (parent)).getSimpleName());\n            } else {\n                localVariablesOfBlock = this.lookForLocalVariables(parent);\n            }\n            while (!(parent instanceof spoon.reflect.visitor.printer.CtPackage)) {\n                if ((parent instanceof spoon.reflect.reference.CtFieldReference) || (parent instanceof spoon.reflect.reference.CtExecutableReference)) {\n                    spoon.reflect.reference.CtReference parentType = ((spoon.reflect.reference.CtReference) (parent));\n                    spoon.reflect.visitor.printer.LinkedList<java.lang.String> qualifiedNameTokens = new spoon.reflect.visitor.printer.LinkedList();\n                    if (parentType != parent) {\n                        qualifiedNameTokens.add(parentType.getSimpleName());\n                    }\n                    spoon.reflect.reference.CtTypeReference typeReference;\n                    if (parent instanceof spoon.reflect.reference.CtFieldReference) {\n                        typeReference = ((spoon.reflect.reference.CtFieldReference) (parent)).getDeclaringType();\n                    } else {\n                        typeReference = ((spoon.reflect.reference.CtExecutableReference) (parent)).getDeclaringType();\n                    }\n                    if (typeReference != null) {\n                        qualifiedNameTokens.add(typeReference.getSimpleName());\n                        if (typeReference.getPackage() != null) {\n                            spoon.reflect.visitor.printer.CtPackage ctPackage = typeReference.getPackage().getDeclaration();\n                            while (ctPackage != null) {\n                                qualifiedNameTokens.add(ctPackage.getSimpleName());\n                                spoon.reflect.declaration.CtElement packParent = ctPackage.getParent();\n                                if ((packParent.getParent() != null) && (!((spoon.reflect.visitor.printer.CtPackage) (packParent)).getSimpleName().equals(CtPackage.TOP_LEVEL_PACKAGE_NAME))) {\n                                    ctPackage = ((spoon.reflect.visitor.printer.CtPackage) (packParent));\n                                } else {\n                                    ctPackage = null;\n                                }\n                            } \n                        }\n                    }\n                    if (!qualifiedNameTokens.isEmpty()) {\n                        if (fieldAndMethodsNames.contains(qualifiedNameTokens.getLast()) || localVariablesOfBlock.contains(qualifiedNameTokens.getLast())) {\n                            qualifiedNameTokens.removeLast();\n                            if (fqnMode) {\n                                return true;\n                            } else {\n                                for (int i = qualifiedNameTokens.size() - 1; i > 0; i--) {\n                                    java.lang.String testedToken = qualifiedNameTokens.get(i);\n                                    if ((!fieldAndMethodsNames.contains(testedToken)) && (!localVariablesOfBlock.contains(testedToken))) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            }\n                        }\n                    }\n                }\n                parent = parent.getParent();\n            } \n        } catch (spoon.reflect.visitor.printer.ParentNotInitializedException e) {\n            return false;\n        }\n        return false;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "protected boolean isTypeInCollision(spoon.reflect.reference.CtReference ref, boolean fqnMode) {\n    if (targetType.getSimpleName().equals(ref.getSimpleName()) && (!targetType.equals(ref))) {\n        return true;\n    }\n    try {\n        spoon.reflect.declaration.CtElement parent;\n        if (ref instanceof spoon.reflect.reference.CtTypeReference) {\n            parent = ref.getParent();\n        } else {\n            parent = ref;\n        }\n        spoon.reflect.visitor.printer.Set<java.lang.String> localVariablesOfBlock = new spoon.reflect.visitor.printer.HashSet();\n        if (parent instanceof spoon.reflect.visitor.printer.CtField) {\n            this.fieldAndMethodsNames.add(((spoon.reflect.visitor.printer.CtField) (parent)).getSimpleName());\n        } else if (parent instanceof spoon.reflect.visitor.printer.CtMethod) {\n            this.fieldAndMethodsNames.add(((spoon.reflect.visitor.printer.CtMethod) (parent)).getSimpleName());\n        } else {\n            localVariablesOfBlock = this.lookForLocalVariables(parent);\n        }\n        while (!(parent instanceof spoon.reflect.visitor.printer.CtPackage)) {\n            if ((parent instanceof spoon.reflect.reference.CtFieldReference) || (parent instanceof spoon.reflect.reference.CtExecutableReference)) {\n                spoon.reflect.reference.CtReference parentType = ((spoon.reflect.reference.CtReference) (parent));\n                spoon.reflect.visitor.printer.LinkedList<java.lang.String> qualifiedNameTokens = new spoon.reflect.visitor.printer.LinkedList();\n                if (parentType != parent) {\n                    qualifiedNameTokens.add(parentType.getSimpleName());\n                }\n                spoon.reflect.reference.CtTypeReference typeReference;\n                if (parent instanceof spoon.reflect.reference.CtFieldReference) {\n                    typeReference = ((spoon.reflect.reference.CtFieldReference) (parent)).getDeclaringType();\n                } else {\n                    typeReference = ((spoon.reflect.reference.CtExecutableReference) (parent)).getDeclaringType();\n                }\n                if (typeReference != null) {\n                    qualifiedNameTokens.add(typeReference.getSimpleName());\n                    if (typeReference.getPackage() != null) {\n                        spoon.reflect.visitor.printer.CtPackage ctPackage = typeReference.getPackage().getDeclaration();\n                        while (ctPackage != null) {\n                            qualifiedNameTokens.add(ctPackage.getSimpleName());\n                            spoon.reflect.declaration.CtElement packParent = ctPackage.getParent();\n                            if ((packParent.getParent() != null) && (!((spoon.reflect.visitor.printer.CtPackage) (packParent)).getSimpleName().equals(CtPackage.TOP_LEVEL_PACKAGE_NAME))) {\n                                ctPackage = ((spoon.reflect.visitor.printer.CtPackage) (packParent));\n                            } else {\n                                ctPackage = null;\n                            }\n                        } \n                    }\n                }\n                if (!qualifiedNameTokens.isEmpty()) {\n                    if (fieldAndMethodsNames.contains(qualifiedNameTokens.getLast()) || localVariablesOfBlock.contains(qualifiedNameTokens.getLast())) {\n                        qualifiedNameTokens.removeLast();\n                        if (fqnMode) {\n                            return true;\n                        } else {\n                            for (int i = qualifiedNameTokens.size() - 1; i > 0; i--) {\n                                java.lang.String testedToken = qualifiedNameTokens.get(i);\n                                if ((!fieldAndMethodsNames.contains(testedToken)) && (!localVariablesOfBlock.contains(testedToken))) {\n                                    return false;\n                                }\n                            }\n                            return true;\n                        }\n                    }\n                }\n            }\n            parent = parent.getParent();\n        } \n    } catch (spoon.reflect.visitor.printer.ParentNotInitializedException e) {\n        return false;\n    }\n    return false;\n}",
            "src_parent": "public class ElementPrinterHelper {\n    private final spoon.reflect.visitor.DefaultJavaPrettyPrinter prettyPrinter;\n\n    private final spoon.compiler.Environment env;\n\n    private spoon.reflect.visitor.printer.PrinterHelper printer;\n\n    public ElementPrinterHelper(spoon.reflect.visitor.printer.PrinterHelper printerHelper, spoon.reflect.visitor.DefaultJavaPrettyPrinter prettyPrinter, spoon.compiler.Environment env) {\n        this.printer = printerHelper;\n        this.prettyPrinter = prettyPrinter;\n        private spoon.reflect.visitor.printer.Set<java.lang.String> fieldAndMethodsNames = new spoon.reflect.visitor.printer.HashSet<java.lang.String>();\n        this.env = env;\n    }\n\n    public void setPrinter(spoon.reflect.visitor.printer.PrinterHelper printer) {\n        this.printer = printer;\n    }\n\n    public void writeAnnotations(spoon.reflect.declaration.CtElement element) {\n        for (spoon.reflect.declaration.CtAnnotation<?> annotation : element.getAnnotations()) {\n            prettyPrinter.scan(annotation);\n        }\n    }\n\n    public void writeModifiers(spoon.reflect.declaration.CtModifiable modifiable) {\n        for (spoon.reflect.declaration.ModifierKind modifierKind : modifiable.getModifiers()) {\n            printer.write(modifierKind.toString() + \" \");\n        }\n    }\n\n    public void visitCtNamedElement(spoon.reflect.declaration.CtNamedElement namedElement, spoon.reflect.cu.CompilationUnit sourceCompilationUnit) {\n        writeAnnotations(namedElement);\n        if (env.isPreserveLineNumbers()) {\n            printer.adjustPosition(namedElement, sourceCompilationUnit);\n        }\n    }\n\n    public void writeExtendsClause(spoon.reflect.declaration.CtType<?> type) {\n        if (type.getSuperclass() != null) {\n            printer.write(\" extends \");\n            prettyPrinter.scan(type.getSuperclass());\n        }\n    }\n\n    public void writeImplementsClause(spoon.reflect.declaration.CtType<?> type) {\n        if (type.getSuperInterfaces().size() > 0) {\n            printer.write(\" implements \");\n            for (spoon.reflect.reference.CtTypeReference<?> ref : type.getSuperInterfaces()) {\n                prettyPrinter.scan(ref);\n                printer.write(\" , \");\n            }\n            printer.removeLastChar();\n        }\n    }\n\n    public void writeExecutableParameters(spoon.reflect.declaration.CtExecutable<?> executable) {\n        printer.write(\"(\");\n        if (executable.getParameters().size() > 0) {\n            for (spoon.reflect.declaration.CtParameter<?> p : executable.getParameters()) {\n                prettyPrinter.scan(p);\n                printer.write(\", \");\n            }\n            printer.removeLastChar();\n        }\n        printer.write(\")\");\n    }\n\n    public void writeThrowsClause(spoon.reflect.declaration.CtExecutable<?> executable) {\n        if (executable.getThrownTypes().size() > 0) {\n            printer.write(\" throws \");\n            for (spoon.reflect.reference.CtTypeReference<?> ref : executable.getThrownTypes()) {\n                prettyPrinter.scan(ref);\n                printer.write(\", \");\n            }\n            printer.removeLastChar();\n        }\n    }\n\n    public void writeStatement(spoon.reflect.code.CtStatement statement) {\n        prettyPrinter.scan(statement);\n        if (!((((((((((statement instanceof spoon.reflect.code.CtBlock) || (statement instanceof spoon.reflect.code.CtIf)) || (statement instanceof spoon.reflect.code.CtFor)) || (statement instanceof spoon.reflect.code.CtForEach)) || (statement instanceof spoon.reflect.code.CtWhile)) || (statement instanceof spoon.reflect.code.CtTry)) || (statement instanceof spoon.reflect.code.CtSwitch)) || (statement instanceof spoon.reflect.code.CtSynchronized)) || (statement instanceof spoon.reflect.declaration.CtClass)) || (statement instanceof spoon.reflect.code.CtComment))) {\n            printer.write(\";\");\n        }\n        writeComment(statement, spoon.reflect.visitor.printer.CommentOffset.AFTER);\n    }\n\n    public void writeElementList(java.util.List<spoon.reflect.declaration.CtTypeMember> elements) {\n        for (spoon.reflect.declaration.CtTypeMember element : elements) {\n            if ((element instanceof spoon.reflect.declaration.CtConstructor) && element.isImplicit()) {\n                continue;\n            }\n            printer.writeln().writeTabs();\n            prettyPrinter.scan(element);\n            if (!env.isPreserveLineNumbers()) {\n                printer.writeln();\n            }\n        }\n    }\n\n    public void writeAnnotationElement(spoon.reflect.factory.Factory factory, java.lang.Object value) {\n        if (value instanceof spoon.reflect.code.CtTypeAccess) {\n            prettyPrinter.scan(((spoon.reflect.code.CtTypeAccess) (value)));\n            printer.write(\".class\");\n        } else if (value instanceof spoon.reflect.reference.CtFieldReference) {\n            prettyPrinter.scan(((spoon.reflect.reference.CtFieldReference<?>) (value)).getDeclaringType());\n            printer.write(\".\" + ((spoon.reflect.reference.CtFieldReference<?>) (value)).getSimpleName());\n        } else if (value instanceof spoon.reflect.declaration.CtElement) {\n            prettyPrinter.scan(((spoon.reflect.declaration.CtElement) (value)));\n        } else if (value instanceof java.lang.String) {\n            printer.write((\"\\\"\" + value.toString()) + \"\\\"\");\n        } else if (value instanceof java.util.Collection) {\n            printer.write(\"{\");\n            if (!((java.util.Collection<?>) (value)).isEmpty()) {\n                for (java.lang.Object obj : ((java.util.Collection<?>) (value))) {\n                    writeAnnotationElement(factory, obj);\n                    printer.write(\" ,\");\n                }\n                printer.removeLastChar();\n            }\n            printer.write(\"}\");\n        } else if (value instanceof java.lang.Object[]) {\n            printer.write(\"{\");\n            if (((java.lang.Object[]) (value)).length > 0) {\n                for (java.lang.Object obj : ((java.lang.Object[]) (value))) {\n                    writeAnnotationElement(factory, obj);\n                    printer.write(\" ,\");\n                }\n                printer.removeLastChar();\n            }\n            printer.write(\"}\");\n        } else if (value instanceof java.lang.Enum) {\n            try (final spoon.reflect.visitor.PrintingContext.Writable c = prettyPrinter.getContext().modify().ignoreGenerics(true)) {\n                prettyPrinter.scan(factory.Type().createReference(((java.lang.Enum<?>) (value)).getDeclaringClass()));\n            }\n            printer.write(\".\");\n            printer.write(value.toString());\n        } else {\n            printer.write(value.toString());\n        }\n    }\n\n    public void writeFormalTypeParameters(spoon.reflect.declaration.CtFormalTypeDeclarer ctFormalTypeDeclarer) {\n        final java.util.Collection<spoon.reflect.declaration.CtTypeParameter> parameters = ctFormalTypeDeclarer.getFormalCtTypeParameters();\n        if (parameters == null) {\n            return;\n        }\n        if (parameters.size() > 0) {\n            printer.write('<');\n            for (spoon.reflect.declaration.CtTypeParameter parameter : parameters) {\n                prettyPrinter.scan(parameter);\n                printer.write(\", \");\n            }\n            printer.removeLastChar();\n            printer.write('>');\n        }\n    }\n\n    public void writeActualTypeArguments(spoon.reflect.reference.CtActualTypeContainer ctGenericElementReference) {\n        final java.util.Collection<spoon.reflect.reference.CtTypeReference<?>> arguments = ctGenericElementReference.getActualTypeArguments();\n        if ((arguments != null) && (arguments.size() > 0)) {\n            printer.write(\"<\");\n            boolean isImplicitTypeReference = true;\n            for (spoon.reflect.reference.CtTypeReference<?> argument : arguments) {\n                if (!argument.isImplicit()) {\n                    isImplicitTypeReference = false;\n                    prettyPrinter.scan(argument);\n                    printer.write(\", \");\n                }\n            }\n            if (!isImplicitTypeReference) {\n                printer.removeLastChar();\n            }\n            printer.write(\">\");\n        }\n    }\n\n    public void writeHeader(java.util.List<spoon.reflect.declaration.CtType<?>> types, java.util.Collection<spoon.reflect.reference.CtReference> imports) {\n        if (!types.isEmpty()) {\n            for (spoon.reflect.declaration.CtType<?> ctType : types) {\n                writeComment(ctType, spoon.reflect.visitor.printer.CommentOffset.TOP_FILE);\n                printer.writeln().writeln().writeTabs();\n            }\n            if (!types.get(0).getPackage().isUnnamedPackage()) {\n                printer.write((\"package \" + types.get(0).getPackage().getQualifiedName()) + \";\");\n            }\n            printer.writeln().writeln().writeTabs();\n            for (spoon.reflect.reference.CtReference ref : imports) {\n                if (ref instanceof spoon.reflect.reference.CtTypeReference) {\n                    spoon.reflect.reference.CtTypeReference typeRef = ((spoon.reflect.reference.CtTypeReference) (ref));\n                    printer.write((\"import \" + typeRef.getQualifiedName()) + \";\").writeln().writeTabs();\n                } else if (ref instanceof spoon.reflect.reference.CtExecutableReference) {\n                    spoon.reflect.reference.CtExecutableReference execRef = ((spoon.reflect.reference.CtExecutableReference) (ref));\n                    if (execRef.getDeclaringType() != null) {\n                        printer.write((((\"import static \" + this.removeInnerTypeSeparator(execRef.getDeclaringType().getQualifiedName())) + \".\") + execRef.getSimpleName()) + \";\").writeln().writeTabs();\n                    }\n                } else if (ref instanceof spoon.reflect.reference.CtFieldReference) {\n                    spoon.reflect.reference.CtFieldReference fieldRef = ((spoon.reflect.reference.CtFieldReference) (ref));\n                    printer.write((((\"import static \" + this.removeInnerTypeSeparator(fieldRef.getDeclaringType().getQualifiedName())) + \".\") + fieldRef.getSimpleName()) + \";\").writeln().writeTabs();\n                }\n            }\n            printer.writeln().writeTabs();\n        }\n    }\n\n    private java.lang.String removeInnerTypeSeparator(java.lang.String fqn) {\n        return fqn.replace(spoon.reflect.declaration.CtType.INNERTTYPE_SEPARATOR, \".\");\n    }\n\n    public void writeComment(spoon.reflect.code.CtComment comment) {\n        if ((!env.isCommentsEnabled()) || (comment == null)) {\n            return;\n        }\n        prettyPrinter.scan(comment);\n        printer.writeln().writeTabs();\n    }\n\n    private void writeComment(java.util.List<spoon.reflect.code.CtComment> comments) {\n        if ((!env.isCommentsEnabled()) || (comments == null)) {\n            return;\n        }\n        for (spoon.reflect.code.CtComment comment : comments) {\n            writeComment(comment);\n        }\n    }\n\n    public void writeComment(spoon.reflect.declaration.CtElement element) {\n        if (element == null) {\n            return;\n        }\n        writeComment(element.getComments());\n    }\n\n    public void writeComment(spoon.reflect.declaration.CtElement element, spoon.reflect.visitor.printer.CommentOffset offset) {\n        writeComment(getComments(element, offset));\n    }\n\n    public java.util.List<spoon.reflect.code.CtComment> getComments(spoon.reflect.declaration.CtElement element, spoon.reflect.visitor.printer.CommentOffset offset) {\n        java.util.List<spoon.reflect.code.CtComment> commentsToPrint = new java.util.ArrayList<>();\n        if ((!env.isCommentsEnabled()) || (element == null)) {\n            return commentsToPrint;\n        }\n        for (spoon.reflect.code.CtComment comment : element.getComments()) {\n            if ((comment.getCommentType() == spoon.reflect.code.CtComment.CommentType.FILE) && (offset == spoon.reflect.visitor.printer.CommentOffset.TOP_FILE)) {\n                commentsToPrint.add(comment);\n                continue;\n            }\n            if (comment.getCommentType() == spoon.reflect.code.CtComment.CommentType.FILE) {\n                continue;\n            }\n            if ((comment.getPosition() == null) || (element.getPosition() == null)) {\n                if (offset == spoon.reflect.visitor.printer.CommentOffset.BEFORE) {\n                    commentsToPrint.add(comment);\n                }\n                continue;\n            }\n            final int line = element.getPosition().getLine();\n            final int sourceEnd = element.getPosition().getSourceEnd();\n            final int sourceStart = element.getPosition().getSourceStart();\n            if ((offset == spoon.reflect.visitor.printer.CommentOffset.BEFORE) && ((comment.getPosition().getLine() < line) || ((sourceStart <= comment.getPosition().getSourceStart()) && (sourceEnd >= comment.getPosition().getSourceEnd())))) {\n                commentsToPrint.add(comment);\n            } else if ((offset == spoon.reflect.visitor.printer.CommentOffset.AFTER) && (comment.getPosition().getSourceStart() > sourceEnd)) {\n                commentsToPrint.add(comment);\n            } else {\n                final int endLine = element.getPosition().getEndLine();\n                if (((offset == spoon.reflect.visitor.printer.CommentOffset.INSIDE) && (comment.getPosition().getLine() >= line)) && (comment.getPosition().getEndLine() <= endLine)) {\n                    commentsToPrint.add(comment);\n                }\n            }\n        }\n        return commentsToPrint;\n    }\n\n    public void writeIfOrLoopBlock(spoon.reflect.code.CtStatement block) {\n        if (block != null) {\n            if ((!block.isImplicit()) && ((block instanceof spoon.reflect.code.CtBlock) || (block instanceof spoon.reflect.code.CtIf))) {\n                printer.write(\" \");\n            }\n            if ((!(block instanceof spoon.reflect.code.CtBlock)) && (!(block instanceof spoon.reflect.code.CtIf))) {\n                printer.incTab();\n                printer.writeln().writeTabs();\n            }\n            writeStatement(block);\n            if ((!(block instanceof spoon.reflect.code.CtBlock)) && (!(block instanceof spoon.reflect.code.CtIf))) {\n                printer.decTab().writeln().writeTabs();\n            }\n            if (!block.isImplicit()) {\n                if ((!block.isParentInitialized()) || (((!(block.getParent() instanceof spoon.reflect.code.CtFor)) && (!(block.getParent() instanceof spoon.reflect.code.CtForEach))) && (!(block.getParent() instanceof spoon.reflect.code.CtIf)))) {\n                    printer.write(\" \");\n                }\n            }\n        } else {\n            printer.write(\";\");\n        }\n    }\n\n    protected spoon.reflect.visitor.printer.Set<java.lang.String> lookForLocalVariables(spoon.reflect.declaration.CtElement parent) {\n        spoon.reflect.visitor.printer.Set<java.lang.String> result = new spoon.reflect.visitor.printer.HashSet();\n        while ((parent != null) && (!(parent instanceof spoon.reflect.code.CtBlock))) {\n            if (parent instanceof spoon.reflect.declaration.CtClass) {\n                return result;\n            }\n            parent = parent.getParent();\n        } \n        if (parent != null) {\n            spoon.reflect.code.CtBlock block = ((spoon.reflect.code.CtBlock) (parent));\n            boolean innerClass = false;\n            while ((parent != null) && (!(parent instanceof spoon.reflect.declaration.CtClass))) {\n                parent = parent.getParent();\n            } \n            if (parent != null) {\n                if (!(parent.getParent() instanceof spoon.reflect.visitor.printer.CtPackage)) {\n                    while ((parent != null) && (!(parent instanceof spoon.reflect.code.CtBlock))) {\n                        parent = parent.getParent();\n                    } \n                    if (parent != null) {\n                        block = ((spoon.reflect.code.CtBlock) (parent));\n                    }\n                }\n            }\n            spoon.reflect.visitor.printer.AccessibleVariablesFinder avf = new spoon.reflect.visitor.printer.AccessibleVariablesFinder(block);\n            java.util.List<spoon.reflect.visitor.printer.CtVariable> variables = avf.find();\n            for (spoon.reflect.visitor.printer.CtVariable variable : variables) {\n                result.add(variable.getSimpleName());\n            }\n        }\n        return result;\n    }\n\n    protected boolean isTypeInCollision(spoon.reflect.reference.CtReference ref, boolean fqnMode) {\n        if (targetType.getSimpleName().equals(ref.getSimpleName()) && (!targetType.equals(ref))) {\n            return true;\n        }\n        try {\n            spoon.reflect.declaration.CtElement parent;\n            if (ref instanceof spoon.reflect.reference.CtTypeReference) {\n                parent = ref.getParent();\n            } else {\n                parent = ref;\n            }\n            spoon.reflect.visitor.printer.Set<java.lang.String> localVariablesOfBlock = new spoon.reflect.visitor.printer.HashSet();\n            if (parent instanceof spoon.reflect.visitor.printer.CtField) {\n                this.fieldAndMethodsNames.add(((spoon.reflect.visitor.printer.CtField) (parent)).getSimpleName());\n            } else if (parent instanceof spoon.reflect.visitor.printer.CtMethod) {\n                this.fieldAndMethodsNames.add(((spoon.reflect.visitor.printer.CtMethod) (parent)).getSimpleName());\n            } else {\n                localVariablesOfBlock = this.lookForLocalVariables(parent);\n            }\n            while (!(parent instanceof spoon.reflect.visitor.printer.CtPackage)) {\n                if ((parent instanceof spoon.reflect.reference.CtFieldReference) || (parent instanceof spoon.reflect.reference.CtExecutableReference)) {\n                    spoon.reflect.reference.CtReference parentType = ((spoon.reflect.reference.CtReference) (parent));\n                    spoon.reflect.visitor.printer.LinkedList<java.lang.String> qualifiedNameTokens = new spoon.reflect.visitor.printer.LinkedList();\n                    if (parentType != parent) {\n                        qualifiedNameTokens.add(parentType.getSimpleName());\n                    }\n                    spoon.reflect.reference.CtTypeReference typeReference;\n                    if (parent instanceof spoon.reflect.reference.CtFieldReference) {\n                        typeReference = ((spoon.reflect.reference.CtFieldReference) (parent)).getDeclaringType();\n                    } else {\n                        typeReference = ((spoon.reflect.reference.CtExecutableReference) (parent)).getDeclaringType();\n                    }\n                    if (typeReference != null) {\n                        qualifiedNameTokens.add(typeReference.getSimpleName());\n                        if (typeReference.getPackage() != null) {\n                            spoon.reflect.visitor.printer.CtPackage ctPackage = typeReference.getPackage().getDeclaration();\n                            while (ctPackage != null) {\n                                qualifiedNameTokens.add(ctPackage.getSimpleName());\n                                spoon.reflect.declaration.CtElement packParent = ctPackage.getParent();\n                                if ((packParent.getParent() != null) && (!((spoon.reflect.visitor.printer.CtPackage) (packParent)).getSimpleName().equals(CtPackage.TOP_LEVEL_PACKAGE_NAME))) {\n                                    ctPackage = ((spoon.reflect.visitor.printer.CtPackage) (packParent));\n                                } else {\n                                    ctPackage = null;\n                                }\n                            } \n                        }\n                    }\n                    if (!qualifiedNameTokens.isEmpty()) {\n                        if (fieldAndMethodsNames.contains(qualifiedNameTokens.getLast()) || localVariablesOfBlock.contains(qualifiedNameTokens.getLast())) {\n                            qualifiedNameTokens.removeLast();\n                            if (fqnMode) {\n                                return true;\n                            } else {\n                                for (int i = qualifiedNameTokens.size() - 1; i > 0; i--) {\n                                    java.lang.String testedToken = qualifiedNameTokens.get(i);\n                                    if ((!fieldAndMethodsNames.contains(testedToken)) && (!localVariablesOfBlock.contains(testedToken))) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            }\n                        }\n                    }\n                }\n                parent = parent.getParent();\n            } \n        } catch (spoon.reflect.visitor.printer.ParentNotInitializedException e) {\n            return false;\n        }\n        return false;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Constructor",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private spoon.reflect.visitor.printer.Set<java.lang.String> fieldAndMethodsNames = new spoon.reflect.visitor.printer.HashSet<java.lang.String>()",
            "src_parent": "{\n    this.printer = printerHelper;\n    this.prettyPrinter = prettyPrinter;\n    private spoon.reflect.visitor.printer.Set<java.lang.String> fieldAndMethodsNames = new spoon.reflect.visitor.printer.HashSet<java.lang.String>();\n    this.env = env;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        }
      ],
      "file_name": "ElementPrinterHelper"
    }
  ],
  "id": "bears_35"
}