{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_formatISO8601_noTz",
            "dst_parent": "df = _formatISO8601_noTz",
            "dst_parent_type": "Assignment",
            "dst_type": "FieldRead",
            "operator": "UPD",
            "src": "_formatISO8601_z",
            "src_parent": "df = _formatISO8601_z",
            "src_parent_type": "Assignment",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_NO_TZ",
            "dst_parent": "formatStr = com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_NO_TZ",
            "dst_parent_type": "Assignment",
            "dst_type": "FieldRead",
            "operator": "UPD",
            "src": "com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_Z",
            "src_parent": "formatStr = com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_Z",
            "src_parent_type": "Assignment",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_formatISO8601_noTz",
            "dst_parent": "_formatISO8601_noTz = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601_NO_TZ, formatStr, _timezone, _locale, _lenient)",
            "dst_parent_type": "Assignment",
            "dst_type": "FieldWrite",
            "operator": "UPD",
            "src": "_formatISO8601_z",
            "src_parent": "_formatISO8601_z = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601_Z, formatStr, com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE, _locale, _lenient)",
            "src_parent_type": "Assignment",
            "src_type": "FieldWrite"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601_NO_TZ",
            "dst_parent": "com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601_NO_TZ, formatStr, _timezone, _locale, _lenient)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "UPD",
            "src": "com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601_Z",
            "src_parent": "com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601_Z, formatStr, com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE, _locale, _lenient)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_timezone",
            "dst_parent": "com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601_NO_TZ, formatStr, _timezone, _locale, _lenient)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "UPD",
            "src": "com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE",
            "src_parent": "com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601_Z, formatStr, com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE, _locale, _lenient)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "sb.append('Z')",
            "src_parent": "{\n    java.lang.StringBuilder sb = new java.lang.StringBuilder(dateStr);\n    int timeLen = (len - dateStr.lastIndexOf('T')) - 1;\n    if (timeLen < 12) {\n        switch (timeLen) {\n            case 11 :\n                sb.append('0');\n            case 10 :\n                sb.append('0');\n            case 9 :\n                sb.append('0');\n                break;\n            default :\n                sb.append(\".000\");\n        }\n    }\n    sb.append('Z');\n    dateStr = sb.toString();\n    df = _formatISO8601_z;\n    formatStr = com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_Z;\n    if (df == null) {\n        df = _formatISO8601_z = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601_Z, formatStr, com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE, _locale, _lenient);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "protected static final java.lang.String DATE_FORMAT_STR_ISO8601_NO_TZ = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";",
            "src_parent": "@java.lang.SuppressWarnings(\"serial\")\npublic class StdDateFormat extends java.text.DateFormat {\n    public static final java.lang.String DATE_FORMAT_STR_ISO8601 = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";\n\n    protected static final java.lang.String DATE_FORMAT_STR_ISO8601_Z = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\n\n    protected static final java.lang.String DATE_FORMAT_STR_ISO8601_NO_TZ = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n\n    protected static final java.lang.String DATE_FORMAT_STR_PLAIN = \"yyyy-MM-dd\";\n\n    protected static final java.lang.String DATE_FORMAT_STR_RFC1123 = \"EEE, dd MMM yyyy HH:mm:ss zzz\";\n\n    protected static final java.lang.String[] ALL_FORMATS = new java.lang.String[]{ com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_Z, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_NO_TZ, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_RFC1123, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_PLAIN };\n\n    private static final java.util.TimeZone DEFAULT_TIMEZONE;\n\n    static {\n        DEFAULT_TIMEZONE = java.util.TimeZone.getTimeZone(\"UTC\");\n    }\n\n    private static final java.util.Locale DEFAULT_LOCALE = java.util.Locale.US;\n\n    protected static final java.text.DateFormat DATE_FORMAT_RFC1123;\n\n    protected static final java.text.DateFormat DATE_FORMAT_ISO8601;\n\n    protected static final java.text.DateFormat DATE_FORMAT_ISO8601_Z;\n\n    protected static final java.text.DateFormat DATE_FORMAT_ISO8601_NO_TZ;\n\n    protected static final java.text.DateFormat DATE_FORMAT_PLAIN;\n\n    static {\n        DATE_FORMAT_RFC1123 = new java.text.SimpleDateFormat(DATE_FORMAT_STR_RFC1123, DEFAULT_LOCALE);\n        DATE_FORMAT_RFC1123.setTimeZone(DEFAULT_TIMEZONE);\n        DATE_FORMAT_ISO8601 = new java.text.SimpleDateFormat(DATE_FORMAT_STR_ISO8601, DEFAULT_LOCALE);\n        DATE_FORMAT_ISO8601.setTimeZone(DEFAULT_TIMEZONE);\n        DATE_FORMAT_ISO8601_Z = new java.text.SimpleDateFormat(DATE_FORMAT_STR_ISO8601_Z, DEFAULT_LOCALE);\n        DATE_FORMAT_ISO8601_Z.setTimeZone(DEFAULT_TIMEZONE);\n        DATE_FORMAT_ISO8601_NO_TZ = new java.text.SimpleDateFormat(DATE_FORMAT_STR_ISO8601_NO_TZ, DEFAULT_LOCALE);\n        DATE_FORMAT_ISO8601_NO_TZ.setTimeZone(DEFAULT_TIMEZONE);\n        DATE_FORMAT_PLAIN = new java.text.SimpleDateFormat(DATE_FORMAT_STR_PLAIN, DEFAULT_LOCALE);\n        DATE_FORMAT_PLAIN.setTimeZone(DEFAULT_TIMEZONE);\n    }\n\n    public static final com.fasterxml.jackson.databind.util.StdDateFormat instance = new com.fasterxml.jackson.databind.util.StdDateFormat();\n\n    protected transient java.util.TimeZone _timezone;\n\n    protected final java.util.Locale _locale;\n\n    protected java.lang.Boolean _lenient;\n\n    protected transient java.text.DateFormat _formatRFC1123;\n\n    protected transient java.text.DateFormat _formatISO8601;\n\n    protected transient java.text.DateFormat _formatISO8601_z;\n\n    protected transient java.text.DateFormat _formatISO8601_noTz;\n\n    protected transient java.text.DateFormat _formatPlain;\n\n    public StdDateFormat() {\n        _locale = com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_LOCALE;\n    }\n\n    @java.lang.Deprecated\n    public StdDateFormat(java.util.TimeZone tz, java.util.Locale loc) {\n        _timezone = tz;\n        _locale = loc;\n    }\n\n    protected StdDateFormat(java.util.TimeZone tz, java.util.Locale loc, java.lang.Boolean lenient) {\n        _timezone = tz;\n        _locale = loc;\n        _lenient = lenient;\n    }\n\n    public static java.util.TimeZone getDefaultTimeZone() {\n        return com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE;\n    }\n\n    public com.fasterxml.jackson.databind.util.StdDateFormat withTimeZone(java.util.TimeZone tz) {\n        if (tz == null) {\n            tz = com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE;\n        }\n        if ((tz == _timezone) || tz.equals(_timezone)) {\n            return this;\n        }\n        return new com.fasterxml.jackson.databind.util.StdDateFormat(tz, _locale, _lenient);\n    }\n\n    public com.fasterxml.jackson.databind.util.StdDateFormat withLocale(java.util.Locale loc) {\n        if (loc.equals(_locale)) {\n            return this;\n        }\n        return new com.fasterxml.jackson.databind.util.StdDateFormat(_timezone, loc, _lenient);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.util.StdDateFormat clone() {\n        return new com.fasterxml.jackson.databind.util.StdDateFormat(_timezone, _locale, _lenient);\n    }\n\n    @java.lang.Deprecated\n    public static java.text.DateFormat getISO8601Format(java.util.TimeZone tz) {\n        return com.fasterxml.jackson.databind.util.StdDateFormat.getISO8601Format(tz, com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_LOCALE);\n    }\n\n    public static java.text.DateFormat getISO8601Format(java.util.TimeZone tz, java.util.Locale loc) {\n        return com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601, tz, loc, null);\n    }\n\n    public static java.text.DateFormat getRFC1123Format(java.util.TimeZone tz, java.util.Locale loc) {\n        return com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_RFC1123, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_RFC1123, tz, loc, null);\n    }\n\n    @java.lang.Deprecated\n    public static java.text.DateFormat getRFC1123Format(java.util.TimeZone tz) {\n        return com.fasterxml.jackson.databind.util.StdDateFormat.getRFC1123Format(tz, com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_LOCALE);\n    }\n\n    @java.lang.Override\n    public java.util.TimeZone getTimeZone() {\n        return _timezone;\n    }\n\n    @java.lang.Override\n    public void setTimeZone(java.util.TimeZone tz) {\n        if (!tz.equals(_timezone)) {\n            _clearFormats();\n            _timezone = tz;\n        }\n    }\n\n    @java.lang.Override\n    public void setLenient(boolean enabled) {\n        java.lang.Boolean newValue = enabled;\n        if (_lenient != newValue) {\n            _lenient = newValue;\n            _clearFormats();\n        }\n    }\n\n    @java.lang.Override\n    public boolean isLenient() {\n        if (_lenient == null) {\n            return true;\n        }\n        return _lenient.booleanValue();\n    }\n\n    @java.lang.Override\n    public java.util.Date parse(java.lang.String dateStr) throws java.text.ParseException {\n        dateStr = dateStr.trim();\n        java.text.ParsePosition pos = new java.text.ParsePosition(0);\n        java.util.Date dt;\n        if (looksLikeISO8601(dateStr)) {\n            dt = parseAsISO8601(dateStr, pos, true);\n        } else {\n            int i = dateStr.length();\n            while ((--i) >= 0) {\n                char ch = dateStr.charAt(i);\n                if ((ch < '0') || (ch > '9')) {\n                    if ((i > 0) || (ch != '-')) {\n                        break;\n                    }\n                }\n            } \n            if ((i < 0) && ((dateStr.charAt(0) == '-') || com.fasterxml.jackson.core.io.NumberInput.inLongRange(dateStr, false))) {\n                dt = new java.util.Date(java.lang.Long.parseLong(dateStr));\n            } else {\n                dt = parseAsRFC1123(dateStr, pos);\n            }\n        }\n        if (dt != null) {\n            return dt;\n        }\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        for (java.lang.String f : com.fasterxml.jackson.databind.util.StdDateFormat.ALL_FORMATS) {\n            if (sb.length() > 0) {\n                sb.append(\"\\\", \\\"\");\n            } else {\n                sb.append('\"');\n            }\n            sb.append(f);\n        }\n        sb.append('\"');\n        throw new java.text.ParseException(java.lang.String.format(\"Can not parse date \\\"%s\\\": not compatible with any of standard forms (%s)\", dateStr, sb.toString()), pos.getErrorIndex());\n    }\n\n    @java.lang.Override\n    public java.util.Date parse(java.lang.String dateStr, java.text.ParsePosition pos) {\n        if (looksLikeISO8601(dateStr)) {\n            try {\n                return parseAsISO8601(dateStr, pos, false);\n            } catch (java.text.ParseException e) {\n                return null;\n            }\n        }\n        int i = dateStr.length();\n        while ((--i) >= 0) {\n            char ch = dateStr.charAt(i);\n            if ((ch < '0') || (ch > '9')) {\n                if ((i > 0) || (ch != '-')) {\n                    break;\n                }\n            }\n        } \n        if (i < 0) {\n            if ((dateStr.charAt(0) == '-') || com.fasterxml.jackson.core.io.NumberInput.inLongRange(dateStr, false)) {\n                return new java.util.Date(java.lang.Long.parseLong(dateStr));\n            }\n        }\n        return parseAsRFC1123(dateStr, pos);\n    }\n\n    @java.lang.Override\n    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer toAppendTo, java.text.FieldPosition fieldPosition) {\n        if (_formatISO8601 == null) {\n            _formatISO8601 = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601, _timezone, _locale, _lenient);\n        }\n        return _formatISO8601.format(date, toAppendTo, fieldPosition);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        java.lang.String str = \"DateFormat \" + getClass().getName();\n        java.util.TimeZone tz = _timezone;\n        if (tz != null) {\n            str += (\" (timezone: \" + tz) + \")\";\n        }\n        str += (\"(locale: \" + _locale) + \")\";\n        return str;\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        return o == this;\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return java.lang.System.identityHashCode(this);\n    }\n\n    protected boolean looksLikeISO8601(java.lang.String dateStr) {\n        if ((((dateStr.length() >= 5) && java.lang.Character.isDigit(dateStr.charAt(0))) && java.lang.Character.isDigit(dateStr.charAt(3))) && (dateStr.charAt(4) == '-')) {\n            return true;\n        }\n        return false;\n    }\n\n    protected java.util.Date parseAsISO8601(java.lang.String dateStr, java.text.ParsePosition pos, boolean throwErrors) throws java.text.ParseException {\n        int len = dateStr.length();\n        char c = dateStr.charAt(len - 1);\n        java.text.DateFormat df;\n        java.lang.String formatStr;\n        if ((len <= 10) && java.lang.Character.isDigit(c)) {\n            df = _formatPlain;\n            formatStr = com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_PLAIN;\n            if (df == null) {\n                df = _formatPlain = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_PLAIN, formatStr, _timezone, _locale, _lenient);\n            }\n        } else if (c == 'Z') {\n            df = _formatISO8601_z;\n            formatStr = com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_Z;\n            if (df == null) {\n                df = _formatISO8601_z = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601_Z, formatStr, com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE, _locale, _lenient);\n            }\n            if (dateStr.charAt(len - 4) == ':') {\n                java.lang.StringBuilder sb = new java.lang.StringBuilder(dateStr);\n                sb.insert(len - 1, \".000\");\n                dateStr = sb.toString();\n            }\n        } else if (com.fasterxml.jackson.databind.util.StdDateFormat.hasTimeZone(dateStr)) {\n            c = dateStr.charAt(len - 3);\n            if (c == ':') {\n                java.lang.StringBuilder sb = new java.lang.StringBuilder(dateStr);\n                sb.delete(len - 3, len - 2);\n                dateStr = sb.toString();\n            } else if ((c == '+') || (c == '-')) {\n                dateStr += \"00\";\n            }\n            len = dateStr.length();\n            int timeLen = (len - dateStr.lastIndexOf('T')) - 6;\n            if (timeLen < 12) {\n                int offset = len - 5;\n                java.lang.StringBuilder sb = new java.lang.StringBuilder(dateStr);\n                switch (timeLen) {\n                    case 11 :\n                        sb.insert(offset, '0');\n                        break;\n                    case 10 :\n                        sb.insert(offset, \"00\");\n                        break;\n                    case 9 :\n                        sb.insert(offset, \"000\");\n                        break;\n                    case 8 :\n                        sb.insert(offset, \".000\");\n                        break;\n                    case 7 :\n                        break;\n                    case 6 :\n                        sb.insert(offset, \"00.000\");\n                    case 5 :\n                        sb.insert(offset, \":00.000\");\n                }\n                dateStr = sb.toString();\n            }\n            df = _formatISO8601;\n            formatStr = com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601, formatStr, _timezone, _locale, _lenient);\n            }\n        } else {\n            int timeLen = (len - dateStr.lastIndexOf('T')) - 1;\n            if (timeLen < 12) {\n                java.lang.StringBuilder sb = new java.lang.StringBuilder(dateStr);\n                switch (timeLen) {\n                    case 11 :\n                        sb.append('0');\n                    case 10 :\n                        sb.append('0');\n                    case 9 :\n                        sb.append('0');\n                        break;\n                    default :\n                        sb.append(\".000\");\n                }\n                dateStr = sb.toString();\n            }\n            df = _formatISO8601_noTz;\n            formatStr = com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_NO_TZ;\n            if (df == null) {\n                df = _formatISO8601_noTz = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601_NO_TZ, formatStr, _timezone, _locale, _lenient);\n            }\n        }\n        java.util.Date dt = df.parse(dateStr, pos);\n        if (dt == null) {\n            throw new java.text.ParseException(java.lang.String.format(\"Can not parse date \\\"%s\\\": while it seems to fit format \\'%s\\', parsing fails (leniency? %s)\", dateStr, formatStr, _lenient), pos.getErrorIndex());\n        }\n        return dt;\n    }\n\n    protected java.util.Date parseAsRFC1123(java.lang.String dateStr, java.text.ParsePosition pos) {\n        if (_formatRFC1123 == null) {\n            _formatRFC1123 = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_RFC1123, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_RFC1123, _timezone, _locale, _lenient);\n        }\n        return _formatRFC1123.parse(dateStr, pos);\n    }\n\n    private static final boolean hasTimeZone(java.lang.String str) {\n        int len = str.length();\n        if (len >= 6) {\n            char c = str.charAt(len - 6);\n            if ((c == '+') || (c == '-')) {\n                return true;\n            }\n            c = str.charAt(len - 5);\n            if ((c == '+') || (c == '-')) {\n                return true;\n            }\n            c = str.charAt(len - 3);\n            if ((c == '+') || (c == '-')) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static final java.text.DateFormat _cloneFormat(java.text.DateFormat df, java.lang.String format, java.util.TimeZone tz, java.util.Locale loc, java.lang.Boolean lenient) {\n        if (!loc.equals(com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_LOCALE)) {\n            df = new java.text.SimpleDateFormat(format, loc);\n            df.setTimeZone(tz == null ? com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE : tz);\n        } else {\n            df = ((java.text.DateFormat) (df.clone()));\n            if (tz != null) {\n                df.setTimeZone(tz);\n            }\n        }\n        if (lenient != null) {\n            df.setLenient(lenient.booleanValue());\n        }\n        return df;\n    }\n\n    protected void _clearFormats() {\n        _formatRFC1123 = null;\n        _formatISO8601 = null;\n        _formatISO8601_z = null;\n        _formatISO8601_noTz = null;\n        _formatPlain = null;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "protected static final java.text.DateFormat DATE_FORMAT_ISO8601_NO_TZ;",
            "src_parent": "@java.lang.SuppressWarnings(\"serial\")\npublic class StdDateFormat extends java.text.DateFormat {\n    public static final java.lang.String DATE_FORMAT_STR_ISO8601 = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";\n\n    protected static final java.lang.String DATE_FORMAT_STR_ISO8601_Z = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\n\n    protected static final java.lang.String DATE_FORMAT_STR_ISO8601_NO_TZ = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n\n    protected static final java.lang.String DATE_FORMAT_STR_PLAIN = \"yyyy-MM-dd\";\n\n    protected static final java.lang.String DATE_FORMAT_STR_RFC1123 = \"EEE, dd MMM yyyy HH:mm:ss zzz\";\n\n    protected static final java.lang.String[] ALL_FORMATS = new java.lang.String[]{ com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_Z, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_NO_TZ, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_RFC1123, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_PLAIN };\n\n    private static final java.util.TimeZone DEFAULT_TIMEZONE;\n\n    static {\n        DEFAULT_TIMEZONE = java.util.TimeZone.getTimeZone(\"UTC\");\n    }\n\n    private static final java.util.Locale DEFAULT_LOCALE = java.util.Locale.US;\n\n    protected static final java.text.DateFormat DATE_FORMAT_RFC1123;\n\n    protected static final java.text.DateFormat DATE_FORMAT_ISO8601;\n\n    protected static final java.text.DateFormat DATE_FORMAT_ISO8601_Z;\n\n    protected static final java.text.DateFormat DATE_FORMAT_ISO8601_NO_TZ;\n\n    protected static final java.text.DateFormat DATE_FORMAT_PLAIN;\n\n    static {\n        DATE_FORMAT_RFC1123 = new java.text.SimpleDateFormat(DATE_FORMAT_STR_RFC1123, DEFAULT_LOCALE);\n        DATE_FORMAT_RFC1123.setTimeZone(DEFAULT_TIMEZONE);\n        DATE_FORMAT_ISO8601 = new java.text.SimpleDateFormat(DATE_FORMAT_STR_ISO8601, DEFAULT_LOCALE);\n        DATE_FORMAT_ISO8601.setTimeZone(DEFAULT_TIMEZONE);\n        DATE_FORMAT_ISO8601_Z = new java.text.SimpleDateFormat(DATE_FORMAT_STR_ISO8601_Z, DEFAULT_LOCALE);\n        DATE_FORMAT_ISO8601_Z.setTimeZone(DEFAULT_TIMEZONE);\n        DATE_FORMAT_ISO8601_NO_TZ = new java.text.SimpleDateFormat(DATE_FORMAT_STR_ISO8601_NO_TZ, DEFAULT_LOCALE);\n        DATE_FORMAT_ISO8601_NO_TZ.setTimeZone(DEFAULT_TIMEZONE);\n        DATE_FORMAT_PLAIN = new java.text.SimpleDateFormat(DATE_FORMAT_STR_PLAIN, DEFAULT_LOCALE);\n        DATE_FORMAT_PLAIN.setTimeZone(DEFAULT_TIMEZONE);\n    }\n\n    public static final com.fasterxml.jackson.databind.util.StdDateFormat instance = new com.fasterxml.jackson.databind.util.StdDateFormat();\n\n    protected transient java.util.TimeZone _timezone;\n\n    protected final java.util.Locale _locale;\n\n    protected java.lang.Boolean _lenient;\n\n    protected transient java.text.DateFormat _formatRFC1123;\n\n    protected transient java.text.DateFormat _formatISO8601;\n\n    protected transient java.text.DateFormat _formatISO8601_z;\n\n    protected transient java.text.DateFormat _formatISO8601_noTz;\n\n    protected transient java.text.DateFormat _formatPlain;\n\n    public StdDateFormat() {\n        _locale = com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_LOCALE;\n    }\n\n    @java.lang.Deprecated\n    public StdDateFormat(java.util.TimeZone tz, java.util.Locale loc) {\n        _timezone = tz;\n        _locale = loc;\n    }\n\n    protected StdDateFormat(java.util.TimeZone tz, java.util.Locale loc, java.lang.Boolean lenient) {\n        _timezone = tz;\n        _locale = loc;\n        _lenient = lenient;\n    }\n\n    public static java.util.TimeZone getDefaultTimeZone() {\n        return com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE;\n    }\n\n    public com.fasterxml.jackson.databind.util.StdDateFormat withTimeZone(java.util.TimeZone tz) {\n        if (tz == null) {\n            tz = com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE;\n        }\n        if ((tz == _timezone) || tz.equals(_timezone)) {\n            return this;\n        }\n        return new com.fasterxml.jackson.databind.util.StdDateFormat(tz, _locale, _lenient);\n    }\n\n    public com.fasterxml.jackson.databind.util.StdDateFormat withLocale(java.util.Locale loc) {\n        if (loc.equals(_locale)) {\n            return this;\n        }\n        return new com.fasterxml.jackson.databind.util.StdDateFormat(_timezone, loc, _lenient);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.util.StdDateFormat clone() {\n        return new com.fasterxml.jackson.databind.util.StdDateFormat(_timezone, _locale, _lenient);\n    }\n\n    @java.lang.Deprecated\n    public static java.text.DateFormat getISO8601Format(java.util.TimeZone tz) {\n        return com.fasterxml.jackson.databind.util.StdDateFormat.getISO8601Format(tz, com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_LOCALE);\n    }\n\n    public static java.text.DateFormat getISO8601Format(java.util.TimeZone tz, java.util.Locale loc) {\n        return com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601, tz, loc, null);\n    }\n\n    public static java.text.DateFormat getRFC1123Format(java.util.TimeZone tz, java.util.Locale loc) {\n        return com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_RFC1123, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_RFC1123, tz, loc, null);\n    }\n\n    @java.lang.Deprecated\n    public static java.text.DateFormat getRFC1123Format(java.util.TimeZone tz) {\n        return com.fasterxml.jackson.databind.util.StdDateFormat.getRFC1123Format(tz, com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_LOCALE);\n    }\n\n    @java.lang.Override\n    public java.util.TimeZone getTimeZone() {\n        return _timezone;\n    }\n\n    @java.lang.Override\n    public void setTimeZone(java.util.TimeZone tz) {\n        if (!tz.equals(_timezone)) {\n            _clearFormats();\n            _timezone = tz;\n        }\n    }\n\n    @java.lang.Override\n    public void setLenient(boolean enabled) {\n        java.lang.Boolean newValue = enabled;\n        if (_lenient != newValue) {\n            _lenient = newValue;\n            _clearFormats();\n        }\n    }\n\n    @java.lang.Override\n    public boolean isLenient() {\n        if (_lenient == null) {\n            return true;\n        }\n        return _lenient.booleanValue();\n    }\n\n    @java.lang.Override\n    public java.util.Date parse(java.lang.String dateStr) throws java.text.ParseException {\n        dateStr = dateStr.trim();\n        java.text.ParsePosition pos = new java.text.ParsePosition(0);\n        java.util.Date dt;\n        if (looksLikeISO8601(dateStr)) {\n            dt = parseAsISO8601(dateStr, pos, true);\n        } else {\n            int i = dateStr.length();\n            while ((--i) >= 0) {\n                char ch = dateStr.charAt(i);\n                if ((ch < '0') || (ch > '9')) {\n                    if ((i > 0) || (ch != '-')) {\n                        break;\n                    }\n                }\n            } \n            if ((i < 0) && ((dateStr.charAt(0) == '-') || com.fasterxml.jackson.core.io.NumberInput.inLongRange(dateStr, false))) {\n                dt = new java.util.Date(java.lang.Long.parseLong(dateStr));\n            } else {\n                dt = parseAsRFC1123(dateStr, pos);\n            }\n        }\n        if (dt != null) {\n            return dt;\n        }\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        for (java.lang.String f : com.fasterxml.jackson.databind.util.StdDateFormat.ALL_FORMATS) {\n            if (sb.length() > 0) {\n                sb.append(\"\\\", \\\"\");\n            } else {\n                sb.append('\"');\n            }\n            sb.append(f);\n        }\n        sb.append('\"');\n        throw new java.text.ParseException(java.lang.String.format(\"Can not parse date \\\"%s\\\": not compatible with any of standard forms (%s)\", dateStr, sb.toString()), pos.getErrorIndex());\n    }\n\n    @java.lang.Override\n    public java.util.Date parse(java.lang.String dateStr, java.text.ParsePosition pos) {\n        if (looksLikeISO8601(dateStr)) {\n            try {\n                return parseAsISO8601(dateStr, pos, false);\n            } catch (java.text.ParseException e) {\n                return null;\n            }\n        }\n        int i = dateStr.length();\n        while ((--i) >= 0) {\n            char ch = dateStr.charAt(i);\n            if ((ch < '0') || (ch > '9')) {\n                if ((i > 0) || (ch != '-')) {\n                    break;\n                }\n            }\n        } \n        if (i < 0) {\n            if ((dateStr.charAt(0) == '-') || com.fasterxml.jackson.core.io.NumberInput.inLongRange(dateStr, false)) {\n                return new java.util.Date(java.lang.Long.parseLong(dateStr));\n            }\n        }\n        return parseAsRFC1123(dateStr, pos);\n    }\n\n    @java.lang.Override\n    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer toAppendTo, java.text.FieldPosition fieldPosition) {\n        if (_formatISO8601 == null) {\n            _formatISO8601 = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601, _timezone, _locale, _lenient);\n        }\n        return _formatISO8601.format(date, toAppendTo, fieldPosition);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        java.lang.String str = \"DateFormat \" + getClass().getName();\n        java.util.TimeZone tz = _timezone;\n        if (tz != null) {\n            str += (\" (timezone: \" + tz) + \")\";\n        }\n        str += (\"(locale: \" + _locale) + \")\";\n        return str;\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        return o == this;\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return java.lang.System.identityHashCode(this);\n    }\n\n    protected boolean looksLikeISO8601(java.lang.String dateStr) {\n        if ((((dateStr.length() >= 5) && java.lang.Character.isDigit(dateStr.charAt(0))) && java.lang.Character.isDigit(dateStr.charAt(3))) && (dateStr.charAt(4) == '-')) {\n            return true;\n        }\n        return false;\n    }\n\n    protected java.util.Date parseAsISO8601(java.lang.String dateStr, java.text.ParsePosition pos, boolean throwErrors) throws java.text.ParseException {\n        int len = dateStr.length();\n        char c = dateStr.charAt(len - 1);\n        java.text.DateFormat df;\n        java.lang.String formatStr;\n        if ((len <= 10) && java.lang.Character.isDigit(c)) {\n            df = _formatPlain;\n            formatStr = com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_PLAIN;\n            if (df == null) {\n                df = _formatPlain = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_PLAIN, formatStr, _timezone, _locale, _lenient);\n            }\n        } else if (c == 'Z') {\n            df = _formatISO8601_z;\n            formatStr = com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_Z;\n            if (df == null) {\n                df = _formatISO8601_z = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601_Z, formatStr, com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE, _locale, _lenient);\n            }\n            if (dateStr.charAt(len - 4) == ':') {\n                java.lang.StringBuilder sb = new java.lang.StringBuilder(dateStr);\n                sb.insert(len - 1, \".000\");\n                dateStr = sb.toString();\n            }\n        } else if (com.fasterxml.jackson.databind.util.StdDateFormat.hasTimeZone(dateStr)) {\n            c = dateStr.charAt(len - 3);\n            if (c == ':') {\n                java.lang.StringBuilder sb = new java.lang.StringBuilder(dateStr);\n                sb.delete(len - 3, len - 2);\n                dateStr = sb.toString();\n            } else if ((c == '+') || (c == '-')) {\n                dateStr += \"00\";\n            }\n            len = dateStr.length();\n            int timeLen = (len - dateStr.lastIndexOf('T')) - 6;\n            if (timeLen < 12) {\n                int offset = len - 5;\n                java.lang.StringBuilder sb = new java.lang.StringBuilder(dateStr);\n                switch (timeLen) {\n                    case 11 :\n                        sb.insert(offset, '0');\n                        break;\n                    case 10 :\n                        sb.insert(offset, \"00\");\n                        break;\n                    case 9 :\n                        sb.insert(offset, \"000\");\n                        break;\n                    case 8 :\n                        sb.insert(offset, \".000\");\n                        break;\n                    case 7 :\n                        break;\n                    case 6 :\n                        sb.insert(offset, \"00.000\");\n                    case 5 :\n                        sb.insert(offset, \":00.000\");\n                }\n                dateStr = sb.toString();\n            }\n            df = _formatISO8601;\n            formatStr = com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601, formatStr, _timezone, _locale, _lenient);\n            }\n        } else {\n            int timeLen = (len - dateStr.lastIndexOf('T')) - 1;\n            if (timeLen < 12) {\n                java.lang.StringBuilder sb = new java.lang.StringBuilder(dateStr);\n                switch (timeLen) {\n                    case 11 :\n                        sb.append('0');\n                    case 10 :\n                        sb.append('0');\n                    case 9 :\n                        sb.append('0');\n                        break;\n                    default :\n                        sb.append(\".000\");\n                }\n                dateStr = sb.toString();\n            }\n            df = _formatISO8601_noTz;\n            formatStr = com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_NO_TZ;\n            if (df == null) {\n                df = _formatISO8601_noTz = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601_NO_TZ, formatStr, _timezone, _locale, _lenient);\n            }\n        }\n        java.util.Date dt = df.parse(dateStr, pos);\n        if (dt == null) {\n            throw new java.text.ParseException(java.lang.String.format(\"Can not parse date \\\"%s\\\": while it seems to fit format \\'%s\\', parsing fails (leniency? %s)\", dateStr, formatStr, _lenient), pos.getErrorIndex());\n        }\n        return dt;\n    }\n\n    protected java.util.Date parseAsRFC1123(java.lang.String dateStr, java.text.ParsePosition pos) {\n        if (_formatRFC1123 == null) {\n            _formatRFC1123 = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_RFC1123, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_RFC1123, _timezone, _locale, _lenient);\n        }\n        return _formatRFC1123.parse(dateStr, pos);\n    }\n\n    private static final boolean hasTimeZone(java.lang.String str) {\n        int len = str.length();\n        if (len >= 6) {\n            char c = str.charAt(len - 6);\n            if ((c == '+') || (c == '-')) {\n                return true;\n            }\n            c = str.charAt(len - 5);\n            if ((c == '+') || (c == '-')) {\n                return true;\n            }\n            c = str.charAt(len - 3);\n            if ((c == '+') || (c == '-')) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static final java.text.DateFormat _cloneFormat(java.text.DateFormat df, java.lang.String format, java.util.TimeZone tz, java.util.Locale loc, java.lang.Boolean lenient) {\n        if (!loc.equals(com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_LOCALE)) {\n            df = new java.text.SimpleDateFormat(format, loc);\n            df.setTimeZone(tz == null ? com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE : tz);\n        } else {\n            df = ((java.text.DateFormat) (df.clone()));\n            if (tz != null) {\n                df.setTimeZone(tz);\n            }\n        }\n        if (lenient != null) {\n            df.setLenient(lenient.booleanValue());\n        }\n        return df;\n    }\n\n    protected void _clearFormats() {\n        _formatRFC1123 = null;\n        _formatISO8601 = null;\n        _formatISO8601_z = null;\n        _formatISO8601_noTz = null;\n        _formatPlain = null;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "protected transient java.text.DateFormat _formatISO8601_noTz;",
            "src_parent": "@java.lang.SuppressWarnings(\"serial\")\npublic class StdDateFormat extends java.text.DateFormat {\n    public static final java.lang.String DATE_FORMAT_STR_ISO8601 = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";\n\n    protected static final java.lang.String DATE_FORMAT_STR_ISO8601_Z = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\n\n    protected static final java.lang.String DATE_FORMAT_STR_ISO8601_NO_TZ = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n\n    protected static final java.lang.String DATE_FORMAT_STR_PLAIN = \"yyyy-MM-dd\";\n\n    protected static final java.lang.String DATE_FORMAT_STR_RFC1123 = \"EEE, dd MMM yyyy HH:mm:ss zzz\";\n\n    protected static final java.lang.String[] ALL_FORMATS = new java.lang.String[]{ com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_Z, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_NO_TZ, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_RFC1123, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_PLAIN };\n\n    private static final java.util.TimeZone DEFAULT_TIMEZONE;\n\n    static {\n        DEFAULT_TIMEZONE = java.util.TimeZone.getTimeZone(\"UTC\");\n    }\n\n    private static final java.util.Locale DEFAULT_LOCALE = java.util.Locale.US;\n\n    protected static final java.text.DateFormat DATE_FORMAT_RFC1123;\n\n    protected static final java.text.DateFormat DATE_FORMAT_ISO8601;\n\n    protected static final java.text.DateFormat DATE_FORMAT_ISO8601_Z;\n\n    protected static final java.text.DateFormat DATE_FORMAT_ISO8601_NO_TZ;\n\n    protected static final java.text.DateFormat DATE_FORMAT_PLAIN;\n\n    static {\n        DATE_FORMAT_RFC1123 = new java.text.SimpleDateFormat(DATE_FORMAT_STR_RFC1123, DEFAULT_LOCALE);\n        DATE_FORMAT_RFC1123.setTimeZone(DEFAULT_TIMEZONE);\n        DATE_FORMAT_ISO8601 = new java.text.SimpleDateFormat(DATE_FORMAT_STR_ISO8601, DEFAULT_LOCALE);\n        DATE_FORMAT_ISO8601.setTimeZone(DEFAULT_TIMEZONE);\n        DATE_FORMAT_ISO8601_Z = new java.text.SimpleDateFormat(DATE_FORMAT_STR_ISO8601_Z, DEFAULT_LOCALE);\n        DATE_FORMAT_ISO8601_Z.setTimeZone(DEFAULT_TIMEZONE);\n        DATE_FORMAT_ISO8601_NO_TZ = new java.text.SimpleDateFormat(DATE_FORMAT_STR_ISO8601_NO_TZ, DEFAULT_LOCALE);\n        DATE_FORMAT_ISO8601_NO_TZ.setTimeZone(DEFAULT_TIMEZONE);\n        DATE_FORMAT_PLAIN = new java.text.SimpleDateFormat(DATE_FORMAT_STR_PLAIN, DEFAULT_LOCALE);\n        DATE_FORMAT_PLAIN.setTimeZone(DEFAULT_TIMEZONE);\n    }\n\n    public static final com.fasterxml.jackson.databind.util.StdDateFormat instance = new com.fasterxml.jackson.databind.util.StdDateFormat();\n\n    protected transient java.util.TimeZone _timezone;\n\n    protected final java.util.Locale _locale;\n\n    protected java.lang.Boolean _lenient;\n\n    protected transient java.text.DateFormat _formatRFC1123;\n\n    protected transient java.text.DateFormat _formatISO8601;\n\n    protected transient java.text.DateFormat _formatISO8601_z;\n\n    protected transient java.text.DateFormat _formatISO8601_noTz;\n\n    protected transient java.text.DateFormat _formatPlain;\n\n    public StdDateFormat() {\n        _locale = com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_LOCALE;\n    }\n\n    @java.lang.Deprecated\n    public StdDateFormat(java.util.TimeZone tz, java.util.Locale loc) {\n        _timezone = tz;\n        _locale = loc;\n    }\n\n    protected StdDateFormat(java.util.TimeZone tz, java.util.Locale loc, java.lang.Boolean lenient) {\n        _timezone = tz;\n        _locale = loc;\n        _lenient = lenient;\n    }\n\n    public static java.util.TimeZone getDefaultTimeZone() {\n        return com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE;\n    }\n\n    public com.fasterxml.jackson.databind.util.StdDateFormat withTimeZone(java.util.TimeZone tz) {\n        if (tz == null) {\n            tz = com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE;\n        }\n        if ((tz == _timezone) || tz.equals(_timezone)) {\n            return this;\n        }\n        return new com.fasterxml.jackson.databind.util.StdDateFormat(tz, _locale, _lenient);\n    }\n\n    public com.fasterxml.jackson.databind.util.StdDateFormat withLocale(java.util.Locale loc) {\n        if (loc.equals(_locale)) {\n            return this;\n        }\n        return new com.fasterxml.jackson.databind.util.StdDateFormat(_timezone, loc, _lenient);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.util.StdDateFormat clone() {\n        return new com.fasterxml.jackson.databind.util.StdDateFormat(_timezone, _locale, _lenient);\n    }\n\n    @java.lang.Deprecated\n    public static java.text.DateFormat getISO8601Format(java.util.TimeZone tz) {\n        return com.fasterxml.jackson.databind.util.StdDateFormat.getISO8601Format(tz, com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_LOCALE);\n    }\n\n    public static java.text.DateFormat getISO8601Format(java.util.TimeZone tz, java.util.Locale loc) {\n        return com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601, tz, loc, null);\n    }\n\n    public static java.text.DateFormat getRFC1123Format(java.util.TimeZone tz, java.util.Locale loc) {\n        return com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_RFC1123, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_RFC1123, tz, loc, null);\n    }\n\n    @java.lang.Deprecated\n    public static java.text.DateFormat getRFC1123Format(java.util.TimeZone tz) {\n        return com.fasterxml.jackson.databind.util.StdDateFormat.getRFC1123Format(tz, com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_LOCALE);\n    }\n\n    @java.lang.Override\n    public java.util.TimeZone getTimeZone() {\n        return _timezone;\n    }\n\n    @java.lang.Override\n    public void setTimeZone(java.util.TimeZone tz) {\n        if (!tz.equals(_timezone)) {\n            _clearFormats();\n            _timezone = tz;\n        }\n    }\n\n    @java.lang.Override\n    public void setLenient(boolean enabled) {\n        java.lang.Boolean newValue = enabled;\n        if (_lenient != newValue) {\n            _lenient = newValue;\n            _clearFormats();\n        }\n    }\n\n    @java.lang.Override\n    public boolean isLenient() {\n        if (_lenient == null) {\n            return true;\n        }\n        return _lenient.booleanValue();\n    }\n\n    @java.lang.Override\n    public java.util.Date parse(java.lang.String dateStr) throws java.text.ParseException {\n        dateStr = dateStr.trim();\n        java.text.ParsePosition pos = new java.text.ParsePosition(0);\n        java.util.Date dt;\n        if (looksLikeISO8601(dateStr)) {\n            dt = parseAsISO8601(dateStr, pos, true);\n        } else {\n            int i = dateStr.length();\n            while ((--i) >= 0) {\n                char ch = dateStr.charAt(i);\n                if ((ch < '0') || (ch > '9')) {\n                    if ((i > 0) || (ch != '-')) {\n                        break;\n                    }\n                }\n            } \n            if ((i < 0) && ((dateStr.charAt(0) == '-') || com.fasterxml.jackson.core.io.NumberInput.inLongRange(dateStr, false))) {\n                dt = new java.util.Date(java.lang.Long.parseLong(dateStr));\n            } else {\n                dt = parseAsRFC1123(dateStr, pos);\n            }\n        }\n        if (dt != null) {\n            return dt;\n        }\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        for (java.lang.String f : com.fasterxml.jackson.databind.util.StdDateFormat.ALL_FORMATS) {\n            if (sb.length() > 0) {\n                sb.append(\"\\\", \\\"\");\n            } else {\n                sb.append('\"');\n            }\n            sb.append(f);\n        }\n        sb.append('\"');\n        throw new java.text.ParseException(java.lang.String.format(\"Can not parse date \\\"%s\\\": not compatible with any of standard forms (%s)\", dateStr, sb.toString()), pos.getErrorIndex());\n    }\n\n    @java.lang.Override\n    public java.util.Date parse(java.lang.String dateStr, java.text.ParsePosition pos) {\n        if (looksLikeISO8601(dateStr)) {\n            try {\n                return parseAsISO8601(dateStr, pos, false);\n            } catch (java.text.ParseException e) {\n                return null;\n            }\n        }\n        int i = dateStr.length();\n        while ((--i) >= 0) {\n            char ch = dateStr.charAt(i);\n            if ((ch < '0') || (ch > '9')) {\n                if ((i > 0) || (ch != '-')) {\n                    break;\n                }\n            }\n        } \n        if (i < 0) {\n            if ((dateStr.charAt(0) == '-') || com.fasterxml.jackson.core.io.NumberInput.inLongRange(dateStr, false)) {\n                return new java.util.Date(java.lang.Long.parseLong(dateStr));\n            }\n        }\n        return parseAsRFC1123(dateStr, pos);\n    }\n\n    @java.lang.Override\n    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer toAppendTo, java.text.FieldPosition fieldPosition) {\n        if (_formatISO8601 == null) {\n            _formatISO8601 = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601, _timezone, _locale, _lenient);\n        }\n        return _formatISO8601.format(date, toAppendTo, fieldPosition);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        java.lang.String str = \"DateFormat \" + getClass().getName();\n        java.util.TimeZone tz = _timezone;\n        if (tz != null) {\n            str += (\" (timezone: \" + tz) + \")\";\n        }\n        str += (\"(locale: \" + _locale) + \")\";\n        return str;\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        return o == this;\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return java.lang.System.identityHashCode(this);\n    }\n\n    protected boolean looksLikeISO8601(java.lang.String dateStr) {\n        if ((((dateStr.length() >= 5) && java.lang.Character.isDigit(dateStr.charAt(0))) && java.lang.Character.isDigit(dateStr.charAt(3))) && (dateStr.charAt(4) == '-')) {\n            return true;\n        }\n        return false;\n    }\n\n    protected java.util.Date parseAsISO8601(java.lang.String dateStr, java.text.ParsePosition pos, boolean throwErrors) throws java.text.ParseException {\n        int len = dateStr.length();\n        char c = dateStr.charAt(len - 1);\n        java.text.DateFormat df;\n        java.lang.String formatStr;\n        if ((len <= 10) && java.lang.Character.isDigit(c)) {\n            df = _formatPlain;\n            formatStr = com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_PLAIN;\n            if (df == null) {\n                df = _formatPlain = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_PLAIN, formatStr, _timezone, _locale, _lenient);\n            }\n        } else if (c == 'Z') {\n            df = _formatISO8601_z;\n            formatStr = com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_Z;\n            if (df == null) {\n                df = _formatISO8601_z = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601_Z, formatStr, com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE, _locale, _lenient);\n            }\n            if (dateStr.charAt(len - 4) == ':') {\n                java.lang.StringBuilder sb = new java.lang.StringBuilder(dateStr);\n                sb.insert(len - 1, \".000\");\n                dateStr = sb.toString();\n            }\n        } else if (com.fasterxml.jackson.databind.util.StdDateFormat.hasTimeZone(dateStr)) {\n            c = dateStr.charAt(len - 3);\n            if (c == ':') {\n                java.lang.StringBuilder sb = new java.lang.StringBuilder(dateStr);\n                sb.delete(len - 3, len - 2);\n                dateStr = sb.toString();\n            } else if ((c == '+') || (c == '-')) {\n                dateStr += \"00\";\n            }\n            len = dateStr.length();\n            int timeLen = (len - dateStr.lastIndexOf('T')) - 6;\n            if (timeLen < 12) {\n                int offset = len - 5;\n                java.lang.StringBuilder sb = new java.lang.StringBuilder(dateStr);\n                switch (timeLen) {\n                    case 11 :\n                        sb.insert(offset, '0');\n                        break;\n                    case 10 :\n                        sb.insert(offset, \"00\");\n                        break;\n                    case 9 :\n                        sb.insert(offset, \"000\");\n                        break;\n                    case 8 :\n                        sb.insert(offset, \".000\");\n                        break;\n                    case 7 :\n                        break;\n                    case 6 :\n                        sb.insert(offset, \"00.000\");\n                    case 5 :\n                        sb.insert(offset, \":00.000\");\n                }\n                dateStr = sb.toString();\n            }\n            df = _formatISO8601;\n            formatStr = com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601, formatStr, _timezone, _locale, _lenient);\n            }\n        } else {\n            int timeLen = (len - dateStr.lastIndexOf('T')) - 1;\n            if (timeLen < 12) {\n                java.lang.StringBuilder sb = new java.lang.StringBuilder(dateStr);\n                switch (timeLen) {\n                    case 11 :\n                        sb.append('0');\n                    case 10 :\n                        sb.append('0');\n                    case 9 :\n                        sb.append('0');\n                        break;\n                    default :\n                        sb.append(\".000\");\n                }\n                dateStr = sb.toString();\n            }\n            df = _formatISO8601_noTz;\n            formatStr = com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_NO_TZ;\n            if (df == null) {\n                df = _formatISO8601_noTz = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601_NO_TZ, formatStr, _timezone, _locale, _lenient);\n            }\n        }\n        java.util.Date dt = df.parse(dateStr, pos);\n        if (dt == null) {\n            throw new java.text.ParseException(java.lang.String.format(\"Can not parse date \\\"%s\\\": while it seems to fit format \\'%s\\', parsing fails (leniency? %s)\", dateStr, formatStr, _lenient), pos.getErrorIndex());\n        }\n        return dt;\n    }\n\n    protected java.util.Date parseAsRFC1123(java.lang.String dateStr, java.text.ParsePosition pos) {\n        if (_formatRFC1123 == null) {\n            _formatRFC1123 = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_RFC1123, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_RFC1123, _timezone, _locale, _lenient);\n        }\n        return _formatRFC1123.parse(dateStr, pos);\n    }\n\n    private static final boolean hasTimeZone(java.lang.String str) {\n        int len = str.length();\n        if (len >= 6) {\n            char c = str.charAt(len - 6);\n            if ((c == '+') || (c == '-')) {\n                return true;\n            }\n            c = str.charAt(len - 5);\n            if ((c == '+') || (c == '-')) {\n                return true;\n            }\n            c = str.charAt(len - 3);\n            if ((c == '+') || (c == '-')) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static final java.text.DateFormat _cloneFormat(java.text.DateFormat df, java.lang.String format, java.util.TimeZone tz, java.util.Locale loc, java.lang.Boolean lenient) {\n        if (!loc.equals(com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_LOCALE)) {\n            df = new java.text.SimpleDateFormat(format, loc);\n            df.setTimeZone(tz == null ? com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE : tz);\n        } else {\n            df = ((java.text.DateFormat) (df.clone()));\n            if (tz != null) {\n                df.setTimeZone(tz);\n            }\n        }\n        if (lenient != null) {\n            df.setLenient(lenient.booleanValue());\n        }\n        return df;\n    }\n\n    protected void _clearFormats() {\n        _formatRFC1123 = null;\n        _formatISO8601 = null;\n        _formatISO8601_z = null;\n        _formatISO8601_noTz = null;\n        _formatPlain = null;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "AnonymousExecutable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "DATE_FORMAT_ISO8601_NO_TZ = new java.text.SimpleDateFormat(DATE_FORMAT_STR_ISO8601_NO_TZ, DEFAULT_LOCALE)",
            "src_parent": "{\n    DATE_FORMAT_RFC1123 = new java.text.SimpleDateFormat(DATE_FORMAT_STR_RFC1123, DEFAULT_LOCALE);\n    DATE_FORMAT_RFC1123.setTimeZone(DEFAULT_TIMEZONE);\n    DATE_FORMAT_ISO8601 = new java.text.SimpleDateFormat(DATE_FORMAT_STR_ISO8601, DEFAULT_LOCALE);\n    DATE_FORMAT_ISO8601.setTimeZone(DEFAULT_TIMEZONE);\n    DATE_FORMAT_ISO8601_Z = new java.text.SimpleDateFormat(DATE_FORMAT_STR_ISO8601_Z, DEFAULT_LOCALE);\n    DATE_FORMAT_ISO8601_Z.setTimeZone(DEFAULT_TIMEZONE);\n    DATE_FORMAT_ISO8601_NO_TZ = new java.text.SimpleDateFormat(DATE_FORMAT_STR_ISO8601_NO_TZ, DEFAULT_LOCALE);\n    DATE_FORMAT_ISO8601_NO_TZ.setTimeZone(DEFAULT_TIMEZONE);\n    DATE_FORMAT_PLAIN = new java.text.SimpleDateFormat(DATE_FORMAT_STR_PLAIN, DEFAULT_LOCALE);\n    DATE_FORMAT_PLAIN.setTimeZone(DEFAULT_TIMEZONE);\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "AnonymousExecutable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "DATE_FORMAT_ISO8601_NO_TZ.setTimeZone(DEFAULT_TIMEZONE)",
            "src_parent": "{\n    DATE_FORMAT_RFC1123 = new java.text.SimpleDateFormat(DATE_FORMAT_STR_RFC1123, DEFAULT_LOCALE);\n    DATE_FORMAT_RFC1123.setTimeZone(DEFAULT_TIMEZONE);\n    DATE_FORMAT_ISO8601 = new java.text.SimpleDateFormat(DATE_FORMAT_STR_ISO8601, DEFAULT_LOCALE);\n    DATE_FORMAT_ISO8601.setTimeZone(DEFAULT_TIMEZONE);\n    DATE_FORMAT_ISO8601_Z = new java.text.SimpleDateFormat(DATE_FORMAT_STR_ISO8601_Z, DEFAULT_LOCALE);\n    DATE_FORMAT_ISO8601_Z.setTimeZone(DEFAULT_TIMEZONE);\n    DATE_FORMAT_ISO8601_NO_TZ = new java.text.SimpleDateFormat(DATE_FORMAT_STR_ISO8601_NO_TZ, DEFAULT_LOCALE);\n    DATE_FORMAT_ISO8601_NO_TZ.setTimeZone(DEFAULT_TIMEZONE);\n    DATE_FORMAT_PLAIN = new java.text.SimpleDateFormat(DATE_FORMAT_STR_PLAIN, DEFAULT_LOCALE);\n    DATE_FORMAT_PLAIN.setTimeZone(DEFAULT_TIMEZONE);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "_formatISO8601_noTz = null",
            "src_parent": "{\n    _formatRFC1123 = null;\n    _formatISO8601 = null;\n    _formatISO8601_z = null;\n    _formatISO8601_noTz = null;\n    _formatPlain = null;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Field",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "NewArray",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_NO_TZ",
            "src_parent": "new java.lang.String[]{ com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_Z, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_NO_TZ, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_RFC1123, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_PLAIN }",
            "src_parent_type": "NewArray",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.StringBuilder sb = new java.lang.StringBuilder(dateStr)",
            "dst_parent": "{\n    java.lang.StringBuilder sb = new java.lang.StringBuilder(dateStr);\n    switch (timeLen) {\n        case 11 :\n            sb.append('0');\n        case 10 :\n            sb.append('0');\n        case 9 :\n            sb.append('0');\n            break;\n        default :\n            sb.append(\".000\");\n    }\n    dateStr = sb.toString();\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.lang.StringBuilder sb = new java.lang.StringBuilder(dateStr)",
            "src_parent": "{\n    java.lang.StringBuilder sb = new java.lang.StringBuilder(dateStr);\n    int timeLen = (len - dateStr.lastIndexOf('T')) - 1;\n    if (timeLen < 12) {\n        switch (timeLen) {\n            case 11 :\n                sb.append('0');\n            case 10 :\n                sb.append('0');\n            case 9 :\n                sb.append('0');\n                break;\n            default :\n                sb.append(\".000\");\n        }\n    }\n    sb.append('Z');\n    dateStr = sb.toString();\n    df = _formatISO8601_z;\n    formatStr = com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_Z;\n    if (df == null) {\n        df = _formatISO8601_z = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601_Z, formatStr, com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE, _locale, _lenient);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "dateStr = sb.toString()",
            "dst_parent": "{\n    java.lang.StringBuilder sb = new java.lang.StringBuilder(dateStr);\n    switch (timeLen) {\n        case 11 :\n            sb.append('0');\n        case 10 :\n            sb.append('0');\n        case 9 :\n            sb.append('0');\n            break;\n        default :\n            sb.append(\".000\");\n    }\n    dateStr = sb.toString();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "dateStr = sb.toString()",
            "src_parent": "{\n    java.lang.StringBuilder sb = new java.lang.StringBuilder(dateStr);\n    int timeLen = (len - dateStr.lastIndexOf('T')) - 1;\n    if (timeLen < 12) {\n        switch (timeLen) {\n            case 11 :\n                sb.append('0');\n            case 10 :\n                sb.append('0');\n            case 9 :\n                sb.append('0');\n                break;\n            default :\n                sb.append(\".000\");\n        }\n    }\n    sb.append('Z');\n    dateStr = sb.toString();\n    df = _formatISO8601_z;\n    formatStr = com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601_Z;\n    if (df == null) {\n        df = _formatISO8601_z = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601_Z, formatStr, com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE, _locale, _lenient);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        }
      ],
      "file_name": "StdDateFormat"
    }
  ],
  "id": "bears_23"
}