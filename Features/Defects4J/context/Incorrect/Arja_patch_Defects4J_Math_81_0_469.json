{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "cachedD = null",
            "src_parent": "{\n    cachedD = null;\n    if (tType < (-22)) {\n        tau = 0.0;\n    } else if (dMin1 > 0.0) {\n        tau = (tau + dMin) * (1.0 - (2.0 * org.apache.commons.math.util.MathUtils.EPSILON));\n        tType -= 11;\n    } else {\n        tau *= 0.25;\n        tType -= 12;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if ((dMin == dN) || (dMin == dN1)) {\n    double b1 = java.lang.Math.sqrt(work[nn - 3]) * java.lang.Math.sqrt(work[nn - 5]);\n    double b2 = java.lang.Math.sqrt(work[nn - 7]) * java.lang.Math.sqrt(work[nn - 9]);\n    double a2 = work[nn - 7] + work[nn - 5];\n    if ((dMin == dN) && (dMin1 == dN1)) {\n        final double gap2 = (dMin2 - a2) - (dMin2 * 0.25);\n        final double gap1 = (a2 - dN) - ((gap2 > 0.0) && (gap2 > b2) ? (b2 / gap2) * b2 : b1 + b2);\n        if ((gap1 > 0.0) && (gap1 > b1)) {\n            tau = java.lang.Math.max(dN - ((b1 / gap1) * b1), 0.5 * dMin);\n            tType = -2;\n        } else {\n            double s = 0.0;\n            if (dN > b1) {\n                s = dN - b1;\n            }\n            if (a2 > (b1 + b2)) {\n                s = java.lang.Math.min(s, a2 - (b1 + b2));\n            }\n            tau = java.lang.Math.max(s, 0.333 * dMin);\n            tType = -3;\n        }\n    } else {\n        tType = -4;\n        double s = 0.25 * dMin;\n        double gam;\n        int np;\n        if (dMin == dN) {\n            gam = dN;\n            a2 = 0.0;\n            if (work[nn - 5] > work[nn - 7]) {\n                return;\n            }\n            b2 = work[nn - 5] / work[nn - 7];\n            np = nn - 9;\n        } else {\n            np = nn - (2 * pingPong);\n            b2 = work[np - 2];\n            gam = dN1;\n            if (work[np - 4] > work[np - 2]) {\n                return;\n            }\n            a2 = work[np - 4] / work[np - 2];\n            if (work[nn - 9] > work[nn - 11]) {\n                return;\n            }\n            b2 = work[nn - 9] / work[nn - 11];\n            np = nn - 13;\n        }\n        a2 = a2 + b2;\n        for (int i4 = np; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n            if (b2 == 0.0) {\n                break;\n            }\n            b1 = b2;\n            if (work[i4] > work[i4 - 2]) {\n                return;\n            }\n            b2 = b2 * (work[i4] / work[i4 - 2]);\n            a2 = a2 + b2;\n            if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                break;\n            }\n        }\n        a2 = cnst3 * a2;\n        tau = java.lang.Math.max(s, 0.333 * dMin);\n        tau = s;\n    }\n} else if (dMin == dN2) {\n    tType = -5;\n    if ((dMin == dN) || (dMin == dN1)) {\n        double b1 = java.lang.Math.sqrt(work[nn - 3]) * java.lang.Math.sqrt(work[nn - 5]);\n        double b2 = java.lang.Math.sqrt(work[nn - 7]) * java.lang.Math.sqrt(work[nn - 9]);\n        double a2 = work[nn - 7] + work[nn - 5];\n        if ((dMin == dN) && (dMin1 == dN1)) {\n            final double gap2 = (dMin2 - a2) - (dMin2 * 0.25);\n            final double gap1 = (a2 - dN) - ((gap2 > 0.0) && (gap2 > b2) ? (b2 / gap2) * b2 : b1 + b2);\n            if ((gap1 > 0.0) && (gap1 > b1)) {\n                tau = java.lang.Math.max(dN - ((b1 / gap1) * b1), 0.5 * dMin);\n                tType = -2;\n            } else {\n                double s = 0.0;\n                if (dN > b1) {\n                    s = dN - b1;\n                }\n                if (a2 > (b1 + b2)) {\n                    s = java.lang.Math.min(s, a2 - (b1 + b2));\n                }\n                tau = java.lang.Math.max(s, 0.333 * dMin);\n                tType = -3;\n            }\n        } else {\n            tType = -4;\n            double s = 0.25 * dMin;\n            double gam;\n            int np;\n            if (dMin == dN) {\n                gam = dN;\n                a2 = 0.0;\n                if (work[nn - 5] > work[nn - 7]) {\n                    return;\n                }\n                b2 = work[nn - 5] / work[nn - 7];\n                np = nn - 9;\n            } else {\n                np = nn - (2 * pingPong);\n                b2 = work[np - 2];\n                gam = dN1;\n                if (work[np - 4] > work[np - 2]) {\n                    return;\n                }\n                a2 = work[np - 4] / work[np - 2];\n                if (work[nn - 9] > work[nn - 11]) {\n                    return;\n                }\n                b2 = work[nn - 9] / work[nn - 11];\n                np = nn - 13;\n            }\n            a2 = a2 + b2;\n            for (int i4 = np; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n                if (b2 == 0.0) {\n                    break;\n                }\n                b1 = b2;\n                if (work[i4] > work[i4 - 2]) {\n                    return;\n                }\n                b2 = b2 * (work[i4] / work[i4 - 2]);\n                a2 = a2 + b2;\n                if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                    break;\n                }\n            }\n            a2 = cnst3 * a2;\n            if (a2 < cnst1) {\n                s = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);\n            }\n            tau = s;\n        }\n    } else if (dMin == dN2) {\n        tType = -5;\n        double s = 0.25 * dMin;\n        final int np = nn - (2 * pingPong);\n        double b1 = work[np - 2];\n        double b2 = work[np - 6];\n        final double gam = dN2;\n        if ((work[np - 8] > b2) || (work[np - 4] > b1)) {\n            return;\n        }\n        double a2 = (work[np - 8] / b2) * (1 + (work[np - 4] / b1));\n        if ((end - start) > 2) {\n            b2 = work[nn - 13] / work[nn - 15];\n            a2 = a2 + b2;\n            for (int i4 = nn - 17; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n                if (b2 == 0.0) {\n                    break;\n                }\n                b1 = b2;\n                if (work[i4] > work[i4 - 2]) {\n                    return;\n                }\n                b2 = b2 * (work[i4] / work[i4 - 2]);\n                a2 = a2 + b2;\n                if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                    break;\n                }\n            }\n            a2 = cnst3 * a2;\n        }\n        if (a2 < cnst1) {\n            tau = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);\n        } else {\n            tau = s;\n        }\n    } else {\n        if (tType == (-6)) {\n            g += 0.333 * (1 - g);\n        } else if (tType == (-18)) {\n            g = 0.25 * 0.333;\n        } else {\n            g = 0.25;\n        }\n        tau = g * dMin;\n        tType = -6;\n    }\n    double s = 0.25 * dMin;\n    final int np = nn - (2 * pingPong);\n    dMin = java.lang.Math.min(dMin, dN);\n    double b1 = work[np - 2];\n    double b2 = work[np - 6];\n    final double gam = dN2;\n    if ((work[np - 8] > b2) || (work[np - 4] > b1)) {\n        return;\n    }\n    double a2 = (work[np - 8] / b2) * (1 + (work[np - 4] / b1));\n    if ((end - start) > 2) {\n        b2 = work[nn - 13] / work[nn - 15];\n        a2 = a2 + b2;\n        for (int i4 = nn - 17; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n            if (b2 == 0.0) {\n                break;\n            }\n            b1 = b2;\n            if (work[i4] > work[i4 - 2]) {\n                return;\n            }\n            b2 = b2 * (work[i4] / work[i4 - 2]);\n            a2 = a2 + b2;\n            if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                break;\n            }\n        }\n        a2 = cnst3 * a2;\n    }\n    if (a2 < cnst1) {\n        tau = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);\n    } else {\n        tau = s;\n    }\n} else {\n    if (tType == (-6)) {\n        g += 0.333 * (1 - g);\n    } else if (tType == (-18)) {\n        g = 0.25 * 0.333;\n    } else {\n        g = 0.25;\n    }\n    tau = g * dMin;\n    tType = -6;\n}",
            "src_parent": "case 0 :\n    if ((dMin == dN) || (dMin == dN1)) {\n        double b1 = java.lang.Math.sqrt(work[nn - 3]) * java.lang.Math.sqrt(work[nn - 5]);\n        double b2 = java.lang.Math.sqrt(work[nn - 7]) * java.lang.Math.sqrt(work[nn - 9]);\n        double a2 = work[nn - 7] + work[nn - 5];\n        if ((dMin == dN) && (dMin1 == dN1)) {\n            final double gap2 = (dMin2 - a2) - (dMin2 * 0.25);\n            final double gap1 = (a2 - dN) - ((gap2 > 0.0) && (gap2 > b2) ? (b2 / gap2) * b2 : b1 + b2);\n            if ((gap1 > 0.0) && (gap1 > b1)) {\n                tau = java.lang.Math.max(dN - ((b1 / gap1) * b1), 0.5 * dMin);\n                tType = -2;\n            } else {\n                double s = 0.0;\n                if (dN > b1) {\n                    s = dN - b1;\n                }\n                if (a2 > (b1 + b2)) {\n                    s = java.lang.Math.min(s, a2 - (b1 + b2));\n                }\n                tau = java.lang.Math.max(s, 0.333 * dMin);\n                tType = -3;\n            }\n        } else {\n            tType = -4;\n            double s = 0.25 * dMin;\n            double gam;\n            int np;\n            if (dMin == dN) {\n                gam = dN;\n                a2 = 0.0;\n                if (work[nn - 5] > work[nn - 7]) {\n                    return;\n                }\n                b2 = work[nn - 5] / work[nn - 7];\n                np = nn - 9;\n            } else {\n                np = nn - (2 * pingPong);\n                b2 = work[np - 2];\n                gam = dN1;\n                if (work[np - 4] > work[np - 2]) {\n                    return;\n                }\n                a2 = work[np - 4] / work[np - 2];\n                if (work[nn - 9] > work[nn - 11]) {\n                    return;\n                }\n                b2 = work[nn - 9] / work[nn - 11];\n                np = nn - 13;\n            }\n            a2 = a2 + b2;\n            for (int i4 = np; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n                if (b2 == 0.0) {\n                    break;\n                }\n                b1 = b2;\n                if (work[i4] > work[i4 - 2]) {\n                    return;\n                }\n                b2 = b2 * (work[i4] / work[i4 - 2]);\n                a2 = a2 + b2;\n                if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                    break;\n                }\n            }\n            a2 = cnst3 * a2;\n            tau = java.lang.Math.max(s, 0.333 * dMin);\n            tau = s;\n        }\n    } else if (dMin == dN2) {\n        tType = -5;\n        if ((dMin == dN) || (dMin == dN1)) {\n            double b1 = java.lang.Math.sqrt(work[nn - 3]) * java.lang.Math.sqrt(work[nn - 5]);\n            double b2 = java.lang.Math.sqrt(work[nn - 7]) * java.lang.Math.sqrt(work[nn - 9]);\n            double a2 = work[nn - 7] + work[nn - 5];\n            if ((dMin == dN) && (dMin1 == dN1)) {\n                final double gap2 = (dMin2 - a2) - (dMin2 * 0.25);\n                final double gap1 = (a2 - dN) - ((gap2 > 0.0) && (gap2 > b2) ? (b2 / gap2) * b2 : b1 + b2);\n                if ((gap1 > 0.0) && (gap1 > b1)) {\n                    tau = java.lang.Math.max(dN - ((b1 / gap1) * b1), 0.5 * dMin);\n                    tType = -2;\n                } else {\n                    double s = 0.0;\n                    if (dN > b1) {\n                        s = dN - b1;\n                    }\n                    if (a2 > (b1 + b2)) {\n                        s = java.lang.Math.min(s, a2 - (b1 + b2));\n                    }\n                    tau = java.lang.Math.max(s, 0.333 * dMin);\n                    tType = -3;\n                }\n            } else {\n                tType = -4;\n                double s = 0.25 * dMin;\n                double gam;\n                int np;\n                if (dMin == dN) {\n                    gam = dN;\n                    a2 = 0.0;\n                    if (work[nn - 5] > work[nn - 7]) {\n                        return;\n                    }\n                    b2 = work[nn - 5] / work[nn - 7];\n                    np = nn - 9;\n                } else {\n                    np = nn - (2 * pingPong);\n                    b2 = work[np - 2];\n                    gam = dN1;\n                    if (work[np - 4] > work[np - 2]) {\n                        return;\n                    }\n                    a2 = work[np - 4] / work[np - 2];\n                    if (work[nn - 9] > work[nn - 11]) {\n                        return;\n                    }\n                    b2 = work[nn - 9] / work[nn - 11];\n                    np = nn - 13;\n                }\n                a2 = a2 + b2;\n                for (int i4 = np; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n                    if (b2 == 0.0) {\n                        break;\n                    }\n                    b1 = b2;\n                    if (work[i4] > work[i4 - 2]) {\n                        return;\n                    }\n                    b2 = b2 * (work[i4] / work[i4 - 2]);\n                    a2 = a2 + b2;\n                    if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                        break;\n                    }\n                }\n                a2 = cnst3 * a2;\n                if (a2 < cnst1) {\n                    s = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);\n                }\n                tau = s;\n            }\n        } else if (dMin == dN2) {\n            tType = -5;\n            double s = 0.25 * dMin;\n            final int np = nn - (2 * pingPong);\n            double b1 = work[np - 2];\n            double b2 = work[np - 6];\n            final double gam = dN2;\n            if ((work[np - 8] > b2) || (work[np - 4] > b1)) {\n                return;\n            }\n            double a2 = (work[np - 8] / b2) * (1 + (work[np - 4] / b1));\n            if ((end - start) > 2) {\n                b2 = work[nn - 13] / work[nn - 15];\n                a2 = a2 + b2;\n                for (int i4 = nn - 17; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n                    if (b2 == 0.0) {\n                        break;\n                    }\n                    b1 = b2;\n                    if (work[i4] > work[i4 - 2]) {\n                        return;\n                    }\n                    b2 = b2 * (work[i4] / work[i4 - 2]);\n                    a2 = a2 + b2;\n                    if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                        break;\n                    }\n                }\n                a2 = cnst3 * a2;\n            }\n            if (a2 < cnst1) {\n                tau = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);\n            } else {\n                tau = s;\n            }\n        } else {\n            if (tType == (-6)) {\n                g += 0.333 * (1 - g);\n            } else if (tType == (-18)) {\n                g = 0.25 * 0.333;\n            } else {\n                g = 0.25;\n            }\n            tau = g * dMin;\n            tType = -6;\n        }\n        double s = 0.25 * dMin;\n        final int np = nn - (2 * pingPong);\n        dMin = java.lang.Math.min(dMin, dN);\n        double b1 = work[np - 2];\n        double b2 = work[np - 6];\n        final double gam = dN2;\n        if ((work[np - 8] > b2) || (work[np - 4] > b1)) {\n            return;\n        }\n        double a2 = (work[np - 8] / b2) * (1 + (work[np - 4] / b1));\n        if ((end - start) > 2) {\n            b2 = work[nn - 13] / work[nn - 15];\n            a2 = a2 + b2;\n            for (int i4 = nn - 17; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n                if (b2 == 0.0) {\n                    break;\n                }\n                b1 = b2;\n                if (work[i4] > work[i4 - 2]) {\n                    return;\n                }\n                b2 = b2 * (work[i4] / work[i4 - 2]);\n                a2 = a2 + b2;\n                if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                    break;\n                }\n            }\n            a2 = cnst3 * a2;\n        }\n        if (a2 < cnst1) {\n            tau = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);\n        } else {\n            tau = s;\n        }\n    } else {\n        if (tType == (-6)) {\n            g += 0.333 * (1 - g);\n        } else if (tType == (-18)) {\n            g = 0.25 * 0.333;\n        } else {\n            g = 0.25;\n        }\n        tau = g * dMin;\n        tType = -6;\n    }\n    break;",
            "src_parent_type": "Case",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "break",
            "src_parent": "case 0 :\n    if ((dMin == dN) || (dMin == dN1)) {\n        double b1 = java.lang.Math.sqrt(work[nn - 3]) * java.lang.Math.sqrt(work[nn - 5]);\n        double b2 = java.lang.Math.sqrt(work[nn - 7]) * java.lang.Math.sqrt(work[nn - 9]);\n        double a2 = work[nn - 7] + work[nn - 5];\n        if ((dMin == dN) && (dMin1 == dN1)) {\n            final double gap2 = (dMin2 - a2) - (dMin2 * 0.25);\n            final double gap1 = (a2 - dN) - ((gap2 > 0.0) && (gap2 > b2) ? (b2 / gap2) * b2 : b1 + b2);\n            if ((gap1 > 0.0) && (gap1 > b1)) {\n                tau = java.lang.Math.max(dN - ((b1 / gap1) * b1), 0.5 * dMin);\n                tType = -2;\n            } else {\n                double s = 0.0;\n                if (dN > b1) {\n                    s = dN - b1;\n                }\n                if (a2 > (b1 + b2)) {\n                    s = java.lang.Math.min(s, a2 - (b1 + b2));\n                }\n                tau = java.lang.Math.max(s, 0.333 * dMin);\n                tType = -3;\n            }\n        } else {\n            tType = -4;\n            double s = 0.25 * dMin;\n            double gam;\n            int np;\n            if (dMin == dN) {\n                gam = dN;\n                a2 = 0.0;\n                if (work[nn - 5] > work[nn - 7]) {\n                    return;\n                }\n                b2 = work[nn - 5] / work[nn - 7];\n                np = nn - 9;\n            } else {\n                np = nn - (2 * pingPong);\n                b2 = work[np - 2];\n                gam = dN1;\n                if (work[np - 4] > work[np - 2]) {\n                    return;\n                }\n                a2 = work[np - 4] / work[np - 2];\n                if (work[nn - 9] > work[nn - 11]) {\n                    return;\n                }\n                b2 = work[nn - 9] / work[nn - 11];\n                np = nn - 13;\n            }\n            a2 = a2 + b2;\n            for (int i4 = np; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n                if (b2 == 0.0) {\n                    break;\n                }\n                b1 = b2;\n                if (work[i4] > work[i4 - 2]) {\n                    return;\n                }\n                b2 = b2 * (work[i4] / work[i4 - 2]);\n                a2 = a2 + b2;\n                if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                    break;\n                }\n            }\n            a2 = cnst3 * a2;\n            tau = java.lang.Math.max(s, 0.333 * dMin);\n            tau = s;\n        }\n    } else if (dMin == dN2) {\n        tType = -5;\n        if ((dMin == dN) || (dMin == dN1)) {\n            double b1 = java.lang.Math.sqrt(work[nn - 3]) * java.lang.Math.sqrt(work[nn - 5]);\n            double b2 = java.lang.Math.sqrt(work[nn - 7]) * java.lang.Math.sqrt(work[nn - 9]);\n            double a2 = work[nn - 7] + work[nn - 5];\n            if ((dMin == dN) && (dMin1 == dN1)) {\n                final double gap2 = (dMin2 - a2) - (dMin2 * 0.25);\n                final double gap1 = (a2 - dN) - ((gap2 > 0.0) && (gap2 > b2) ? (b2 / gap2) * b2 : b1 + b2);\n                if ((gap1 > 0.0) && (gap1 > b1)) {\n                    tau = java.lang.Math.max(dN - ((b1 / gap1) * b1), 0.5 * dMin);\n                    tType = -2;\n                } else {\n                    double s = 0.0;\n                    if (dN > b1) {\n                        s = dN - b1;\n                    }\n                    if (a2 > (b1 + b2)) {\n                        s = java.lang.Math.min(s, a2 - (b1 + b2));\n                    }\n                    tau = java.lang.Math.max(s, 0.333 * dMin);\n                    tType = -3;\n                }\n            } else {\n                tType = -4;\n                double s = 0.25 * dMin;\n                double gam;\n                int np;\n                if (dMin == dN) {\n                    gam = dN;\n                    a2 = 0.0;\n                    if (work[nn - 5] > work[nn - 7]) {\n                        return;\n                    }\n                    b2 = work[nn - 5] / work[nn - 7];\n                    np = nn - 9;\n                } else {\n                    np = nn - (2 * pingPong);\n                    b2 = work[np - 2];\n                    gam = dN1;\n                    if (work[np - 4] > work[np - 2]) {\n                        return;\n                    }\n                    a2 = work[np - 4] / work[np - 2];\n                    if (work[nn - 9] > work[nn - 11]) {\n                        return;\n                    }\n                    b2 = work[nn - 9] / work[nn - 11];\n                    np = nn - 13;\n                }\n                a2 = a2 + b2;\n                for (int i4 = np; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n                    if (b2 == 0.0) {\n                        break;\n                    }\n                    b1 = b2;\n                    if (work[i4] > work[i4 - 2]) {\n                        return;\n                    }\n                    b2 = b2 * (work[i4] / work[i4 - 2]);\n                    a2 = a2 + b2;\n                    if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                        break;\n                    }\n                }\n                a2 = cnst3 * a2;\n                if (a2 < cnst1) {\n                    s = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);\n                }\n                tau = s;\n            }\n        } else if (dMin == dN2) {\n            tType = -5;\n            double s = 0.25 * dMin;\n            final int np = nn - (2 * pingPong);\n            double b1 = work[np - 2];\n            double b2 = work[np - 6];\n            final double gam = dN2;\n            if ((work[np - 8] > b2) || (work[np - 4] > b1)) {\n                return;\n            }\n            double a2 = (work[np - 8] / b2) * (1 + (work[np - 4] / b1));\n            if ((end - start) > 2) {\n                b2 = work[nn - 13] / work[nn - 15];\n                a2 = a2 + b2;\n                for (int i4 = nn - 17; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n                    if (b2 == 0.0) {\n                        break;\n                    }\n                    b1 = b2;\n                    if (work[i4] > work[i4 - 2]) {\n                        return;\n                    }\n                    b2 = b2 * (work[i4] / work[i4 - 2]);\n                    a2 = a2 + b2;\n                    if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                        break;\n                    }\n                }\n                a2 = cnst3 * a2;\n            }\n            if (a2 < cnst1) {\n                tau = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);\n            } else {\n                tau = s;\n            }\n        } else {\n            if (tType == (-6)) {\n                g += 0.333 * (1 - g);\n            } else if (tType == (-18)) {\n                g = 0.25 * 0.333;\n            } else {\n                g = 0.25;\n            }\n            tau = g * dMin;\n            tType = -6;\n        }\n        double s = 0.25 * dMin;\n        final int np = nn - (2 * pingPong);\n        dMin = java.lang.Math.min(dMin, dN);\n        double b1 = work[np - 2];\n        double b2 = work[np - 6];\n        final double gam = dN2;\n        if ((work[np - 8] > b2) || (work[np - 4] > b1)) {\n            return;\n        }\n        double a2 = (work[np - 8] / b2) * (1 + (work[np - 4] / b1));\n        if ((end - start) > 2) {\n            b2 = work[nn - 13] / work[nn - 15];\n            a2 = a2 + b2;\n            for (int i4 = nn - 17; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n                if (b2 == 0.0) {\n                    break;\n                }\n                b1 = b2;\n                if (work[i4] > work[i4 - 2]) {\n                    return;\n                }\n                b2 = b2 * (work[i4] / work[i4 - 2]);\n                a2 = a2 + b2;\n                if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                    break;\n                }\n            }\n            a2 = cnst3 * a2;\n        }\n        if (a2 < cnst1) {\n            tau = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);\n        } else {\n            tau = s;\n        }\n    } else {\n        if (tType == (-6)) {\n            g += 0.333 * (1 - g);\n        } else if (tType == (-18)) {\n            g = 0.25 * 0.333;\n        } else {\n            g = 0.25;\n        }\n        tau = g * dMin;\n        tType = -6;\n    }\n    break;",
            "src_parent_type": "Case",
            "src_type": "Break"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "break",
            "src_parent": "case 0 :\n    if ((dMin == dN) || (dMin == dN1)) {\n        double b1 = java.lang.Math.sqrt(work[nn - 3]) * java.lang.Math.sqrt(work[nn - 5]);\n        double b2 = java.lang.Math.sqrt(work[nn - 7]) * java.lang.Math.sqrt(work[nn - 9]);\n        double a2 = work[nn - 7] + work[nn - 5];\n        if ((dMin == dN) && (dMin1 == dN1)) {\n            final double gap2 = (dMin2 - a2) - (dMin2 * 0.25);\n            final double gap1 = (a2 - dN) - ((gap2 > 0.0) && (gap2 > b2) ? (b2 / gap2) * b2 : b1 + b2);\n            if ((gap1 > 0.0) && (gap1 > b1)) {\n                tau = java.lang.Math.max(dN - ((b1 / gap1) * b1), 0.5 * dMin);\n                tType = -2;\n            } else {\n                double s = 0.0;\n                if (dN > b1) {\n                    s = dN - b1;\n                }\n                if (a2 > (b1 + b2)) {\n                    s = java.lang.Math.min(s, a2 - (b1 + b2));\n                }\n                tau = java.lang.Math.max(s, 0.333 * dMin);\n                tType = -3;\n            }\n        } else {\n            tType = -4;\n            double s = 0.25 * dMin;\n            double gam;\n            int np;\n            if (dMin == dN) {\n                gam = dN;\n                a2 = 0.0;\n                if (work[nn - 5] > work[nn - 7]) {\n                    return;\n                }\n                b2 = work[nn - 5] / work[nn - 7];\n                np = nn - 9;\n            } else {\n                np = nn - (2 * pingPong);\n                b2 = work[np - 2];\n                gam = dN1;\n                if (work[np - 4] > work[np - 2]) {\n                    return;\n                }\n                a2 = work[np - 4] / work[np - 2];\n                if (work[nn - 9] > work[nn - 11]) {\n                    return;\n                }\n                b2 = work[nn - 9] / work[nn - 11];\n                np = nn - 13;\n            }\n            a2 = a2 + b2;\n            for (int i4 = np; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n                if (b2 == 0.0) {\n                    break;\n                }\n                b1 = b2;\n                if (work[i4] > work[i4 - 2]) {\n                    return;\n                }\n                b2 = b2 * (work[i4] / work[i4 - 2]);\n                a2 = a2 + b2;\n                if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                    break;\n                }\n            }\n            a2 = cnst3 * a2;\n            if (a2 < cnst1) {\n                s = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);\n            }\n            tau = s;\n        }\n    } else if (dMin == dN2) {\n        tType = -5;\n        double s = 0.25 * dMin;\n        final int np = nn - (2 * pingPong);\n        double b1 = work[np - 2];\n        double b2 = work[np - 6];\n        final double gam = dN2;\n        if ((work[np - 8] > b2) || (work[np - 4] > b1)) {\n            return;\n        }\n        double a2 = (work[np - 8] / b2) * (1 + (work[np - 4] / b1));\n        if ((end - start) > 2) {\n            b2 = work[nn - 13] / work[nn - 15];\n            a2 = a2 + b2;\n            for (int i4 = nn - 17; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n                if (b2 == 0.0) {\n                    break;\n                }\n                b1 = b2;\n                if (work[i4] > work[i4 - 2]) {\n                    return;\n                }\n                b2 = b2 * (work[i4] / work[i4 - 2]);\n                a2 = a2 + b2;\n                if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                    break;\n                }\n            }\n            a2 = cnst3 * a2;\n        }\n        if (a2 < cnst1) {\n            tau = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);\n        } else {\n            tau = s;\n        }\n    } else {\n        if (tType == (-6)) {\n            g += 0.333 * (1 - g);\n        } else if (tType == (-18)) {\n            g = 0.25 * 0.333;\n        } else {\n            g = 0.25;\n        }\n        tau = g * dMin;\n        tType = -6;\n    }\n    break;",
            "src_parent_type": "Case",
            "src_type": "Break"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if ((dMin == dN) || (dMin == dN1)) {\n    double b1 = java.lang.Math.sqrt(work[nn - 3]) * java.lang.Math.sqrt(work[nn - 5]);\n    double b2 = java.lang.Math.sqrt(work[nn - 7]) * java.lang.Math.sqrt(work[nn - 9]);\n    double a2 = work[nn - 7] + work[nn - 5];\n    if ((dMin == dN) && (dMin1 == dN1)) {\n        final double gap2 = (dMin2 - a2) - (dMin2 * 0.25);\n        final double gap1 = (a2 - dN) - ((gap2 > 0.0) && (gap2 > b2) ? (b2 / gap2) * b2 : b1 + b2);\n        if ((gap1 > 0.0) && (gap1 > b1)) {\n            tau = java.lang.Math.max(dN - ((b1 / gap1) * b1), 0.5 * dMin);\n            tType = -2;\n        } else {\n            double s = 0.0;\n            if (dN > b1) {\n                s = dN - b1;\n            }\n            if (a2 > (b1 + b2)) {\n                s = java.lang.Math.min(s, a2 - (b1 + b2));\n            }\n            tau = java.lang.Math.max(s, 0.333 * dMin);\n            tType = -3;\n        }\n    } else {\n        tType = -4;\n        double s = 0.25 * dMin;\n        double gam;\n        int np;\n        if (dMin == dN) {\n            gam = dN;\n            a2 = 0.0;\n            if (work[nn - 5] > work[nn - 7]) {\n                return;\n            }\n            b2 = work[nn - 5] / work[nn - 7];\n            np = nn - 9;\n        } else {\n            np = nn - (2 * pingPong);\n            b2 = work[np - 2];\n            gam = dN1;\n            if (work[np - 4] > work[np - 2]) {\n                return;\n            }\n            a2 = work[np - 4] / work[np - 2];\n            if (work[nn - 9] > work[nn - 11]) {\n                return;\n            }\n            b2 = work[nn - 9] / work[nn - 11];\n            np = nn - 13;\n        }\n        a2 = a2 + b2;\n        for (int i4 = np; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n            if (b2 == 0.0) {\n                break;\n            }\n            b1 = b2;\n            if (work[i4] > work[i4 - 2]) {\n                return;\n            }\n            b2 = b2 * (work[i4] / work[i4 - 2]);\n            a2 = a2 + b2;\n            if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                break;\n            }\n        }\n        a2 = cnst3 * a2;\n        if (a2 < cnst1) {\n            s = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);\n        }\n        tau = s;\n    }\n} else if (dMin == dN2) {\n    tType = -5;\n    double s = 0.25 * dMin;\n    final int np = nn - (2 * pingPong);\n    double b1 = work[np - 2];\n    double b2 = work[np - 6];\n    final double gam = dN2;\n    if ((work[np - 8] > b2) || (work[np - 4] > b1)) {\n        return;\n    }\n    double a2 = (work[np - 8] / b2) * (1 + (work[np - 4] / b1));\n    if ((end - start) > 2) {\n        b2 = work[nn - 13] / work[nn - 15];\n        a2 = a2 + b2;\n        for (int i4 = nn - 17; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n            if (b2 == 0.0) {\n                break;\n            }\n            b1 = b2;\n            if (work[i4] > work[i4 - 2]) {\n                return;\n            }\n            b2 = b2 * (work[i4] / work[i4 - 2]);\n            a2 = a2 + b2;\n            if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                break;\n            }\n        }\n        a2 = cnst3 * a2;\n    }\n    if (a2 < cnst1) {\n        tau = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);\n    } else {\n        tau = s;\n    }\n} else {\n    if (tType == (-6)) {\n        g += 0.333 * (1 - g);\n    } else if (tType == (-18)) {\n        g = 0.25 * 0.333;\n    } else {\n        g = 0.25;\n    }\n    tau = g * dMin;\n    tType = -6;\n}",
            "dst_parent": "case 0 :\n    if ((dMin == dN) || (dMin == dN1)) {\n        double b1 = java.lang.Math.sqrt(work[nn - 3]) * java.lang.Math.sqrt(work[nn - 5]);\n        double b2 = java.lang.Math.sqrt(work[nn - 7]) * java.lang.Math.sqrt(work[nn - 9]);\n        double a2 = work[nn - 7] + work[nn - 5];\n        if ((dMin == dN) && (dMin1 == dN1)) {\n            final double gap2 = (dMin2 - a2) - (dMin2 * 0.25);\n            final double gap1 = (a2 - dN) - ((gap2 > 0.0) && (gap2 > b2) ? (b2 / gap2) * b2 : b1 + b2);\n            if ((gap1 > 0.0) && (gap1 > b1)) {\n                tau = java.lang.Math.max(dN - ((b1 / gap1) * b1), 0.5 * dMin);\n                tType = -2;\n            } else {\n                double s = 0.0;\n                if (dN > b1) {\n                    s = dN - b1;\n                }\n                if (a2 > (b1 + b2)) {\n                    s = java.lang.Math.min(s, a2 - (b1 + b2));\n                }\n                tau = java.lang.Math.max(s, 0.333 * dMin);\n                tType = -3;\n            }\n        } else {\n            tType = -4;\n            double s = 0.25 * dMin;\n            double gam;\n            int np;\n            if (dMin == dN) {\n                gam = dN;\n                a2 = 0.0;\n                if (work[nn - 5] > work[nn - 7]) {\n                    return;\n                }\n                b2 = work[nn - 5] / work[nn - 7];\n                np = nn - 9;\n            } else {\n                np = nn - (2 * pingPong);\n                b2 = work[np - 2];\n                gam = dN1;\n                if (work[np - 4] > work[np - 2]) {\n                    return;\n                }\n                a2 = work[np - 4] / work[np - 2];\n                if (work[nn - 9] > work[nn - 11]) {\n                    return;\n                }\n                b2 = work[nn - 9] / work[nn - 11];\n                np = nn - 13;\n            }\n            a2 = a2 + b2;\n            for (int i4 = np; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n                if (b2 == 0.0) {\n                    break;\n                }\n                b1 = b2;\n                if (work[i4] > work[i4 - 2]) {\n                    return;\n                }\n                b2 = b2 * (work[i4] / work[i4 - 2]);\n                a2 = a2 + b2;\n                if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                    break;\n                }\n            }\n            a2 = cnst3 * a2;\n            if (a2 < cnst1) {\n                s = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);\n            }\n            tau = s;\n        }\n    } else if (dMin == dN2) {\n        tType = -5;\n        double s = 0.25 * dMin;\n        final int np = nn - (2 * pingPong);\n        double b1 = work[np - 2];\n        double b2 = work[np - 6];\n        final double gam = dN2;\n        if ((work[np - 8] > b2) || (work[np - 4] > b1)) {\n            return;\n        }\n        double a2 = (work[np - 8] / b2) * (1 + (work[np - 4] / b1));\n        if ((end - start) > 2) {\n            b2 = work[nn - 13] / work[nn - 15];\n            a2 = a2 + b2;\n            for (int i4 = nn - 17; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n                if (b2 == 0.0) {\n                    break;\n                }\n                b1 = b2;\n                if (work[i4] > work[i4 - 2]) {\n                    return;\n                }\n                b2 = b2 * (work[i4] / work[i4 - 2]);\n                a2 = a2 + b2;\n                if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                    break;\n                }\n            }\n            a2 = cnst3 * a2;\n        }\n        if (a2 < cnst1) {\n            tau = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);\n        } else {\n            tau = s;\n        }\n    } else {\n        if (tType == (-6)) {\n            g += 0.333 * (1 - g);\n        } else if (tType == (-18)) {\n            g = 0.25 * 0.333;\n        } else {\n            g = 0.25;\n        }\n        tau = g * dMin;\n        tType = -6;\n    }\n    break;",
            "dst_parent_type": "Case",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if ((dMin == dN) || (dMin == dN1)) {\n    double b1 = java.lang.Math.sqrt(work[nn - 3]) * java.lang.Math.sqrt(work[nn - 5]);\n    double b2 = java.lang.Math.sqrt(work[nn - 7]) * java.lang.Math.sqrt(work[nn - 9]);\n    double a2 = work[nn - 7] + work[nn - 5];\n    if ((dMin == dN) && (dMin1 == dN1)) {\n        final double gap2 = (dMin2 - a2) - (dMin2 * 0.25);\n        final double gap1 = (a2 - dN) - ((gap2 > 0.0) && (gap2 > b2) ? (b2 / gap2) * b2 : b1 + b2);\n        if ((gap1 > 0.0) && (gap1 > b1)) {\n            tau = java.lang.Math.max(dN - ((b1 / gap1) * b1), 0.5 * dMin);\n            tType = -2;\n        } else {\n            double s = 0.0;\n            if (dN > b1) {\n                s = dN - b1;\n            }\n            if (a2 > (b1 + b2)) {\n                s = java.lang.Math.min(s, a2 - (b1 + b2));\n            }\n            tau = java.lang.Math.max(s, 0.333 * dMin);\n            tType = -3;\n        }\n    } else {\n        tType = -4;\n        double s = 0.25 * dMin;\n        double gam;\n        int np;\n        if (dMin == dN) {\n            gam = dN;\n            a2 = 0.0;\n            if (work[nn - 5] > work[nn - 7]) {\n                return;\n            }\n            b2 = work[nn - 5] / work[nn - 7];\n            np = nn - 9;\n        } else {\n            np = nn - (2 * pingPong);\n            b2 = work[np - 2];\n            gam = dN1;\n            if (work[np - 4] > work[np - 2]) {\n                return;\n            }\n            a2 = work[np - 4] / work[np - 2];\n            if (work[nn - 9] > work[nn - 11]) {\n                return;\n            }\n            b2 = work[nn - 9] / work[nn - 11];\n            np = nn - 13;\n        }\n        a2 = a2 + b2;\n        for (int i4 = np; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n            if (b2 == 0.0) {\n                break;\n            }\n            b1 = b2;\n            if (work[i4] > work[i4 - 2]) {\n                return;\n            }\n            b2 = b2 * (work[i4] / work[i4 - 2]);\n            a2 = a2 + b2;\n            if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                break;\n            }\n        }\n        a2 = cnst3 * a2;\n        if (a2 < cnst1) {\n            s = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);\n        }\n        tau = s;\n    }\n} else if (dMin == dN2) {\n    tType = -5;\n    double s = 0.25 * dMin;\n    final int np = nn - (2 * pingPong);\n    double b1 = work[np - 2];\n    double b2 = work[np - 6];\n    final double gam = dN2;\n    if ((work[np - 8] > b2) || (work[np - 4] > b1)) {\n        return;\n    }\n    double a2 = (work[np - 8] / b2) * (1 + (work[np - 4] / b1));\n    if ((end - start) > 2) {\n        b2 = work[nn - 13] / work[nn - 15];\n        a2 = a2 + b2;\n        for (int i4 = nn - 17; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n            if (b2 == 0.0) {\n                break;\n            }\n            b1 = b2;\n            if (work[i4] > work[i4 - 2]) {\n                return;\n            }\n            b2 = b2 * (work[i4] / work[i4 - 2]);\n            a2 = a2 + b2;\n            if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                break;\n            }\n        }\n        a2 = cnst3 * a2;\n    }\n    if (a2 < cnst1) {\n        tau = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);\n    } else {\n        tau = s;\n    }\n} else {\n    if (tType == (-6)) {\n        g += 0.333 * (1 - g);\n    } else if (tType == (-18)) {\n        g = 0.25 * 0.333;\n    } else {\n        g = 0.25;\n    }\n    tau = g * dMin;\n    tType = -6;\n}",
            "src_parent": "{\n    tType = -5;\n    if ((dMin == dN) || (dMin == dN1)) {\n        double b1 = java.lang.Math.sqrt(work[nn - 3]) * java.lang.Math.sqrt(work[nn - 5]);\n        double b2 = java.lang.Math.sqrt(work[nn - 7]) * java.lang.Math.sqrt(work[nn - 9]);\n        double a2 = work[nn - 7] + work[nn - 5];\n        if ((dMin == dN) && (dMin1 == dN1)) {\n            final double gap2 = (dMin2 - a2) - (dMin2 * 0.25);\n            final double gap1 = (a2 - dN) - ((gap2 > 0.0) && (gap2 > b2) ? (b2 / gap2) * b2 : b1 + b2);\n            if ((gap1 > 0.0) && (gap1 > b1)) {\n                tau = java.lang.Math.max(dN - ((b1 / gap1) * b1), 0.5 * dMin);\n                tType = -2;\n            } else {\n                double s = 0.0;\n                if (dN > b1) {\n                    s = dN - b1;\n                }\n                if (a2 > (b1 + b2)) {\n                    s = java.lang.Math.min(s, a2 - (b1 + b2));\n                }\n                tau = java.lang.Math.max(s, 0.333 * dMin);\n                tType = -3;\n            }\n        } else {\n            tType = -4;\n            double s = 0.25 * dMin;\n            double gam;\n            int np;\n            if (dMin == dN) {\n                gam = dN;\n                a2 = 0.0;\n                if (work[nn - 5] > work[nn - 7]) {\n                    return;\n                }\n                b2 = work[nn - 5] / work[nn - 7];\n                np = nn - 9;\n            } else {\n                np = nn - (2 * pingPong);\n                b2 = work[np - 2];\n                gam = dN1;\n                if (work[np - 4] > work[np - 2]) {\n                    return;\n                }\n                a2 = work[np - 4] / work[np - 2];\n                if (work[nn - 9] > work[nn - 11]) {\n                    return;\n                }\n                b2 = work[nn - 9] / work[nn - 11];\n                np = nn - 13;\n            }\n            a2 = a2 + b2;\n            for (int i4 = np; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n                if (b2 == 0.0) {\n                    break;\n                }\n                b1 = b2;\n                if (work[i4] > work[i4 - 2]) {\n                    return;\n                }\n                b2 = b2 * (work[i4] / work[i4 - 2]);\n                a2 = a2 + b2;\n                if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                    break;\n                }\n            }\n            a2 = cnst3 * a2;\n            if (a2 < cnst1) {\n                s = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);\n            }\n            tau = s;\n        }\n    } else if (dMin == dN2) {\n        tType = -5;\n        double s = 0.25 * dMin;\n        final int np = nn - (2 * pingPong);\n        double b1 = work[np - 2];\n        double b2 = work[np - 6];\n        final double gam = dN2;\n        if ((work[np - 8] > b2) || (work[np - 4] > b1)) {\n            return;\n        }\n        double a2 = (work[np - 8] / b2) * (1 + (work[np - 4] / b1));\n        if ((end - start) > 2) {\n            b2 = work[nn - 13] / work[nn - 15];\n            a2 = a2 + b2;\n            for (int i4 = nn - 17; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n                if (b2 == 0.0) {\n                    break;\n                }\n                b1 = b2;\n                if (work[i4] > work[i4 - 2]) {\n                    return;\n                }\n                b2 = b2 * (work[i4] / work[i4 - 2]);\n                a2 = a2 + b2;\n                if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                    break;\n                }\n            }\n            a2 = cnst3 * a2;\n        }\n        if (a2 < cnst1) {\n            tau = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);\n        } else {\n            tau = s;\n        }\n    } else {\n        if (tType == (-6)) {\n            g += 0.333 * (1 - g);\n        } else if (tType == (-18)) {\n            g = 0.25 * 0.333;\n        } else {\n            g = 0.25;\n        }\n        tau = g * dMin;\n        tType = -6;\n    }\n    double s = 0.25 * dMin;\n    final int np = nn - (2 * pingPong);\n    dMin = java.lang.Math.min(dMin, dN);\n    double b1 = work[np - 2];\n    double b2 = work[np - 6];\n    final double gam = dN2;\n    if ((work[np - 8] > b2) || (work[np - 4] > b1)) {\n        return;\n    }\n    double a2 = (work[np - 8] / b2) * (1 + (work[np - 4] / b1));\n    if ((end - start) > 2) {\n        b2 = work[nn - 13] / work[nn - 15];\n        a2 = a2 + b2;\n        for (int i4 = nn - 17; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {\n            if (b2 == 0.0) {\n                break;\n            }\n            b1 = b2;\n            if (work[i4] > work[i4 - 2]) {\n                return;\n            }\n            b2 = b2 * (work[i4] / work[i4 - 2]);\n            a2 = a2 + b2;\n            if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {\n                break;\n            }\n        }\n        a2 = cnst3 * a2;\n    }\n    if (a2 < cnst1) {\n        tau = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);\n    } else {\n        tau = s;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "EigenDecompositionImpl"
    }
  ],
  "id": "Arja_patch_Defects4J_Math_81_0_469"
}