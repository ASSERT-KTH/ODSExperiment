{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "public java.lang.Number getMeanValue(int row, int column) {\n    java.lang.Number result = null;\n    org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n    if (masd != null) {\n        result = masd.getMean();\n    }\n    return result;\n}",
            "dst_parent": "public class DefaultStatisticalCategoryDataset extends org.jfree.data.general.AbstractDataset implements org.jfree.data.RangeInfo , org.jfree.data.statistics.StatisticalCategoryDataset {\n    private org.jfree.data.KeyedObjects2D data;\n\n    private double minimumRangeValue;\n\n    private double minimumRangeValueIncStdDev;\n\n    private double maximumRangeValue;\n\n    private double maximumRangeValueIncStdDev;\n\n    public DefaultStatisticalCategoryDataset() {\n        this.data = new org.jfree.data.KeyedObjects2D();\n        this.minimumRangeValue = java.lang.Double.NaN;\n        this.maximumRangeValue = java.lang.Double.NaN;\n        this.minimumRangeValueIncStdDev = java.lang.Double.NaN;\n        this.maximumRangeValueIncStdDev = java.lang.Double.NaN;\n    }\n\n    public java.lang.Number getMeanValue(int row, int column) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n        if (masd != null) {\n            result = masd.getMean();\n        }\n        return result;\n    }\n\n    public java.lang.Number getValue(int row, int column) {\n        return getMeanValue(row, column);\n    }\n\n    public java.lang.Number getValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        return getMeanValue(rowKey, columnKey);\n    }\n\n    public java.lang.Number getMeanValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(rowKey, columnKey)));\n        if (masd != null) {\n            result = masd.getMean();\n        }\n        return result;\n    }\n\n    public java.lang.Number getStdDevValue(int row, int column) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n        if (masd != null) {\n            result = masd.getStandardDeviation();\n        }\n        return result;\n    }\n\n    public java.lang.Number getStdDevValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(rowKey, columnKey)));\n        if (masd != null) {\n            result = masd.getStandardDeviation();\n        }\n        return result;\n    }\n\n    public int getColumnIndex(java.lang.Comparable key) {\n        return this.data.getColumnIndex(key);\n    }\n\n    public java.lang.Comparable getColumnKey(int column) {\n        return this.data.getColumnKey(column);\n    }\n\n    public java.util.List getColumnKeys() {\n        return this.data.getColumnKeys();\n    }\n\n    public int getRowIndex(java.lang.Comparable key) {\n        return this.data.getRowIndex(key);\n    }\n\n    public java.lang.Comparable getRowKey(int row) {\n        return this.data.getRowKey(row);\n    }\n\n    public java.util.List getRowKeys() {\n        return this.data.getRowKeys();\n    }\n\n    public int getRowCount() {\n        return this.data.getRowCount();\n    }\n\n    public int getColumnCount() {\n        return this.data.getColumnCount();\n    }\n\n    public void add(double mean, double standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        add(new java.lang.Double(mean), new java.lang.Double(standardDeviation), rowKey, columnKey);\n    }\n\n    public void add(java.lang.Number mean, java.lang.Number standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        org.jfree.data.statistics.MeanAndStandardDeviation item = new org.jfree.data.statistics.MeanAndStandardDeviation(mean, standardDeviation);\n        this.data.addObject(item, rowKey, columnKey);\n        double m = 0.0;\n        double sd = 0.0;\n        if (mean != null) {\n            m = mean.doubleValue();\n        }\n        if (standardDeviation != null) {\n            sd = standardDeviation.doubleValue();\n        }\n        if (!java.lang.Double.isNaN(m)) {\n            if (java.lang.Double.isNaN(this.maximumRangeValue) || (m > this.maximumRangeValue)) {\n                this.maximumRangeValue = m;\n            }\n        }\n        if (!java.lang.Double.isNaN(m + sd)) {\n            if (java.lang.Double.isNaN(this.maximumRangeValueIncStdDev) || ((m + sd) > this.maximumRangeValueIncStdDev)) {\n                this.maximumRangeValueIncStdDev = m + sd;\n            }\n        }\n        if (!java.lang.Double.isNaN(m)) {\n            if (java.lang.Double.isNaN(this.minimumRangeValue) || (m < this.minimumRangeValue)) {\n                this.minimumRangeValue = m;\n            }\n        }\n        if (!java.lang.Double.isNaN(m - sd)) {\n            if (java.lang.Double.isNaN(this.minimumRangeValueIncStdDev) || ((m - sd) < this.minimumRangeValueIncStdDev)) {\n                this.minimumRangeValueIncStdDev = m - sd;\n            }\n        }\n        fireDatasetChanged();\n    }\n\n    public double getRangeLowerBound(boolean includeInterval) {\n        return this.minimumRangeValue;\n    }\n\n    public double getRangeUpperBound(boolean includeInterval) {\n        return this.maximumRangeValue;\n    }\n\n    public org.jfree.data.Range getRangeBounds(boolean includeInterval) {\n        org.jfree.data.Range result = null;\n        if (includeInterval) {\n            if ((!java.lang.Double.isNaN(this.minimumRangeValueIncStdDev)) && (!java.lang.Double.isNaN(this.maximumRangeValueIncStdDev))) {\n                result = new org.jfree.data.Range(this.minimumRangeValueIncStdDev, this.maximumRangeValueIncStdDev);\n            }\n        } else if ((!java.lang.Double.isNaN(this.minimumRangeValue)) && (!java.lang.Double.isNaN(this.maximumRangeValue))) {\n            result = new org.jfree.data.Range(this.minimumRangeValue, this.maximumRangeValue);\n        }\n        return result;\n    }\n\n    public boolean equals(java.lang.Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof org.jfree.data.statistics.DefaultStatisticalCategoryDataset)) {\n            return false;\n        }\n        org.jfree.data.statistics.DefaultStatisticalCategoryDataset that = ((org.jfree.data.statistics.DefaultStatisticalCategoryDataset) (obj));\n        if (!this.data.equals(that.data)) {\n            return false;\n        }\n        return true;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "public java.lang.Number getStdDevValue(int row, int column) {\n    java.lang.Number result = null;\n    org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n    if (masd != null) {\n        result = masd.getMean();\n    }\n    return result;\n}",
            "src_parent": "public class DefaultStatisticalCategoryDataset extends org.jfree.data.general.AbstractDataset implements org.jfree.data.RangeInfo , org.jfree.data.statistics.StatisticalCategoryDataset {\n    private org.jfree.data.KeyedObjects2D data;\n\n    private double minimumRangeValue;\n\n    private double minimumRangeValueIncStdDev;\n\n    private double maximumRangeValue;\n\n    private double maximumRangeValueIncStdDev;\n\n    public DefaultStatisticalCategoryDataset() {\n        this.data = new org.jfree.data.KeyedObjects2D();\n        this.minimumRangeValue = java.lang.Double.NaN;\n        this.maximumRangeValue = java.lang.Double.NaN;\n        this.minimumRangeValueIncStdDev = java.lang.Double.NaN;\n        this.maximumRangeValueIncStdDev = java.lang.Double.NaN;\n    }\n\n    public java.lang.Number getMeanValue(int row, int column) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n        return result;\n    }\n\n    public java.lang.Number getValue(int row, int column) {\n        return getMeanValue(row, column);\n    }\n\n    public java.lang.Number getValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        return getMeanValue(rowKey, columnKey);\n    }\n\n    public java.lang.Number getMeanValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(rowKey, columnKey)));\n        if (masd != null) {\n            result = masd.getMean();\n        }\n        return result;\n    }\n\n    public java.lang.Number getStdDevValue(int row, int column) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n        if (masd != null) {\n            result = masd.getMean();\n        }\n        return result;\n    }\n\n    public java.lang.Number getStdDevValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(rowKey, columnKey)));\n        if (masd != null) {\n            result = masd.getStandardDeviation();\n        }\n        return result;\n    }\n\n    public int getColumnIndex(java.lang.Comparable key) {\n        return this.data.getColumnIndex(key);\n    }\n\n    public java.lang.Comparable getColumnKey(int column) {\n        return this.data.getColumnKey(column);\n    }\n\n    public java.util.List getColumnKeys() {\n        return this.data.getColumnKeys();\n    }\n\n    public int getRowIndex(java.lang.Comparable key) {\n        return this.data.getRowIndex(key);\n    }\n\n    public java.lang.Comparable getRowKey(int row) {\n        double x = 0.0;\n        return this.data.getRowKey(row);\n    }\n\n    public java.util.List getRowKeys() {\n        return this.data.getRowKeys();\n    }\n\n    public int getRowCount() {\n        return this.data.getRowCount();\n    }\n\n    public int getColumnCount() {\n        return this.data.getColumnCount();\n    }\n\n    public void add(double mean, double standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        add(new java.lang.Double(mean), new java.lang.Double(standardDeviation), rowKey, columnKey);\n    }\n\n    public void add(java.lang.Number mean, java.lang.Number standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        org.jfree.data.statistics.MeanAndStandardDeviation item = new org.jfree.data.statistics.MeanAndStandardDeviation(mean, standardDeviation);\n        this.data.addObject(item, rowKey, columnKey);\n        double m = 0.0;\n        double sd = 0.0;\n        if (mean != null) {\n            m = mean.doubleValue();\n        }\n        if (standardDeviation != null) {\n            sd = standardDeviation.doubleValue();\n        }\n        if (!java.lang.Double.isNaN(m)) {\n            if (java.lang.Double.isNaN(this.maximumRangeValue) || (m > this.maximumRangeValue)) {\n                this.maximumRangeValue = m;\n            }\n        }\n        if (!java.lang.Double.isNaN(m + sd)) {\n            if (java.lang.Double.isNaN(this.maximumRangeValueIncStdDev) || ((m + sd) > this.maximumRangeValueIncStdDev)) {\n                this.maximumRangeValueIncStdDev = m + sd;\n            }\n        }\n        if (!java.lang.Double.isNaN(m)) {\n            if (java.lang.Double.isNaN(this.minimumRangeValue) || (m < this.minimumRangeValue)) {\n                this.minimumRangeValue = m;\n            }\n        }\n        if (!java.lang.Double.isNaN(m - sd)) {\n            if (java.lang.Double.isNaN(this.minimumRangeValueIncStdDev) || ((m - sd) < this.minimumRangeValueIncStdDev)) {\n                this.minimumRangeValueIncStdDev = m - sd;\n            }\n        }\n        fireDatasetChanged();\n    }\n\n    public double getRangeLowerBound(boolean includeInterval) {\n        return this.minimumRangeValue;\n    }\n\n    public double getRangeUpperBound(boolean includeInterval) {\n        return this.maximumRangeValue;\n    }\n\n    public org.jfree.data.Range getRangeBounds(boolean includeInterval) {\n        org.jfree.data.Range result = null;\n        if (includeInterval) {\n            if ((!java.lang.Double.isNaN(this.minimumRangeValueIncStdDev)) && (!java.lang.Double.isNaN(this.maximumRangeValueIncStdDev))) {\n                result = new org.jfree.data.Range(this.minimumRangeValueIncStdDev, this.maximumRangeValueIncStdDev);\n            }\n        } else if ((!java.lang.Double.isNaN(this.minimumRangeValue)) && (!java.lang.Double.isNaN(this.maximumRangeValue))) {\n            result = new org.jfree.data.Range(this.minimumRangeValue, this.maximumRangeValue);\n        }\n        return result;\n    }\n\n    public boolean equals(java.lang.Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof org.jfree.data.statistics.DefaultStatisticalCategoryDataset)) {\n            return false;\n        }\n        org.jfree.data.statistics.DefaultStatisticalCategoryDataset that = ((org.jfree.data.statistics.DefaultStatisticalCategoryDataset) (obj));\n        if (!this.data.equals(that.data)) {\n            return false;\n        }\n        return true;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "public java.lang.Number getStdDevValue(int row, int column) {\n    java.lang.Number result = null;\n    org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n    if (masd != null) {\n        result = masd.getStandardDeviation();\n    }\n    return result;\n}",
            "dst_parent": "public class DefaultStatisticalCategoryDataset extends org.jfree.data.general.AbstractDataset implements org.jfree.data.RangeInfo , org.jfree.data.statistics.StatisticalCategoryDataset {\n    private org.jfree.data.KeyedObjects2D data;\n\n    private double minimumRangeValue;\n\n    private double minimumRangeValueIncStdDev;\n\n    private double maximumRangeValue;\n\n    private double maximumRangeValueIncStdDev;\n\n    public DefaultStatisticalCategoryDataset() {\n        this.data = new org.jfree.data.KeyedObjects2D();\n        this.minimumRangeValue = java.lang.Double.NaN;\n        this.maximumRangeValue = java.lang.Double.NaN;\n        this.minimumRangeValueIncStdDev = java.lang.Double.NaN;\n        this.maximumRangeValueIncStdDev = java.lang.Double.NaN;\n    }\n\n    public java.lang.Number getMeanValue(int row, int column) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n        if (masd != null) {\n            result = masd.getMean();\n        }\n        return result;\n    }\n\n    public java.lang.Number getValue(int row, int column) {\n        return getMeanValue(row, column);\n    }\n\n    public java.lang.Number getValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        return getMeanValue(rowKey, columnKey);\n    }\n\n    public java.lang.Number getMeanValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(rowKey, columnKey)));\n        if (masd != null) {\n            result = masd.getMean();\n        }\n        return result;\n    }\n\n    public java.lang.Number getStdDevValue(int row, int column) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n        if (masd != null) {\n            result = masd.getStandardDeviation();\n        }\n        return result;\n    }\n\n    public java.lang.Number getStdDevValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(rowKey, columnKey)));\n        if (masd != null) {\n            result = masd.getStandardDeviation();\n        }\n        return result;\n    }\n\n    public int getColumnIndex(java.lang.Comparable key) {\n        return this.data.getColumnIndex(key);\n    }\n\n    public java.lang.Comparable getColumnKey(int column) {\n        return this.data.getColumnKey(column);\n    }\n\n    public java.util.List getColumnKeys() {\n        return this.data.getColumnKeys();\n    }\n\n    public int getRowIndex(java.lang.Comparable key) {\n        return this.data.getRowIndex(key);\n    }\n\n    public java.lang.Comparable getRowKey(int row) {\n        return this.data.getRowKey(row);\n    }\n\n    public java.util.List getRowKeys() {\n        return this.data.getRowKeys();\n    }\n\n    public int getRowCount() {\n        return this.data.getRowCount();\n    }\n\n    public int getColumnCount() {\n        return this.data.getColumnCount();\n    }\n\n    public void add(double mean, double standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        add(new java.lang.Double(mean), new java.lang.Double(standardDeviation), rowKey, columnKey);\n    }\n\n    public void add(java.lang.Number mean, java.lang.Number standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        org.jfree.data.statistics.MeanAndStandardDeviation item = new org.jfree.data.statistics.MeanAndStandardDeviation(mean, standardDeviation);\n        this.data.addObject(item, rowKey, columnKey);\n        double m = 0.0;\n        double sd = 0.0;\n        if (mean != null) {\n            m = mean.doubleValue();\n        }\n        if (standardDeviation != null) {\n            sd = standardDeviation.doubleValue();\n        }\n        if (!java.lang.Double.isNaN(m)) {\n            if (java.lang.Double.isNaN(this.maximumRangeValue) || (m > this.maximumRangeValue)) {\n                this.maximumRangeValue = m;\n            }\n        }\n        if (!java.lang.Double.isNaN(m + sd)) {\n            if (java.lang.Double.isNaN(this.maximumRangeValueIncStdDev) || ((m + sd) > this.maximumRangeValueIncStdDev)) {\n                this.maximumRangeValueIncStdDev = m + sd;\n            }\n        }\n        if (!java.lang.Double.isNaN(m)) {\n            if (java.lang.Double.isNaN(this.minimumRangeValue) || (m < this.minimumRangeValue)) {\n                this.minimumRangeValue = m;\n            }\n        }\n        if (!java.lang.Double.isNaN(m - sd)) {\n            if (java.lang.Double.isNaN(this.minimumRangeValueIncStdDev) || ((m - sd) < this.minimumRangeValueIncStdDev)) {\n                this.minimumRangeValueIncStdDev = m - sd;\n            }\n        }\n        fireDatasetChanged();\n    }\n\n    public double getRangeLowerBound(boolean includeInterval) {\n        return this.minimumRangeValue;\n    }\n\n    public double getRangeUpperBound(boolean includeInterval) {\n        return this.maximumRangeValue;\n    }\n\n    public org.jfree.data.Range getRangeBounds(boolean includeInterval) {\n        org.jfree.data.Range result = null;\n        if (includeInterval) {\n            if ((!java.lang.Double.isNaN(this.minimumRangeValueIncStdDev)) && (!java.lang.Double.isNaN(this.maximumRangeValueIncStdDev))) {\n                result = new org.jfree.data.Range(this.minimumRangeValueIncStdDev, this.maximumRangeValueIncStdDev);\n            }\n        } else if ((!java.lang.Double.isNaN(this.minimumRangeValue)) && (!java.lang.Double.isNaN(this.maximumRangeValue))) {\n            result = new org.jfree.data.Range(this.minimumRangeValue, this.maximumRangeValue);\n        }\n        return result;\n    }\n\n    public boolean equals(java.lang.Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof org.jfree.data.statistics.DefaultStatisticalCategoryDataset)) {\n            return false;\n        }\n        org.jfree.data.statistics.DefaultStatisticalCategoryDataset that = ((org.jfree.data.statistics.DefaultStatisticalCategoryDataset) (obj));\n        if (!this.data.equals(that.data)) {\n            return false;\n        }\n        return true;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "public java.lang.Number getMeanValue(int row, int column) {\n    java.lang.Number result = null;\n    org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n    return result;\n}",
            "src_parent": "public class DefaultStatisticalCategoryDataset extends org.jfree.data.general.AbstractDataset implements org.jfree.data.RangeInfo , org.jfree.data.statistics.StatisticalCategoryDataset {\n    private org.jfree.data.KeyedObjects2D data;\n\n    private double minimumRangeValue;\n\n    private double minimumRangeValueIncStdDev;\n\n    private double maximumRangeValue;\n\n    private double maximumRangeValueIncStdDev;\n\n    public DefaultStatisticalCategoryDataset() {\n        this.data = new org.jfree.data.KeyedObjects2D();\n        this.minimumRangeValue = java.lang.Double.NaN;\n        this.maximumRangeValue = java.lang.Double.NaN;\n        this.minimumRangeValueIncStdDev = java.lang.Double.NaN;\n        this.maximumRangeValueIncStdDev = java.lang.Double.NaN;\n    }\n\n    public java.lang.Number getMeanValue(int row, int column) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n        return result;\n    }\n\n    public java.lang.Number getValue(int row, int column) {\n        return getMeanValue(row, column);\n    }\n\n    public java.lang.Number getValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        return getMeanValue(rowKey, columnKey);\n    }\n\n    public java.lang.Number getMeanValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(rowKey, columnKey)));\n        if (masd != null) {\n            result = masd.getMean();\n        }\n        return result;\n    }\n\n    public java.lang.Number getStdDevValue(int row, int column) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n        if (masd != null) {\n            result = masd.getMean();\n        }\n        return result;\n    }\n\n    public java.lang.Number getStdDevValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(rowKey, columnKey)));\n        if (masd != null) {\n            result = masd.getStandardDeviation();\n        }\n        return result;\n    }\n\n    public int getColumnIndex(java.lang.Comparable key) {\n        return this.data.getColumnIndex(key);\n    }\n\n    public java.lang.Comparable getColumnKey(int column) {\n        return this.data.getColumnKey(column);\n    }\n\n    public java.util.List getColumnKeys() {\n        return this.data.getColumnKeys();\n    }\n\n    public int getRowIndex(java.lang.Comparable key) {\n        return this.data.getRowIndex(key);\n    }\n\n    public java.lang.Comparable getRowKey(int row) {\n        double x = 0.0;\n        return this.data.getRowKey(row);\n    }\n\n    public java.util.List getRowKeys() {\n        return this.data.getRowKeys();\n    }\n\n    public int getRowCount() {\n        return this.data.getRowCount();\n    }\n\n    public int getColumnCount() {\n        return this.data.getColumnCount();\n    }\n\n    public void add(double mean, double standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        add(new java.lang.Double(mean), new java.lang.Double(standardDeviation), rowKey, columnKey);\n    }\n\n    public void add(java.lang.Number mean, java.lang.Number standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        org.jfree.data.statistics.MeanAndStandardDeviation item = new org.jfree.data.statistics.MeanAndStandardDeviation(mean, standardDeviation);\n        this.data.addObject(item, rowKey, columnKey);\n        double m = 0.0;\n        double sd = 0.0;\n        if (mean != null) {\n            m = mean.doubleValue();\n        }\n        if (standardDeviation != null) {\n            sd = standardDeviation.doubleValue();\n        }\n        if (!java.lang.Double.isNaN(m)) {\n            if (java.lang.Double.isNaN(this.maximumRangeValue) || (m > this.maximumRangeValue)) {\n                this.maximumRangeValue = m;\n            }\n        }\n        if (!java.lang.Double.isNaN(m + sd)) {\n            if (java.lang.Double.isNaN(this.maximumRangeValueIncStdDev) || ((m + sd) > this.maximumRangeValueIncStdDev)) {\n                this.maximumRangeValueIncStdDev = m + sd;\n            }\n        }\n        if (!java.lang.Double.isNaN(m)) {\n            if (java.lang.Double.isNaN(this.minimumRangeValue) || (m < this.minimumRangeValue)) {\n                this.minimumRangeValue = m;\n            }\n        }\n        if (!java.lang.Double.isNaN(m - sd)) {\n            if (java.lang.Double.isNaN(this.minimumRangeValueIncStdDev) || ((m - sd) < this.minimumRangeValueIncStdDev)) {\n                this.minimumRangeValueIncStdDev = m - sd;\n            }\n        }\n        fireDatasetChanged();\n    }\n\n    public double getRangeLowerBound(boolean includeInterval) {\n        return this.minimumRangeValue;\n    }\n\n    public double getRangeUpperBound(boolean includeInterval) {\n        return this.maximumRangeValue;\n    }\n\n    public org.jfree.data.Range getRangeBounds(boolean includeInterval) {\n        org.jfree.data.Range result = null;\n        if (includeInterval) {\n            if ((!java.lang.Double.isNaN(this.minimumRangeValueIncStdDev)) && (!java.lang.Double.isNaN(this.maximumRangeValueIncStdDev))) {\n                result = new org.jfree.data.Range(this.minimumRangeValueIncStdDev, this.maximumRangeValueIncStdDev);\n            }\n        } else if ((!java.lang.Double.isNaN(this.minimumRangeValue)) && (!java.lang.Double.isNaN(this.maximumRangeValue))) {\n            result = new org.jfree.data.Range(this.minimumRangeValue, this.maximumRangeValue);\n        }\n        return result;\n    }\n\n    public boolean equals(java.lang.Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof org.jfree.data.statistics.DefaultStatisticalCategoryDataset)) {\n            return false;\n        }\n        org.jfree.data.statistics.DefaultStatisticalCategoryDataset that = ((org.jfree.data.statistics.DefaultStatisticalCategoryDataset) (obj));\n        if (!this.data.equals(that.data)) {\n            return false;\n        }\n        return true;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "double x = 0.0",
            "src_parent": "{\n    double x = 0.0;\n    return this.data.getRowKey(row);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "public java.lang.Number getStdDevValue(int row, int column) {\n    java.lang.Number result = null;\n    org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n    if (masd != null) {\n        result = masd.getStandardDeviation();\n    }\n    return result;\n}",
            "dst_parent": "public class DefaultStatisticalCategoryDataset extends org.jfree.data.general.AbstractDataset implements org.jfree.data.RangeInfo , org.jfree.data.statistics.StatisticalCategoryDataset {\n    private org.jfree.data.KeyedObjects2D data;\n\n    private double minimumRangeValue;\n\n    private double minimumRangeValueIncStdDev;\n\n    private double maximumRangeValue;\n\n    private double maximumRangeValueIncStdDev;\n\n    public DefaultStatisticalCategoryDataset() {\n        this.data = new org.jfree.data.KeyedObjects2D();\n        this.minimumRangeValue = java.lang.Double.NaN;\n        this.maximumRangeValue = java.lang.Double.NaN;\n        this.minimumRangeValueIncStdDev = java.lang.Double.NaN;\n        this.maximumRangeValueIncStdDev = java.lang.Double.NaN;\n    }\n\n    public java.lang.Number getMeanValue(int row, int column) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n        if (masd != null) {\n            result = masd.getMean();\n        }\n        return result;\n    }\n\n    public java.lang.Number getValue(int row, int column) {\n        return getMeanValue(row, column);\n    }\n\n    public java.lang.Number getValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        return getMeanValue(rowKey, columnKey);\n    }\n\n    public java.lang.Number getMeanValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(rowKey, columnKey)));\n        if (masd != null) {\n            result = masd.getMean();\n        }\n        return result;\n    }\n\n    public java.lang.Number getStdDevValue(int row, int column) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n        if (masd != null) {\n            result = masd.getStandardDeviation();\n        }\n        return result;\n    }\n\n    public java.lang.Number getStdDevValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(rowKey, columnKey)));\n        if (masd != null) {\n            result = masd.getStandardDeviation();\n        }\n        return result;\n    }\n\n    public int getColumnIndex(java.lang.Comparable key) {\n        return this.data.getColumnIndex(key);\n    }\n\n    public java.lang.Comparable getColumnKey(int column) {\n        return this.data.getColumnKey(column);\n    }\n\n    public java.util.List getColumnKeys() {\n        return this.data.getColumnKeys();\n    }\n\n    public int getRowIndex(java.lang.Comparable key) {\n        return this.data.getRowIndex(key);\n    }\n\n    public java.lang.Comparable getRowKey(int row) {\n        return this.data.getRowKey(row);\n    }\n\n    public java.util.List getRowKeys() {\n        return this.data.getRowKeys();\n    }\n\n    public int getRowCount() {\n        return this.data.getRowCount();\n    }\n\n    public int getColumnCount() {\n        return this.data.getColumnCount();\n    }\n\n    public void add(double mean, double standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        add(new java.lang.Double(mean), new java.lang.Double(standardDeviation), rowKey, columnKey);\n    }\n\n    public void add(java.lang.Number mean, java.lang.Number standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        org.jfree.data.statistics.MeanAndStandardDeviation item = new org.jfree.data.statistics.MeanAndStandardDeviation(mean, standardDeviation);\n        this.data.addObject(item, rowKey, columnKey);\n        double m = 0.0;\n        double sd = 0.0;\n        if (mean != null) {\n            m = mean.doubleValue();\n        }\n        if (standardDeviation != null) {\n            sd = standardDeviation.doubleValue();\n        }\n        if (!java.lang.Double.isNaN(m)) {\n            if (java.lang.Double.isNaN(this.maximumRangeValue) || (m > this.maximumRangeValue)) {\n                this.maximumRangeValue = m;\n            }\n        }\n        if (!java.lang.Double.isNaN(m + sd)) {\n            if (java.lang.Double.isNaN(this.maximumRangeValueIncStdDev) || ((m + sd) > this.maximumRangeValueIncStdDev)) {\n                this.maximumRangeValueIncStdDev = m + sd;\n            }\n        }\n        if (!java.lang.Double.isNaN(m)) {\n            if (java.lang.Double.isNaN(this.minimumRangeValue) || (m < this.minimumRangeValue)) {\n                this.minimumRangeValue = m;\n            }\n        }\n        if (!java.lang.Double.isNaN(m - sd)) {\n            if (java.lang.Double.isNaN(this.minimumRangeValueIncStdDev) || ((m - sd) < this.minimumRangeValueIncStdDev)) {\n                this.minimumRangeValueIncStdDev = m - sd;\n            }\n        }\n        fireDatasetChanged();\n    }\n\n    public double getRangeLowerBound(boolean includeInterval) {\n        return this.minimumRangeValue;\n    }\n\n    public double getRangeUpperBound(boolean includeInterval) {\n        return this.maximumRangeValue;\n    }\n\n    public org.jfree.data.Range getRangeBounds(boolean includeInterval) {\n        org.jfree.data.Range result = null;\n        if (includeInterval) {\n            if ((!java.lang.Double.isNaN(this.minimumRangeValueIncStdDev)) && (!java.lang.Double.isNaN(this.maximumRangeValueIncStdDev))) {\n                result = new org.jfree.data.Range(this.minimumRangeValueIncStdDev, this.maximumRangeValueIncStdDev);\n            }\n        } else if ((!java.lang.Double.isNaN(this.minimumRangeValue)) && (!java.lang.Double.isNaN(this.maximumRangeValue))) {\n            result = new org.jfree.data.Range(this.minimumRangeValue, this.maximumRangeValue);\n        }\n        return result;\n    }\n\n    public boolean equals(java.lang.Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof org.jfree.data.statistics.DefaultStatisticalCategoryDataset)) {\n            return false;\n        }\n        org.jfree.data.statistics.DefaultStatisticalCategoryDataset that = ((org.jfree.data.statistics.DefaultStatisticalCategoryDataset) (obj));\n        if (!this.data.equals(that.data)) {\n            return false;\n        }\n        return true;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "MOV",
            "src": "public java.lang.Number getMeanValue(int row, int column) {\n    java.lang.Number result = null;\n    org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n    return result;\n}",
            "src_parent": "public class DefaultStatisticalCategoryDataset extends org.jfree.data.general.AbstractDataset implements org.jfree.data.RangeInfo , org.jfree.data.statistics.StatisticalCategoryDataset {\n    private org.jfree.data.KeyedObjects2D data;\n\n    private double minimumRangeValue;\n\n    private double minimumRangeValueIncStdDev;\n\n    private double maximumRangeValue;\n\n    private double maximumRangeValueIncStdDev;\n\n    public DefaultStatisticalCategoryDataset() {\n        this.data = new org.jfree.data.KeyedObjects2D();\n        this.minimumRangeValue = java.lang.Double.NaN;\n        this.maximumRangeValue = java.lang.Double.NaN;\n        this.minimumRangeValueIncStdDev = java.lang.Double.NaN;\n        this.maximumRangeValueIncStdDev = java.lang.Double.NaN;\n    }\n\n    public java.lang.Number getMeanValue(int row, int column) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n        return result;\n    }\n\n    public java.lang.Number getValue(int row, int column) {\n        return getMeanValue(row, column);\n    }\n\n    public java.lang.Number getValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        return getMeanValue(rowKey, columnKey);\n    }\n\n    public java.lang.Number getMeanValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(rowKey, columnKey)));\n        if (masd != null) {\n            result = masd.getMean();\n        }\n        return result;\n    }\n\n    public java.lang.Number getStdDevValue(int row, int column) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n        if (masd != null) {\n            result = masd.getMean();\n        }\n        return result;\n    }\n\n    public java.lang.Number getStdDevValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(rowKey, columnKey)));\n        if (masd != null) {\n            result = masd.getStandardDeviation();\n        }\n        return result;\n    }\n\n    public int getColumnIndex(java.lang.Comparable key) {\n        return this.data.getColumnIndex(key);\n    }\n\n    public java.lang.Comparable getColumnKey(int column) {\n        return this.data.getColumnKey(column);\n    }\n\n    public java.util.List getColumnKeys() {\n        return this.data.getColumnKeys();\n    }\n\n    public int getRowIndex(java.lang.Comparable key) {\n        return this.data.getRowIndex(key);\n    }\n\n    public java.lang.Comparable getRowKey(int row) {\n        double x = 0.0;\n        return this.data.getRowKey(row);\n    }\n\n    public java.util.List getRowKeys() {\n        return this.data.getRowKeys();\n    }\n\n    public int getRowCount() {\n        return this.data.getRowCount();\n    }\n\n    public int getColumnCount() {\n        return this.data.getColumnCount();\n    }\n\n    public void add(double mean, double standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        add(new java.lang.Double(mean), new java.lang.Double(standardDeviation), rowKey, columnKey);\n    }\n\n    public void add(java.lang.Number mean, java.lang.Number standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        org.jfree.data.statistics.MeanAndStandardDeviation item = new org.jfree.data.statistics.MeanAndStandardDeviation(mean, standardDeviation);\n        this.data.addObject(item, rowKey, columnKey);\n        double m = 0.0;\n        double sd = 0.0;\n        if (mean != null) {\n            m = mean.doubleValue();\n        }\n        if (standardDeviation != null) {\n            sd = standardDeviation.doubleValue();\n        }\n        if (!java.lang.Double.isNaN(m)) {\n            if (java.lang.Double.isNaN(this.maximumRangeValue) || (m > this.maximumRangeValue)) {\n                this.maximumRangeValue = m;\n            }\n        }\n        if (!java.lang.Double.isNaN(m + sd)) {\n            if (java.lang.Double.isNaN(this.maximumRangeValueIncStdDev) || ((m + sd) > this.maximumRangeValueIncStdDev)) {\n                this.maximumRangeValueIncStdDev = m + sd;\n            }\n        }\n        if (!java.lang.Double.isNaN(m)) {\n            if (java.lang.Double.isNaN(this.minimumRangeValue) || (m < this.minimumRangeValue)) {\n                this.minimumRangeValue = m;\n            }\n        }\n        if (!java.lang.Double.isNaN(m - sd)) {\n            if (java.lang.Double.isNaN(this.minimumRangeValueIncStdDev) || ((m - sd) < this.minimumRangeValueIncStdDev)) {\n                this.minimumRangeValueIncStdDev = m - sd;\n            }\n        }\n        fireDatasetChanged();\n    }\n\n    public double getRangeLowerBound(boolean includeInterval) {\n        return this.minimumRangeValue;\n    }\n\n    public double getRangeUpperBound(boolean includeInterval) {\n        return this.maximumRangeValue;\n    }\n\n    public org.jfree.data.Range getRangeBounds(boolean includeInterval) {\n        org.jfree.data.Range result = null;\n        if (includeInterval) {\n            if ((!java.lang.Double.isNaN(this.minimumRangeValueIncStdDev)) && (!java.lang.Double.isNaN(this.maximumRangeValueIncStdDev))) {\n                result = new org.jfree.data.Range(this.minimumRangeValueIncStdDev, this.maximumRangeValueIncStdDev);\n            }\n        } else if ((!java.lang.Double.isNaN(this.minimumRangeValue)) && (!java.lang.Double.isNaN(this.maximumRangeValue))) {\n            result = new org.jfree.data.Range(this.minimumRangeValue, this.maximumRangeValue);\n        }\n        return result;\n    }\n\n    public boolean equals(java.lang.Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof org.jfree.data.statistics.DefaultStatisticalCategoryDataset)) {\n            return false;\n        }\n        org.jfree.data.statistics.DefaultStatisticalCategoryDataset that = ((org.jfree.data.statistics.DefaultStatisticalCategoryDataset) (obj));\n        if (!this.data.equals(that.data)) {\n            return false;\n        }\n        return true;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "public java.lang.Number getMeanValue(int row, int column) {\n    java.lang.Number result = null;\n    org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n    if (masd != null) {\n        result = masd.getMean();\n    }\n    return result;\n}",
            "dst_parent": "public class DefaultStatisticalCategoryDataset extends org.jfree.data.general.AbstractDataset implements org.jfree.data.RangeInfo , org.jfree.data.statistics.StatisticalCategoryDataset {\n    private org.jfree.data.KeyedObjects2D data;\n\n    private double minimumRangeValue;\n\n    private double minimumRangeValueIncStdDev;\n\n    private double maximumRangeValue;\n\n    private double maximumRangeValueIncStdDev;\n\n    public DefaultStatisticalCategoryDataset() {\n        this.data = new org.jfree.data.KeyedObjects2D();\n        this.minimumRangeValue = java.lang.Double.NaN;\n        this.maximumRangeValue = java.lang.Double.NaN;\n        this.minimumRangeValueIncStdDev = java.lang.Double.NaN;\n        this.maximumRangeValueIncStdDev = java.lang.Double.NaN;\n    }\n\n    public java.lang.Number getMeanValue(int row, int column) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n        if (masd != null) {\n            result = masd.getMean();\n        }\n        return result;\n    }\n\n    public java.lang.Number getValue(int row, int column) {\n        return getMeanValue(row, column);\n    }\n\n    public java.lang.Number getValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        return getMeanValue(rowKey, columnKey);\n    }\n\n    public java.lang.Number getMeanValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(rowKey, columnKey)));\n        if (masd != null) {\n            result = masd.getMean();\n        }\n        return result;\n    }\n\n    public java.lang.Number getStdDevValue(int row, int column) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n        if (masd != null) {\n            result = masd.getStandardDeviation();\n        }\n        return result;\n    }\n\n    public java.lang.Number getStdDevValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(rowKey, columnKey)));\n        if (masd != null) {\n            result = masd.getStandardDeviation();\n        }\n        return result;\n    }\n\n    public int getColumnIndex(java.lang.Comparable key) {\n        return this.data.getColumnIndex(key);\n    }\n\n    public java.lang.Comparable getColumnKey(int column) {\n        return this.data.getColumnKey(column);\n    }\n\n    public java.util.List getColumnKeys() {\n        return this.data.getColumnKeys();\n    }\n\n    public int getRowIndex(java.lang.Comparable key) {\n        return this.data.getRowIndex(key);\n    }\n\n    public java.lang.Comparable getRowKey(int row) {\n        return this.data.getRowKey(row);\n    }\n\n    public java.util.List getRowKeys() {\n        return this.data.getRowKeys();\n    }\n\n    public int getRowCount() {\n        return this.data.getRowCount();\n    }\n\n    public int getColumnCount() {\n        return this.data.getColumnCount();\n    }\n\n    public void add(double mean, double standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        add(new java.lang.Double(mean), new java.lang.Double(standardDeviation), rowKey, columnKey);\n    }\n\n    public void add(java.lang.Number mean, java.lang.Number standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        org.jfree.data.statistics.MeanAndStandardDeviation item = new org.jfree.data.statistics.MeanAndStandardDeviation(mean, standardDeviation);\n        this.data.addObject(item, rowKey, columnKey);\n        double m = 0.0;\n        double sd = 0.0;\n        if (mean != null) {\n            m = mean.doubleValue();\n        }\n        if (standardDeviation != null) {\n            sd = standardDeviation.doubleValue();\n        }\n        if (!java.lang.Double.isNaN(m)) {\n            if (java.lang.Double.isNaN(this.maximumRangeValue) || (m > this.maximumRangeValue)) {\n                this.maximumRangeValue = m;\n            }\n        }\n        if (!java.lang.Double.isNaN(m + sd)) {\n            if (java.lang.Double.isNaN(this.maximumRangeValueIncStdDev) || ((m + sd) > this.maximumRangeValueIncStdDev)) {\n                this.maximumRangeValueIncStdDev = m + sd;\n            }\n        }\n        if (!java.lang.Double.isNaN(m)) {\n            if (java.lang.Double.isNaN(this.minimumRangeValue) || (m < this.minimumRangeValue)) {\n                this.minimumRangeValue = m;\n            }\n        }\n        if (!java.lang.Double.isNaN(m - sd)) {\n            if (java.lang.Double.isNaN(this.minimumRangeValueIncStdDev) || ((m - sd) < this.minimumRangeValueIncStdDev)) {\n                this.minimumRangeValueIncStdDev = m - sd;\n            }\n        }\n        fireDatasetChanged();\n    }\n\n    public double getRangeLowerBound(boolean includeInterval) {\n        return this.minimumRangeValue;\n    }\n\n    public double getRangeUpperBound(boolean includeInterval) {\n        return this.maximumRangeValue;\n    }\n\n    public org.jfree.data.Range getRangeBounds(boolean includeInterval) {\n        org.jfree.data.Range result = null;\n        if (includeInterval) {\n            if ((!java.lang.Double.isNaN(this.minimumRangeValueIncStdDev)) && (!java.lang.Double.isNaN(this.maximumRangeValueIncStdDev))) {\n                result = new org.jfree.data.Range(this.minimumRangeValueIncStdDev, this.maximumRangeValueIncStdDev);\n            }\n        } else if ((!java.lang.Double.isNaN(this.minimumRangeValue)) && (!java.lang.Double.isNaN(this.maximumRangeValue))) {\n            result = new org.jfree.data.Range(this.minimumRangeValue, this.maximumRangeValue);\n        }\n        return result;\n    }\n\n    public boolean equals(java.lang.Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof org.jfree.data.statistics.DefaultStatisticalCategoryDataset)) {\n            return false;\n        }\n        org.jfree.data.statistics.DefaultStatisticalCategoryDataset that = ((org.jfree.data.statistics.DefaultStatisticalCategoryDataset) (obj));\n        if (!this.data.equals(that.data)) {\n            return false;\n        }\n        return true;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "MOV",
            "src": "public java.lang.Number getStdDevValue(int row, int column) {\n    java.lang.Number result = null;\n    org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n    if (masd != null) {\n        result = masd.getMean();\n    }\n    return result;\n}",
            "src_parent": "public class DefaultStatisticalCategoryDataset extends org.jfree.data.general.AbstractDataset implements org.jfree.data.RangeInfo , org.jfree.data.statistics.StatisticalCategoryDataset {\n    private org.jfree.data.KeyedObjects2D data;\n\n    private double minimumRangeValue;\n\n    private double minimumRangeValueIncStdDev;\n\n    private double maximumRangeValue;\n\n    private double maximumRangeValueIncStdDev;\n\n    public DefaultStatisticalCategoryDataset() {\n        this.data = new org.jfree.data.KeyedObjects2D();\n        this.minimumRangeValue = java.lang.Double.NaN;\n        this.maximumRangeValue = java.lang.Double.NaN;\n        this.minimumRangeValueIncStdDev = java.lang.Double.NaN;\n        this.maximumRangeValueIncStdDev = java.lang.Double.NaN;\n    }\n\n    public java.lang.Number getMeanValue(int row, int column) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n        return result;\n    }\n\n    public java.lang.Number getValue(int row, int column) {\n        return getMeanValue(row, column);\n    }\n\n    public java.lang.Number getValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        return getMeanValue(rowKey, columnKey);\n    }\n\n    public java.lang.Number getMeanValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(rowKey, columnKey)));\n        if (masd != null) {\n            result = masd.getMean();\n        }\n        return result;\n    }\n\n    public java.lang.Number getStdDevValue(int row, int column) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\n        if (masd != null) {\n            result = masd.getMean();\n        }\n        return result;\n    }\n\n    public java.lang.Number getStdDevValue(java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        java.lang.Number result = null;\n        org.jfree.data.statistics.MeanAndStandardDeviation masd = ((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(rowKey, columnKey)));\n        if (masd != null) {\n            result = masd.getStandardDeviation();\n        }\n        return result;\n    }\n\n    public int getColumnIndex(java.lang.Comparable key) {\n        return this.data.getColumnIndex(key);\n    }\n\n    public java.lang.Comparable getColumnKey(int column) {\n        return this.data.getColumnKey(column);\n    }\n\n    public java.util.List getColumnKeys() {\n        return this.data.getColumnKeys();\n    }\n\n    public int getRowIndex(java.lang.Comparable key) {\n        return this.data.getRowIndex(key);\n    }\n\n    public java.lang.Comparable getRowKey(int row) {\n        double x = 0.0;\n        return this.data.getRowKey(row);\n    }\n\n    public java.util.List getRowKeys() {\n        return this.data.getRowKeys();\n    }\n\n    public int getRowCount() {\n        return this.data.getRowCount();\n    }\n\n    public int getColumnCount() {\n        return this.data.getColumnCount();\n    }\n\n    public void add(double mean, double standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        add(new java.lang.Double(mean), new java.lang.Double(standardDeviation), rowKey, columnKey);\n    }\n\n    public void add(java.lang.Number mean, java.lang.Number standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) {\n        org.jfree.data.statistics.MeanAndStandardDeviation item = new org.jfree.data.statistics.MeanAndStandardDeviation(mean, standardDeviation);\n        this.data.addObject(item, rowKey, columnKey);\n        double m = 0.0;\n        double sd = 0.0;\n        if (mean != null) {\n            m = mean.doubleValue();\n        }\n        if (standardDeviation != null) {\n            sd = standardDeviation.doubleValue();\n        }\n        if (!java.lang.Double.isNaN(m)) {\n            if (java.lang.Double.isNaN(this.maximumRangeValue) || (m > this.maximumRangeValue)) {\n                this.maximumRangeValue = m;\n            }\n        }\n        if (!java.lang.Double.isNaN(m + sd)) {\n            if (java.lang.Double.isNaN(this.maximumRangeValueIncStdDev) || ((m + sd) > this.maximumRangeValueIncStdDev)) {\n                this.maximumRangeValueIncStdDev = m + sd;\n            }\n        }\n        if (!java.lang.Double.isNaN(m)) {\n            if (java.lang.Double.isNaN(this.minimumRangeValue) || (m < this.minimumRangeValue)) {\n                this.minimumRangeValue = m;\n            }\n        }\n        if (!java.lang.Double.isNaN(m - sd)) {\n            if (java.lang.Double.isNaN(this.minimumRangeValueIncStdDev) || ((m - sd) < this.minimumRangeValueIncStdDev)) {\n                this.minimumRangeValueIncStdDev = m - sd;\n            }\n        }\n        fireDatasetChanged();\n    }\n\n    public double getRangeLowerBound(boolean includeInterval) {\n        return this.minimumRangeValue;\n    }\n\n    public double getRangeUpperBound(boolean includeInterval) {\n        return this.maximumRangeValue;\n    }\n\n    public org.jfree.data.Range getRangeBounds(boolean includeInterval) {\n        org.jfree.data.Range result = null;\n        if (includeInterval) {\n            if ((!java.lang.Double.isNaN(this.minimumRangeValueIncStdDev)) && (!java.lang.Double.isNaN(this.maximumRangeValueIncStdDev))) {\n                result = new org.jfree.data.Range(this.minimumRangeValueIncStdDev, this.maximumRangeValueIncStdDev);\n            }\n        } else if ((!java.lang.Double.isNaN(this.minimumRangeValue)) && (!java.lang.Double.isNaN(this.maximumRangeValue))) {\n            result = new org.jfree.data.Range(this.minimumRangeValue, this.maximumRangeValue);\n        }\n        return result;\n    }\n\n    public boolean equals(java.lang.Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof org.jfree.data.statistics.DefaultStatisticalCategoryDataset)) {\n            return false;\n        }\n        org.jfree.data.statistics.DefaultStatisticalCategoryDataset that = ((org.jfree.data.statistics.DefaultStatisticalCategoryDataset) (obj));\n        if (!this.data.equals(that.data)) {\n            return false;\n        }\n        return true;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "DefaultStatisticalCategoryDataset"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "g2.setStroke(plot.getRangeGridlineStroke())",
            "src_parent": "{\n    if (!(data instanceof org.jfree.data.statistics.StatisticalCategoryDataset)) {\n        throw new java.lang.IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n    }\n    g2.setStroke(plot.getRangeGridlineStroke());\n    double y0 = dataArea.getMaxY();\n    org.jfree.chart.plot.PlotOrientation orientation = plot.getOrientation();\n    org.jfree.chart.util.RectangleEdge edge = plot.getRangeAxisEdge();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "double y0 = dataArea.getMaxY()",
            "src_parent": "{\n    if (!(data instanceof org.jfree.data.statistics.StatisticalCategoryDataset)) {\n        throw new java.lang.IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n    }\n    g2.setStroke(plot.getRangeGridlineStroke());\n    double y0 = dataArea.getMaxY();\n    org.jfree.chart.plot.PlotOrientation orientation = plot.getOrientation();\n    org.jfree.chart.util.RectangleEdge edge = plot.getRangeAxisEdge();\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "org.jfree.chart.util.RectangleEdge edge = plot.getRangeAxisEdge()",
            "src_parent": "{\n    if (!(data instanceof org.jfree.data.statistics.StatisticalCategoryDataset)) {\n        throw new java.lang.IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n    }\n    g2.setStroke(plot.getRangeGridlineStroke());\n    double y0 = dataArea.getMaxY();\n    org.jfree.chart.plot.PlotOrientation orientation = plot.getOrientation();\n    org.jfree.chart.util.RectangleEdge edge = plot.getRangeAxisEdge();\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (seriesCount > 1) {\n    double seriesGap = (dataArea.getHeight() * getItemMargin()) / (categoryCount * (seriesCount - 1));\n    rectY = rectY + (row * (state.getBarWidth() + seriesGap));\n} else {\n    rectY = rectY + (row * state.getBarWidth());\n}",
            "src_parent": "{\n    org.jfree.chart.util.RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n    double rectY = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, xAxisLocation);\n    int seriesCount = getRowCount();\n    int categoryCount = getColumnCount();\n    if (seriesCount > 1) {\n        double seriesGap = (dataArea.getHeight() * getItemMargin()) / (categoryCount * (seriesCount - 1));\n        rectY = rectY + (row * (state.getBarWidth() + seriesGap));\n    } else {\n        rectY = rectY + (row * state.getBarWidth());\n    }\n    java.lang.Number meanValue = dataset.getMeanValue(row, column);\n    double value = meanValue.doubleValue();\n    double base = 0.0;\n    double lclip = getLowerClip();\n    if (seriesCount > 1) {\n        double seriesGap = (dataArea.getHeight() * getItemMargin()) / (categoryCount * (seriesCount - 1));\n        rectY = rectY + (row * (state.getBarWidth() + seriesGap));\n    } else {\n        rectY = rectY + (row * state.getBarWidth());\n    }\n    double uclip = getUpperClip();\n    if (uclip <= 0.0) {\n        if (value >= uclip) {\n            return;\n        }\n        base = uclip;\n        if (value <= lclip) {\n            value = lclip;\n        }\n    } else if (lclip <= 0.0) {\n        if (value >= uclip) {\n            value = uclip;\n        } else if (value <= lclip) {\n            value = lclip;\n        }\n    } else {\n        if (value <= lclip) {\n            return;\n        }\n        base = getLowerClip();\n        if (value >= uclip) {\n            value = uclip;\n        }\n    }\n    org.jfree.chart.util.RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n    double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n    double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);\n    double rectX = java.lang.Math.min(transY2, transY1);\n    double rectHeight = state.getBarWidth();\n    double rectWidth = java.lang.Math.abs(transY2 - transY1);\n    java.awt.geom.Rectangle2D bar = new java.awt.geom.Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);\n    java.awt.Paint seriesPaint = getItemPaint(row, column);\n    g2.setPaint(seriesPaint);\n    g2.fill(bar);\n    if (isDrawBarOutline() && (state.getBarWidth() > 3)) {\n        g2.setStroke(getItemStroke(row, column));\n        g2.setPaint(getItemOutlinePaint(row, column));\n        g2.draw(bar);\n    }\n    double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n    double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);\n    double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);\n    if (this.errorIndicatorStroke != null) {\n        g2.setStroke(this.errorIndicatorStroke);\n    } else {\n        g2.setStroke(getItemOutlineStroke(row, column));\n    }\n    if (this.errorIndicatorPaint != null) {\n        g2.setPaint(this.errorIndicatorPaint);\n    } else {\n        g2.setPaint(getItemOutlinePaint(row, column));\n    }\n    java.awt.geom.Line2D line = null;\n    line = new java.awt.geom.Line2D.Double(lowVal, rectY + (rectHeight / 2.0), highVal, rectY + (rectHeight / 2.0));\n    g2.draw(line);\n    line = new java.awt.geom.Line2D.Double(highVal, rectY + (rectHeight * 0.25), highVal, rectY + (rectHeight * 0.75));\n    g2.draw(line);\n    line = new java.awt.geom.Line2D.Double(lowVal, rectY + (rectHeight * 0.25), lowVal, rectY + (rectHeight * 0.75));\n    g2.draw(line);\n    org.jfree.chart.labels.CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);\n    if ((generator != null) && isItemLabelVisible(row, column)) {\n        drawItemLabel(g2, dataset, row, column, plot, generator, bar, value < 0.0);\n    }\n    org.jfree.chart.entity.EntityCollection entities = state.getEntityCollection();\n    if (entities != null) {\n        addItemEntity(entities, dataset, row, column, bar);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.jfree.data.statistics.StatisticalCategoryDataset statData = ((org.jfree.data.statistics.StatisticalCategoryDataset) (data))",
            "src_parent": "{\n    if (!(data instanceof org.jfree.data.statistics.StatisticalCategoryDataset)) {\n        throw new java.lang.IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n    }\n    org.jfree.data.statistics.StatisticalCategoryDataset statData = ((org.jfree.data.statistics.StatisticalCategoryDataset) (data));\n    org.jfree.chart.plot.PlotOrientation orientation = plot.getOrientation();\n    if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {\n        drawHorizontalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, row, column);\n    } else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {\n        drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, row, column);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {\n    drawHorizontalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, row, column);\n} else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {\n    drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, row, column);\n}",
            "src_parent": "{\n    if (!(data instanceof org.jfree.data.statistics.StatisticalCategoryDataset)) {\n        throw new java.lang.IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n    }\n    org.jfree.data.statistics.StatisticalCategoryDataset statData = ((org.jfree.data.statistics.StatisticalCategoryDataset) (data));\n    org.jfree.chart.plot.PlotOrientation orientation = plot.getOrientation();\n    if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {\n        drawHorizontalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, row, column);\n    } else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {\n        drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, row, column);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "g2.draw(line)",
            "dst_parent": "{\n    org.jfree.chart.util.RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n    double rectY = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, xAxisLocation);\n    int seriesCount = getRowCount();\n    int categoryCount = getColumnCount();\n    if (seriesCount > 1) {\n        double seriesGap = (dataArea.getHeight() * getItemMargin()) / (categoryCount * (seriesCount - 1));\n        rectY = rectY + (row * (state.getBarWidth() + seriesGap));\n    } else {\n        rectY = rectY + (row * state.getBarWidth());\n    }\n    java.lang.Number meanValue = dataset.getMeanValue(row, column);\n    double value = meanValue.doubleValue();\n    double base = 0.0;\n    double lclip = getLowerClip();\n    double uclip = getUpperClip();\n    if (uclip <= 0.0) {\n        if (value >= uclip) {\n            return;\n        }\n        base = uclip;\n        if (value <= lclip) {\n            value = lclip;\n        }\n    } else if (lclip <= 0.0) {\n        if (value >= uclip) {\n            value = uclip;\n        } else if (value <= lclip) {\n            value = lclip;\n        }\n    } else {\n        if (value <= lclip) {\n            return;\n        }\n        base = getLowerClip();\n        if (value >= uclip) {\n            value = uclip;\n        }\n    }\n    org.jfree.chart.util.RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n    double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n    double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);\n    double rectX = java.lang.Math.min(transY2, transY1);\n    double rectHeight = state.getBarWidth();\n    double rectWidth = java.lang.Math.abs(transY2 - transY1);\n    java.awt.geom.Rectangle2D bar = new java.awt.geom.Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);\n    java.awt.Paint seriesPaint = getItemPaint(row, column);\n    g2.setPaint(seriesPaint);\n    g2.fill(bar);\n    if (isDrawBarOutline() && (state.getBarWidth() > 3)) {\n        g2.setStroke(getItemStroke(row, column));\n        g2.setPaint(getItemOutlinePaint(row, column));\n        g2.draw(bar);\n    }\n    double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n    double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);\n    double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);\n    if (this.errorIndicatorStroke != null) {\n        g2.setStroke(this.errorIndicatorStroke);\n    } else {\n        g2.setStroke(getItemOutlineStroke(row, column));\n    }\n    if (this.errorIndicatorPaint != null) {\n        g2.setPaint(this.errorIndicatorPaint);\n    } else {\n        g2.setPaint(getItemOutlinePaint(row, column));\n    }\n    java.awt.geom.Line2D line = null;\n    line = new java.awt.geom.Line2D.Double(lowVal, rectY + (rectHeight / 2.0), highVal, rectY + (rectHeight / 2.0));\n    g2.draw(line);\n    line = new java.awt.geom.Line2D.Double(highVal, rectY + (rectHeight * 0.25), highVal, rectY + (rectHeight * 0.75));\n    g2.draw(line);\n    line = new java.awt.geom.Line2D.Double(lowVal, rectY + (rectHeight * 0.25), lowVal, rectY + (rectHeight * 0.75));\n    g2.draw(line);\n    org.jfree.chart.labels.CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);\n    if ((generator != null) && isItemLabelVisible(row, column)) {\n        drawItemLabel(g2, dataset, row, column, plot, generator, bar, value < 0.0);\n    }\n    org.jfree.chart.entity.EntityCollection entities = state.getEntityCollection();\n    if (entities != null) {\n        addItemEntity(entities, dataset, row, column, bar);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "g2.draw(line)",
            "src_parent": "{\n    org.jfree.chart.util.RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n    double rectY = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, xAxisLocation);\n    int seriesCount = getRowCount();\n    int categoryCount = getColumnCount();\n    if (seriesCount > 1) {\n        double seriesGap = (dataArea.getHeight() * getItemMargin()) / (categoryCount * (seriesCount - 1));\n        rectY = rectY + (row * (state.getBarWidth() + seriesGap));\n    } else {\n        rectY = rectY + (row * state.getBarWidth());\n    }\n    java.lang.Number meanValue = dataset.getMeanValue(row, column);\n    double value = meanValue.doubleValue();\n    double base = 0.0;\n    double lclip = getLowerClip();\n    if (seriesCount > 1) {\n        double seriesGap = (dataArea.getHeight() * getItemMargin()) / (categoryCount * (seriesCount - 1));\n        rectY = rectY + (row * (state.getBarWidth() + seriesGap));\n    } else {\n        rectY = rectY + (row * state.getBarWidth());\n    }\n    double uclip = getUpperClip();\n    if (uclip <= 0.0) {\n        if (value >= uclip) {\n            return;\n        }\n        base = uclip;\n        if (value <= lclip) {\n            value = lclip;\n        }\n    } else if (lclip <= 0.0) {\n        if (value >= uclip) {\n            value = uclip;\n        } else if (value <= lclip) {\n            value = lclip;\n        }\n    } else {\n        if (value <= lclip) {\n            return;\n        }\n        base = getLowerClip();\n        if (value >= uclip) {\n            value = uclip;\n        }\n    }\n    org.jfree.chart.util.RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n    double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n    double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);\n    double rectX = java.lang.Math.min(transY2, transY1);\n    double rectHeight = state.getBarWidth();\n    double rectWidth = java.lang.Math.abs(transY2 - transY1);\n    java.awt.geom.Rectangle2D bar = new java.awt.geom.Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);\n    java.awt.Paint seriesPaint = getItemPaint(row, column);\n    g2.setPaint(seriesPaint);\n    g2.fill(bar);\n    if (isDrawBarOutline() && (state.getBarWidth() > 3)) {\n        g2.setStroke(getItemStroke(row, column));\n        g2.setPaint(getItemOutlinePaint(row, column));\n        g2.draw(bar);\n    }\n    double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n    double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);\n    double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);\n    if (this.errorIndicatorStroke != null) {\n        g2.setStroke(this.errorIndicatorStroke);\n    } else {\n        g2.setStroke(getItemOutlineStroke(row, column));\n    }\n    if (this.errorIndicatorPaint != null) {\n        g2.setPaint(this.errorIndicatorPaint);\n    } else {\n        g2.setPaint(getItemOutlinePaint(row, column));\n    }\n    java.awt.geom.Line2D line = null;\n    line = new java.awt.geom.Line2D.Double(lowVal, rectY + (rectHeight / 2.0), highVal, rectY + (rectHeight / 2.0));\n    g2.draw(line);\n    line = new java.awt.geom.Line2D.Double(highVal, rectY + (rectHeight * 0.25), highVal, rectY + (rectHeight * 0.75));\n    g2.draw(line);\n    line = new java.awt.geom.Line2D.Double(lowVal, rectY + (rectHeight * 0.25), lowVal, rectY + (rectHeight * 0.75));\n    g2.draw(line);\n    org.jfree.chart.labels.CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);\n    if ((generator != null) && isItemLabelVisible(row, column)) {\n        drawItemLabel(g2, dataset, row, column, plot, generator, bar, value < 0.0);\n    }\n    org.jfree.chart.entity.EntityCollection entities = state.getEntityCollection();\n    if (entities != null) {\n        addItemEntity(entities, dataset, row, column, bar);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "g2.draw(line)",
            "dst_parent": "{\n    org.jfree.chart.util.RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n    double rectY = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, xAxisLocation);\n    int seriesCount = getRowCount();\n    int categoryCount = getColumnCount();\n    if (seriesCount > 1) {\n        double seriesGap = (dataArea.getHeight() * getItemMargin()) / (categoryCount * (seriesCount - 1));\n        rectY = rectY + (row * (state.getBarWidth() + seriesGap));\n    } else {\n        rectY = rectY + (row * state.getBarWidth());\n    }\n    java.lang.Number meanValue = dataset.getMeanValue(row, column);\n    double value = meanValue.doubleValue();\n    double base = 0.0;\n    double lclip = getLowerClip();\n    double uclip = getUpperClip();\n    if (uclip <= 0.0) {\n        if (value >= uclip) {\n            return;\n        }\n        base = uclip;\n        if (value <= lclip) {\n            value = lclip;\n        }\n    } else if (lclip <= 0.0) {\n        if (value >= uclip) {\n            value = uclip;\n        } else if (value <= lclip) {\n            value = lclip;\n        }\n    } else {\n        if (value <= lclip) {\n            return;\n        }\n        base = getLowerClip();\n        if (value >= uclip) {\n            value = uclip;\n        }\n    }\n    org.jfree.chart.util.RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n    double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n    double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);\n    double rectX = java.lang.Math.min(transY2, transY1);\n    double rectHeight = state.getBarWidth();\n    double rectWidth = java.lang.Math.abs(transY2 - transY1);\n    java.awt.geom.Rectangle2D bar = new java.awt.geom.Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);\n    java.awt.Paint seriesPaint = getItemPaint(row, column);\n    g2.setPaint(seriesPaint);\n    g2.fill(bar);\n    if (isDrawBarOutline() && (state.getBarWidth() > 3)) {\n        g2.setStroke(getItemStroke(row, column));\n        g2.setPaint(getItemOutlinePaint(row, column));\n        g2.draw(bar);\n    }\n    double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n    double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);\n    double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);\n    if (this.errorIndicatorStroke != null) {\n        g2.setStroke(this.errorIndicatorStroke);\n    } else {\n        g2.setStroke(getItemOutlineStroke(row, column));\n    }\n    if (this.errorIndicatorPaint != null) {\n        g2.setPaint(this.errorIndicatorPaint);\n    } else {\n        g2.setPaint(getItemOutlinePaint(row, column));\n    }\n    java.awt.geom.Line2D line = null;\n    line = new java.awt.geom.Line2D.Double(lowVal, rectY + (rectHeight / 2.0), highVal, rectY + (rectHeight / 2.0));\n    g2.draw(line);\n    line = new java.awt.geom.Line2D.Double(highVal, rectY + (rectHeight * 0.25), highVal, rectY + (rectHeight * 0.75));\n    g2.draw(line);\n    line = new java.awt.geom.Line2D.Double(lowVal, rectY + (rectHeight * 0.25), lowVal, rectY + (rectHeight * 0.75));\n    g2.draw(line);\n    org.jfree.chart.labels.CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);\n    if ((generator != null) && isItemLabelVisible(row, column)) {\n        drawItemLabel(g2, dataset, row, column, plot, generator, bar, value < 0.0);\n    }\n    org.jfree.chart.entity.EntityCollection entities = state.getEntityCollection();\n    if (entities != null) {\n        addItemEntity(entities, dataset, row, column, bar);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "g2.draw(line)",
            "src_parent": "{\n    org.jfree.chart.util.RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n    double rectY = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, xAxisLocation);\n    int seriesCount = getRowCount();\n    int categoryCount = getColumnCount();\n    if (seriesCount > 1) {\n        double seriesGap = (dataArea.getHeight() * getItemMargin()) / (categoryCount * (seriesCount - 1));\n        rectY = rectY + (row * (state.getBarWidth() + seriesGap));\n    } else {\n        rectY = rectY + (row * state.getBarWidth());\n    }\n    java.lang.Number meanValue = dataset.getMeanValue(row, column);\n    double value = meanValue.doubleValue();\n    double base = 0.0;\n    double lclip = getLowerClip();\n    if (seriesCount > 1) {\n        double seriesGap = (dataArea.getHeight() * getItemMargin()) / (categoryCount * (seriesCount - 1));\n        rectY = rectY + (row * (state.getBarWidth() + seriesGap));\n    } else {\n        rectY = rectY + (row * state.getBarWidth());\n    }\n    double uclip = getUpperClip();\n    if (uclip <= 0.0) {\n        if (value >= uclip) {\n            return;\n        }\n        base = uclip;\n        if (value <= lclip) {\n            value = lclip;\n        }\n    } else if (lclip <= 0.0) {\n        if (value >= uclip) {\n            value = uclip;\n        } else if (value <= lclip) {\n            value = lclip;\n        }\n    } else {\n        if (value <= lclip) {\n            return;\n        }\n        base = getLowerClip();\n        if (value >= uclip) {\n            value = uclip;\n        }\n    }\n    org.jfree.chart.util.RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n    double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n    double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);\n    double rectX = java.lang.Math.min(transY2, transY1);\n    double rectHeight = state.getBarWidth();\n    double rectWidth = java.lang.Math.abs(transY2 - transY1);\n    java.awt.geom.Rectangle2D bar = new java.awt.geom.Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);\n    java.awt.Paint seriesPaint = getItemPaint(row, column);\n    g2.setPaint(seriesPaint);\n    g2.fill(bar);\n    if (isDrawBarOutline() && (state.getBarWidth() > 3)) {\n        g2.setStroke(getItemStroke(row, column));\n        g2.setPaint(getItemOutlinePaint(row, column));\n        g2.draw(bar);\n    }\n    double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n    double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);\n    double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);\n    if (this.errorIndicatorStroke != null) {\n        g2.setStroke(this.errorIndicatorStroke);\n    } else {\n        g2.setStroke(getItemOutlineStroke(row, column));\n    }\n    if (this.errorIndicatorPaint != null) {\n        g2.setPaint(this.errorIndicatorPaint);\n    } else {\n        g2.setPaint(getItemOutlinePaint(row, column));\n    }\n    java.awt.geom.Line2D line = null;\n    line = new java.awt.geom.Line2D.Double(lowVal, rectY + (rectHeight / 2.0), highVal, rectY + (rectHeight / 2.0));\n    g2.draw(line);\n    line = new java.awt.geom.Line2D.Double(highVal, rectY + (rectHeight * 0.25), highVal, rectY + (rectHeight * 0.75));\n    g2.draw(line);\n    line = new java.awt.geom.Line2D.Double(lowVal, rectY + (rectHeight * 0.25), lowVal, rectY + (rectHeight * 0.75));\n    g2.draw(line);\n    org.jfree.chart.labels.CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);\n    if ((generator != null) && isItemLabelVisible(row, column)) {\n        drawItemLabel(g2, dataset, row, column, plot, generator, bar, value < 0.0);\n    }\n    org.jfree.chart.entity.EntityCollection entities = state.getEntityCollection();\n    if (entities != null) {\n        addItemEntity(entities, dataset, row, column, bar);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "g2.draw(line)",
            "dst_parent": "{\n    org.jfree.chart.util.RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n    double rectY = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, xAxisLocation);\n    int seriesCount = getRowCount();\n    int categoryCount = getColumnCount();\n    if (seriesCount > 1) {\n        double seriesGap = (dataArea.getHeight() * getItemMargin()) / (categoryCount * (seriesCount - 1));\n        rectY = rectY + (row * (state.getBarWidth() + seriesGap));\n    } else {\n        rectY = rectY + (row * state.getBarWidth());\n    }\n    java.lang.Number meanValue = dataset.getMeanValue(row, column);\n    double value = meanValue.doubleValue();\n    double base = 0.0;\n    double lclip = getLowerClip();\n    double uclip = getUpperClip();\n    if (uclip <= 0.0) {\n        if (value >= uclip) {\n            return;\n        }\n        base = uclip;\n        if (value <= lclip) {\n            value = lclip;\n        }\n    } else if (lclip <= 0.0) {\n        if (value >= uclip) {\n            value = uclip;\n        } else if (value <= lclip) {\n            value = lclip;\n        }\n    } else {\n        if (value <= lclip) {\n            return;\n        }\n        base = getLowerClip();\n        if (value >= uclip) {\n            value = uclip;\n        }\n    }\n    org.jfree.chart.util.RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n    double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n    double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);\n    double rectX = java.lang.Math.min(transY2, transY1);\n    double rectHeight = state.getBarWidth();\n    double rectWidth = java.lang.Math.abs(transY2 - transY1);\n    java.awt.geom.Rectangle2D bar = new java.awt.geom.Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);\n    java.awt.Paint seriesPaint = getItemPaint(row, column);\n    g2.setPaint(seriesPaint);\n    g2.fill(bar);\n    if (isDrawBarOutline() && (state.getBarWidth() > 3)) {\n        g2.setStroke(getItemStroke(row, column));\n        g2.setPaint(getItemOutlinePaint(row, column));\n        g2.draw(bar);\n    }\n    double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n    double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);\n    double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);\n    if (this.errorIndicatorStroke != null) {\n        g2.setStroke(this.errorIndicatorStroke);\n    } else {\n        g2.setStroke(getItemOutlineStroke(row, column));\n    }\n    if (this.errorIndicatorPaint != null) {\n        g2.setPaint(this.errorIndicatorPaint);\n    } else {\n        g2.setPaint(getItemOutlinePaint(row, column));\n    }\n    java.awt.geom.Line2D line = null;\n    line = new java.awt.geom.Line2D.Double(lowVal, rectY + (rectHeight / 2.0), highVal, rectY + (rectHeight / 2.0));\n    g2.draw(line);\n    line = new java.awt.geom.Line2D.Double(highVal, rectY + (rectHeight * 0.25), highVal, rectY + (rectHeight * 0.75));\n    g2.draw(line);\n    line = new java.awt.geom.Line2D.Double(lowVal, rectY + (rectHeight * 0.25), lowVal, rectY + (rectHeight * 0.75));\n    g2.draw(line);\n    org.jfree.chart.labels.CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);\n    if ((generator != null) && isItemLabelVisible(row, column)) {\n        drawItemLabel(g2, dataset, row, column, plot, generator, bar, value < 0.0);\n    }\n    org.jfree.chart.entity.EntityCollection entities = state.getEntityCollection();\n    if (entities != null) {\n        addItemEntity(entities, dataset, row, column, bar);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "g2.draw(line)",
            "src_parent": "{\n    org.jfree.chart.util.RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n    double rectY = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, xAxisLocation);\n    int seriesCount = getRowCount();\n    int categoryCount = getColumnCount();\n    if (seriesCount > 1) {\n        double seriesGap = (dataArea.getHeight() * getItemMargin()) / (categoryCount * (seriesCount - 1));\n        rectY = rectY + (row * (state.getBarWidth() + seriesGap));\n    } else {\n        rectY = rectY + (row * state.getBarWidth());\n    }\n    java.lang.Number meanValue = dataset.getMeanValue(row, column);\n    double value = meanValue.doubleValue();\n    double base = 0.0;\n    double lclip = getLowerClip();\n    if (seriesCount > 1) {\n        double seriesGap = (dataArea.getHeight() * getItemMargin()) / (categoryCount * (seriesCount - 1));\n        rectY = rectY + (row * (state.getBarWidth() + seriesGap));\n    } else {\n        rectY = rectY + (row * state.getBarWidth());\n    }\n    double uclip = getUpperClip();\n    if (uclip <= 0.0) {\n        if (value >= uclip) {\n            return;\n        }\n        base = uclip;\n        if (value <= lclip) {\n            value = lclip;\n        }\n    } else if (lclip <= 0.0) {\n        if (value >= uclip) {\n            value = uclip;\n        } else if (value <= lclip) {\n            value = lclip;\n        }\n    } else {\n        if (value <= lclip) {\n            return;\n        }\n        base = getLowerClip();\n        if (value >= uclip) {\n            value = uclip;\n        }\n    }\n    org.jfree.chart.util.RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n    double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n    double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);\n    double rectX = java.lang.Math.min(transY2, transY1);\n    double rectHeight = state.getBarWidth();\n    double rectWidth = java.lang.Math.abs(transY2 - transY1);\n    java.awt.geom.Rectangle2D bar = new java.awt.geom.Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);\n    java.awt.Paint seriesPaint = getItemPaint(row, column);\n    g2.setPaint(seriesPaint);\n    g2.fill(bar);\n    if (isDrawBarOutline() && (state.getBarWidth() > 3)) {\n        g2.setStroke(getItemStroke(row, column));\n        g2.setPaint(getItemOutlinePaint(row, column));\n        g2.draw(bar);\n    }\n    double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n    double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);\n    double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);\n    if (this.errorIndicatorStroke != null) {\n        g2.setStroke(this.errorIndicatorStroke);\n    } else {\n        g2.setStroke(getItemOutlineStroke(row, column));\n    }\n    if (this.errorIndicatorPaint != null) {\n        g2.setPaint(this.errorIndicatorPaint);\n    } else {\n        g2.setPaint(getItemOutlinePaint(row, column));\n    }\n    java.awt.geom.Line2D line = null;\n    line = new java.awt.geom.Line2D.Double(lowVal, rectY + (rectHeight / 2.0), highVal, rectY + (rectHeight / 2.0));\n    g2.draw(line);\n    line = new java.awt.geom.Line2D.Double(highVal, rectY + (rectHeight * 0.25), highVal, rectY + (rectHeight * 0.75));\n    g2.draw(line);\n    line = new java.awt.geom.Line2D.Double(lowVal, rectY + (rectHeight * 0.25), lowVal, rectY + (rectHeight * 0.75));\n    g2.draw(line);\n    org.jfree.chart.labels.CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);\n    if ((generator != null) && isItemLabelVisible(row, column)) {\n        drawItemLabel(g2, dataset, row, column, plot, generator, bar, value < 0.0);\n    }\n    org.jfree.chart.entity.EntityCollection entities = state.getEntityCollection();\n    if (entities != null) {\n        addItemEntity(entities, dataset, row, column, bar);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "g2",
            "dst_parent": "drawHorizontalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, row, column)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "g2",
            "src_parent": "g2.setStroke(plot.getRangeGridlineStroke())",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "plot",
            "dst_parent": "drawHorizontalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, row, column)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "plot",
            "src_parent": "plot.getRangeGridlineStroke()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "dataArea",
            "dst_parent": "drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, row, column)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "dataArea",
            "src_parent": "dataArea.getMaxY()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "plot",
            "dst_parent": "drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, row, column)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "plot",
            "src_parent": "plot.getRangeAxisEdge()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        }
      ],
      "file_name": "StatisticalBarRenderer"
    }
  ],
  "id": "GenProg_patch_Defects4J_Chart_25_0_66"
}