{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (org.jfree.data.general.DatasetUtilities.isEmptyOrNull(getDataset())) {\n    drawNoDataMessage(g2, plotArea);\n    g2.setClip(savedClip);\n    drawOutline(g2, plotArea);\n    return;\n}",
            "src_parent": "{\n    org.jfree.chart.util.RectangleInsets insets = getInsets();\n    insets.trim(plotArea);\n    java.awt.geom.Rectangle2D originalPlotArea = ((java.awt.geom.Rectangle2D) (plotArea.clone()));\n    if (info != null) {\n        info.setPlotArea(plotArea);\n        info.setDataArea(plotArea);\n    }\n    drawBackground(g2, plotArea);\n    java.awt.Shape savedClip = g2.getClip();\n    g2.clip(plotArea);\n    double gapPercent = getInteriorGap();\n    double labelPercent = 0.0;\n    if (getLabelGenerator() != null) {\n        labelPercent = getLabelGap() + getMaximumLabelWidth();\n    }\n    if (getLabelGenerator() != null) {\n        if (org.jfree.data.general.DatasetUtilities.isEmptyOrNull(getDataset())) {\n            drawNoDataMessage(g2, plotArea);\n            g2.setClip(savedClip);\n            drawOutline(g2, plotArea);\n            return;\n        }\n        labelPercent = getLabelGap() + getMaximumLabelWidth();\n    }\n    double gapHorizontal = (plotArea.getWidth() * (gapPercent + labelPercent)) * 2.0;\n    double gapVertical = (plotArea.getHeight() * gapPercent) * 2.0;\n    if (DEBUG_DRAW_INTERIOR) {\n        double hGap = plotArea.getWidth() * getInteriorGap();\n        double vGap = plotArea.getHeight() * getInteriorGap();\n        double igx1 = plotArea.getX() + hGap;\n        double igx2 = plotArea.getMaxX() - hGap;\n        double igy1 = plotArea.getY() + vGap;\n        double igy2 = plotArea.getMaxY() - vGap;\n        g2.setPaint(java.awt.Color.lightGray);\n        g2.draw(new java.awt.geom.Rectangle2D.Double(igx1, igy1, igx2 - igx1, igy2 - igy1));\n    }\n    double linkX = plotArea.getX() + (gapHorizontal / 2);\n    double linkY = plotArea.getY() + (gapVertical / 2);\n    double linkW = plotArea.getWidth() - gapHorizontal;\n    double linkH = plotArea.getHeight() - gapVertical;\n    if (org.jfree.data.general.DatasetUtilities.isEmptyOrNull(getDataset())) {\n        drawNoDataMessage(g2, plotArea);\n        g2.setClip(savedClip);\n        drawOutline(g2, plotArea);\n        return;\n    }\n    if (isCircular()) {\n        double min = java.lang.Math.min(linkW, linkH) / 2;\n        linkX = (((linkX + linkX) + linkW) / 2) - min;\n        linkY = (((linkY + linkY) + linkH) / 2) - min;\n        linkW = 2 * min;\n        linkH = 2 * min;\n    }\n    org.jfree.chart.plot.PiePlotState state = initialise(g2, plotArea, this, null, info);\n    java.awt.geom.Rectangle2D linkAreaXX = new java.awt.geom.Rectangle2D.Double(linkX, linkY, linkW, linkH * (1 - this.depthFactor));\n    state.setLinkArea(linkAreaXX);\n    if (DEBUG_DRAW_LINK_AREA) {\n        g2.setPaint(java.awt.Color.blue);\n        g2.draw(linkAreaXX);\n        g2.setPaint(java.awt.Color.yellow);\n        g2.draw(new java.awt.geom.Ellipse2D.Double(linkAreaXX.getX(), linkAreaXX.getY(), linkAreaXX.getWidth(), linkAreaXX.getHeight()));\n    }\n    double hh = linkW * getLabelLinkMargin();\n    double vv = linkH * getLabelLinkMargin();\n    java.awt.geom.Rectangle2D explodeArea = new java.awt.geom.Rectangle2D.Double(linkX + (hh / 2.0), linkY + (vv / 2.0), linkW - hh, linkH - vv);\n    state.setExplodedPieArea(explodeArea);\n    double maximumExplodePercent = getMaximumExplodePercent();\n    double percent = maximumExplodePercent / (1.0 + maximumExplodePercent);\n    double h1 = explodeArea.getWidth() * percent;\n    double v1 = explodeArea.getHeight() * percent;\n    java.awt.geom.Rectangle2D pieArea = new java.awt.geom.Rectangle2D.Double(explodeArea.getX() + (h1 / 2.0), explodeArea.getY() + (v1 / 2.0), explodeArea.getWidth() - h1, explodeArea.getHeight() - v1);\n    int depth = ((int) (pieArea.getHeight() * this.depthFactor));\n    java.awt.geom.Rectangle2D linkArea = new java.awt.geom.Rectangle2D.Double(linkX, linkY, linkW, linkH - depth);\n    state.setLinkArea(linkArea);\n    state.setPieArea(pieArea);\n    state.setPieCenterX(pieArea.getCenterX());\n    state.setPieCenterY(pieArea.getCenterY() - (depth / 2.0));\n    state.setPieWRadius(pieArea.getWidth() / 2.0);\n    state.setPieHRadius((pieArea.getHeight() - depth) / 2.0);\n    org.jfree.data.general.PieDataset dataset = getDataset();\n    if (org.jfree.data.general.DatasetUtilities.isEmptyOrNull(getDataset())) {\n        drawNoDataMessage(g2, plotArea);\n        g2.setClip(savedClip);\n        drawOutline(g2, plotArea);\n        return;\n    }\n    if (dataset.getKeys().size() > plotArea.getWidth()) {\n        java.lang.String text = \"Too many elements\";\n        java.awt.Font sfont = new java.awt.Font(\"dialog\", java.awt.Font.BOLD, 10);\n        g2.setFont(sfont);\n        java.awt.FontMetrics fm = g2.getFontMetrics(sfont);\n        int stringWidth = fm.stringWidth(text);\n        g2.drawString(text, ((int) (plotArea.getX() + ((plotArea.getWidth() - stringWidth) / 2))), ((int) (plotArea.getY() + (plotArea.getHeight() / 2))));\n        return;\n    }\n    if (isCircular()) {\n        double min = java.lang.Math.min(plotArea.getWidth(), plotArea.getHeight()) / 2;\n        plotArea = new java.awt.geom.Rectangle2D.Double(plotArea.getCenterX() - min, plotArea.getCenterY() - min, 2 * min, 2 * min);\n    }\n    java.util.List sectionKeys = dataset.getKeys();\n    if (sectionKeys.size() == 0) {\n        return;\n    }\n    double arcX = pieArea.getX();\n    double arcY = pieArea.getY();\n    java.awt.Composite originalComposite = g2.getComposite();\n    g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getForegroundAlpha()));\n    double totalValue = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(dataset);\n    double runningTotal = 0;\n    if (depth < 0) {\n        return;\n    }\n    java.util.ArrayList arcList = new java.util.ArrayList();\n    java.awt.geom.Arc2D.Double arc;\n    java.awt.Paint paint;\n    java.awt.Paint outlinePaint;\n    java.awt.Stroke outlineStroke;\n    java.util.Iterator iterator = sectionKeys.iterator();\n    while (iterator.hasNext()) {\n        java.lang.Comparable currentKey = ((java.lang.Comparable) (iterator.next()));\n        java.lang.Number dataValue = dataset.getValue(currentKey);\n        if (dataValue == null) {\n            arcList.add(null);\n            continue;\n        }\n        double value = dataValue.doubleValue();\n        if (value <= 0) {\n            arcList.add(null);\n            continue;\n        }\n        double startAngle = getStartAngle();\n        double direction = getDirection().getFactor();\n        double angle1 = startAngle + ((direction * (runningTotal * 360)) / totalValue);\n        double angle2 = startAngle + (((direction * (runningTotal + value)) * 360) / totalValue);\n        if (java.lang.Math.abs(angle2 - angle1) > getMinimumArcAngleToDraw()) {\n            arcList.add(new java.awt.geom.Arc2D.Double(arcX, arcY + depth, pieArea.getWidth(), pieArea.getHeight() - depth, angle1, angle2 - angle1, java.awt.geom.Arc2D.PIE));\n        } else {\n            arcList.add(null);\n        }\n        runningTotal += value;\n    } \n    java.awt.Shape oldClip = g2.getClip();\n    java.awt.geom.Ellipse2D top = new java.awt.geom.Ellipse2D.Double(pieArea.getX(), pieArea.getY(), pieArea.getWidth(), pieArea.getHeight() - depth);\n    java.awt.geom.Ellipse2D bottom = new java.awt.geom.Ellipse2D.Double(pieArea.getX(), pieArea.getY() + depth, pieArea.getWidth(), pieArea.getHeight() - depth);\n    java.awt.geom.Rectangle2D lower = new java.awt.geom.Rectangle2D.Double(top.getX(), top.getCenterY(), pieArea.getWidth(), bottom.getMaxY() - top.getCenterY());\n    java.awt.geom.Rectangle2D upper = new java.awt.geom.Rectangle2D.Double(pieArea.getX(), top.getY(), pieArea.getWidth(), bottom.getCenterY() - top.getY());\n    java.awt.geom.Area a = new java.awt.geom.Area(top);\n    a.add(new java.awt.geom.Area(lower));\n    java.awt.geom.Area b = new java.awt.geom.Area(bottom);\n    b.add(new java.awt.geom.Area(upper));\n    java.awt.geom.Area pie = new java.awt.geom.Area(a);\n    pie.intersect(b);\n    java.awt.geom.Area front = new java.awt.geom.Area(pie);\n    front.subtract(new java.awt.geom.Area(top));\n    java.awt.geom.Area back = new java.awt.geom.Area(pie);\n    back.subtract(new java.awt.geom.Area(bottom));\n    int[] xs;\n    int[] ys;\n    arc = new java.awt.geom.Arc2D.Double(arcX, arcY + depth, pieArea.getWidth(), pieArea.getHeight() - depth, 0, 360, java.awt.geom.Arc2D.PIE);\n    int categoryCount = arcList.size();\n    for (int categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\n        arc = ((java.awt.geom.Arc2D.Double) (arcList.get(categoryIndex)));\n        if (arc == null) {\n            continue;\n        }\n        java.lang.Comparable key = getSectionKey(categoryIndex);\n        paint = lookupSectionPaint(key, true);\n        outlinePaint = lookupSectionOutlinePaint(key);\n        outlineStroke = lookupSectionOutlineStroke(key);\n        g2.setPaint(paint);\n        g2.fill(arc);\n        g2.setPaint(outlinePaint);\n        g2.setStroke(outlineStroke);\n        g2.draw(arc);\n        g2.setPaint(paint);\n        java.awt.geom.Point2D p1 = arc.getStartPoint();\n        xs = new int[]{ ((int) (arc.getCenterX())), ((int) (arc.getCenterX())), ((int) (p1.getX())), ((int) (p1.getX())) };\n        ys = new int[]{ ((int) (arc.getCenterY())), ((int) (arc.getCenterY())) - depth, ((int) (p1.getY())) - depth, ((int) (p1.getY())) };\n        java.awt.Polygon polygon = new java.awt.Polygon(xs, ys, 4);\n        g2.setPaint(java.awt.Color.lightGray);\n        g2.fill(polygon);\n        g2.setPaint(outlinePaint);\n        g2.setStroke(outlineStroke);\n        g2.draw(polygon);\n        g2.setPaint(paint);\n    }\n    g2.setPaint(java.awt.Color.gray);\n    g2.fill(back);\n    g2.fill(front);\n    int cat = 0;\n    iterator = arcList.iterator();\n    while (iterator.hasNext()) {\n        java.awt.geom.Arc2D segment = ((java.awt.geom.Arc2D) (iterator.next()));\n        if (segment != null) {\n            java.lang.Comparable key = getSectionKey(cat);\n            paint = lookupSectionPaint(key, true);\n            outlinePaint = lookupSectionOutlinePaint(key);\n            outlineStroke = lookupSectionOutlineStroke(key);\n            drawSide(g2, pieArea, segment, front, back, paint, outlinePaint, outlineStroke, false, true);\n        }\n        cat++;\n    } \n    cat = 0;\n    iterator = arcList.iterator();\n    while (iterator.hasNext()) {\n        java.awt.geom.Arc2D segment = ((java.awt.geom.Arc2D) (iterator.next()));\n        if (segment != null) {\n            java.lang.Comparable key = getSectionKey(cat);\n            paint = lookupSectionPaint(key);\n            outlinePaint = lookupSectionOutlinePaint(key);\n            outlineStroke = lookupSectionOutlineStroke(key);\n            drawSide(g2, pieArea, segment, front, back, paint, outlinePaint, outlineStroke, true, false);\n        }\n        cat++;\n    } \n    g2.setClip(oldClip);\n    java.awt.geom.Arc2D upperArc;\n    for (int sectionIndex = 0; sectionIndex < categoryCount; sectionIndex++) {\n        arc = ((java.awt.geom.Arc2D.Double) (arcList.get(sectionIndex)));\n        if (arc == null) {\n            continue;\n        }\n        upperArc = new java.awt.geom.Arc2D.Double(arcX, arcY, pieArea.getWidth(), pieArea.getHeight() - depth, arc.getAngleStart(), arc.getAngleExtent(), java.awt.geom.Arc2D.PIE);\n        java.lang.Comparable currentKey = ((java.lang.Comparable) (sectionKeys.get(sectionIndex)));\n        paint = lookupSectionPaint(currentKey, true);\n        outlinePaint = lookupSectionOutlinePaint(currentKey);\n        outlineStroke = lookupSectionOutlineStroke(currentKey);\n        g2.setPaint(paint);\n        g2.fill(upperArc);\n        g2.setStroke(outlineStroke);\n        g2.setPaint(outlinePaint);\n        g2.draw(upperArc);\n        if (info != null) {\n            org.jfree.chart.entity.EntityCollection entities = info.getOwner().getEntityCollection();\n            if (entities != null) {\n                java.lang.String tip = null;\n                org.jfree.chart.labels.PieToolTipGenerator tipster = getToolTipGenerator();\n                if (tipster != null) {\n                    tip = tipster.generateToolTip(dataset, currentKey);\n                }\n                java.lang.String url = null;\n                if (getURLGenerator() != null) {\n                    url = getURLGenerator().generateURL(dataset, currentKey, getPieIndex());\n                }\n                org.jfree.chart.entity.PieSectionEntity entity = new org.jfree.chart.entity.PieSectionEntity(upperArc, dataset, getPieIndex(), sectionIndex, currentKey, tip, url);\n                entities.add(entity);\n            }\n        }\n        java.util.List keys = dataset.getKeys();\n        java.awt.geom.Rectangle2D adjustedPlotArea = new java.awt.geom.Rectangle2D.Double(originalPlotArea.getX(), originalPlotArea.getY(), originalPlotArea.getWidth(), originalPlotArea.getHeight() - depth);\n        if (getSimpleLabels()) {\n            drawSimpleLabels(g2, keys, totalValue, adjustedPlotArea, linkArea, state);\n        } else {\n            drawLabels(g2, keys, totalValue, adjustedPlotArea, linkArea, state);\n        }\n    }\n    g2.setClip(savedClip);\n    g2.setComposite(originalComposite);\n    drawOutline(g2, originalPlotArea);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "PiePlot3D"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "public double getLabelGap() {\n    return this.labelGap;\n}",
            "dst_parent": "public class PiePlot extends org.jfree.chart.plot.Plot implements java.io.Serializable , java.lang.Cloneable {\n    private static final long serialVersionUID = -795612466005590431L;\n\n    public static final double DEFAULT_INTERIOR_GAP = 0.08;\n\n    public static final double MAX_INTERIOR_GAP = 0.4;\n\n    public static final double DEFAULT_START_ANGLE = 90.0;\n\n    public static final java.awt.Font DEFAULT_LABEL_FONT = new java.awt.Font(\"SansSerif\", java.awt.Font.PLAIN, 10);\n\n    public static final java.awt.Paint DEFAULT_LABEL_PAINT = java.awt.Color.black;\n\n    public static final java.awt.Paint DEFAULT_LABEL_BACKGROUND_PAINT = new java.awt.Color(255, 255, 192);\n\n    public static final java.awt.Paint DEFAULT_LABEL_OUTLINE_PAINT = java.awt.Color.black;\n\n    public static final java.awt.Stroke DEFAULT_LABEL_OUTLINE_STROKE = new java.awt.BasicStroke(0.5F);\n\n    public static final java.awt.Paint DEFAULT_LABEL_SHADOW_PAINT = new java.awt.Color(151, 151, 151, 128);\n\n    public static final double DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW = 1.0E-5;\n\n    private org.jfree.data.general.PieDataset dataset;\n\n    private int pieIndex;\n\n    private double interiorGap;\n\n    private boolean circular;\n\n    private double startAngle;\n\n    private org.jfree.chart.util.Rotation direction;\n\n    private org.jfree.chart.PaintMap sectionPaintMap;\n\n    private transient java.awt.Paint baseSectionPaint;\n\n    private boolean sectionOutlinesVisible;\n\n    private org.jfree.chart.PaintMap sectionOutlinePaintMap;\n\n    private transient java.awt.Paint baseSectionOutlinePaint;\n\n    private org.jfree.chart.StrokeMap sectionOutlineStrokeMap;\n\n    private transient java.awt.Stroke baseSectionOutlineStroke;\n\n    private transient java.awt.Paint shadowPaint = java.awt.Color.gray;\n\n    private double shadowXOffset = 4.0F;\n\n    private double shadowYOffset = 4.0F;\n\n    private java.util.Map explodePercentages;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator;\n\n    private java.awt.Font labelFont;\n\n    private transient java.awt.Paint labelPaint;\n\n    private transient java.awt.Paint labelBackgroundPaint;\n\n    private transient java.awt.Paint labelOutlinePaint;\n\n    private transient java.awt.Stroke labelOutlineStroke;\n\n    private transient java.awt.Paint labelShadowPaint;\n\n    private boolean simpleLabels = true;\n\n    private org.jfree.chart.util.RectangleInsets labelPadding;\n\n    private org.jfree.chart.util.RectangleInsets simpleLabelOffset;\n\n    private double maximumLabelWidth = 0.14;\n\n    private double labelGap = 0.025;\n\n    private boolean labelLinksVisible;\n\n    private double labelLinkMargin = 0.025;\n\n    private transient java.awt.Paint labelLinkPaint = java.awt.Color.black;\n\n    private transient java.awt.Stroke labelLinkStroke = new java.awt.BasicStroke(0.5F);\n\n    private org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor;\n\n    private org.jfree.chart.labels.PieToolTipGenerator toolTipGenerator;\n\n    private org.jfree.chart.urls.PieURLGenerator urlGenerator;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator legendLabelGenerator;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator legendLabelToolTipGenerator;\n\n    private org.jfree.chart.urls.PieURLGenerator legendLabelURLGenerator;\n\n    private boolean ignoreNullValues;\n\n    private boolean ignoreZeroValues;\n\n    private transient java.awt.Shape legendItemShape;\n\n    private double minimumArcAngleToDraw;\n\n    protected static java.util.ResourceBundle localizationResources = java.util.ResourceBundle.getBundle(\"org.jfree.chart.plot.LocalizationBundle\");\n\n    static final boolean DEBUG_DRAW_INTERIOR = false;\n\n    static final boolean DEBUG_DRAW_LINK_AREA = false;\n\n    static final boolean DEBUG_DRAW_PIE_AREA = false;\n\n    public PiePlot() {\n        this(null);\n    }\n\n    public PiePlot(org.jfree.data.general.PieDataset dataset) {\n        super();\n        this.dataset = dataset;\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n        this.pieIndex = 0;\n        this.interiorGap = org.jfree.chart.plot.PiePlot.DEFAULT_INTERIOR_GAP;\n        this.circular = true;\n        this.startAngle = org.jfree.chart.plot.PiePlot.DEFAULT_START_ANGLE;\n        this.direction = org.jfree.chart.util.Rotation.CLOCKWISE;\n        this.minimumArcAngleToDraw = org.jfree.chart.plot.PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW;\n        this.sectionPaintMap = new org.jfree.chart.PaintMap();\n        this.baseSectionPaint = java.awt.Color.gray;\n        this.sectionOutlinesVisible = true;\n        this.sectionOutlinePaintMap = new org.jfree.chart.PaintMap();\n        this.baseSectionOutlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.sectionOutlineStrokeMap = new org.jfree.chart.StrokeMap();\n        this.baseSectionOutlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.explodePercentages = new java.util.TreeMap();\n        this.labelGenerator = new org.jfree.chart.labels.StandardPieSectionLabelGenerator();\n        this.labelFont = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT;\n        this.labelPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT;\n        this.labelBackgroundPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT;\n        this.labelOutlinePaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT;\n        this.labelOutlineStroke = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;\n        this.labelShadowPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT;\n        this.labelLinksVisible = true;\n        this.labelDistributor = new org.jfree.chart.plot.PieLabelDistributor(0);\n        this.simpleLabels = false;\n        this.simpleLabelOffset = new org.jfree.chart.util.RectangleInsets(org.jfree.chart.util.UnitType.RELATIVE, 0.18, 0.18, 0.18, 0.18);\n        this.labelPadding = new org.jfree.chart.util.RectangleInsets(2, 2, 2, 2);\n        this.toolTipGenerator = null;\n        this.urlGenerator = null;\n        this.legendLabelGenerator = new org.jfree.chart.labels.StandardPieSectionLabelGenerator();\n        this.legendLabelToolTipGenerator = null;\n        this.legendLabelURLGenerator = null;\n        this.legendItemShape = Plot.DEFAULT_LEGEND_ITEM_CIRCLE;\n        this.ignoreNullValues = false;\n        this.ignoreZeroValues = false;\n    }\n\n    public org.jfree.data.general.PieDataset getDataset() {\n        return this.dataset;\n    }\n\n    public void setDataset(org.jfree.data.general.PieDataset dataset) {\n        org.jfree.data.general.PieDataset existing = this.dataset;\n        if (existing != null) {\n            existing.removeChangeListener(this);\n        }\n        this.dataset = dataset;\n        if (dataset != null) {\n            setDatasetGroup(dataset.getGroup());\n            dataset.addChangeListener(this);\n        }\n        org.jfree.data.general.DatasetChangeEvent event = new org.jfree.data.general.DatasetChangeEvent(this, dataset);\n        datasetChanged(event);\n    }\n\n    public int getPieIndex() {\n        return this.pieIndex;\n    }\n\n    public void setPieIndex(int index) {\n        this.pieIndex = index;\n    }\n\n    public double getStartAngle() {\n        return this.interiorGap;\n    }\n\n    public void setStartAngle(double angle) {\n        this.startAngle = angle;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.Rotation getDirection() {\n        return this.direction;\n    }\n\n    public void setDirection(org.jfree.chart.util.Rotation direction) {\n        if (direction == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'direction' argument.\");\n        }\n        this.direction = direction;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getInteriorGap() {\n        return this.interiorGap;\n    }\n\n    public void setInteriorGap(double percent) {\n        if ((percent < 0.0) || (percent > org.jfree.chart.plot.PiePlot.MAX_INTERIOR_GAP)) {\n            throw new java.lang.IllegalArgumentException((\"Invalid 'percent' (\" + percent) + \") argument.\");\n        }\n        if (this.interiorGap != percent) {\n            this.interiorGap = percent;\n            notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n        }\n    }\n\n    public boolean isCircular() {\n        return this.circular;\n    }\n\n    public void setCircular(boolean flag) {\n        setCircular(flag, true);\n    }\n\n    public void setCircular(boolean circular, boolean notify) {\n        this.circular = circular;\n        if (notify) {\n            notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n        }\n    }\n\n    public boolean getIgnoreNullValues() {\n        return this.ignoreNullValues;\n    }\n\n    public void setIgnoreNullValues(boolean flag) {\n        this.ignoreNullValues = flag;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getIgnoreZeroValues() {\n        return this.ignoreZeroValues;\n    }\n\n    public void setIgnoreZeroValues(boolean flag) {\n        this.ignoreZeroValues = flag;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Paint lookupSectionPaint(java.lang.Comparable key) {\n        return lookupSectionPaint(key, false);\n    }\n\n    protected java.awt.Paint lookupSectionPaint(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Paint result = null;\n        result = this.sectionPaintMap.getPaint(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextPaint();\n                this.sectionPaintMap.put(key, result);\n            } else {\n                result = this.baseSectionPaint;\n            }\n        } else {\n            result = this.baseSectionPaint;\n        }\n        return result;\n    }\n\n    protected java.lang.Comparable getSectionKey(int section) {\n        java.lang.Comparable key = null;\n        if (this.dataset != null) {\n            if ((section >= 0) && (section < this.dataset.getItemCount())) {\n                key = this.dataset.getKey(section);\n            }\n        }\n        if (key == null) {\n            key = new java.lang.Integer(section);\n        }\n        return key;\n    }\n\n    public java.awt.Paint getSectionPaint(java.lang.Comparable key) {\n        return this.sectionPaintMap.getPaint(key);\n    }\n\n    public void setSectionPaint(java.lang.Comparable key, java.awt.Paint paint) {\n        this.sectionPaintMap.put(key, paint);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getBaseSectionPaint() {\n        return this.baseSectionPaint;\n    }\n\n    public void setBaseSectionPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.baseSectionPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getSectionOutlinesVisible() {\n        return this.sectionOutlinesVisible;\n    }\n\n    public void setSectionOutlinesVisible(boolean visible) {\n        this.sectionOutlinesVisible = visible;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable key) {\n        return lookupSectionOutlinePaint(key, false);\n    }\n\n    protected java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Paint result = null;\n        result = this.sectionOutlinePaintMap.getPaint(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextOutlinePaint();\n                this.sectionOutlinePaintMap.put(key, result);\n            } else {\n                result = this.baseSectionOutlinePaint;\n            }\n        } else {\n            result = this.baseSectionOutlinePaint;\n        }\n        return result;\n    }\n\n    public java.awt.Paint getSectionOutlinePaint(java.lang.Comparable key) {\n        return this.sectionOutlinePaintMap.getPaint(key);\n    }\n\n    public void setSectionOutlinePaint(java.lang.Comparable key, java.awt.Paint paint) {\n        this.sectionOutlinePaintMap.put(key, paint);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getBaseSectionOutlinePaint() {\n        return this.baseSectionOutlinePaint;\n    }\n\n    public void setBaseSectionOutlinePaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.baseSectionOutlinePaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable key) {\n        return lookupSectionOutlineStroke(key, false);\n    }\n\n    protected java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Stroke result = null;\n        result = this.sectionOutlineStrokeMap.getStroke(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextOutlineStroke();\n                this.sectionOutlineStrokeMap.put(key, result);\n            } else {\n                result = this.baseSectionOutlineStroke;\n            }\n        } else {\n            result = this.baseSectionOutlineStroke;\n        }\n        return result;\n    }\n\n    public java.awt.Stroke getSectionOutlineStroke(java.lang.Comparable key) {\n        return this.sectionOutlineStrokeMap.getStroke(key);\n    }\n\n    public void setSectionOutlineStroke(java.lang.Comparable key, java.awt.Stroke stroke) {\n        this.sectionOutlineStrokeMap.put(key, stroke);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getBaseSectionOutlineStroke() {\n        return this.baseSectionOutlineStroke;\n    }\n\n    public void setBaseSectionOutlineStroke(java.awt.Stroke stroke) {\n        if (stroke == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        this.baseSectionOutlineStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getShadowPaint() {\n        return this.shadowPaint;\n    }\n\n    public void setShadowPaint(java.awt.Paint paint) {\n        this.shadowPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getShadowXOffset() {\n        return this.shadowXOffset;\n    }\n\n    public void setShadowXOffset(double offset) {\n        this.shadowXOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getShadowYOffset() {\n        return this.shadowYOffset;\n    }\n\n    public void setShadowYOffset(double offset) {\n        this.shadowYOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getExplodePercent(java.lang.Comparable key) {\n        double result = 0.0;\n        if (this.explodePercentages != null) {\n            java.lang.Number percent = ((java.lang.Number) (this.explodePercentages.get(key)));\n            if (percent != null) {\n                result = percent.doubleValue();\n            }\n        }\n        return result;\n    }\n\n    public void setExplodePercent(java.lang.Comparable key, double percent) {\n        if (key == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        if (this.explodePercentages == null) {\n            this.explodePercentages = new java.util.TreeMap();\n        }\n        this.explodePercentages.put(key, new java.lang.Double(percent));\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        java.util.Iterator iterator = this.dataset.getKeys().iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            java.lang.Number explode = ((java.lang.Number) (this.explodePercentages.get(key)));\n            if (explode != null) {\n                result = java.lang.Math.max(result, explode.doubleValue());\n            }\n        } \n        return result;\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLabelGenerator() {\n        return this.labelGenerator;\n    }\n\n    public void setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        this.labelGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getLabelGap() {\n        return this.labelGap;\n    }\n\n    public void setLabelGap(double gap) {\n        this.labelGap = gap;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMaximumLabelWidth() {\n        return this.maximumLabelWidth;\n    }\n\n    public void setMaximumLabelWidth(double width) {\n        this.maximumLabelWidth = width;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getLabelLinksVisible() {\n        return this.labelLinksVisible;\n    }\n\n    public void setLabelLinksVisible(boolean visible) {\n        this.labelLinksVisible = visible;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getLabelLinkMargin() {\n        return this.startAngle;\n    }\n\n    public void setLabelLinkMargin(double margin) {\n        this.labelLinkMargin = margin;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelLinkPaint() {\n        return this.labelLinkPaint;\n    }\n\n    public void setLabelLinkPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.labelLinkPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getLabelLinkStroke() {\n        return this.labelLinkStroke;\n    }\n\n    public void setLabelLinkStroke(java.awt.Stroke stroke) {\n        if (stroke == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        this.labelLinkStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Font getLabelFont() {\n        return this.labelFont;\n    }\n\n    public void setLabelFont(java.awt.Font font) {\n        if (font == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'font' argument.\");\n        }\n        this.labelFont = font;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelPaint() {\n        return this.labelPaint;\n    }\n\n    public void setLabelPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.labelPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelBackgroundPaint() {\n        return this.labelBackgroundPaint;\n    }\n\n    public void setLabelBackgroundPaint(java.awt.Paint paint) {\n        this.labelBackgroundPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelOutlinePaint() {\n        return this.labelOutlinePaint;\n    }\n\n    public void setLabelOutlinePaint(java.awt.Paint paint) {\n        this.labelOutlinePaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getLabelOutlineStroke() {\n        return this.labelOutlineStroke;\n    }\n\n    public void setLabelOutlineStroke(java.awt.Stroke stroke) {\n        this.labelOutlineStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelShadowPaint() {\n        return this.labelShadowPaint;\n    }\n\n    public void setLabelShadowPaint(java.awt.Paint paint) {\n        this.labelShadowPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.RectangleInsets getLabelPadding() {\n        return this.labelPadding;\n    }\n\n    public void setLabelPadding(org.jfree.chart.util.RectangleInsets padding) {\n        if (padding == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'padding' argument.\");\n        }\n        this.labelPadding = padding;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getSimpleLabels() {\n        return this.simpleLabels;\n    }\n\n    public void setSimpleLabels(boolean simple) {\n        this.simpleLabels = simple;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.RectangleInsets getSimpleLabelOffset() {\n        return this.simpleLabelOffset;\n    }\n\n    public void setSimpleLabelOffset(org.jfree.chart.util.RectangleInsets offset) {\n        if (offset == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'offset' argument.\");\n        }\n        this.simpleLabelOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.plot.AbstractPieLabelDistributor getLabelDistributor() {\n        return this.labelDistributor;\n    }\n\n    public void setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor distributor) {\n        if (distributor == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'distributor' argument.\");\n        }\n        this.labelDistributor = distributor;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieToolTipGenerator getToolTipGenerator() {\n        return this.toolTipGenerator;\n    }\n\n    public void setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator generator) {\n        this.toolTipGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.urls.PieURLGenerator getURLGenerator() {\n        return this.urlGenerator;\n    }\n\n    public void setURLGenerator(org.jfree.chart.urls.PieURLGenerator generator) {\n        this.urlGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMinimumArcAngleToDraw() {\n        return this.minimumArcAngleToDraw;\n    }\n\n    public void setMinimumArcAngleToDraw(double angle) {\n        this.minimumArcAngleToDraw = angle;\n    }\n\n    public java.awt.Shape getLegendItemShape() {\n        return this.legendItemShape;\n    }\n\n    public void setLegendItemShape(java.awt.Shape shape) {\n        if (shape == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'shape' argument.\");\n        }\n        this.legendItemShape = shape;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLegendLabelGenerator() {\n        return this.legendLabelGenerator;\n    }\n\n    public void setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        if (generator == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'generator' argument.\");\n        }\n        this.legendLabelGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLegendLabelToolTipGenerator() {\n        return this.legendLabelToolTipGenerator;\n    }\n\n    public void setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        this.legendLabelToolTipGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.urls.PieURLGenerator getLegendLabelURLGenerator() {\n        return this.legendLabelURLGenerator;\n    }\n\n    public void setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator generator) {\n        this.legendLabelURLGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.plot.PiePlot plot, java.lang.Integer index, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.plot.PiePlotState state = new org.jfree.chart.plot.PiePlotState(info);\n        state.setPassesRequired(2);\n        state.setTotal(org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n    }\n\n    public void draw(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.awt.geom.Point2D anchor, org.jfree.chart.plot.PlotState parentState, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.util.RectangleInsets insets = getInsets();\n        insets.trim(area);\n        if (info != null) {\n            info.setPlotArea(area);\n            info.setDataArea(area);\n        }\n        drawBackground(g2, area);\n        drawOutline(g2, area);\n        java.awt.Shape savedClip = g2.getClip();\n        g2.clip(area);\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getForegroundAlpha()));\n        if (!org.jfree.data.general.DatasetUtilities.isEmptyOrNull(this.dataset)) {\n            drawPie(g2, area, info);\n        } else {\n            drawNoDataMessage(g2, area);\n        }\n        g2.setClip(savedClip);\n        g2.setComposite(originalComposite);\n        drawOutline(g2, area);\n    }\n\n    protected void drawPie(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.plot.PiePlotState state = initialise(g2, plotArea, this, null, info);\n        double labelReserve = 0.0;\n        if ((this.labelGenerator != null) && (!this.simpleLabels)) {\n            labelReserve = this.labelGap + this.maximumLabelWidth;\n        }\n        double gapHorizontal = (plotArea.getWidth() * (this.interiorGap + labelReserve)) * 2.0;\n        double gapVertical = (plotArea.getHeight() * this.interiorGap) * 2.0;\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_INTERIOR) {\n            double hGap = plotArea.getWidth() * this.interiorGap;\n            double vGap = plotArea.getHeight() * this.interiorGap;\n            double igx1 = plotArea.getX() + hGap;\n            double igx2 = plotArea.getMaxX() - hGap;\n            double igy1 = plotArea.getY() + vGap;\n            double igy2 = plotArea.getMaxY() - vGap;\n            g2.setPaint(java.awt.Color.gray);\n            g2.draw(new java.awt.geom.Rectangle2D.Double(igx1, igy1, igx2 - igx1, igy2 - igy1));\n        }\n        double linkX = plotArea.getX() + (gapHorizontal / 2);\n        double linkY = plotArea.getY() + (gapVertical / 2);\n        double linkW = plotArea.getWidth() - gapHorizontal;\n        double linkH = plotArea.getHeight() - gapVertical;\n        if (this.circular) {\n            double min = java.lang.Math.min(linkW, linkH) / 2;\n            linkX = (((linkX + linkX) + linkW) / 2) - min;\n            linkY = (((linkY + linkY) + linkH) / 2) - min;\n            linkW = 2 * min;\n            linkH = 2 * min;\n        }\n        java.awt.geom.Rectangle2D linkArea = new java.awt.geom.Rectangle2D.Double(linkX, linkY, linkW, linkH);\n        state.setLinkArea(linkArea);\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_LINK_AREA) {\n            g2.setPaint(java.awt.Color.blue);\n            g2.draw(linkArea);\n            g2.setPaint(java.awt.Color.yellow);\n            g2.draw(new java.awt.geom.Ellipse2D.Double(linkArea.getX(), linkArea.getY(), linkArea.getWidth(), linkArea.getHeight()));\n        }\n        double lm = 0.0;\n        if (!this.simpleLabels) {\n            lm = this.labelLinkMargin;\n        }\n        double hh = (linkArea.getWidth() * lm) * 2.0;\n        double vv = (linkArea.getHeight() * lm) * 2.0;\n        java.awt.geom.Rectangle2D explodeArea = new java.awt.geom.Rectangle2D.Double(linkX + (hh / 2.0), linkY + (vv / 2.0), linkW - hh, linkH - vv);\n        state.setExplodedPieArea(explodeArea);\n        double maximumExplodePercent = getMaximumExplodePercent();\n        double percent = maximumExplodePercent / (1.0 + maximumExplodePercent);\n        double h1 = explodeArea.getWidth() * percent;\n        double v1 = explodeArea.getHeight() * percent;\n        java.awt.geom.Rectangle2D pieArea = new java.awt.geom.Rectangle2D.Double(explodeArea.getX() + (h1 / 2.0), explodeArea.getY() + (v1 / 2.0), explodeArea.getWidth() - h1, explodeArea.getHeight() - v1);\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_PIE_AREA) {\n            g2.setPaint(java.awt.Color.green);\n            g2.draw(pieArea);\n        }\n        state.setPieArea(pieArea);\n        state.setPieCenterX(pieArea.getCenterX());\n        state.setPieCenterY(pieArea.getCenterY());\n        state.setPieWRadius(pieArea.getWidth() / 2.0);\n        state.setPieHRadius(pieArea.getHeight() / 2.0);\n        if ((this.dataset != null) && (this.dataset.getKeys().size() > 0)) {\n            java.util.List keys = this.dataset.getKeys();\n            double totalValue = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(this.dataset);\n            int passesRequired = state.getPassesRequired();\n            for (int pass = 0; pass < passesRequired; pass++) {\n                double runningTotal = 0.0;\n                for (int section = 0; section < keys.size(); section++) {\n                    java.lang.Number n = this.dataset.getValue(section);\n                    if (n != null) {\n                        double value = n.doubleValue();\n                        if (value > 0.0) {\n                            runningTotal += value;\n                            drawItem(g2, section, explodeArea, state, pass);\n                        }\n                    }\n                }\n            }\n            if (this.simpleLabels) {\n                drawSimpleLabels(g2, keys, totalValue, plotArea, linkArea, state);\n            } else {\n                drawLabels(g2, keys, totalValue, plotArea, linkArea, state);\n            }\n        } else {\n            drawNoDataMessage(g2, plotArea);\n        }\n    }\n\n    protected void drawItem(java.awt.Graphics2D g2, int section, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PiePlotState state, int currentPass) {\n        java.lang.Number n = this.dataset.getValue(section);\n        if (n == null) {\n            return;\n        }\n        double value = n.doubleValue();\n        double angle1 = 0.0;\n        double angle2 = 0.0;\n        if (this.direction == org.jfree.chart.util.Rotation.CLOCKWISE) {\n            angle1 = state.getLatestAngle();\n            angle2 = angle1 - ((value / state.getTotal()) * 360.0);\n        } else if (this.direction == org.jfree.chart.util.Rotation.ANTICLOCKWISE) {\n            angle1 = state.getLatestAngle();\n            angle2 = angle1 + ((value / state.getTotal()) * 360.0);\n        } else {\n            throw new java.lang.IllegalStateException(\"Rotation type not recognised.\");\n        }\n        double angle = angle2 - angle1;\n        if (java.lang.Math.abs(angle) > getMinimumArcAngleToDraw()) {\n            double ep = 0.0;\n            double mep = getMaximumExplodePercent();\n            if (mep > 0.0) {\n                ep = getExplodePercent(getSectionKey(section)) / mep;\n            }\n            java.awt.geom.Rectangle2D arcBounds = getArcBounds(state.getPieArea(), state.getExplodedPieArea(), angle1, angle, ep);\n            java.awt.geom.Arc2D.Double arc = new java.awt.geom.Arc2D.Double(arcBounds, angle1, angle, java.awt.geom.Arc2D.PIE);\n            if (currentPass == 0) {\n                if (this.shadowPaint != null) {\n                    java.awt.Shape shadowArc = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(arc, ((float) (this.shadowXOffset)), ((float) (this.shadowYOffset)));\n                    g2.setPaint(this.shadowPaint);\n                    g2.fill(shadowArc);\n                }\n            } else if (currentPass == 1) {\n                java.lang.Comparable key = getSectionKey(section);\n                java.awt.Paint paint = lookupSectionPaint(key, true);\n                g2.setPaint(paint);\n                g2.fill(arc);\n                java.awt.Paint outlinePaint = lookupSectionOutlinePaint(key);\n                java.awt.Stroke outlineStroke = lookupSectionOutlineStroke(key);\n                if (this.sectionOutlinesVisible) {\n                    g2.setPaint(outlinePaint);\n                    g2.setStroke(outlineStroke);\n                    g2.draw(arc);\n                }\n                if (state.getInfo() != null) {\n                    org.jfree.chart.entity.EntityCollection entities = state.getEntityCollection();\n                    if (entities != null) {\n                        java.lang.String tip = null;\n                        if (this.toolTipGenerator != null) {\n                            tip = this.toolTipGenerator.generateToolTip(this.dataset, key);\n                        }\n                        java.lang.String url = null;\n                        if (this.urlGenerator != null) {\n                            url = this.urlGenerator.generateURL(this.dataset, key, this.pieIndex);\n                        }\n                        org.jfree.chart.entity.PieSectionEntity entity = new org.jfree.chart.entity.PieSectionEntity(arc, this.dataset, this.pieIndex, section, key, tip, url);\n                        entities.add(entity);\n                    }\n                }\n            }\n        }\n        state.setLatestAngle(angle2);\n    }\n\n    protected void drawSimpleLabels(java.awt.Graphics2D g2, java.util.List keys, double totalValue, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D pieArea, org.jfree.chart.plot.PiePlotState state) {\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0F));\n        org.jfree.chart.util.RectangleInsets labelInsets = new org.jfree.chart.util.RectangleInsets(org.jfree.chart.util.UnitType.RELATIVE, 0.18, 0.18, 0.18, 0.18);\n        java.awt.geom.Rectangle2D labelsArea = labelInsets.createInsetRectangle(pieArea);\n        double runningTotal = 0.0;\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            boolean include = true;\n            double v = 0.0;\n            java.lang.Number n = getDataset().getValue(key);\n            if (n == null) {\n                include = !getIgnoreNullValues();\n            } else {\n                v = n.doubleValue();\n                include = (getIgnoreZeroValues()) ? v > 0.0 : v >= 0.0;\n            }\n            if (include) {\n                runningTotal = runningTotal + v;\n                double mid = getStartAngle() + ((getDirection().getFactor() * ((runningTotal - (v / 2.0)) * 360)) / totalValue);\n                java.awt.geom.Arc2D arc = new java.awt.geom.Arc2D.Double(labelsArea, getStartAngle(), mid - getStartAngle(), java.awt.geom.Arc2D.OPEN);\n                int x = ((int) (arc.getEndPoint().getX()));\n                int y = ((int) (arc.getEndPoint().getY()));\n                org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator = getLabelGenerator();\n                if (labelGenerator == null) {\n                    continue;\n                }\n                java.lang.String label = labelGenerator.generateSectionLabel(this.dataset, key);\n                if (label == null) {\n                    continue;\n                }\n                g2.setFont(this.labelFont);\n                java.awt.FontMetrics fm = g2.getFontMetrics();\n                java.awt.geom.Rectangle2D bounds = org.jfree.chart.text.TextUtilities.getTextBounds(label, g2, fm);\n                java.awt.geom.Rectangle2D out = this.labelPadding.createOutsetRectangle(bounds);\n                java.awt.Shape bg = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(out, x - bounds.getCenterX(), y - bounds.getCenterY());\n                if (this.labelShadowPaint != null) {\n                    java.awt.Shape shadow = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(bg, this.shadowXOffset, this.shadowYOffset);\n                    g2.setPaint(this.labelShadowPaint);\n                    g2.fill(shadow);\n                }\n                if (this.labelBackgroundPaint != null) {\n                    g2.setPaint(this.labelBackgroundPaint);\n                    g2.fill(bg);\n                }\n                if ((this.labelOutlinePaint != null) && (this.labelOutlineStroke != null)) {\n                    g2.setPaint(this.labelOutlinePaint);\n                    g2.setStroke(this.labelOutlineStroke);\n                    g2.draw(bg);\n                }\n                g2.setPaint(this.labelPaint);\n                g2.setFont(this.labelFont);\n                org.jfree.chart.text.TextUtilities.drawAlignedString(getLabelGenerator().generateSectionLabel(getDataset(), key), g2, x, y, TextAnchor.CENTER);\n            }\n        } \n        g2.setComposite(originalComposite);\n    }\n\n    protected void drawLabels(java.awt.Graphics2D g2, java.util.List keys, double totalValue, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, org.jfree.chart.plot.PiePlotState state) {\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0F));\n        org.jfree.data.DefaultKeyedValues leftKeys = new org.jfree.data.DefaultKeyedValues();\n        org.jfree.data.DefaultKeyedValues rightKeys = new org.jfree.data.DefaultKeyedValues();\n        double runningTotal = 0.0;\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            boolean include = true;\n            double v = 0.0;\n            java.lang.Number n = this.dataset.getValue(key);\n            if (n == null) {\n                include = !this.ignoreNullValues;\n            } else {\n                v = n.doubleValue();\n                include = (this.ignoreZeroValues) ? v > 0.0 : v >= 0.0;\n            }\n            if (include) {\n                runningTotal = runningTotal + v;\n                double mid = this.startAngle + ((this.direction.getFactor() * ((runningTotal - (v / 2.0)) * 360)) / totalValue);\n                if (java.lang.Math.cos(java.lang.Math.toRadians(mid)) < 0.0) {\n                    leftKeys.addValue(key, new java.lang.Double(mid));\n                } else {\n                    rightKeys.addValue(key, new java.lang.Double(mid));\n                }\n            }\n        } \n        g2.setFont(getLabelFont());\n        double marginX = plotArea.getX() + (this.interiorGap * plotArea.getWidth());\n        double gap = plotArea.getWidth() * this.labelGap;\n        double ww = (linkArea.getX() - gap) - marginX;\n        float labelWidth = ((float) (this.labelPadding.trimWidth(ww)));\n        if (this.labelGenerator != null) {\n            drawLeftLabels(leftKeys, g2, plotArea, linkArea, labelWidth, state);\n            drawRightLabels(rightKeys, g2, plotArea, linkArea, labelWidth, state);\n        }\n        g2.setComposite(originalComposite);\n    }\n\n    protected void drawLeftLabels(org.jfree.data.KeyedValues leftKeys, java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, float maxLabelWidth, org.jfree.chart.plot.PiePlotState state) {\n        this.labelDistributor.clear();\n        double lGap = plotArea.getWidth() * this.labelGap;\n        double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;\n        for (int i = 0; i < leftKeys.getItemCount(); i++) {\n            java.lang.String label = this.labelGenerator.generateSectionLabel(this.dataset, leftKeys.getKey(i));\n            if (label != null) {\n                org.jfree.chart.text.TextBlock block = org.jfree.chart.text.TextUtilities.createTextBlock(label, this.labelFont, this.labelPaint, maxLabelWidth, new org.jfree.chart.text.G2TextMeasurer(g2));\n                org.jfree.chart.text.TextBox labelBox = new org.jfree.chart.text.TextBox(block);\n                labelBox.setBackgroundPaint(this.labelBackgroundPaint);\n                labelBox.setOutlinePaint(this.labelOutlinePaint);\n                labelBox.setOutlineStroke(this.labelOutlineStroke);\n                labelBox.setShadowPaint(this.labelShadowPaint);\n                labelBox.setInteriorGap(this.labelPadding);\n                double theta = java.lang.Math.toRadians(leftKeys.getValue(i).doubleValue());\n                double baseY = state.getPieCenterY() - (java.lang.Math.sin(theta) * verticalLinkRadius);\n                double hh = labelBox.getHeight(g2);\n                this.labelDistributor.addPieLabelRecord(new org.jfree.chart.plot.PieLabelRecord(leftKeys.getKey(i), theta, baseY, labelBox, hh, (lGap / 2.0) + ((lGap / 2.0) * (-java.lang.Math.cos(theta))), 0.9 + getExplodePercent(leftKeys.getKey(i))));\n            }\n        }\n        this.labelDistributor.distributeLabels(plotArea.getMinY(), plotArea.getHeight());\n        for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {\n            drawLeftLabel(g2, state, this.labelDistributor.getPieLabelRecord(i));\n        }\n    }\n\n    protected void drawRightLabels(org.jfree.data.KeyedValues keys, java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, float maxLabelWidth, org.jfree.chart.plot.PiePlotState state) {\n        this.labelDistributor.clear();\n        double lGap = plotArea.getWidth() * this.labelGap;\n        double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;\n        for (int i = 0; i < keys.getItemCount(); i++) {\n            java.lang.String label = this.labelGenerator.generateSectionLabel(this.dataset, keys.getKey(i));\n            if (label != null) {\n                org.jfree.chart.text.TextBlock block = org.jfree.chart.text.TextUtilities.createTextBlock(label, this.labelFont, this.labelPaint, maxLabelWidth, new org.jfree.chart.text.G2TextMeasurer(g2));\n                org.jfree.chart.text.TextBox labelBox = new org.jfree.chart.text.TextBox(block);\n                labelBox.setBackgroundPaint(this.labelBackgroundPaint);\n                labelBox.setOutlinePaint(this.labelOutlinePaint);\n                labelBox.setOutlineStroke(this.labelOutlineStroke);\n                labelBox.setShadowPaint(this.labelShadowPaint);\n                labelBox.setInteriorGap(this.labelPadding);\n                double theta = java.lang.Math.toRadians(keys.getValue(i).doubleValue());\n                double baseY = state.getPieCenterY() - (java.lang.Math.sin(theta) * verticalLinkRadius);\n                double hh = labelBox.getHeight(g2);\n                this.labelDistributor.addPieLabelRecord(new org.jfree.chart.plot.PieLabelRecord(keys.getKey(i), theta, baseY, labelBox, hh, (lGap / 2.0) + ((lGap / 2.0) * java.lang.Math.cos(theta)), 0.9 + getExplodePercent(keys.getKey(i))));\n            }\n        }\n        this.labelDistributor.distributeLabels(plotArea.getMinY(), plotArea.getHeight());\n        for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {\n            drawRightLabel(g2, state, this.labelDistributor.getPieLabelRecord(i));\n        }\n    }\n\n    public org.jfree.chart.LegendItemCollection getLegendItems() {\n        org.jfree.chart.LegendItemCollection result = new org.jfree.chart.LegendItemCollection();\n        if (this.dataset == null) {\n            return result;\n        }\n        java.util.List keys = this.dataset.getKeys();\n        int section = 0;\n        java.awt.Shape shape = getLegendItemShape();\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            java.lang.Number n = this.dataset.getValue(key);\n            boolean include = true;\n            if (n == null) {\n                include = !this.ignoreNullValues;\n            } else {\n                double v = n.doubleValue();\n                if (v == 0.0) {\n                    include = !this.ignoreZeroValues;\n                } else {\n                    include = v > 0.0;\n                }\n            }\n            if (include) {\n                java.lang.String label = this.legendLabelGenerator.generateSectionLabel(this.dataset, key);\n                if (label != null) {\n                    java.lang.String description = label;\n                    java.lang.String toolTipText = null;\n                    if (this.legendLabelToolTipGenerator != null) {\n                        toolTipText = this.legendLabelToolTipGenerator.generateSectionLabel(this.dataset, key);\n                    }\n                    java.lang.String urlText = null;\n                    if (this.legendLabelURLGenerator != null) {\n                        urlText = this.legendLabelURLGenerator.generateURL(this.dataset, key, this.pieIndex);\n                    }\n                    java.awt.Paint paint = lookupSectionPaint(key, true);\n                    java.awt.Paint outlinePaint = lookupSectionOutlinePaint(key);\n                    java.awt.Stroke outlineStroke = lookupSectionOutlineStroke(key);\n                    org.jfree.chart.LegendItem item = new org.jfree.chart.LegendItem(label, description, toolTipText, urlText, true, shape, true, paint, true, outlinePaint, outlineStroke, false, new java.awt.geom.Line2D.Float(), new java.awt.BasicStroke(), java.awt.Color.black);\n                    item.setDataset(getDataset());\n                    result.add(item);\n                }\n                section++;\n            } else {\n                section++;\n            }\n        } \n        return result;\n    }\n\n    public java.lang.String getPlotType() {\n        return org.jfree.chart.plot.PiePlot.localizationResources.getString(\"Pie_Plot\");\n    }\n\n    protected java.awt.geom.Rectangle2D getArcBounds(java.awt.geom.Rectangle2D unexploded, java.awt.geom.Rectangle2D exploded, double angle, double extent, double explodePercent) {\n        if (explodePercent == 0.0) {\n            return unexploded;\n        } else {\n            java.awt.geom.Arc2D arc1 = new java.awt.geom.Arc2D.Double(unexploded, angle, extent / 2, java.awt.geom.Arc2D.OPEN);\n            java.awt.geom.Point2D point1 = arc1.getEndPoint();\n            java.awt.geom.Arc2D.Double arc2 = new java.awt.geom.Arc2D.Double(exploded, angle, extent / 2, java.awt.geom.Arc2D.OPEN);\n            java.awt.geom.Point2D point2 = arc2.getEndPoint();\n            double deltaX = (point1.getX() - point2.getX()) * explodePercent;\n            double deltaY = (point1.getY() - point2.getY()) * explodePercent;\n            return new java.awt.geom.Rectangle2D.Double(unexploded.getX() - deltaX, unexploded.getY() - deltaY, unexploded.getWidth(), unexploded.getHeight());\n        }\n    }\n\n    protected void drawLeftLabel(java.awt.Graphics2D g2, org.jfree.chart.plot.PiePlotState state, org.jfree.chart.plot.PieLabelRecord record) {\n        double anchorX = state.getLinkArea().getMinX();\n        double targetX = anchorX - record.getGap();\n        double targetY = record.getAllocatedY();\n        if (this.labelLinksVisible) {\n            double theta = record.getAngle();\n            double linkX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getPieWRadius()) * record.getLinkPercent());\n            double linkY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getPieHRadius()) * record.getLinkPercent());\n            double elbowX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getLinkArea().getWidth()) / 2.0);\n            double elbowY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getLinkArea().getHeight()) / 2.0);\n            double anchorY = elbowY;\n            g2.setPaint(this.labelLinkPaint);\n            g2.setStroke(this.labelLinkStroke);\n            g2.draw(new java.awt.geom.Line2D.Double(linkX, linkY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, targetX, targetY));\n        }\n        org.jfree.chart.text.TextBox tb = record.getLabel();\n        tb.draw(g2, ((float) (targetX)), ((float) (targetY)), RectangleAnchor.RIGHT);\n    }\n\n    protected void drawRightLabel(java.awt.Graphics2D g2, org.jfree.chart.plot.PiePlotState state, org.jfree.chart.plot.PieLabelRecord record) {\n        double anchorX = state.getLinkArea().getMaxX();\n        double targetX = anchorX + record.getGap();\n        double targetY = record.getAllocatedY();\n        if (this.labelLinksVisible) {\n            double theta = record.getAngle();\n            double linkX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getPieWRadius()) * record.getLinkPercent());\n            double linkY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getPieHRadius()) * record.getLinkPercent());\n            double elbowX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getLinkArea().getWidth()) / 2.0);\n            double elbowY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getLinkArea().getHeight()) / 2.0);\n            double anchorY = elbowY;\n            g2.setPaint(this.labelLinkPaint);\n            g2.setStroke(this.labelLinkStroke);\n            g2.draw(new java.awt.geom.Line2D.Double(linkX, linkY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, targetX, targetY));\n        }\n        org.jfree.chart.text.TextBox tb = record.getLabel();\n        tb.draw(g2, ((float) (targetX)), ((float) (targetY)), RectangleAnchor.LEFT);\n    }\n\n    public boolean equals(java.lang.Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof org.jfree.chart.plot.PiePlot)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        org.jfree.chart.plot.PiePlot that = ((org.jfree.chart.plot.PiePlot) (obj));\n        if (this.pieIndex != that.pieIndex) {\n            return false;\n        }\n        if (this.interiorGap != that.interiorGap) {\n            return false;\n        }\n        if (this.circular != that.circular) {\n            return false;\n        }\n        if (this.startAngle != that.startAngle) {\n            return false;\n        }\n        if (this.direction != that.direction) {\n            return false;\n        }\n        if (this.ignoreZeroValues != that.ignoreZeroValues) {\n            return false;\n        }\n        if (this.ignoreNullValues != that.ignoreNullValues) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionPaintMap, that.sectionPaintMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.baseSectionPaint, that.baseSectionPaint)) {\n            return false;\n        }\n        if (this.sectionOutlinesVisible != that.sectionOutlinesVisible) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionOutlinePaintMap, that.sectionOutlinePaintMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.baseSectionOutlinePaint, that.baseSectionOutlinePaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionOutlineStrokeMap, that.sectionOutlineStrokeMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.baseSectionOutlineStroke, that.baseSectionOutlineStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (!(this.shadowXOffset == that.shadowXOffset)) {\n            return false;\n        }\n        if (!(this.shadowYOffset == that.shadowYOffset)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.explodePercentages, that.explodePercentages)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelGenerator, that.labelGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelBackgroundPaint, that.labelBackgroundPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelOutlinePaint, that.labelOutlinePaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelOutlineStroke, that.labelOutlineStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelShadowPaint, that.labelShadowPaint)) {\n            return false;\n        }\n        if (this.simpleLabels != that.simpleLabels) {\n            return false;\n        }\n        if (!this.simpleLabelOffset.equals(that.simpleLabelOffset)) {\n            return false;\n        }\n        if (!this.labelPadding.equals(that.labelPadding)) {\n            return false;\n        }\n        if (!(this.maximumLabelWidth == that.maximumLabelWidth)) {\n            return false;\n        }\n        if (!(this.labelGap == that.labelGap)) {\n            return false;\n        }\n        if (!(this.labelLinkMargin == that.labelLinkMargin)) {\n            return false;\n        }\n        if (this.labelLinksVisible != that.labelLinksVisible) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelLinkPaint, that.labelLinkPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelLinkStroke, that.labelLinkStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.toolTipGenerator, that.toolTipGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.urlGenerator, that.urlGenerator)) {\n            return false;\n        }\n        if (!(this.minimumArcAngleToDraw == that.minimumArcAngleToDraw)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ShapeUtilities.equal(this.legendItemShape, that.legendItemShape)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelGenerator, that.legendLabelGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelToolTipGenerator, that.legendLabelToolTipGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelURLGenerator, that.legendLabelURLGenerator)) {\n            return false;\n        }\n        return true;\n    }\n\n    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {\n        org.jfree.chart.plot.PiePlot clone = ((org.jfree.chart.plot.PiePlot) (super.clone()));\n        if (clone.dataset != null) {\n            clone.dataset.addChangeListener(clone);\n        }\n        if (this.urlGenerator instanceof org.jfree.chart.util.PublicCloneable) {\n            clone.urlGenerator = ((org.jfree.chart.urls.PieURLGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.urlGenerator)));\n        }\n        clone.legendItemShape = org.jfree.chart.util.ShapeUtilities.clone(this.legendItemShape);\n        if (this.legendLabelGenerator != null) {\n            clone.legendLabelGenerator = ((org.jfree.chart.labels.PieSectionLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelGenerator)));\n        }\n        if (this.legendLabelToolTipGenerator != null) {\n            clone.legendLabelToolTipGenerator = ((org.jfree.chart.labels.PieSectionLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelToolTipGenerator)));\n        }\n        if (this.legendLabelURLGenerator instanceof org.jfree.chart.util.PublicCloneable) {\n            clone.legendLabelURLGenerator = ((org.jfree.chart.urls.PieURLGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelURLGenerator)));\n        }\n        return clone;\n    }\n\n    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {\n        stream.defaultWriteObject();\n        org.jfree.chart.util.SerialUtilities.writePaint(this.baseSectionPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.baseSectionOutlinePaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.baseSectionOutlineStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.shadowPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelBackgroundPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelOutlinePaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.labelOutlineStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelShadowPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelLinkPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.labelLinkStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writeShape(this.legendItemShape, stream);\n    }\n\n    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        stream.defaultReadObject();\n        this.baseSectionPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.baseSectionOutlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.baseSectionOutlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.shadowPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelBackgroundPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelOutlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelOutlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.labelShadowPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelLinkPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelLinkStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.legendItemShape = org.jfree.chart.util.SerialUtilities.readShape(stream);\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "public double getMaximumLabelWidth() {\n    this.legendLabelURLGenerator = null;\n    return this.maximumLabelWidth;\n}",
            "src_parent": "public class PiePlot extends org.jfree.chart.plot.Plot implements java.io.Serializable , java.lang.Cloneable {\n    private static final long serialVersionUID = -795612466005590431L;\n\n    public static final double DEFAULT_INTERIOR_GAP = 0.08;\n\n    public static final double MAX_INTERIOR_GAP = 0.4;\n\n    public static final double DEFAULT_START_ANGLE = 90.0;\n\n    public static final java.awt.Font DEFAULT_LABEL_FONT = new java.awt.Font(\"SansSerif\", java.awt.Font.PLAIN, 10);\n\n    public static final java.awt.Paint DEFAULT_LABEL_PAINT = java.awt.Color.black;\n\n    public static final java.awt.Paint DEFAULT_LABEL_BACKGROUND_PAINT = new java.awt.Color(255, 255, 192);\n\n    public static final java.awt.Paint DEFAULT_LABEL_OUTLINE_PAINT = java.awt.Color.black;\n\n    public static final java.awt.Stroke DEFAULT_LABEL_OUTLINE_STROKE = new java.awt.BasicStroke(0.5F);\n\n    public static final java.awt.Paint DEFAULT_LABEL_SHADOW_PAINT = new java.awt.Color(151, 151, 151, 128);\n\n    public static final double DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW = 1.0E-5;\n\n    private org.jfree.data.general.PieDataset dataset;\n\n    private int pieIndex;\n\n    private double interiorGap;\n\n    private boolean circular;\n\n    private double startAngle;\n\n    private org.jfree.chart.util.Rotation direction;\n\n    private org.jfree.chart.PaintMap sectionPaintMap;\n\n    private transient java.awt.Paint baseSectionPaint;\n\n    private boolean sectionOutlinesVisible;\n\n    private org.jfree.chart.PaintMap sectionOutlinePaintMap;\n\n    private transient java.awt.Paint baseSectionOutlinePaint;\n\n    private org.jfree.chart.StrokeMap sectionOutlineStrokeMap;\n\n    private transient java.awt.Stroke baseSectionOutlineStroke;\n\n    private transient java.awt.Paint shadowPaint = java.awt.Color.gray;\n\n    private double shadowXOffset = 4.0F;\n\n    private double shadowYOffset = 4.0F;\n\n    private java.util.Map explodePercentages;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator;\n\n    private java.awt.Font labelFont;\n\n    private transient java.awt.Paint labelPaint;\n\n    private transient java.awt.Paint labelBackgroundPaint;\n\n    private transient java.awt.Paint labelOutlinePaint;\n\n    private transient java.awt.Stroke labelOutlineStroke;\n\n    private transient java.awt.Paint labelShadowPaint;\n\n    private boolean simpleLabels = true;\n\n    private org.jfree.chart.util.RectangleInsets labelPadding;\n\n    private org.jfree.chart.util.RectangleInsets simpleLabelOffset;\n\n    private double maximumLabelWidth = 0.14;\n\n    private double labelGap = 0.025;\n\n    private boolean labelLinksVisible;\n\n    private double labelLinkMargin = 0.025;\n\n    private transient java.awt.Paint labelLinkPaint = java.awt.Color.black;\n\n    private transient java.awt.Stroke labelLinkStroke = new java.awt.BasicStroke(0.5F);\n\n    private org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor;\n\n    private org.jfree.chart.labels.PieToolTipGenerator toolTipGenerator;\n\n    private org.jfree.chart.urls.PieURLGenerator urlGenerator;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator legendLabelGenerator;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator legendLabelToolTipGenerator;\n\n    private org.jfree.chart.urls.PieURLGenerator legendLabelURLGenerator;\n\n    private boolean ignoreNullValues;\n\n    private boolean ignoreZeroValues;\n\n    private transient java.awt.Shape legendItemShape;\n\n    private double minimumArcAngleToDraw;\n\n    protected static java.util.ResourceBundle localizationResources = java.util.ResourceBundle.getBundle(\"org.jfree.chart.plot.LocalizationBundle\");\n\n    static final boolean DEBUG_DRAW_INTERIOR = false;\n\n    static final boolean DEBUG_DRAW_LINK_AREA = false;\n\n    static final boolean DEBUG_DRAW_PIE_AREA = false;\n\n    public PiePlot() {\n        this(null);\n    }\n\n    public PiePlot(org.jfree.data.general.PieDataset dataset) {\n        super();\n        this.dataset = dataset;\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n        this.pieIndex = 0;\n        this.interiorGap = org.jfree.chart.plot.PiePlot.DEFAULT_INTERIOR_GAP;\n        this.circular = true;\n        this.startAngle = org.jfree.chart.plot.PiePlot.DEFAULT_START_ANGLE;\n        this.direction = org.jfree.chart.util.Rotation.CLOCKWISE;\n        this.minimumArcAngleToDraw = org.jfree.chart.plot.PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW;\n        this.sectionPaintMap = new org.jfree.chart.PaintMap();\n        this.baseSectionPaint = java.awt.Color.gray;\n        this.sectionOutlinesVisible = true;\n        this.sectionOutlinePaintMap = new org.jfree.chart.PaintMap();\n        this.baseSectionOutlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.sectionOutlineStrokeMap = new org.jfree.chart.StrokeMap();\n        this.baseSectionOutlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.explodePercentages = new java.util.TreeMap();\n        this.labelGenerator = new org.jfree.chart.labels.StandardPieSectionLabelGenerator();\n        this.labelFont = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT;\n        this.labelPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT;\n        this.labelBackgroundPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT;\n        this.labelOutlinePaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT;\n        this.labelOutlineStroke = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;\n        this.labelShadowPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT;\n        this.labelLinksVisible = true;\n        this.labelDistributor = new org.jfree.chart.plot.PieLabelDistributor(0);\n        this.simpleLabels = false;\n        this.simpleLabelOffset = new org.jfree.chart.util.RectangleInsets(org.jfree.chart.util.UnitType.RELATIVE, 0.18, 0.18, 0.18, 0.18);\n        this.labelPadding = new org.jfree.chart.util.RectangleInsets(2, 2, 2, 2);\n        this.toolTipGenerator = null;\n        this.urlGenerator = null;\n        this.legendLabelGenerator = new org.jfree.chart.labels.StandardPieSectionLabelGenerator();\n        this.legendLabelToolTipGenerator = null;\n        this.legendLabelURLGenerator = null;\n        this.legendItemShape = Plot.DEFAULT_LEGEND_ITEM_CIRCLE;\n        this.ignoreNullValues = false;\n        this.ignoreZeroValues = false;\n    }\n\n    public org.jfree.data.general.PieDataset getDataset() {\n        return this.dataset;\n    }\n\n    public void setDataset(org.jfree.data.general.PieDataset dataset) {\n        org.jfree.data.general.PieDataset existing = this.dataset;\n        if (existing != null) {\n            existing.removeChangeListener(this);\n        }\n        this.dataset = dataset;\n        if (dataset != null) {\n            setDatasetGroup(dataset.getGroup());\n            dataset.addChangeListener(this);\n        }\n        org.jfree.data.general.DatasetChangeEvent event = new org.jfree.data.general.DatasetChangeEvent(this, dataset);\n        datasetChanged(event);\n    }\n\n    public int getPieIndex() {\n        return this.pieIndex;\n    }\n\n    public void setPieIndex(int index) {\n        this.pieIndex = index;\n    }\n\n    public double getStartAngle() {\n        return this.interiorGap;\n    }\n\n    public void setStartAngle(double angle) {\n        this.startAngle = angle;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.Rotation getDirection() {\n        return this.direction;\n    }\n\n    public void setDirection(org.jfree.chart.util.Rotation direction) {\n        if (direction == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'direction' argument.\");\n        }\n        this.direction = direction;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getInteriorGap() {\n        return this.interiorGap;\n    }\n\n    public void setInteriorGap(double percent) {\n        if ((percent < 0.0) || (percent > org.jfree.chart.plot.PiePlot.MAX_INTERIOR_GAP)) {\n            throw new java.lang.IllegalArgumentException((\"Invalid 'percent' (\" + percent) + \") argument.\");\n        }\n        if (this.interiorGap != percent) {\n            this.interiorGap = percent;\n            notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n        }\n    }\n\n    public boolean isCircular() {\n        return this.circular;\n    }\n\n    public void setCircular(boolean flag) {\n        setCircular(flag, true);\n    }\n\n    public void setCircular(boolean circular, boolean notify) {\n        this.circular = circular;\n        if (notify) {\n            notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n        }\n    }\n\n    public boolean getIgnoreNullValues() {\n        return this.ignoreNullValues;\n    }\n\n    public void setIgnoreNullValues(boolean flag) {\n        this.ignoreNullValues = flag;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getIgnoreZeroValues() {\n        return this.ignoreZeroValues;\n    }\n\n    public void setIgnoreZeroValues(boolean flag) {\n        this.ignoreZeroValues = flag;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Paint lookupSectionPaint(java.lang.Comparable key) {\n        return lookupSectionPaint(key, false);\n    }\n\n    protected java.awt.Paint lookupSectionPaint(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Paint result = null;\n        result = this.sectionPaintMap.getPaint(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextPaint();\n                this.sectionPaintMap.put(key, result);\n            } else {\n                result = this.baseSectionPaint;\n            }\n        } else {\n            result = this.baseSectionPaint;\n        }\n        return result;\n    }\n\n    protected java.lang.Comparable getSectionKey(int section) {\n        java.lang.Comparable key = null;\n        if (this.dataset != null) {\n            if ((section >= 0) && (section < this.dataset.getItemCount())) {\n                key = this.dataset.getKey(section);\n            }\n        }\n        if (key == null) {\n            key = new java.lang.Integer(section);\n        }\n        return key;\n    }\n\n    public java.awt.Paint getSectionPaint(java.lang.Comparable key) {\n        return this.sectionPaintMap.getPaint(key);\n    }\n\n    public void setSectionPaint(java.lang.Comparable key, java.awt.Paint paint) {\n        this.sectionPaintMap.put(key, paint);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getBaseSectionPaint() {\n        return this.baseSectionPaint;\n    }\n\n    public void setBaseSectionPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.baseSectionPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getSectionOutlinesVisible() {\n        return this.sectionOutlinesVisible;\n    }\n\n    public void setSectionOutlinesVisible(boolean visible) {\n        this.sectionOutlinesVisible = visible;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable key) {\n        return lookupSectionOutlinePaint(key, false);\n    }\n\n    protected java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Paint result = null;\n        result = this.sectionOutlinePaintMap.getPaint(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextOutlinePaint();\n                this.sectionOutlinePaintMap.put(key, result);\n            } else {\n                result = this.baseSectionOutlinePaint;\n            }\n        } else {\n            result = this.baseSectionOutlinePaint;\n        }\n        return result;\n    }\n\n    public java.awt.Paint getSectionOutlinePaint(java.lang.Comparable key) {\n        return this.sectionOutlinePaintMap.getPaint(key);\n    }\n\n    public void setSectionOutlinePaint(java.lang.Comparable key, java.awt.Paint paint) {\n        this.sectionOutlinePaintMap.put(key, paint);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getBaseSectionOutlinePaint() {\n        return this.baseSectionOutlinePaint;\n    }\n\n    public void setBaseSectionOutlinePaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.baseSectionOutlinePaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable key) {\n        return lookupSectionOutlineStroke(key, false);\n    }\n\n    protected java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Stroke result = null;\n        result = this.sectionOutlineStrokeMap.getStroke(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextOutlineStroke();\n                this.sectionOutlineStrokeMap.put(key, result);\n            } else {\n                result = this.baseSectionOutlineStroke;\n            }\n        } else {\n            result = this.baseSectionOutlineStroke;\n        }\n        return result;\n    }\n\n    public java.awt.Stroke getSectionOutlineStroke(java.lang.Comparable key) {\n        return this.sectionOutlineStrokeMap.getStroke(key);\n    }\n\n    public void setSectionOutlineStroke(java.lang.Comparable key, java.awt.Stroke stroke) {\n        this.sectionOutlineStrokeMap.put(key, stroke);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getBaseSectionOutlineStroke() {\n        return this.baseSectionOutlineStroke;\n    }\n\n    public void setBaseSectionOutlineStroke(java.awt.Stroke stroke) {\n        if (stroke == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        this.baseSectionOutlineStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getShadowPaint() {\n        return this.shadowPaint;\n    }\n\n    public void setShadowPaint(java.awt.Paint paint) {\n        this.shadowPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getShadowXOffset() {\n        return this.shadowXOffset;\n    }\n\n    public void setShadowXOffset(double offset) {\n        this.shadowXOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getShadowYOffset() {\n        return this.shadowYOffset;\n    }\n\n    public void setShadowYOffset(double offset) {\n        this.shadowYOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getExplodePercent(java.lang.Comparable key) {\n        double result = 0.0;\n        if (this.explodePercentages != null) {\n            java.lang.Number percent = ((java.lang.Number) (this.explodePercentages.get(key)));\n            if (percent != null) {\n                result = percent.doubleValue();\n            }\n        }\n        return result;\n    }\n\n    public void setExplodePercent(java.lang.Comparable key, double percent) {\n        if (key == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        if (this.explodePercentages == null) {\n            this.explodePercentages = new java.util.TreeMap();\n        }\n        this.explodePercentages.put(key, new java.lang.Double(percent));\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        java.util.Iterator iterator = this.dataset.getKeys().iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            java.lang.Number explode = ((java.lang.Number) (this.explodePercentages.get(key)));\n            if (explode != null) {\n                result = java.lang.Math.max(result, explode.doubleValue());\n            }\n        } \n        return result;\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLabelGenerator() {\n        return this.labelGenerator;\n    }\n\n    public void setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        this.labelGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getLabelGap() {\n        return this.maximumLabelWidth;\n    }\n\n    public void setLabelGap(double gap) {\n        this.labelGap = gap;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMaximumLabelWidth() {\n        this.legendLabelURLGenerator = null;\n        return this.maximumLabelWidth;\n    }\n\n    public void setMaximumLabelWidth(double width) {\n        this.maximumLabelWidth = width;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getLabelLinksVisible() {\n        return this.labelLinksVisible;\n    }\n\n    public void setLabelLinksVisible(boolean visible) {\n        this.labelLinksVisible = visible;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getLabelLinkMargin() {\n        return this.startAngle;\n    }\n\n    public void setLabelLinkMargin(double margin) {\n        this.labelLinkMargin = margin;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelLinkPaint() {\n        return this.labelLinkPaint;\n    }\n\n    public void setLabelLinkPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.labelLinkPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getLabelLinkStroke() {\n        return this.labelLinkStroke;\n    }\n\n    public void setLabelLinkStroke(java.awt.Stroke stroke) {\n        if (stroke == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        this.labelLinkStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Font getLabelFont() {\n        return this.labelFont;\n    }\n\n    public void setLabelFont(java.awt.Font font) {\n        if (font == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'font' argument.\");\n        }\n        this.labelFont = font;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelPaint() {\n        return this.labelPaint;\n    }\n\n    public void setLabelPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.labelPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelBackgroundPaint() {\n        return this.labelBackgroundPaint;\n    }\n\n    public void setLabelBackgroundPaint(java.awt.Paint paint) {\n        this.labelBackgroundPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelOutlinePaint() {\n        return this.labelOutlinePaint;\n    }\n\n    public void setLabelOutlinePaint(java.awt.Paint paint) {\n        this.labelOutlinePaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getLabelOutlineStroke() {\n        return this.labelOutlineStroke;\n    }\n\n    public void setLabelOutlineStroke(java.awt.Stroke stroke) {\n        this.labelOutlineStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelShadowPaint() {\n        return this.labelShadowPaint;\n    }\n\n    public void setLabelShadowPaint(java.awt.Paint paint) {\n        this.labelShadowPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.RectangleInsets getLabelPadding() {\n        return this.labelPadding;\n    }\n\n    public void setLabelPadding(org.jfree.chart.util.RectangleInsets padding) {\n        if (padding == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'padding' argument.\");\n        }\n        this.labelPadding = padding;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getSimpleLabels() {\n        return this.simpleLabels;\n    }\n\n    public void setSimpleLabels(boolean simple) {\n        this.simpleLabels = simple;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.RectangleInsets getSimpleLabelOffset() {\n        return this.simpleLabelOffset;\n    }\n\n    public void setSimpleLabelOffset(org.jfree.chart.util.RectangleInsets offset) {\n        if (offset == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'offset' argument.\");\n        }\n        this.simpleLabelOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.plot.AbstractPieLabelDistributor getLabelDistributor() {\n        return this.labelDistributor;\n    }\n\n    public void setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor distributor) {\n        if (distributor == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'distributor' argument.\");\n        }\n        this.labelDistributor = distributor;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieToolTipGenerator getToolTipGenerator() {\n        return this.toolTipGenerator;\n    }\n\n    public void setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator generator) {\n        this.toolTipGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.urls.PieURLGenerator getURLGenerator() {\n        return this.urlGenerator;\n    }\n\n    public void setURLGenerator(org.jfree.chart.urls.PieURLGenerator generator) {\n        this.urlGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMinimumArcAngleToDraw() {\n        return this.minimumArcAngleToDraw;\n    }\n\n    public void setMinimumArcAngleToDraw(double angle) {\n        this.minimumArcAngleToDraw = angle;\n    }\n\n    public java.awt.Shape getLegendItemShape() {\n        return this.legendItemShape;\n    }\n\n    public void setLegendItemShape(java.awt.Shape shape) {\n        if (shape == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'shape' argument.\");\n        }\n        this.legendItemShape = shape;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLegendLabelGenerator() {\n        return this.legendLabelGenerator;\n    }\n\n    public void setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        if (generator == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'generator' argument.\");\n        }\n        this.legendLabelGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLegendLabelToolTipGenerator() {\n        return this.legendLabelToolTipGenerator;\n    }\n\n    public void setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        this.legendLabelToolTipGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.urls.PieURLGenerator getLegendLabelURLGenerator() {\n        return this.legendLabelURLGenerator;\n    }\n\n    public void setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator generator) {\n        this.legendLabelURLGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.plot.PiePlot plot, java.lang.Integer index, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.plot.PiePlotState state = new org.jfree.chart.plot.PiePlotState(info);\n        state.setPassesRequired(2);\n        state.setTotal(org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n    }\n\n    public void draw(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.awt.geom.Point2D anchor, org.jfree.chart.plot.PlotState parentState, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.util.RectangleInsets insets = getInsets();\n        insets.trim(area);\n        if (info != null) {\n            info.setPlotArea(area);\n            info.setDataArea(area);\n        }\n        drawBackground(g2, area);\n        drawOutline(g2, area);\n        java.awt.Shape savedClip = g2.getClip();\n        g2.clip(area);\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getForegroundAlpha()));\n        if (!org.jfree.data.general.DatasetUtilities.isEmptyOrNull(this.dataset)) {\n            drawPie(g2, area, info);\n        } else {\n            drawNoDataMessage(g2, area);\n        }\n        g2.setClip(savedClip);\n        g2.setComposite(originalComposite);\n        drawOutline(g2, area);\n    }\n\n    protected void drawPie(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.plot.PiePlotState state = initialise(g2, plotArea, this, null, info);\n        double labelReserve = 0.0;\n        if ((this.labelGenerator != null) && (!this.simpleLabels)) {\n            labelReserve = this.labelGap + this.maximumLabelWidth;\n        }\n        double gapHorizontal = (plotArea.getWidth() * (this.interiorGap + labelReserve)) * 2.0;\n        double gapVertical = (plotArea.getHeight() * this.interiorGap) * 2.0;\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_INTERIOR) {\n            double hGap = plotArea.getWidth() * this.interiorGap;\n            double vGap = plotArea.getHeight() * this.interiorGap;\n            double igx1 = plotArea.getX() + hGap;\n            double igx2 = plotArea.getMaxX() - hGap;\n            double igy1 = plotArea.getY() + vGap;\n            double igy2 = plotArea.getMaxY() - vGap;\n            g2.setPaint(java.awt.Color.gray);\n            g2.draw(new java.awt.geom.Rectangle2D.Double(igx1, igy1, igx2 - igx1, igy2 - igy1));\n        }\n        double linkX = plotArea.getX() + (gapHorizontal / 2);\n        double linkY = plotArea.getY() + (gapVertical / 2);\n        double linkW = plotArea.getWidth() - gapHorizontal;\n        double linkH = plotArea.getHeight() - gapVertical;\n        if (this.circular) {\n            double min = java.lang.Math.min(linkW, linkH) / 2;\n            linkX = (((linkX + linkX) + linkW) / 2) - min;\n            linkY = (((linkY + linkY) + linkH) / 2) - min;\n            linkW = 2 * min;\n            linkH = 2 * min;\n        }\n        java.awt.geom.Rectangle2D linkArea = new java.awt.geom.Rectangle2D.Double(linkX, linkY, linkW, linkH);\n        state.setLinkArea(linkArea);\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_LINK_AREA) {\n            g2.setPaint(java.awt.Color.blue);\n            g2.draw(linkArea);\n            g2.setPaint(java.awt.Color.yellow);\n            g2.draw(new java.awt.geom.Ellipse2D.Double(linkArea.getX(), linkArea.getY(), linkArea.getWidth(), linkArea.getHeight()));\n        }\n        double lm = 0.0;\n        if (!this.simpleLabels) {\n            lm = this.labelLinkMargin;\n        }\n        double hh = (linkArea.getWidth() * lm) * 2.0;\n        double vv = (linkArea.getHeight() * lm) * 2.0;\n        java.awt.geom.Rectangle2D explodeArea = new java.awt.geom.Rectangle2D.Double(linkX + (hh / 2.0), linkY + (vv / 2.0), linkW - hh, linkH - vv);\n        state.setExplodedPieArea(explodeArea);\n        double maximumExplodePercent = getMaximumExplodePercent();\n        double percent = maximumExplodePercent / (1.0 + maximumExplodePercent);\n        double h1 = explodeArea.getWidth() * percent;\n        double v1 = explodeArea.getHeight() * percent;\n        java.awt.geom.Rectangle2D pieArea = new java.awt.geom.Rectangle2D.Double(explodeArea.getX() + (h1 / 2.0), explodeArea.getY() + (v1 / 2.0), explodeArea.getWidth() - h1, explodeArea.getHeight() - v1);\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_PIE_AREA) {\n            g2.setPaint(java.awt.Color.green);\n            g2.draw(pieArea);\n        }\n        state.setPieArea(pieArea);\n        state.setPieCenterX(pieArea.getCenterX());\n        state.setPieCenterY(pieArea.getCenterY());\n        state.setPieWRadius(pieArea.getWidth() / 2.0);\n        state.setPieHRadius(pieArea.getHeight() / 2.0);\n        if ((this.dataset != null) && (this.dataset.getKeys().size() > 0)) {\n            java.util.List keys = this.dataset.getKeys();\n            double totalValue = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(this.dataset);\n            int passesRequired = state.getPassesRequired();\n            for (int pass = 0; pass < passesRequired; pass++) {\n                double runningTotal = 0.0;\n                for (int section = 0; section < keys.size(); section++) {\n                    java.lang.Number n = this.dataset.getValue(section);\n                    if (n != null) {\n                        double value = n.doubleValue();\n                        if (value > 0.0) {\n                            runningTotal += value;\n                            drawItem(g2, section, explodeArea, state, pass);\n                        }\n                    }\n                }\n            }\n            if (this.simpleLabels) {\n                drawSimpleLabels(g2, keys, totalValue, plotArea, linkArea, state);\n            } else {\n                drawLabels(g2, keys, totalValue, plotArea, linkArea, state);\n            }\n        } else {\n            drawNoDataMessage(g2, plotArea);\n        }\n    }\n\n    protected void drawItem(java.awt.Graphics2D g2, int section, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PiePlotState state, int currentPass) {\n        java.lang.Number n = this.dataset.getValue(section);\n        if (n == null) {\n            return;\n        }\n        double value = n.doubleValue();\n        double angle1 = 0.0;\n        double angle2 = 0.0;\n        if (this.direction == org.jfree.chart.util.Rotation.CLOCKWISE) {\n            angle1 = state.getLatestAngle();\n            angle2 = angle1 - ((value / state.getTotal()) * 360.0);\n        } else if (this.direction == org.jfree.chart.util.Rotation.ANTICLOCKWISE) {\n            angle1 = state.getLatestAngle();\n            angle2 = angle1 + ((value / state.getTotal()) * 360.0);\n        } else {\n            throw new java.lang.IllegalStateException(\"Rotation type not recognised.\");\n        }\n        double angle = angle2 - angle1;\n        if (java.lang.Math.abs(angle) > getMinimumArcAngleToDraw()) {\n            double ep = 0.0;\n            double mep = getMaximumExplodePercent();\n            if (mep > 0.0) {\n                ep = getExplodePercent(getSectionKey(section)) / mep;\n            }\n            java.awt.geom.Rectangle2D arcBounds = getArcBounds(state.getPieArea(), state.getExplodedPieArea(), angle1, angle, ep);\n            java.awt.geom.Arc2D.Double arc = new java.awt.geom.Arc2D.Double(arcBounds, angle1, angle, java.awt.geom.Arc2D.PIE);\n            if (currentPass == 0) {\n                if (this.shadowPaint != null) {\n                    java.awt.Shape shadowArc = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(arc, ((float) (this.shadowXOffset)), ((float) (this.shadowYOffset)));\n                    g2.setPaint(this.shadowPaint);\n                    g2.fill(shadowArc);\n                }\n            } else if (currentPass == 1) {\n                java.lang.Comparable key = getSectionKey(section);\n                java.awt.Paint paint = lookupSectionPaint(key, true);\n                g2.setPaint(paint);\n                g2.fill(arc);\n                java.awt.Paint outlinePaint = lookupSectionOutlinePaint(key);\n                java.awt.Stroke outlineStroke = lookupSectionOutlineStroke(key);\n                if (this.sectionOutlinesVisible) {\n                    g2.setPaint(outlinePaint);\n                    g2.setStroke(outlineStroke);\n                    g2.draw(arc);\n                }\n                if (state.getInfo() != null) {\n                    org.jfree.chart.entity.EntityCollection entities = state.getEntityCollection();\n                    if (entities != null) {\n                        java.lang.String tip = null;\n                        if (this.toolTipGenerator != null) {\n                            tip = this.toolTipGenerator.generateToolTip(this.dataset, key);\n                        }\n                        java.lang.String url = null;\n                        if (this.urlGenerator != null) {\n                            url = this.urlGenerator.generateURL(this.dataset, key, this.pieIndex);\n                        }\n                        org.jfree.chart.entity.PieSectionEntity entity = new org.jfree.chart.entity.PieSectionEntity(arc, this.dataset, this.pieIndex, section, key, tip, url);\n                        entities.add(entity);\n                    }\n                }\n            }\n        }\n        state.setLatestAngle(angle2);\n    }\n\n    protected void drawSimpleLabels(java.awt.Graphics2D g2, java.util.List keys, double totalValue, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D pieArea, org.jfree.chart.plot.PiePlotState state) {\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0F));\n        org.jfree.chart.util.RectangleInsets labelInsets = new org.jfree.chart.util.RectangleInsets(org.jfree.chart.util.UnitType.RELATIVE, 0.18, 0.18, 0.18, 0.18);\n        java.awt.geom.Rectangle2D labelsArea = labelInsets.createInsetRectangle(pieArea);\n        double runningTotal = 0.0;\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            boolean include = true;\n            double v = 0.0;\n            java.lang.Number n = getDataset().getValue(key);\n            if (n == null) {\n                include = !getIgnoreNullValues();\n            } else {\n                v = n.doubleValue();\n                include = (getIgnoreZeroValues()) ? v > 0.0 : v >= 0.0;\n            }\n            if (include) {\n                runningTotal = runningTotal + v;\n                double mid = getStartAngle() + ((getDirection().getFactor() * ((runningTotal - (v / 2.0)) * 360)) / totalValue);\n                java.awt.geom.Arc2D arc = new java.awt.geom.Arc2D.Double(labelsArea, getStartAngle(), mid - getStartAngle(), java.awt.geom.Arc2D.OPEN);\n                int x = ((int) (arc.getEndPoint().getX()));\n                int y = ((int) (arc.getEndPoint().getY()));\n                org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator = getLabelGenerator();\n                if (labelGenerator == null) {\n                    continue;\n                }\n                java.lang.String label = labelGenerator.generateSectionLabel(this.dataset, key);\n                if (label == null) {\n                    continue;\n                }\n                g2.setFont(this.labelFont);\n                java.awt.FontMetrics fm = g2.getFontMetrics();\n                java.awt.geom.Rectangle2D bounds = org.jfree.chart.text.TextUtilities.getTextBounds(label, g2, fm);\n                java.awt.geom.Rectangle2D out = this.labelPadding.createOutsetRectangle(bounds);\n                java.awt.Shape bg = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(out, x - bounds.getCenterX(), y - bounds.getCenterY());\n                if (this.labelShadowPaint != null) {\n                    java.awt.Shape shadow = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(bg, this.shadowXOffset, this.shadowYOffset);\n                    g2.setPaint(this.labelShadowPaint);\n                    g2.fill(shadow);\n                }\n                if (this.labelBackgroundPaint != null) {\n                    g2.setPaint(this.labelBackgroundPaint);\n                    g2.fill(bg);\n                }\n                if ((this.labelOutlinePaint != null) && (this.labelOutlineStroke != null)) {\n                    g2.setPaint(this.labelOutlinePaint);\n                    g2.setStroke(this.labelOutlineStroke);\n                    g2.draw(bg);\n                }\n                g2.setPaint(this.labelPaint);\n                g2.setFont(this.labelFont);\n                org.jfree.chart.text.TextUtilities.drawAlignedString(getLabelGenerator().generateSectionLabel(getDataset(), key), g2, x, y, TextAnchor.CENTER);\n            }\n        } \n        g2.setComposite(originalComposite);\n    }\n\n    protected void drawLabels(java.awt.Graphics2D g2, java.util.List keys, double totalValue, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, org.jfree.chart.plot.PiePlotState state) {\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0F));\n        org.jfree.data.DefaultKeyedValues leftKeys = new org.jfree.data.DefaultKeyedValues();\n        org.jfree.data.DefaultKeyedValues rightKeys = new org.jfree.data.DefaultKeyedValues();\n        double runningTotal = 0.0;\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            boolean include = true;\n            double v = 0.0;\n            java.lang.Number n = this.dataset.getValue(key);\n            if (n == null) {\n                include = !this.ignoreNullValues;\n            } else {\n                v = n.doubleValue();\n                include = (this.ignoreZeroValues) ? v > 0.0 : v >= 0.0;\n            }\n            if (include) {\n                runningTotal = runningTotal + v;\n                double mid = this.startAngle + ((this.direction.getFactor() * ((runningTotal - (v / 2.0)) * 360)) / totalValue);\n                if (java.lang.Math.cos(java.lang.Math.toRadians(mid)) < 0.0) {\n                    leftKeys.addValue(key, new java.lang.Double(mid));\n                } else {\n                    rightKeys.addValue(key, new java.lang.Double(mid));\n                }\n            }\n        } \n        g2.setFont(getLabelFont());\n        double marginX = plotArea.getX() + (this.interiorGap * plotArea.getWidth());\n        double gap = plotArea.getWidth() * this.labelGap;\n        double ww = (linkArea.getX() - gap) - marginX;\n        float labelWidth = ((float) (this.labelPadding.trimWidth(ww)));\n        if (this.labelGenerator != null) {\n            drawLeftLabels(leftKeys, g2, plotArea, linkArea, labelWidth, state);\n            drawRightLabels(rightKeys, g2, plotArea, linkArea, labelWidth, state);\n        }\n        g2.setComposite(originalComposite);\n    }\n\n    protected void drawLeftLabels(org.jfree.data.KeyedValues leftKeys, java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, float maxLabelWidth, org.jfree.chart.plot.PiePlotState state) {\n        this.labelDistributor.clear();\n        double lGap = plotArea.getWidth() * this.labelGap;\n        double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;\n        for (int i = 0; i < leftKeys.getItemCount(); i++) {\n            java.lang.String label = this.labelGenerator.generateSectionLabel(this.dataset, leftKeys.getKey(i));\n            if (label != null) {\n                org.jfree.chart.text.TextBlock block = org.jfree.chart.text.TextUtilities.createTextBlock(label, this.labelFont, this.labelPaint, maxLabelWidth, new org.jfree.chart.text.G2TextMeasurer(g2));\n                org.jfree.chart.text.TextBox labelBox = new org.jfree.chart.text.TextBox(block);\n                labelBox.setBackgroundPaint(this.labelBackgroundPaint);\n                labelBox.setOutlinePaint(this.labelOutlinePaint);\n                labelBox.setOutlineStroke(this.labelOutlineStroke);\n                labelBox.setShadowPaint(this.labelShadowPaint);\n                labelBox.setInteriorGap(this.labelPadding);\n                double theta = java.lang.Math.toRadians(leftKeys.getValue(i).doubleValue());\n                double baseY = state.getPieCenterY() - (java.lang.Math.sin(theta) * verticalLinkRadius);\n                double hh = labelBox.getHeight(g2);\n                this.labelDistributor.addPieLabelRecord(new org.jfree.chart.plot.PieLabelRecord(leftKeys.getKey(i), theta, baseY, labelBox, hh, (lGap / 2.0) + ((lGap / 2.0) * (-java.lang.Math.cos(theta))), 0.9 + getExplodePercent(leftKeys.getKey(i))));\n            }\n        }\n        this.labelDistributor.distributeLabels(plotArea.getMinY(), plotArea.getHeight());\n        for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {\n            drawLeftLabel(g2, state, this.labelDistributor.getPieLabelRecord(i));\n        }\n    }\n\n    protected void drawRightLabels(org.jfree.data.KeyedValues keys, java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, float maxLabelWidth, org.jfree.chart.plot.PiePlotState state) {\n        this.labelDistributor.clear();\n        double lGap = plotArea.getWidth() * this.labelGap;\n        double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;\n        for (int i = 0; i < keys.getItemCount(); i++) {\n            java.lang.String label = this.labelGenerator.generateSectionLabel(this.dataset, keys.getKey(i));\n            if (label != null) {\n                org.jfree.chart.text.TextBlock block = org.jfree.chart.text.TextUtilities.createTextBlock(label, this.labelFont, this.labelPaint, maxLabelWidth, new org.jfree.chart.text.G2TextMeasurer(g2));\n                org.jfree.chart.text.TextBox labelBox = new org.jfree.chart.text.TextBox(block);\n                labelBox.setBackgroundPaint(this.labelBackgroundPaint);\n                labelBox.setOutlinePaint(this.labelOutlinePaint);\n                labelBox.setOutlineStroke(this.labelOutlineStroke);\n                labelBox.setShadowPaint(this.labelShadowPaint);\n                labelBox.setInteriorGap(this.labelPadding);\n                double theta = java.lang.Math.toRadians(keys.getValue(i).doubleValue());\n                double baseY = state.getPieCenterY() - (java.lang.Math.sin(theta) * verticalLinkRadius);\n                double hh = labelBox.getHeight(g2);\n                this.labelDistributor.addPieLabelRecord(new org.jfree.chart.plot.PieLabelRecord(keys.getKey(i), theta, baseY, labelBox, hh, (lGap / 2.0) + ((lGap / 2.0) * java.lang.Math.cos(theta)), 0.9 + getExplodePercent(keys.getKey(i))));\n            }\n        }\n        this.labelDistributor.distributeLabels(plotArea.getMinY(), plotArea.getHeight());\n        for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {\n            drawRightLabel(g2, state, this.labelDistributor.getPieLabelRecord(i));\n        }\n    }\n\n    public org.jfree.chart.LegendItemCollection getLegendItems() {\n        org.jfree.chart.LegendItemCollection result = new org.jfree.chart.LegendItemCollection();\n        if (this.dataset == null) {\n            return result;\n        }\n        java.util.List keys = this.dataset.getKeys();\n        int section = 0;\n        java.awt.Shape shape = getLegendItemShape();\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            java.lang.Number n = this.dataset.getValue(key);\n            boolean include = true;\n            if (n == null) {\n                include = !this.ignoreNullValues;\n            } else {\n                double v = n.doubleValue();\n                if (v == 0.0) {\n                    include = !this.ignoreZeroValues;\n                } else {\n                    include = v > 0.0;\n                }\n            }\n            if (include) {\n                java.lang.String label = this.legendLabelGenerator.generateSectionLabel(this.dataset, key);\n                if (label != null) {\n                    java.lang.String description = label;\n                    java.lang.String toolTipText = null;\n                    if (this.legendLabelToolTipGenerator != null) {\n                        toolTipText = this.legendLabelToolTipGenerator.generateSectionLabel(this.dataset, key);\n                    }\n                    java.lang.String urlText = null;\n                    if (this.legendLabelURLGenerator != null) {\n                        urlText = this.legendLabelURLGenerator.generateURL(this.dataset, key, this.pieIndex);\n                    }\n                    java.awt.Paint paint = lookupSectionPaint(key, true);\n                    java.awt.Paint outlinePaint = lookupSectionOutlinePaint(key);\n                    java.awt.Stroke outlineStroke = lookupSectionOutlineStroke(key);\n                    org.jfree.chart.LegendItem item = new org.jfree.chart.LegendItem(label, description, toolTipText, urlText, true, shape, true, paint, true, outlinePaint, outlineStroke, false, new java.awt.geom.Line2D.Float(), new java.awt.BasicStroke(), java.awt.Color.black);\n                    item.setDataset(getDataset());\n                    result.add(item);\n                }\n                section++;\n            } else {\n                section++;\n            }\n        } \n        return result;\n    }\n\n    public java.lang.String getPlotType() {\n        return org.jfree.chart.plot.PiePlot.localizationResources.getString(\"Pie_Plot\");\n    }\n\n    protected java.awt.geom.Rectangle2D getArcBounds(java.awt.geom.Rectangle2D unexploded, java.awt.geom.Rectangle2D exploded, double angle, double extent, double explodePercent) {\n        if (explodePercent == 0.0) {\n            return unexploded;\n        } else {\n            java.awt.geom.Arc2D arc1 = new java.awt.geom.Arc2D.Double(unexploded, angle, extent / 2, java.awt.geom.Arc2D.OPEN);\n            java.awt.geom.Point2D point1 = arc1.getEndPoint();\n            java.awt.geom.Arc2D.Double arc2 = new java.awt.geom.Arc2D.Double(exploded, angle, extent / 2, java.awt.geom.Arc2D.OPEN);\n            java.awt.geom.Point2D point2 = arc2.getEndPoint();\n            double deltaX = (point1.getX() - point2.getX()) * explodePercent;\n            double deltaY = (point1.getY() - point2.getY()) * explodePercent;\n            return new java.awt.geom.Rectangle2D.Double(unexploded.getX() - deltaX, unexploded.getY() - deltaY, unexploded.getWidth(), unexploded.getHeight());\n        }\n    }\n\n    protected void drawLeftLabel(java.awt.Graphics2D g2, org.jfree.chart.plot.PiePlotState state, org.jfree.chart.plot.PieLabelRecord record) {\n        double anchorX = state.getLinkArea().getMinX();\n        double targetX = anchorX - record.getGap();\n        double targetY = record.getAllocatedY();\n        if (this.labelLinksVisible) {\n            double theta = record.getAngle();\n            double linkX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getPieWRadius()) * record.getLinkPercent());\n            double linkY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getPieHRadius()) * record.getLinkPercent());\n            double elbowX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getLinkArea().getWidth()) / 2.0);\n            double elbowY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getLinkArea().getHeight()) / 2.0);\n            double anchorY = elbowY;\n            g2.setPaint(this.labelLinkPaint);\n            g2.setStroke(this.labelLinkStroke);\n            g2.draw(new java.awt.geom.Line2D.Double(linkX, linkY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, targetX, targetY));\n        }\n        org.jfree.chart.text.TextBox tb = record.getLabel();\n        tb.draw(g2, ((float) (targetX)), ((float) (targetY)), RectangleAnchor.RIGHT);\n    }\n\n    protected void drawRightLabel(java.awt.Graphics2D g2, org.jfree.chart.plot.PiePlotState state, org.jfree.chart.plot.PieLabelRecord record) {\n        double anchorX = state.getLinkArea().getMaxX();\n        double targetX = anchorX + record.getGap();\n        double targetY = record.getAllocatedY();\n        if (this.labelLinksVisible) {\n            double theta = record.getAngle();\n            double linkX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getPieWRadius()) * record.getLinkPercent());\n            double linkY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getPieHRadius()) * record.getLinkPercent());\n            double elbowX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getLinkArea().getWidth()) / 2.0);\n            double elbowY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getLinkArea().getHeight()) / 2.0);\n            double anchorY = elbowY;\n            g2.setPaint(this.labelLinkPaint);\n            g2.setStroke(this.labelLinkStroke);\n            g2.draw(new java.awt.geom.Line2D.Double(linkX, linkY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, targetX, targetY));\n        }\n        org.jfree.chart.text.TextBox tb = record.getLabel();\n        tb.draw(g2, ((float) (targetX)), ((float) (targetY)), RectangleAnchor.LEFT);\n    }\n\n    public boolean equals(java.lang.Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof org.jfree.chart.plot.PiePlot)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        org.jfree.chart.plot.PiePlot that = ((org.jfree.chart.plot.PiePlot) (obj));\n        if (this.pieIndex != that.pieIndex) {\n            return false;\n        }\n        if (this.interiorGap != that.interiorGap) {\n            return false;\n        }\n        if (this.circular != that.circular) {\n            return false;\n        }\n        if (this.startAngle != that.startAngle) {\n            return false;\n        }\n        if (this.direction != that.direction) {\n            return false;\n        }\n        if (this.ignoreZeroValues != that.ignoreZeroValues) {\n            return false;\n        }\n        if (this.ignoreNullValues != that.ignoreNullValues) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionPaintMap, that.sectionPaintMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.baseSectionPaint, that.baseSectionPaint)) {\n            return false;\n        }\n        if (this.sectionOutlinesVisible != that.sectionOutlinesVisible) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionOutlinePaintMap, that.sectionOutlinePaintMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.baseSectionOutlinePaint, that.baseSectionOutlinePaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionOutlineStrokeMap, that.sectionOutlineStrokeMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.baseSectionOutlineStroke, that.baseSectionOutlineStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (!(this.shadowXOffset == that.shadowXOffset)) {\n            return false;\n        }\n        if (!(this.shadowYOffset == that.shadowYOffset)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.explodePercentages, that.explodePercentages)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelGenerator, that.labelGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelBackgroundPaint, that.labelBackgroundPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelOutlinePaint, that.labelOutlinePaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelOutlineStroke, that.labelOutlineStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelShadowPaint, that.labelShadowPaint)) {\n            return false;\n        }\n        if (this.simpleLabels != that.simpleLabels) {\n            return false;\n        }\n        if (!this.simpleLabelOffset.equals(that.simpleLabelOffset)) {\n            return false;\n        }\n        if (!this.labelPadding.equals(that.labelPadding)) {\n            return false;\n        }\n        if (!(this.maximumLabelWidth == that.maximumLabelWidth)) {\n            return false;\n        }\n        if (!(this.labelGap == that.labelGap)) {\n            return false;\n        }\n        if (!(this.labelLinkMargin == that.labelLinkMargin)) {\n            return false;\n        }\n        if (this.labelLinksVisible != that.labelLinksVisible) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelLinkPaint, that.labelLinkPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelLinkStroke, that.labelLinkStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.toolTipGenerator, that.toolTipGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.urlGenerator, that.urlGenerator)) {\n            return false;\n        }\n        if (!(this.minimumArcAngleToDraw == that.minimumArcAngleToDraw)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ShapeUtilities.equal(this.legendItemShape, that.legendItemShape)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelGenerator, that.legendLabelGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelToolTipGenerator, that.legendLabelToolTipGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelURLGenerator, that.legendLabelURLGenerator)) {\n            return false;\n        }\n        return true;\n    }\n\n    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {\n        org.jfree.chart.plot.PiePlot clone = ((org.jfree.chart.plot.PiePlot) (super.clone()));\n        if (clone.dataset != null) {\n            clone.dataset.addChangeListener(clone);\n        }\n        if (this.urlGenerator instanceof org.jfree.chart.util.PublicCloneable) {\n            clone.urlGenerator = ((org.jfree.chart.urls.PieURLGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.urlGenerator)));\n        }\n        clone.legendItemShape = org.jfree.chart.util.ShapeUtilities.clone(this.legendItemShape);\n        if (this.legendLabelGenerator != null) {\n            clone.legendLabelGenerator = ((org.jfree.chart.labels.PieSectionLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelGenerator)));\n        }\n        if (this.legendLabelToolTipGenerator != null) {\n            clone.legendLabelToolTipGenerator = ((org.jfree.chart.labels.PieSectionLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelToolTipGenerator)));\n        }\n        if (this.legendLabelURLGenerator instanceof org.jfree.chart.util.PublicCloneable) {\n            clone.legendLabelURLGenerator = ((org.jfree.chart.urls.PieURLGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelURLGenerator)));\n        }\n        return clone;\n    }\n\n    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {\n        stream.defaultWriteObject();\n        org.jfree.chart.util.SerialUtilities.writePaint(this.baseSectionPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.baseSectionOutlinePaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.baseSectionOutlineStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.shadowPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelBackgroundPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelOutlinePaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.labelOutlineStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelShadowPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelLinkPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.labelLinkStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writeShape(this.legendItemShape, stream);\n    }\n\n    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        stream.defaultReadObject();\n        this.baseSectionPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.baseSectionOutlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.baseSectionOutlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.shadowPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelBackgroundPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelOutlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelOutlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.labelShadowPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelLinkPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelLinkStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.legendItemShape = org.jfree.chart.util.SerialUtilities.readShape(stream);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "public double getMaximumLabelWidth() {\n    return this.maximumLabelWidth;\n}",
            "dst_parent": "public class PiePlot extends org.jfree.chart.plot.Plot implements java.io.Serializable , java.lang.Cloneable {\n    private static final long serialVersionUID = -795612466005590431L;\n\n    public static final double DEFAULT_INTERIOR_GAP = 0.08;\n\n    public static final double MAX_INTERIOR_GAP = 0.4;\n\n    public static final double DEFAULT_START_ANGLE = 90.0;\n\n    public static final java.awt.Font DEFAULT_LABEL_FONT = new java.awt.Font(\"SansSerif\", java.awt.Font.PLAIN, 10);\n\n    public static final java.awt.Paint DEFAULT_LABEL_PAINT = java.awt.Color.black;\n\n    public static final java.awt.Paint DEFAULT_LABEL_BACKGROUND_PAINT = new java.awt.Color(255, 255, 192);\n\n    public static final java.awt.Paint DEFAULT_LABEL_OUTLINE_PAINT = java.awt.Color.black;\n\n    public static final java.awt.Stroke DEFAULT_LABEL_OUTLINE_STROKE = new java.awt.BasicStroke(0.5F);\n\n    public static final java.awt.Paint DEFAULT_LABEL_SHADOW_PAINT = new java.awt.Color(151, 151, 151, 128);\n\n    public static final double DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW = 1.0E-5;\n\n    private org.jfree.data.general.PieDataset dataset;\n\n    private int pieIndex;\n\n    private double interiorGap;\n\n    private boolean circular;\n\n    private double startAngle;\n\n    private org.jfree.chart.util.Rotation direction;\n\n    private org.jfree.chart.PaintMap sectionPaintMap;\n\n    private transient java.awt.Paint baseSectionPaint;\n\n    private boolean sectionOutlinesVisible;\n\n    private org.jfree.chart.PaintMap sectionOutlinePaintMap;\n\n    private transient java.awt.Paint baseSectionOutlinePaint;\n\n    private org.jfree.chart.StrokeMap sectionOutlineStrokeMap;\n\n    private transient java.awt.Stroke baseSectionOutlineStroke;\n\n    private transient java.awt.Paint shadowPaint = java.awt.Color.gray;\n\n    private double shadowXOffset = 4.0F;\n\n    private double shadowYOffset = 4.0F;\n\n    private java.util.Map explodePercentages;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator;\n\n    private java.awt.Font labelFont;\n\n    private transient java.awt.Paint labelPaint;\n\n    private transient java.awt.Paint labelBackgroundPaint;\n\n    private transient java.awt.Paint labelOutlinePaint;\n\n    private transient java.awt.Stroke labelOutlineStroke;\n\n    private transient java.awt.Paint labelShadowPaint;\n\n    private boolean simpleLabels = true;\n\n    private org.jfree.chart.util.RectangleInsets labelPadding;\n\n    private org.jfree.chart.util.RectangleInsets simpleLabelOffset;\n\n    private double maximumLabelWidth = 0.14;\n\n    private double labelGap = 0.025;\n\n    private boolean labelLinksVisible;\n\n    private double labelLinkMargin = 0.025;\n\n    private transient java.awt.Paint labelLinkPaint = java.awt.Color.black;\n\n    private transient java.awt.Stroke labelLinkStroke = new java.awt.BasicStroke(0.5F);\n\n    private org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor;\n\n    private org.jfree.chart.labels.PieToolTipGenerator toolTipGenerator;\n\n    private org.jfree.chart.urls.PieURLGenerator urlGenerator;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator legendLabelGenerator;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator legendLabelToolTipGenerator;\n\n    private org.jfree.chart.urls.PieURLGenerator legendLabelURLGenerator;\n\n    private boolean ignoreNullValues;\n\n    private boolean ignoreZeroValues;\n\n    private transient java.awt.Shape legendItemShape;\n\n    private double minimumArcAngleToDraw;\n\n    protected static java.util.ResourceBundle localizationResources = java.util.ResourceBundle.getBundle(\"org.jfree.chart.plot.LocalizationBundle\");\n\n    static final boolean DEBUG_DRAW_INTERIOR = false;\n\n    static final boolean DEBUG_DRAW_LINK_AREA = false;\n\n    static final boolean DEBUG_DRAW_PIE_AREA = false;\n\n    public PiePlot() {\n        this(null);\n    }\n\n    public PiePlot(org.jfree.data.general.PieDataset dataset) {\n        super();\n        this.dataset = dataset;\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n        this.pieIndex = 0;\n        this.interiorGap = org.jfree.chart.plot.PiePlot.DEFAULT_INTERIOR_GAP;\n        this.circular = true;\n        this.startAngle = org.jfree.chart.plot.PiePlot.DEFAULT_START_ANGLE;\n        this.direction = org.jfree.chart.util.Rotation.CLOCKWISE;\n        this.minimumArcAngleToDraw = org.jfree.chart.plot.PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW;\n        this.sectionPaintMap = new org.jfree.chart.PaintMap();\n        this.baseSectionPaint = java.awt.Color.gray;\n        this.sectionOutlinesVisible = true;\n        this.sectionOutlinePaintMap = new org.jfree.chart.PaintMap();\n        this.baseSectionOutlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.sectionOutlineStrokeMap = new org.jfree.chart.StrokeMap();\n        this.baseSectionOutlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.explodePercentages = new java.util.TreeMap();\n        this.labelGenerator = new org.jfree.chart.labels.StandardPieSectionLabelGenerator();\n        this.labelFont = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT;\n        this.labelPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT;\n        this.labelBackgroundPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT;\n        this.labelOutlinePaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT;\n        this.labelOutlineStroke = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;\n        this.labelShadowPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT;\n        this.labelLinksVisible = true;\n        this.labelDistributor = new org.jfree.chart.plot.PieLabelDistributor(0);\n        this.simpleLabels = false;\n        this.simpleLabelOffset = new org.jfree.chart.util.RectangleInsets(org.jfree.chart.util.UnitType.RELATIVE, 0.18, 0.18, 0.18, 0.18);\n        this.labelPadding = new org.jfree.chart.util.RectangleInsets(2, 2, 2, 2);\n        this.toolTipGenerator = null;\n        this.urlGenerator = null;\n        this.legendLabelGenerator = new org.jfree.chart.labels.StandardPieSectionLabelGenerator();\n        this.legendLabelToolTipGenerator = null;\n        this.legendLabelURLGenerator = null;\n        this.legendItemShape = Plot.DEFAULT_LEGEND_ITEM_CIRCLE;\n        this.ignoreNullValues = false;\n        this.ignoreZeroValues = false;\n    }\n\n    public org.jfree.data.general.PieDataset getDataset() {\n        return this.dataset;\n    }\n\n    public void setDataset(org.jfree.data.general.PieDataset dataset) {\n        org.jfree.data.general.PieDataset existing = this.dataset;\n        if (existing != null) {\n            existing.removeChangeListener(this);\n        }\n        this.dataset = dataset;\n        if (dataset != null) {\n            setDatasetGroup(dataset.getGroup());\n            dataset.addChangeListener(this);\n        }\n        org.jfree.data.general.DatasetChangeEvent event = new org.jfree.data.general.DatasetChangeEvent(this, dataset);\n        datasetChanged(event);\n    }\n\n    public int getPieIndex() {\n        return this.pieIndex;\n    }\n\n    public void setPieIndex(int index) {\n        this.pieIndex = index;\n    }\n\n    public double getStartAngle() {\n        return this.interiorGap;\n    }\n\n    public void setStartAngle(double angle) {\n        this.startAngle = angle;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.Rotation getDirection() {\n        return this.direction;\n    }\n\n    public void setDirection(org.jfree.chart.util.Rotation direction) {\n        if (direction == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'direction' argument.\");\n        }\n        this.direction = direction;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getInteriorGap() {\n        return this.interiorGap;\n    }\n\n    public void setInteriorGap(double percent) {\n        if ((percent < 0.0) || (percent > org.jfree.chart.plot.PiePlot.MAX_INTERIOR_GAP)) {\n            throw new java.lang.IllegalArgumentException((\"Invalid 'percent' (\" + percent) + \") argument.\");\n        }\n        if (this.interiorGap != percent) {\n            this.interiorGap = percent;\n            notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n        }\n    }\n\n    public boolean isCircular() {\n        return this.circular;\n    }\n\n    public void setCircular(boolean flag) {\n        setCircular(flag, true);\n    }\n\n    public void setCircular(boolean circular, boolean notify) {\n        this.circular = circular;\n        if (notify) {\n            notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n        }\n    }\n\n    public boolean getIgnoreNullValues() {\n        return this.ignoreNullValues;\n    }\n\n    public void setIgnoreNullValues(boolean flag) {\n        this.ignoreNullValues = flag;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getIgnoreZeroValues() {\n        return this.ignoreZeroValues;\n    }\n\n    public void setIgnoreZeroValues(boolean flag) {\n        this.ignoreZeroValues = flag;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Paint lookupSectionPaint(java.lang.Comparable key) {\n        return lookupSectionPaint(key, false);\n    }\n\n    protected java.awt.Paint lookupSectionPaint(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Paint result = null;\n        result = this.sectionPaintMap.getPaint(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextPaint();\n                this.sectionPaintMap.put(key, result);\n            } else {\n                result = this.baseSectionPaint;\n            }\n        } else {\n            result = this.baseSectionPaint;\n        }\n        return result;\n    }\n\n    protected java.lang.Comparable getSectionKey(int section) {\n        java.lang.Comparable key = null;\n        if (this.dataset != null) {\n            if ((section >= 0) && (section < this.dataset.getItemCount())) {\n                key = this.dataset.getKey(section);\n            }\n        }\n        if (key == null) {\n            key = new java.lang.Integer(section);\n        }\n        return key;\n    }\n\n    public java.awt.Paint getSectionPaint(java.lang.Comparable key) {\n        return this.sectionPaintMap.getPaint(key);\n    }\n\n    public void setSectionPaint(java.lang.Comparable key, java.awt.Paint paint) {\n        this.sectionPaintMap.put(key, paint);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getBaseSectionPaint() {\n        return this.baseSectionPaint;\n    }\n\n    public void setBaseSectionPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.baseSectionPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getSectionOutlinesVisible() {\n        return this.sectionOutlinesVisible;\n    }\n\n    public void setSectionOutlinesVisible(boolean visible) {\n        this.sectionOutlinesVisible = visible;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable key) {\n        return lookupSectionOutlinePaint(key, false);\n    }\n\n    protected java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Paint result = null;\n        result = this.sectionOutlinePaintMap.getPaint(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextOutlinePaint();\n                this.sectionOutlinePaintMap.put(key, result);\n            } else {\n                result = this.baseSectionOutlinePaint;\n            }\n        } else {\n            result = this.baseSectionOutlinePaint;\n        }\n        return result;\n    }\n\n    public java.awt.Paint getSectionOutlinePaint(java.lang.Comparable key) {\n        return this.sectionOutlinePaintMap.getPaint(key);\n    }\n\n    public void setSectionOutlinePaint(java.lang.Comparable key, java.awt.Paint paint) {\n        this.sectionOutlinePaintMap.put(key, paint);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getBaseSectionOutlinePaint() {\n        return this.baseSectionOutlinePaint;\n    }\n\n    public void setBaseSectionOutlinePaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.baseSectionOutlinePaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable key) {\n        return lookupSectionOutlineStroke(key, false);\n    }\n\n    protected java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Stroke result = null;\n        result = this.sectionOutlineStrokeMap.getStroke(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextOutlineStroke();\n                this.sectionOutlineStrokeMap.put(key, result);\n            } else {\n                result = this.baseSectionOutlineStroke;\n            }\n        } else {\n            result = this.baseSectionOutlineStroke;\n        }\n        return result;\n    }\n\n    public java.awt.Stroke getSectionOutlineStroke(java.lang.Comparable key) {\n        return this.sectionOutlineStrokeMap.getStroke(key);\n    }\n\n    public void setSectionOutlineStroke(java.lang.Comparable key, java.awt.Stroke stroke) {\n        this.sectionOutlineStrokeMap.put(key, stroke);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getBaseSectionOutlineStroke() {\n        return this.baseSectionOutlineStroke;\n    }\n\n    public void setBaseSectionOutlineStroke(java.awt.Stroke stroke) {\n        if (stroke == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        this.baseSectionOutlineStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getShadowPaint() {\n        return this.shadowPaint;\n    }\n\n    public void setShadowPaint(java.awt.Paint paint) {\n        this.shadowPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getShadowXOffset() {\n        return this.shadowXOffset;\n    }\n\n    public void setShadowXOffset(double offset) {\n        this.shadowXOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getShadowYOffset() {\n        return this.shadowYOffset;\n    }\n\n    public void setShadowYOffset(double offset) {\n        this.shadowYOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getExplodePercent(java.lang.Comparable key) {\n        double result = 0.0;\n        if (this.explodePercentages != null) {\n            java.lang.Number percent = ((java.lang.Number) (this.explodePercentages.get(key)));\n            if (percent != null) {\n                result = percent.doubleValue();\n            }\n        }\n        return result;\n    }\n\n    public void setExplodePercent(java.lang.Comparable key, double percent) {\n        if (key == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        if (this.explodePercentages == null) {\n            this.explodePercentages = new java.util.TreeMap();\n        }\n        this.explodePercentages.put(key, new java.lang.Double(percent));\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        java.util.Iterator iterator = this.dataset.getKeys().iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            java.lang.Number explode = ((java.lang.Number) (this.explodePercentages.get(key)));\n            if (explode != null) {\n                result = java.lang.Math.max(result, explode.doubleValue());\n            }\n        } \n        return result;\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLabelGenerator() {\n        return this.labelGenerator;\n    }\n\n    public void setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        this.labelGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getLabelGap() {\n        return this.labelGap;\n    }\n\n    public void setLabelGap(double gap) {\n        this.labelGap = gap;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMaximumLabelWidth() {\n        return this.maximumLabelWidth;\n    }\n\n    public void setMaximumLabelWidth(double width) {\n        this.maximumLabelWidth = width;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getLabelLinksVisible() {\n        return this.labelLinksVisible;\n    }\n\n    public void setLabelLinksVisible(boolean visible) {\n        this.labelLinksVisible = visible;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getLabelLinkMargin() {\n        return this.startAngle;\n    }\n\n    public void setLabelLinkMargin(double margin) {\n        this.labelLinkMargin = margin;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelLinkPaint() {\n        return this.labelLinkPaint;\n    }\n\n    public void setLabelLinkPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.labelLinkPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getLabelLinkStroke() {\n        return this.labelLinkStroke;\n    }\n\n    public void setLabelLinkStroke(java.awt.Stroke stroke) {\n        if (stroke == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        this.labelLinkStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Font getLabelFont() {\n        return this.labelFont;\n    }\n\n    public void setLabelFont(java.awt.Font font) {\n        if (font == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'font' argument.\");\n        }\n        this.labelFont = font;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelPaint() {\n        return this.labelPaint;\n    }\n\n    public void setLabelPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.labelPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelBackgroundPaint() {\n        return this.labelBackgroundPaint;\n    }\n\n    public void setLabelBackgroundPaint(java.awt.Paint paint) {\n        this.labelBackgroundPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelOutlinePaint() {\n        return this.labelOutlinePaint;\n    }\n\n    public void setLabelOutlinePaint(java.awt.Paint paint) {\n        this.labelOutlinePaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getLabelOutlineStroke() {\n        return this.labelOutlineStroke;\n    }\n\n    public void setLabelOutlineStroke(java.awt.Stroke stroke) {\n        this.labelOutlineStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelShadowPaint() {\n        return this.labelShadowPaint;\n    }\n\n    public void setLabelShadowPaint(java.awt.Paint paint) {\n        this.labelShadowPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.RectangleInsets getLabelPadding() {\n        return this.labelPadding;\n    }\n\n    public void setLabelPadding(org.jfree.chart.util.RectangleInsets padding) {\n        if (padding == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'padding' argument.\");\n        }\n        this.labelPadding = padding;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getSimpleLabels() {\n        return this.simpleLabels;\n    }\n\n    public void setSimpleLabels(boolean simple) {\n        this.simpleLabels = simple;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.RectangleInsets getSimpleLabelOffset() {\n        return this.simpleLabelOffset;\n    }\n\n    public void setSimpleLabelOffset(org.jfree.chart.util.RectangleInsets offset) {\n        if (offset == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'offset' argument.\");\n        }\n        this.simpleLabelOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.plot.AbstractPieLabelDistributor getLabelDistributor() {\n        return this.labelDistributor;\n    }\n\n    public void setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor distributor) {\n        if (distributor == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'distributor' argument.\");\n        }\n        this.labelDistributor = distributor;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieToolTipGenerator getToolTipGenerator() {\n        return this.toolTipGenerator;\n    }\n\n    public void setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator generator) {\n        this.toolTipGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.urls.PieURLGenerator getURLGenerator() {\n        return this.urlGenerator;\n    }\n\n    public void setURLGenerator(org.jfree.chart.urls.PieURLGenerator generator) {\n        this.urlGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMinimumArcAngleToDraw() {\n        return this.minimumArcAngleToDraw;\n    }\n\n    public void setMinimumArcAngleToDraw(double angle) {\n        this.minimumArcAngleToDraw = angle;\n    }\n\n    public java.awt.Shape getLegendItemShape() {\n        return this.legendItemShape;\n    }\n\n    public void setLegendItemShape(java.awt.Shape shape) {\n        if (shape == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'shape' argument.\");\n        }\n        this.legendItemShape = shape;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLegendLabelGenerator() {\n        return this.legendLabelGenerator;\n    }\n\n    public void setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        if (generator == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'generator' argument.\");\n        }\n        this.legendLabelGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLegendLabelToolTipGenerator() {\n        return this.legendLabelToolTipGenerator;\n    }\n\n    public void setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        this.legendLabelToolTipGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.urls.PieURLGenerator getLegendLabelURLGenerator() {\n        return this.legendLabelURLGenerator;\n    }\n\n    public void setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator generator) {\n        this.legendLabelURLGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.plot.PiePlot plot, java.lang.Integer index, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.plot.PiePlotState state = new org.jfree.chart.plot.PiePlotState(info);\n        state.setPassesRequired(2);\n        state.setTotal(org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n    }\n\n    public void draw(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.awt.geom.Point2D anchor, org.jfree.chart.plot.PlotState parentState, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.util.RectangleInsets insets = getInsets();\n        insets.trim(area);\n        if (info != null) {\n            info.setPlotArea(area);\n            info.setDataArea(area);\n        }\n        drawBackground(g2, area);\n        drawOutline(g2, area);\n        java.awt.Shape savedClip = g2.getClip();\n        g2.clip(area);\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getForegroundAlpha()));\n        if (!org.jfree.data.general.DatasetUtilities.isEmptyOrNull(this.dataset)) {\n            drawPie(g2, area, info);\n        } else {\n            drawNoDataMessage(g2, area);\n        }\n        g2.setClip(savedClip);\n        g2.setComposite(originalComposite);\n        drawOutline(g2, area);\n    }\n\n    protected void drawPie(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.plot.PiePlotState state = initialise(g2, plotArea, this, null, info);\n        double labelReserve = 0.0;\n        if ((this.labelGenerator != null) && (!this.simpleLabels)) {\n            labelReserve = this.labelGap + this.maximumLabelWidth;\n        }\n        double gapHorizontal = (plotArea.getWidth() * (this.interiorGap + labelReserve)) * 2.0;\n        double gapVertical = (plotArea.getHeight() * this.interiorGap) * 2.0;\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_INTERIOR) {\n            double hGap = plotArea.getWidth() * this.interiorGap;\n            double vGap = plotArea.getHeight() * this.interiorGap;\n            double igx1 = plotArea.getX() + hGap;\n            double igx2 = plotArea.getMaxX() - hGap;\n            double igy1 = plotArea.getY() + vGap;\n            double igy2 = plotArea.getMaxY() - vGap;\n            g2.setPaint(java.awt.Color.gray);\n            g2.draw(new java.awt.geom.Rectangle2D.Double(igx1, igy1, igx2 - igx1, igy2 - igy1));\n        }\n        double linkX = plotArea.getX() + (gapHorizontal / 2);\n        double linkY = plotArea.getY() + (gapVertical / 2);\n        double linkW = plotArea.getWidth() - gapHorizontal;\n        double linkH = plotArea.getHeight() - gapVertical;\n        if (this.circular) {\n            double min = java.lang.Math.min(linkW, linkH) / 2;\n            linkX = (((linkX + linkX) + linkW) / 2) - min;\n            linkY = (((linkY + linkY) + linkH) / 2) - min;\n            linkW = 2 * min;\n            linkH = 2 * min;\n        }\n        java.awt.geom.Rectangle2D linkArea = new java.awt.geom.Rectangle2D.Double(linkX, linkY, linkW, linkH);\n        state.setLinkArea(linkArea);\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_LINK_AREA) {\n            g2.setPaint(java.awt.Color.blue);\n            g2.draw(linkArea);\n            g2.setPaint(java.awt.Color.yellow);\n            g2.draw(new java.awt.geom.Ellipse2D.Double(linkArea.getX(), linkArea.getY(), linkArea.getWidth(), linkArea.getHeight()));\n        }\n        double lm = 0.0;\n        if (!this.simpleLabels) {\n            lm = this.labelLinkMargin;\n        }\n        double hh = (linkArea.getWidth() * lm) * 2.0;\n        double vv = (linkArea.getHeight() * lm) * 2.0;\n        java.awt.geom.Rectangle2D explodeArea = new java.awt.geom.Rectangle2D.Double(linkX + (hh / 2.0), linkY + (vv / 2.0), linkW - hh, linkH - vv);\n        state.setExplodedPieArea(explodeArea);\n        double maximumExplodePercent = getMaximumExplodePercent();\n        double percent = maximumExplodePercent / (1.0 + maximumExplodePercent);\n        double h1 = explodeArea.getWidth() * percent;\n        double v1 = explodeArea.getHeight() * percent;\n        java.awt.geom.Rectangle2D pieArea = new java.awt.geom.Rectangle2D.Double(explodeArea.getX() + (h1 / 2.0), explodeArea.getY() + (v1 / 2.0), explodeArea.getWidth() - h1, explodeArea.getHeight() - v1);\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_PIE_AREA) {\n            g2.setPaint(java.awt.Color.green);\n            g2.draw(pieArea);\n        }\n        state.setPieArea(pieArea);\n        state.setPieCenterX(pieArea.getCenterX());\n        state.setPieCenterY(pieArea.getCenterY());\n        state.setPieWRadius(pieArea.getWidth() / 2.0);\n        state.setPieHRadius(pieArea.getHeight() / 2.0);\n        if ((this.dataset != null) && (this.dataset.getKeys().size() > 0)) {\n            java.util.List keys = this.dataset.getKeys();\n            double totalValue = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(this.dataset);\n            int passesRequired = state.getPassesRequired();\n            for (int pass = 0; pass < passesRequired; pass++) {\n                double runningTotal = 0.0;\n                for (int section = 0; section < keys.size(); section++) {\n                    java.lang.Number n = this.dataset.getValue(section);\n                    if (n != null) {\n                        double value = n.doubleValue();\n                        if (value > 0.0) {\n                            runningTotal += value;\n                            drawItem(g2, section, explodeArea, state, pass);\n                        }\n                    }\n                }\n            }\n            if (this.simpleLabels) {\n                drawSimpleLabels(g2, keys, totalValue, plotArea, linkArea, state);\n            } else {\n                drawLabels(g2, keys, totalValue, plotArea, linkArea, state);\n            }\n        } else {\n            drawNoDataMessage(g2, plotArea);\n        }\n    }\n\n    protected void drawItem(java.awt.Graphics2D g2, int section, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PiePlotState state, int currentPass) {\n        java.lang.Number n = this.dataset.getValue(section);\n        if (n == null) {\n            return;\n        }\n        double value = n.doubleValue();\n        double angle1 = 0.0;\n        double angle2 = 0.0;\n        if (this.direction == org.jfree.chart.util.Rotation.CLOCKWISE) {\n            angle1 = state.getLatestAngle();\n            angle2 = angle1 - ((value / state.getTotal()) * 360.0);\n        } else if (this.direction == org.jfree.chart.util.Rotation.ANTICLOCKWISE) {\n            angle1 = state.getLatestAngle();\n            angle2 = angle1 + ((value / state.getTotal()) * 360.0);\n        } else {\n            throw new java.lang.IllegalStateException(\"Rotation type not recognised.\");\n        }\n        double angle = angle2 - angle1;\n        if (java.lang.Math.abs(angle) > getMinimumArcAngleToDraw()) {\n            double ep = 0.0;\n            double mep = getMaximumExplodePercent();\n            if (mep > 0.0) {\n                ep = getExplodePercent(getSectionKey(section)) / mep;\n            }\n            java.awt.geom.Rectangle2D arcBounds = getArcBounds(state.getPieArea(), state.getExplodedPieArea(), angle1, angle, ep);\n            java.awt.geom.Arc2D.Double arc = new java.awt.geom.Arc2D.Double(arcBounds, angle1, angle, java.awt.geom.Arc2D.PIE);\n            if (currentPass == 0) {\n                if (this.shadowPaint != null) {\n                    java.awt.Shape shadowArc = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(arc, ((float) (this.shadowXOffset)), ((float) (this.shadowYOffset)));\n                    g2.setPaint(this.shadowPaint);\n                    g2.fill(shadowArc);\n                }\n            } else if (currentPass == 1) {\n                java.lang.Comparable key = getSectionKey(section);\n                java.awt.Paint paint = lookupSectionPaint(key, true);\n                g2.setPaint(paint);\n                g2.fill(arc);\n                java.awt.Paint outlinePaint = lookupSectionOutlinePaint(key);\n                java.awt.Stroke outlineStroke = lookupSectionOutlineStroke(key);\n                if (this.sectionOutlinesVisible) {\n                    g2.setPaint(outlinePaint);\n                    g2.setStroke(outlineStroke);\n                    g2.draw(arc);\n                }\n                if (state.getInfo() != null) {\n                    org.jfree.chart.entity.EntityCollection entities = state.getEntityCollection();\n                    if (entities != null) {\n                        java.lang.String tip = null;\n                        if (this.toolTipGenerator != null) {\n                            tip = this.toolTipGenerator.generateToolTip(this.dataset, key);\n                        }\n                        java.lang.String url = null;\n                        if (this.urlGenerator != null) {\n                            url = this.urlGenerator.generateURL(this.dataset, key, this.pieIndex);\n                        }\n                        org.jfree.chart.entity.PieSectionEntity entity = new org.jfree.chart.entity.PieSectionEntity(arc, this.dataset, this.pieIndex, section, key, tip, url);\n                        entities.add(entity);\n                    }\n                }\n            }\n        }\n        state.setLatestAngle(angle2);\n    }\n\n    protected void drawSimpleLabels(java.awt.Graphics2D g2, java.util.List keys, double totalValue, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D pieArea, org.jfree.chart.plot.PiePlotState state) {\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0F));\n        org.jfree.chart.util.RectangleInsets labelInsets = new org.jfree.chart.util.RectangleInsets(org.jfree.chart.util.UnitType.RELATIVE, 0.18, 0.18, 0.18, 0.18);\n        java.awt.geom.Rectangle2D labelsArea = labelInsets.createInsetRectangle(pieArea);\n        double runningTotal = 0.0;\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            boolean include = true;\n            double v = 0.0;\n            java.lang.Number n = getDataset().getValue(key);\n            if (n == null) {\n                include = !getIgnoreNullValues();\n            } else {\n                v = n.doubleValue();\n                include = (getIgnoreZeroValues()) ? v > 0.0 : v >= 0.0;\n            }\n            if (include) {\n                runningTotal = runningTotal + v;\n                double mid = getStartAngle() + ((getDirection().getFactor() * ((runningTotal - (v / 2.0)) * 360)) / totalValue);\n                java.awt.geom.Arc2D arc = new java.awt.geom.Arc2D.Double(labelsArea, getStartAngle(), mid - getStartAngle(), java.awt.geom.Arc2D.OPEN);\n                int x = ((int) (arc.getEndPoint().getX()));\n                int y = ((int) (arc.getEndPoint().getY()));\n                org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator = getLabelGenerator();\n                if (labelGenerator == null) {\n                    continue;\n                }\n                java.lang.String label = labelGenerator.generateSectionLabel(this.dataset, key);\n                if (label == null) {\n                    continue;\n                }\n                g2.setFont(this.labelFont);\n                java.awt.FontMetrics fm = g2.getFontMetrics();\n                java.awt.geom.Rectangle2D bounds = org.jfree.chart.text.TextUtilities.getTextBounds(label, g2, fm);\n                java.awt.geom.Rectangle2D out = this.labelPadding.createOutsetRectangle(bounds);\n                java.awt.Shape bg = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(out, x - bounds.getCenterX(), y - bounds.getCenterY());\n                if (this.labelShadowPaint != null) {\n                    java.awt.Shape shadow = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(bg, this.shadowXOffset, this.shadowYOffset);\n                    g2.setPaint(this.labelShadowPaint);\n                    g2.fill(shadow);\n                }\n                if (this.labelBackgroundPaint != null) {\n                    g2.setPaint(this.labelBackgroundPaint);\n                    g2.fill(bg);\n                }\n                if ((this.labelOutlinePaint != null) && (this.labelOutlineStroke != null)) {\n                    g2.setPaint(this.labelOutlinePaint);\n                    g2.setStroke(this.labelOutlineStroke);\n                    g2.draw(bg);\n                }\n                g2.setPaint(this.labelPaint);\n                g2.setFont(this.labelFont);\n                org.jfree.chart.text.TextUtilities.drawAlignedString(getLabelGenerator().generateSectionLabel(getDataset(), key), g2, x, y, TextAnchor.CENTER);\n            }\n        } \n        g2.setComposite(originalComposite);\n    }\n\n    protected void drawLabels(java.awt.Graphics2D g2, java.util.List keys, double totalValue, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, org.jfree.chart.plot.PiePlotState state) {\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0F));\n        org.jfree.data.DefaultKeyedValues leftKeys = new org.jfree.data.DefaultKeyedValues();\n        org.jfree.data.DefaultKeyedValues rightKeys = new org.jfree.data.DefaultKeyedValues();\n        double runningTotal = 0.0;\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            boolean include = true;\n            double v = 0.0;\n            java.lang.Number n = this.dataset.getValue(key);\n            if (n == null) {\n                include = !this.ignoreNullValues;\n            } else {\n                v = n.doubleValue();\n                include = (this.ignoreZeroValues) ? v > 0.0 : v >= 0.0;\n            }\n            if (include) {\n                runningTotal = runningTotal + v;\n                double mid = this.startAngle + ((this.direction.getFactor() * ((runningTotal - (v / 2.0)) * 360)) / totalValue);\n                if (java.lang.Math.cos(java.lang.Math.toRadians(mid)) < 0.0) {\n                    leftKeys.addValue(key, new java.lang.Double(mid));\n                } else {\n                    rightKeys.addValue(key, new java.lang.Double(mid));\n                }\n            }\n        } \n        g2.setFont(getLabelFont());\n        double marginX = plotArea.getX() + (this.interiorGap * plotArea.getWidth());\n        double gap = plotArea.getWidth() * this.labelGap;\n        double ww = (linkArea.getX() - gap) - marginX;\n        float labelWidth = ((float) (this.labelPadding.trimWidth(ww)));\n        if (this.labelGenerator != null) {\n            drawLeftLabels(leftKeys, g2, plotArea, linkArea, labelWidth, state);\n            drawRightLabels(rightKeys, g2, plotArea, linkArea, labelWidth, state);\n        }\n        g2.setComposite(originalComposite);\n    }\n\n    protected void drawLeftLabels(org.jfree.data.KeyedValues leftKeys, java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, float maxLabelWidth, org.jfree.chart.plot.PiePlotState state) {\n        this.labelDistributor.clear();\n        double lGap = plotArea.getWidth() * this.labelGap;\n        double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;\n        for (int i = 0; i < leftKeys.getItemCount(); i++) {\n            java.lang.String label = this.labelGenerator.generateSectionLabel(this.dataset, leftKeys.getKey(i));\n            if (label != null) {\n                org.jfree.chart.text.TextBlock block = org.jfree.chart.text.TextUtilities.createTextBlock(label, this.labelFont, this.labelPaint, maxLabelWidth, new org.jfree.chart.text.G2TextMeasurer(g2));\n                org.jfree.chart.text.TextBox labelBox = new org.jfree.chart.text.TextBox(block);\n                labelBox.setBackgroundPaint(this.labelBackgroundPaint);\n                labelBox.setOutlinePaint(this.labelOutlinePaint);\n                labelBox.setOutlineStroke(this.labelOutlineStroke);\n                labelBox.setShadowPaint(this.labelShadowPaint);\n                labelBox.setInteriorGap(this.labelPadding);\n                double theta = java.lang.Math.toRadians(leftKeys.getValue(i).doubleValue());\n                double baseY = state.getPieCenterY() - (java.lang.Math.sin(theta) * verticalLinkRadius);\n                double hh = labelBox.getHeight(g2);\n                this.labelDistributor.addPieLabelRecord(new org.jfree.chart.plot.PieLabelRecord(leftKeys.getKey(i), theta, baseY, labelBox, hh, (lGap / 2.0) + ((lGap / 2.0) * (-java.lang.Math.cos(theta))), 0.9 + getExplodePercent(leftKeys.getKey(i))));\n            }\n        }\n        this.labelDistributor.distributeLabels(plotArea.getMinY(), plotArea.getHeight());\n        for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {\n            drawLeftLabel(g2, state, this.labelDistributor.getPieLabelRecord(i));\n        }\n    }\n\n    protected void drawRightLabels(org.jfree.data.KeyedValues keys, java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, float maxLabelWidth, org.jfree.chart.plot.PiePlotState state) {\n        this.labelDistributor.clear();\n        double lGap = plotArea.getWidth() * this.labelGap;\n        double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;\n        for (int i = 0; i < keys.getItemCount(); i++) {\n            java.lang.String label = this.labelGenerator.generateSectionLabel(this.dataset, keys.getKey(i));\n            if (label != null) {\n                org.jfree.chart.text.TextBlock block = org.jfree.chart.text.TextUtilities.createTextBlock(label, this.labelFont, this.labelPaint, maxLabelWidth, new org.jfree.chart.text.G2TextMeasurer(g2));\n                org.jfree.chart.text.TextBox labelBox = new org.jfree.chart.text.TextBox(block);\n                labelBox.setBackgroundPaint(this.labelBackgroundPaint);\n                labelBox.setOutlinePaint(this.labelOutlinePaint);\n                labelBox.setOutlineStroke(this.labelOutlineStroke);\n                labelBox.setShadowPaint(this.labelShadowPaint);\n                labelBox.setInteriorGap(this.labelPadding);\n                double theta = java.lang.Math.toRadians(keys.getValue(i).doubleValue());\n                double baseY = state.getPieCenterY() - (java.lang.Math.sin(theta) * verticalLinkRadius);\n                double hh = labelBox.getHeight(g2);\n                this.labelDistributor.addPieLabelRecord(new org.jfree.chart.plot.PieLabelRecord(keys.getKey(i), theta, baseY, labelBox, hh, (lGap / 2.0) + ((lGap / 2.0) * java.lang.Math.cos(theta)), 0.9 + getExplodePercent(keys.getKey(i))));\n            }\n        }\n        this.labelDistributor.distributeLabels(plotArea.getMinY(), plotArea.getHeight());\n        for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {\n            drawRightLabel(g2, state, this.labelDistributor.getPieLabelRecord(i));\n        }\n    }\n\n    public org.jfree.chart.LegendItemCollection getLegendItems() {\n        org.jfree.chart.LegendItemCollection result = new org.jfree.chart.LegendItemCollection();\n        if (this.dataset == null) {\n            return result;\n        }\n        java.util.List keys = this.dataset.getKeys();\n        int section = 0;\n        java.awt.Shape shape = getLegendItemShape();\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            java.lang.Number n = this.dataset.getValue(key);\n            boolean include = true;\n            if (n == null) {\n                include = !this.ignoreNullValues;\n            } else {\n                double v = n.doubleValue();\n                if (v == 0.0) {\n                    include = !this.ignoreZeroValues;\n                } else {\n                    include = v > 0.0;\n                }\n            }\n            if (include) {\n                java.lang.String label = this.legendLabelGenerator.generateSectionLabel(this.dataset, key);\n                if (label != null) {\n                    java.lang.String description = label;\n                    java.lang.String toolTipText = null;\n                    if (this.legendLabelToolTipGenerator != null) {\n                        toolTipText = this.legendLabelToolTipGenerator.generateSectionLabel(this.dataset, key);\n                    }\n                    java.lang.String urlText = null;\n                    if (this.legendLabelURLGenerator != null) {\n                        urlText = this.legendLabelURLGenerator.generateURL(this.dataset, key, this.pieIndex);\n                    }\n                    java.awt.Paint paint = lookupSectionPaint(key, true);\n                    java.awt.Paint outlinePaint = lookupSectionOutlinePaint(key);\n                    java.awt.Stroke outlineStroke = lookupSectionOutlineStroke(key);\n                    org.jfree.chart.LegendItem item = new org.jfree.chart.LegendItem(label, description, toolTipText, urlText, true, shape, true, paint, true, outlinePaint, outlineStroke, false, new java.awt.geom.Line2D.Float(), new java.awt.BasicStroke(), java.awt.Color.black);\n                    item.setDataset(getDataset());\n                    result.add(item);\n                }\n                section++;\n            } else {\n                section++;\n            }\n        } \n        return result;\n    }\n\n    public java.lang.String getPlotType() {\n        return org.jfree.chart.plot.PiePlot.localizationResources.getString(\"Pie_Plot\");\n    }\n\n    protected java.awt.geom.Rectangle2D getArcBounds(java.awt.geom.Rectangle2D unexploded, java.awt.geom.Rectangle2D exploded, double angle, double extent, double explodePercent) {\n        if (explodePercent == 0.0) {\n            return unexploded;\n        } else {\n            java.awt.geom.Arc2D arc1 = new java.awt.geom.Arc2D.Double(unexploded, angle, extent / 2, java.awt.geom.Arc2D.OPEN);\n            java.awt.geom.Point2D point1 = arc1.getEndPoint();\n            java.awt.geom.Arc2D.Double arc2 = new java.awt.geom.Arc2D.Double(exploded, angle, extent / 2, java.awt.geom.Arc2D.OPEN);\n            java.awt.geom.Point2D point2 = arc2.getEndPoint();\n            double deltaX = (point1.getX() - point2.getX()) * explodePercent;\n            double deltaY = (point1.getY() - point2.getY()) * explodePercent;\n            return new java.awt.geom.Rectangle2D.Double(unexploded.getX() - deltaX, unexploded.getY() - deltaY, unexploded.getWidth(), unexploded.getHeight());\n        }\n    }\n\n    protected void drawLeftLabel(java.awt.Graphics2D g2, org.jfree.chart.plot.PiePlotState state, org.jfree.chart.plot.PieLabelRecord record) {\n        double anchorX = state.getLinkArea().getMinX();\n        double targetX = anchorX - record.getGap();\n        double targetY = record.getAllocatedY();\n        if (this.labelLinksVisible) {\n            double theta = record.getAngle();\n            double linkX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getPieWRadius()) * record.getLinkPercent());\n            double linkY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getPieHRadius()) * record.getLinkPercent());\n            double elbowX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getLinkArea().getWidth()) / 2.0);\n            double elbowY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getLinkArea().getHeight()) / 2.0);\n            double anchorY = elbowY;\n            g2.setPaint(this.labelLinkPaint);\n            g2.setStroke(this.labelLinkStroke);\n            g2.draw(new java.awt.geom.Line2D.Double(linkX, linkY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, targetX, targetY));\n        }\n        org.jfree.chart.text.TextBox tb = record.getLabel();\n        tb.draw(g2, ((float) (targetX)), ((float) (targetY)), RectangleAnchor.RIGHT);\n    }\n\n    protected void drawRightLabel(java.awt.Graphics2D g2, org.jfree.chart.plot.PiePlotState state, org.jfree.chart.plot.PieLabelRecord record) {\n        double anchorX = state.getLinkArea().getMaxX();\n        double targetX = anchorX + record.getGap();\n        double targetY = record.getAllocatedY();\n        if (this.labelLinksVisible) {\n            double theta = record.getAngle();\n            double linkX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getPieWRadius()) * record.getLinkPercent());\n            double linkY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getPieHRadius()) * record.getLinkPercent());\n            double elbowX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getLinkArea().getWidth()) / 2.0);\n            double elbowY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getLinkArea().getHeight()) / 2.0);\n            double anchorY = elbowY;\n            g2.setPaint(this.labelLinkPaint);\n            g2.setStroke(this.labelLinkStroke);\n            g2.draw(new java.awt.geom.Line2D.Double(linkX, linkY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, targetX, targetY));\n        }\n        org.jfree.chart.text.TextBox tb = record.getLabel();\n        tb.draw(g2, ((float) (targetX)), ((float) (targetY)), RectangleAnchor.LEFT);\n    }\n\n    public boolean equals(java.lang.Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof org.jfree.chart.plot.PiePlot)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        org.jfree.chart.plot.PiePlot that = ((org.jfree.chart.plot.PiePlot) (obj));\n        if (this.pieIndex != that.pieIndex) {\n            return false;\n        }\n        if (this.interiorGap != that.interiorGap) {\n            return false;\n        }\n        if (this.circular != that.circular) {\n            return false;\n        }\n        if (this.startAngle != that.startAngle) {\n            return false;\n        }\n        if (this.direction != that.direction) {\n            return false;\n        }\n        if (this.ignoreZeroValues != that.ignoreZeroValues) {\n            return false;\n        }\n        if (this.ignoreNullValues != that.ignoreNullValues) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionPaintMap, that.sectionPaintMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.baseSectionPaint, that.baseSectionPaint)) {\n            return false;\n        }\n        if (this.sectionOutlinesVisible != that.sectionOutlinesVisible) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionOutlinePaintMap, that.sectionOutlinePaintMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.baseSectionOutlinePaint, that.baseSectionOutlinePaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionOutlineStrokeMap, that.sectionOutlineStrokeMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.baseSectionOutlineStroke, that.baseSectionOutlineStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (!(this.shadowXOffset == that.shadowXOffset)) {\n            return false;\n        }\n        if (!(this.shadowYOffset == that.shadowYOffset)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.explodePercentages, that.explodePercentages)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelGenerator, that.labelGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelBackgroundPaint, that.labelBackgroundPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelOutlinePaint, that.labelOutlinePaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelOutlineStroke, that.labelOutlineStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelShadowPaint, that.labelShadowPaint)) {\n            return false;\n        }\n        if (this.simpleLabels != that.simpleLabels) {\n            return false;\n        }\n        if (!this.simpleLabelOffset.equals(that.simpleLabelOffset)) {\n            return false;\n        }\n        if (!this.labelPadding.equals(that.labelPadding)) {\n            return false;\n        }\n        if (!(this.maximumLabelWidth == that.maximumLabelWidth)) {\n            return false;\n        }\n        if (!(this.labelGap == that.labelGap)) {\n            return false;\n        }\n        if (!(this.labelLinkMargin == that.labelLinkMargin)) {\n            return false;\n        }\n        if (this.labelLinksVisible != that.labelLinksVisible) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelLinkPaint, that.labelLinkPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelLinkStroke, that.labelLinkStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.toolTipGenerator, that.toolTipGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.urlGenerator, that.urlGenerator)) {\n            return false;\n        }\n        if (!(this.minimumArcAngleToDraw == that.minimumArcAngleToDraw)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ShapeUtilities.equal(this.legendItemShape, that.legendItemShape)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelGenerator, that.legendLabelGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelToolTipGenerator, that.legendLabelToolTipGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelURLGenerator, that.legendLabelURLGenerator)) {\n            return false;\n        }\n        return true;\n    }\n\n    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {\n        org.jfree.chart.plot.PiePlot clone = ((org.jfree.chart.plot.PiePlot) (super.clone()));\n        if (clone.dataset != null) {\n            clone.dataset.addChangeListener(clone);\n        }\n        if (this.urlGenerator instanceof org.jfree.chart.util.PublicCloneable) {\n            clone.urlGenerator = ((org.jfree.chart.urls.PieURLGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.urlGenerator)));\n        }\n        clone.legendItemShape = org.jfree.chart.util.ShapeUtilities.clone(this.legendItemShape);\n        if (this.legendLabelGenerator != null) {\n            clone.legendLabelGenerator = ((org.jfree.chart.labels.PieSectionLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelGenerator)));\n        }\n        if (this.legendLabelToolTipGenerator != null) {\n            clone.legendLabelToolTipGenerator = ((org.jfree.chart.labels.PieSectionLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelToolTipGenerator)));\n        }\n        if (this.legendLabelURLGenerator instanceof org.jfree.chart.util.PublicCloneable) {\n            clone.legendLabelURLGenerator = ((org.jfree.chart.urls.PieURLGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelURLGenerator)));\n        }\n        return clone;\n    }\n\n    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {\n        stream.defaultWriteObject();\n        org.jfree.chart.util.SerialUtilities.writePaint(this.baseSectionPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.baseSectionOutlinePaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.baseSectionOutlineStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.shadowPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelBackgroundPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelOutlinePaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.labelOutlineStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelShadowPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelLinkPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.labelLinkStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writeShape(this.legendItemShape, stream);\n    }\n\n    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        stream.defaultReadObject();\n        this.baseSectionPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.baseSectionOutlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.baseSectionOutlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.shadowPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelBackgroundPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelOutlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelOutlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.labelShadowPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelLinkPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelLinkStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.legendItemShape = org.jfree.chart.util.SerialUtilities.readShape(stream);\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "public double getLabelGap() {\n    return this.maximumLabelWidth;\n}",
            "src_parent": "public class PiePlot extends org.jfree.chart.plot.Plot implements java.io.Serializable , java.lang.Cloneable {\n    private static final long serialVersionUID = -795612466005590431L;\n\n    public static final double DEFAULT_INTERIOR_GAP = 0.08;\n\n    public static final double MAX_INTERIOR_GAP = 0.4;\n\n    public static final double DEFAULT_START_ANGLE = 90.0;\n\n    public static final java.awt.Font DEFAULT_LABEL_FONT = new java.awt.Font(\"SansSerif\", java.awt.Font.PLAIN, 10);\n\n    public static final java.awt.Paint DEFAULT_LABEL_PAINT = java.awt.Color.black;\n\n    public static final java.awt.Paint DEFAULT_LABEL_BACKGROUND_PAINT = new java.awt.Color(255, 255, 192);\n\n    public static final java.awt.Paint DEFAULT_LABEL_OUTLINE_PAINT = java.awt.Color.black;\n\n    public static final java.awt.Stroke DEFAULT_LABEL_OUTLINE_STROKE = new java.awt.BasicStroke(0.5F);\n\n    public static final java.awt.Paint DEFAULT_LABEL_SHADOW_PAINT = new java.awt.Color(151, 151, 151, 128);\n\n    public static final double DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW = 1.0E-5;\n\n    private org.jfree.data.general.PieDataset dataset;\n\n    private int pieIndex;\n\n    private double interiorGap;\n\n    private boolean circular;\n\n    private double startAngle;\n\n    private org.jfree.chart.util.Rotation direction;\n\n    private org.jfree.chart.PaintMap sectionPaintMap;\n\n    private transient java.awt.Paint baseSectionPaint;\n\n    private boolean sectionOutlinesVisible;\n\n    private org.jfree.chart.PaintMap sectionOutlinePaintMap;\n\n    private transient java.awt.Paint baseSectionOutlinePaint;\n\n    private org.jfree.chart.StrokeMap sectionOutlineStrokeMap;\n\n    private transient java.awt.Stroke baseSectionOutlineStroke;\n\n    private transient java.awt.Paint shadowPaint = java.awt.Color.gray;\n\n    private double shadowXOffset = 4.0F;\n\n    private double shadowYOffset = 4.0F;\n\n    private java.util.Map explodePercentages;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator;\n\n    private java.awt.Font labelFont;\n\n    private transient java.awt.Paint labelPaint;\n\n    private transient java.awt.Paint labelBackgroundPaint;\n\n    private transient java.awt.Paint labelOutlinePaint;\n\n    private transient java.awt.Stroke labelOutlineStroke;\n\n    private transient java.awt.Paint labelShadowPaint;\n\n    private boolean simpleLabels = true;\n\n    private org.jfree.chart.util.RectangleInsets labelPadding;\n\n    private org.jfree.chart.util.RectangleInsets simpleLabelOffset;\n\n    private double maximumLabelWidth = 0.14;\n\n    private double labelGap = 0.025;\n\n    private boolean labelLinksVisible;\n\n    private double labelLinkMargin = 0.025;\n\n    private transient java.awt.Paint labelLinkPaint = java.awt.Color.black;\n\n    private transient java.awt.Stroke labelLinkStroke = new java.awt.BasicStroke(0.5F);\n\n    private org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor;\n\n    private org.jfree.chart.labels.PieToolTipGenerator toolTipGenerator;\n\n    private org.jfree.chart.urls.PieURLGenerator urlGenerator;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator legendLabelGenerator;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator legendLabelToolTipGenerator;\n\n    private org.jfree.chart.urls.PieURLGenerator legendLabelURLGenerator;\n\n    private boolean ignoreNullValues;\n\n    private boolean ignoreZeroValues;\n\n    private transient java.awt.Shape legendItemShape;\n\n    private double minimumArcAngleToDraw;\n\n    protected static java.util.ResourceBundle localizationResources = java.util.ResourceBundle.getBundle(\"org.jfree.chart.plot.LocalizationBundle\");\n\n    static final boolean DEBUG_DRAW_INTERIOR = false;\n\n    static final boolean DEBUG_DRAW_LINK_AREA = false;\n\n    static final boolean DEBUG_DRAW_PIE_AREA = false;\n\n    public PiePlot() {\n        this(null);\n    }\n\n    public PiePlot(org.jfree.data.general.PieDataset dataset) {\n        super();\n        this.dataset = dataset;\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n        this.pieIndex = 0;\n        this.interiorGap = org.jfree.chart.plot.PiePlot.DEFAULT_INTERIOR_GAP;\n        this.circular = true;\n        this.startAngle = org.jfree.chart.plot.PiePlot.DEFAULT_START_ANGLE;\n        this.direction = org.jfree.chart.util.Rotation.CLOCKWISE;\n        this.minimumArcAngleToDraw = org.jfree.chart.plot.PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW;\n        this.sectionPaintMap = new org.jfree.chart.PaintMap();\n        this.baseSectionPaint = java.awt.Color.gray;\n        this.sectionOutlinesVisible = true;\n        this.sectionOutlinePaintMap = new org.jfree.chart.PaintMap();\n        this.baseSectionOutlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.sectionOutlineStrokeMap = new org.jfree.chart.StrokeMap();\n        this.baseSectionOutlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.explodePercentages = new java.util.TreeMap();\n        this.labelGenerator = new org.jfree.chart.labels.StandardPieSectionLabelGenerator();\n        this.labelFont = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT;\n        this.labelPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT;\n        this.labelBackgroundPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT;\n        this.labelOutlinePaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT;\n        this.labelOutlineStroke = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;\n        this.labelShadowPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT;\n        this.labelLinksVisible = true;\n        this.labelDistributor = new org.jfree.chart.plot.PieLabelDistributor(0);\n        this.simpleLabels = false;\n        this.simpleLabelOffset = new org.jfree.chart.util.RectangleInsets(org.jfree.chart.util.UnitType.RELATIVE, 0.18, 0.18, 0.18, 0.18);\n        this.labelPadding = new org.jfree.chart.util.RectangleInsets(2, 2, 2, 2);\n        this.toolTipGenerator = null;\n        this.urlGenerator = null;\n        this.legendLabelGenerator = new org.jfree.chart.labels.StandardPieSectionLabelGenerator();\n        this.legendLabelToolTipGenerator = null;\n        this.legendLabelURLGenerator = null;\n        this.legendItemShape = Plot.DEFAULT_LEGEND_ITEM_CIRCLE;\n        this.ignoreNullValues = false;\n        this.ignoreZeroValues = false;\n    }\n\n    public org.jfree.data.general.PieDataset getDataset() {\n        return this.dataset;\n    }\n\n    public void setDataset(org.jfree.data.general.PieDataset dataset) {\n        org.jfree.data.general.PieDataset existing = this.dataset;\n        if (existing != null) {\n            existing.removeChangeListener(this);\n        }\n        this.dataset = dataset;\n        if (dataset != null) {\n            setDatasetGroup(dataset.getGroup());\n            dataset.addChangeListener(this);\n        }\n        org.jfree.data.general.DatasetChangeEvent event = new org.jfree.data.general.DatasetChangeEvent(this, dataset);\n        datasetChanged(event);\n    }\n\n    public int getPieIndex() {\n        return this.pieIndex;\n    }\n\n    public void setPieIndex(int index) {\n        this.pieIndex = index;\n    }\n\n    public double getStartAngle() {\n        return this.interiorGap;\n    }\n\n    public void setStartAngle(double angle) {\n        this.startAngle = angle;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.Rotation getDirection() {\n        return this.direction;\n    }\n\n    public void setDirection(org.jfree.chart.util.Rotation direction) {\n        if (direction == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'direction' argument.\");\n        }\n        this.direction = direction;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getInteriorGap() {\n        return this.interiorGap;\n    }\n\n    public void setInteriorGap(double percent) {\n        if ((percent < 0.0) || (percent > org.jfree.chart.plot.PiePlot.MAX_INTERIOR_GAP)) {\n            throw new java.lang.IllegalArgumentException((\"Invalid 'percent' (\" + percent) + \") argument.\");\n        }\n        if (this.interiorGap != percent) {\n            this.interiorGap = percent;\n            notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n        }\n    }\n\n    public boolean isCircular() {\n        return this.circular;\n    }\n\n    public void setCircular(boolean flag) {\n        setCircular(flag, true);\n    }\n\n    public void setCircular(boolean circular, boolean notify) {\n        this.circular = circular;\n        if (notify) {\n            notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n        }\n    }\n\n    public boolean getIgnoreNullValues() {\n        return this.ignoreNullValues;\n    }\n\n    public void setIgnoreNullValues(boolean flag) {\n        this.ignoreNullValues = flag;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getIgnoreZeroValues() {\n        return this.ignoreZeroValues;\n    }\n\n    public void setIgnoreZeroValues(boolean flag) {\n        this.ignoreZeroValues = flag;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Paint lookupSectionPaint(java.lang.Comparable key) {\n        return lookupSectionPaint(key, false);\n    }\n\n    protected java.awt.Paint lookupSectionPaint(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Paint result = null;\n        result = this.sectionPaintMap.getPaint(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextPaint();\n                this.sectionPaintMap.put(key, result);\n            } else {\n                result = this.baseSectionPaint;\n            }\n        } else {\n            result = this.baseSectionPaint;\n        }\n        return result;\n    }\n\n    protected java.lang.Comparable getSectionKey(int section) {\n        java.lang.Comparable key = null;\n        if (this.dataset != null) {\n            if ((section >= 0) && (section < this.dataset.getItemCount())) {\n                key = this.dataset.getKey(section);\n            }\n        }\n        if (key == null) {\n            key = new java.lang.Integer(section);\n        }\n        return key;\n    }\n\n    public java.awt.Paint getSectionPaint(java.lang.Comparable key) {\n        return this.sectionPaintMap.getPaint(key);\n    }\n\n    public void setSectionPaint(java.lang.Comparable key, java.awt.Paint paint) {\n        this.sectionPaintMap.put(key, paint);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getBaseSectionPaint() {\n        return this.baseSectionPaint;\n    }\n\n    public void setBaseSectionPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.baseSectionPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getSectionOutlinesVisible() {\n        return this.sectionOutlinesVisible;\n    }\n\n    public void setSectionOutlinesVisible(boolean visible) {\n        this.sectionOutlinesVisible = visible;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable key) {\n        return lookupSectionOutlinePaint(key, false);\n    }\n\n    protected java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Paint result = null;\n        result = this.sectionOutlinePaintMap.getPaint(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextOutlinePaint();\n                this.sectionOutlinePaintMap.put(key, result);\n            } else {\n                result = this.baseSectionOutlinePaint;\n            }\n        } else {\n            result = this.baseSectionOutlinePaint;\n        }\n        return result;\n    }\n\n    public java.awt.Paint getSectionOutlinePaint(java.lang.Comparable key) {\n        return this.sectionOutlinePaintMap.getPaint(key);\n    }\n\n    public void setSectionOutlinePaint(java.lang.Comparable key, java.awt.Paint paint) {\n        this.sectionOutlinePaintMap.put(key, paint);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getBaseSectionOutlinePaint() {\n        return this.baseSectionOutlinePaint;\n    }\n\n    public void setBaseSectionOutlinePaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.baseSectionOutlinePaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable key) {\n        return lookupSectionOutlineStroke(key, false);\n    }\n\n    protected java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Stroke result = null;\n        result = this.sectionOutlineStrokeMap.getStroke(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextOutlineStroke();\n                this.sectionOutlineStrokeMap.put(key, result);\n            } else {\n                result = this.baseSectionOutlineStroke;\n            }\n        } else {\n            result = this.baseSectionOutlineStroke;\n        }\n        return result;\n    }\n\n    public java.awt.Stroke getSectionOutlineStroke(java.lang.Comparable key) {\n        return this.sectionOutlineStrokeMap.getStroke(key);\n    }\n\n    public void setSectionOutlineStroke(java.lang.Comparable key, java.awt.Stroke stroke) {\n        this.sectionOutlineStrokeMap.put(key, stroke);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getBaseSectionOutlineStroke() {\n        return this.baseSectionOutlineStroke;\n    }\n\n    public void setBaseSectionOutlineStroke(java.awt.Stroke stroke) {\n        if (stroke == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        this.baseSectionOutlineStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getShadowPaint() {\n        return this.shadowPaint;\n    }\n\n    public void setShadowPaint(java.awt.Paint paint) {\n        this.shadowPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getShadowXOffset() {\n        return this.shadowXOffset;\n    }\n\n    public void setShadowXOffset(double offset) {\n        this.shadowXOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getShadowYOffset() {\n        return this.shadowYOffset;\n    }\n\n    public void setShadowYOffset(double offset) {\n        this.shadowYOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getExplodePercent(java.lang.Comparable key) {\n        double result = 0.0;\n        if (this.explodePercentages != null) {\n            java.lang.Number percent = ((java.lang.Number) (this.explodePercentages.get(key)));\n            if (percent != null) {\n                result = percent.doubleValue();\n            }\n        }\n        return result;\n    }\n\n    public void setExplodePercent(java.lang.Comparable key, double percent) {\n        if (key == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        if (this.explodePercentages == null) {\n            this.explodePercentages = new java.util.TreeMap();\n        }\n        this.explodePercentages.put(key, new java.lang.Double(percent));\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        java.util.Iterator iterator = this.dataset.getKeys().iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            java.lang.Number explode = ((java.lang.Number) (this.explodePercentages.get(key)));\n            if (explode != null) {\n                result = java.lang.Math.max(result, explode.doubleValue());\n            }\n        } \n        return result;\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLabelGenerator() {\n        return this.labelGenerator;\n    }\n\n    public void setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        this.labelGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getLabelGap() {\n        return this.maximumLabelWidth;\n    }\n\n    public void setLabelGap(double gap) {\n        this.labelGap = gap;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMaximumLabelWidth() {\n        this.legendLabelURLGenerator = null;\n        return this.maximumLabelWidth;\n    }\n\n    public void setMaximumLabelWidth(double width) {\n        this.maximumLabelWidth = width;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getLabelLinksVisible() {\n        return this.labelLinksVisible;\n    }\n\n    public void setLabelLinksVisible(boolean visible) {\n        this.labelLinksVisible = visible;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getLabelLinkMargin() {\n        return this.startAngle;\n    }\n\n    public void setLabelLinkMargin(double margin) {\n        this.labelLinkMargin = margin;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelLinkPaint() {\n        return this.labelLinkPaint;\n    }\n\n    public void setLabelLinkPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.labelLinkPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getLabelLinkStroke() {\n        return this.labelLinkStroke;\n    }\n\n    public void setLabelLinkStroke(java.awt.Stroke stroke) {\n        if (stroke == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        this.labelLinkStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Font getLabelFont() {\n        return this.labelFont;\n    }\n\n    public void setLabelFont(java.awt.Font font) {\n        if (font == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'font' argument.\");\n        }\n        this.labelFont = font;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelPaint() {\n        return this.labelPaint;\n    }\n\n    public void setLabelPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.labelPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelBackgroundPaint() {\n        return this.labelBackgroundPaint;\n    }\n\n    public void setLabelBackgroundPaint(java.awt.Paint paint) {\n        this.labelBackgroundPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelOutlinePaint() {\n        return this.labelOutlinePaint;\n    }\n\n    public void setLabelOutlinePaint(java.awt.Paint paint) {\n        this.labelOutlinePaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getLabelOutlineStroke() {\n        return this.labelOutlineStroke;\n    }\n\n    public void setLabelOutlineStroke(java.awt.Stroke stroke) {\n        this.labelOutlineStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelShadowPaint() {\n        return this.labelShadowPaint;\n    }\n\n    public void setLabelShadowPaint(java.awt.Paint paint) {\n        this.labelShadowPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.RectangleInsets getLabelPadding() {\n        return this.labelPadding;\n    }\n\n    public void setLabelPadding(org.jfree.chart.util.RectangleInsets padding) {\n        if (padding == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'padding' argument.\");\n        }\n        this.labelPadding = padding;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getSimpleLabels() {\n        return this.simpleLabels;\n    }\n\n    public void setSimpleLabels(boolean simple) {\n        this.simpleLabels = simple;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.RectangleInsets getSimpleLabelOffset() {\n        return this.simpleLabelOffset;\n    }\n\n    public void setSimpleLabelOffset(org.jfree.chart.util.RectangleInsets offset) {\n        if (offset == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'offset' argument.\");\n        }\n        this.simpleLabelOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.plot.AbstractPieLabelDistributor getLabelDistributor() {\n        return this.labelDistributor;\n    }\n\n    public void setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor distributor) {\n        if (distributor == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'distributor' argument.\");\n        }\n        this.labelDistributor = distributor;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieToolTipGenerator getToolTipGenerator() {\n        return this.toolTipGenerator;\n    }\n\n    public void setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator generator) {\n        this.toolTipGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.urls.PieURLGenerator getURLGenerator() {\n        return this.urlGenerator;\n    }\n\n    public void setURLGenerator(org.jfree.chart.urls.PieURLGenerator generator) {\n        this.urlGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMinimumArcAngleToDraw() {\n        return this.minimumArcAngleToDraw;\n    }\n\n    public void setMinimumArcAngleToDraw(double angle) {\n        this.minimumArcAngleToDraw = angle;\n    }\n\n    public java.awt.Shape getLegendItemShape() {\n        return this.legendItemShape;\n    }\n\n    public void setLegendItemShape(java.awt.Shape shape) {\n        if (shape == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'shape' argument.\");\n        }\n        this.legendItemShape = shape;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLegendLabelGenerator() {\n        return this.legendLabelGenerator;\n    }\n\n    public void setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        if (generator == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'generator' argument.\");\n        }\n        this.legendLabelGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLegendLabelToolTipGenerator() {\n        return this.legendLabelToolTipGenerator;\n    }\n\n    public void setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        this.legendLabelToolTipGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.urls.PieURLGenerator getLegendLabelURLGenerator() {\n        return this.legendLabelURLGenerator;\n    }\n\n    public void setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator generator) {\n        this.legendLabelURLGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.plot.PiePlot plot, java.lang.Integer index, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.plot.PiePlotState state = new org.jfree.chart.plot.PiePlotState(info);\n        state.setPassesRequired(2);\n        state.setTotal(org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n    }\n\n    public void draw(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.awt.geom.Point2D anchor, org.jfree.chart.plot.PlotState parentState, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.util.RectangleInsets insets = getInsets();\n        insets.trim(area);\n        if (info != null) {\n            info.setPlotArea(area);\n            info.setDataArea(area);\n        }\n        drawBackground(g2, area);\n        drawOutline(g2, area);\n        java.awt.Shape savedClip = g2.getClip();\n        g2.clip(area);\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getForegroundAlpha()));\n        if (!org.jfree.data.general.DatasetUtilities.isEmptyOrNull(this.dataset)) {\n            drawPie(g2, area, info);\n        } else {\n            drawNoDataMessage(g2, area);\n        }\n        g2.setClip(savedClip);\n        g2.setComposite(originalComposite);\n        drawOutline(g2, area);\n    }\n\n    protected void drawPie(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.plot.PiePlotState state = initialise(g2, plotArea, this, null, info);\n        double labelReserve = 0.0;\n        if ((this.labelGenerator != null) && (!this.simpleLabels)) {\n            labelReserve = this.labelGap + this.maximumLabelWidth;\n        }\n        double gapHorizontal = (plotArea.getWidth() * (this.interiorGap + labelReserve)) * 2.0;\n        double gapVertical = (plotArea.getHeight() * this.interiorGap) * 2.0;\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_INTERIOR) {\n            double hGap = plotArea.getWidth() * this.interiorGap;\n            double vGap = plotArea.getHeight() * this.interiorGap;\n            double igx1 = plotArea.getX() + hGap;\n            double igx2 = plotArea.getMaxX() - hGap;\n            double igy1 = plotArea.getY() + vGap;\n            double igy2 = plotArea.getMaxY() - vGap;\n            g2.setPaint(java.awt.Color.gray);\n            g2.draw(new java.awt.geom.Rectangle2D.Double(igx1, igy1, igx2 - igx1, igy2 - igy1));\n        }\n        double linkX = plotArea.getX() + (gapHorizontal / 2);\n        double linkY = plotArea.getY() + (gapVertical / 2);\n        double linkW = plotArea.getWidth() - gapHorizontal;\n        double linkH = plotArea.getHeight() - gapVertical;\n        if (this.circular) {\n            double min = java.lang.Math.min(linkW, linkH) / 2;\n            linkX = (((linkX + linkX) + linkW) / 2) - min;\n            linkY = (((linkY + linkY) + linkH) / 2) - min;\n            linkW = 2 * min;\n            linkH = 2 * min;\n        }\n        java.awt.geom.Rectangle2D linkArea = new java.awt.geom.Rectangle2D.Double(linkX, linkY, linkW, linkH);\n        state.setLinkArea(linkArea);\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_LINK_AREA) {\n            g2.setPaint(java.awt.Color.blue);\n            g2.draw(linkArea);\n            g2.setPaint(java.awt.Color.yellow);\n            g2.draw(new java.awt.geom.Ellipse2D.Double(linkArea.getX(), linkArea.getY(), linkArea.getWidth(), linkArea.getHeight()));\n        }\n        double lm = 0.0;\n        if (!this.simpleLabels) {\n            lm = this.labelLinkMargin;\n        }\n        double hh = (linkArea.getWidth() * lm) * 2.0;\n        double vv = (linkArea.getHeight() * lm) * 2.0;\n        java.awt.geom.Rectangle2D explodeArea = new java.awt.geom.Rectangle2D.Double(linkX + (hh / 2.0), linkY + (vv / 2.0), linkW - hh, linkH - vv);\n        state.setExplodedPieArea(explodeArea);\n        double maximumExplodePercent = getMaximumExplodePercent();\n        double percent = maximumExplodePercent / (1.0 + maximumExplodePercent);\n        double h1 = explodeArea.getWidth() * percent;\n        double v1 = explodeArea.getHeight() * percent;\n        java.awt.geom.Rectangle2D pieArea = new java.awt.geom.Rectangle2D.Double(explodeArea.getX() + (h1 / 2.0), explodeArea.getY() + (v1 / 2.0), explodeArea.getWidth() - h1, explodeArea.getHeight() - v1);\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_PIE_AREA) {\n            g2.setPaint(java.awt.Color.green);\n            g2.draw(pieArea);\n        }\n        state.setPieArea(pieArea);\n        state.setPieCenterX(pieArea.getCenterX());\n        state.setPieCenterY(pieArea.getCenterY());\n        state.setPieWRadius(pieArea.getWidth() / 2.0);\n        state.setPieHRadius(pieArea.getHeight() / 2.0);\n        if ((this.dataset != null) && (this.dataset.getKeys().size() > 0)) {\n            java.util.List keys = this.dataset.getKeys();\n            double totalValue = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(this.dataset);\n            int passesRequired = state.getPassesRequired();\n            for (int pass = 0; pass < passesRequired; pass++) {\n                double runningTotal = 0.0;\n                for (int section = 0; section < keys.size(); section++) {\n                    java.lang.Number n = this.dataset.getValue(section);\n                    if (n != null) {\n                        double value = n.doubleValue();\n                        if (value > 0.0) {\n                            runningTotal += value;\n                            drawItem(g2, section, explodeArea, state, pass);\n                        }\n                    }\n                }\n            }\n            if (this.simpleLabels) {\n                drawSimpleLabels(g2, keys, totalValue, plotArea, linkArea, state);\n            } else {\n                drawLabels(g2, keys, totalValue, plotArea, linkArea, state);\n            }\n        } else {\n            drawNoDataMessage(g2, plotArea);\n        }\n    }\n\n    protected void drawItem(java.awt.Graphics2D g2, int section, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PiePlotState state, int currentPass) {\n        java.lang.Number n = this.dataset.getValue(section);\n        if (n == null) {\n            return;\n        }\n        double value = n.doubleValue();\n        double angle1 = 0.0;\n        double angle2 = 0.0;\n        if (this.direction == org.jfree.chart.util.Rotation.CLOCKWISE) {\n            angle1 = state.getLatestAngle();\n            angle2 = angle1 - ((value / state.getTotal()) * 360.0);\n        } else if (this.direction == org.jfree.chart.util.Rotation.ANTICLOCKWISE) {\n            angle1 = state.getLatestAngle();\n            angle2 = angle1 + ((value / state.getTotal()) * 360.0);\n        } else {\n            throw new java.lang.IllegalStateException(\"Rotation type not recognised.\");\n        }\n        double angle = angle2 - angle1;\n        if (java.lang.Math.abs(angle) > getMinimumArcAngleToDraw()) {\n            double ep = 0.0;\n            double mep = getMaximumExplodePercent();\n            if (mep > 0.0) {\n                ep = getExplodePercent(getSectionKey(section)) / mep;\n            }\n            java.awt.geom.Rectangle2D arcBounds = getArcBounds(state.getPieArea(), state.getExplodedPieArea(), angle1, angle, ep);\n            java.awt.geom.Arc2D.Double arc = new java.awt.geom.Arc2D.Double(arcBounds, angle1, angle, java.awt.geom.Arc2D.PIE);\n            if (currentPass == 0) {\n                if (this.shadowPaint != null) {\n                    java.awt.Shape shadowArc = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(arc, ((float) (this.shadowXOffset)), ((float) (this.shadowYOffset)));\n                    g2.setPaint(this.shadowPaint);\n                    g2.fill(shadowArc);\n                }\n            } else if (currentPass == 1) {\n                java.lang.Comparable key = getSectionKey(section);\n                java.awt.Paint paint = lookupSectionPaint(key, true);\n                g2.setPaint(paint);\n                g2.fill(arc);\n                java.awt.Paint outlinePaint = lookupSectionOutlinePaint(key);\n                java.awt.Stroke outlineStroke = lookupSectionOutlineStroke(key);\n                if (this.sectionOutlinesVisible) {\n                    g2.setPaint(outlinePaint);\n                    g2.setStroke(outlineStroke);\n                    g2.draw(arc);\n                }\n                if (state.getInfo() != null) {\n                    org.jfree.chart.entity.EntityCollection entities = state.getEntityCollection();\n                    if (entities != null) {\n                        java.lang.String tip = null;\n                        if (this.toolTipGenerator != null) {\n                            tip = this.toolTipGenerator.generateToolTip(this.dataset, key);\n                        }\n                        java.lang.String url = null;\n                        if (this.urlGenerator != null) {\n                            url = this.urlGenerator.generateURL(this.dataset, key, this.pieIndex);\n                        }\n                        org.jfree.chart.entity.PieSectionEntity entity = new org.jfree.chart.entity.PieSectionEntity(arc, this.dataset, this.pieIndex, section, key, tip, url);\n                        entities.add(entity);\n                    }\n                }\n            }\n        }\n        state.setLatestAngle(angle2);\n    }\n\n    protected void drawSimpleLabels(java.awt.Graphics2D g2, java.util.List keys, double totalValue, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D pieArea, org.jfree.chart.plot.PiePlotState state) {\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0F));\n        org.jfree.chart.util.RectangleInsets labelInsets = new org.jfree.chart.util.RectangleInsets(org.jfree.chart.util.UnitType.RELATIVE, 0.18, 0.18, 0.18, 0.18);\n        java.awt.geom.Rectangle2D labelsArea = labelInsets.createInsetRectangle(pieArea);\n        double runningTotal = 0.0;\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            boolean include = true;\n            double v = 0.0;\n            java.lang.Number n = getDataset().getValue(key);\n            if (n == null) {\n                include = !getIgnoreNullValues();\n            } else {\n                v = n.doubleValue();\n                include = (getIgnoreZeroValues()) ? v > 0.0 : v >= 0.0;\n            }\n            if (include) {\n                runningTotal = runningTotal + v;\n                double mid = getStartAngle() + ((getDirection().getFactor() * ((runningTotal - (v / 2.0)) * 360)) / totalValue);\n                java.awt.geom.Arc2D arc = new java.awt.geom.Arc2D.Double(labelsArea, getStartAngle(), mid - getStartAngle(), java.awt.geom.Arc2D.OPEN);\n                int x = ((int) (arc.getEndPoint().getX()));\n                int y = ((int) (arc.getEndPoint().getY()));\n                org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator = getLabelGenerator();\n                if (labelGenerator == null) {\n                    continue;\n                }\n                java.lang.String label = labelGenerator.generateSectionLabel(this.dataset, key);\n                if (label == null) {\n                    continue;\n                }\n                g2.setFont(this.labelFont);\n                java.awt.FontMetrics fm = g2.getFontMetrics();\n                java.awt.geom.Rectangle2D bounds = org.jfree.chart.text.TextUtilities.getTextBounds(label, g2, fm);\n                java.awt.geom.Rectangle2D out = this.labelPadding.createOutsetRectangle(bounds);\n                java.awt.Shape bg = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(out, x - bounds.getCenterX(), y - bounds.getCenterY());\n                if (this.labelShadowPaint != null) {\n                    java.awt.Shape shadow = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(bg, this.shadowXOffset, this.shadowYOffset);\n                    g2.setPaint(this.labelShadowPaint);\n                    g2.fill(shadow);\n                }\n                if (this.labelBackgroundPaint != null) {\n                    g2.setPaint(this.labelBackgroundPaint);\n                    g2.fill(bg);\n                }\n                if ((this.labelOutlinePaint != null) && (this.labelOutlineStroke != null)) {\n                    g2.setPaint(this.labelOutlinePaint);\n                    g2.setStroke(this.labelOutlineStroke);\n                    g2.draw(bg);\n                }\n                g2.setPaint(this.labelPaint);\n                g2.setFont(this.labelFont);\n                org.jfree.chart.text.TextUtilities.drawAlignedString(getLabelGenerator().generateSectionLabel(getDataset(), key), g2, x, y, TextAnchor.CENTER);\n            }\n        } \n        g2.setComposite(originalComposite);\n    }\n\n    protected void drawLabels(java.awt.Graphics2D g2, java.util.List keys, double totalValue, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, org.jfree.chart.plot.PiePlotState state) {\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0F));\n        org.jfree.data.DefaultKeyedValues leftKeys = new org.jfree.data.DefaultKeyedValues();\n        org.jfree.data.DefaultKeyedValues rightKeys = new org.jfree.data.DefaultKeyedValues();\n        double runningTotal = 0.0;\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            boolean include = true;\n            double v = 0.0;\n            java.lang.Number n = this.dataset.getValue(key);\n            if (n == null) {\n                include = !this.ignoreNullValues;\n            } else {\n                v = n.doubleValue();\n                include = (this.ignoreZeroValues) ? v > 0.0 : v >= 0.0;\n            }\n            if (include) {\n                runningTotal = runningTotal + v;\n                double mid = this.startAngle + ((this.direction.getFactor() * ((runningTotal - (v / 2.0)) * 360)) / totalValue);\n                if (java.lang.Math.cos(java.lang.Math.toRadians(mid)) < 0.0) {\n                    leftKeys.addValue(key, new java.lang.Double(mid));\n                } else {\n                    rightKeys.addValue(key, new java.lang.Double(mid));\n                }\n            }\n        } \n        g2.setFont(getLabelFont());\n        double marginX = plotArea.getX() + (this.interiorGap * plotArea.getWidth());\n        double gap = plotArea.getWidth() * this.labelGap;\n        double ww = (linkArea.getX() - gap) - marginX;\n        float labelWidth = ((float) (this.labelPadding.trimWidth(ww)));\n        if (this.labelGenerator != null) {\n            drawLeftLabels(leftKeys, g2, plotArea, linkArea, labelWidth, state);\n            drawRightLabels(rightKeys, g2, plotArea, linkArea, labelWidth, state);\n        }\n        g2.setComposite(originalComposite);\n    }\n\n    protected void drawLeftLabels(org.jfree.data.KeyedValues leftKeys, java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, float maxLabelWidth, org.jfree.chart.plot.PiePlotState state) {\n        this.labelDistributor.clear();\n        double lGap = plotArea.getWidth() * this.labelGap;\n        double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;\n        for (int i = 0; i < leftKeys.getItemCount(); i++) {\n            java.lang.String label = this.labelGenerator.generateSectionLabel(this.dataset, leftKeys.getKey(i));\n            if (label != null) {\n                org.jfree.chart.text.TextBlock block = org.jfree.chart.text.TextUtilities.createTextBlock(label, this.labelFont, this.labelPaint, maxLabelWidth, new org.jfree.chart.text.G2TextMeasurer(g2));\n                org.jfree.chart.text.TextBox labelBox = new org.jfree.chart.text.TextBox(block);\n                labelBox.setBackgroundPaint(this.labelBackgroundPaint);\n                labelBox.setOutlinePaint(this.labelOutlinePaint);\n                labelBox.setOutlineStroke(this.labelOutlineStroke);\n                labelBox.setShadowPaint(this.labelShadowPaint);\n                labelBox.setInteriorGap(this.labelPadding);\n                double theta = java.lang.Math.toRadians(leftKeys.getValue(i).doubleValue());\n                double baseY = state.getPieCenterY() - (java.lang.Math.sin(theta) * verticalLinkRadius);\n                double hh = labelBox.getHeight(g2);\n                this.labelDistributor.addPieLabelRecord(new org.jfree.chart.plot.PieLabelRecord(leftKeys.getKey(i), theta, baseY, labelBox, hh, (lGap / 2.0) + ((lGap / 2.0) * (-java.lang.Math.cos(theta))), 0.9 + getExplodePercent(leftKeys.getKey(i))));\n            }\n        }\n        this.labelDistributor.distributeLabels(plotArea.getMinY(), plotArea.getHeight());\n        for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {\n            drawLeftLabel(g2, state, this.labelDistributor.getPieLabelRecord(i));\n        }\n    }\n\n    protected void drawRightLabels(org.jfree.data.KeyedValues keys, java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, float maxLabelWidth, org.jfree.chart.plot.PiePlotState state) {\n        this.labelDistributor.clear();\n        double lGap = plotArea.getWidth() * this.labelGap;\n        double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;\n        for (int i = 0; i < keys.getItemCount(); i++) {\n            java.lang.String label = this.labelGenerator.generateSectionLabel(this.dataset, keys.getKey(i));\n            if (label != null) {\n                org.jfree.chart.text.TextBlock block = org.jfree.chart.text.TextUtilities.createTextBlock(label, this.labelFont, this.labelPaint, maxLabelWidth, new org.jfree.chart.text.G2TextMeasurer(g2));\n                org.jfree.chart.text.TextBox labelBox = new org.jfree.chart.text.TextBox(block);\n                labelBox.setBackgroundPaint(this.labelBackgroundPaint);\n                labelBox.setOutlinePaint(this.labelOutlinePaint);\n                labelBox.setOutlineStroke(this.labelOutlineStroke);\n                labelBox.setShadowPaint(this.labelShadowPaint);\n                labelBox.setInteriorGap(this.labelPadding);\n                double theta = java.lang.Math.toRadians(keys.getValue(i).doubleValue());\n                double baseY = state.getPieCenterY() - (java.lang.Math.sin(theta) * verticalLinkRadius);\n                double hh = labelBox.getHeight(g2);\n                this.labelDistributor.addPieLabelRecord(new org.jfree.chart.plot.PieLabelRecord(keys.getKey(i), theta, baseY, labelBox, hh, (lGap / 2.0) + ((lGap / 2.0) * java.lang.Math.cos(theta)), 0.9 + getExplodePercent(keys.getKey(i))));\n            }\n        }\n        this.labelDistributor.distributeLabels(plotArea.getMinY(), plotArea.getHeight());\n        for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {\n            drawRightLabel(g2, state, this.labelDistributor.getPieLabelRecord(i));\n        }\n    }\n\n    public org.jfree.chart.LegendItemCollection getLegendItems() {\n        org.jfree.chart.LegendItemCollection result = new org.jfree.chart.LegendItemCollection();\n        if (this.dataset == null) {\n            return result;\n        }\n        java.util.List keys = this.dataset.getKeys();\n        int section = 0;\n        java.awt.Shape shape = getLegendItemShape();\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            java.lang.Number n = this.dataset.getValue(key);\n            boolean include = true;\n            if (n == null) {\n                include = !this.ignoreNullValues;\n            } else {\n                double v = n.doubleValue();\n                if (v == 0.0) {\n                    include = !this.ignoreZeroValues;\n                } else {\n                    include = v > 0.0;\n                }\n            }\n            if (include) {\n                java.lang.String label = this.legendLabelGenerator.generateSectionLabel(this.dataset, key);\n                if (label != null) {\n                    java.lang.String description = label;\n                    java.lang.String toolTipText = null;\n                    if (this.legendLabelToolTipGenerator != null) {\n                        toolTipText = this.legendLabelToolTipGenerator.generateSectionLabel(this.dataset, key);\n                    }\n                    java.lang.String urlText = null;\n                    if (this.legendLabelURLGenerator != null) {\n                        urlText = this.legendLabelURLGenerator.generateURL(this.dataset, key, this.pieIndex);\n                    }\n                    java.awt.Paint paint = lookupSectionPaint(key, true);\n                    java.awt.Paint outlinePaint = lookupSectionOutlinePaint(key);\n                    java.awt.Stroke outlineStroke = lookupSectionOutlineStroke(key);\n                    org.jfree.chart.LegendItem item = new org.jfree.chart.LegendItem(label, description, toolTipText, urlText, true, shape, true, paint, true, outlinePaint, outlineStroke, false, new java.awt.geom.Line2D.Float(), new java.awt.BasicStroke(), java.awt.Color.black);\n                    item.setDataset(getDataset());\n                    result.add(item);\n                }\n                section++;\n            } else {\n                section++;\n            }\n        } \n        return result;\n    }\n\n    public java.lang.String getPlotType() {\n        return org.jfree.chart.plot.PiePlot.localizationResources.getString(\"Pie_Plot\");\n    }\n\n    protected java.awt.geom.Rectangle2D getArcBounds(java.awt.geom.Rectangle2D unexploded, java.awt.geom.Rectangle2D exploded, double angle, double extent, double explodePercent) {\n        if (explodePercent == 0.0) {\n            return unexploded;\n        } else {\n            java.awt.geom.Arc2D arc1 = new java.awt.geom.Arc2D.Double(unexploded, angle, extent / 2, java.awt.geom.Arc2D.OPEN);\n            java.awt.geom.Point2D point1 = arc1.getEndPoint();\n            java.awt.geom.Arc2D.Double arc2 = new java.awt.geom.Arc2D.Double(exploded, angle, extent / 2, java.awt.geom.Arc2D.OPEN);\n            java.awt.geom.Point2D point2 = arc2.getEndPoint();\n            double deltaX = (point1.getX() - point2.getX()) * explodePercent;\n            double deltaY = (point1.getY() - point2.getY()) * explodePercent;\n            return new java.awt.geom.Rectangle2D.Double(unexploded.getX() - deltaX, unexploded.getY() - deltaY, unexploded.getWidth(), unexploded.getHeight());\n        }\n    }\n\n    protected void drawLeftLabel(java.awt.Graphics2D g2, org.jfree.chart.plot.PiePlotState state, org.jfree.chart.plot.PieLabelRecord record) {\n        double anchorX = state.getLinkArea().getMinX();\n        double targetX = anchorX - record.getGap();\n        double targetY = record.getAllocatedY();\n        if (this.labelLinksVisible) {\n            double theta = record.getAngle();\n            double linkX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getPieWRadius()) * record.getLinkPercent());\n            double linkY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getPieHRadius()) * record.getLinkPercent());\n            double elbowX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getLinkArea().getWidth()) / 2.0);\n            double elbowY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getLinkArea().getHeight()) / 2.0);\n            double anchorY = elbowY;\n            g2.setPaint(this.labelLinkPaint);\n            g2.setStroke(this.labelLinkStroke);\n            g2.draw(new java.awt.geom.Line2D.Double(linkX, linkY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, targetX, targetY));\n        }\n        org.jfree.chart.text.TextBox tb = record.getLabel();\n        tb.draw(g2, ((float) (targetX)), ((float) (targetY)), RectangleAnchor.RIGHT);\n    }\n\n    protected void drawRightLabel(java.awt.Graphics2D g2, org.jfree.chart.plot.PiePlotState state, org.jfree.chart.plot.PieLabelRecord record) {\n        double anchorX = state.getLinkArea().getMaxX();\n        double targetX = anchorX + record.getGap();\n        double targetY = record.getAllocatedY();\n        if (this.labelLinksVisible) {\n            double theta = record.getAngle();\n            double linkX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getPieWRadius()) * record.getLinkPercent());\n            double linkY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getPieHRadius()) * record.getLinkPercent());\n            double elbowX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getLinkArea().getWidth()) / 2.0);\n            double elbowY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getLinkArea().getHeight()) / 2.0);\n            double anchorY = elbowY;\n            g2.setPaint(this.labelLinkPaint);\n            g2.setStroke(this.labelLinkStroke);\n            g2.draw(new java.awt.geom.Line2D.Double(linkX, linkY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, targetX, targetY));\n        }\n        org.jfree.chart.text.TextBox tb = record.getLabel();\n        tb.draw(g2, ((float) (targetX)), ((float) (targetY)), RectangleAnchor.LEFT);\n    }\n\n    public boolean equals(java.lang.Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof org.jfree.chart.plot.PiePlot)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        org.jfree.chart.plot.PiePlot that = ((org.jfree.chart.plot.PiePlot) (obj));\n        if (this.pieIndex != that.pieIndex) {\n            return false;\n        }\n        if (this.interiorGap != that.interiorGap) {\n            return false;\n        }\n        if (this.circular != that.circular) {\n            return false;\n        }\n        if (this.startAngle != that.startAngle) {\n            return false;\n        }\n        if (this.direction != that.direction) {\n            return false;\n        }\n        if (this.ignoreZeroValues != that.ignoreZeroValues) {\n            return false;\n        }\n        if (this.ignoreNullValues != that.ignoreNullValues) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionPaintMap, that.sectionPaintMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.baseSectionPaint, that.baseSectionPaint)) {\n            return false;\n        }\n        if (this.sectionOutlinesVisible != that.sectionOutlinesVisible) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionOutlinePaintMap, that.sectionOutlinePaintMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.baseSectionOutlinePaint, that.baseSectionOutlinePaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionOutlineStrokeMap, that.sectionOutlineStrokeMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.baseSectionOutlineStroke, that.baseSectionOutlineStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (!(this.shadowXOffset == that.shadowXOffset)) {\n            return false;\n        }\n        if (!(this.shadowYOffset == that.shadowYOffset)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.explodePercentages, that.explodePercentages)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelGenerator, that.labelGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelBackgroundPaint, that.labelBackgroundPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelOutlinePaint, that.labelOutlinePaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelOutlineStroke, that.labelOutlineStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelShadowPaint, that.labelShadowPaint)) {\n            return false;\n        }\n        if (this.simpleLabels != that.simpleLabels) {\n            return false;\n        }\n        if (!this.simpleLabelOffset.equals(that.simpleLabelOffset)) {\n            return false;\n        }\n        if (!this.labelPadding.equals(that.labelPadding)) {\n            return false;\n        }\n        if (!(this.maximumLabelWidth == that.maximumLabelWidth)) {\n            return false;\n        }\n        if (!(this.labelGap == that.labelGap)) {\n            return false;\n        }\n        if (!(this.labelLinkMargin == that.labelLinkMargin)) {\n            return false;\n        }\n        if (this.labelLinksVisible != that.labelLinksVisible) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelLinkPaint, that.labelLinkPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelLinkStroke, that.labelLinkStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.toolTipGenerator, that.toolTipGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.urlGenerator, that.urlGenerator)) {\n            return false;\n        }\n        if (!(this.minimumArcAngleToDraw == that.minimumArcAngleToDraw)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ShapeUtilities.equal(this.legendItemShape, that.legendItemShape)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelGenerator, that.legendLabelGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelToolTipGenerator, that.legendLabelToolTipGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelURLGenerator, that.legendLabelURLGenerator)) {\n            return false;\n        }\n        return true;\n    }\n\n    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {\n        org.jfree.chart.plot.PiePlot clone = ((org.jfree.chart.plot.PiePlot) (super.clone()));\n        if (clone.dataset != null) {\n            clone.dataset.addChangeListener(clone);\n        }\n        if (this.urlGenerator instanceof org.jfree.chart.util.PublicCloneable) {\n            clone.urlGenerator = ((org.jfree.chart.urls.PieURLGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.urlGenerator)));\n        }\n        clone.legendItemShape = org.jfree.chart.util.ShapeUtilities.clone(this.legendItemShape);\n        if (this.legendLabelGenerator != null) {\n            clone.legendLabelGenerator = ((org.jfree.chart.labels.PieSectionLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelGenerator)));\n        }\n        if (this.legendLabelToolTipGenerator != null) {\n            clone.legendLabelToolTipGenerator = ((org.jfree.chart.labels.PieSectionLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelToolTipGenerator)));\n        }\n        if (this.legendLabelURLGenerator instanceof org.jfree.chart.util.PublicCloneable) {\n            clone.legendLabelURLGenerator = ((org.jfree.chart.urls.PieURLGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelURLGenerator)));\n        }\n        return clone;\n    }\n\n    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {\n        stream.defaultWriteObject();\n        org.jfree.chart.util.SerialUtilities.writePaint(this.baseSectionPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.baseSectionOutlinePaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.baseSectionOutlineStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.shadowPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelBackgroundPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelOutlinePaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.labelOutlineStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelShadowPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelLinkPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.labelLinkStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writeShape(this.legendItemShape, stream);\n    }\n\n    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        stream.defaultReadObject();\n        this.baseSectionPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.baseSectionOutlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.baseSectionOutlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.shadowPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelBackgroundPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelOutlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelOutlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.labelShadowPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelLinkPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelLinkStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.legendItemShape = org.jfree.chart.util.SerialUtilities.readShape(stream);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "this.labelGap",
            "dst_parent": "return this.labelGap",
            "dst_parent_type": "Return",
            "dst_type": "FieldRead",
            "operator": "UPD",
            "src": "this.maximumLabelWidth",
            "src_parent": "return this.maximumLabelWidth",
            "src_parent_type": "Return",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "public double getMaximumLabelWidth() {\n    return this.maximumLabelWidth;\n}",
            "dst_parent": "public class PiePlot extends org.jfree.chart.plot.Plot implements java.io.Serializable , java.lang.Cloneable {\n    private static final long serialVersionUID = -795612466005590431L;\n\n    public static final double DEFAULT_INTERIOR_GAP = 0.08;\n\n    public static final double MAX_INTERIOR_GAP = 0.4;\n\n    public static final double DEFAULT_START_ANGLE = 90.0;\n\n    public static final java.awt.Font DEFAULT_LABEL_FONT = new java.awt.Font(\"SansSerif\", java.awt.Font.PLAIN, 10);\n\n    public static final java.awt.Paint DEFAULT_LABEL_PAINT = java.awt.Color.black;\n\n    public static final java.awt.Paint DEFAULT_LABEL_BACKGROUND_PAINT = new java.awt.Color(255, 255, 192);\n\n    public static final java.awt.Paint DEFAULT_LABEL_OUTLINE_PAINT = java.awt.Color.black;\n\n    public static final java.awt.Stroke DEFAULT_LABEL_OUTLINE_STROKE = new java.awt.BasicStroke(0.5F);\n\n    public static final java.awt.Paint DEFAULT_LABEL_SHADOW_PAINT = new java.awt.Color(151, 151, 151, 128);\n\n    public static final double DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW = 1.0E-5;\n\n    private org.jfree.data.general.PieDataset dataset;\n\n    private int pieIndex;\n\n    private double interiorGap;\n\n    private boolean circular;\n\n    private double startAngle;\n\n    private org.jfree.chart.util.Rotation direction;\n\n    private org.jfree.chart.PaintMap sectionPaintMap;\n\n    private transient java.awt.Paint baseSectionPaint;\n\n    private boolean sectionOutlinesVisible;\n\n    private org.jfree.chart.PaintMap sectionOutlinePaintMap;\n\n    private transient java.awt.Paint baseSectionOutlinePaint;\n\n    private org.jfree.chart.StrokeMap sectionOutlineStrokeMap;\n\n    private transient java.awt.Stroke baseSectionOutlineStroke;\n\n    private transient java.awt.Paint shadowPaint = java.awt.Color.gray;\n\n    private double shadowXOffset = 4.0F;\n\n    private double shadowYOffset = 4.0F;\n\n    private java.util.Map explodePercentages;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator;\n\n    private java.awt.Font labelFont;\n\n    private transient java.awt.Paint labelPaint;\n\n    private transient java.awt.Paint labelBackgroundPaint;\n\n    private transient java.awt.Paint labelOutlinePaint;\n\n    private transient java.awt.Stroke labelOutlineStroke;\n\n    private transient java.awt.Paint labelShadowPaint;\n\n    private boolean simpleLabels = true;\n\n    private org.jfree.chart.util.RectangleInsets labelPadding;\n\n    private org.jfree.chart.util.RectangleInsets simpleLabelOffset;\n\n    private double maximumLabelWidth = 0.14;\n\n    private double labelGap = 0.025;\n\n    private boolean labelLinksVisible;\n\n    private double labelLinkMargin = 0.025;\n\n    private transient java.awt.Paint labelLinkPaint = java.awt.Color.black;\n\n    private transient java.awt.Stroke labelLinkStroke = new java.awt.BasicStroke(0.5F);\n\n    private org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor;\n\n    private org.jfree.chart.labels.PieToolTipGenerator toolTipGenerator;\n\n    private org.jfree.chart.urls.PieURLGenerator urlGenerator;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator legendLabelGenerator;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator legendLabelToolTipGenerator;\n\n    private org.jfree.chart.urls.PieURLGenerator legendLabelURLGenerator;\n\n    private boolean ignoreNullValues;\n\n    private boolean ignoreZeroValues;\n\n    private transient java.awt.Shape legendItemShape;\n\n    private double minimumArcAngleToDraw;\n\n    protected static java.util.ResourceBundle localizationResources = java.util.ResourceBundle.getBundle(\"org.jfree.chart.plot.LocalizationBundle\");\n\n    static final boolean DEBUG_DRAW_INTERIOR = false;\n\n    static final boolean DEBUG_DRAW_LINK_AREA = false;\n\n    static final boolean DEBUG_DRAW_PIE_AREA = false;\n\n    public PiePlot() {\n        this(null);\n    }\n\n    public PiePlot(org.jfree.data.general.PieDataset dataset) {\n        super();\n        this.dataset = dataset;\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n        this.pieIndex = 0;\n        this.interiorGap = org.jfree.chart.plot.PiePlot.DEFAULT_INTERIOR_GAP;\n        this.circular = true;\n        this.startAngle = org.jfree.chart.plot.PiePlot.DEFAULT_START_ANGLE;\n        this.direction = org.jfree.chart.util.Rotation.CLOCKWISE;\n        this.minimumArcAngleToDraw = org.jfree.chart.plot.PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW;\n        this.sectionPaintMap = new org.jfree.chart.PaintMap();\n        this.baseSectionPaint = java.awt.Color.gray;\n        this.sectionOutlinesVisible = true;\n        this.sectionOutlinePaintMap = new org.jfree.chart.PaintMap();\n        this.baseSectionOutlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.sectionOutlineStrokeMap = new org.jfree.chart.StrokeMap();\n        this.baseSectionOutlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.explodePercentages = new java.util.TreeMap();\n        this.labelGenerator = new org.jfree.chart.labels.StandardPieSectionLabelGenerator();\n        this.labelFont = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT;\n        this.labelPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT;\n        this.labelBackgroundPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT;\n        this.labelOutlinePaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT;\n        this.labelOutlineStroke = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;\n        this.labelShadowPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT;\n        this.labelLinksVisible = true;\n        this.labelDistributor = new org.jfree.chart.plot.PieLabelDistributor(0);\n        this.simpleLabels = false;\n        this.simpleLabelOffset = new org.jfree.chart.util.RectangleInsets(org.jfree.chart.util.UnitType.RELATIVE, 0.18, 0.18, 0.18, 0.18);\n        this.labelPadding = new org.jfree.chart.util.RectangleInsets(2, 2, 2, 2);\n        this.toolTipGenerator = null;\n        this.urlGenerator = null;\n        this.legendLabelGenerator = new org.jfree.chart.labels.StandardPieSectionLabelGenerator();\n        this.legendLabelToolTipGenerator = null;\n        this.legendLabelURLGenerator = null;\n        this.legendItemShape = Plot.DEFAULT_LEGEND_ITEM_CIRCLE;\n        this.ignoreNullValues = false;\n        this.ignoreZeroValues = false;\n    }\n\n    public org.jfree.data.general.PieDataset getDataset() {\n        return this.dataset;\n    }\n\n    public void setDataset(org.jfree.data.general.PieDataset dataset) {\n        org.jfree.data.general.PieDataset existing = this.dataset;\n        if (existing != null) {\n            existing.removeChangeListener(this);\n        }\n        this.dataset = dataset;\n        if (dataset != null) {\n            setDatasetGroup(dataset.getGroup());\n            dataset.addChangeListener(this);\n        }\n        org.jfree.data.general.DatasetChangeEvent event = new org.jfree.data.general.DatasetChangeEvent(this, dataset);\n        datasetChanged(event);\n    }\n\n    public int getPieIndex() {\n        return this.pieIndex;\n    }\n\n    public void setPieIndex(int index) {\n        this.pieIndex = index;\n    }\n\n    public double getStartAngle() {\n        return this.interiorGap;\n    }\n\n    public void setStartAngle(double angle) {\n        this.startAngle = angle;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.Rotation getDirection() {\n        return this.direction;\n    }\n\n    public void setDirection(org.jfree.chart.util.Rotation direction) {\n        if (direction == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'direction' argument.\");\n        }\n        this.direction = direction;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getInteriorGap() {\n        return this.interiorGap;\n    }\n\n    public void setInteriorGap(double percent) {\n        if ((percent < 0.0) || (percent > org.jfree.chart.plot.PiePlot.MAX_INTERIOR_GAP)) {\n            throw new java.lang.IllegalArgumentException((\"Invalid 'percent' (\" + percent) + \") argument.\");\n        }\n        if (this.interiorGap != percent) {\n            this.interiorGap = percent;\n            notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n        }\n    }\n\n    public boolean isCircular() {\n        return this.circular;\n    }\n\n    public void setCircular(boolean flag) {\n        setCircular(flag, true);\n    }\n\n    public void setCircular(boolean circular, boolean notify) {\n        this.circular = circular;\n        if (notify) {\n            notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n        }\n    }\n\n    public boolean getIgnoreNullValues() {\n        return this.ignoreNullValues;\n    }\n\n    public void setIgnoreNullValues(boolean flag) {\n        this.ignoreNullValues = flag;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getIgnoreZeroValues() {\n        return this.ignoreZeroValues;\n    }\n\n    public void setIgnoreZeroValues(boolean flag) {\n        this.ignoreZeroValues = flag;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Paint lookupSectionPaint(java.lang.Comparable key) {\n        return lookupSectionPaint(key, false);\n    }\n\n    protected java.awt.Paint lookupSectionPaint(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Paint result = null;\n        result = this.sectionPaintMap.getPaint(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextPaint();\n                this.sectionPaintMap.put(key, result);\n            } else {\n                result = this.baseSectionPaint;\n            }\n        } else {\n            result = this.baseSectionPaint;\n        }\n        return result;\n    }\n\n    protected java.lang.Comparable getSectionKey(int section) {\n        java.lang.Comparable key = null;\n        if (this.dataset != null) {\n            if ((section >= 0) && (section < this.dataset.getItemCount())) {\n                key = this.dataset.getKey(section);\n            }\n        }\n        if (key == null) {\n            key = new java.lang.Integer(section);\n        }\n        return key;\n    }\n\n    public java.awt.Paint getSectionPaint(java.lang.Comparable key) {\n        return this.sectionPaintMap.getPaint(key);\n    }\n\n    public void setSectionPaint(java.lang.Comparable key, java.awt.Paint paint) {\n        this.sectionPaintMap.put(key, paint);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getBaseSectionPaint() {\n        return this.baseSectionPaint;\n    }\n\n    public void setBaseSectionPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.baseSectionPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getSectionOutlinesVisible() {\n        return this.sectionOutlinesVisible;\n    }\n\n    public void setSectionOutlinesVisible(boolean visible) {\n        this.sectionOutlinesVisible = visible;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable key) {\n        return lookupSectionOutlinePaint(key, false);\n    }\n\n    protected java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Paint result = null;\n        result = this.sectionOutlinePaintMap.getPaint(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextOutlinePaint();\n                this.sectionOutlinePaintMap.put(key, result);\n            } else {\n                result = this.baseSectionOutlinePaint;\n            }\n        } else {\n            result = this.baseSectionOutlinePaint;\n        }\n        return result;\n    }\n\n    public java.awt.Paint getSectionOutlinePaint(java.lang.Comparable key) {\n        return this.sectionOutlinePaintMap.getPaint(key);\n    }\n\n    public void setSectionOutlinePaint(java.lang.Comparable key, java.awt.Paint paint) {\n        this.sectionOutlinePaintMap.put(key, paint);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getBaseSectionOutlinePaint() {\n        return this.baseSectionOutlinePaint;\n    }\n\n    public void setBaseSectionOutlinePaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.baseSectionOutlinePaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable key) {\n        return lookupSectionOutlineStroke(key, false);\n    }\n\n    protected java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Stroke result = null;\n        result = this.sectionOutlineStrokeMap.getStroke(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextOutlineStroke();\n                this.sectionOutlineStrokeMap.put(key, result);\n            } else {\n                result = this.baseSectionOutlineStroke;\n            }\n        } else {\n            result = this.baseSectionOutlineStroke;\n        }\n        return result;\n    }\n\n    public java.awt.Stroke getSectionOutlineStroke(java.lang.Comparable key) {\n        return this.sectionOutlineStrokeMap.getStroke(key);\n    }\n\n    public void setSectionOutlineStroke(java.lang.Comparable key, java.awt.Stroke stroke) {\n        this.sectionOutlineStrokeMap.put(key, stroke);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getBaseSectionOutlineStroke() {\n        return this.baseSectionOutlineStroke;\n    }\n\n    public void setBaseSectionOutlineStroke(java.awt.Stroke stroke) {\n        if (stroke == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        this.baseSectionOutlineStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getShadowPaint() {\n        return this.shadowPaint;\n    }\n\n    public void setShadowPaint(java.awt.Paint paint) {\n        this.shadowPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getShadowXOffset() {\n        return this.shadowXOffset;\n    }\n\n    public void setShadowXOffset(double offset) {\n        this.shadowXOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getShadowYOffset() {\n        return this.shadowYOffset;\n    }\n\n    public void setShadowYOffset(double offset) {\n        this.shadowYOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getExplodePercent(java.lang.Comparable key) {\n        double result = 0.0;\n        if (this.explodePercentages != null) {\n            java.lang.Number percent = ((java.lang.Number) (this.explodePercentages.get(key)));\n            if (percent != null) {\n                result = percent.doubleValue();\n            }\n        }\n        return result;\n    }\n\n    public void setExplodePercent(java.lang.Comparable key, double percent) {\n        if (key == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        if (this.explodePercentages == null) {\n            this.explodePercentages = new java.util.TreeMap();\n        }\n        this.explodePercentages.put(key, new java.lang.Double(percent));\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        java.util.Iterator iterator = this.dataset.getKeys().iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            java.lang.Number explode = ((java.lang.Number) (this.explodePercentages.get(key)));\n            if (explode != null) {\n                result = java.lang.Math.max(result, explode.doubleValue());\n            }\n        } \n        return result;\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLabelGenerator() {\n        return this.labelGenerator;\n    }\n\n    public void setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        this.labelGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getLabelGap() {\n        return this.labelGap;\n    }\n\n    public void setLabelGap(double gap) {\n        this.labelGap = gap;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMaximumLabelWidth() {\n        return this.maximumLabelWidth;\n    }\n\n    public void setMaximumLabelWidth(double width) {\n        this.maximumLabelWidth = width;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getLabelLinksVisible() {\n        return this.labelLinksVisible;\n    }\n\n    public void setLabelLinksVisible(boolean visible) {\n        this.labelLinksVisible = visible;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getLabelLinkMargin() {\n        return this.startAngle;\n    }\n\n    public void setLabelLinkMargin(double margin) {\n        this.labelLinkMargin = margin;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelLinkPaint() {\n        return this.labelLinkPaint;\n    }\n\n    public void setLabelLinkPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.labelLinkPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getLabelLinkStroke() {\n        return this.labelLinkStroke;\n    }\n\n    public void setLabelLinkStroke(java.awt.Stroke stroke) {\n        if (stroke == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        this.labelLinkStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Font getLabelFont() {\n        return this.labelFont;\n    }\n\n    public void setLabelFont(java.awt.Font font) {\n        if (font == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'font' argument.\");\n        }\n        this.labelFont = font;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelPaint() {\n        return this.labelPaint;\n    }\n\n    public void setLabelPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.labelPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelBackgroundPaint() {\n        return this.labelBackgroundPaint;\n    }\n\n    public void setLabelBackgroundPaint(java.awt.Paint paint) {\n        this.labelBackgroundPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelOutlinePaint() {\n        return this.labelOutlinePaint;\n    }\n\n    public void setLabelOutlinePaint(java.awt.Paint paint) {\n        this.labelOutlinePaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getLabelOutlineStroke() {\n        return this.labelOutlineStroke;\n    }\n\n    public void setLabelOutlineStroke(java.awt.Stroke stroke) {\n        this.labelOutlineStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelShadowPaint() {\n        return this.labelShadowPaint;\n    }\n\n    public void setLabelShadowPaint(java.awt.Paint paint) {\n        this.labelShadowPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.RectangleInsets getLabelPadding() {\n        return this.labelPadding;\n    }\n\n    public void setLabelPadding(org.jfree.chart.util.RectangleInsets padding) {\n        if (padding == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'padding' argument.\");\n        }\n        this.labelPadding = padding;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getSimpleLabels() {\n        return this.simpleLabels;\n    }\n\n    public void setSimpleLabels(boolean simple) {\n        this.simpleLabels = simple;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.RectangleInsets getSimpleLabelOffset() {\n        return this.simpleLabelOffset;\n    }\n\n    public void setSimpleLabelOffset(org.jfree.chart.util.RectangleInsets offset) {\n        if (offset == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'offset' argument.\");\n        }\n        this.simpleLabelOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.plot.AbstractPieLabelDistributor getLabelDistributor() {\n        return this.labelDistributor;\n    }\n\n    public void setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor distributor) {\n        if (distributor == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'distributor' argument.\");\n        }\n        this.labelDistributor = distributor;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieToolTipGenerator getToolTipGenerator() {\n        return this.toolTipGenerator;\n    }\n\n    public void setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator generator) {\n        this.toolTipGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.urls.PieURLGenerator getURLGenerator() {\n        return this.urlGenerator;\n    }\n\n    public void setURLGenerator(org.jfree.chart.urls.PieURLGenerator generator) {\n        this.urlGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMinimumArcAngleToDraw() {\n        return this.minimumArcAngleToDraw;\n    }\n\n    public void setMinimumArcAngleToDraw(double angle) {\n        this.minimumArcAngleToDraw = angle;\n    }\n\n    public java.awt.Shape getLegendItemShape() {\n        return this.legendItemShape;\n    }\n\n    public void setLegendItemShape(java.awt.Shape shape) {\n        if (shape == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'shape' argument.\");\n        }\n        this.legendItemShape = shape;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLegendLabelGenerator() {\n        return this.legendLabelGenerator;\n    }\n\n    public void setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        if (generator == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'generator' argument.\");\n        }\n        this.legendLabelGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLegendLabelToolTipGenerator() {\n        return this.legendLabelToolTipGenerator;\n    }\n\n    public void setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        this.legendLabelToolTipGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.urls.PieURLGenerator getLegendLabelURLGenerator() {\n        return this.legendLabelURLGenerator;\n    }\n\n    public void setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator generator) {\n        this.legendLabelURLGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.plot.PiePlot plot, java.lang.Integer index, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.plot.PiePlotState state = new org.jfree.chart.plot.PiePlotState(info);\n        state.setPassesRequired(2);\n        state.setTotal(org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n    }\n\n    public void draw(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.awt.geom.Point2D anchor, org.jfree.chart.plot.PlotState parentState, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.util.RectangleInsets insets = getInsets();\n        insets.trim(area);\n        if (info != null) {\n            info.setPlotArea(area);\n            info.setDataArea(area);\n        }\n        drawBackground(g2, area);\n        drawOutline(g2, area);\n        java.awt.Shape savedClip = g2.getClip();\n        g2.clip(area);\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getForegroundAlpha()));\n        if (!org.jfree.data.general.DatasetUtilities.isEmptyOrNull(this.dataset)) {\n            drawPie(g2, area, info);\n        } else {\n            drawNoDataMessage(g2, area);\n        }\n        g2.setClip(savedClip);\n        g2.setComposite(originalComposite);\n        drawOutline(g2, area);\n    }\n\n    protected void drawPie(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.plot.PiePlotState state = initialise(g2, plotArea, this, null, info);\n        double labelReserve = 0.0;\n        if ((this.labelGenerator != null) && (!this.simpleLabels)) {\n            labelReserve = this.labelGap + this.maximumLabelWidth;\n        }\n        double gapHorizontal = (plotArea.getWidth() * (this.interiorGap + labelReserve)) * 2.0;\n        double gapVertical = (plotArea.getHeight() * this.interiorGap) * 2.0;\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_INTERIOR) {\n            double hGap = plotArea.getWidth() * this.interiorGap;\n            double vGap = plotArea.getHeight() * this.interiorGap;\n            double igx1 = plotArea.getX() + hGap;\n            double igx2 = plotArea.getMaxX() - hGap;\n            double igy1 = plotArea.getY() + vGap;\n            double igy2 = plotArea.getMaxY() - vGap;\n            g2.setPaint(java.awt.Color.gray);\n            g2.draw(new java.awt.geom.Rectangle2D.Double(igx1, igy1, igx2 - igx1, igy2 - igy1));\n        }\n        double linkX = plotArea.getX() + (gapHorizontal / 2);\n        double linkY = plotArea.getY() + (gapVertical / 2);\n        double linkW = plotArea.getWidth() - gapHorizontal;\n        double linkH = plotArea.getHeight() - gapVertical;\n        if (this.circular) {\n            double min = java.lang.Math.min(linkW, linkH) / 2;\n            linkX = (((linkX + linkX) + linkW) / 2) - min;\n            linkY = (((linkY + linkY) + linkH) / 2) - min;\n            linkW = 2 * min;\n            linkH = 2 * min;\n        }\n        java.awt.geom.Rectangle2D linkArea = new java.awt.geom.Rectangle2D.Double(linkX, linkY, linkW, linkH);\n        state.setLinkArea(linkArea);\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_LINK_AREA) {\n            g2.setPaint(java.awt.Color.blue);\n            g2.draw(linkArea);\n            g2.setPaint(java.awt.Color.yellow);\n            g2.draw(new java.awt.geom.Ellipse2D.Double(linkArea.getX(), linkArea.getY(), linkArea.getWidth(), linkArea.getHeight()));\n        }\n        double lm = 0.0;\n        if (!this.simpleLabels) {\n            lm = this.labelLinkMargin;\n        }\n        double hh = (linkArea.getWidth() * lm) * 2.0;\n        double vv = (linkArea.getHeight() * lm) * 2.0;\n        java.awt.geom.Rectangle2D explodeArea = new java.awt.geom.Rectangle2D.Double(linkX + (hh / 2.0), linkY + (vv / 2.0), linkW - hh, linkH - vv);\n        state.setExplodedPieArea(explodeArea);\n        double maximumExplodePercent = getMaximumExplodePercent();\n        double percent = maximumExplodePercent / (1.0 + maximumExplodePercent);\n        double h1 = explodeArea.getWidth() * percent;\n        double v1 = explodeArea.getHeight() * percent;\n        java.awt.geom.Rectangle2D pieArea = new java.awt.geom.Rectangle2D.Double(explodeArea.getX() + (h1 / 2.0), explodeArea.getY() + (v1 / 2.0), explodeArea.getWidth() - h1, explodeArea.getHeight() - v1);\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_PIE_AREA) {\n            g2.setPaint(java.awt.Color.green);\n            g2.draw(pieArea);\n        }\n        state.setPieArea(pieArea);\n        state.setPieCenterX(pieArea.getCenterX());\n        state.setPieCenterY(pieArea.getCenterY());\n        state.setPieWRadius(pieArea.getWidth() / 2.0);\n        state.setPieHRadius(pieArea.getHeight() / 2.0);\n        if ((this.dataset != null) && (this.dataset.getKeys().size() > 0)) {\n            java.util.List keys = this.dataset.getKeys();\n            double totalValue = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(this.dataset);\n            int passesRequired = state.getPassesRequired();\n            for (int pass = 0; pass < passesRequired; pass++) {\n                double runningTotal = 0.0;\n                for (int section = 0; section < keys.size(); section++) {\n                    java.lang.Number n = this.dataset.getValue(section);\n                    if (n != null) {\n                        double value = n.doubleValue();\n                        if (value > 0.0) {\n                            runningTotal += value;\n                            drawItem(g2, section, explodeArea, state, pass);\n                        }\n                    }\n                }\n            }\n            if (this.simpleLabels) {\n                drawSimpleLabels(g2, keys, totalValue, plotArea, linkArea, state);\n            } else {\n                drawLabels(g2, keys, totalValue, plotArea, linkArea, state);\n            }\n        } else {\n            drawNoDataMessage(g2, plotArea);\n        }\n    }\n\n    protected void drawItem(java.awt.Graphics2D g2, int section, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PiePlotState state, int currentPass) {\n        java.lang.Number n = this.dataset.getValue(section);\n        if (n == null) {\n            return;\n        }\n        double value = n.doubleValue();\n        double angle1 = 0.0;\n        double angle2 = 0.0;\n        if (this.direction == org.jfree.chart.util.Rotation.CLOCKWISE) {\n            angle1 = state.getLatestAngle();\n            angle2 = angle1 - ((value / state.getTotal()) * 360.0);\n        } else if (this.direction == org.jfree.chart.util.Rotation.ANTICLOCKWISE) {\n            angle1 = state.getLatestAngle();\n            angle2 = angle1 + ((value / state.getTotal()) * 360.0);\n        } else {\n            throw new java.lang.IllegalStateException(\"Rotation type not recognised.\");\n        }\n        double angle = angle2 - angle1;\n        if (java.lang.Math.abs(angle) > getMinimumArcAngleToDraw()) {\n            double ep = 0.0;\n            double mep = getMaximumExplodePercent();\n            if (mep > 0.0) {\n                ep = getExplodePercent(getSectionKey(section)) / mep;\n            }\n            java.awt.geom.Rectangle2D arcBounds = getArcBounds(state.getPieArea(), state.getExplodedPieArea(), angle1, angle, ep);\n            java.awt.geom.Arc2D.Double arc = new java.awt.geom.Arc2D.Double(arcBounds, angle1, angle, java.awt.geom.Arc2D.PIE);\n            if (currentPass == 0) {\n                if (this.shadowPaint != null) {\n                    java.awt.Shape shadowArc = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(arc, ((float) (this.shadowXOffset)), ((float) (this.shadowYOffset)));\n                    g2.setPaint(this.shadowPaint);\n                    g2.fill(shadowArc);\n                }\n            } else if (currentPass == 1) {\n                java.lang.Comparable key = getSectionKey(section);\n                java.awt.Paint paint = lookupSectionPaint(key, true);\n                g2.setPaint(paint);\n                g2.fill(arc);\n                java.awt.Paint outlinePaint = lookupSectionOutlinePaint(key);\n                java.awt.Stroke outlineStroke = lookupSectionOutlineStroke(key);\n                if (this.sectionOutlinesVisible) {\n                    g2.setPaint(outlinePaint);\n                    g2.setStroke(outlineStroke);\n                    g2.draw(arc);\n                }\n                if (state.getInfo() != null) {\n                    org.jfree.chart.entity.EntityCollection entities = state.getEntityCollection();\n                    if (entities != null) {\n                        java.lang.String tip = null;\n                        if (this.toolTipGenerator != null) {\n                            tip = this.toolTipGenerator.generateToolTip(this.dataset, key);\n                        }\n                        java.lang.String url = null;\n                        if (this.urlGenerator != null) {\n                            url = this.urlGenerator.generateURL(this.dataset, key, this.pieIndex);\n                        }\n                        org.jfree.chart.entity.PieSectionEntity entity = new org.jfree.chart.entity.PieSectionEntity(arc, this.dataset, this.pieIndex, section, key, tip, url);\n                        entities.add(entity);\n                    }\n                }\n            }\n        }\n        state.setLatestAngle(angle2);\n    }\n\n    protected void drawSimpleLabels(java.awt.Graphics2D g2, java.util.List keys, double totalValue, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D pieArea, org.jfree.chart.plot.PiePlotState state) {\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0F));\n        org.jfree.chart.util.RectangleInsets labelInsets = new org.jfree.chart.util.RectangleInsets(org.jfree.chart.util.UnitType.RELATIVE, 0.18, 0.18, 0.18, 0.18);\n        java.awt.geom.Rectangle2D labelsArea = labelInsets.createInsetRectangle(pieArea);\n        double runningTotal = 0.0;\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            boolean include = true;\n            double v = 0.0;\n            java.lang.Number n = getDataset().getValue(key);\n            if (n == null) {\n                include = !getIgnoreNullValues();\n            } else {\n                v = n.doubleValue();\n                include = (getIgnoreZeroValues()) ? v > 0.0 : v >= 0.0;\n            }\n            if (include) {\n                runningTotal = runningTotal + v;\n                double mid = getStartAngle() + ((getDirection().getFactor() * ((runningTotal - (v / 2.0)) * 360)) / totalValue);\n                java.awt.geom.Arc2D arc = new java.awt.geom.Arc2D.Double(labelsArea, getStartAngle(), mid - getStartAngle(), java.awt.geom.Arc2D.OPEN);\n                int x = ((int) (arc.getEndPoint().getX()));\n                int y = ((int) (arc.getEndPoint().getY()));\n                org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator = getLabelGenerator();\n                if (labelGenerator == null) {\n                    continue;\n                }\n                java.lang.String label = labelGenerator.generateSectionLabel(this.dataset, key);\n                if (label == null) {\n                    continue;\n                }\n                g2.setFont(this.labelFont);\n                java.awt.FontMetrics fm = g2.getFontMetrics();\n                java.awt.geom.Rectangle2D bounds = org.jfree.chart.text.TextUtilities.getTextBounds(label, g2, fm);\n                java.awt.geom.Rectangle2D out = this.labelPadding.createOutsetRectangle(bounds);\n                java.awt.Shape bg = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(out, x - bounds.getCenterX(), y - bounds.getCenterY());\n                if (this.labelShadowPaint != null) {\n                    java.awt.Shape shadow = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(bg, this.shadowXOffset, this.shadowYOffset);\n                    g2.setPaint(this.labelShadowPaint);\n                    g2.fill(shadow);\n                }\n                if (this.labelBackgroundPaint != null) {\n                    g2.setPaint(this.labelBackgroundPaint);\n                    g2.fill(bg);\n                }\n                if ((this.labelOutlinePaint != null) && (this.labelOutlineStroke != null)) {\n                    g2.setPaint(this.labelOutlinePaint);\n                    g2.setStroke(this.labelOutlineStroke);\n                    g2.draw(bg);\n                }\n                g2.setPaint(this.labelPaint);\n                g2.setFont(this.labelFont);\n                org.jfree.chart.text.TextUtilities.drawAlignedString(getLabelGenerator().generateSectionLabel(getDataset(), key), g2, x, y, TextAnchor.CENTER);\n            }\n        } \n        g2.setComposite(originalComposite);\n    }\n\n    protected void drawLabels(java.awt.Graphics2D g2, java.util.List keys, double totalValue, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, org.jfree.chart.plot.PiePlotState state) {\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0F));\n        org.jfree.data.DefaultKeyedValues leftKeys = new org.jfree.data.DefaultKeyedValues();\n        org.jfree.data.DefaultKeyedValues rightKeys = new org.jfree.data.DefaultKeyedValues();\n        double runningTotal = 0.0;\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            boolean include = true;\n            double v = 0.0;\n            java.lang.Number n = this.dataset.getValue(key);\n            if (n == null) {\n                include = !this.ignoreNullValues;\n            } else {\n                v = n.doubleValue();\n                include = (this.ignoreZeroValues) ? v > 0.0 : v >= 0.0;\n            }\n            if (include) {\n                runningTotal = runningTotal + v;\n                double mid = this.startAngle + ((this.direction.getFactor() * ((runningTotal - (v / 2.0)) * 360)) / totalValue);\n                if (java.lang.Math.cos(java.lang.Math.toRadians(mid)) < 0.0) {\n                    leftKeys.addValue(key, new java.lang.Double(mid));\n                } else {\n                    rightKeys.addValue(key, new java.lang.Double(mid));\n                }\n            }\n        } \n        g2.setFont(getLabelFont());\n        double marginX = plotArea.getX() + (this.interiorGap * plotArea.getWidth());\n        double gap = plotArea.getWidth() * this.labelGap;\n        double ww = (linkArea.getX() - gap) - marginX;\n        float labelWidth = ((float) (this.labelPadding.trimWidth(ww)));\n        if (this.labelGenerator != null) {\n            drawLeftLabels(leftKeys, g2, plotArea, linkArea, labelWidth, state);\n            drawRightLabels(rightKeys, g2, plotArea, linkArea, labelWidth, state);\n        }\n        g2.setComposite(originalComposite);\n    }\n\n    protected void drawLeftLabels(org.jfree.data.KeyedValues leftKeys, java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, float maxLabelWidth, org.jfree.chart.plot.PiePlotState state) {\n        this.labelDistributor.clear();\n        double lGap = plotArea.getWidth() * this.labelGap;\n        double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;\n        for (int i = 0; i < leftKeys.getItemCount(); i++) {\n            java.lang.String label = this.labelGenerator.generateSectionLabel(this.dataset, leftKeys.getKey(i));\n            if (label != null) {\n                org.jfree.chart.text.TextBlock block = org.jfree.chart.text.TextUtilities.createTextBlock(label, this.labelFont, this.labelPaint, maxLabelWidth, new org.jfree.chart.text.G2TextMeasurer(g2));\n                org.jfree.chart.text.TextBox labelBox = new org.jfree.chart.text.TextBox(block);\n                labelBox.setBackgroundPaint(this.labelBackgroundPaint);\n                labelBox.setOutlinePaint(this.labelOutlinePaint);\n                labelBox.setOutlineStroke(this.labelOutlineStroke);\n                labelBox.setShadowPaint(this.labelShadowPaint);\n                labelBox.setInteriorGap(this.labelPadding);\n                double theta = java.lang.Math.toRadians(leftKeys.getValue(i).doubleValue());\n                double baseY = state.getPieCenterY() - (java.lang.Math.sin(theta) * verticalLinkRadius);\n                double hh = labelBox.getHeight(g2);\n                this.labelDistributor.addPieLabelRecord(new org.jfree.chart.plot.PieLabelRecord(leftKeys.getKey(i), theta, baseY, labelBox, hh, (lGap / 2.0) + ((lGap / 2.0) * (-java.lang.Math.cos(theta))), 0.9 + getExplodePercent(leftKeys.getKey(i))));\n            }\n        }\n        this.labelDistributor.distributeLabels(plotArea.getMinY(), plotArea.getHeight());\n        for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {\n            drawLeftLabel(g2, state, this.labelDistributor.getPieLabelRecord(i));\n        }\n    }\n\n    protected void drawRightLabels(org.jfree.data.KeyedValues keys, java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, float maxLabelWidth, org.jfree.chart.plot.PiePlotState state) {\n        this.labelDistributor.clear();\n        double lGap = plotArea.getWidth() * this.labelGap;\n        double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;\n        for (int i = 0; i < keys.getItemCount(); i++) {\n            java.lang.String label = this.labelGenerator.generateSectionLabel(this.dataset, keys.getKey(i));\n            if (label != null) {\n                org.jfree.chart.text.TextBlock block = org.jfree.chart.text.TextUtilities.createTextBlock(label, this.labelFont, this.labelPaint, maxLabelWidth, new org.jfree.chart.text.G2TextMeasurer(g2));\n                org.jfree.chart.text.TextBox labelBox = new org.jfree.chart.text.TextBox(block);\n                labelBox.setBackgroundPaint(this.labelBackgroundPaint);\n                labelBox.setOutlinePaint(this.labelOutlinePaint);\n                labelBox.setOutlineStroke(this.labelOutlineStroke);\n                labelBox.setShadowPaint(this.labelShadowPaint);\n                labelBox.setInteriorGap(this.labelPadding);\n                double theta = java.lang.Math.toRadians(keys.getValue(i).doubleValue());\n                double baseY = state.getPieCenterY() - (java.lang.Math.sin(theta) * verticalLinkRadius);\n                double hh = labelBox.getHeight(g2);\n                this.labelDistributor.addPieLabelRecord(new org.jfree.chart.plot.PieLabelRecord(keys.getKey(i), theta, baseY, labelBox, hh, (lGap / 2.0) + ((lGap / 2.0) * java.lang.Math.cos(theta)), 0.9 + getExplodePercent(keys.getKey(i))));\n            }\n        }\n        this.labelDistributor.distributeLabels(plotArea.getMinY(), plotArea.getHeight());\n        for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {\n            drawRightLabel(g2, state, this.labelDistributor.getPieLabelRecord(i));\n        }\n    }\n\n    public org.jfree.chart.LegendItemCollection getLegendItems() {\n        org.jfree.chart.LegendItemCollection result = new org.jfree.chart.LegendItemCollection();\n        if (this.dataset == null) {\n            return result;\n        }\n        java.util.List keys = this.dataset.getKeys();\n        int section = 0;\n        java.awt.Shape shape = getLegendItemShape();\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            java.lang.Number n = this.dataset.getValue(key);\n            boolean include = true;\n            if (n == null) {\n                include = !this.ignoreNullValues;\n            } else {\n                double v = n.doubleValue();\n                if (v == 0.0) {\n                    include = !this.ignoreZeroValues;\n                } else {\n                    include = v > 0.0;\n                }\n            }\n            if (include) {\n                java.lang.String label = this.legendLabelGenerator.generateSectionLabel(this.dataset, key);\n                if (label != null) {\n                    java.lang.String description = label;\n                    java.lang.String toolTipText = null;\n                    if (this.legendLabelToolTipGenerator != null) {\n                        toolTipText = this.legendLabelToolTipGenerator.generateSectionLabel(this.dataset, key);\n                    }\n                    java.lang.String urlText = null;\n                    if (this.legendLabelURLGenerator != null) {\n                        urlText = this.legendLabelURLGenerator.generateURL(this.dataset, key, this.pieIndex);\n                    }\n                    java.awt.Paint paint = lookupSectionPaint(key, true);\n                    java.awt.Paint outlinePaint = lookupSectionOutlinePaint(key);\n                    java.awt.Stroke outlineStroke = lookupSectionOutlineStroke(key);\n                    org.jfree.chart.LegendItem item = new org.jfree.chart.LegendItem(label, description, toolTipText, urlText, true, shape, true, paint, true, outlinePaint, outlineStroke, false, new java.awt.geom.Line2D.Float(), new java.awt.BasicStroke(), java.awt.Color.black);\n                    item.setDataset(getDataset());\n                    result.add(item);\n                }\n                section++;\n            } else {\n                section++;\n            }\n        } \n        return result;\n    }\n\n    public java.lang.String getPlotType() {\n        return org.jfree.chart.plot.PiePlot.localizationResources.getString(\"Pie_Plot\");\n    }\n\n    protected java.awt.geom.Rectangle2D getArcBounds(java.awt.geom.Rectangle2D unexploded, java.awt.geom.Rectangle2D exploded, double angle, double extent, double explodePercent) {\n        if (explodePercent == 0.0) {\n            return unexploded;\n        } else {\n            java.awt.geom.Arc2D arc1 = new java.awt.geom.Arc2D.Double(unexploded, angle, extent / 2, java.awt.geom.Arc2D.OPEN);\n            java.awt.geom.Point2D point1 = arc1.getEndPoint();\n            java.awt.geom.Arc2D.Double arc2 = new java.awt.geom.Arc2D.Double(exploded, angle, extent / 2, java.awt.geom.Arc2D.OPEN);\n            java.awt.geom.Point2D point2 = arc2.getEndPoint();\n            double deltaX = (point1.getX() - point2.getX()) * explodePercent;\n            double deltaY = (point1.getY() - point2.getY()) * explodePercent;\n            return new java.awt.geom.Rectangle2D.Double(unexploded.getX() - deltaX, unexploded.getY() - deltaY, unexploded.getWidth(), unexploded.getHeight());\n        }\n    }\n\n    protected void drawLeftLabel(java.awt.Graphics2D g2, org.jfree.chart.plot.PiePlotState state, org.jfree.chart.plot.PieLabelRecord record) {\n        double anchorX = state.getLinkArea().getMinX();\n        double targetX = anchorX - record.getGap();\n        double targetY = record.getAllocatedY();\n        if (this.labelLinksVisible) {\n            double theta = record.getAngle();\n            double linkX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getPieWRadius()) * record.getLinkPercent());\n            double linkY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getPieHRadius()) * record.getLinkPercent());\n            double elbowX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getLinkArea().getWidth()) / 2.0);\n            double elbowY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getLinkArea().getHeight()) / 2.0);\n            double anchorY = elbowY;\n            g2.setPaint(this.labelLinkPaint);\n            g2.setStroke(this.labelLinkStroke);\n            g2.draw(new java.awt.geom.Line2D.Double(linkX, linkY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, targetX, targetY));\n        }\n        org.jfree.chart.text.TextBox tb = record.getLabel();\n        tb.draw(g2, ((float) (targetX)), ((float) (targetY)), RectangleAnchor.RIGHT);\n    }\n\n    protected void drawRightLabel(java.awt.Graphics2D g2, org.jfree.chart.plot.PiePlotState state, org.jfree.chart.plot.PieLabelRecord record) {\n        double anchorX = state.getLinkArea().getMaxX();\n        double targetX = anchorX + record.getGap();\n        double targetY = record.getAllocatedY();\n        if (this.labelLinksVisible) {\n            double theta = record.getAngle();\n            double linkX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getPieWRadius()) * record.getLinkPercent());\n            double linkY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getPieHRadius()) * record.getLinkPercent());\n            double elbowX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getLinkArea().getWidth()) / 2.0);\n            double elbowY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getLinkArea().getHeight()) / 2.0);\n            double anchorY = elbowY;\n            g2.setPaint(this.labelLinkPaint);\n            g2.setStroke(this.labelLinkStroke);\n            g2.draw(new java.awt.geom.Line2D.Double(linkX, linkY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, targetX, targetY));\n        }\n        org.jfree.chart.text.TextBox tb = record.getLabel();\n        tb.draw(g2, ((float) (targetX)), ((float) (targetY)), RectangleAnchor.LEFT);\n    }\n\n    public boolean equals(java.lang.Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof org.jfree.chart.plot.PiePlot)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        org.jfree.chart.plot.PiePlot that = ((org.jfree.chart.plot.PiePlot) (obj));\n        if (this.pieIndex != that.pieIndex) {\n            return false;\n        }\n        if (this.interiorGap != that.interiorGap) {\n            return false;\n        }\n        if (this.circular != that.circular) {\n            return false;\n        }\n        if (this.startAngle != that.startAngle) {\n            return false;\n        }\n        if (this.direction != that.direction) {\n            return false;\n        }\n        if (this.ignoreZeroValues != that.ignoreZeroValues) {\n            return false;\n        }\n        if (this.ignoreNullValues != that.ignoreNullValues) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionPaintMap, that.sectionPaintMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.baseSectionPaint, that.baseSectionPaint)) {\n            return false;\n        }\n        if (this.sectionOutlinesVisible != that.sectionOutlinesVisible) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionOutlinePaintMap, that.sectionOutlinePaintMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.baseSectionOutlinePaint, that.baseSectionOutlinePaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionOutlineStrokeMap, that.sectionOutlineStrokeMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.baseSectionOutlineStroke, that.baseSectionOutlineStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (!(this.shadowXOffset == that.shadowXOffset)) {\n            return false;\n        }\n        if (!(this.shadowYOffset == that.shadowYOffset)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.explodePercentages, that.explodePercentages)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelGenerator, that.labelGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelBackgroundPaint, that.labelBackgroundPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelOutlinePaint, that.labelOutlinePaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelOutlineStroke, that.labelOutlineStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelShadowPaint, that.labelShadowPaint)) {\n            return false;\n        }\n        if (this.simpleLabels != that.simpleLabels) {\n            return false;\n        }\n        if (!this.simpleLabelOffset.equals(that.simpleLabelOffset)) {\n            return false;\n        }\n        if (!this.labelPadding.equals(that.labelPadding)) {\n            return false;\n        }\n        if (!(this.maximumLabelWidth == that.maximumLabelWidth)) {\n            return false;\n        }\n        if (!(this.labelGap == that.labelGap)) {\n            return false;\n        }\n        if (!(this.labelLinkMargin == that.labelLinkMargin)) {\n            return false;\n        }\n        if (this.labelLinksVisible != that.labelLinksVisible) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelLinkPaint, that.labelLinkPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelLinkStroke, that.labelLinkStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.toolTipGenerator, that.toolTipGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.urlGenerator, that.urlGenerator)) {\n            return false;\n        }\n        if (!(this.minimumArcAngleToDraw == that.minimumArcAngleToDraw)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ShapeUtilities.equal(this.legendItemShape, that.legendItemShape)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelGenerator, that.legendLabelGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelToolTipGenerator, that.legendLabelToolTipGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelURLGenerator, that.legendLabelURLGenerator)) {\n            return false;\n        }\n        return true;\n    }\n\n    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {\n        org.jfree.chart.plot.PiePlot clone = ((org.jfree.chart.plot.PiePlot) (super.clone()));\n        if (clone.dataset != null) {\n            clone.dataset.addChangeListener(clone);\n        }\n        if (this.urlGenerator instanceof org.jfree.chart.util.PublicCloneable) {\n            clone.urlGenerator = ((org.jfree.chart.urls.PieURLGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.urlGenerator)));\n        }\n        clone.legendItemShape = org.jfree.chart.util.ShapeUtilities.clone(this.legendItemShape);\n        if (this.legendLabelGenerator != null) {\n            clone.legendLabelGenerator = ((org.jfree.chart.labels.PieSectionLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelGenerator)));\n        }\n        if (this.legendLabelToolTipGenerator != null) {\n            clone.legendLabelToolTipGenerator = ((org.jfree.chart.labels.PieSectionLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelToolTipGenerator)));\n        }\n        if (this.legendLabelURLGenerator instanceof org.jfree.chart.util.PublicCloneable) {\n            clone.legendLabelURLGenerator = ((org.jfree.chart.urls.PieURLGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelURLGenerator)));\n        }\n        return clone;\n    }\n\n    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {\n        stream.defaultWriteObject();\n        org.jfree.chart.util.SerialUtilities.writePaint(this.baseSectionPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.baseSectionOutlinePaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.baseSectionOutlineStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.shadowPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelBackgroundPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelOutlinePaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.labelOutlineStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelShadowPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelLinkPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.labelLinkStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writeShape(this.legendItemShape, stream);\n    }\n\n    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        stream.defaultReadObject();\n        this.baseSectionPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.baseSectionOutlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.baseSectionOutlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.shadowPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelBackgroundPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelOutlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelOutlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.labelShadowPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelLinkPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelLinkStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.legendItemShape = org.jfree.chart.util.SerialUtilities.readShape(stream);\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "MOV",
            "src": "public double getLabelGap() {\n    return this.maximumLabelWidth;\n}",
            "src_parent": "public class PiePlot extends org.jfree.chart.plot.Plot implements java.io.Serializable , java.lang.Cloneable {\n    private static final long serialVersionUID = -795612466005590431L;\n\n    public static final double DEFAULT_INTERIOR_GAP = 0.08;\n\n    public static final double MAX_INTERIOR_GAP = 0.4;\n\n    public static final double DEFAULT_START_ANGLE = 90.0;\n\n    public static final java.awt.Font DEFAULT_LABEL_FONT = new java.awt.Font(\"SansSerif\", java.awt.Font.PLAIN, 10);\n\n    public static final java.awt.Paint DEFAULT_LABEL_PAINT = java.awt.Color.black;\n\n    public static final java.awt.Paint DEFAULT_LABEL_BACKGROUND_PAINT = new java.awt.Color(255, 255, 192);\n\n    public static final java.awt.Paint DEFAULT_LABEL_OUTLINE_PAINT = java.awt.Color.black;\n\n    public static final java.awt.Stroke DEFAULT_LABEL_OUTLINE_STROKE = new java.awt.BasicStroke(0.5F);\n\n    public static final java.awt.Paint DEFAULT_LABEL_SHADOW_PAINT = new java.awt.Color(151, 151, 151, 128);\n\n    public static final double DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW = 1.0E-5;\n\n    private org.jfree.data.general.PieDataset dataset;\n\n    private int pieIndex;\n\n    private double interiorGap;\n\n    private boolean circular;\n\n    private double startAngle;\n\n    private org.jfree.chart.util.Rotation direction;\n\n    private org.jfree.chart.PaintMap sectionPaintMap;\n\n    private transient java.awt.Paint baseSectionPaint;\n\n    private boolean sectionOutlinesVisible;\n\n    private org.jfree.chart.PaintMap sectionOutlinePaintMap;\n\n    private transient java.awt.Paint baseSectionOutlinePaint;\n\n    private org.jfree.chart.StrokeMap sectionOutlineStrokeMap;\n\n    private transient java.awt.Stroke baseSectionOutlineStroke;\n\n    private transient java.awt.Paint shadowPaint = java.awt.Color.gray;\n\n    private double shadowXOffset = 4.0F;\n\n    private double shadowYOffset = 4.0F;\n\n    private java.util.Map explodePercentages;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator;\n\n    private java.awt.Font labelFont;\n\n    private transient java.awt.Paint labelPaint;\n\n    private transient java.awt.Paint labelBackgroundPaint;\n\n    private transient java.awt.Paint labelOutlinePaint;\n\n    private transient java.awt.Stroke labelOutlineStroke;\n\n    private transient java.awt.Paint labelShadowPaint;\n\n    private boolean simpleLabels = true;\n\n    private org.jfree.chart.util.RectangleInsets labelPadding;\n\n    private org.jfree.chart.util.RectangleInsets simpleLabelOffset;\n\n    private double maximumLabelWidth = 0.14;\n\n    private double labelGap = 0.025;\n\n    private boolean labelLinksVisible;\n\n    private double labelLinkMargin = 0.025;\n\n    private transient java.awt.Paint labelLinkPaint = java.awt.Color.black;\n\n    private transient java.awt.Stroke labelLinkStroke = new java.awt.BasicStroke(0.5F);\n\n    private org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor;\n\n    private org.jfree.chart.labels.PieToolTipGenerator toolTipGenerator;\n\n    private org.jfree.chart.urls.PieURLGenerator urlGenerator;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator legendLabelGenerator;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator legendLabelToolTipGenerator;\n\n    private org.jfree.chart.urls.PieURLGenerator legendLabelURLGenerator;\n\n    private boolean ignoreNullValues;\n\n    private boolean ignoreZeroValues;\n\n    private transient java.awt.Shape legendItemShape;\n\n    private double minimumArcAngleToDraw;\n\n    protected static java.util.ResourceBundle localizationResources = java.util.ResourceBundle.getBundle(\"org.jfree.chart.plot.LocalizationBundle\");\n\n    static final boolean DEBUG_DRAW_INTERIOR = false;\n\n    static final boolean DEBUG_DRAW_LINK_AREA = false;\n\n    static final boolean DEBUG_DRAW_PIE_AREA = false;\n\n    public PiePlot() {\n        this(null);\n    }\n\n    public PiePlot(org.jfree.data.general.PieDataset dataset) {\n        super();\n        this.dataset = dataset;\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n        this.pieIndex = 0;\n        this.interiorGap = org.jfree.chart.plot.PiePlot.DEFAULT_INTERIOR_GAP;\n        this.circular = true;\n        this.startAngle = org.jfree.chart.plot.PiePlot.DEFAULT_START_ANGLE;\n        this.direction = org.jfree.chart.util.Rotation.CLOCKWISE;\n        this.minimumArcAngleToDraw = org.jfree.chart.plot.PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW;\n        this.sectionPaintMap = new org.jfree.chart.PaintMap();\n        this.baseSectionPaint = java.awt.Color.gray;\n        this.sectionOutlinesVisible = true;\n        this.sectionOutlinePaintMap = new org.jfree.chart.PaintMap();\n        this.baseSectionOutlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.sectionOutlineStrokeMap = new org.jfree.chart.StrokeMap();\n        this.baseSectionOutlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.explodePercentages = new java.util.TreeMap();\n        this.labelGenerator = new org.jfree.chart.labels.StandardPieSectionLabelGenerator();\n        this.labelFont = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT;\n        this.labelPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT;\n        this.labelBackgroundPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT;\n        this.labelOutlinePaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT;\n        this.labelOutlineStroke = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;\n        this.labelShadowPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT;\n        this.labelLinksVisible = true;\n        this.labelDistributor = new org.jfree.chart.plot.PieLabelDistributor(0);\n        this.simpleLabels = false;\n        this.simpleLabelOffset = new org.jfree.chart.util.RectangleInsets(org.jfree.chart.util.UnitType.RELATIVE, 0.18, 0.18, 0.18, 0.18);\n        this.labelPadding = new org.jfree.chart.util.RectangleInsets(2, 2, 2, 2);\n        this.toolTipGenerator = null;\n        this.urlGenerator = null;\n        this.legendLabelGenerator = new org.jfree.chart.labels.StandardPieSectionLabelGenerator();\n        this.legendLabelToolTipGenerator = null;\n        this.legendLabelURLGenerator = null;\n        this.legendItemShape = Plot.DEFAULT_LEGEND_ITEM_CIRCLE;\n        this.ignoreNullValues = false;\n        this.ignoreZeroValues = false;\n    }\n\n    public org.jfree.data.general.PieDataset getDataset() {\n        return this.dataset;\n    }\n\n    public void setDataset(org.jfree.data.general.PieDataset dataset) {\n        org.jfree.data.general.PieDataset existing = this.dataset;\n        if (existing != null) {\n            existing.removeChangeListener(this);\n        }\n        this.dataset = dataset;\n        if (dataset != null) {\n            setDatasetGroup(dataset.getGroup());\n            dataset.addChangeListener(this);\n        }\n        org.jfree.data.general.DatasetChangeEvent event = new org.jfree.data.general.DatasetChangeEvent(this, dataset);\n        datasetChanged(event);\n    }\n\n    public int getPieIndex() {\n        return this.pieIndex;\n    }\n\n    public void setPieIndex(int index) {\n        this.pieIndex = index;\n    }\n\n    public double getStartAngle() {\n        return this.interiorGap;\n    }\n\n    public void setStartAngle(double angle) {\n        this.startAngle = angle;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.Rotation getDirection() {\n        return this.direction;\n    }\n\n    public void setDirection(org.jfree.chart.util.Rotation direction) {\n        if (direction == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'direction' argument.\");\n        }\n        this.direction = direction;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getInteriorGap() {\n        return this.interiorGap;\n    }\n\n    public void setInteriorGap(double percent) {\n        if ((percent < 0.0) || (percent > org.jfree.chart.plot.PiePlot.MAX_INTERIOR_GAP)) {\n            throw new java.lang.IllegalArgumentException((\"Invalid 'percent' (\" + percent) + \") argument.\");\n        }\n        if (this.interiorGap != percent) {\n            this.interiorGap = percent;\n            notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n        }\n    }\n\n    public boolean isCircular() {\n        return this.circular;\n    }\n\n    public void setCircular(boolean flag) {\n        setCircular(flag, true);\n    }\n\n    public void setCircular(boolean circular, boolean notify) {\n        this.circular = circular;\n        if (notify) {\n            notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n        }\n    }\n\n    public boolean getIgnoreNullValues() {\n        return this.ignoreNullValues;\n    }\n\n    public void setIgnoreNullValues(boolean flag) {\n        this.ignoreNullValues = flag;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getIgnoreZeroValues() {\n        return this.ignoreZeroValues;\n    }\n\n    public void setIgnoreZeroValues(boolean flag) {\n        this.ignoreZeroValues = flag;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Paint lookupSectionPaint(java.lang.Comparable key) {\n        return lookupSectionPaint(key, false);\n    }\n\n    protected java.awt.Paint lookupSectionPaint(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Paint result = null;\n        result = this.sectionPaintMap.getPaint(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextPaint();\n                this.sectionPaintMap.put(key, result);\n            } else {\n                result = this.baseSectionPaint;\n            }\n        } else {\n            result = this.baseSectionPaint;\n        }\n        return result;\n    }\n\n    protected java.lang.Comparable getSectionKey(int section) {\n        java.lang.Comparable key = null;\n        if (this.dataset != null) {\n            if ((section >= 0) && (section < this.dataset.getItemCount())) {\n                key = this.dataset.getKey(section);\n            }\n        }\n        if (key == null) {\n            key = new java.lang.Integer(section);\n        }\n        return key;\n    }\n\n    public java.awt.Paint getSectionPaint(java.lang.Comparable key) {\n        return this.sectionPaintMap.getPaint(key);\n    }\n\n    public void setSectionPaint(java.lang.Comparable key, java.awt.Paint paint) {\n        this.sectionPaintMap.put(key, paint);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getBaseSectionPaint() {\n        return this.baseSectionPaint;\n    }\n\n    public void setBaseSectionPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.baseSectionPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getSectionOutlinesVisible() {\n        return this.sectionOutlinesVisible;\n    }\n\n    public void setSectionOutlinesVisible(boolean visible) {\n        this.sectionOutlinesVisible = visible;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable key) {\n        return lookupSectionOutlinePaint(key, false);\n    }\n\n    protected java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Paint result = null;\n        result = this.sectionOutlinePaintMap.getPaint(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextOutlinePaint();\n                this.sectionOutlinePaintMap.put(key, result);\n            } else {\n                result = this.baseSectionOutlinePaint;\n            }\n        } else {\n            result = this.baseSectionOutlinePaint;\n        }\n        return result;\n    }\n\n    public java.awt.Paint getSectionOutlinePaint(java.lang.Comparable key) {\n        return this.sectionOutlinePaintMap.getPaint(key);\n    }\n\n    public void setSectionOutlinePaint(java.lang.Comparable key, java.awt.Paint paint) {\n        this.sectionOutlinePaintMap.put(key, paint);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getBaseSectionOutlinePaint() {\n        return this.baseSectionOutlinePaint;\n    }\n\n    public void setBaseSectionOutlinePaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.baseSectionOutlinePaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable key) {\n        return lookupSectionOutlineStroke(key, false);\n    }\n\n    protected java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Stroke result = null;\n        result = this.sectionOutlineStrokeMap.getStroke(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextOutlineStroke();\n                this.sectionOutlineStrokeMap.put(key, result);\n            } else {\n                result = this.baseSectionOutlineStroke;\n            }\n        } else {\n            result = this.baseSectionOutlineStroke;\n        }\n        return result;\n    }\n\n    public java.awt.Stroke getSectionOutlineStroke(java.lang.Comparable key) {\n        return this.sectionOutlineStrokeMap.getStroke(key);\n    }\n\n    public void setSectionOutlineStroke(java.lang.Comparable key, java.awt.Stroke stroke) {\n        this.sectionOutlineStrokeMap.put(key, stroke);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getBaseSectionOutlineStroke() {\n        return this.baseSectionOutlineStroke;\n    }\n\n    public void setBaseSectionOutlineStroke(java.awt.Stroke stroke) {\n        if (stroke == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        this.baseSectionOutlineStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getShadowPaint() {\n        return this.shadowPaint;\n    }\n\n    public void setShadowPaint(java.awt.Paint paint) {\n        this.shadowPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getShadowXOffset() {\n        return this.shadowXOffset;\n    }\n\n    public void setShadowXOffset(double offset) {\n        this.shadowXOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getShadowYOffset() {\n        return this.shadowYOffset;\n    }\n\n    public void setShadowYOffset(double offset) {\n        this.shadowYOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getExplodePercent(java.lang.Comparable key) {\n        double result = 0.0;\n        if (this.explodePercentages != null) {\n            java.lang.Number percent = ((java.lang.Number) (this.explodePercentages.get(key)));\n            if (percent != null) {\n                result = percent.doubleValue();\n            }\n        }\n        return result;\n    }\n\n    public void setExplodePercent(java.lang.Comparable key, double percent) {\n        if (key == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        if (this.explodePercentages == null) {\n            this.explodePercentages = new java.util.TreeMap();\n        }\n        this.explodePercentages.put(key, new java.lang.Double(percent));\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        java.util.Iterator iterator = this.dataset.getKeys().iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            java.lang.Number explode = ((java.lang.Number) (this.explodePercentages.get(key)));\n            if (explode != null) {\n                result = java.lang.Math.max(result, explode.doubleValue());\n            }\n        } \n        return result;\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLabelGenerator() {\n        return this.labelGenerator;\n    }\n\n    public void setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        this.labelGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getLabelGap() {\n        return this.maximumLabelWidth;\n    }\n\n    public void setLabelGap(double gap) {\n        this.labelGap = gap;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMaximumLabelWidth() {\n        this.legendLabelURLGenerator = null;\n        return this.maximumLabelWidth;\n    }\n\n    public void setMaximumLabelWidth(double width) {\n        this.maximumLabelWidth = width;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getLabelLinksVisible() {\n        return this.labelLinksVisible;\n    }\n\n    public void setLabelLinksVisible(boolean visible) {\n        this.labelLinksVisible = visible;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getLabelLinkMargin() {\n        return this.startAngle;\n    }\n\n    public void setLabelLinkMargin(double margin) {\n        this.labelLinkMargin = margin;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelLinkPaint() {\n        return this.labelLinkPaint;\n    }\n\n    public void setLabelLinkPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.labelLinkPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getLabelLinkStroke() {\n        return this.labelLinkStroke;\n    }\n\n    public void setLabelLinkStroke(java.awt.Stroke stroke) {\n        if (stroke == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        this.labelLinkStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Font getLabelFont() {\n        return this.labelFont;\n    }\n\n    public void setLabelFont(java.awt.Font font) {\n        if (font == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'font' argument.\");\n        }\n        this.labelFont = font;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelPaint() {\n        return this.labelPaint;\n    }\n\n    public void setLabelPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.labelPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelBackgroundPaint() {\n        return this.labelBackgroundPaint;\n    }\n\n    public void setLabelBackgroundPaint(java.awt.Paint paint) {\n        this.labelBackgroundPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelOutlinePaint() {\n        return this.labelOutlinePaint;\n    }\n\n    public void setLabelOutlinePaint(java.awt.Paint paint) {\n        this.labelOutlinePaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getLabelOutlineStroke() {\n        return this.labelOutlineStroke;\n    }\n\n    public void setLabelOutlineStroke(java.awt.Stroke stroke) {\n        this.labelOutlineStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelShadowPaint() {\n        return this.labelShadowPaint;\n    }\n\n    public void setLabelShadowPaint(java.awt.Paint paint) {\n        this.labelShadowPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.RectangleInsets getLabelPadding() {\n        return this.labelPadding;\n    }\n\n    public void setLabelPadding(org.jfree.chart.util.RectangleInsets padding) {\n        if (padding == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'padding' argument.\");\n        }\n        this.labelPadding = padding;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getSimpleLabels() {\n        return this.simpleLabels;\n    }\n\n    public void setSimpleLabels(boolean simple) {\n        this.simpleLabels = simple;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.RectangleInsets getSimpleLabelOffset() {\n        return this.simpleLabelOffset;\n    }\n\n    public void setSimpleLabelOffset(org.jfree.chart.util.RectangleInsets offset) {\n        if (offset == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'offset' argument.\");\n        }\n        this.simpleLabelOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.plot.AbstractPieLabelDistributor getLabelDistributor() {\n        return this.labelDistributor;\n    }\n\n    public void setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor distributor) {\n        if (distributor == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'distributor' argument.\");\n        }\n        this.labelDistributor = distributor;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieToolTipGenerator getToolTipGenerator() {\n        return this.toolTipGenerator;\n    }\n\n    public void setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator generator) {\n        this.toolTipGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.urls.PieURLGenerator getURLGenerator() {\n        return this.urlGenerator;\n    }\n\n    public void setURLGenerator(org.jfree.chart.urls.PieURLGenerator generator) {\n        this.urlGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMinimumArcAngleToDraw() {\n        return this.minimumArcAngleToDraw;\n    }\n\n    public void setMinimumArcAngleToDraw(double angle) {\n        this.minimumArcAngleToDraw = angle;\n    }\n\n    public java.awt.Shape getLegendItemShape() {\n        return this.legendItemShape;\n    }\n\n    public void setLegendItemShape(java.awt.Shape shape) {\n        if (shape == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'shape' argument.\");\n        }\n        this.legendItemShape = shape;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLegendLabelGenerator() {\n        return this.legendLabelGenerator;\n    }\n\n    public void setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        if (generator == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'generator' argument.\");\n        }\n        this.legendLabelGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLegendLabelToolTipGenerator() {\n        return this.legendLabelToolTipGenerator;\n    }\n\n    public void setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        this.legendLabelToolTipGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.urls.PieURLGenerator getLegendLabelURLGenerator() {\n        return this.legendLabelURLGenerator;\n    }\n\n    public void setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator generator) {\n        this.legendLabelURLGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.plot.PiePlot plot, java.lang.Integer index, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.plot.PiePlotState state = new org.jfree.chart.plot.PiePlotState(info);\n        state.setPassesRequired(2);\n        state.setTotal(org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n    }\n\n    public void draw(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.awt.geom.Point2D anchor, org.jfree.chart.plot.PlotState parentState, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.util.RectangleInsets insets = getInsets();\n        insets.trim(area);\n        if (info != null) {\n            info.setPlotArea(area);\n            info.setDataArea(area);\n        }\n        drawBackground(g2, area);\n        drawOutline(g2, area);\n        java.awt.Shape savedClip = g2.getClip();\n        g2.clip(area);\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getForegroundAlpha()));\n        if (!org.jfree.data.general.DatasetUtilities.isEmptyOrNull(this.dataset)) {\n            drawPie(g2, area, info);\n        } else {\n            drawNoDataMessage(g2, area);\n        }\n        g2.setClip(savedClip);\n        g2.setComposite(originalComposite);\n        drawOutline(g2, area);\n    }\n\n    protected void drawPie(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.plot.PiePlotState state = initialise(g2, plotArea, this, null, info);\n        double labelReserve = 0.0;\n        if ((this.labelGenerator != null) && (!this.simpleLabels)) {\n            labelReserve = this.labelGap + this.maximumLabelWidth;\n        }\n        double gapHorizontal = (plotArea.getWidth() * (this.interiorGap + labelReserve)) * 2.0;\n        double gapVertical = (plotArea.getHeight() * this.interiorGap) * 2.0;\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_INTERIOR) {\n            double hGap = plotArea.getWidth() * this.interiorGap;\n            double vGap = plotArea.getHeight() * this.interiorGap;\n            double igx1 = plotArea.getX() + hGap;\n            double igx2 = plotArea.getMaxX() - hGap;\n            double igy1 = plotArea.getY() + vGap;\n            double igy2 = plotArea.getMaxY() - vGap;\n            g2.setPaint(java.awt.Color.gray);\n            g2.draw(new java.awt.geom.Rectangle2D.Double(igx1, igy1, igx2 - igx1, igy2 - igy1));\n        }\n        double linkX = plotArea.getX() + (gapHorizontal / 2);\n        double linkY = plotArea.getY() + (gapVertical / 2);\n        double linkW = plotArea.getWidth() - gapHorizontal;\n        double linkH = plotArea.getHeight() - gapVertical;\n        if (this.circular) {\n            double min = java.lang.Math.min(linkW, linkH) / 2;\n            linkX = (((linkX + linkX) + linkW) / 2) - min;\n            linkY = (((linkY + linkY) + linkH) / 2) - min;\n            linkW = 2 * min;\n            linkH = 2 * min;\n        }\n        java.awt.geom.Rectangle2D linkArea = new java.awt.geom.Rectangle2D.Double(linkX, linkY, linkW, linkH);\n        state.setLinkArea(linkArea);\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_LINK_AREA) {\n            g2.setPaint(java.awt.Color.blue);\n            g2.draw(linkArea);\n            g2.setPaint(java.awt.Color.yellow);\n            g2.draw(new java.awt.geom.Ellipse2D.Double(linkArea.getX(), linkArea.getY(), linkArea.getWidth(), linkArea.getHeight()));\n        }\n        double lm = 0.0;\n        if (!this.simpleLabels) {\n            lm = this.labelLinkMargin;\n        }\n        double hh = (linkArea.getWidth() * lm) * 2.0;\n        double vv = (linkArea.getHeight() * lm) * 2.0;\n        java.awt.geom.Rectangle2D explodeArea = new java.awt.geom.Rectangle2D.Double(linkX + (hh / 2.0), linkY + (vv / 2.0), linkW - hh, linkH - vv);\n        state.setExplodedPieArea(explodeArea);\n        double maximumExplodePercent = getMaximumExplodePercent();\n        double percent = maximumExplodePercent / (1.0 + maximumExplodePercent);\n        double h1 = explodeArea.getWidth() * percent;\n        double v1 = explodeArea.getHeight() * percent;\n        java.awt.geom.Rectangle2D pieArea = new java.awt.geom.Rectangle2D.Double(explodeArea.getX() + (h1 / 2.0), explodeArea.getY() + (v1 / 2.0), explodeArea.getWidth() - h1, explodeArea.getHeight() - v1);\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_PIE_AREA) {\n            g2.setPaint(java.awt.Color.green);\n            g2.draw(pieArea);\n        }\n        state.setPieArea(pieArea);\n        state.setPieCenterX(pieArea.getCenterX());\n        state.setPieCenterY(pieArea.getCenterY());\n        state.setPieWRadius(pieArea.getWidth() / 2.0);\n        state.setPieHRadius(pieArea.getHeight() / 2.0);\n        if ((this.dataset != null) && (this.dataset.getKeys().size() > 0)) {\n            java.util.List keys = this.dataset.getKeys();\n            double totalValue = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(this.dataset);\n            int passesRequired = state.getPassesRequired();\n            for (int pass = 0; pass < passesRequired; pass++) {\n                double runningTotal = 0.0;\n                for (int section = 0; section < keys.size(); section++) {\n                    java.lang.Number n = this.dataset.getValue(section);\n                    if (n != null) {\n                        double value = n.doubleValue();\n                        if (value > 0.0) {\n                            runningTotal += value;\n                            drawItem(g2, section, explodeArea, state, pass);\n                        }\n                    }\n                }\n            }\n            if (this.simpleLabels) {\n                drawSimpleLabels(g2, keys, totalValue, plotArea, linkArea, state);\n            } else {\n                drawLabels(g2, keys, totalValue, plotArea, linkArea, state);\n            }\n        } else {\n            drawNoDataMessage(g2, plotArea);\n        }\n    }\n\n    protected void drawItem(java.awt.Graphics2D g2, int section, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PiePlotState state, int currentPass) {\n        java.lang.Number n = this.dataset.getValue(section);\n        if (n == null) {\n            return;\n        }\n        double value = n.doubleValue();\n        double angle1 = 0.0;\n        double angle2 = 0.0;\n        if (this.direction == org.jfree.chart.util.Rotation.CLOCKWISE) {\n            angle1 = state.getLatestAngle();\n            angle2 = angle1 - ((value / state.getTotal()) * 360.0);\n        } else if (this.direction == org.jfree.chart.util.Rotation.ANTICLOCKWISE) {\n            angle1 = state.getLatestAngle();\n            angle2 = angle1 + ((value / state.getTotal()) * 360.0);\n        } else {\n            throw new java.lang.IllegalStateException(\"Rotation type not recognised.\");\n        }\n        double angle = angle2 - angle1;\n        if (java.lang.Math.abs(angle) > getMinimumArcAngleToDraw()) {\n            double ep = 0.0;\n            double mep = getMaximumExplodePercent();\n            if (mep > 0.0) {\n                ep = getExplodePercent(getSectionKey(section)) / mep;\n            }\n            java.awt.geom.Rectangle2D arcBounds = getArcBounds(state.getPieArea(), state.getExplodedPieArea(), angle1, angle, ep);\n            java.awt.geom.Arc2D.Double arc = new java.awt.geom.Arc2D.Double(arcBounds, angle1, angle, java.awt.geom.Arc2D.PIE);\n            if (currentPass == 0) {\n                if (this.shadowPaint != null) {\n                    java.awt.Shape shadowArc = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(arc, ((float) (this.shadowXOffset)), ((float) (this.shadowYOffset)));\n                    g2.setPaint(this.shadowPaint);\n                    g2.fill(shadowArc);\n                }\n            } else if (currentPass == 1) {\n                java.lang.Comparable key = getSectionKey(section);\n                java.awt.Paint paint = lookupSectionPaint(key, true);\n                g2.setPaint(paint);\n                g2.fill(arc);\n                java.awt.Paint outlinePaint = lookupSectionOutlinePaint(key);\n                java.awt.Stroke outlineStroke = lookupSectionOutlineStroke(key);\n                if (this.sectionOutlinesVisible) {\n                    g2.setPaint(outlinePaint);\n                    g2.setStroke(outlineStroke);\n                    g2.draw(arc);\n                }\n                if (state.getInfo() != null) {\n                    org.jfree.chart.entity.EntityCollection entities = state.getEntityCollection();\n                    if (entities != null) {\n                        java.lang.String tip = null;\n                        if (this.toolTipGenerator != null) {\n                            tip = this.toolTipGenerator.generateToolTip(this.dataset, key);\n                        }\n                        java.lang.String url = null;\n                        if (this.urlGenerator != null) {\n                            url = this.urlGenerator.generateURL(this.dataset, key, this.pieIndex);\n                        }\n                        org.jfree.chart.entity.PieSectionEntity entity = new org.jfree.chart.entity.PieSectionEntity(arc, this.dataset, this.pieIndex, section, key, tip, url);\n                        entities.add(entity);\n                    }\n                }\n            }\n        }\n        state.setLatestAngle(angle2);\n    }\n\n    protected void drawSimpleLabels(java.awt.Graphics2D g2, java.util.List keys, double totalValue, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D pieArea, org.jfree.chart.plot.PiePlotState state) {\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0F));\n        org.jfree.chart.util.RectangleInsets labelInsets = new org.jfree.chart.util.RectangleInsets(org.jfree.chart.util.UnitType.RELATIVE, 0.18, 0.18, 0.18, 0.18);\n        java.awt.geom.Rectangle2D labelsArea = labelInsets.createInsetRectangle(pieArea);\n        double runningTotal = 0.0;\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            boolean include = true;\n            double v = 0.0;\n            java.lang.Number n = getDataset().getValue(key);\n            if (n == null) {\n                include = !getIgnoreNullValues();\n            } else {\n                v = n.doubleValue();\n                include = (getIgnoreZeroValues()) ? v > 0.0 : v >= 0.0;\n            }\n            if (include) {\n                runningTotal = runningTotal + v;\n                double mid = getStartAngle() + ((getDirection().getFactor() * ((runningTotal - (v / 2.0)) * 360)) / totalValue);\n                java.awt.geom.Arc2D arc = new java.awt.geom.Arc2D.Double(labelsArea, getStartAngle(), mid - getStartAngle(), java.awt.geom.Arc2D.OPEN);\n                int x = ((int) (arc.getEndPoint().getX()));\n                int y = ((int) (arc.getEndPoint().getY()));\n                org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator = getLabelGenerator();\n                if (labelGenerator == null) {\n                    continue;\n                }\n                java.lang.String label = labelGenerator.generateSectionLabel(this.dataset, key);\n                if (label == null) {\n                    continue;\n                }\n                g2.setFont(this.labelFont);\n                java.awt.FontMetrics fm = g2.getFontMetrics();\n                java.awt.geom.Rectangle2D bounds = org.jfree.chart.text.TextUtilities.getTextBounds(label, g2, fm);\n                java.awt.geom.Rectangle2D out = this.labelPadding.createOutsetRectangle(bounds);\n                java.awt.Shape bg = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(out, x - bounds.getCenterX(), y - bounds.getCenterY());\n                if (this.labelShadowPaint != null) {\n                    java.awt.Shape shadow = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(bg, this.shadowXOffset, this.shadowYOffset);\n                    g2.setPaint(this.labelShadowPaint);\n                    g2.fill(shadow);\n                }\n                if (this.labelBackgroundPaint != null) {\n                    g2.setPaint(this.labelBackgroundPaint);\n                    g2.fill(bg);\n                }\n                if ((this.labelOutlinePaint != null) && (this.labelOutlineStroke != null)) {\n                    g2.setPaint(this.labelOutlinePaint);\n                    g2.setStroke(this.labelOutlineStroke);\n                    g2.draw(bg);\n                }\n                g2.setPaint(this.labelPaint);\n                g2.setFont(this.labelFont);\n                org.jfree.chart.text.TextUtilities.drawAlignedString(getLabelGenerator().generateSectionLabel(getDataset(), key), g2, x, y, TextAnchor.CENTER);\n            }\n        } \n        g2.setComposite(originalComposite);\n    }\n\n    protected void drawLabels(java.awt.Graphics2D g2, java.util.List keys, double totalValue, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, org.jfree.chart.plot.PiePlotState state) {\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0F));\n        org.jfree.data.DefaultKeyedValues leftKeys = new org.jfree.data.DefaultKeyedValues();\n        org.jfree.data.DefaultKeyedValues rightKeys = new org.jfree.data.DefaultKeyedValues();\n        double runningTotal = 0.0;\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            boolean include = true;\n            double v = 0.0;\n            java.lang.Number n = this.dataset.getValue(key);\n            if (n == null) {\n                include = !this.ignoreNullValues;\n            } else {\n                v = n.doubleValue();\n                include = (this.ignoreZeroValues) ? v > 0.0 : v >= 0.0;\n            }\n            if (include) {\n                runningTotal = runningTotal + v;\n                double mid = this.startAngle + ((this.direction.getFactor() * ((runningTotal - (v / 2.0)) * 360)) / totalValue);\n                if (java.lang.Math.cos(java.lang.Math.toRadians(mid)) < 0.0) {\n                    leftKeys.addValue(key, new java.lang.Double(mid));\n                } else {\n                    rightKeys.addValue(key, new java.lang.Double(mid));\n                }\n            }\n        } \n        g2.setFont(getLabelFont());\n        double marginX = plotArea.getX() + (this.interiorGap * plotArea.getWidth());\n        double gap = plotArea.getWidth() * this.labelGap;\n        double ww = (linkArea.getX() - gap) - marginX;\n        float labelWidth = ((float) (this.labelPadding.trimWidth(ww)));\n        if (this.labelGenerator != null) {\n            drawLeftLabels(leftKeys, g2, plotArea, linkArea, labelWidth, state);\n            drawRightLabels(rightKeys, g2, plotArea, linkArea, labelWidth, state);\n        }\n        g2.setComposite(originalComposite);\n    }\n\n    protected void drawLeftLabels(org.jfree.data.KeyedValues leftKeys, java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, float maxLabelWidth, org.jfree.chart.plot.PiePlotState state) {\n        this.labelDistributor.clear();\n        double lGap = plotArea.getWidth() * this.labelGap;\n        double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;\n        for (int i = 0; i < leftKeys.getItemCount(); i++) {\n            java.lang.String label = this.labelGenerator.generateSectionLabel(this.dataset, leftKeys.getKey(i));\n            if (label != null) {\n                org.jfree.chart.text.TextBlock block = org.jfree.chart.text.TextUtilities.createTextBlock(label, this.labelFont, this.labelPaint, maxLabelWidth, new org.jfree.chart.text.G2TextMeasurer(g2));\n                org.jfree.chart.text.TextBox labelBox = new org.jfree.chart.text.TextBox(block);\n                labelBox.setBackgroundPaint(this.labelBackgroundPaint);\n                labelBox.setOutlinePaint(this.labelOutlinePaint);\n                labelBox.setOutlineStroke(this.labelOutlineStroke);\n                labelBox.setShadowPaint(this.labelShadowPaint);\n                labelBox.setInteriorGap(this.labelPadding);\n                double theta = java.lang.Math.toRadians(leftKeys.getValue(i).doubleValue());\n                double baseY = state.getPieCenterY() - (java.lang.Math.sin(theta) * verticalLinkRadius);\n                double hh = labelBox.getHeight(g2);\n                this.labelDistributor.addPieLabelRecord(new org.jfree.chart.plot.PieLabelRecord(leftKeys.getKey(i), theta, baseY, labelBox, hh, (lGap / 2.0) + ((lGap / 2.0) * (-java.lang.Math.cos(theta))), 0.9 + getExplodePercent(leftKeys.getKey(i))));\n            }\n        }\n        this.labelDistributor.distributeLabels(plotArea.getMinY(), plotArea.getHeight());\n        for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {\n            drawLeftLabel(g2, state, this.labelDistributor.getPieLabelRecord(i));\n        }\n    }\n\n    protected void drawRightLabels(org.jfree.data.KeyedValues keys, java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, float maxLabelWidth, org.jfree.chart.plot.PiePlotState state) {\n        this.labelDistributor.clear();\n        double lGap = plotArea.getWidth() * this.labelGap;\n        double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;\n        for (int i = 0; i < keys.getItemCount(); i++) {\n            java.lang.String label = this.labelGenerator.generateSectionLabel(this.dataset, keys.getKey(i));\n            if (label != null) {\n                org.jfree.chart.text.TextBlock block = org.jfree.chart.text.TextUtilities.createTextBlock(label, this.labelFont, this.labelPaint, maxLabelWidth, new org.jfree.chart.text.G2TextMeasurer(g2));\n                org.jfree.chart.text.TextBox labelBox = new org.jfree.chart.text.TextBox(block);\n                labelBox.setBackgroundPaint(this.labelBackgroundPaint);\n                labelBox.setOutlinePaint(this.labelOutlinePaint);\n                labelBox.setOutlineStroke(this.labelOutlineStroke);\n                labelBox.setShadowPaint(this.labelShadowPaint);\n                labelBox.setInteriorGap(this.labelPadding);\n                double theta = java.lang.Math.toRadians(keys.getValue(i).doubleValue());\n                double baseY = state.getPieCenterY() - (java.lang.Math.sin(theta) * verticalLinkRadius);\n                double hh = labelBox.getHeight(g2);\n                this.labelDistributor.addPieLabelRecord(new org.jfree.chart.plot.PieLabelRecord(keys.getKey(i), theta, baseY, labelBox, hh, (lGap / 2.0) + ((lGap / 2.0) * java.lang.Math.cos(theta)), 0.9 + getExplodePercent(keys.getKey(i))));\n            }\n        }\n        this.labelDistributor.distributeLabels(plotArea.getMinY(), plotArea.getHeight());\n        for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {\n            drawRightLabel(g2, state, this.labelDistributor.getPieLabelRecord(i));\n        }\n    }\n\n    public org.jfree.chart.LegendItemCollection getLegendItems() {\n        org.jfree.chart.LegendItemCollection result = new org.jfree.chart.LegendItemCollection();\n        if (this.dataset == null) {\n            return result;\n        }\n        java.util.List keys = this.dataset.getKeys();\n        int section = 0;\n        java.awt.Shape shape = getLegendItemShape();\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            java.lang.Number n = this.dataset.getValue(key);\n            boolean include = true;\n            if (n == null) {\n                include = !this.ignoreNullValues;\n            } else {\n                double v = n.doubleValue();\n                if (v == 0.0) {\n                    include = !this.ignoreZeroValues;\n                } else {\n                    include = v > 0.0;\n                }\n            }\n            if (include) {\n                java.lang.String label = this.legendLabelGenerator.generateSectionLabel(this.dataset, key);\n                if (label != null) {\n                    java.lang.String description = label;\n                    java.lang.String toolTipText = null;\n                    if (this.legendLabelToolTipGenerator != null) {\n                        toolTipText = this.legendLabelToolTipGenerator.generateSectionLabel(this.dataset, key);\n                    }\n                    java.lang.String urlText = null;\n                    if (this.legendLabelURLGenerator != null) {\n                        urlText = this.legendLabelURLGenerator.generateURL(this.dataset, key, this.pieIndex);\n                    }\n                    java.awt.Paint paint = lookupSectionPaint(key, true);\n                    java.awt.Paint outlinePaint = lookupSectionOutlinePaint(key);\n                    java.awt.Stroke outlineStroke = lookupSectionOutlineStroke(key);\n                    org.jfree.chart.LegendItem item = new org.jfree.chart.LegendItem(label, description, toolTipText, urlText, true, shape, true, paint, true, outlinePaint, outlineStroke, false, new java.awt.geom.Line2D.Float(), new java.awt.BasicStroke(), java.awt.Color.black);\n                    item.setDataset(getDataset());\n                    result.add(item);\n                }\n                section++;\n            } else {\n                section++;\n            }\n        } \n        return result;\n    }\n\n    public java.lang.String getPlotType() {\n        return org.jfree.chart.plot.PiePlot.localizationResources.getString(\"Pie_Plot\");\n    }\n\n    protected java.awt.geom.Rectangle2D getArcBounds(java.awt.geom.Rectangle2D unexploded, java.awt.geom.Rectangle2D exploded, double angle, double extent, double explodePercent) {\n        if (explodePercent == 0.0) {\n            return unexploded;\n        } else {\n            java.awt.geom.Arc2D arc1 = new java.awt.geom.Arc2D.Double(unexploded, angle, extent / 2, java.awt.geom.Arc2D.OPEN);\n            java.awt.geom.Point2D point1 = arc1.getEndPoint();\n            java.awt.geom.Arc2D.Double arc2 = new java.awt.geom.Arc2D.Double(exploded, angle, extent / 2, java.awt.geom.Arc2D.OPEN);\n            java.awt.geom.Point2D point2 = arc2.getEndPoint();\n            double deltaX = (point1.getX() - point2.getX()) * explodePercent;\n            double deltaY = (point1.getY() - point2.getY()) * explodePercent;\n            return new java.awt.geom.Rectangle2D.Double(unexploded.getX() - deltaX, unexploded.getY() - deltaY, unexploded.getWidth(), unexploded.getHeight());\n        }\n    }\n\n    protected void drawLeftLabel(java.awt.Graphics2D g2, org.jfree.chart.plot.PiePlotState state, org.jfree.chart.plot.PieLabelRecord record) {\n        double anchorX = state.getLinkArea().getMinX();\n        double targetX = anchorX - record.getGap();\n        double targetY = record.getAllocatedY();\n        if (this.labelLinksVisible) {\n            double theta = record.getAngle();\n            double linkX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getPieWRadius()) * record.getLinkPercent());\n            double linkY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getPieHRadius()) * record.getLinkPercent());\n            double elbowX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getLinkArea().getWidth()) / 2.0);\n            double elbowY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getLinkArea().getHeight()) / 2.0);\n            double anchorY = elbowY;\n            g2.setPaint(this.labelLinkPaint);\n            g2.setStroke(this.labelLinkStroke);\n            g2.draw(new java.awt.geom.Line2D.Double(linkX, linkY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, targetX, targetY));\n        }\n        org.jfree.chart.text.TextBox tb = record.getLabel();\n        tb.draw(g2, ((float) (targetX)), ((float) (targetY)), RectangleAnchor.RIGHT);\n    }\n\n    protected void drawRightLabel(java.awt.Graphics2D g2, org.jfree.chart.plot.PiePlotState state, org.jfree.chart.plot.PieLabelRecord record) {\n        double anchorX = state.getLinkArea().getMaxX();\n        double targetX = anchorX + record.getGap();\n        double targetY = record.getAllocatedY();\n        if (this.labelLinksVisible) {\n            double theta = record.getAngle();\n            double linkX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getPieWRadius()) * record.getLinkPercent());\n            double linkY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getPieHRadius()) * record.getLinkPercent());\n            double elbowX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getLinkArea().getWidth()) / 2.0);\n            double elbowY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getLinkArea().getHeight()) / 2.0);\n            double anchorY = elbowY;\n            g2.setPaint(this.labelLinkPaint);\n            g2.setStroke(this.labelLinkStroke);\n            g2.draw(new java.awt.geom.Line2D.Double(linkX, linkY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, targetX, targetY));\n        }\n        org.jfree.chart.text.TextBox tb = record.getLabel();\n        tb.draw(g2, ((float) (targetX)), ((float) (targetY)), RectangleAnchor.LEFT);\n    }\n\n    public boolean equals(java.lang.Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof org.jfree.chart.plot.PiePlot)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        org.jfree.chart.plot.PiePlot that = ((org.jfree.chart.plot.PiePlot) (obj));\n        if (this.pieIndex != that.pieIndex) {\n            return false;\n        }\n        if (this.interiorGap != that.interiorGap) {\n            return false;\n        }\n        if (this.circular != that.circular) {\n            return false;\n        }\n        if (this.startAngle != that.startAngle) {\n            return false;\n        }\n        if (this.direction != that.direction) {\n            return false;\n        }\n        if (this.ignoreZeroValues != that.ignoreZeroValues) {\n            return false;\n        }\n        if (this.ignoreNullValues != that.ignoreNullValues) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionPaintMap, that.sectionPaintMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.baseSectionPaint, that.baseSectionPaint)) {\n            return false;\n        }\n        if (this.sectionOutlinesVisible != that.sectionOutlinesVisible) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionOutlinePaintMap, that.sectionOutlinePaintMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.baseSectionOutlinePaint, that.baseSectionOutlinePaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionOutlineStrokeMap, that.sectionOutlineStrokeMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.baseSectionOutlineStroke, that.baseSectionOutlineStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (!(this.shadowXOffset == that.shadowXOffset)) {\n            return false;\n        }\n        if (!(this.shadowYOffset == that.shadowYOffset)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.explodePercentages, that.explodePercentages)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelGenerator, that.labelGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelBackgroundPaint, that.labelBackgroundPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelOutlinePaint, that.labelOutlinePaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelOutlineStroke, that.labelOutlineStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelShadowPaint, that.labelShadowPaint)) {\n            return false;\n        }\n        if (this.simpleLabels != that.simpleLabels) {\n            return false;\n        }\n        if (!this.simpleLabelOffset.equals(that.simpleLabelOffset)) {\n            return false;\n        }\n        if (!this.labelPadding.equals(that.labelPadding)) {\n            return false;\n        }\n        if (!(this.maximumLabelWidth == that.maximumLabelWidth)) {\n            return false;\n        }\n        if (!(this.labelGap == that.labelGap)) {\n            return false;\n        }\n        if (!(this.labelLinkMargin == that.labelLinkMargin)) {\n            return false;\n        }\n        if (this.labelLinksVisible != that.labelLinksVisible) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelLinkPaint, that.labelLinkPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelLinkStroke, that.labelLinkStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.toolTipGenerator, that.toolTipGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.urlGenerator, that.urlGenerator)) {\n            return false;\n        }\n        if (!(this.minimumArcAngleToDraw == that.minimumArcAngleToDraw)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ShapeUtilities.equal(this.legendItemShape, that.legendItemShape)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelGenerator, that.legendLabelGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelToolTipGenerator, that.legendLabelToolTipGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelURLGenerator, that.legendLabelURLGenerator)) {\n            return false;\n        }\n        return true;\n    }\n\n    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {\n        org.jfree.chart.plot.PiePlot clone = ((org.jfree.chart.plot.PiePlot) (super.clone()));\n        if (clone.dataset != null) {\n            clone.dataset.addChangeListener(clone);\n        }\n        if (this.urlGenerator instanceof org.jfree.chart.util.PublicCloneable) {\n            clone.urlGenerator = ((org.jfree.chart.urls.PieURLGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.urlGenerator)));\n        }\n        clone.legendItemShape = org.jfree.chart.util.ShapeUtilities.clone(this.legendItemShape);\n        if (this.legendLabelGenerator != null) {\n            clone.legendLabelGenerator = ((org.jfree.chart.labels.PieSectionLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelGenerator)));\n        }\n        if (this.legendLabelToolTipGenerator != null) {\n            clone.legendLabelToolTipGenerator = ((org.jfree.chart.labels.PieSectionLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelToolTipGenerator)));\n        }\n        if (this.legendLabelURLGenerator instanceof org.jfree.chart.util.PublicCloneable) {\n            clone.legendLabelURLGenerator = ((org.jfree.chart.urls.PieURLGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelURLGenerator)));\n        }\n        return clone;\n    }\n\n    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {\n        stream.defaultWriteObject();\n        org.jfree.chart.util.SerialUtilities.writePaint(this.baseSectionPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.baseSectionOutlinePaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.baseSectionOutlineStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.shadowPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelBackgroundPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelOutlinePaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.labelOutlineStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelShadowPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelLinkPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.labelLinkStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writeShape(this.legendItemShape, stream);\n    }\n\n    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        stream.defaultReadObject();\n        this.baseSectionPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.baseSectionOutlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.baseSectionOutlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.shadowPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelBackgroundPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelOutlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelOutlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.labelShadowPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelLinkPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelLinkStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.legendItemShape = org.jfree.chart.util.SerialUtilities.readShape(stream);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "public void setLabelGap(double gap) {\n    this.labelGap = gap;\n    notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n}",
            "dst_parent": "public class PiePlot extends org.jfree.chart.plot.Plot implements java.io.Serializable , java.lang.Cloneable {\n    private static final long serialVersionUID = -795612466005590431L;\n\n    public static final double DEFAULT_INTERIOR_GAP = 0.08;\n\n    public static final double MAX_INTERIOR_GAP = 0.4;\n\n    public static final double DEFAULT_START_ANGLE = 90.0;\n\n    public static final java.awt.Font DEFAULT_LABEL_FONT = new java.awt.Font(\"SansSerif\", java.awt.Font.PLAIN, 10);\n\n    public static final java.awt.Paint DEFAULT_LABEL_PAINT = java.awt.Color.black;\n\n    public static final java.awt.Paint DEFAULT_LABEL_BACKGROUND_PAINT = new java.awt.Color(255, 255, 192);\n\n    public static final java.awt.Paint DEFAULT_LABEL_OUTLINE_PAINT = java.awt.Color.black;\n\n    public static final java.awt.Stroke DEFAULT_LABEL_OUTLINE_STROKE = new java.awt.BasicStroke(0.5F);\n\n    public static final java.awt.Paint DEFAULT_LABEL_SHADOW_PAINT = new java.awt.Color(151, 151, 151, 128);\n\n    public static final double DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW = 1.0E-5;\n\n    private org.jfree.data.general.PieDataset dataset;\n\n    private int pieIndex;\n\n    private double interiorGap;\n\n    private boolean circular;\n\n    private double startAngle;\n\n    private org.jfree.chart.util.Rotation direction;\n\n    private org.jfree.chart.PaintMap sectionPaintMap;\n\n    private transient java.awt.Paint baseSectionPaint;\n\n    private boolean sectionOutlinesVisible;\n\n    private org.jfree.chart.PaintMap sectionOutlinePaintMap;\n\n    private transient java.awt.Paint baseSectionOutlinePaint;\n\n    private org.jfree.chart.StrokeMap sectionOutlineStrokeMap;\n\n    private transient java.awt.Stroke baseSectionOutlineStroke;\n\n    private transient java.awt.Paint shadowPaint = java.awt.Color.gray;\n\n    private double shadowXOffset = 4.0F;\n\n    private double shadowYOffset = 4.0F;\n\n    private java.util.Map explodePercentages;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator;\n\n    private java.awt.Font labelFont;\n\n    private transient java.awt.Paint labelPaint;\n\n    private transient java.awt.Paint labelBackgroundPaint;\n\n    private transient java.awt.Paint labelOutlinePaint;\n\n    private transient java.awt.Stroke labelOutlineStroke;\n\n    private transient java.awt.Paint labelShadowPaint;\n\n    private boolean simpleLabels = true;\n\n    private org.jfree.chart.util.RectangleInsets labelPadding;\n\n    private org.jfree.chart.util.RectangleInsets simpleLabelOffset;\n\n    private double maximumLabelWidth = 0.14;\n\n    private double labelGap = 0.025;\n\n    private boolean labelLinksVisible;\n\n    private double labelLinkMargin = 0.025;\n\n    private transient java.awt.Paint labelLinkPaint = java.awt.Color.black;\n\n    private transient java.awt.Stroke labelLinkStroke = new java.awt.BasicStroke(0.5F);\n\n    private org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor;\n\n    private org.jfree.chart.labels.PieToolTipGenerator toolTipGenerator;\n\n    private org.jfree.chart.urls.PieURLGenerator urlGenerator;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator legendLabelGenerator;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator legendLabelToolTipGenerator;\n\n    private org.jfree.chart.urls.PieURLGenerator legendLabelURLGenerator;\n\n    private boolean ignoreNullValues;\n\n    private boolean ignoreZeroValues;\n\n    private transient java.awt.Shape legendItemShape;\n\n    private double minimumArcAngleToDraw;\n\n    protected static java.util.ResourceBundle localizationResources = java.util.ResourceBundle.getBundle(\"org.jfree.chart.plot.LocalizationBundle\");\n\n    static final boolean DEBUG_DRAW_INTERIOR = false;\n\n    static final boolean DEBUG_DRAW_LINK_AREA = false;\n\n    static final boolean DEBUG_DRAW_PIE_AREA = false;\n\n    public PiePlot() {\n        this(null);\n    }\n\n    public PiePlot(org.jfree.data.general.PieDataset dataset) {\n        super();\n        this.dataset = dataset;\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n        this.pieIndex = 0;\n        this.interiorGap = org.jfree.chart.plot.PiePlot.DEFAULT_INTERIOR_GAP;\n        this.circular = true;\n        this.startAngle = org.jfree.chart.plot.PiePlot.DEFAULT_START_ANGLE;\n        this.direction = org.jfree.chart.util.Rotation.CLOCKWISE;\n        this.minimumArcAngleToDraw = org.jfree.chart.plot.PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW;\n        this.sectionPaintMap = new org.jfree.chart.PaintMap();\n        this.baseSectionPaint = java.awt.Color.gray;\n        this.sectionOutlinesVisible = true;\n        this.sectionOutlinePaintMap = new org.jfree.chart.PaintMap();\n        this.baseSectionOutlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.sectionOutlineStrokeMap = new org.jfree.chart.StrokeMap();\n        this.baseSectionOutlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.explodePercentages = new java.util.TreeMap();\n        this.labelGenerator = new org.jfree.chart.labels.StandardPieSectionLabelGenerator();\n        this.labelFont = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT;\n        this.labelPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT;\n        this.labelBackgroundPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT;\n        this.labelOutlinePaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT;\n        this.labelOutlineStroke = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;\n        this.labelShadowPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT;\n        this.labelLinksVisible = true;\n        this.labelDistributor = new org.jfree.chart.plot.PieLabelDistributor(0);\n        this.simpleLabels = false;\n        this.simpleLabelOffset = new org.jfree.chart.util.RectangleInsets(org.jfree.chart.util.UnitType.RELATIVE, 0.18, 0.18, 0.18, 0.18);\n        this.labelPadding = new org.jfree.chart.util.RectangleInsets(2, 2, 2, 2);\n        this.toolTipGenerator = null;\n        this.urlGenerator = null;\n        this.legendLabelGenerator = new org.jfree.chart.labels.StandardPieSectionLabelGenerator();\n        this.legendLabelToolTipGenerator = null;\n        this.legendLabelURLGenerator = null;\n        this.legendItemShape = Plot.DEFAULT_LEGEND_ITEM_CIRCLE;\n        this.ignoreNullValues = false;\n        this.ignoreZeroValues = false;\n    }\n\n    public org.jfree.data.general.PieDataset getDataset() {\n        return this.dataset;\n    }\n\n    public void setDataset(org.jfree.data.general.PieDataset dataset) {\n        org.jfree.data.general.PieDataset existing = this.dataset;\n        if (existing != null) {\n            existing.removeChangeListener(this);\n        }\n        this.dataset = dataset;\n        if (dataset != null) {\n            setDatasetGroup(dataset.getGroup());\n            dataset.addChangeListener(this);\n        }\n        org.jfree.data.general.DatasetChangeEvent event = new org.jfree.data.general.DatasetChangeEvent(this, dataset);\n        datasetChanged(event);\n    }\n\n    public int getPieIndex() {\n        return this.pieIndex;\n    }\n\n    public void setPieIndex(int index) {\n        this.pieIndex = index;\n    }\n\n    public double getStartAngle() {\n        return this.interiorGap;\n    }\n\n    public void setStartAngle(double angle) {\n        this.startAngle = angle;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.Rotation getDirection() {\n        return this.direction;\n    }\n\n    public void setDirection(org.jfree.chart.util.Rotation direction) {\n        if (direction == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'direction' argument.\");\n        }\n        this.direction = direction;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getInteriorGap() {\n        return this.interiorGap;\n    }\n\n    public void setInteriorGap(double percent) {\n        if ((percent < 0.0) || (percent > org.jfree.chart.plot.PiePlot.MAX_INTERIOR_GAP)) {\n            throw new java.lang.IllegalArgumentException((\"Invalid 'percent' (\" + percent) + \") argument.\");\n        }\n        if (this.interiorGap != percent) {\n            this.interiorGap = percent;\n            notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n        }\n    }\n\n    public boolean isCircular() {\n        return this.circular;\n    }\n\n    public void setCircular(boolean flag) {\n        setCircular(flag, true);\n    }\n\n    public void setCircular(boolean circular, boolean notify) {\n        this.circular = circular;\n        if (notify) {\n            notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n        }\n    }\n\n    public boolean getIgnoreNullValues() {\n        return this.ignoreNullValues;\n    }\n\n    public void setIgnoreNullValues(boolean flag) {\n        this.ignoreNullValues = flag;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getIgnoreZeroValues() {\n        return this.ignoreZeroValues;\n    }\n\n    public void setIgnoreZeroValues(boolean flag) {\n        this.ignoreZeroValues = flag;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Paint lookupSectionPaint(java.lang.Comparable key) {\n        return lookupSectionPaint(key, false);\n    }\n\n    protected java.awt.Paint lookupSectionPaint(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Paint result = null;\n        result = this.sectionPaintMap.getPaint(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextPaint();\n                this.sectionPaintMap.put(key, result);\n            } else {\n                result = this.baseSectionPaint;\n            }\n        } else {\n            result = this.baseSectionPaint;\n        }\n        return result;\n    }\n\n    protected java.lang.Comparable getSectionKey(int section) {\n        java.lang.Comparable key = null;\n        if (this.dataset != null) {\n            if ((section >= 0) && (section < this.dataset.getItemCount())) {\n                key = this.dataset.getKey(section);\n            }\n        }\n        if (key == null) {\n            key = new java.lang.Integer(section);\n        }\n        return key;\n    }\n\n    public java.awt.Paint getSectionPaint(java.lang.Comparable key) {\n        return this.sectionPaintMap.getPaint(key);\n    }\n\n    public void setSectionPaint(java.lang.Comparable key, java.awt.Paint paint) {\n        this.sectionPaintMap.put(key, paint);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getBaseSectionPaint() {\n        return this.baseSectionPaint;\n    }\n\n    public void setBaseSectionPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.baseSectionPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getSectionOutlinesVisible() {\n        return this.sectionOutlinesVisible;\n    }\n\n    public void setSectionOutlinesVisible(boolean visible) {\n        this.sectionOutlinesVisible = visible;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable key) {\n        return lookupSectionOutlinePaint(key, false);\n    }\n\n    protected java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Paint result = null;\n        result = this.sectionOutlinePaintMap.getPaint(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextOutlinePaint();\n                this.sectionOutlinePaintMap.put(key, result);\n            } else {\n                result = this.baseSectionOutlinePaint;\n            }\n        } else {\n            result = this.baseSectionOutlinePaint;\n        }\n        return result;\n    }\n\n    public java.awt.Paint getSectionOutlinePaint(java.lang.Comparable key) {\n        return this.sectionOutlinePaintMap.getPaint(key);\n    }\n\n    public void setSectionOutlinePaint(java.lang.Comparable key, java.awt.Paint paint) {\n        this.sectionOutlinePaintMap.put(key, paint);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getBaseSectionOutlinePaint() {\n        return this.baseSectionOutlinePaint;\n    }\n\n    public void setBaseSectionOutlinePaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.baseSectionOutlinePaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable key) {\n        return lookupSectionOutlineStroke(key, false);\n    }\n\n    protected java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Stroke result = null;\n        result = this.sectionOutlineStrokeMap.getStroke(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextOutlineStroke();\n                this.sectionOutlineStrokeMap.put(key, result);\n            } else {\n                result = this.baseSectionOutlineStroke;\n            }\n        } else {\n            result = this.baseSectionOutlineStroke;\n        }\n        return result;\n    }\n\n    public java.awt.Stroke getSectionOutlineStroke(java.lang.Comparable key) {\n        return this.sectionOutlineStrokeMap.getStroke(key);\n    }\n\n    public void setSectionOutlineStroke(java.lang.Comparable key, java.awt.Stroke stroke) {\n        this.sectionOutlineStrokeMap.put(key, stroke);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getBaseSectionOutlineStroke() {\n        return this.baseSectionOutlineStroke;\n    }\n\n    public void setBaseSectionOutlineStroke(java.awt.Stroke stroke) {\n        if (stroke == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        this.baseSectionOutlineStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getShadowPaint() {\n        return this.shadowPaint;\n    }\n\n    public void setShadowPaint(java.awt.Paint paint) {\n        this.shadowPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getShadowXOffset() {\n        return this.shadowXOffset;\n    }\n\n    public void setShadowXOffset(double offset) {\n        this.shadowXOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getShadowYOffset() {\n        return this.shadowYOffset;\n    }\n\n    public void setShadowYOffset(double offset) {\n        this.shadowYOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getExplodePercent(java.lang.Comparable key) {\n        double result = 0.0;\n        if (this.explodePercentages != null) {\n            java.lang.Number percent = ((java.lang.Number) (this.explodePercentages.get(key)));\n            if (percent != null) {\n                result = percent.doubleValue();\n            }\n        }\n        return result;\n    }\n\n    public void setExplodePercent(java.lang.Comparable key, double percent) {\n        if (key == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        if (this.explodePercentages == null) {\n            this.explodePercentages = new java.util.TreeMap();\n        }\n        this.explodePercentages.put(key, new java.lang.Double(percent));\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        java.util.Iterator iterator = this.dataset.getKeys().iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            java.lang.Number explode = ((java.lang.Number) (this.explodePercentages.get(key)));\n            if (explode != null) {\n                result = java.lang.Math.max(result, explode.doubleValue());\n            }\n        } \n        return result;\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLabelGenerator() {\n        return this.labelGenerator;\n    }\n\n    public void setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        this.labelGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getLabelGap() {\n        return this.labelGap;\n    }\n\n    public void setLabelGap(double gap) {\n        this.labelGap = gap;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMaximumLabelWidth() {\n        return this.maximumLabelWidth;\n    }\n\n    public void setMaximumLabelWidth(double width) {\n        this.maximumLabelWidth = width;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getLabelLinksVisible() {\n        return this.labelLinksVisible;\n    }\n\n    public void setLabelLinksVisible(boolean visible) {\n        this.labelLinksVisible = visible;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getLabelLinkMargin() {\n        return this.startAngle;\n    }\n\n    public void setLabelLinkMargin(double margin) {\n        this.labelLinkMargin = margin;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelLinkPaint() {\n        return this.labelLinkPaint;\n    }\n\n    public void setLabelLinkPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.labelLinkPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getLabelLinkStroke() {\n        return this.labelLinkStroke;\n    }\n\n    public void setLabelLinkStroke(java.awt.Stroke stroke) {\n        if (stroke == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        this.labelLinkStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Font getLabelFont() {\n        return this.labelFont;\n    }\n\n    public void setLabelFont(java.awt.Font font) {\n        if (font == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'font' argument.\");\n        }\n        this.labelFont = font;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelPaint() {\n        return this.labelPaint;\n    }\n\n    public void setLabelPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.labelPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelBackgroundPaint() {\n        return this.labelBackgroundPaint;\n    }\n\n    public void setLabelBackgroundPaint(java.awt.Paint paint) {\n        this.labelBackgroundPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelOutlinePaint() {\n        return this.labelOutlinePaint;\n    }\n\n    public void setLabelOutlinePaint(java.awt.Paint paint) {\n        this.labelOutlinePaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getLabelOutlineStroke() {\n        return this.labelOutlineStroke;\n    }\n\n    public void setLabelOutlineStroke(java.awt.Stroke stroke) {\n        this.labelOutlineStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelShadowPaint() {\n        return this.labelShadowPaint;\n    }\n\n    public void setLabelShadowPaint(java.awt.Paint paint) {\n        this.labelShadowPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.RectangleInsets getLabelPadding() {\n        return this.labelPadding;\n    }\n\n    public void setLabelPadding(org.jfree.chart.util.RectangleInsets padding) {\n        if (padding == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'padding' argument.\");\n        }\n        this.labelPadding = padding;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getSimpleLabels() {\n        return this.simpleLabels;\n    }\n\n    public void setSimpleLabels(boolean simple) {\n        this.simpleLabels = simple;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.RectangleInsets getSimpleLabelOffset() {\n        return this.simpleLabelOffset;\n    }\n\n    public void setSimpleLabelOffset(org.jfree.chart.util.RectangleInsets offset) {\n        if (offset == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'offset' argument.\");\n        }\n        this.simpleLabelOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.plot.AbstractPieLabelDistributor getLabelDistributor() {\n        return this.labelDistributor;\n    }\n\n    public void setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor distributor) {\n        if (distributor == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'distributor' argument.\");\n        }\n        this.labelDistributor = distributor;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieToolTipGenerator getToolTipGenerator() {\n        return this.toolTipGenerator;\n    }\n\n    public void setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator generator) {\n        this.toolTipGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.urls.PieURLGenerator getURLGenerator() {\n        return this.urlGenerator;\n    }\n\n    public void setURLGenerator(org.jfree.chart.urls.PieURLGenerator generator) {\n        this.urlGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMinimumArcAngleToDraw() {\n        return this.minimumArcAngleToDraw;\n    }\n\n    public void setMinimumArcAngleToDraw(double angle) {\n        this.minimumArcAngleToDraw = angle;\n    }\n\n    public java.awt.Shape getLegendItemShape() {\n        return this.legendItemShape;\n    }\n\n    public void setLegendItemShape(java.awt.Shape shape) {\n        if (shape == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'shape' argument.\");\n        }\n        this.legendItemShape = shape;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLegendLabelGenerator() {\n        return this.legendLabelGenerator;\n    }\n\n    public void setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        if (generator == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'generator' argument.\");\n        }\n        this.legendLabelGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLegendLabelToolTipGenerator() {\n        return this.legendLabelToolTipGenerator;\n    }\n\n    public void setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        this.legendLabelToolTipGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.urls.PieURLGenerator getLegendLabelURLGenerator() {\n        return this.legendLabelURLGenerator;\n    }\n\n    public void setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator generator) {\n        this.legendLabelURLGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.plot.PiePlot plot, java.lang.Integer index, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.plot.PiePlotState state = new org.jfree.chart.plot.PiePlotState(info);\n        state.setPassesRequired(2);\n        state.setTotal(org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n    }\n\n    public void draw(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.awt.geom.Point2D anchor, org.jfree.chart.plot.PlotState parentState, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.util.RectangleInsets insets = getInsets();\n        insets.trim(area);\n        if (info != null) {\n            info.setPlotArea(area);\n            info.setDataArea(area);\n        }\n        drawBackground(g2, area);\n        drawOutline(g2, area);\n        java.awt.Shape savedClip = g2.getClip();\n        g2.clip(area);\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getForegroundAlpha()));\n        if (!org.jfree.data.general.DatasetUtilities.isEmptyOrNull(this.dataset)) {\n            drawPie(g2, area, info);\n        } else {\n            drawNoDataMessage(g2, area);\n        }\n        g2.setClip(savedClip);\n        g2.setComposite(originalComposite);\n        drawOutline(g2, area);\n    }\n\n    protected void drawPie(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.plot.PiePlotState state = initialise(g2, plotArea, this, null, info);\n        double labelReserve = 0.0;\n        if ((this.labelGenerator != null) && (!this.simpleLabels)) {\n            labelReserve = this.labelGap + this.maximumLabelWidth;\n        }\n        double gapHorizontal = (plotArea.getWidth() * (this.interiorGap + labelReserve)) * 2.0;\n        double gapVertical = (plotArea.getHeight() * this.interiorGap) * 2.0;\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_INTERIOR) {\n            double hGap = plotArea.getWidth() * this.interiorGap;\n            double vGap = plotArea.getHeight() * this.interiorGap;\n            double igx1 = plotArea.getX() + hGap;\n            double igx2 = plotArea.getMaxX() - hGap;\n            double igy1 = plotArea.getY() + vGap;\n            double igy2 = plotArea.getMaxY() - vGap;\n            g2.setPaint(java.awt.Color.gray);\n            g2.draw(new java.awt.geom.Rectangle2D.Double(igx1, igy1, igx2 - igx1, igy2 - igy1));\n        }\n        double linkX = plotArea.getX() + (gapHorizontal / 2);\n        double linkY = plotArea.getY() + (gapVertical / 2);\n        double linkW = plotArea.getWidth() - gapHorizontal;\n        double linkH = plotArea.getHeight() - gapVertical;\n        if (this.circular) {\n            double min = java.lang.Math.min(linkW, linkH) / 2;\n            linkX = (((linkX + linkX) + linkW) / 2) - min;\n            linkY = (((linkY + linkY) + linkH) / 2) - min;\n            linkW = 2 * min;\n            linkH = 2 * min;\n        }\n        java.awt.geom.Rectangle2D linkArea = new java.awt.geom.Rectangle2D.Double(linkX, linkY, linkW, linkH);\n        state.setLinkArea(linkArea);\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_LINK_AREA) {\n            g2.setPaint(java.awt.Color.blue);\n            g2.draw(linkArea);\n            g2.setPaint(java.awt.Color.yellow);\n            g2.draw(new java.awt.geom.Ellipse2D.Double(linkArea.getX(), linkArea.getY(), linkArea.getWidth(), linkArea.getHeight()));\n        }\n        double lm = 0.0;\n        if (!this.simpleLabels) {\n            lm = this.labelLinkMargin;\n        }\n        double hh = (linkArea.getWidth() * lm) * 2.0;\n        double vv = (linkArea.getHeight() * lm) * 2.0;\n        java.awt.geom.Rectangle2D explodeArea = new java.awt.geom.Rectangle2D.Double(linkX + (hh / 2.0), linkY + (vv / 2.0), linkW - hh, linkH - vv);\n        state.setExplodedPieArea(explodeArea);\n        double maximumExplodePercent = getMaximumExplodePercent();\n        double percent = maximumExplodePercent / (1.0 + maximumExplodePercent);\n        double h1 = explodeArea.getWidth() * percent;\n        double v1 = explodeArea.getHeight() * percent;\n        java.awt.geom.Rectangle2D pieArea = new java.awt.geom.Rectangle2D.Double(explodeArea.getX() + (h1 / 2.0), explodeArea.getY() + (v1 / 2.0), explodeArea.getWidth() - h1, explodeArea.getHeight() - v1);\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_PIE_AREA) {\n            g2.setPaint(java.awt.Color.green);\n            g2.draw(pieArea);\n        }\n        state.setPieArea(pieArea);\n        state.setPieCenterX(pieArea.getCenterX());\n        state.setPieCenterY(pieArea.getCenterY());\n        state.setPieWRadius(pieArea.getWidth() / 2.0);\n        state.setPieHRadius(pieArea.getHeight() / 2.0);\n        if ((this.dataset != null) && (this.dataset.getKeys().size() > 0)) {\n            java.util.List keys = this.dataset.getKeys();\n            double totalValue = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(this.dataset);\n            int passesRequired = state.getPassesRequired();\n            for (int pass = 0; pass < passesRequired; pass++) {\n                double runningTotal = 0.0;\n                for (int section = 0; section < keys.size(); section++) {\n                    java.lang.Number n = this.dataset.getValue(section);\n                    if (n != null) {\n                        double value = n.doubleValue();\n                        if (value > 0.0) {\n                            runningTotal += value;\n                            drawItem(g2, section, explodeArea, state, pass);\n                        }\n                    }\n                }\n            }\n            if (this.simpleLabels) {\n                drawSimpleLabels(g2, keys, totalValue, plotArea, linkArea, state);\n            } else {\n                drawLabels(g2, keys, totalValue, plotArea, linkArea, state);\n            }\n        } else {\n            drawNoDataMessage(g2, plotArea);\n        }\n    }\n\n    protected void drawItem(java.awt.Graphics2D g2, int section, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PiePlotState state, int currentPass) {\n        java.lang.Number n = this.dataset.getValue(section);\n        if (n == null) {\n            return;\n        }\n        double value = n.doubleValue();\n        double angle1 = 0.0;\n        double angle2 = 0.0;\n        if (this.direction == org.jfree.chart.util.Rotation.CLOCKWISE) {\n            angle1 = state.getLatestAngle();\n            angle2 = angle1 - ((value / state.getTotal()) * 360.0);\n        } else if (this.direction == org.jfree.chart.util.Rotation.ANTICLOCKWISE) {\n            angle1 = state.getLatestAngle();\n            angle2 = angle1 + ((value / state.getTotal()) * 360.0);\n        } else {\n            throw new java.lang.IllegalStateException(\"Rotation type not recognised.\");\n        }\n        double angle = angle2 - angle1;\n        if (java.lang.Math.abs(angle) > getMinimumArcAngleToDraw()) {\n            double ep = 0.0;\n            double mep = getMaximumExplodePercent();\n            if (mep > 0.0) {\n                ep = getExplodePercent(getSectionKey(section)) / mep;\n            }\n            java.awt.geom.Rectangle2D arcBounds = getArcBounds(state.getPieArea(), state.getExplodedPieArea(), angle1, angle, ep);\n            java.awt.geom.Arc2D.Double arc = new java.awt.geom.Arc2D.Double(arcBounds, angle1, angle, java.awt.geom.Arc2D.PIE);\n            if (currentPass == 0) {\n                if (this.shadowPaint != null) {\n                    java.awt.Shape shadowArc = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(arc, ((float) (this.shadowXOffset)), ((float) (this.shadowYOffset)));\n                    g2.setPaint(this.shadowPaint);\n                    g2.fill(shadowArc);\n                }\n            } else if (currentPass == 1) {\n                java.lang.Comparable key = getSectionKey(section);\n                java.awt.Paint paint = lookupSectionPaint(key, true);\n                g2.setPaint(paint);\n                g2.fill(arc);\n                java.awt.Paint outlinePaint = lookupSectionOutlinePaint(key);\n                java.awt.Stroke outlineStroke = lookupSectionOutlineStroke(key);\n                if (this.sectionOutlinesVisible) {\n                    g2.setPaint(outlinePaint);\n                    g2.setStroke(outlineStroke);\n                    g2.draw(arc);\n                }\n                if (state.getInfo() != null) {\n                    org.jfree.chart.entity.EntityCollection entities = state.getEntityCollection();\n                    if (entities != null) {\n                        java.lang.String tip = null;\n                        if (this.toolTipGenerator != null) {\n                            tip = this.toolTipGenerator.generateToolTip(this.dataset, key);\n                        }\n                        java.lang.String url = null;\n                        if (this.urlGenerator != null) {\n                            url = this.urlGenerator.generateURL(this.dataset, key, this.pieIndex);\n                        }\n                        org.jfree.chart.entity.PieSectionEntity entity = new org.jfree.chart.entity.PieSectionEntity(arc, this.dataset, this.pieIndex, section, key, tip, url);\n                        entities.add(entity);\n                    }\n                }\n            }\n        }\n        state.setLatestAngle(angle2);\n    }\n\n    protected void drawSimpleLabels(java.awt.Graphics2D g2, java.util.List keys, double totalValue, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D pieArea, org.jfree.chart.plot.PiePlotState state) {\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0F));\n        org.jfree.chart.util.RectangleInsets labelInsets = new org.jfree.chart.util.RectangleInsets(org.jfree.chart.util.UnitType.RELATIVE, 0.18, 0.18, 0.18, 0.18);\n        java.awt.geom.Rectangle2D labelsArea = labelInsets.createInsetRectangle(pieArea);\n        double runningTotal = 0.0;\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            boolean include = true;\n            double v = 0.0;\n            java.lang.Number n = getDataset().getValue(key);\n            if (n == null) {\n                include = !getIgnoreNullValues();\n            } else {\n                v = n.doubleValue();\n                include = (getIgnoreZeroValues()) ? v > 0.0 : v >= 0.0;\n            }\n            if (include) {\n                runningTotal = runningTotal + v;\n                double mid = getStartAngle() + ((getDirection().getFactor() * ((runningTotal - (v / 2.0)) * 360)) / totalValue);\n                java.awt.geom.Arc2D arc = new java.awt.geom.Arc2D.Double(labelsArea, getStartAngle(), mid - getStartAngle(), java.awt.geom.Arc2D.OPEN);\n                int x = ((int) (arc.getEndPoint().getX()));\n                int y = ((int) (arc.getEndPoint().getY()));\n                org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator = getLabelGenerator();\n                if (labelGenerator == null) {\n                    continue;\n                }\n                java.lang.String label = labelGenerator.generateSectionLabel(this.dataset, key);\n                if (label == null) {\n                    continue;\n                }\n                g2.setFont(this.labelFont);\n                java.awt.FontMetrics fm = g2.getFontMetrics();\n                java.awt.geom.Rectangle2D bounds = org.jfree.chart.text.TextUtilities.getTextBounds(label, g2, fm);\n                java.awt.geom.Rectangle2D out = this.labelPadding.createOutsetRectangle(bounds);\n                java.awt.Shape bg = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(out, x - bounds.getCenterX(), y - bounds.getCenterY());\n                if (this.labelShadowPaint != null) {\n                    java.awt.Shape shadow = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(bg, this.shadowXOffset, this.shadowYOffset);\n                    g2.setPaint(this.labelShadowPaint);\n                    g2.fill(shadow);\n                }\n                if (this.labelBackgroundPaint != null) {\n                    g2.setPaint(this.labelBackgroundPaint);\n                    g2.fill(bg);\n                }\n                if ((this.labelOutlinePaint != null) && (this.labelOutlineStroke != null)) {\n                    g2.setPaint(this.labelOutlinePaint);\n                    g2.setStroke(this.labelOutlineStroke);\n                    g2.draw(bg);\n                }\n                g2.setPaint(this.labelPaint);\n                g2.setFont(this.labelFont);\n                org.jfree.chart.text.TextUtilities.drawAlignedString(getLabelGenerator().generateSectionLabel(getDataset(), key), g2, x, y, TextAnchor.CENTER);\n            }\n        } \n        g2.setComposite(originalComposite);\n    }\n\n    protected void drawLabels(java.awt.Graphics2D g2, java.util.List keys, double totalValue, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, org.jfree.chart.plot.PiePlotState state) {\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0F));\n        org.jfree.data.DefaultKeyedValues leftKeys = new org.jfree.data.DefaultKeyedValues();\n        org.jfree.data.DefaultKeyedValues rightKeys = new org.jfree.data.DefaultKeyedValues();\n        double runningTotal = 0.0;\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            boolean include = true;\n            double v = 0.0;\n            java.lang.Number n = this.dataset.getValue(key);\n            if (n == null) {\n                include = !this.ignoreNullValues;\n            } else {\n                v = n.doubleValue();\n                include = (this.ignoreZeroValues) ? v > 0.0 : v >= 0.0;\n            }\n            if (include) {\n                runningTotal = runningTotal + v;\n                double mid = this.startAngle + ((this.direction.getFactor() * ((runningTotal - (v / 2.0)) * 360)) / totalValue);\n                if (java.lang.Math.cos(java.lang.Math.toRadians(mid)) < 0.0) {\n                    leftKeys.addValue(key, new java.lang.Double(mid));\n                } else {\n                    rightKeys.addValue(key, new java.lang.Double(mid));\n                }\n            }\n        } \n        g2.setFont(getLabelFont());\n        double marginX = plotArea.getX() + (this.interiorGap * plotArea.getWidth());\n        double gap = plotArea.getWidth() * this.labelGap;\n        double ww = (linkArea.getX() - gap) - marginX;\n        float labelWidth = ((float) (this.labelPadding.trimWidth(ww)));\n        if (this.labelGenerator != null) {\n            drawLeftLabels(leftKeys, g2, plotArea, linkArea, labelWidth, state);\n            drawRightLabels(rightKeys, g2, plotArea, linkArea, labelWidth, state);\n        }\n        g2.setComposite(originalComposite);\n    }\n\n    protected void drawLeftLabels(org.jfree.data.KeyedValues leftKeys, java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, float maxLabelWidth, org.jfree.chart.plot.PiePlotState state) {\n        this.labelDistributor.clear();\n        double lGap = plotArea.getWidth() * this.labelGap;\n        double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;\n        for (int i = 0; i < leftKeys.getItemCount(); i++) {\n            java.lang.String label = this.labelGenerator.generateSectionLabel(this.dataset, leftKeys.getKey(i));\n            if (label != null) {\n                org.jfree.chart.text.TextBlock block = org.jfree.chart.text.TextUtilities.createTextBlock(label, this.labelFont, this.labelPaint, maxLabelWidth, new org.jfree.chart.text.G2TextMeasurer(g2));\n                org.jfree.chart.text.TextBox labelBox = new org.jfree.chart.text.TextBox(block);\n                labelBox.setBackgroundPaint(this.labelBackgroundPaint);\n                labelBox.setOutlinePaint(this.labelOutlinePaint);\n                labelBox.setOutlineStroke(this.labelOutlineStroke);\n                labelBox.setShadowPaint(this.labelShadowPaint);\n                labelBox.setInteriorGap(this.labelPadding);\n                double theta = java.lang.Math.toRadians(leftKeys.getValue(i).doubleValue());\n                double baseY = state.getPieCenterY() - (java.lang.Math.sin(theta) * verticalLinkRadius);\n                double hh = labelBox.getHeight(g2);\n                this.labelDistributor.addPieLabelRecord(new org.jfree.chart.plot.PieLabelRecord(leftKeys.getKey(i), theta, baseY, labelBox, hh, (lGap / 2.0) + ((lGap / 2.0) * (-java.lang.Math.cos(theta))), 0.9 + getExplodePercent(leftKeys.getKey(i))));\n            }\n        }\n        this.labelDistributor.distributeLabels(plotArea.getMinY(), plotArea.getHeight());\n        for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {\n            drawLeftLabel(g2, state, this.labelDistributor.getPieLabelRecord(i));\n        }\n    }\n\n    protected void drawRightLabels(org.jfree.data.KeyedValues keys, java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, float maxLabelWidth, org.jfree.chart.plot.PiePlotState state) {\n        this.labelDistributor.clear();\n        double lGap = plotArea.getWidth() * this.labelGap;\n        double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;\n        for (int i = 0; i < keys.getItemCount(); i++) {\n            java.lang.String label = this.labelGenerator.generateSectionLabel(this.dataset, keys.getKey(i));\n            if (label != null) {\n                org.jfree.chart.text.TextBlock block = org.jfree.chart.text.TextUtilities.createTextBlock(label, this.labelFont, this.labelPaint, maxLabelWidth, new org.jfree.chart.text.G2TextMeasurer(g2));\n                org.jfree.chart.text.TextBox labelBox = new org.jfree.chart.text.TextBox(block);\n                labelBox.setBackgroundPaint(this.labelBackgroundPaint);\n                labelBox.setOutlinePaint(this.labelOutlinePaint);\n                labelBox.setOutlineStroke(this.labelOutlineStroke);\n                labelBox.setShadowPaint(this.labelShadowPaint);\n                labelBox.setInteriorGap(this.labelPadding);\n                double theta = java.lang.Math.toRadians(keys.getValue(i).doubleValue());\n                double baseY = state.getPieCenterY() - (java.lang.Math.sin(theta) * verticalLinkRadius);\n                double hh = labelBox.getHeight(g2);\n                this.labelDistributor.addPieLabelRecord(new org.jfree.chart.plot.PieLabelRecord(keys.getKey(i), theta, baseY, labelBox, hh, (lGap / 2.0) + ((lGap / 2.0) * java.lang.Math.cos(theta)), 0.9 + getExplodePercent(keys.getKey(i))));\n            }\n        }\n        this.labelDistributor.distributeLabels(plotArea.getMinY(), plotArea.getHeight());\n        for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {\n            drawRightLabel(g2, state, this.labelDistributor.getPieLabelRecord(i));\n        }\n    }\n\n    public org.jfree.chart.LegendItemCollection getLegendItems() {\n        org.jfree.chart.LegendItemCollection result = new org.jfree.chart.LegendItemCollection();\n        if (this.dataset == null) {\n            return result;\n        }\n        java.util.List keys = this.dataset.getKeys();\n        int section = 0;\n        java.awt.Shape shape = getLegendItemShape();\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            java.lang.Number n = this.dataset.getValue(key);\n            boolean include = true;\n            if (n == null) {\n                include = !this.ignoreNullValues;\n            } else {\n                double v = n.doubleValue();\n                if (v == 0.0) {\n                    include = !this.ignoreZeroValues;\n                } else {\n                    include = v > 0.0;\n                }\n            }\n            if (include) {\n                java.lang.String label = this.legendLabelGenerator.generateSectionLabel(this.dataset, key);\n                if (label != null) {\n                    java.lang.String description = label;\n                    java.lang.String toolTipText = null;\n                    if (this.legendLabelToolTipGenerator != null) {\n                        toolTipText = this.legendLabelToolTipGenerator.generateSectionLabel(this.dataset, key);\n                    }\n                    java.lang.String urlText = null;\n                    if (this.legendLabelURLGenerator != null) {\n                        urlText = this.legendLabelURLGenerator.generateURL(this.dataset, key, this.pieIndex);\n                    }\n                    java.awt.Paint paint = lookupSectionPaint(key, true);\n                    java.awt.Paint outlinePaint = lookupSectionOutlinePaint(key);\n                    java.awt.Stroke outlineStroke = lookupSectionOutlineStroke(key);\n                    org.jfree.chart.LegendItem item = new org.jfree.chart.LegendItem(label, description, toolTipText, urlText, true, shape, true, paint, true, outlinePaint, outlineStroke, false, new java.awt.geom.Line2D.Float(), new java.awt.BasicStroke(), java.awt.Color.black);\n                    item.setDataset(getDataset());\n                    result.add(item);\n                }\n                section++;\n            } else {\n                section++;\n            }\n        } \n        return result;\n    }\n\n    public java.lang.String getPlotType() {\n        return org.jfree.chart.plot.PiePlot.localizationResources.getString(\"Pie_Plot\");\n    }\n\n    protected java.awt.geom.Rectangle2D getArcBounds(java.awt.geom.Rectangle2D unexploded, java.awt.geom.Rectangle2D exploded, double angle, double extent, double explodePercent) {\n        if (explodePercent == 0.0) {\n            return unexploded;\n        } else {\n            java.awt.geom.Arc2D arc1 = new java.awt.geom.Arc2D.Double(unexploded, angle, extent / 2, java.awt.geom.Arc2D.OPEN);\n            java.awt.geom.Point2D point1 = arc1.getEndPoint();\n            java.awt.geom.Arc2D.Double arc2 = new java.awt.geom.Arc2D.Double(exploded, angle, extent / 2, java.awt.geom.Arc2D.OPEN);\n            java.awt.geom.Point2D point2 = arc2.getEndPoint();\n            double deltaX = (point1.getX() - point2.getX()) * explodePercent;\n            double deltaY = (point1.getY() - point2.getY()) * explodePercent;\n            return new java.awt.geom.Rectangle2D.Double(unexploded.getX() - deltaX, unexploded.getY() - deltaY, unexploded.getWidth(), unexploded.getHeight());\n        }\n    }\n\n    protected void drawLeftLabel(java.awt.Graphics2D g2, org.jfree.chart.plot.PiePlotState state, org.jfree.chart.plot.PieLabelRecord record) {\n        double anchorX = state.getLinkArea().getMinX();\n        double targetX = anchorX - record.getGap();\n        double targetY = record.getAllocatedY();\n        if (this.labelLinksVisible) {\n            double theta = record.getAngle();\n            double linkX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getPieWRadius()) * record.getLinkPercent());\n            double linkY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getPieHRadius()) * record.getLinkPercent());\n            double elbowX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getLinkArea().getWidth()) / 2.0);\n            double elbowY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getLinkArea().getHeight()) / 2.0);\n            double anchorY = elbowY;\n            g2.setPaint(this.labelLinkPaint);\n            g2.setStroke(this.labelLinkStroke);\n            g2.draw(new java.awt.geom.Line2D.Double(linkX, linkY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, targetX, targetY));\n        }\n        org.jfree.chart.text.TextBox tb = record.getLabel();\n        tb.draw(g2, ((float) (targetX)), ((float) (targetY)), RectangleAnchor.RIGHT);\n    }\n\n    protected void drawRightLabel(java.awt.Graphics2D g2, org.jfree.chart.plot.PiePlotState state, org.jfree.chart.plot.PieLabelRecord record) {\n        double anchorX = state.getLinkArea().getMaxX();\n        double targetX = anchorX + record.getGap();\n        double targetY = record.getAllocatedY();\n        if (this.labelLinksVisible) {\n            double theta = record.getAngle();\n            double linkX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getPieWRadius()) * record.getLinkPercent());\n            double linkY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getPieHRadius()) * record.getLinkPercent());\n            double elbowX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getLinkArea().getWidth()) / 2.0);\n            double elbowY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getLinkArea().getHeight()) / 2.0);\n            double anchorY = elbowY;\n            g2.setPaint(this.labelLinkPaint);\n            g2.setStroke(this.labelLinkStroke);\n            g2.draw(new java.awt.geom.Line2D.Double(linkX, linkY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, targetX, targetY));\n        }\n        org.jfree.chart.text.TextBox tb = record.getLabel();\n        tb.draw(g2, ((float) (targetX)), ((float) (targetY)), RectangleAnchor.LEFT);\n    }\n\n    public boolean equals(java.lang.Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof org.jfree.chart.plot.PiePlot)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        org.jfree.chart.plot.PiePlot that = ((org.jfree.chart.plot.PiePlot) (obj));\n        if (this.pieIndex != that.pieIndex) {\n            return false;\n        }\n        if (this.interiorGap != that.interiorGap) {\n            return false;\n        }\n        if (this.circular != that.circular) {\n            return false;\n        }\n        if (this.startAngle != that.startAngle) {\n            return false;\n        }\n        if (this.direction != that.direction) {\n            return false;\n        }\n        if (this.ignoreZeroValues != that.ignoreZeroValues) {\n            return false;\n        }\n        if (this.ignoreNullValues != that.ignoreNullValues) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionPaintMap, that.sectionPaintMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.baseSectionPaint, that.baseSectionPaint)) {\n            return false;\n        }\n        if (this.sectionOutlinesVisible != that.sectionOutlinesVisible) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionOutlinePaintMap, that.sectionOutlinePaintMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.baseSectionOutlinePaint, that.baseSectionOutlinePaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionOutlineStrokeMap, that.sectionOutlineStrokeMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.baseSectionOutlineStroke, that.baseSectionOutlineStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (!(this.shadowXOffset == that.shadowXOffset)) {\n            return false;\n        }\n        if (!(this.shadowYOffset == that.shadowYOffset)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.explodePercentages, that.explodePercentages)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelGenerator, that.labelGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelBackgroundPaint, that.labelBackgroundPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelOutlinePaint, that.labelOutlinePaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelOutlineStroke, that.labelOutlineStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelShadowPaint, that.labelShadowPaint)) {\n            return false;\n        }\n        if (this.simpleLabels != that.simpleLabels) {\n            return false;\n        }\n        if (!this.simpleLabelOffset.equals(that.simpleLabelOffset)) {\n            return false;\n        }\n        if (!this.labelPadding.equals(that.labelPadding)) {\n            return false;\n        }\n        if (!(this.maximumLabelWidth == that.maximumLabelWidth)) {\n            return false;\n        }\n        if (!(this.labelGap == that.labelGap)) {\n            return false;\n        }\n        if (!(this.labelLinkMargin == that.labelLinkMargin)) {\n            return false;\n        }\n        if (this.labelLinksVisible != that.labelLinksVisible) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelLinkPaint, that.labelLinkPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelLinkStroke, that.labelLinkStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.toolTipGenerator, that.toolTipGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.urlGenerator, that.urlGenerator)) {\n            return false;\n        }\n        if (!(this.minimumArcAngleToDraw == that.minimumArcAngleToDraw)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ShapeUtilities.equal(this.legendItemShape, that.legendItemShape)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelGenerator, that.legendLabelGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelToolTipGenerator, that.legendLabelToolTipGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelURLGenerator, that.legendLabelURLGenerator)) {\n            return false;\n        }\n        return true;\n    }\n\n    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {\n        org.jfree.chart.plot.PiePlot clone = ((org.jfree.chart.plot.PiePlot) (super.clone()));\n        if (clone.dataset != null) {\n            clone.dataset.addChangeListener(clone);\n        }\n        if (this.urlGenerator instanceof org.jfree.chart.util.PublicCloneable) {\n            clone.urlGenerator = ((org.jfree.chart.urls.PieURLGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.urlGenerator)));\n        }\n        clone.legendItemShape = org.jfree.chart.util.ShapeUtilities.clone(this.legendItemShape);\n        if (this.legendLabelGenerator != null) {\n            clone.legendLabelGenerator = ((org.jfree.chart.labels.PieSectionLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelGenerator)));\n        }\n        if (this.legendLabelToolTipGenerator != null) {\n            clone.legendLabelToolTipGenerator = ((org.jfree.chart.labels.PieSectionLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelToolTipGenerator)));\n        }\n        if (this.legendLabelURLGenerator instanceof org.jfree.chart.util.PublicCloneable) {\n            clone.legendLabelURLGenerator = ((org.jfree.chart.urls.PieURLGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelURLGenerator)));\n        }\n        return clone;\n    }\n\n    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {\n        stream.defaultWriteObject();\n        org.jfree.chart.util.SerialUtilities.writePaint(this.baseSectionPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.baseSectionOutlinePaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.baseSectionOutlineStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.shadowPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelBackgroundPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelOutlinePaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.labelOutlineStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelShadowPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelLinkPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.labelLinkStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writeShape(this.legendItemShape, stream);\n    }\n\n    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        stream.defaultReadObject();\n        this.baseSectionPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.baseSectionOutlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.baseSectionOutlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.shadowPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelBackgroundPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelOutlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelOutlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.labelShadowPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelLinkPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelLinkStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.legendItemShape = org.jfree.chart.util.SerialUtilities.readShape(stream);\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "MOV",
            "src": "public void setLabelGap(double gap) {\n    this.labelGap = gap;\n    notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n}",
            "src_parent": "public class PiePlot extends org.jfree.chart.plot.Plot implements java.io.Serializable , java.lang.Cloneable {\n    private static final long serialVersionUID = -795612466005590431L;\n\n    public static final double DEFAULT_INTERIOR_GAP = 0.08;\n\n    public static final double MAX_INTERIOR_GAP = 0.4;\n\n    public static final double DEFAULT_START_ANGLE = 90.0;\n\n    public static final java.awt.Font DEFAULT_LABEL_FONT = new java.awt.Font(\"SansSerif\", java.awt.Font.PLAIN, 10);\n\n    public static final java.awt.Paint DEFAULT_LABEL_PAINT = java.awt.Color.black;\n\n    public static final java.awt.Paint DEFAULT_LABEL_BACKGROUND_PAINT = new java.awt.Color(255, 255, 192);\n\n    public static final java.awt.Paint DEFAULT_LABEL_OUTLINE_PAINT = java.awt.Color.black;\n\n    public static final java.awt.Stroke DEFAULT_LABEL_OUTLINE_STROKE = new java.awt.BasicStroke(0.5F);\n\n    public static final java.awt.Paint DEFAULT_LABEL_SHADOW_PAINT = new java.awt.Color(151, 151, 151, 128);\n\n    public static final double DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW = 1.0E-5;\n\n    private org.jfree.data.general.PieDataset dataset;\n\n    private int pieIndex;\n\n    private double interiorGap;\n\n    private boolean circular;\n\n    private double startAngle;\n\n    private org.jfree.chart.util.Rotation direction;\n\n    private org.jfree.chart.PaintMap sectionPaintMap;\n\n    private transient java.awt.Paint baseSectionPaint;\n\n    private boolean sectionOutlinesVisible;\n\n    private org.jfree.chart.PaintMap sectionOutlinePaintMap;\n\n    private transient java.awt.Paint baseSectionOutlinePaint;\n\n    private org.jfree.chart.StrokeMap sectionOutlineStrokeMap;\n\n    private transient java.awt.Stroke baseSectionOutlineStroke;\n\n    private transient java.awt.Paint shadowPaint = java.awt.Color.gray;\n\n    private double shadowXOffset = 4.0F;\n\n    private double shadowYOffset = 4.0F;\n\n    private java.util.Map explodePercentages;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator;\n\n    private java.awt.Font labelFont;\n\n    private transient java.awt.Paint labelPaint;\n\n    private transient java.awt.Paint labelBackgroundPaint;\n\n    private transient java.awt.Paint labelOutlinePaint;\n\n    private transient java.awt.Stroke labelOutlineStroke;\n\n    private transient java.awt.Paint labelShadowPaint;\n\n    private boolean simpleLabels = true;\n\n    private org.jfree.chart.util.RectangleInsets labelPadding;\n\n    private org.jfree.chart.util.RectangleInsets simpleLabelOffset;\n\n    private double maximumLabelWidth = 0.14;\n\n    private double labelGap = 0.025;\n\n    private boolean labelLinksVisible;\n\n    private double labelLinkMargin = 0.025;\n\n    private transient java.awt.Paint labelLinkPaint = java.awt.Color.black;\n\n    private transient java.awt.Stroke labelLinkStroke = new java.awt.BasicStroke(0.5F);\n\n    private org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor;\n\n    private org.jfree.chart.labels.PieToolTipGenerator toolTipGenerator;\n\n    private org.jfree.chart.urls.PieURLGenerator urlGenerator;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator legendLabelGenerator;\n\n    private org.jfree.chart.labels.PieSectionLabelGenerator legendLabelToolTipGenerator;\n\n    private org.jfree.chart.urls.PieURLGenerator legendLabelURLGenerator;\n\n    private boolean ignoreNullValues;\n\n    private boolean ignoreZeroValues;\n\n    private transient java.awt.Shape legendItemShape;\n\n    private double minimumArcAngleToDraw;\n\n    protected static java.util.ResourceBundle localizationResources = java.util.ResourceBundle.getBundle(\"org.jfree.chart.plot.LocalizationBundle\");\n\n    static final boolean DEBUG_DRAW_INTERIOR = false;\n\n    static final boolean DEBUG_DRAW_LINK_AREA = false;\n\n    static final boolean DEBUG_DRAW_PIE_AREA = false;\n\n    public PiePlot() {\n        this(null);\n    }\n\n    public PiePlot(org.jfree.data.general.PieDataset dataset) {\n        super();\n        this.dataset = dataset;\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n        this.pieIndex = 0;\n        this.interiorGap = org.jfree.chart.plot.PiePlot.DEFAULT_INTERIOR_GAP;\n        this.circular = true;\n        this.startAngle = org.jfree.chart.plot.PiePlot.DEFAULT_START_ANGLE;\n        this.direction = org.jfree.chart.util.Rotation.CLOCKWISE;\n        this.minimumArcAngleToDraw = org.jfree.chart.plot.PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW;\n        this.sectionPaintMap = new org.jfree.chart.PaintMap();\n        this.baseSectionPaint = java.awt.Color.gray;\n        this.sectionOutlinesVisible = true;\n        this.sectionOutlinePaintMap = new org.jfree.chart.PaintMap();\n        this.baseSectionOutlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.sectionOutlineStrokeMap = new org.jfree.chart.StrokeMap();\n        this.baseSectionOutlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.explodePercentages = new java.util.TreeMap();\n        this.labelGenerator = new org.jfree.chart.labels.StandardPieSectionLabelGenerator();\n        this.labelFont = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT;\n        this.labelPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT;\n        this.labelBackgroundPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT;\n        this.labelOutlinePaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT;\n        this.labelOutlineStroke = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;\n        this.labelShadowPaint = org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT;\n        this.labelLinksVisible = true;\n        this.labelDistributor = new org.jfree.chart.plot.PieLabelDistributor(0);\n        this.simpleLabels = false;\n        this.simpleLabelOffset = new org.jfree.chart.util.RectangleInsets(org.jfree.chart.util.UnitType.RELATIVE, 0.18, 0.18, 0.18, 0.18);\n        this.labelPadding = new org.jfree.chart.util.RectangleInsets(2, 2, 2, 2);\n        this.toolTipGenerator = null;\n        this.urlGenerator = null;\n        this.legendLabelGenerator = new org.jfree.chart.labels.StandardPieSectionLabelGenerator();\n        this.legendLabelToolTipGenerator = null;\n        this.legendLabelURLGenerator = null;\n        this.legendItemShape = Plot.DEFAULT_LEGEND_ITEM_CIRCLE;\n        this.ignoreNullValues = false;\n        this.ignoreZeroValues = false;\n    }\n\n    public org.jfree.data.general.PieDataset getDataset() {\n        return this.dataset;\n    }\n\n    public void setDataset(org.jfree.data.general.PieDataset dataset) {\n        org.jfree.data.general.PieDataset existing = this.dataset;\n        if (existing != null) {\n            existing.removeChangeListener(this);\n        }\n        this.dataset = dataset;\n        if (dataset != null) {\n            setDatasetGroup(dataset.getGroup());\n            dataset.addChangeListener(this);\n        }\n        org.jfree.data.general.DatasetChangeEvent event = new org.jfree.data.general.DatasetChangeEvent(this, dataset);\n        datasetChanged(event);\n    }\n\n    public int getPieIndex() {\n        return this.pieIndex;\n    }\n\n    public void setPieIndex(int index) {\n        this.pieIndex = index;\n    }\n\n    public double getStartAngle() {\n        return this.interiorGap;\n    }\n\n    public void setStartAngle(double angle) {\n        this.startAngle = angle;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.Rotation getDirection() {\n        return this.direction;\n    }\n\n    public void setDirection(org.jfree.chart.util.Rotation direction) {\n        if (direction == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'direction' argument.\");\n        }\n        this.direction = direction;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getInteriorGap() {\n        return this.interiorGap;\n    }\n\n    public void setInteriorGap(double percent) {\n        if ((percent < 0.0) || (percent > org.jfree.chart.plot.PiePlot.MAX_INTERIOR_GAP)) {\n            throw new java.lang.IllegalArgumentException((\"Invalid 'percent' (\" + percent) + \") argument.\");\n        }\n        if (this.interiorGap != percent) {\n            this.interiorGap = percent;\n            notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n        }\n    }\n\n    public boolean isCircular() {\n        return this.circular;\n    }\n\n    public void setCircular(boolean flag) {\n        setCircular(flag, true);\n    }\n\n    public void setCircular(boolean circular, boolean notify) {\n        this.circular = circular;\n        if (notify) {\n            notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n        }\n    }\n\n    public boolean getIgnoreNullValues() {\n        return this.ignoreNullValues;\n    }\n\n    public void setIgnoreNullValues(boolean flag) {\n        this.ignoreNullValues = flag;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getIgnoreZeroValues() {\n        return this.ignoreZeroValues;\n    }\n\n    public void setIgnoreZeroValues(boolean flag) {\n        this.ignoreZeroValues = flag;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Paint lookupSectionPaint(java.lang.Comparable key) {\n        return lookupSectionPaint(key, false);\n    }\n\n    protected java.awt.Paint lookupSectionPaint(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Paint result = null;\n        result = this.sectionPaintMap.getPaint(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextPaint();\n                this.sectionPaintMap.put(key, result);\n            } else {\n                result = this.baseSectionPaint;\n            }\n        } else {\n            result = this.baseSectionPaint;\n        }\n        return result;\n    }\n\n    protected java.lang.Comparable getSectionKey(int section) {\n        java.lang.Comparable key = null;\n        if (this.dataset != null) {\n            if ((section >= 0) && (section < this.dataset.getItemCount())) {\n                key = this.dataset.getKey(section);\n            }\n        }\n        if (key == null) {\n            key = new java.lang.Integer(section);\n        }\n        return key;\n    }\n\n    public java.awt.Paint getSectionPaint(java.lang.Comparable key) {\n        return this.sectionPaintMap.getPaint(key);\n    }\n\n    public void setSectionPaint(java.lang.Comparable key, java.awt.Paint paint) {\n        this.sectionPaintMap.put(key, paint);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getBaseSectionPaint() {\n        return this.baseSectionPaint;\n    }\n\n    public void setBaseSectionPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.baseSectionPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getSectionOutlinesVisible() {\n        return this.sectionOutlinesVisible;\n    }\n\n    public void setSectionOutlinesVisible(boolean visible) {\n        this.sectionOutlinesVisible = visible;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable key) {\n        return lookupSectionOutlinePaint(key, false);\n    }\n\n    protected java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Paint result = null;\n        result = this.sectionOutlinePaintMap.getPaint(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextOutlinePaint();\n                this.sectionOutlinePaintMap.put(key, result);\n            } else {\n                result = this.baseSectionOutlinePaint;\n            }\n        } else {\n            result = this.baseSectionOutlinePaint;\n        }\n        return result;\n    }\n\n    public java.awt.Paint getSectionOutlinePaint(java.lang.Comparable key) {\n        return this.sectionOutlinePaintMap.getPaint(key);\n    }\n\n    public void setSectionOutlinePaint(java.lang.Comparable key, java.awt.Paint paint) {\n        this.sectionOutlinePaintMap.put(key, paint);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getBaseSectionOutlinePaint() {\n        return this.baseSectionOutlinePaint;\n    }\n\n    public void setBaseSectionOutlinePaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.baseSectionOutlinePaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    protected java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable key) {\n        return lookupSectionOutlineStroke(key, false);\n    }\n\n    protected java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable key, boolean autoPopulate) {\n        java.awt.Stroke result = null;\n        result = this.sectionOutlineStrokeMap.getStroke(key);\n        if (result != null) {\n            return result;\n        }\n        if (autoPopulate) {\n            org.jfree.chart.plot.DrawingSupplier ds = getDrawingSupplier();\n            if (ds != null) {\n                result = ds.getNextOutlineStroke();\n                this.sectionOutlineStrokeMap.put(key, result);\n            } else {\n                result = this.baseSectionOutlineStroke;\n            }\n        } else {\n            result = this.baseSectionOutlineStroke;\n        }\n        return result;\n    }\n\n    public java.awt.Stroke getSectionOutlineStroke(java.lang.Comparable key) {\n        return this.sectionOutlineStrokeMap.getStroke(key);\n    }\n\n    public void setSectionOutlineStroke(java.lang.Comparable key, java.awt.Stroke stroke) {\n        this.sectionOutlineStrokeMap.put(key, stroke);\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getBaseSectionOutlineStroke() {\n        return this.baseSectionOutlineStroke;\n    }\n\n    public void setBaseSectionOutlineStroke(java.awt.Stroke stroke) {\n        if (stroke == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        this.baseSectionOutlineStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getShadowPaint() {\n        return this.shadowPaint;\n    }\n\n    public void setShadowPaint(java.awt.Paint paint) {\n        this.shadowPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getShadowXOffset() {\n        return this.shadowXOffset;\n    }\n\n    public void setShadowXOffset(double offset) {\n        this.shadowXOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getShadowYOffset() {\n        return this.shadowYOffset;\n    }\n\n    public void setShadowYOffset(double offset) {\n        this.shadowYOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getExplodePercent(java.lang.Comparable key) {\n        double result = 0.0;\n        if (this.explodePercentages != null) {\n            java.lang.Number percent = ((java.lang.Number) (this.explodePercentages.get(key)));\n            if (percent != null) {\n                result = percent.doubleValue();\n            }\n        }\n        return result;\n    }\n\n    public void setExplodePercent(java.lang.Comparable key, double percent) {\n        if (key == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        if (this.explodePercentages == null) {\n            this.explodePercentages = new java.util.TreeMap();\n        }\n        this.explodePercentages.put(key, new java.lang.Double(percent));\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        java.util.Iterator iterator = this.dataset.getKeys().iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            java.lang.Number explode = ((java.lang.Number) (this.explodePercentages.get(key)));\n            if (explode != null) {\n                result = java.lang.Math.max(result, explode.doubleValue());\n            }\n        } \n        return result;\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLabelGenerator() {\n        return this.labelGenerator;\n    }\n\n    public void setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        this.labelGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getLabelGap() {\n        return this.maximumLabelWidth;\n    }\n\n    public void setLabelGap(double gap) {\n        this.labelGap = gap;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMaximumLabelWidth() {\n        this.legendLabelURLGenerator = null;\n        return this.maximumLabelWidth;\n    }\n\n    public void setMaximumLabelWidth(double width) {\n        this.maximumLabelWidth = width;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getLabelLinksVisible() {\n        return this.labelLinksVisible;\n    }\n\n    public void setLabelLinksVisible(boolean visible) {\n        this.labelLinksVisible = visible;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getLabelLinkMargin() {\n        return this.startAngle;\n    }\n\n    public void setLabelLinkMargin(double margin) {\n        this.labelLinkMargin = margin;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelLinkPaint() {\n        return this.labelLinkPaint;\n    }\n\n    public void setLabelLinkPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.labelLinkPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getLabelLinkStroke() {\n        return this.labelLinkStroke;\n    }\n\n    public void setLabelLinkStroke(java.awt.Stroke stroke) {\n        if (stroke == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        this.labelLinkStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Font getLabelFont() {\n        return this.labelFont;\n    }\n\n    public void setLabelFont(java.awt.Font font) {\n        if (font == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'font' argument.\");\n        }\n        this.labelFont = font;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelPaint() {\n        return this.labelPaint;\n    }\n\n    public void setLabelPaint(java.awt.Paint paint) {\n        if (paint == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.labelPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelBackgroundPaint() {\n        return this.labelBackgroundPaint;\n    }\n\n    public void setLabelBackgroundPaint(java.awt.Paint paint) {\n        this.labelBackgroundPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelOutlinePaint() {\n        return this.labelOutlinePaint;\n    }\n\n    public void setLabelOutlinePaint(java.awt.Paint paint) {\n        this.labelOutlinePaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Stroke getLabelOutlineStroke() {\n        return this.labelOutlineStroke;\n    }\n\n    public void setLabelOutlineStroke(java.awt.Stroke stroke) {\n        this.labelOutlineStroke = stroke;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public java.awt.Paint getLabelShadowPaint() {\n        return this.labelShadowPaint;\n    }\n\n    public void setLabelShadowPaint(java.awt.Paint paint) {\n        this.labelShadowPaint = paint;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.RectangleInsets getLabelPadding() {\n        return this.labelPadding;\n    }\n\n    public void setLabelPadding(org.jfree.chart.util.RectangleInsets padding) {\n        if (padding == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'padding' argument.\");\n        }\n        this.labelPadding = padding;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public boolean getSimpleLabels() {\n        return this.simpleLabels;\n    }\n\n    public void setSimpleLabels(boolean simple) {\n        this.simpleLabels = simple;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.util.RectangleInsets getSimpleLabelOffset() {\n        return this.simpleLabelOffset;\n    }\n\n    public void setSimpleLabelOffset(org.jfree.chart.util.RectangleInsets offset) {\n        if (offset == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'offset' argument.\");\n        }\n        this.simpleLabelOffset = offset;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.plot.AbstractPieLabelDistributor getLabelDistributor() {\n        return this.labelDistributor;\n    }\n\n    public void setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor distributor) {\n        if (distributor == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'distributor' argument.\");\n        }\n        this.labelDistributor = distributor;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieToolTipGenerator getToolTipGenerator() {\n        return this.toolTipGenerator;\n    }\n\n    public void setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator generator) {\n        this.toolTipGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.urls.PieURLGenerator getURLGenerator() {\n        return this.urlGenerator;\n    }\n\n    public void setURLGenerator(org.jfree.chart.urls.PieURLGenerator generator) {\n        this.urlGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public double getMinimumArcAngleToDraw() {\n        return this.minimumArcAngleToDraw;\n    }\n\n    public void setMinimumArcAngleToDraw(double angle) {\n        this.minimumArcAngleToDraw = angle;\n    }\n\n    public java.awt.Shape getLegendItemShape() {\n        return this.legendItemShape;\n    }\n\n    public void setLegendItemShape(java.awt.Shape shape) {\n        if (shape == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'shape' argument.\");\n        }\n        this.legendItemShape = shape;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLegendLabelGenerator() {\n        return this.legendLabelGenerator;\n    }\n\n    public void setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        if (generator == null) {\n            throw new java.lang.IllegalArgumentException(\"Null 'generator' argument.\");\n        }\n        this.legendLabelGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.labels.PieSectionLabelGenerator getLegendLabelToolTipGenerator() {\n        return this.legendLabelToolTipGenerator;\n    }\n\n    public void setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator generator) {\n        this.legendLabelToolTipGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.urls.PieURLGenerator getLegendLabelURLGenerator() {\n        return this.legendLabelURLGenerator;\n    }\n\n    public void setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator generator) {\n        this.legendLabelURLGenerator = generator;\n        notifyListeners(new org.jfree.chart.event.PlotChangeEvent(this));\n    }\n\n    public org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.plot.PiePlot plot, java.lang.Integer index, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.plot.PiePlotState state = new org.jfree.chart.plot.PiePlotState(info);\n        state.setPassesRequired(2);\n        state.setTotal(org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n    }\n\n    public void draw(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.awt.geom.Point2D anchor, org.jfree.chart.plot.PlotState parentState, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.util.RectangleInsets insets = getInsets();\n        insets.trim(area);\n        if (info != null) {\n            info.setPlotArea(area);\n            info.setDataArea(area);\n        }\n        drawBackground(g2, area);\n        drawOutline(g2, area);\n        java.awt.Shape savedClip = g2.getClip();\n        g2.clip(area);\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getForegroundAlpha()));\n        if (!org.jfree.data.general.DatasetUtilities.isEmptyOrNull(this.dataset)) {\n            drawPie(g2, area, info);\n        } else {\n            drawNoDataMessage(g2, area);\n        }\n        g2.setClip(savedClip);\n        g2.setComposite(originalComposite);\n        drawOutline(g2, area);\n    }\n\n    protected void drawPie(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.plot.PlotRenderingInfo info) {\n        org.jfree.chart.plot.PiePlotState state = initialise(g2, plotArea, this, null, info);\n        double labelReserve = 0.0;\n        if ((this.labelGenerator != null) && (!this.simpleLabels)) {\n            labelReserve = this.labelGap + this.maximumLabelWidth;\n        }\n        double gapHorizontal = (plotArea.getWidth() * (this.interiorGap + labelReserve)) * 2.0;\n        double gapVertical = (plotArea.getHeight() * this.interiorGap) * 2.0;\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_INTERIOR) {\n            double hGap = plotArea.getWidth() * this.interiorGap;\n            double vGap = plotArea.getHeight() * this.interiorGap;\n            double igx1 = plotArea.getX() + hGap;\n            double igx2 = plotArea.getMaxX() - hGap;\n            double igy1 = plotArea.getY() + vGap;\n            double igy2 = plotArea.getMaxY() - vGap;\n            g2.setPaint(java.awt.Color.gray);\n            g2.draw(new java.awt.geom.Rectangle2D.Double(igx1, igy1, igx2 - igx1, igy2 - igy1));\n        }\n        double linkX = plotArea.getX() + (gapHorizontal / 2);\n        double linkY = plotArea.getY() + (gapVertical / 2);\n        double linkW = plotArea.getWidth() - gapHorizontal;\n        double linkH = plotArea.getHeight() - gapVertical;\n        if (this.circular) {\n            double min = java.lang.Math.min(linkW, linkH) / 2;\n            linkX = (((linkX + linkX) + linkW) / 2) - min;\n            linkY = (((linkY + linkY) + linkH) / 2) - min;\n            linkW = 2 * min;\n            linkH = 2 * min;\n        }\n        java.awt.geom.Rectangle2D linkArea = new java.awt.geom.Rectangle2D.Double(linkX, linkY, linkW, linkH);\n        state.setLinkArea(linkArea);\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_LINK_AREA) {\n            g2.setPaint(java.awt.Color.blue);\n            g2.draw(linkArea);\n            g2.setPaint(java.awt.Color.yellow);\n            g2.draw(new java.awt.geom.Ellipse2D.Double(linkArea.getX(), linkArea.getY(), linkArea.getWidth(), linkArea.getHeight()));\n        }\n        double lm = 0.0;\n        if (!this.simpleLabels) {\n            lm = this.labelLinkMargin;\n        }\n        double hh = (linkArea.getWidth() * lm) * 2.0;\n        double vv = (linkArea.getHeight() * lm) * 2.0;\n        java.awt.geom.Rectangle2D explodeArea = new java.awt.geom.Rectangle2D.Double(linkX + (hh / 2.0), linkY + (vv / 2.0), linkW - hh, linkH - vv);\n        state.setExplodedPieArea(explodeArea);\n        double maximumExplodePercent = getMaximumExplodePercent();\n        double percent = maximumExplodePercent / (1.0 + maximumExplodePercent);\n        double h1 = explodeArea.getWidth() * percent;\n        double v1 = explodeArea.getHeight() * percent;\n        java.awt.geom.Rectangle2D pieArea = new java.awt.geom.Rectangle2D.Double(explodeArea.getX() + (h1 / 2.0), explodeArea.getY() + (v1 / 2.0), explodeArea.getWidth() - h1, explodeArea.getHeight() - v1);\n        if (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_PIE_AREA) {\n            g2.setPaint(java.awt.Color.green);\n            g2.draw(pieArea);\n        }\n        state.setPieArea(pieArea);\n        state.setPieCenterX(pieArea.getCenterX());\n        state.setPieCenterY(pieArea.getCenterY());\n        state.setPieWRadius(pieArea.getWidth() / 2.0);\n        state.setPieHRadius(pieArea.getHeight() / 2.0);\n        if ((this.dataset != null) && (this.dataset.getKeys().size() > 0)) {\n            java.util.List keys = this.dataset.getKeys();\n            double totalValue = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(this.dataset);\n            int passesRequired = state.getPassesRequired();\n            for (int pass = 0; pass < passesRequired; pass++) {\n                double runningTotal = 0.0;\n                for (int section = 0; section < keys.size(); section++) {\n                    java.lang.Number n = this.dataset.getValue(section);\n                    if (n != null) {\n                        double value = n.doubleValue();\n                        if (value > 0.0) {\n                            runningTotal += value;\n                            drawItem(g2, section, explodeArea, state, pass);\n                        }\n                    }\n                }\n            }\n            if (this.simpleLabels) {\n                drawSimpleLabels(g2, keys, totalValue, plotArea, linkArea, state);\n            } else {\n                drawLabels(g2, keys, totalValue, plotArea, linkArea, state);\n            }\n        } else {\n            drawNoDataMessage(g2, plotArea);\n        }\n    }\n\n    protected void drawItem(java.awt.Graphics2D g2, int section, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PiePlotState state, int currentPass) {\n        java.lang.Number n = this.dataset.getValue(section);\n        if (n == null) {\n            return;\n        }\n        double value = n.doubleValue();\n        double angle1 = 0.0;\n        double angle2 = 0.0;\n        if (this.direction == org.jfree.chart.util.Rotation.CLOCKWISE) {\n            angle1 = state.getLatestAngle();\n            angle2 = angle1 - ((value / state.getTotal()) * 360.0);\n        } else if (this.direction == org.jfree.chart.util.Rotation.ANTICLOCKWISE) {\n            angle1 = state.getLatestAngle();\n            angle2 = angle1 + ((value / state.getTotal()) * 360.0);\n        } else {\n            throw new java.lang.IllegalStateException(\"Rotation type not recognised.\");\n        }\n        double angle = angle2 - angle1;\n        if (java.lang.Math.abs(angle) > getMinimumArcAngleToDraw()) {\n            double ep = 0.0;\n            double mep = getMaximumExplodePercent();\n            if (mep > 0.0) {\n                ep = getExplodePercent(getSectionKey(section)) / mep;\n            }\n            java.awt.geom.Rectangle2D arcBounds = getArcBounds(state.getPieArea(), state.getExplodedPieArea(), angle1, angle, ep);\n            java.awt.geom.Arc2D.Double arc = new java.awt.geom.Arc2D.Double(arcBounds, angle1, angle, java.awt.geom.Arc2D.PIE);\n            if (currentPass == 0) {\n                if (this.shadowPaint != null) {\n                    java.awt.Shape shadowArc = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(arc, ((float) (this.shadowXOffset)), ((float) (this.shadowYOffset)));\n                    g2.setPaint(this.shadowPaint);\n                    g2.fill(shadowArc);\n                }\n            } else if (currentPass == 1) {\n                java.lang.Comparable key = getSectionKey(section);\n                java.awt.Paint paint = lookupSectionPaint(key, true);\n                g2.setPaint(paint);\n                g2.fill(arc);\n                java.awt.Paint outlinePaint = lookupSectionOutlinePaint(key);\n                java.awt.Stroke outlineStroke = lookupSectionOutlineStroke(key);\n                if (this.sectionOutlinesVisible) {\n                    g2.setPaint(outlinePaint);\n                    g2.setStroke(outlineStroke);\n                    g2.draw(arc);\n                }\n                if (state.getInfo() != null) {\n                    org.jfree.chart.entity.EntityCollection entities = state.getEntityCollection();\n                    if (entities != null) {\n                        java.lang.String tip = null;\n                        if (this.toolTipGenerator != null) {\n                            tip = this.toolTipGenerator.generateToolTip(this.dataset, key);\n                        }\n                        java.lang.String url = null;\n                        if (this.urlGenerator != null) {\n                            url = this.urlGenerator.generateURL(this.dataset, key, this.pieIndex);\n                        }\n                        org.jfree.chart.entity.PieSectionEntity entity = new org.jfree.chart.entity.PieSectionEntity(arc, this.dataset, this.pieIndex, section, key, tip, url);\n                        entities.add(entity);\n                    }\n                }\n            }\n        }\n        state.setLatestAngle(angle2);\n    }\n\n    protected void drawSimpleLabels(java.awt.Graphics2D g2, java.util.List keys, double totalValue, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D pieArea, org.jfree.chart.plot.PiePlotState state) {\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0F));\n        org.jfree.chart.util.RectangleInsets labelInsets = new org.jfree.chart.util.RectangleInsets(org.jfree.chart.util.UnitType.RELATIVE, 0.18, 0.18, 0.18, 0.18);\n        java.awt.geom.Rectangle2D labelsArea = labelInsets.createInsetRectangle(pieArea);\n        double runningTotal = 0.0;\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            boolean include = true;\n            double v = 0.0;\n            java.lang.Number n = getDataset().getValue(key);\n            if (n == null) {\n                include = !getIgnoreNullValues();\n            } else {\n                v = n.doubleValue();\n                include = (getIgnoreZeroValues()) ? v > 0.0 : v >= 0.0;\n            }\n            if (include) {\n                runningTotal = runningTotal + v;\n                double mid = getStartAngle() + ((getDirection().getFactor() * ((runningTotal - (v / 2.0)) * 360)) / totalValue);\n                java.awt.geom.Arc2D arc = new java.awt.geom.Arc2D.Double(labelsArea, getStartAngle(), mid - getStartAngle(), java.awt.geom.Arc2D.OPEN);\n                int x = ((int) (arc.getEndPoint().getX()));\n                int y = ((int) (arc.getEndPoint().getY()));\n                org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator = getLabelGenerator();\n                if (labelGenerator == null) {\n                    continue;\n                }\n                java.lang.String label = labelGenerator.generateSectionLabel(this.dataset, key);\n                if (label == null) {\n                    continue;\n                }\n                g2.setFont(this.labelFont);\n                java.awt.FontMetrics fm = g2.getFontMetrics();\n                java.awt.geom.Rectangle2D bounds = org.jfree.chart.text.TextUtilities.getTextBounds(label, g2, fm);\n                java.awt.geom.Rectangle2D out = this.labelPadding.createOutsetRectangle(bounds);\n                java.awt.Shape bg = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(out, x - bounds.getCenterX(), y - bounds.getCenterY());\n                if (this.labelShadowPaint != null) {\n                    java.awt.Shape shadow = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(bg, this.shadowXOffset, this.shadowYOffset);\n                    g2.setPaint(this.labelShadowPaint);\n                    g2.fill(shadow);\n                }\n                if (this.labelBackgroundPaint != null) {\n                    g2.setPaint(this.labelBackgroundPaint);\n                    g2.fill(bg);\n                }\n                if ((this.labelOutlinePaint != null) && (this.labelOutlineStroke != null)) {\n                    g2.setPaint(this.labelOutlinePaint);\n                    g2.setStroke(this.labelOutlineStroke);\n                    g2.draw(bg);\n                }\n                g2.setPaint(this.labelPaint);\n                g2.setFont(this.labelFont);\n                org.jfree.chart.text.TextUtilities.drawAlignedString(getLabelGenerator().generateSectionLabel(getDataset(), key), g2, x, y, TextAnchor.CENTER);\n            }\n        } \n        g2.setComposite(originalComposite);\n    }\n\n    protected void drawLabels(java.awt.Graphics2D g2, java.util.List keys, double totalValue, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, org.jfree.chart.plot.PiePlotState state) {\n        java.awt.Composite originalComposite = g2.getComposite();\n        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0F));\n        org.jfree.data.DefaultKeyedValues leftKeys = new org.jfree.data.DefaultKeyedValues();\n        org.jfree.data.DefaultKeyedValues rightKeys = new org.jfree.data.DefaultKeyedValues();\n        double runningTotal = 0.0;\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            boolean include = true;\n            double v = 0.0;\n            java.lang.Number n = this.dataset.getValue(key);\n            if (n == null) {\n                include = !this.ignoreNullValues;\n            } else {\n                v = n.doubleValue();\n                include = (this.ignoreZeroValues) ? v > 0.0 : v >= 0.0;\n            }\n            if (include) {\n                runningTotal = runningTotal + v;\n                double mid = this.startAngle + ((this.direction.getFactor() * ((runningTotal - (v / 2.0)) * 360)) / totalValue);\n                if (java.lang.Math.cos(java.lang.Math.toRadians(mid)) < 0.0) {\n                    leftKeys.addValue(key, new java.lang.Double(mid));\n                } else {\n                    rightKeys.addValue(key, new java.lang.Double(mid));\n                }\n            }\n        } \n        g2.setFont(getLabelFont());\n        double marginX = plotArea.getX() + (this.interiorGap * plotArea.getWidth());\n        double gap = plotArea.getWidth() * this.labelGap;\n        double ww = (linkArea.getX() - gap) - marginX;\n        float labelWidth = ((float) (this.labelPadding.trimWidth(ww)));\n        if (this.labelGenerator != null) {\n            drawLeftLabels(leftKeys, g2, plotArea, linkArea, labelWidth, state);\n            drawRightLabels(rightKeys, g2, plotArea, linkArea, labelWidth, state);\n        }\n        g2.setComposite(originalComposite);\n    }\n\n    protected void drawLeftLabels(org.jfree.data.KeyedValues leftKeys, java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, float maxLabelWidth, org.jfree.chart.plot.PiePlotState state) {\n        this.labelDistributor.clear();\n        double lGap = plotArea.getWidth() * this.labelGap;\n        double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;\n        for (int i = 0; i < leftKeys.getItemCount(); i++) {\n            java.lang.String label = this.labelGenerator.generateSectionLabel(this.dataset, leftKeys.getKey(i));\n            if (label != null) {\n                org.jfree.chart.text.TextBlock block = org.jfree.chart.text.TextUtilities.createTextBlock(label, this.labelFont, this.labelPaint, maxLabelWidth, new org.jfree.chart.text.G2TextMeasurer(g2));\n                org.jfree.chart.text.TextBox labelBox = new org.jfree.chart.text.TextBox(block);\n                labelBox.setBackgroundPaint(this.labelBackgroundPaint);\n                labelBox.setOutlinePaint(this.labelOutlinePaint);\n                labelBox.setOutlineStroke(this.labelOutlineStroke);\n                labelBox.setShadowPaint(this.labelShadowPaint);\n                labelBox.setInteriorGap(this.labelPadding);\n                double theta = java.lang.Math.toRadians(leftKeys.getValue(i).doubleValue());\n                double baseY = state.getPieCenterY() - (java.lang.Math.sin(theta) * verticalLinkRadius);\n                double hh = labelBox.getHeight(g2);\n                this.labelDistributor.addPieLabelRecord(new org.jfree.chart.plot.PieLabelRecord(leftKeys.getKey(i), theta, baseY, labelBox, hh, (lGap / 2.0) + ((lGap / 2.0) * (-java.lang.Math.cos(theta))), 0.9 + getExplodePercent(leftKeys.getKey(i))));\n            }\n        }\n        this.labelDistributor.distributeLabels(plotArea.getMinY(), plotArea.getHeight());\n        for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {\n            drawLeftLabel(g2, state, this.labelDistributor.getPieLabelRecord(i));\n        }\n    }\n\n    protected void drawRightLabels(org.jfree.data.KeyedValues keys, java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D linkArea, float maxLabelWidth, org.jfree.chart.plot.PiePlotState state) {\n        this.labelDistributor.clear();\n        double lGap = plotArea.getWidth() * this.labelGap;\n        double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;\n        for (int i = 0; i < keys.getItemCount(); i++) {\n            java.lang.String label = this.labelGenerator.generateSectionLabel(this.dataset, keys.getKey(i));\n            if (label != null) {\n                org.jfree.chart.text.TextBlock block = org.jfree.chart.text.TextUtilities.createTextBlock(label, this.labelFont, this.labelPaint, maxLabelWidth, new org.jfree.chart.text.G2TextMeasurer(g2));\n                org.jfree.chart.text.TextBox labelBox = new org.jfree.chart.text.TextBox(block);\n                labelBox.setBackgroundPaint(this.labelBackgroundPaint);\n                labelBox.setOutlinePaint(this.labelOutlinePaint);\n                labelBox.setOutlineStroke(this.labelOutlineStroke);\n                labelBox.setShadowPaint(this.labelShadowPaint);\n                labelBox.setInteriorGap(this.labelPadding);\n                double theta = java.lang.Math.toRadians(keys.getValue(i).doubleValue());\n                double baseY = state.getPieCenterY() - (java.lang.Math.sin(theta) * verticalLinkRadius);\n                double hh = labelBox.getHeight(g2);\n                this.labelDistributor.addPieLabelRecord(new org.jfree.chart.plot.PieLabelRecord(keys.getKey(i), theta, baseY, labelBox, hh, (lGap / 2.0) + ((lGap / 2.0) * java.lang.Math.cos(theta)), 0.9 + getExplodePercent(keys.getKey(i))));\n            }\n        }\n        this.labelDistributor.distributeLabels(plotArea.getMinY(), plotArea.getHeight());\n        for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {\n            drawRightLabel(g2, state, this.labelDistributor.getPieLabelRecord(i));\n        }\n    }\n\n    public org.jfree.chart.LegendItemCollection getLegendItems() {\n        org.jfree.chart.LegendItemCollection result = new org.jfree.chart.LegendItemCollection();\n        if (this.dataset == null) {\n            return result;\n        }\n        java.util.List keys = this.dataset.getKeys();\n        int section = 0;\n        java.awt.Shape shape = getLegendItemShape();\n        java.util.Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            java.lang.Comparable key = ((java.lang.Comparable) (iterator.next()));\n            java.lang.Number n = this.dataset.getValue(key);\n            boolean include = true;\n            if (n == null) {\n                include = !this.ignoreNullValues;\n            } else {\n                double v = n.doubleValue();\n                if (v == 0.0) {\n                    include = !this.ignoreZeroValues;\n                } else {\n                    include = v > 0.0;\n                }\n            }\n            if (include) {\n                java.lang.String label = this.legendLabelGenerator.generateSectionLabel(this.dataset, key);\n                if (label != null) {\n                    java.lang.String description = label;\n                    java.lang.String toolTipText = null;\n                    if (this.legendLabelToolTipGenerator != null) {\n                        toolTipText = this.legendLabelToolTipGenerator.generateSectionLabel(this.dataset, key);\n                    }\n                    java.lang.String urlText = null;\n                    if (this.legendLabelURLGenerator != null) {\n                        urlText = this.legendLabelURLGenerator.generateURL(this.dataset, key, this.pieIndex);\n                    }\n                    java.awt.Paint paint = lookupSectionPaint(key, true);\n                    java.awt.Paint outlinePaint = lookupSectionOutlinePaint(key);\n                    java.awt.Stroke outlineStroke = lookupSectionOutlineStroke(key);\n                    org.jfree.chart.LegendItem item = new org.jfree.chart.LegendItem(label, description, toolTipText, urlText, true, shape, true, paint, true, outlinePaint, outlineStroke, false, new java.awt.geom.Line2D.Float(), new java.awt.BasicStroke(), java.awt.Color.black);\n                    item.setDataset(getDataset());\n                    result.add(item);\n                }\n                section++;\n            } else {\n                section++;\n            }\n        } \n        return result;\n    }\n\n    public java.lang.String getPlotType() {\n        return org.jfree.chart.plot.PiePlot.localizationResources.getString(\"Pie_Plot\");\n    }\n\n    protected java.awt.geom.Rectangle2D getArcBounds(java.awt.geom.Rectangle2D unexploded, java.awt.geom.Rectangle2D exploded, double angle, double extent, double explodePercent) {\n        if (explodePercent == 0.0) {\n            return unexploded;\n        } else {\n            java.awt.geom.Arc2D arc1 = new java.awt.geom.Arc2D.Double(unexploded, angle, extent / 2, java.awt.geom.Arc2D.OPEN);\n            java.awt.geom.Point2D point1 = arc1.getEndPoint();\n            java.awt.geom.Arc2D.Double arc2 = new java.awt.geom.Arc2D.Double(exploded, angle, extent / 2, java.awt.geom.Arc2D.OPEN);\n            java.awt.geom.Point2D point2 = arc2.getEndPoint();\n            double deltaX = (point1.getX() - point2.getX()) * explodePercent;\n            double deltaY = (point1.getY() - point2.getY()) * explodePercent;\n            return new java.awt.geom.Rectangle2D.Double(unexploded.getX() - deltaX, unexploded.getY() - deltaY, unexploded.getWidth(), unexploded.getHeight());\n        }\n    }\n\n    protected void drawLeftLabel(java.awt.Graphics2D g2, org.jfree.chart.plot.PiePlotState state, org.jfree.chart.plot.PieLabelRecord record) {\n        double anchorX = state.getLinkArea().getMinX();\n        double targetX = anchorX - record.getGap();\n        double targetY = record.getAllocatedY();\n        if (this.labelLinksVisible) {\n            double theta = record.getAngle();\n            double linkX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getPieWRadius()) * record.getLinkPercent());\n            double linkY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getPieHRadius()) * record.getLinkPercent());\n            double elbowX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getLinkArea().getWidth()) / 2.0);\n            double elbowY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getLinkArea().getHeight()) / 2.0);\n            double anchorY = elbowY;\n            g2.setPaint(this.labelLinkPaint);\n            g2.setStroke(this.labelLinkStroke);\n            g2.draw(new java.awt.geom.Line2D.Double(linkX, linkY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, targetX, targetY));\n        }\n        org.jfree.chart.text.TextBox tb = record.getLabel();\n        tb.draw(g2, ((float) (targetX)), ((float) (targetY)), RectangleAnchor.RIGHT);\n    }\n\n    protected void drawRightLabel(java.awt.Graphics2D g2, org.jfree.chart.plot.PiePlotState state, org.jfree.chart.plot.PieLabelRecord record) {\n        double anchorX = state.getLinkArea().getMaxX();\n        double targetX = anchorX + record.getGap();\n        double targetY = record.getAllocatedY();\n        if (this.labelLinksVisible) {\n            double theta = record.getAngle();\n            double linkX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getPieWRadius()) * record.getLinkPercent());\n            double linkY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getPieHRadius()) * record.getLinkPercent());\n            double elbowX = state.getPieCenterX() + ((java.lang.Math.cos(theta) * state.getLinkArea().getWidth()) / 2.0);\n            double elbowY = state.getPieCenterY() - ((java.lang.Math.sin(theta) * state.getLinkArea().getHeight()) / 2.0);\n            double anchorY = elbowY;\n            g2.setPaint(this.labelLinkPaint);\n            g2.setStroke(this.labelLinkStroke);\n            g2.draw(new java.awt.geom.Line2D.Double(linkX, linkY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, elbowX, elbowY));\n            g2.draw(new java.awt.geom.Line2D.Double(anchorX, anchorY, targetX, targetY));\n        }\n        org.jfree.chart.text.TextBox tb = record.getLabel();\n        tb.draw(g2, ((float) (targetX)), ((float) (targetY)), RectangleAnchor.LEFT);\n    }\n\n    public boolean equals(java.lang.Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof org.jfree.chart.plot.PiePlot)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        org.jfree.chart.plot.PiePlot that = ((org.jfree.chart.plot.PiePlot) (obj));\n        if (this.pieIndex != that.pieIndex) {\n            return false;\n        }\n        if (this.interiorGap != that.interiorGap) {\n            return false;\n        }\n        if (this.circular != that.circular) {\n            return false;\n        }\n        if (this.startAngle != that.startAngle) {\n            return false;\n        }\n        if (this.direction != that.direction) {\n            return false;\n        }\n        if (this.ignoreZeroValues != that.ignoreZeroValues) {\n            return false;\n        }\n        if (this.ignoreNullValues != that.ignoreNullValues) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionPaintMap, that.sectionPaintMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.baseSectionPaint, that.baseSectionPaint)) {\n            return false;\n        }\n        if (this.sectionOutlinesVisible != that.sectionOutlinesVisible) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionOutlinePaintMap, that.sectionOutlinePaintMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.baseSectionOutlinePaint, that.baseSectionOutlinePaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.sectionOutlineStrokeMap, that.sectionOutlineStrokeMap)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.baseSectionOutlineStroke, that.baseSectionOutlineStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (!(this.shadowXOffset == that.shadowXOffset)) {\n            return false;\n        }\n        if (!(this.shadowYOffset == that.shadowYOffset)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.explodePercentages, that.explodePercentages)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelGenerator, that.labelGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelBackgroundPaint, that.labelBackgroundPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelOutlinePaint, that.labelOutlinePaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelOutlineStroke, that.labelOutlineStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelShadowPaint, that.labelShadowPaint)) {\n            return false;\n        }\n        if (this.simpleLabels != that.simpleLabels) {\n            return false;\n        }\n        if (!this.simpleLabelOffset.equals(that.simpleLabelOffset)) {\n            return false;\n        }\n        if (!this.labelPadding.equals(that.labelPadding)) {\n            return false;\n        }\n        if (!(this.maximumLabelWidth == that.maximumLabelWidth)) {\n            return false;\n        }\n        if (!(this.labelGap == that.labelGap)) {\n            return false;\n        }\n        if (!(this.labelLinkMargin == that.labelLinkMargin)) {\n            return false;\n        }\n        if (this.labelLinksVisible != that.labelLinksVisible) {\n            return false;\n        }\n        if (!org.jfree.chart.util.PaintUtilities.equal(this.labelLinkPaint, that.labelLinkPaint)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.labelLinkStroke, that.labelLinkStroke)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.toolTipGenerator, that.toolTipGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.urlGenerator, that.urlGenerator)) {\n            return false;\n        }\n        if (!(this.minimumArcAngleToDraw == that.minimumArcAngleToDraw)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ShapeUtilities.equal(this.legendItemShape, that.legendItemShape)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelGenerator, that.legendLabelGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelToolTipGenerator, that.legendLabelToolTipGenerator)) {\n            return false;\n        }\n        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendLabelURLGenerator, that.legendLabelURLGenerator)) {\n            return false;\n        }\n        return true;\n    }\n\n    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {\n        org.jfree.chart.plot.PiePlot clone = ((org.jfree.chart.plot.PiePlot) (super.clone()));\n        if (clone.dataset != null) {\n            clone.dataset.addChangeListener(clone);\n        }\n        if (this.urlGenerator instanceof org.jfree.chart.util.PublicCloneable) {\n            clone.urlGenerator = ((org.jfree.chart.urls.PieURLGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.urlGenerator)));\n        }\n        clone.legendItemShape = org.jfree.chart.util.ShapeUtilities.clone(this.legendItemShape);\n        if (this.legendLabelGenerator != null) {\n            clone.legendLabelGenerator = ((org.jfree.chart.labels.PieSectionLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelGenerator)));\n        }\n        if (this.legendLabelToolTipGenerator != null) {\n            clone.legendLabelToolTipGenerator = ((org.jfree.chart.labels.PieSectionLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelToolTipGenerator)));\n        }\n        if (this.legendLabelURLGenerator instanceof org.jfree.chart.util.PublicCloneable) {\n            clone.legendLabelURLGenerator = ((org.jfree.chart.urls.PieURLGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendLabelURLGenerator)));\n        }\n        return clone;\n    }\n\n    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {\n        stream.defaultWriteObject();\n        org.jfree.chart.util.SerialUtilities.writePaint(this.baseSectionPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.baseSectionOutlinePaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.baseSectionOutlineStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.shadowPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelBackgroundPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelOutlinePaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.labelOutlineStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelShadowPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writePaint(this.labelLinkPaint, stream);\n        org.jfree.chart.util.SerialUtilities.writeStroke(this.labelLinkStroke, stream);\n        org.jfree.chart.util.SerialUtilities.writeShape(this.legendItemShape, stream);\n    }\n\n    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        stream.defaultReadObject();\n        this.baseSectionPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.baseSectionOutlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.baseSectionOutlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.shadowPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelBackgroundPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelOutlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelOutlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.labelShadowPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelLinkPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);\n        this.labelLinkStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);\n        this.legendItemShape = org.jfree.chart.util.SerialUtilities.readShape(stream);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "this",
            "dst_parent": "this.labelGap",
            "dst_parent_type": "FieldRead",
            "dst_type": "ThisAccess",
            "operator": "MOV",
            "src": "this",
            "src_parent": "this.legendLabelURLGenerator",
            "src_parent_type": "FieldWrite",
            "src_type": "ThisAccess"
          }
        }
      ],
      "file_name": "PiePlot"
    }
  ],
  "id": "Arja_patch_Defects4J_Chart_15_0_236"
}