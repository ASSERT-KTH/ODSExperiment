{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (registry == null) {\n    super.applyPattern(pattern);\n    toPattern = super.toPattern();\n    return;\n}",
            "src_parent": "{\n    if (registry == null) {\n        super.applyPattern(pattern);\n        toPattern = super.toPattern();\n        return;\n    }\n    java.util.ArrayList foundFormats = new java.util.ArrayList();\n    if (registry == null) {\n        super.applyPattern(pattern);\n        toPattern = super.toPattern();\n        return;\n    }\n    java.util.ArrayList foundDescriptions = new java.util.ArrayList();\n    java.lang.StringBuffer stripCustom = new java.lang.StringBuffer(pattern.length());\n    java.text.ParsePosition pos = new java.text.ParsePosition(0);\n    char[] c = pattern.toCharArray();\n    int fmtCount = 0;\n    while (pos.getIndex() < pattern.length()) {\n        switch (c[pos.getIndex()]) {\n            case org.apache.commons.lang.text.ExtendedMessageFormat.QUOTE :\n                appendQuotedString(pattern, pos, stripCustom, true);\n                {\n                    super.applyPattern(stripCustom.toString());\n                    break;\n                }\n            case org.apache.commons.lang.text.ExtendedMessageFormat.START_FE :\n                fmtCount++;\n                seekNonWs(pattern, pos);\n                int start = pos.getIndex();\n                int index = readArgumentIndex(pattern, next(pos));\n                stripCustom.append(org.apache.commons.lang.text.ExtendedMessageFormat.START_FE).append(index);\n                seekNonWs(pattern, pos);\n                java.text.Format format = null;\n                java.lang.String formatDescription = null;\n                if (c[pos.getIndex()] == org.apache.commons.lang.text.ExtendedMessageFormat.START_FMT) {\n                    formatDescription = parseFormatDescription(pattern, next(pos));\n                    format = getFormat(formatDescription);\n                    if (format == null) {\n                        stripCustom.append(org.apache.commons.lang.text.ExtendedMessageFormat.START_FMT).append(formatDescription);\n                    }\n                }\n                foundFormats.add(format);\n                foundDescriptions.add(format == null ? null : formatDescription);\n                org.apache.commons.lang.Validate.isTrue(foundFormats.size() == fmtCount);\n                org.apache.commons.lang.Validate.isTrue(foundDescriptions.size() == fmtCount);\n                if (c[pos.getIndex()] != org.apache.commons.lang.text.ExtendedMessageFormat.END_FE) {\n                    throw new java.lang.IllegalArgumentException(\"Unreadable format element at position \" + start);\n                }\n            default :\n                stripCustom.append(c[pos.getIndex()]);\n                next(pos);\n        }\n    } \n    super.applyPattern(stripCustom.toString());\n    toPattern = insertFormats(super.toPattern(), foundDescriptions);\n    if (containsElements(foundFormats)) {\n        java.text.Format[] origFormats = getFormats();\n        int i = 0;\n        for (java.util.Iterator it = foundFormats.iterator(); it.hasNext(); i++) {\n            java.text.Format f = ((java.text.Format) (it.next()));\n            if (f != null) {\n                origFormats[i] = f;\n            }\n        }\n        super.setFormats(origFormats);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "super.applyPattern(stripCustom.toString())",
            "src_parent": "{\n    super.applyPattern(stripCustom.toString());\n    break;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "pos.setIndex(pos.getIndex() + 1)",
            "src_parent": "{\n    int start = pos.getIndex();\n    pos.setIndex(pos.getIndex() + 1);\n    char[] c = pattern.toCharArray();\n    if (escapingOn && (c[start] == org.apache.commons.lang.text.ExtendedMessageFormat.QUOTE)) {\n        return appendTo == null ? null : appendTo.append(org.apache.commons.lang.text.ExtendedMessageFormat.QUOTE);\n    }\n    int lastHold = start;\n    for (int i = pos.getIndex(); i < pattern.length(); i++) {\n        if (escapingOn && pattern.substring(i).startsWith(org.apache.commons.lang.text.ExtendedMessageFormat.ESCAPED_QUOTE)) {\n            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(org.apache.commons.lang.text.ExtendedMessageFormat.QUOTE);\n            pos.setIndex(i + org.apache.commons.lang.text.ExtendedMessageFormat.ESCAPED_QUOTE.length());\n            lastHold = pos.getIndex();\n            continue;\n        }\n        switch (c[pos.getIndex()]) {\n            case org.apache.commons.lang.text.ExtendedMessageFormat.QUOTE :\n                next(pos);\n                return appendTo == null ? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n            default :\n                next(pos);\n        }\n    }\n    throw new java.lang.IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "ExtendedMessageFormat"
    }
  ],
  "id": "Arja_patch_Defects4J_Lang_43_0_87"
}