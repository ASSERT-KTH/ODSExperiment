{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (org.jfree.data.general.DatasetUtilities.isEmptyOrNull(getDataset())) {\n    drawNoDataMessage(g2, plotArea);\n    g2.setClip(savedClip);\n    drawOutline(g2, plotArea);\n    return;\n}",
            "src_parent": "{\n    org.jfree.chart.util.RectangleInsets insets = getInsets();\n    insets.trim(plotArea);\n    java.awt.geom.Rectangle2D originalPlotArea = ((java.awt.geom.Rectangle2D) (plotArea.clone()));\n    if (info != null) {\n        info.setPlotArea(plotArea);\n        info.setDataArea(plotArea);\n    }\n    drawBackground(g2, plotArea);\n    java.awt.Shape savedClip = g2.getClip();\n    g2.clip(plotArea);\n    double gapPercent = getInteriorGap();\n    double labelPercent = 0.0;\n    if (getLabelGenerator() != null) {\n        if (org.jfree.data.general.DatasetUtilities.isEmptyOrNull(getDataset())) {\n            if (getLabelGenerator() != null) {\n                labelPercent = getLabelGap() + getMaximumLabelWidth();\n            }\n            drawNoDataMessage(g2, plotArea);\n            g2.setClip(savedClip);\n            drawOutline(g2, plotArea);\n            return;\n        }\n        labelPercent = getLabelGap() + getMaximumLabelWidth();\n    }\n    double gapHorizontal = (plotArea.getWidth() * (gapPercent + labelPercent)) * 2.0;\n    double gapVertical = (plotArea.getHeight() * gapPercent) * 2.0;\n    if (DEBUG_DRAW_INTERIOR) {\n        double hGap = plotArea.getWidth() * getInteriorGap();\n        double vGap = plotArea.getHeight() * getInteriorGap();\n        double igx1 = plotArea.getX() + hGap;\n        double igx2 = plotArea.getMaxX() - hGap;\n        double igy1 = plotArea.getY() + vGap;\n        double igy2 = plotArea.getMaxY() - vGap;\n        g2.setPaint(java.awt.Color.lightGray);\n        g2.draw(new java.awt.geom.Rectangle2D.Double(igx1, igy1, igx2 - igx1, igy2 - igy1));\n    }\n    double linkX = plotArea.getX() + (gapHorizontal / 2);\n    double linkY = plotArea.getY() + (gapVertical / 2);\n    double linkW = plotArea.getWidth() - gapHorizontal;\n    double linkH = plotArea.getHeight() - gapVertical;\n    if (org.jfree.data.general.DatasetUtilities.isEmptyOrNull(getDataset())) {\n        drawNoDataMessage(g2, plotArea);\n        g2.setClip(savedClip);\n        drawOutline(g2, plotArea);\n        return;\n    }\n    if (isCircular()) {\n        double min = java.lang.Math.min(linkW, linkH) / 2;\n        linkX = (((linkX + linkX) + linkW) / 2) - min;\n        linkY = (((linkY + linkY) + linkH) / 2) - min;\n        linkW = 2 * min;\n        linkH = 2 * min;\n    }\n    org.jfree.chart.plot.PiePlotState state = initialise(g2, plotArea, this, null, info);\n    java.awt.geom.Rectangle2D linkAreaXX = new java.awt.geom.Rectangle2D.Double(linkX, linkY, linkW, linkH * (1 - this.depthFactor));\n    state.setLinkArea(linkAreaXX);\n    if (DEBUG_DRAW_LINK_AREA) {\n        g2.setPaint(java.awt.Color.blue);\n        g2.draw(linkAreaXX);\n        g2.setPaint(java.awt.Color.yellow);\n        g2.draw(new java.awt.geom.Ellipse2D.Double(linkAreaXX.getX(), linkAreaXX.getY(), linkAreaXX.getWidth(), linkAreaXX.getHeight()));\n    }\n    double hh = linkW * getLabelLinkMargin();\n    double vv = linkH * getLabelLinkMargin();\n    java.awt.geom.Rectangle2D explodeArea = new java.awt.geom.Rectangle2D.Double(linkX + (hh / 2.0), linkY + (vv / 2.0), linkW - hh, linkH - vv);\n    state.setExplodedPieArea(explodeArea);\n    double maximumExplodePercent = getMaximumExplodePercent();\n    double percent = maximumExplodePercent / (1.0 + maximumExplodePercent);\n    double h1 = explodeArea.getWidth() * percent;\n    double v1 = explodeArea.getHeight() * percent;\n    java.awt.geom.Rectangle2D pieArea = new java.awt.geom.Rectangle2D.Double(explodeArea.getX() + (h1 / 2.0), explodeArea.getY() + (v1 / 2.0), explodeArea.getWidth() - h1, explodeArea.getHeight() - v1);\n    int depth = ((int) (pieArea.getHeight() * this.depthFactor));\n    java.awt.geom.Rectangle2D linkArea = new java.awt.geom.Rectangle2D.Double(linkX, linkY, linkW, linkH - depth);\n    state.setLinkArea(linkArea);\n    state.setPieArea(pieArea);\n    state.setPieCenterX(pieArea.getCenterX());\n    state.setPieCenterY(pieArea.getCenterY() - (depth / 2.0));\n    state.setPieWRadius(pieArea.getWidth() / 2.0);\n    state.setPieHRadius((pieArea.getHeight() - depth) / 2.0);\n    org.jfree.data.general.PieDataset dataset = getDataset();\n    if (org.jfree.data.general.DatasetUtilities.isEmptyOrNull(getDataset())) {\n        drawNoDataMessage(g2, plotArea);\n        g2.setClip(savedClip);\n        drawOutline(g2, plotArea);\n        return;\n    }\n    if (dataset.getKeys().size() > plotArea.getWidth()) {\n        java.lang.String text = \"Too many elements\";\n        java.awt.Font sfont = new java.awt.Font(\"dialog\", java.awt.Font.BOLD, 10);\n        g2.setFont(sfont);\n        java.awt.FontMetrics fm = g2.getFontMetrics(sfont);\n        int stringWidth = fm.stringWidth(text);\n        g2.drawString(text, ((int) (plotArea.getX() + ((plotArea.getWidth() - stringWidth) / 2))), ((int) (plotArea.getY() + (plotArea.getHeight() / 2))));\n        return;\n    }\n    if (isCircular()) {\n        double min = java.lang.Math.min(plotArea.getWidth(), plotArea.getHeight()) / 2;\n        plotArea = new java.awt.geom.Rectangle2D.Double(plotArea.getCenterX() - min, plotArea.getCenterY() - min, 2 * min, 2 * min);\n    }\n    java.util.List sectionKeys = dataset.getKeys();\n    if (sectionKeys.size() == 0) {\n        return;\n    }\n    double arcX = pieArea.getX();\n    double arcY = pieArea.getY();\n    java.awt.Composite originalComposite = g2.getComposite();\n    g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getForegroundAlpha()));\n    double totalValue = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(dataset);\n    double runningTotal = 0;\n    if (depth < 0) {\n        return;\n    }\n    java.util.ArrayList arcList = new java.util.ArrayList();\n    java.awt.geom.Arc2D.Double arc;\n    java.awt.Paint paint;\n    java.awt.Paint outlinePaint;\n    java.awt.Stroke outlineStroke;\n    java.util.Iterator iterator = sectionKeys.iterator();\n    while (iterator.hasNext()) {\n        java.lang.Comparable currentKey = ((java.lang.Comparable) (iterator.next()));\n        java.lang.Number dataValue = dataset.getValue(currentKey);\n        if (dataValue == null) {\n            arcList.add(null);\n            continue;\n        }\n        double value = dataValue.doubleValue();\n        if (value <= 0) {\n            arcList.add(null);\n            continue;\n        }\n        double startAngle = getStartAngle();\n        double direction = getDirection().getFactor();\n        double angle1 = startAngle + ((direction * (runningTotal * 360)) / totalValue);\n        double angle2 = startAngle + (((direction * (runningTotal + value)) * 360) / totalValue);\n        if (java.lang.Math.abs(angle2 - angle1) > getMinimumArcAngleToDraw()) {\n            arcList.add(new java.awt.geom.Arc2D.Double(arcX, arcY + depth, pieArea.getWidth(), pieArea.getHeight() - depth, angle1, angle2 - angle1, java.awt.geom.Arc2D.PIE));\n        } else {\n            arcList.add(null);\n        }\n        runningTotal += value;\n    } \n    java.awt.Shape oldClip = g2.getClip();\n    java.awt.geom.Ellipse2D top = new java.awt.geom.Ellipse2D.Double(pieArea.getX(), pieArea.getY(), pieArea.getWidth(), pieArea.getHeight() - depth);\n    java.awt.geom.Ellipse2D bottom = new java.awt.geom.Ellipse2D.Double(pieArea.getX(), pieArea.getY() + depth, pieArea.getWidth(), pieArea.getHeight() - depth);\n    java.awt.geom.Rectangle2D lower = new java.awt.geom.Rectangle2D.Double(top.getX(), top.getCenterY(), pieArea.getWidth(), bottom.getMaxY() - top.getCenterY());\n    java.awt.geom.Rectangle2D upper = new java.awt.geom.Rectangle2D.Double(pieArea.getX(), top.getY(), pieArea.getWidth(), bottom.getCenterY() - top.getY());\n    java.awt.geom.Area a = new java.awt.geom.Area(top);\n    a.add(new java.awt.geom.Area(lower));\n    java.awt.geom.Area b = new java.awt.geom.Area(bottom);\n    b.add(new java.awt.geom.Area(upper));\n    java.awt.geom.Area pie = new java.awt.geom.Area(a);\n    pie.intersect(b);\n    java.awt.geom.Area front = new java.awt.geom.Area(pie);\n    front.subtract(new java.awt.geom.Area(top));\n    java.awt.geom.Area back = new java.awt.geom.Area(pie);\n    back.subtract(new java.awt.geom.Area(bottom));\n    int[] xs;\n    int[] ys;\n    arc = new java.awt.geom.Arc2D.Double(arcX, arcY + depth, pieArea.getWidth(), pieArea.getHeight() - depth, 0, 360, java.awt.geom.Arc2D.PIE);\n    int categoryCount = arcList.size();\n    for (int categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\n        arc = ((java.awt.geom.Arc2D.Double) (arcList.get(categoryIndex)));\n        if (arc == null) {\n            continue;\n        }\n        java.lang.Comparable key = getSectionKey(categoryIndex);\n        paint = lookupSectionPaint(key, true);\n        outlinePaint = lookupSectionOutlinePaint(key);\n        outlineStroke = lookupSectionOutlineStroke(key);\n        g2.setPaint(paint);\n        g2.fill(arc);\n        g2.setPaint(outlinePaint);\n        g2.setStroke(outlineStroke);\n        g2.draw(arc);\n        g2.setPaint(paint);\n        java.awt.geom.Point2D p1 = arc.getStartPoint();\n        xs = new int[]{ ((int) (arc.getCenterX())), ((int) (arc.getCenterX())), ((int) (p1.getX())), ((int) (p1.getX())) };\n        ys = new int[]{ ((int) (arc.getCenterY())), ((int) (arc.getCenterY())) - depth, ((int) (p1.getY())) - depth, ((int) (p1.getY())) };\n        java.awt.Polygon polygon = new java.awt.Polygon(xs, ys, 4);\n        g2.setPaint(java.awt.Color.lightGray);\n        g2.fill(polygon);\n        g2.setPaint(outlinePaint);\n        g2.setStroke(outlineStroke);\n        g2.draw(polygon);\n        g2.setPaint(paint);\n    }\n    g2.setPaint(java.awt.Color.gray);\n    g2.fill(back);\n    g2.fill(front);\n    int cat = 0;\n    iterator = arcList.iterator();\n    while (iterator.hasNext()) {\n        java.awt.geom.Arc2D segment = ((java.awt.geom.Arc2D) (iterator.next()));\n        if (segment != null) {\n            java.lang.Comparable key = getSectionKey(cat);\n            paint = lookupSectionPaint(key, true);\n            outlinePaint = lookupSectionOutlinePaint(key);\n            outlineStroke = lookupSectionOutlineStroke(key);\n            drawSide(g2, pieArea, segment, front, back, paint, outlinePaint, outlineStroke, false, true);\n        }\n        cat++;\n    } \n    cat = 0;\n    iterator = arcList.iterator();\n    while (iterator.hasNext()) {\n        java.awt.geom.Arc2D segment = ((java.awt.geom.Arc2D) (iterator.next()));\n        if (segment != null) {\n            java.lang.Comparable key = getSectionKey(cat);\n            paint = lookupSectionPaint(key);\n            outlinePaint = lookupSectionOutlinePaint(key);\n            outlineStroke = lookupSectionOutlineStroke(key);\n            drawSide(g2, pieArea, segment, front, back, paint, outlinePaint, outlineStroke, true, false);\n        }\n        cat++;\n    } \n    g2.setClip(oldClip);\n    java.awt.geom.Arc2D upperArc;\n    for (int sectionIndex = 0; sectionIndex < categoryCount; sectionIndex++) {\n        arc = ((java.awt.geom.Arc2D.Double) (arcList.get(sectionIndex)));\n        if (arc == null) {\n            continue;\n        }\n        upperArc = new java.awt.geom.Arc2D.Double(arcX, arcY, pieArea.getWidth(), pieArea.getHeight() - depth, arc.getAngleStart(), arc.getAngleExtent(), java.awt.geom.Arc2D.PIE);\n        java.lang.Comparable currentKey = ((java.lang.Comparable) (sectionKeys.get(sectionIndex)));\n        paint = lookupSectionPaint(currentKey, true);\n        outlinePaint = lookupSectionOutlinePaint(currentKey);\n        outlineStroke = lookupSectionOutlineStroke(currentKey);\n        g2.setPaint(paint);\n        g2.fill(upperArc);\n        g2.setStroke(outlineStroke);\n        g2.setPaint(outlinePaint);\n        g2.draw(upperArc);\n        if (info != null) {\n            org.jfree.chart.entity.EntityCollection entities = info.getOwner().getEntityCollection();\n            if (entities != null) {\n                java.lang.String tip = null;\n                org.jfree.chart.labels.PieToolTipGenerator tipster = getToolTipGenerator();\n                if (tipster != null) {\n                    tip = tipster.generateToolTip(dataset, currentKey);\n                }\n                java.lang.String url = null;\n                if (getURLGenerator() != null) {\n                    url = getURLGenerator().generateURL(dataset, currentKey, getPieIndex());\n                }\n                org.jfree.chart.entity.PieSectionEntity entity = new org.jfree.chart.entity.PieSectionEntity(upperArc, dataset, getPieIndex(), sectionIndex, currentKey, tip, url);\n                entities.add(entity);\n            }\n        }\n        java.util.List keys = dataset.getKeys();\n        java.awt.geom.Rectangle2D adjustedPlotArea = new java.awt.geom.Rectangle2D.Double(originalPlotArea.getX(), originalPlotArea.getY(), originalPlotArea.getWidth(), originalPlotArea.getHeight() - depth);\n        if (getSimpleLabels()) {\n            drawSimpleLabels(g2, keys, totalValue, adjustedPlotArea, linkArea, state);\n        } else {\n            drawLabels(g2, keys, totalValue, adjustedPlotArea, linkArea, state);\n        }\n    }\n    g2.setClip(savedClip);\n    g2.setComposite(originalComposite);\n    drawOutline(g2, originalPlotArea);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "PiePlot3D"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.jfree.chart.plot.PiePlot3D",
            "dst_parent": "org.jfree.chart.plot.PiePlot3D plot = new org.jfree.chart.plot.PiePlot3D(dataset)",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "org.jfree.chart.plot.PiePlot",
            "src_parent": "org.jfree.chart.plot.PiePlot plot = new org.jfree.chart.plot.PiePlot(dataset)",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        }
      ],
      "file_name": "ChartFactory"
    }
  ],
  "id": "Arja_patch_Defects4J_Chart_15_0_304"
}