{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "nameRef.length()",
            "dst_parent": "(nameRef.length() > 0)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "org.jsoup.nodes.Entities.isBaseNamedEntity(nameRef)",
            "src_parent": "org.jsoup.nodes.Entities.isBaseNamedEntity(nameRef) || (org.jsoup.nodes.Entities.isNamedEntity(nameRef) && looksLegit)",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "origNameRef",
            "dst_parent": "java.lang.String.format(\"invalid named referenece '%s'\", origNameRef)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "nameRef",
            "src_parent": "java.lang.String.format(\"invalid named referenece '%s'\", nameRef)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "boolean found = org.jsoup.nodes.Entities.isBaseNamedEntity(nameRef) || (org.jsoup.nodes.Entities.isNamedEntity(nameRef) && looksLegit)",
            "src_parent": "{\n    java.lang.String nameRef = reader.consumeLetterThenDigitSequence();\n    boolean looksLegit = reader.matches(';');\n    boolean found = org.jsoup.nodes.Entities.isBaseNamedEntity(nameRef) || (org.jsoup.nodes.Entities.isNamedEntity(nameRef) && looksLegit);\n    if (!found) {\n        reader.rewindToMark();\n        if (looksLegit) {\n            characterReferenceError(java.lang.String.format(\"invalid named referenece '%s'\", nameRef));\n        }\n        return null;\n    }\n    if (inAttribute && ((reader.matchesLetter() || reader.matchesDigit()) || reader.matchesAny('=', '-', '_'))) {\n        reader.rewindToMark();\n        return null;\n    }\n    if (!reader.matchConsume(\";\")) {\n        characterReferenceError(\"missing semicolon\");\n    }\n    return org.jsoup.nodes.Entities.getCharacterByName(nameRef);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "java.lang.String unescapeEntities(boolean inAttribute) {\n    java.lang.StringBuilder builder = new java.lang.StringBuilder();\n    while (!reader.isEmpty()) {\n        builder.append(reader.consumeTo('&'));\n        if (reader.matches('&')) {\n            reader.consume();\n            java.lang.Character c = consumeCharacterReference(null, inAttribute);\n            if (c == null) {\n                builder.append('&');\n            } else {\n                builder.append(c);\n            }\n        }\n    } \n    return builder.toString();\n}",
            "src_parent": "class Tokeniser {\n    static final char replacementChar = 'ï¿½';\n\n    private org.jsoup.parser.CharacterReader reader;\n\n    private org.jsoup.parser.ParseErrorList errors;\n\n    private org.jsoup.parser.TokeniserState state = TokeniserState.Data;\n\n    private org.jsoup.parser.Token emitPending;\n\n    private boolean isEmitPending = false;\n\n    private java.lang.StringBuilder charBuffer = new java.lang.StringBuilder();\n\n    java.lang.StringBuilder dataBuffer;\n\n    Token.Tag tagPending;\n\n    Token.Doctype doctypePending;\n\n    Token.Comment commentPending;\n\n    private Token.StartTag lastStartTag;\n\n    private boolean selfClosingFlagAcknowledged = true;\n\n    Tokeniser(org.jsoup.parser.CharacterReader reader, org.jsoup.parser.ParseErrorList errors) {\n        this.reader = reader;\n        this.errors = errors;\n    }\n\n    org.jsoup.parser.Token read() {\n        if (!selfClosingFlagAcknowledged) {\n            error(\"Self closing flag not acknowledged\");\n            selfClosingFlagAcknowledged = true;\n        }\n        while (!isEmitPending) {\n            state.read(this, reader);\n        } \n        if (charBuffer.length() > 0) {\n            java.lang.String str = charBuffer.toString();\n            charBuffer.delete(0, charBuffer.length());\n            return new org.jsoup.parser.Token.Character(str);\n        } else {\n            isEmitPending = false;\n            return emitPending;\n        }\n    }\n\n    void emit(org.jsoup.parser.Token token) {\n        org.jsoup.helper.Validate.isFalse(isEmitPending, \"There is an unread token pending!\");\n        emitPending = token;\n        isEmitPending = true;\n        if (token.type == Token.TokenType.StartTag) {\n            org.jsoup.parser.Token.StartTag startTag = ((org.jsoup.parser.Token.StartTag) (token));\n            lastStartTag = startTag;\n            if (startTag.selfClosing) {\n                selfClosingFlagAcknowledged = false;\n            }\n        } else if (token.type == Token.TokenType.EndTag) {\n            org.jsoup.parser.Token.EndTag endTag = ((org.jsoup.parser.Token.EndTag) (token));\n            if (endTag.attributes != null) {\n                error(\"Attributes incorrectly present on end tag\");\n            }\n        }\n    }\n\n    void emit(java.lang.String str) {\n        charBuffer.append(str);\n    }\n\n    void emit(char c) {\n        charBuffer.append(c);\n    }\n\n    org.jsoup.parser.TokeniserState getState() {\n        return state;\n    }\n\n    void transition(org.jsoup.parser.TokeniserState state) {\n        this.state = state;\n    }\n\n    void advanceTransition(org.jsoup.parser.TokeniserState state) {\n        reader.advance();\n        this.state = state;\n    }\n\n    void acknowledgeSelfClosingFlag() {\n        selfClosingFlagAcknowledged = true;\n    }\n\n    java.lang.Character consumeCharacterReference(java.lang.Character additionalAllowedCharacter, boolean inAttribute) {\n        if (reader.isEmpty()) {\n            return null;\n        }\n        if ((additionalAllowedCharacter != null) && (additionalAllowedCharacter == reader.current())) {\n            return null;\n        }\n        if (reader.matchesAny('\\t', '\\n', '\\r', '\\f', ' ', '<', '&')) {\n            return null;\n        }\n        reader.mark();\n        if (reader.matchConsume(\"#\")) {\n            boolean isHexMode = reader.matchConsumeIgnoreCase(\"X\");\n            java.lang.String numRef = (isHexMode) ? reader.consumeHexSequence() : reader.consumeDigitSequence();\n            if (numRef.length() == 0) {\n                characterReferenceError(\"numeric reference with no numerals\");\n                reader.rewindToMark();\n                return null;\n            }\n            if (!reader.matchConsume(\";\")) {\n                characterReferenceError(\"missing semicolon\");\n            }\n            int charval = -1;\n            try {\n                int base = (isHexMode) ? 16 : 10;\n                charval = java.lang.Integer.valueOf(numRef, base);\n            } catch (java.lang.NumberFormatException e) {\n            }\n            if (((charval == (-1)) || ((charval >= 0xd800) && (charval <= 0xdfff))) || (charval > 0x10ffff)) {\n                characterReferenceError(\"character outside of valid range\");\n                return org.jsoup.parser.Tokeniser.replacementChar;\n            } else {\n                return ((char) (charval));\n            }\n        } else {\n            java.lang.String nameRef = reader.consumeLetterThenDigitSequence();\n            boolean looksLegit = reader.matches(';');\n            boolean found = org.jsoup.nodes.Entities.isBaseNamedEntity(nameRef) || (org.jsoup.nodes.Entities.isNamedEntity(nameRef) && looksLegit);\n            if (!found) {\n                reader.rewindToMark();\n                if (looksLegit) {\n                    characterReferenceError(java.lang.String.format(\"invalid named referenece '%s'\", nameRef));\n                }\n                return null;\n            }\n            if (inAttribute && ((reader.matchesLetter() || reader.matchesDigit()) || reader.matchesAny('=', '-', '_'))) {\n                reader.rewindToMark();\n                return null;\n            }\n            if (!reader.matchConsume(\";\")) {\n                characterReferenceError(\"missing semicolon\");\n            }\n            return org.jsoup.nodes.Entities.getCharacterByName(nameRef);\n        }\n    }\n\n    Token.Tag createTagPending(boolean start) {\n        tagPending = (start) ? new org.jsoup.parser.Token.StartTag() : new org.jsoup.parser.Token.EndTag();\n        return tagPending;\n    }\n\n    void emitTagPending() {\n        tagPending.finaliseTag();\n        emit(tagPending);\n    }\n\n    void createCommentPending() {\n        commentPending = new org.jsoup.parser.Token.Comment();\n    }\n\n    void emitCommentPending() {\n        emit(commentPending);\n    }\n\n    void createDoctypePending() {\n        doctypePending = new org.jsoup.parser.Token.Doctype();\n    }\n\n    void emitDoctypePending() {\n        emit(doctypePending);\n    }\n\n    void createTempBuffer() {\n        dataBuffer = new java.lang.StringBuilder();\n    }\n\n    boolean isAppropriateEndTagToken() {\n        if (lastStartTag == null) {\n            return false;\n        }\n        return tagPending.tagName.equals(lastStartTag.tagName);\n    }\n\n    java.lang.String appropriateEndTagName() {\n        return lastStartTag.tagName;\n    }\n\n    void error(org.jsoup.parser.TokeniserState state) {\n        if (errors.canAddError()) {\n            errors.add(new org.jsoup.parser.ParseError(reader.pos(), \"Unexpected character '%s' in input state [%s]\", reader.current(), state));\n        }\n    }\n\n    void eofError(org.jsoup.parser.TokeniserState state) {\n        if (errors.canAddError()) {\n            errors.add(new org.jsoup.parser.ParseError(reader.pos(), \"Unexpectedly reached end of file (EOF) in input state [%s]\", state));\n        }\n    }\n\n    private void characterReferenceError(java.lang.String message) {\n        if (errors.canAddError()) {\n            errors.add(new org.jsoup.parser.ParseError(reader.pos(), \"Invalid character reference: %s\", message));\n        }\n    }\n\n    private void error(java.lang.String errorMsg) {\n        if (errors.canAddError()) {\n            errors.add(new org.jsoup.parser.ParseError(reader.pos(), errorMsg));\n        }\n    }\n\n    boolean currentNodeInHtmlNS() {\n        return true;\n    }\n\n    java.lang.String unescapeEntities(boolean inAttribute) {\n        java.lang.StringBuilder builder = new java.lang.StringBuilder();\n        while (!reader.isEmpty()) {\n            builder.append(reader.consumeTo('&'));\n            if (reader.matches('&')) {\n                reader.consume();\n                java.lang.Character c = consumeCharacterReference(null, inAttribute);\n                if (c == null) {\n                    builder.append('&');\n                } else {\n                    builder.append(c);\n                }\n            }\n        } \n        return builder.toString();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "java.lang.String origNameRef = new java.lang.String(nameRef)",
            "src_parent": "{\n    java.lang.String nameRef = reader.consumeLetterThenDigitSequence();\n    java.lang.String origNameRef = new java.lang.String(nameRef);\n    boolean looksLegit = reader.matches(';');\n    boolean found = false;\n    while ((nameRef.length() > 0) && (!found)) {\n        if (org.jsoup.nodes.Entities.isNamedEntity(nameRef)) {\n            found = true;\n        } else {\n            nameRef = nameRef.substring(0, nameRef.length() - 1);\n            reader.unconsume();\n        }\n    } \n    if (!found) {\n        reader.rewindToMark();\n        if (looksLegit) {\n            characterReferenceError(java.lang.String.format(\"invalid named referenece '%s'\", origNameRef));\n        }\n        return null;\n    }\n    if (inAttribute && ((reader.matchesLetter() || reader.matchesDigit()) || reader.matchesAny('=', '-', '_'))) {\n        reader.rewindToMark();\n        return null;\n    }\n    if (!reader.matchConsume(\";\")) {\n        characterReferenceError(\"missing semicolon\");\n    }\n    return org.jsoup.nodes.Entities.getCharacterByName(nameRef);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "boolean found = false",
            "src_parent": "{\n    java.lang.String nameRef = reader.consumeLetterThenDigitSequence();\n    java.lang.String origNameRef = new java.lang.String(nameRef);\n    boolean looksLegit = reader.matches(';');\n    boolean found = false;\n    while ((nameRef.length() > 0) && (!found)) {\n        if (org.jsoup.nodes.Entities.isNamedEntity(nameRef)) {\n            found = true;\n        } else {\n            nameRef = nameRef.substring(0, nameRef.length() - 1);\n            reader.unconsume();\n        }\n    } \n    if (!found) {\n        reader.rewindToMark();\n        if (looksLegit) {\n            characterReferenceError(java.lang.String.format(\"invalid named referenece '%s'\", origNameRef));\n        }\n        return null;\n    }\n    if (inAttribute && ((reader.matchesLetter() || reader.matchesDigit()) || reader.matchesAny('=', '-', '_'))) {\n        reader.rewindToMark();\n        return null;\n    }\n    if (!reader.matchConsume(\";\")) {\n        characterReferenceError(\"missing semicolon\");\n    }\n    return org.jsoup.nodes.Entities.getCharacterByName(nameRef);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "while ((nameRef.length() > 0) && (!found)) {\n    if (org.jsoup.nodes.Entities.isNamedEntity(nameRef)) {\n        found = true;\n    } else {\n        nameRef = nameRef.substring(0, nameRef.length() - 1);\n        reader.unconsume();\n    }\n} ",
            "src_parent": "{\n    java.lang.String nameRef = reader.consumeLetterThenDigitSequence();\n    java.lang.String origNameRef = new java.lang.String(nameRef);\n    boolean looksLegit = reader.matches(';');\n    boolean found = false;\n    while ((nameRef.length() > 0) && (!found)) {\n        if (org.jsoup.nodes.Entities.isNamedEntity(nameRef)) {\n            found = true;\n        } else {\n            nameRef = nameRef.substring(0, nameRef.length() - 1);\n            reader.unconsume();\n        }\n    } \n    if (!found) {\n        reader.rewindToMark();\n        if (looksLegit) {\n            characterReferenceError(java.lang.String.format(\"invalid named referenece '%s'\", origNameRef));\n        }\n        return null;\n    }\n    if (inAttribute && ((reader.matchesLetter() || reader.matchesDigit()) || reader.matchesAny('=', '-', '_'))) {\n        reader.rewindToMark();\n        return null;\n    }\n    if (!reader.matchConsume(\";\")) {\n        characterReferenceError(\"missing semicolon\");\n    }\n    return org.jsoup.nodes.Entities.getCharacterByName(nameRef);\n}",
            "src_parent_type": "Block",
            "src_type": "While"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "boolean",
            "dst_parent": "boolean found = false",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "boolean",
            "src_parent": "boolean found = org.jsoup.nodes.Entities.isBaseNamedEntity(nameRef) || (org.jsoup.nodes.Entities.isNamedEntity(nameRef) && looksLegit)",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.jsoup.nodes.Entities.isNamedEntity(nameRef)",
            "dst_parent": "if (org.jsoup.nodes.Entities.isNamedEntity(nameRef)) {\n    found = true;\n} else {\n    nameRef = nameRef.substring(0, nameRef.length() - 1);\n    reader.unconsume();\n}",
            "dst_parent_type": "If",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "org.jsoup.nodes.Entities.isNamedEntity(nameRef)",
            "src_parent": "(org.jsoup.nodes.Entities.isNamedEntity(nameRef) && looksLegit)",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "nameRef.length()",
            "dst_parent": "(nameRef.length() > 0)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "org.jsoup.nodes.Entities.isBaseNamedEntity(nameRef)",
            "src_parent": "org.jsoup.nodes.Entities.isBaseNamedEntity(nameRef) || (org.jsoup.nodes.Entities.isNamedEntity(nameRef) && looksLegit)",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "reader",
            "dst_parent": "reader.unconsume()",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "reader",
            "src_parent": "reader.isEmpty()",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        }
      ],
      "file_name": "Tokeniser"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public static java.lang.String unescapeEntities(java.lang.String string, boolean inAttribute) {\n    org.jsoup.parser.Tokeniser tokeniser = new org.jsoup.parser.Tokeniser(new org.jsoup.parser.CharacterReader(string), org.jsoup.parser.ParseErrorList.noTracking());\n    return tokeniser.unescapeEntities(inAttribute);\n}",
            "src_parent": "public class Parser {\n    private static final int DEFAULT_MAX_ERRORS = 0;\n\n    private org.jsoup.parser.TreeBuilder treeBuilder;\n\n    private int maxErrors = org.jsoup.parser.Parser.DEFAULT_MAX_ERRORS;\n\n    private org.jsoup.parser.ParseErrorList errors;\n\n    public Parser(org.jsoup.parser.TreeBuilder treeBuilder) {\n        this.treeBuilder = treeBuilder;\n    }\n\n    public org.jsoup.nodes.Document parseInput(java.lang.String html, java.lang.String baseUri) {\n        errors = (isTrackErrors()) ? org.jsoup.parser.ParseErrorList.tracking(maxErrors) : org.jsoup.parser.ParseErrorList.noTracking();\n        org.jsoup.nodes.Document doc = treeBuilder.parse(html, baseUri, errors);\n        return doc;\n    }\n\n    public org.jsoup.parser.TreeBuilder getTreeBuilder() {\n        return treeBuilder;\n    }\n\n    public org.jsoup.parser.Parser setTreeBuilder(org.jsoup.parser.TreeBuilder treeBuilder) {\n        this.treeBuilder = treeBuilder;\n        return this;\n    }\n\n    public boolean isTrackErrors() {\n        return maxErrors > 0;\n    }\n\n    public org.jsoup.parser.Parser setTrackErrors(int maxErrors) {\n        this.maxErrors = maxErrors;\n        return this;\n    }\n\n    public java.util.List<org.jsoup.parser.ParseError> getErrors() {\n        return errors;\n    }\n\n    public static org.jsoup.nodes.Document parse(java.lang.String html, java.lang.String baseUri) {\n        org.jsoup.parser.TreeBuilder treeBuilder = new org.jsoup.parser.HtmlTreeBuilder();\n        return treeBuilder.parse(html, baseUri, org.jsoup.parser.ParseErrorList.noTracking());\n    }\n\n    public static java.util.List<org.jsoup.nodes.Node> parseFragment(java.lang.String fragmentHtml, org.jsoup.nodes.Element context, java.lang.String baseUri) {\n        org.jsoup.parser.HtmlTreeBuilder treeBuilder = new org.jsoup.parser.HtmlTreeBuilder();\n        return treeBuilder.parseFragment(fragmentHtml, context, baseUri, org.jsoup.parser.ParseErrorList.noTracking());\n    }\n\n    public static org.jsoup.nodes.Document parseBodyFragment(java.lang.String bodyHtml, java.lang.String baseUri) {\n        org.jsoup.nodes.Document doc = org.jsoup.nodes.Document.createShell(baseUri);\n        org.jsoup.nodes.Element body = doc.body();\n        java.util.List<org.jsoup.nodes.Node> nodeList = org.jsoup.parser.Parser.parseFragment(bodyHtml, body, baseUri);\n        org.jsoup.nodes.Node[] nodes = nodeList.toArray(new org.jsoup.nodes.Node[nodeList.size()]);\n        for (org.jsoup.nodes.Node node : nodes) {\n            body.appendChild(node);\n        }\n        return doc;\n    }\n\n    public static java.lang.String unescapeEntities(java.lang.String string, boolean inAttribute) {\n        org.jsoup.parser.Tokeniser tokeniser = new org.jsoup.parser.Tokeniser(new org.jsoup.parser.CharacterReader(string), org.jsoup.parser.ParseErrorList.noTracking());\n        return tokeniser.unescapeEntities(inAttribute);\n    }\n\n    public static org.jsoup.nodes.Document parseBodyFragmentRelaxed(java.lang.String bodyHtml, java.lang.String baseUri) {\n        return org.jsoup.parser.Parser.parse(bodyHtml, baseUri);\n    }\n\n    public static org.jsoup.parser.Parser htmlParser() {\n        return new org.jsoup.parser.Parser(new org.jsoup.parser.HtmlTreeBuilder());\n    }\n\n    public static org.jsoup.parser.Parser xmlParser() {\n        return new org.jsoup.parser.Parser(new org.jsoup.parser.XmlTreeBuilder());\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "Parser"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String",
            "dst_parent": "static java.lang.String unescape(java.lang.String string, boolean strict) {\n    if (!string.contains(\"&\")) {\n        return string;\n    }\n    java.util.regex.Matcher m = (strict) ? org.jsoup.nodes.Entities.strictUnescapePattern.matcher(string) : org.jsoup.nodes.Entities.unescapePattern.matcher(string);\n    java.lang.StringBuffer accum = new java.lang.StringBuffer(string.length());\n    while (m.find()) {\n        int charval = -1;\n        java.lang.String num = m.group(3);\n        if (num != null) {\n            try {\n                int base = (m.group(2) != null) ? 16 : 10;\n                charval = java.lang.Integer.valueOf(num, base);\n            } catch (java.lang.NumberFormatException e) {\n            }\n        } else {\n            java.lang.String name = m.group(1);\n            if (org.jsoup.nodes.Entities.full.containsKey(name)) {\n                charval = org.jsoup.nodes.Entities.full.get(name);\n            }\n        }\n        if ((charval != (-1)) || (charval > 0xffff)) {\n            java.lang.String c = java.lang.Character.toString(((char) (charval)));\n            m.appendReplacement(accum, java.util.regex.Matcher.quoteReplacement(c));\n        } else {\n            m.appendReplacement(accum, java.util.regex.Matcher.quoteReplacement(m.group(0)));\n        }\n    } \n    m.appendTail(accum);\n    return accum.toString();\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "boolean",
            "src_parent": "public static boolean isBaseNamedEntity(java.lang.String name) {\n    return org.jsoup.nodes.Entities.base.containsKey(name);\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "accum.toString()",
            "dst_parent": "return accum.toString()",
            "dst_parent_type": "Return",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "org.jsoup.parser.Parser.unescapeEntities(string, strict)",
            "src_parent": "return org.jsoup.parser.Parser.unescapeEntities(string, strict)",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "accum",
            "dst_parent": "accum.toString()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "string",
            "src_parent": "org.jsoup.parser.Parser.unescapeEntities(string, strict)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.jsoup.nodes.Entities.full",
            "dst_parent": "org.jsoup.nodes.Entities.full.containsKey(name)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "UPD",
            "src": "org.jsoup.nodes.Entities.base",
            "src_parent": "org.jsoup.nodes.Entities.base.containsKey(name)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public static boolean isBaseNamedEntity(java.lang.String name) {\n    return org.jsoup.nodes.Entities.base.containsKey(name);\n}",
            "src_parent": "public class Entities {\n    public enum EscapeMode {\n\n        xhtml(org.jsoup.nodes.Entities.xhtmlByVal),\n        base(org.jsoup.nodes.Entities.baseByVal),\n        extended(org.jsoup.nodes.Entities.fullByVal);\n        private java.util.Map<java.lang.Character, java.lang.String> map;\n\n        private EscapeMode(java.util.Map<java.lang.Character, java.lang.String> map) {\n            this.map = map;\n        }\n\n        public java.util.Map<java.lang.Character, java.lang.String> getMap() {\n            return map;\n        }\n    }\n\n    private static final java.util.Map<java.lang.String, java.lang.Character> full;\n\n    private static final java.util.Map<java.lang.Character, java.lang.String> xhtmlByVal;\n\n    private static final java.util.Map<java.lang.String, java.lang.Character> base;\n\n    private static final java.util.Map<java.lang.Character, java.lang.String> baseByVal;\n\n    private static final java.util.Map<java.lang.Character, java.lang.String> fullByVal;\n\n    private static final java.util.regex.Pattern unescapePattern = java.util.regex.Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);?\");\n\n    private static final java.util.regex.Pattern strictUnescapePattern = java.util.regex.Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);\");\n\n    private Entities() {\n    }\n\n    public static boolean isNamedEntity(java.lang.String name) {\n        return org.jsoup.nodes.Entities.full.containsKey(name);\n    }\n\n    public static boolean isBaseNamedEntity(java.lang.String name) {\n        return org.jsoup.nodes.Entities.base.containsKey(name);\n    }\n\n    public static java.lang.Character getCharacterByName(java.lang.String name) {\n        return org.jsoup.nodes.Entities.full.get(name);\n    }\n\n    static java.lang.String escape(java.lang.String string, org.jsoup.nodes.Document.OutputSettings out) {\n        return org.jsoup.nodes.Entities.escape(string, out.encoder(), out.escapeMode());\n    }\n\n    static java.lang.String escape(java.lang.String string, java.nio.charset.CharsetEncoder encoder, org.jsoup.nodes.Entities.EscapeMode escapeMode) {\n        java.lang.StringBuilder accum = new java.lang.StringBuilder(string.length() * 2);\n        java.util.Map<java.lang.Character, java.lang.String> map = escapeMode.getMap();\n        for (int pos = 0; pos < string.length(); pos++) {\n            java.lang.Character c = string.charAt(pos);\n            if (map.containsKey(c)) {\n                accum.append('&').append(map.get(c)).append(';');\n            } else if (encoder.canEncode(c)) {\n                accum.append(c.charValue());\n            } else {\n                accum.append(\"&#\").append(((int) (c))).append(';');\n            }\n        }\n        return accum.toString();\n    }\n\n    static java.lang.String unescape(java.lang.String string) {\n        return org.jsoup.nodes.Entities.unescape(string, false);\n    }\n\n    static java.lang.String unescape(java.lang.String string, boolean strict) {\n        return org.jsoup.parser.Parser.unescapeEntities(string, strict);\n    }\n\n    private static final java.lang.Object[][] xhtmlArray = new java.lang.Object[][]{ new java.lang.Object[]{ \"quot\", 0x22 }, new java.lang.Object[]{ \"amp\", 0x26 }, new java.lang.Object[]{ \"apos\", 0x27 }, new java.lang.Object[]{ \"lt\", 0x3c }, new java.lang.Object[]{ \"gt\", 0x3e } };\n\n    static {\n        xhtmlByVal = new java.util.HashMap<java.lang.Character, java.lang.String>();\n        base = loadEntities(\"entities-base.properties\");\n        baseByVal = toCharacterKey(base);\n        full = loadEntities(\"entities-full.properties\");\n        fullByVal = toCharacterKey(full);\n        for (java.lang.Object[] entity : xhtmlArray) {\n            java.lang.Character c = java.lang.Character.valueOf(((char) (((java.lang.Integer) (entity[1])).intValue())));\n            xhtmlByVal.put(c, ((java.lang.String) (entity[0])));\n        }\n    }\n\n    private static java.util.Map<java.lang.String, java.lang.Character> loadEntities(java.lang.String filename) {\n        java.util.Properties properties = new java.util.Properties();\n        java.util.Map<java.lang.String, java.lang.Character> entities = new java.util.HashMap<java.lang.String, java.lang.Character>();\n        try {\n            java.io.InputStream in = org.jsoup.nodes.Entities.class.getResourceAsStream(filename);\n            properties.load(in);\n            in.close();\n        } catch (java.io.IOException e) {\n            throw new java.util.MissingResourceException(\"Error loading entities resource: \" + e.getMessage(), \"Entities\", filename);\n        }\n        for (java.util.Map.Entry entry : properties.entrySet()) {\n            java.lang.Character val = java.lang.Character.valueOf(((char) (java.lang.Integer.parseInt(((java.lang.String) (entry.getValue())), 16))));\n            java.lang.String name = ((java.lang.String) (entry.getKey()));\n            entities.put(name, val);\n        }\n        return entities;\n    }\n\n    private static java.util.Map<java.lang.Character, java.lang.String> toCharacterKey(java.util.Map<java.lang.String, java.lang.Character> inMap) {\n        java.util.Map<java.lang.Character, java.lang.String> outMap = new java.util.HashMap<java.lang.Character, java.lang.String>();\n        for (java.util.Map.Entry<java.lang.String, java.lang.Character> entry : inMap.entrySet()) {\n            java.lang.Character character = entry.getValue();\n            java.lang.String name = entry.getKey();\n            if (outMap.containsKey(character)) {\n                if (name.toLowerCase().equals(name)) {\n                    outMap.put(character, name);\n                }\n            } else {\n                outMap.put(character, name);\n            }\n        }\n        return outMap;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "static java.lang.String unescape(java.lang.String string, boolean strict) {\n    return org.jsoup.parser.Parser.unescapeEntities(string, strict);\n}",
            "src_parent": "public class Entities {\n    public enum EscapeMode {\n\n        xhtml(org.jsoup.nodes.Entities.xhtmlByVal),\n        base(org.jsoup.nodes.Entities.baseByVal),\n        extended(org.jsoup.nodes.Entities.fullByVal);\n        private java.util.Map<java.lang.Character, java.lang.String> map;\n\n        private EscapeMode(java.util.Map<java.lang.Character, java.lang.String> map) {\n            this.map = map;\n        }\n\n        public java.util.Map<java.lang.Character, java.lang.String> getMap() {\n            return map;\n        }\n    }\n\n    private static final java.util.Map<java.lang.String, java.lang.Character> full;\n\n    private static final java.util.Map<java.lang.Character, java.lang.String> xhtmlByVal;\n\n    private static final java.util.Map<java.lang.String, java.lang.Character> base;\n\n    private static final java.util.Map<java.lang.Character, java.lang.String> baseByVal;\n\n    private static final java.util.Map<java.lang.Character, java.lang.String> fullByVal;\n\n    private static final java.util.regex.Pattern unescapePattern = java.util.regex.Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);?\");\n\n    private static final java.util.regex.Pattern strictUnescapePattern = java.util.regex.Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);\");\n\n    private Entities() {\n    }\n\n    public static boolean isNamedEntity(java.lang.String name) {\n        return org.jsoup.nodes.Entities.full.containsKey(name);\n    }\n\n    public static boolean isBaseNamedEntity(java.lang.String name) {\n        return org.jsoup.nodes.Entities.base.containsKey(name);\n    }\n\n    public static java.lang.Character getCharacterByName(java.lang.String name) {\n        return org.jsoup.nodes.Entities.full.get(name);\n    }\n\n    static java.lang.String escape(java.lang.String string, org.jsoup.nodes.Document.OutputSettings out) {\n        return org.jsoup.nodes.Entities.escape(string, out.encoder(), out.escapeMode());\n    }\n\n    static java.lang.String escape(java.lang.String string, java.nio.charset.CharsetEncoder encoder, org.jsoup.nodes.Entities.EscapeMode escapeMode) {\n        java.lang.StringBuilder accum = new java.lang.StringBuilder(string.length() * 2);\n        java.util.Map<java.lang.Character, java.lang.String> map = escapeMode.getMap();\n        for (int pos = 0; pos < string.length(); pos++) {\n            java.lang.Character c = string.charAt(pos);\n            if (map.containsKey(c)) {\n                accum.append('&').append(map.get(c)).append(';');\n            } else if (encoder.canEncode(c)) {\n                accum.append(c.charValue());\n            } else {\n                accum.append(\"&#\").append(((int) (c))).append(';');\n            }\n        }\n        return accum.toString();\n    }\n\n    static java.lang.String unescape(java.lang.String string) {\n        return org.jsoup.nodes.Entities.unescape(string, false);\n    }\n\n    static java.lang.String unescape(java.lang.String string, boolean strict) {\n        return org.jsoup.parser.Parser.unescapeEntities(string, strict);\n    }\n\n    private static final java.lang.Object[][] xhtmlArray = new java.lang.Object[][]{ new java.lang.Object[]{ \"quot\", 0x22 }, new java.lang.Object[]{ \"amp\", 0x26 }, new java.lang.Object[]{ \"apos\", 0x27 }, new java.lang.Object[]{ \"lt\", 0x3c }, new java.lang.Object[]{ \"gt\", 0x3e } };\n\n    static {\n        xhtmlByVal = new java.util.HashMap<java.lang.Character, java.lang.String>();\n        base = loadEntities(\"entities-base.properties\");\n        baseByVal = toCharacterKey(base);\n        full = loadEntities(\"entities-full.properties\");\n        fullByVal = toCharacterKey(full);\n        for (java.lang.Object[] entity : xhtmlArray) {\n            java.lang.Character c = java.lang.Character.valueOf(((char) (((java.lang.Integer) (entity[1])).intValue())));\n            xhtmlByVal.put(c, ((java.lang.String) (entity[0])));\n        }\n    }\n\n    private static java.util.Map<java.lang.String, java.lang.Character> loadEntities(java.lang.String filename) {\n        java.util.Properties properties = new java.util.Properties();\n        java.util.Map<java.lang.String, java.lang.Character> entities = new java.util.HashMap<java.lang.String, java.lang.Character>();\n        try {\n            java.io.InputStream in = org.jsoup.nodes.Entities.class.getResourceAsStream(filename);\n            properties.load(in);\n            in.close();\n        } catch (java.io.IOException e) {\n            throw new java.util.MissingResourceException(\"Error loading entities resource: \" + e.getMessage(), \"Entities\", filename);\n        }\n        for (java.util.Map.Entry entry : properties.entrySet()) {\n            java.lang.Character val = java.lang.Character.valueOf(((char) (java.lang.Integer.parseInt(((java.lang.String) (entry.getValue())), 16))));\n            java.lang.String name = ((java.lang.String) (entry.getKey()));\n            entities.put(name, val);\n        }\n        return entities;\n    }\n\n    private static java.util.Map<java.lang.Character, java.lang.String> toCharacterKey(java.util.Map<java.lang.String, java.lang.Character> inMap) {\n        java.util.Map<java.lang.Character, java.lang.String> outMap = new java.util.HashMap<java.lang.Character, java.lang.String>();\n        for (java.util.Map.Entry<java.lang.String, java.lang.Character> entry : inMap.entrySet()) {\n            java.lang.Character character = entry.getValue();\n            java.lang.String name = entry.getKey();\n            if (outMap.containsKey(character)) {\n                if (name.toLowerCase().equals(name)) {\n                    outMap.put(character, name);\n                }\n            } else {\n                outMap.put(character, name);\n            }\n        }\n        return outMap;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "static java.lang.String unescape(java.lang.String string, boolean strict) {\n    if (!string.contains(\"&\")) {\n        return string;\n    }\n    java.util.regex.Matcher m = (strict) ? org.jsoup.nodes.Entities.strictUnescapePattern.matcher(string) : org.jsoup.nodes.Entities.unescapePattern.matcher(string);\n    java.lang.StringBuffer accum = new java.lang.StringBuffer(string.length());\n    while (m.find()) {\n        int charval = -1;\n        java.lang.String num = m.group(3);\n        if (num != null) {\n            try {\n                int base = (m.group(2) != null) ? 16 : 10;\n                charval = java.lang.Integer.valueOf(num, base);\n            } catch (java.lang.NumberFormatException e) {\n            }\n        } else {\n            java.lang.String name = m.group(1);\n            if (org.jsoup.nodes.Entities.full.containsKey(name)) {\n                charval = org.jsoup.nodes.Entities.full.get(name);\n            }\n        }\n        if ((charval != (-1)) || (charval > 0xffff)) {\n            java.lang.String c = java.lang.Character.toString(((char) (charval)));\n            m.appendReplacement(accum, java.util.regex.Matcher.quoteReplacement(c));\n        } else {\n            m.appendReplacement(accum, java.util.regex.Matcher.quoteReplacement(m.group(0)));\n        }\n    } \n    m.appendTail(accum);\n    return accum.toString();\n}",
            "src_parent": "public class Entities {\n    public enum EscapeMode {\n\n        xhtml(org.jsoup.nodes.Entities.xhtmlByVal),\n        base(org.jsoup.nodes.Entities.baseByVal),\n        extended(org.jsoup.nodes.Entities.fullByVal);\n        private java.util.Map<java.lang.Character, java.lang.String> map;\n\n        private EscapeMode(java.util.Map<java.lang.Character, java.lang.String> map) {\n            this.map = map;\n        }\n\n        public java.util.Map<java.lang.Character, java.lang.String> getMap() {\n            return map;\n        }\n    }\n\n    private static final java.util.Map<java.lang.String, java.lang.Character> full;\n\n    private static final java.util.Map<java.lang.Character, java.lang.String> xhtmlByVal;\n\n    private static final java.util.Map<java.lang.String, java.lang.Character> base;\n\n    private static final java.util.Map<java.lang.Character, java.lang.String> baseByVal;\n\n    private static final java.util.Map<java.lang.Character, java.lang.String> fullByVal;\n\n    private static final java.util.regex.Pattern unescapePattern = java.util.regex.Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);?\");\n\n    private static final java.util.regex.Pattern strictUnescapePattern = java.util.regex.Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);\");\n\n    private Entities() {\n    }\n\n    public static boolean isNamedEntity(java.lang.String name) {\n        return org.jsoup.nodes.Entities.full.containsKey(name);\n    }\n\n    public static java.lang.Character getCharacterByName(java.lang.String name) {\n        return org.jsoup.nodes.Entities.full.get(name);\n    }\n\n    static java.lang.String escape(java.lang.String string, org.jsoup.nodes.Document.OutputSettings out) {\n        return org.jsoup.nodes.Entities.escape(string, out.encoder(), out.escapeMode());\n    }\n\n    static java.lang.String escape(java.lang.String string, java.nio.charset.CharsetEncoder encoder, org.jsoup.nodes.Entities.EscapeMode escapeMode) {\n        java.lang.StringBuilder accum = new java.lang.StringBuilder(string.length() * 2);\n        java.util.Map<java.lang.Character, java.lang.String> map = escapeMode.getMap();\n        for (int pos = 0; pos < string.length(); pos++) {\n            java.lang.Character c = string.charAt(pos);\n            if (map.containsKey(c)) {\n                accum.append('&').append(map.get(c)).append(';');\n            } else if (encoder.canEncode(c)) {\n                accum.append(c.charValue());\n            } else {\n                accum.append(\"&#\").append(((int) (c))).append(';');\n            }\n        }\n        return accum.toString();\n    }\n\n    static java.lang.String unescape(java.lang.String string) {\n        return org.jsoup.nodes.Entities.unescape(string, false);\n    }\n\n    static java.lang.String unescape(java.lang.String string, boolean strict) {\n        if (!string.contains(\"&\")) {\n            return string;\n        }\n        java.util.regex.Matcher m = (strict) ? org.jsoup.nodes.Entities.strictUnescapePattern.matcher(string) : org.jsoup.nodes.Entities.unescapePattern.matcher(string);\n        java.lang.StringBuffer accum = new java.lang.StringBuffer(string.length());\n        while (m.find()) {\n            int charval = -1;\n            java.lang.String num = m.group(3);\n            if (num != null) {\n                try {\n                    int base = (m.group(2) != null) ? 16 : 10;\n                    charval = java.lang.Integer.valueOf(num, base);\n                } catch (java.lang.NumberFormatException e) {\n                }\n            } else {\n                java.lang.String name = m.group(1);\n                if (org.jsoup.nodes.Entities.full.containsKey(name)) {\n                    charval = org.jsoup.nodes.Entities.full.get(name);\n                }\n            }\n            if ((charval != (-1)) || (charval > 0xffff)) {\n                java.lang.String c = java.lang.Character.toString(((char) (charval)));\n                m.appendReplacement(accum, java.util.regex.Matcher.quoteReplacement(c));\n            } else {\n                m.appendReplacement(accum, java.util.regex.Matcher.quoteReplacement(m.group(0)));\n            }\n        } \n        m.appendTail(accum);\n        return accum.toString();\n    }\n\n    private static final java.lang.Object[][] xhtmlArray = new java.lang.Object[][]{ new java.lang.Object[]{ \"quot\", 0x22 }, new java.lang.Object[]{ \"amp\", 0x26 }, new java.lang.Object[]{ \"apos\", 0x27 }, new java.lang.Object[]{ \"lt\", 0x3c }, new java.lang.Object[]{ \"gt\", 0x3e } };\n\n    static {\n        xhtmlByVal = new java.util.HashMap<java.lang.Character, java.lang.String>();\n        base = loadEntities(\"entities-base.properties\");\n        baseByVal = toCharacterKey(base);\n        full = loadEntities(\"entities-full.properties\");\n        fullByVal = toCharacterKey(full);\n        for (java.lang.Object[] entity : xhtmlArray) {\n            java.lang.Character c = java.lang.Character.valueOf(((char) (((java.lang.Integer) (entity[1])).intValue())));\n            xhtmlByVal.put(c, ((java.lang.String) (entity[0])));\n        }\n    }\n\n    private static java.util.Map<java.lang.String, java.lang.Character> loadEntities(java.lang.String filename) {\n        java.util.Properties properties = new java.util.Properties();\n        java.util.Map<java.lang.String, java.lang.Character> entities = new java.util.HashMap<java.lang.String, java.lang.Character>();\n        try {\n            java.io.InputStream in = org.jsoup.nodes.Entities.class.getResourceAsStream(filename);\n            properties.load(in);\n            in.close();\n        } catch (java.io.IOException e) {\n            throw new java.util.MissingResourceException(\"Error loading entities resource: \" + e.getMessage(), \"Entities\", filename);\n        }\n        for (java.util.Map.Entry entry : properties.entrySet()) {\n            java.lang.Character val = java.lang.Character.valueOf(((char) (java.lang.Integer.parseInt(((java.lang.String) (entry.getValue())), 16))));\n            java.lang.String name = ((java.lang.String) (entry.getKey()));\n            entities.put(name, val);\n        }\n        return entities;\n    }\n\n    private static java.util.Map<java.lang.Character, java.lang.String> toCharacterKey(java.util.Map<java.lang.String, java.lang.Character> inMap) {\n        java.util.Map<java.lang.Character, java.lang.String> outMap = new java.util.HashMap<java.lang.Character, java.lang.String>();\n        for (java.util.Map.Entry<java.lang.String, java.lang.Character> entry : inMap.entrySet()) {\n            java.lang.Character character = entry.getValue();\n            java.lang.String name = entry.getKey();\n            if (outMap.containsKey(character)) {\n                if (name.toLowerCase().equals(name)) {\n                    outMap.put(character, name);\n                }\n            } else {\n                outMap.put(character, name);\n            }\n        }\n        return outMap;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String",
            "dst_parent": "static java.lang.String unescape(java.lang.String string, boolean strict) {\n    if (!string.contains(\"&\")) {\n        return string;\n    }\n    java.util.regex.Matcher m = (strict) ? org.jsoup.nodes.Entities.strictUnescapePattern.matcher(string) : org.jsoup.nodes.Entities.unescapePattern.matcher(string);\n    java.lang.StringBuffer accum = new java.lang.StringBuffer(string.length());\n    while (m.find()) {\n        int charval = -1;\n        java.lang.String num = m.group(3);\n        if (num != null) {\n            try {\n                int base = (m.group(2) != null) ? 16 : 10;\n                charval = java.lang.Integer.valueOf(num, base);\n            } catch (java.lang.NumberFormatException e) {\n            }\n        } else {\n            java.lang.String name = m.group(1);\n            if (org.jsoup.nodes.Entities.full.containsKey(name)) {\n                charval = org.jsoup.nodes.Entities.full.get(name);\n            }\n        }\n        if ((charval != (-1)) || (charval > 0xffff)) {\n            java.lang.String c = java.lang.Character.toString(((char) (charval)));\n            m.appendReplacement(accum, java.util.regex.Matcher.quoteReplacement(c));\n        } else {\n            m.appendReplacement(accum, java.util.regex.Matcher.quoteReplacement(m.group(0)));\n        }\n    } \n    m.appendTail(accum);\n    return accum.toString();\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "boolean",
            "src_parent": "public static boolean isBaseNamedEntity(java.lang.String name) {\n    return org.jsoup.nodes.Entities.base.containsKey(name);\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Method",
            "dst_parent": "static java.lang.String unescape(java.lang.String string, boolean strict) {\n    if (!string.contains(\"&\")) {\n        return string;\n    }\n    java.util.regex.Matcher m = (strict) ? org.jsoup.nodes.Entities.strictUnescapePattern.matcher(string) : org.jsoup.nodes.Entities.unescapePattern.matcher(string);\n    java.lang.StringBuffer accum = new java.lang.StringBuffer(string.length());\n    while (m.find()) {\n        int charval = -1;\n        java.lang.String num = m.group(3);\n        if (num != null) {\n            try {\n                int base = (m.group(2) != null) ? 16 : 10;\n                charval = java.lang.Integer.valueOf(num, base);\n            } catch (java.lang.NumberFormatException e) {\n            }\n        } else {\n            java.lang.String name = m.group(1);\n            if (org.jsoup.nodes.Entities.full.containsKey(name)) {\n                charval = org.jsoup.nodes.Entities.full.get(name);\n            }\n        }\n        if ((charval != (-1)) || (charval > 0xffff)) {\n            java.lang.String c = java.lang.Character.toString(((char) (charval)));\n            m.appendReplacement(accum, java.util.regex.Matcher.quoteReplacement(c));\n        } else {\n            m.appendReplacement(accum, java.util.regex.Matcher.quoteReplacement(m.group(0)));\n        }\n    } \n    m.appendTail(accum);\n    return accum.toString();\n}",
            "dst_parent_type": "Method",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Method",
            "src_parent": "static java.lang.String unescape(java.lang.String string, boolean strict) {\n    return org.jsoup.parser.Parser.unescapeEntities(string, strict);\n}",
            "src_parent_type": "Method",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String string",
            "dst_parent": "static java.lang.String unescape(java.lang.String string, boolean strict) {\n    if (!string.contains(\"&\")) {\n        return string;\n    }\n    java.util.regex.Matcher m = (strict) ? org.jsoup.nodes.Entities.strictUnescapePattern.matcher(string) : org.jsoup.nodes.Entities.unescapePattern.matcher(string);\n    java.lang.StringBuffer accum = new java.lang.StringBuffer(string.length());\n    while (m.find()) {\n        int charval = -1;\n        java.lang.String num = m.group(3);\n        if (num != null) {\n            try {\n                int base = (m.group(2) != null) ? 16 : 10;\n                charval = java.lang.Integer.valueOf(num, base);\n            } catch (java.lang.NumberFormatException e) {\n            }\n        } else {\n            java.lang.String name = m.group(1);\n            if (org.jsoup.nodes.Entities.full.containsKey(name)) {\n                charval = org.jsoup.nodes.Entities.full.get(name);\n            }\n        }\n        if ((charval != (-1)) || (charval > 0xffff)) {\n            java.lang.String c = java.lang.Character.toString(((char) (charval)));\n            m.appendReplacement(accum, java.util.regex.Matcher.quoteReplacement(c));\n        } else {\n            m.appendReplacement(accum, java.util.regex.Matcher.quoteReplacement(m.group(0)));\n        }\n    } \n    m.appendTail(accum);\n    return accum.toString();\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "java.lang.String string",
            "src_parent": "static java.lang.String unescape(java.lang.String string, boolean strict) {\n    return org.jsoup.parser.Parser.unescapeEntities(string, strict);\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "boolean strict",
            "dst_parent": "static java.lang.String unescape(java.lang.String string, boolean strict) {\n    if (!string.contains(\"&\")) {\n        return string;\n    }\n    java.util.regex.Matcher m = (strict) ? org.jsoup.nodes.Entities.strictUnescapePattern.matcher(string) : org.jsoup.nodes.Entities.unescapePattern.matcher(string);\n    java.lang.StringBuffer accum = new java.lang.StringBuffer(string.length());\n    while (m.find()) {\n        int charval = -1;\n        java.lang.String num = m.group(3);\n        if (num != null) {\n            try {\n                int base = (m.group(2) != null) ? 16 : 10;\n                charval = java.lang.Integer.valueOf(num, base);\n            } catch (java.lang.NumberFormatException e) {\n            }\n        } else {\n            java.lang.String name = m.group(1);\n            if (org.jsoup.nodes.Entities.full.containsKey(name)) {\n                charval = org.jsoup.nodes.Entities.full.get(name);\n            }\n        }\n        if ((charval != (-1)) || (charval > 0xffff)) {\n            java.lang.String c = java.lang.Character.toString(((char) (charval)));\n            m.appendReplacement(accum, java.util.regex.Matcher.quoteReplacement(c));\n        } else {\n            m.appendReplacement(accum, java.util.regex.Matcher.quoteReplacement(m.group(0)));\n        }\n    } \n    m.appendTail(accum);\n    return accum.toString();\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "boolean strict",
            "src_parent": "static java.lang.String unescape(java.lang.String string, boolean strict) {\n    return org.jsoup.parser.Parser.unescapeEntities(string, strict);\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return accum.toString()",
            "dst_parent": "{\n    if (!string.contains(\"&\")) {\n        return string;\n    }\n    java.util.regex.Matcher m = (strict) ? org.jsoup.nodes.Entities.strictUnescapePattern.matcher(string) : org.jsoup.nodes.Entities.unescapePattern.matcher(string);\n    java.lang.StringBuffer accum = new java.lang.StringBuffer(string.length());\n    while (m.find()) {\n        int charval = -1;\n        java.lang.String num = m.group(3);\n        if (num != null) {\n            try {\n                int base = (m.group(2) != null) ? 16 : 10;\n                charval = java.lang.Integer.valueOf(num, base);\n            } catch (java.lang.NumberFormatException e) {\n            }\n        } else {\n            java.lang.String name = m.group(1);\n            if (org.jsoup.nodes.Entities.full.containsKey(name)) {\n                charval = org.jsoup.nodes.Entities.full.get(name);\n            }\n        }\n        if ((charval != (-1)) || (charval > 0xffff)) {\n            java.lang.String c = java.lang.Character.toString(((char) (charval)));\n            m.appendReplacement(accum, java.util.regex.Matcher.quoteReplacement(c));\n        } else {\n            m.appendReplacement(accum, java.util.regex.Matcher.quoteReplacement(m.group(0)));\n        }\n    } \n    m.appendTail(accum);\n    return accum.toString();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return org.jsoup.parser.Parser.unescapeEntities(string, strict)",
            "src_parent": "{\n    return org.jsoup.parser.Parser.unescapeEntities(string, strict);\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.jsoup.nodes.Entities.full",
            "dst_parent": "org.jsoup.nodes.Entities.full.containsKey(name)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "org.jsoup.nodes.Entities.base",
            "src_parent": "org.jsoup.nodes.Entities.base.containsKey(name)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "name",
            "dst_parent": "org.jsoup.nodes.Entities.full.containsKey(name)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "name",
            "src_parent": "org.jsoup.nodes.Entities.base.containsKey(name)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        }
      ],
      "file_name": "Entities"
    }
  ],
  "id": "Jsoup_28"
}