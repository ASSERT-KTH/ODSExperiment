{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Do",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "theSearchedType != null",
            "src_parent": "if (theSearchedType != null) {\n    return theSearchedType;\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Do",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    return theSearchedType;\n}",
            "src_parent": "if (theSearchedType != null) {\n    return theSearchedType;\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (parentType instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.TypeVariable<?> fieldTypeVariable = ((java.lang.reflect.TypeVariable<?>) (typeToEvaluate));\n    java.lang.reflect.TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();\n    java.lang.reflect.ParameterizedType objParameterizedType = ((java.lang.reflect.ParameterizedType) (parentType));\n    int indexOfActualTypeArgument = com.google.gson.TypeInfoFactory.getIndex(classTypeVariables, fieldTypeVariable);\n    java.lang.reflect.Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();\n    return actualTypeArguments[indexOfActualTypeArgument];\n} else if (typeToEvaluate instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type theSearchedType = null;\n    do {\n        theSearchedType = com.google.gson.TypeInfoFactory.extractTypeForHierarchy(parentType, ((java.lang.reflect.TypeVariable<?>) (typeToEvaluate)));\n    } while ((theSearchedType != null) && (theSearchedType instanceof java.lang.reflect.TypeVariable<?>) );\n    if (theSearchedType != null) {\n        return theSearchedType;\n    }\n}",
            "src_parent": "{\n    if (parentType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.TypeVariable<?> fieldTypeVariable = ((java.lang.reflect.TypeVariable<?>) (typeToEvaluate));\n        java.lang.reflect.TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();\n        java.lang.reflect.ParameterizedType objParameterizedType = ((java.lang.reflect.ParameterizedType) (parentType));\n        int indexOfActualTypeArgument = com.google.gson.TypeInfoFactory.getIndex(classTypeVariables, fieldTypeVariable);\n        java.lang.reflect.Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();\n        return actualTypeArguments[indexOfActualTypeArgument];\n    } else if (typeToEvaluate instanceof java.lang.reflect.TypeVariable<?>) {\n        java.lang.reflect.Type theSearchedType = null;\n        do {\n            theSearchedType = com.google.gson.TypeInfoFactory.extractTypeForHierarchy(parentType, ((java.lang.reflect.TypeVariable<?>) (typeToEvaluate)));\n        } while ((theSearchedType != null) && (theSearchedType instanceof java.lang.reflect.TypeVariable<?>) );\n        if (theSearchedType != null) {\n            return theSearchedType;\n        }\n    }\n    throw new java.lang.UnsupportedOperationException(((\"Expecting parameterized type, got \" + parentType) + \".\\n Are you missing the use of TypeToken idiom?\\n See \") + \"http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\");\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private static java.lang.reflect.Type extractTypeForHierarchy(java.lang.reflect.Type parentType, java.lang.reflect.TypeVariable<?> typeToEvaluate) {\n    java.lang.Class<?> rawParentType = null;\n    if (parentType instanceof java.lang.Class<?>) {\n        rawParentType = ((java.lang.Class<?>) (parentType));\n    } else if (parentType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType parentTypeAsPT = ((java.lang.reflect.ParameterizedType) (parentType));\n        rawParentType = ((java.lang.Class<?>) (parentTypeAsPT.getRawType()));\n    } else {\n        return null;\n    }\n    java.lang.reflect.Type superClass = rawParentType.getGenericSuperclass();\n    if ((superClass instanceof java.lang.reflect.ParameterizedType) && (((java.lang.reflect.ParameterizedType) (superClass)).getRawType() == typeToEvaluate.getGenericDeclaration())) {\n        java.lang.reflect.TypeVariable<?>[] classTypeVariables = ((java.lang.Class<?>) (((java.lang.reflect.ParameterizedType) (superClass)).getRawType())).getTypeParameters();\n        int indexOfActualTypeArgument = com.google.gson.TypeInfoFactory.getIndex(classTypeVariables, typeToEvaluate);\n        java.lang.reflect.Type[] actualTypeArguments = null;\n        if (parentType instanceof java.lang.Class<?>) {\n            actualTypeArguments = ((java.lang.reflect.ParameterizedType) (superClass)).getActualTypeArguments();\n        } else if (parentType instanceof java.lang.reflect.ParameterizedType) {\n            actualTypeArguments = ((java.lang.reflect.ParameterizedType) (parentType)).getActualTypeArguments();\n        } else {\n            return null;\n        }\n        return actualTypeArguments[indexOfActualTypeArgument];\n    }\n    java.lang.reflect.Type searchedType = null;\n    if (superClass != null) {\n        searchedType = com.google.gson.TypeInfoFactory.extractTypeForHierarchy(superClass, typeToEvaluate);\n    }\n    return searchedType;\n}",
            "src_parent": "final class TypeInfoFactory {\n    private TypeInfoFactory() {\n    }\n\n    public static com.google.gson.TypeInfoArray getTypeInfoForArray(java.lang.reflect.Type type) {\n        com.google.gson.Preconditions.checkArgument(com.google.gson.TypeUtils.isArray(type));\n        return new com.google.gson.TypeInfoArray(type);\n    }\n\n    public static com.google.gson.TypeInfo getTypeInfoForField(java.lang.reflect.Field f, java.lang.reflect.Type typeDefiningF) {\n        java.lang.Class<?> classDefiningF = com.google.gson.TypeUtils.toRawClass(typeDefiningF);\n        java.lang.reflect.Type type = f.getGenericType();\n        java.lang.reflect.Type actualType = com.google.gson.TypeInfoFactory.getActualType(type, typeDefiningF, classDefiningF);\n        return new com.google.gson.TypeInfo(actualType);\n    }\n\n    private static java.lang.reflect.Type getActualType(java.lang.reflect.Type typeToEvaluate, java.lang.reflect.Type parentType, java.lang.Class<?> rawParentClass) {\n        if (typeToEvaluate instanceof java.lang.Class<?>) {\n            return typeToEvaluate;\n        } else if (typeToEvaluate instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType castedType = ((java.lang.reflect.ParameterizedType) (typeToEvaluate));\n            java.lang.reflect.Type owner = castedType.getOwnerType();\n            java.lang.reflect.Type[] actualTypeParameters = com.google.gson.TypeInfoFactory.extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass);\n            java.lang.reflect.Type rawType = castedType.getRawType();\n            return new com.google.gson.ParameterizedTypeImpl(rawType, actualTypeParameters, owner);\n        } else if (typeToEvaluate instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType castedType = ((java.lang.reflect.GenericArrayType) (typeToEvaluate));\n            java.lang.reflect.Type componentType = castedType.getGenericComponentType();\n            java.lang.reflect.Type actualType = com.google.gson.TypeInfoFactory.getActualType(componentType, parentType, rawParentClass);\n            if (componentType.equals(actualType)) {\n                return castedType;\n            }\n            return actualType instanceof java.lang.Class<?> ? com.google.gson.TypeUtils.wrapWithArray(com.google.gson.TypeUtils.toRawClass(actualType)) : new com.google.gson.GenericArrayTypeImpl(actualType);\n        } else if (typeToEvaluate instanceof java.lang.reflect.TypeVariable<?>) {\n            if (parentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.TypeVariable<?> fieldTypeVariable = ((java.lang.reflect.TypeVariable<?>) (typeToEvaluate));\n                java.lang.reflect.TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();\n                java.lang.reflect.ParameterizedType objParameterizedType = ((java.lang.reflect.ParameterizedType) (parentType));\n                int indexOfActualTypeArgument = com.google.gson.TypeInfoFactory.getIndex(classTypeVariables, fieldTypeVariable);\n                java.lang.reflect.Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();\n                return actualTypeArguments[indexOfActualTypeArgument];\n            } else if (typeToEvaluate instanceof java.lang.reflect.TypeVariable<?>) {\n                java.lang.reflect.Type theSearchedType = null;\n                do {\n                    theSearchedType = com.google.gson.TypeInfoFactory.extractTypeForHierarchy(parentType, ((java.lang.reflect.TypeVariable<?>) (typeToEvaluate)));\n                } while ((theSearchedType != null) && (theSearchedType instanceof java.lang.reflect.TypeVariable<?>) );\n                if (theSearchedType != null) {\n                    return theSearchedType;\n                }\n            }\n            throw new java.lang.UnsupportedOperationException(((\"Expecting parameterized type, got \" + parentType) + \".\\n Are you missing the use of TypeToken idiom?\\n See \") + \"http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\");\n        } else if (typeToEvaluate instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType castedType = ((java.lang.reflect.WildcardType) (typeToEvaluate));\n            return com.google.gson.TypeInfoFactory.getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass);\n        } else {\n            throw new java.lang.IllegalArgumentException(((\"Type \\'\" + typeToEvaluate) + \"\\' is not a Class, \") + \"ParameterizedType, GenericArrayType or TypeVariable. Can't extract type.\");\n        }\n    }\n\n    private static java.lang.reflect.Type extractTypeForHierarchy(java.lang.reflect.Type parentType, java.lang.reflect.TypeVariable<?> typeToEvaluate) {\n        java.lang.Class<?> rawParentType = null;\n        if (parentType instanceof java.lang.Class<?>) {\n            rawParentType = ((java.lang.Class<?>) (parentType));\n        } else if (parentType instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType parentTypeAsPT = ((java.lang.reflect.ParameterizedType) (parentType));\n            rawParentType = ((java.lang.Class<?>) (parentTypeAsPT.getRawType()));\n        } else {\n            return null;\n        }\n        java.lang.reflect.Type superClass = rawParentType.getGenericSuperclass();\n        if ((superClass instanceof java.lang.reflect.ParameterizedType) && (((java.lang.reflect.ParameterizedType) (superClass)).getRawType() == typeToEvaluate.getGenericDeclaration())) {\n            java.lang.reflect.TypeVariable<?>[] classTypeVariables = ((java.lang.Class<?>) (((java.lang.reflect.ParameterizedType) (superClass)).getRawType())).getTypeParameters();\n            int indexOfActualTypeArgument = com.google.gson.TypeInfoFactory.getIndex(classTypeVariables, typeToEvaluate);\n            java.lang.reflect.Type[] actualTypeArguments = null;\n            if (parentType instanceof java.lang.Class<?>) {\n                actualTypeArguments = ((java.lang.reflect.ParameterizedType) (superClass)).getActualTypeArguments();\n            } else if (parentType instanceof java.lang.reflect.ParameterizedType) {\n                actualTypeArguments = ((java.lang.reflect.ParameterizedType) (parentType)).getActualTypeArguments();\n            } else {\n                return null;\n            }\n            return actualTypeArguments[indexOfActualTypeArgument];\n        }\n        java.lang.reflect.Type searchedType = null;\n        if (superClass != null) {\n            searchedType = com.google.gson.TypeInfoFactory.extractTypeForHierarchy(superClass, typeToEvaluate);\n        }\n        return searchedType;\n    }\n\n    private static java.lang.reflect.Type[] extractRealTypes(java.lang.reflect.Type[] actualTypeArguments, java.lang.reflect.Type parentType, java.lang.Class<?> rawParentClass) {\n        com.google.gson.Preconditions.checkNotNull(actualTypeArguments);\n        java.lang.reflect.Type[] retTypes = new java.lang.reflect.Type[actualTypeArguments.length];\n        for (int i = 0; i < actualTypeArguments.length; ++i) {\n            retTypes[i] = com.google.gson.TypeInfoFactory.getActualType(actualTypeArguments[i], parentType, rawParentClass);\n        }\n        return retTypes;\n    }\n\n    private static int getIndex(java.lang.reflect.TypeVariable<?>[] types, java.lang.reflect.TypeVariable<?> type) {\n        for (int i = 0; i < types.length; ++i) {\n            if (type.equals(types[i])) {\n                return i;\n            }\n        }\n        throw new java.lang.IllegalStateException(\"How can the type variable not be present in the class declaration!\");\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (parentType instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.TypeVariable<?> fieldTypeVariable = ((java.lang.reflect.TypeVariable<?>) (typeToEvaluate));\n    java.lang.reflect.TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();\n    java.lang.reflect.ParameterizedType objParameterizedType = ((java.lang.reflect.ParameterizedType) (parentType));\n    int indexOfActualTypeArgument = com.google.gson.TypeInfoFactory.getIndex(classTypeVariables, fieldTypeVariable);\n    java.lang.reflect.Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();\n    return actualTypeArguments[indexOfActualTypeArgument];\n}",
            "dst_parent": "{\n    if (parentType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.TypeVariable<?> fieldTypeVariable = ((java.lang.reflect.TypeVariable<?>) (typeToEvaluate));\n        java.lang.reflect.TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();\n        java.lang.reflect.ParameterizedType objParameterizedType = ((java.lang.reflect.ParameterizedType) (parentType));\n        int indexOfActualTypeArgument = com.google.gson.TypeInfoFactory.getIndex(classTypeVariables, fieldTypeVariable);\n        java.lang.reflect.Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();\n        return actualTypeArguments[indexOfActualTypeArgument];\n    }\n    throw new java.lang.UnsupportedOperationException(((\"Expecting parameterized type, got \" + parentType) + \".\\n Are you missing the use of TypeToken idiom?\\n See \") + \"http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\");\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (theSearchedType != null) {\n    return theSearchedType;\n}",
            "src_parent": "{\n    java.lang.reflect.Type theSearchedType = null;\n    do {\n        theSearchedType = com.google.gson.TypeInfoFactory.extractTypeForHierarchy(parentType, ((java.lang.reflect.TypeVariable<?>) (typeToEvaluate)));\n    } while ((theSearchedType != null) && (theSearchedType instanceof java.lang.reflect.TypeVariable<?>) );\n    if (theSearchedType != null) {\n        return theSearchedType;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "TypeInfoFactory"
    }
  ],
  "id": "Gson_1"
}