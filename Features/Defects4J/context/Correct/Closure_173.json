{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Switch",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {\n    addExpr(first, p, context);\n    cc.addOp(opstr, true);\n    addExpr(last, p, rhsContext);\n} else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {\n    addExpr(first, p, context);\n    cc.addOp(opstr, true);\n    addExpr(last, p, rhsContext);\n} else {\n    unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);\n}",
            "src_parent": "{\n    com.google.common.base.Preconditions.checkState(childCount == 2, \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\", opstr, childCount);\n    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);\n    com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);\n    if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n    } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n    } else {\n        unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);\n    }\n    return;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Switch",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {\n    addExpr(first, p, context);\n    cc.addOp(opstr, true);\n    addExpr(last, p, rhsContext);\n} else {\n    unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);\n}",
            "dst_parent": "{\n    if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n    } else {\n        unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {\n    addExpr(first, p, context);\n    cc.addOp(opstr, true);\n    addExpr(last, p, rhsContext);\n} else {\n    unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);\n}",
            "src_parent": "{\n    com.google.common.base.Preconditions.checkState(childCount == 2, \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\", opstr, childCount);\n    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);\n    com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);\n    if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n    } else {\n        unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);\n    }\n    return;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "CodeGenerator"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "case com.google.javascript.rhino.Token.MUL :",
            "src_parent": "switch (node.getType()) {\n    case com.google.javascript.rhino.Token.TRUE :\n    case com.google.javascript.rhino.Token.FALSE :\n        return reduceTrueFalse(node);\n    case com.google.javascript.rhino.Token.NEW :\n        node = tryFoldStandardConstructors(node);\n        if (!node.isCall()) {\n            return node;\n        }\n    case com.google.javascript.rhino.Token.CALL :\n        com.google.javascript.rhino.Node result = tryFoldLiteralConstructor(node);\n        if (result == node) {\n            result = tryFoldSimpleFunctionCall(node);\n            if (result == node) {\n                result = tryFoldImmediateCallToBoundFunction(node);\n            }\n        }\n        return result;\n    case com.google.javascript.rhino.Token.RETURN :\n        return tryReduceReturn(node);\n    case com.google.javascript.rhino.Token.COMMA :\n        return trySplitComma(node);\n    case com.google.javascript.rhino.Token.NAME :\n        return tryReplaceUndefined(node);\n    case com.google.javascript.rhino.Token.ARRAYLIT :\n        return tryMinimizeArrayLiteral(node);\n    case com.google.javascript.rhino.Token.MUL :\n    case com.google.javascript.rhino.Token.AND :\n    case com.google.javascript.rhino.Token.OR :\n    case com.google.javascript.rhino.Token.BITOR :\n    case com.google.javascript.rhino.Token.BITXOR :\n    case com.google.javascript.rhino.Token.BITAND :\n        return tryRotateAssociativeOperator(node);\n    default :\n        return node;\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "case com.google.javascript.rhino.Token.AND :",
            "src_parent": "switch (node.getType()) {\n    case com.google.javascript.rhino.Token.TRUE :\n    case com.google.javascript.rhino.Token.FALSE :\n        return reduceTrueFalse(node);\n    case com.google.javascript.rhino.Token.NEW :\n        node = tryFoldStandardConstructors(node);\n        if (!node.isCall()) {\n            return node;\n        }\n    case com.google.javascript.rhino.Token.CALL :\n        com.google.javascript.rhino.Node result = tryFoldLiteralConstructor(node);\n        if (result == node) {\n            result = tryFoldSimpleFunctionCall(node);\n            if (result == node) {\n                result = tryFoldImmediateCallToBoundFunction(node);\n            }\n        }\n        return result;\n    case com.google.javascript.rhino.Token.RETURN :\n        return tryReduceReturn(node);\n    case com.google.javascript.rhino.Token.COMMA :\n        return trySplitComma(node);\n    case com.google.javascript.rhino.Token.NAME :\n        return tryReplaceUndefined(node);\n    case com.google.javascript.rhino.Token.ARRAYLIT :\n        return tryMinimizeArrayLiteral(node);\n    case com.google.javascript.rhino.Token.MUL :\n    case com.google.javascript.rhino.Token.AND :\n    case com.google.javascript.rhino.Token.OR :\n    case com.google.javascript.rhino.Token.BITOR :\n    case com.google.javascript.rhino.Token.BITXOR :\n    case com.google.javascript.rhino.Token.BITAND :\n        return tryRotateAssociativeOperator(node);\n    default :\n        return node;\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "case com.google.javascript.rhino.Token.OR :",
            "src_parent": "switch (node.getType()) {\n    case com.google.javascript.rhino.Token.TRUE :\n    case com.google.javascript.rhino.Token.FALSE :\n        return reduceTrueFalse(node);\n    case com.google.javascript.rhino.Token.NEW :\n        node = tryFoldStandardConstructors(node);\n        if (!node.isCall()) {\n            return node;\n        }\n    case com.google.javascript.rhino.Token.CALL :\n        com.google.javascript.rhino.Node result = tryFoldLiteralConstructor(node);\n        if (result == node) {\n            result = tryFoldSimpleFunctionCall(node);\n            if (result == node) {\n                result = tryFoldImmediateCallToBoundFunction(node);\n            }\n        }\n        return result;\n    case com.google.javascript.rhino.Token.RETURN :\n        return tryReduceReturn(node);\n    case com.google.javascript.rhino.Token.COMMA :\n        return trySplitComma(node);\n    case com.google.javascript.rhino.Token.NAME :\n        return tryReplaceUndefined(node);\n    case com.google.javascript.rhino.Token.ARRAYLIT :\n        return tryMinimizeArrayLiteral(node);\n    case com.google.javascript.rhino.Token.MUL :\n    case com.google.javascript.rhino.Token.AND :\n    case com.google.javascript.rhino.Token.OR :\n    case com.google.javascript.rhino.Token.BITOR :\n    case com.google.javascript.rhino.Token.BITXOR :\n    case com.google.javascript.rhino.Token.BITAND :\n        return tryRotateAssociativeOperator(node);\n    default :\n        return node;\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "case com.google.javascript.rhino.Token.BITOR :",
            "src_parent": "switch (node.getType()) {\n    case com.google.javascript.rhino.Token.TRUE :\n    case com.google.javascript.rhino.Token.FALSE :\n        return reduceTrueFalse(node);\n    case com.google.javascript.rhino.Token.NEW :\n        node = tryFoldStandardConstructors(node);\n        if (!node.isCall()) {\n            return node;\n        }\n    case com.google.javascript.rhino.Token.CALL :\n        com.google.javascript.rhino.Node result = tryFoldLiteralConstructor(node);\n        if (result == node) {\n            result = tryFoldSimpleFunctionCall(node);\n            if (result == node) {\n                result = tryFoldImmediateCallToBoundFunction(node);\n            }\n        }\n        return result;\n    case com.google.javascript.rhino.Token.RETURN :\n        return tryReduceReturn(node);\n    case com.google.javascript.rhino.Token.COMMA :\n        return trySplitComma(node);\n    case com.google.javascript.rhino.Token.NAME :\n        return tryReplaceUndefined(node);\n    case com.google.javascript.rhino.Token.ARRAYLIT :\n        return tryMinimizeArrayLiteral(node);\n    case com.google.javascript.rhino.Token.MUL :\n    case com.google.javascript.rhino.Token.AND :\n    case com.google.javascript.rhino.Token.OR :\n    case com.google.javascript.rhino.Token.BITOR :\n    case com.google.javascript.rhino.Token.BITXOR :\n    case com.google.javascript.rhino.Token.BITAND :\n        return tryRotateAssociativeOperator(node);\n    default :\n        return node;\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "case com.google.javascript.rhino.Token.BITXOR :",
            "src_parent": "switch (node.getType()) {\n    case com.google.javascript.rhino.Token.TRUE :\n    case com.google.javascript.rhino.Token.FALSE :\n        return reduceTrueFalse(node);\n    case com.google.javascript.rhino.Token.NEW :\n        node = tryFoldStandardConstructors(node);\n        if (!node.isCall()) {\n            return node;\n        }\n    case com.google.javascript.rhino.Token.CALL :\n        com.google.javascript.rhino.Node result = tryFoldLiteralConstructor(node);\n        if (result == node) {\n            result = tryFoldSimpleFunctionCall(node);\n            if (result == node) {\n                result = tryFoldImmediateCallToBoundFunction(node);\n            }\n        }\n        return result;\n    case com.google.javascript.rhino.Token.RETURN :\n        return tryReduceReturn(node);\n    case com.google.javascript.rhino.Token.COMMA :\n        return trySplitComma(node);\n    case com.google.javascript.rhino.Token.NAME :\n        return tryReplaceUndefined(node);\n    case com.google.javascript.rhino.Token.ARRAYLIT :\n        return tryMinimizeArrayLiteral(node);\n    case com.google.javascript.rhino.Token.MUL :\n    case com.google.javascript.rhino.Token.AND :\n    case com.google.javascript.rhino.Token.OR :\n    case com.google.javascript.rhino.Token.BITOR :\n    case com.google.javascript.rhino.Token.BITXOR :\n    case com.google.javascript.rhino.Token.BITAND :\n        return tryRotateAssociativeOperator(node);\n    default :\n        return node;\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "case com.google.javascript.rhino.Token.BITAND :\n    return tryRotateAssociativeOperator(node);",
            "src_parent": "switch (node.getType()) {\n    case com.google.javascript.rhino.Token.TRUE :\n    case com.google.javascript.rhino.Token.FALSE :\n        return reduceTrueFalse(node);\n    case com.google.javascript.rhino.Token.NEW :\n        node = tryFoldStandardConstructors(node);\n        if (!node.isCall()) {\n            return node;\n        }\n    case com.google.javascript.rhino.Token.CALL :\n        com.google.javascript.rhino.Node result = tryFoldLiteralConstructor(node);\n        if (result == node) {\n            result = tryFoldSimpleFunctionCall(node);\n            if (result == node) {\n                result = tryFoldImmediateCallToBoundFunction(node);\n            }\n        }\n        return result;\n    case com.google.javascript.rhino.Token.RETURN :\n        return tryReduceReturn(node);\n    case com.google.javascript.rhino.Token.COMMA :\n        return trySplitComma(node);\n    case com.google.javascript.rhino.Token.NAME :\n        return tryReplaceUndefined(node);\n    case com.google.javascript.rhino.Token.ARRAYLIT :\n        return tryMinimizeArrayLiteral(node);\n    case com.google.javascript.rhino.Token.MUL :\n    case com.google.javascript.rhino.Token.AND :\n    case com.google.javascript.rhino.Token.OR :\n    case com.google.javascript.rhino.Token.BITOR :\n    case com.google.javascript.rhino.Token.BITXOR :\n    case com.google.javascript.rhino.Token.BITAND :\n        return tryRotateAssociativeOperator(node);\n    default :\n        return node;\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private com.google.javascript.rhino.Node tryRotateAssociativeOperator(com.google.javascript.rhino.Node n) {\n    if (!late) {\n        return n;\n    }\n    com.google.common.base.Preconditions.checkArgument(com.google.javascript.jscomp.NodeUtil.isAssociative(n.getType()));\n    com.google.javascript.rhino.Node rhs = n.getLastChild();\n    if (n.getType() == rhs.getType()) {\n        com.google.javascript.rhino.Node parent = n.getParent();\n        com.google.javascript.rhino.Node first = n.getFirstChild().detachFromParent();\n        com.google.javascript.rhino.Node second = rhs.getFirstChild().detachFromParent();\n        com.google.javascript.rhino.Node third = rhs.getLastChild().detachFromParent();\n        com.google.javascript.rhino.Node newLhs = new com.google.javascript.rhino.Node(n.getType(), first, second).copyInformationFrom(n);\n        com.google.javascript.rhino.Node newRoot = new com.google.javascript.rhino.Node(rhs.getType(), newLhs, third).copyInformationFrom(rhs);\n        parent.replaceChild(n, newRoot);\n        reportCodeChange();\n        return newRoot;\n    }\n    return n;\n}",
            "src_parent": "class PeepholeSubstituteAlternateSyntax extends com.google.javascript.jscomp.AbstractPeepholeOptimization {\n    private static final com.google.javascript.jscomp.CodeGenerator REGEXP_ESCAPER = com.google.javascript.jscomp.CodeGenerator.forCostEstimation(null);\n\n    private final boolean late;\n\n    private static final int STRING_SPLIT_OVERHEAD = \".split('.')\".length();\n\n    static final com.google.javascript.jscomp.DiagnosticType INVALID_REGULAR_EXPRESSION_FLAGS = com.google.javascript.jscomp.DiagnosticType.warning(\"JSC_INVALID_REGULAR_EXPRESSION_FLAGS\", \"Invalid flags to RegExp constructor: {0}\");\n\n    PeepholeSubstituteAlternateSyntax(boolean late) {\n        this.late = late;\n    }\n\n    @java.lang.Override\n    @java.lang.SuppressWarnings(\"fallthrough\")\n    public com.google.javascript.rhino.Node optimizeSubtree(com.google.javascript.rhino.Node node) {\n        switch (node.getType()) {\n            case com.google.javascript.rhino.Token.TRUE :\n            case com.google.javascript.rhino.Token.FALSE :\n                return reduceTrueFalse(node);\n            case com.google.javascript.rhino.Token.NEW :\n                node = tryFoldStandardConstructors(node);\n                if (!node.isCall()) {\n                    return node;\n                }\n            case com.google.javascript.rhino.Token.CALL :\n                com.google.javascript.rhino.Node result = tryFoldLiteralConstructor(node);\n                if (result == node) {\n                    result = tryFoldSimpleFunctionCall(node);\n                    if (result == node) {\n                        result = tryFoldImmediateCallToBoundFunction(node);\n                    }\n                }\n                return result;\n            case com.google.javascript.rhino.Token.RETURN :\n                return tryReduceReturn(node);\n            case com.google.javascript.rhino.Token.COMMA :\n                return trySplitComma(node);\n            case com.google.javascript.rhino.Token.NAME :\n                return tryReplaceUndefined(node);\n            case com.google.javascript.rhino.Token.ARRAYLIT :\n                return tryMinimizeArrayLiteral(node);\n            case com.google.javascript.rhino.Token.MUL :\n            case com.google.javascript.rhino.Token.AND :\n            case com.google.javascript.rhino.Token.OR :\n            case com.google.javascript.rhino.Token.BITOR :\n            case com.google.javascript.rhino.Token.BITXOR :\n            case com.google.javascript.rhino.Token.BITAND :\n                return tryRotateAssociativeOperator(node);\n            default :\n                return node;\n        }\n    }\n\n    private com.google.javascript.rhino.Node tryRotateAssociativeOperator(com.google.javascript.rhino.Node n) {\n        if (!late) {\n            return n;\n        }\n        com.google.common.base.Preconditions.checkArgument(com.google.javascript.jscomp.NodeUtil.isAssociative(n.getType()));\n        com.google.javascript.rhino.Node rhs = n.getLastChild();\n        if (n.getType() == rhs.getType()) {\n            com.google.javascript.rhino.Node parent = n.getParent();\n            com.google.javascript.rhino.Node first = n.getFirstChild().detachFromParent();\n            com.google.javascript.rhino.Node second = rhs.getFirstChild().detachFromParent();\n            com.google.javascript.rhino.Node third = rhs.getLastChild().detachFromParent();\n            com.google.javascript.rhino.Node newLhs = new com.google.javascript.rhino.Node(n.getType(), first, second).copyInformationFrom(n);\n            com.google.javascript.rhino.Node newRoot = new com.google.javascript.rhino.Node(rhs.getType(), newLhs, third).copyInformationFrom(rhs);\n            parent.replaceChild(n, newRoot);\n            reportCodeChange();\n            return newRoot;\n        }\n        return n;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldSimpleFunctionCall(com.google.javascript.rhino.Node n) {\n        com.google.common.base.Preconditions.checkState(n.isCall());\n        com.google.javascript.rhino.Node callTarget = n.getFirstChild();\n        if (((callTarget != null) && callTarget.isName()) && callTarget.getString().equals(\"String\")) {\n            com.google.javascript.rhino.Node value = callTarget.getNext();\n            if (((value != null) && (value.getNext() == null)) && com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {\n                com.google.javascript.rhino.Node addition = com.google.javascript.rhino.IR.add(com.google.javascript.rhino.IR.string(\"\").srcref(callTarget), value.detachFromParent());\n                n.getParent().replaceChild(n, addition);\n                reportCodeChange();\n                return addition;\n            }\n        }\n        return n;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldImmediateCallToBoundFunction(com.google.javascript.rhino.Node n) {\n        com.google.common.base.Preconditions.checkState(n.isCall());\n        com.google.javascript.rhino.Node callTarget = n.getFirstChild();\n        com.google.javascript.jscomp.CodingConvention.Bind bind = getCodingConvention().describeFunctionBind(callTarget, false);\n        if (bind != null) {\n            bind.target.detachFromParent();\n            n.replaceChild(callTarget, bind.target);\n            callTarget = bind.target;\n            addParameterAfter(bind.parameters, callTarget);\n            if ((bind.thisValue != null) && (!com.google.javascript.jscomp.NodeUtil.isUndefined(bind.thisValue))) {\n                com.google.javascript.rhino.Node newCallTarget = com.google.javascript.rhino.IR.getprop(callTarget.cloneTree(), com.google.javascript.rhino.IR.string(\"call\").srcref(callTarget));\n                n.replaceChild(callTarget, newCallTarget);\n                n.addChildAfter(bind.thisValue.cloneTree(), newCallTarget);\n                n.putBooleanProp(Node.FREE_CALL, false);\n            } else {\n                n.putBooleanProp(Node.FREE_CALL, true);\n            }\n            reportCodeChange();\n        }\n        return n;\n    }\n\n    private void addParameterAfter(com.google.javascript.rhino.Node parameterList, com.google.javascript.rhino.Node after) {\n        if (parameterList != null) {\n            addParameterAfter(parameterList.getNext(), after);\n            after.getParent().addChildAfter(parameterList.cloneTree(), after);\n        }\n    }\n\n    private com.google.javascript.rhino.Node trySplitComma(com.google.javascript.rhino.Node n) {\n        if (late) {\n            return n;\n        }\n        com.google.javascript.rhino.Node parent = n.getParent();\n        com.google.javascript.rhino.Node left = n.getFirstChild();\n        com.google.javascript.rhino.Node right = n.getLastChild();\n        if (parent.isExprResult() && (!parent.getParent().isLabel())) {\n            n.detachChildren();\n            parent.replaceChild(n, left);\n            com.google.javascript.rhino.Node newStatement = com.google.javascript.rhino.IR.exprResult(right);\n            newStatement.copyInformationFrom(n);\n            parent.getParent().addChildAfter(newStatement, parent);\n            reportCodeChange();\n            return left;\n        } else {\n            return n;\n        }\n    }\n\n    private com.google.javascript.rhino.Node tryReplaceUndefined(com.google.javascript.rhino.Node n) {\n        if ((isASTNormalized() && com.google.javascript.jscomp.NodeUtil.isUndefined(n)) && (!com.google.javascript.jscomp.NodeUtil.isLValue(n))) {\n            com.google.javascript.rhino.Node replacement = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(n);\n            n.getParent().replaceChild(n, replacement);\n            reportCodeChange();\n            return replacement;\n        }\n        return n;\n    }\n\n    private com.google.javascript.rhino.Node tryReduceReturn(com.google.javascript.rhino.Node n) {\n        com.google.javascript.rhino.Node result = n.getFirstChild();\n        if (result != null) {\n            switch (result.getType()) {\n                case com.google.javascript.rhino.Token.VOID :\n                    com.google.javascript.rhino.Node operand = result.getFirstChild();\n                    if (!mayHaveSideEffects(operand)) {\n                        n.removeFirstChild();\n                        reportCodeChange();\n                    }\n                    break;\n                case com.google.javascript.rhino.Token.NAME :\n                    java.lang.String name = result.getString();\n                    if (name.equals(\"undefined\")) {\n                        n.removeFirstChild();\n                        reportCodeChange();\n                    }\n                    break;\n            }\n        }\n        return n;\n    }\n\n    private static final com.google.common.collect.ImmutableSet<java.lang.String> STANDARD_OBJECT_CONSTRUCTORS = com.google.common.collect.ImmutableSet.of(\"Object\", \"Array\", \"RegExp\", \"Error\");\n\n    private com.google.javascript.rhino.Node tryFoldStandardConstructors(com.google.javascript.rhino.Node n) {\n        com.google.common.base.Preconditions.checkState(n.isNew());\n        if (isASTNormalized()) {\n            if (n.getFirstChild().isName()) {\n                java.lang.String className = n.getFirstChild().getString();\n                if (com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.STANDARD_OBJECT_CONSTRUCTORS.contains(className)) {\n                    n.setType(Token.CALL);\n                    n.putBooleanProp(Node.FREE_CALL, true);\n                    reportCodeChange();\n                }\n            }\n        }\n        return n;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldLiteralConstructor(com.google.javascript.rhino.Node n) {\n        com.google.common.base.Preconditions.checkArgument(n.isCall() || n.isNew());\n        com.google.javascript.rhino.Node constructorNameNode = n.getFirstChild();\n        com.google.javascript.rhino.Node newLiteralNode = null;\n        if (isASTNormalized() && (com.google.javascript.rhino.Token.NAME == constructorNameNode.getType())) {\n            java.lang.String className = constructorNameNode.getString();\n            if (\"RegExp\".equals(className)) {\n                return tryFoldRegularExpressionConstructor(n);\n            } else {\n                boolean constructorHasArgs = constructorNameNode.getNext() != null;\n                if (\"Object\".equals(className) && (!constructorHasArgs)) {\n                    newLiteralNode = com.google.javascript.rhino.IR.objectlit();\n                } else if (\"Array\".equals(className)) {\n                    com.google.javascript.rhino.Node arg0 = constructorNameNode.getNext();\n                    com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.FoldArrayAction action = com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.isSafeToFoldArrayConstructor(arg0);\n                    if ((action == com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS) || (action == com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS)) {\n                        newLiteralNode = com.google.javascript.rhino.IR.arraylit();\n                        n.removeChildren();\n                        if (action == com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS) {\n                            newLiteralNode.addChildrenToFront(arg0);\n                        }\n                    }\n                }\n                if (newLiteralNode != null) {\n                    n.getParent().replaceChild(n, newLiteralNode);\n                    reportCodeChange();\n                    return newLiteralNode;\n                }\n            }\n        }\n        return n;\n    }\n\n    private static enum FoldArrayAction {\n\n        NOT_SAFE_TO_FOLD,\n        SAFE_TO_FOLD_WITH_ARGS,\n        SAFE_TO_FOLD_WITHOUT_ARGS;}\n\n    private static com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.FoldArrayAction isSafeToFoldArrayConstructor(com.google.javascript.rhino.Node arg) {\n        com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.FoldArrayAction action = com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.FoldArrayAction.NOT_SAFE_TO_FOLD;\n        if (arg == null) {\n            action = com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;\n        } else if (arg.getNext() != null) {\n            action = com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;\n        } else {\n            switch (arg.getType()) {\n                case com.google.javascript.rhino.Token.STRING :\n                    action = com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;\n                    break;\n                case com.google.javascript.rhino.Token.NUMBER :\n                    if (arg.getDouble() == 0) {\n                        action = com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;\n                    }\n                    break;\n                case com.google.javascript.rhino.Token.ARRAYLIT :\n                    action = com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;\n                    break;\n                default :\n            }\n        }\n        return action;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldRegularExpressionConstructor(com.google.javascript.rhino.Node n) {\n        com.google.javascript.rhino.Node parent = n.getParent();\n        com.google.javascript.rhino.Node constructor = n.getFirstChild();\n        com.google.javascript.rhino.Node pattern = constructor.getNext();\n        com.google.javascript.rhino.Node flags = (null != pattern) ? pattern.getNext() : null;\n        if ((null == pattern) || ((null != flags) && (null != flags.getNext()))) {\n            return n;\n        }\n        if ((((pattern.isString() && (!\"\".equals(pattern.getString()))) && (pattern.getString().length() < 100)) && ((null == flags) || flags.isString())) && (isEcmaScript5OrGreater() || (!com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.containsUnicodeEscape(pattern.getString())))) {\n            pattern = com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.makeForwardSlashBracketSafe(pattern);\n            com.google.javascript.rhino.Node regexLiteral;\n            if ((null == flags) || \"\".equals(flags.getString())) {\n                regexLiteral = com.google.javascript.rhino.IR.regexp(pattern);\n            } else {\n                if (!com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.areValidRegexpFlags(flags.getString())) {\n                    report(com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.INVALID_REGULAR_EXPRESSION_FLAGS, flags);\n                    return n;\n                }\n                if (!areSafeFlagsToFold(flags.getString())) {\n                    return n;\n                }\n                n.removeChild(flags);\n                regexLiteral = com.google.javascript.rhino.IR.regexp(pattern, flags);\n            }\n            parent.replaceChild(n, regexLiteral);\n            reportCodeChange();\n            return regexLiteral;\n        }\n        return n;\n    }\n\n    private com.google.javascript.rhino.Node reduceTrueFalse(com.google.javascript.rhino.Node n) {\n        if (late) {\n            com.google.javascript.rhino.Node not = com.google.javascript.rhino.IR.not(com.google.javascript.rhino.IR.number(n.isTrue() ? 0 : 1));\n            not.copyInformationFromForTree(n);\n            n.getParent().replaceChild(n, not);\n            reportCodeChange();\n            return not;\n        }\n        return n;\n    }\n\n    private com.google.javascript.rhino.Node tryMinimizeArrayLiteral(com.google.javascript.rhino.Node n) {\n        boolean allStrings = true;\n        for (com.google.javascript.rhino.Node cur = n.getFirstChild(); cur != null; cur = cur.getNext()) {\n            if (!cur.isString()) {\n                allStrings = false;\n            }\n        }\n        if (allStrings) {\n            return tryMinimizeStringArrayLiteral(n);\n        } else {\n            return n;\n        }\n    }\n\n    private com.google.javascript.rhino.Node tryMinimizeStringArrayLiteral(com.google.javascript.rhino.Node n) {\n        if (!late) {\n            return n;\n        }\n        int numElements = n.getChildCount();\n        int saving = (numElements * 2) - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.STRING_SPLIT_OVERHEAD;\n        if (saving <= 0) {\n            return n;\n        }\n        java.lang.String[] strings = new java.lang.String[n.getChildCount()];\n        int idx = 0;\n        for (com.google.javascript.rhino.Node cur = n.getFirstChild(); cur != null; cur = cur.getNext()) {\n            strings[idx++] = cur.getString();\n        }\n        java.lang.String delimiter = com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.pickDelimiter(strings);\n        if (delimiter != null) {\n            java.lang.String template = com.google.common.base.Joiner.on(delimiter).join(strings);\n            com.google.javascript.rhino.Node call = com.google.javascript.rhino.IR.call(com.google.javascript.rhino.IR.getprop(com.google.javascript.rhino.IR.string(template), com.google.javascript.rhino.IR.string(\"split\")), com.google.javascript.rhino.IR.string(\"\" + delimiter));\n            call.copyInformationFromForTree(n);\n            n.getParent().replaceChild(n, call);\n            reportCodeChange();\n            return call;\n        }\n        return n;\n    }\n\n    private static java.lang.String pickDelimiter(java.lang.String[] strings) {\n        boolean allLength1 = true;\n        for (java.lang.String s : strings) {\n            if (s.length() != 1) {\n                allLength1 = false;\n                break;\n            }\n        }\n        if (allLength1) {\n            return \"\";\n        }\n        java.lang.String[] delimiters = new java.lang.String[]{ \" \", \";\", \",\", \"{\", \"}\", null };\n        int i = 0;\n        NEXT_DELIMITER : for (; delimiters[i] != null; i++) {\n            for (java.lang.String cur : strings) {\n                if (cur.contains(delimiters[i])) {\n                    continue NEXT_DELIMITER;\n                }\n            }\n            break;\n        }\n        return delimiters[i];\n    }\n\n    private static final java.util.regex.Pattern REGEXP_FLAGS_RE = java.util.regex.Pattern.compile(\"^[gmi]*$\");\n\n    private static boolean areValidRegexpFlags(java.lang.String flags) {\n        return com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.REGEXP_FLAGS_RE.matcher(flags).matches();\n    }\n\n    private boolean areSafeFlagsToFold(java.lang.String flags) {\n        return isEcmaScript5OrGreater() || (flags.indexOf('g') < 0);\n    }\n\n    private static com.google.javascript.rhino.Node makeForwardSlashBracketSafe(com.google.javascript.rhino.Node n) {\n        java.lang.String s = n.getString();\n        java.lang.StringBuilder sb = null;\n        int pos = 0;\n        boolean isEscaped = false;\n        boolean inCharset = false;\n        for (int i = 0; i < s.length(); ++i) {\n            char ch = s.charAt(i);\n            switch (ch) {\n                case '\\\\' :\n                    isEscaped = !isEscaped;\n                    continue;\n                case '/' :\n                    if ((!isEscaped) && (!inCharset)) {\n                        if (null == sb) {\n                            sb = new java.lang.StringBuilder(s.length() + 16);\n                        }\n                        sb.append(s, pos, i).append('\\\\');\n                        pos = i;\n                    }\n                    break;\n                case '[' :\n                    if (!isEscaped) {\n                        inCharset = true;\n                    }\n                    break;\n                case ']' :\n                    if (!isEscaped) {\n                        inCharset = false;\n                    }\n                    break;\n                case '\\r' :\n                case '\\n' :\n                case '\u2028' :\n                case '\u2029' :\n                    if (null == sb) {\n                        sb = new java.lang.StringBuilder(s.length() + 16);\n                    }\n                    if (isEscaped) {\n                        sb.append(s, pos, i - 1);\n                    } else {\n                        sb.append(s, pos, i);\n                    }\n                    switch (ch) {\n                        case '\\r' :\n                            sb.append(\"\\\\r\");\n                            break;\n                        case '\\n' :\n                            sb.append(\"\\\\n\");\n                            break;\n                        case '\u2028' :\n                            sb.append(\"\\\\u2028\");\n                            break;\n                        case '\u2029' :\n                            sb.append(\"\\\\u2029\");\n                            break;\n                    }\n                    pos = i + 1;\n                    break;\n            }\n            isEscaped = false;\n        }\n        if (null == sb) {\n            return n.cloneTree();\n        }\n        sb.append(s, pos, s.length());\n        return com.google.javascript.rhino.IR.string(sb.toString()).srcref(n);\n    }\n\n    static boolean containsUnicodeEscape(java.lang.String s) {\n        java.lang.String esc = com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.REGEXP_ESCAPER.regexpEscape(s);\n        for (int i = -1; (i = esc.indexOf(\"\\\\u\", i + 1)) >= 0;) {\n            int nSlashes = 0;\n            while (((i - nSlashes) > 0) && ('\\\\' == esc.charAt((i - nSlashes) - 1))) {\n                ++nSlashes;\n            } \n            if (0 == (nSlashes & 1)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "PeepholeSubstituteAlternateSyntax"
    }
  ],
  "id": "Closure_173"
}