{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "@org.kohsuke.args4j.Option(name = \"--version\", usage = \"Prints the compiler version to stderr.\")\nprivate boolean version = false;",
            "src_parent": "private static class Flags {\n    @org.kohsuke.args4j.Option(name = \"--help\", usage = \"Displays this message\")\n    private boolean display_help = false;\n\n    @org.kohsuke.args4j.Option(name = \"--print_tree\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints out the parse tree and exits\")\n    private boolean print_tree = false;\n\n    @org.kohsuke.args4j.Option(name = \"--compute_phase_ordering\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Runs the compile job many times, then prints out the \" + \"best phase ordering from this run\")\n    private boolean compute_phase_ordering = false;\n\n    @org.kohsuke.args4j.Option(name = \"--print_ast\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints a dot file describing the internal abstract syntax\" + \" tree and exits\")\n    private boolean print_ast = false;\n\n    @org.kohsuke.args4j.Option(name = \"--print_pass_graph\", usage = \"Prints a dot file describing the passes that will get run\" + \" and exits\")\n    private boolean print_pass_graph = false;\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_dev_mode\", usage = \"Turns on extra sanity checks\", aliases = { \"--dev_mode\" })\n    private CompilerOptions.DevMode jscomp_dev_mode = CompilerOptions.DevMode.OFF;\n\n    @org.kohsuke.args4j.Option(name = \"--logging_level\", usage = \"The logging level (standard java.util.logging.Level\" + (\" values) for Compiler progress. Does not control errors or\" + \" warnings for the JavaScript code under compilation\"))\n    private java.lang.String logging_level = java.util.logging.Level.WARNING.getName();\n\n    @org.kohsuke.args4j.Option(name = \"--externs\", usage = \"The file containing javascript externs. You may specify\" + \" multiple\")\n    private java.util.List<java.lang.String> externs = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--js\", usage = \"The javascript filename. You may specify multiple\")\n    private java.util.List<java.lang.String> js = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--js_output_file\", usage = \"Primary output filename. If not specified, output is \" + \"written to stdout\")\n    private java.lang.String js_output_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--module\", usage = \"A javascript module specification. The format is \" + ((((\"<name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be \" + \"unique. Each dep is the name of a module that this module \") + \"depends on. Modules must be listed in dependency order, and js \") + \"source files must be listed in the corresponding order. Where \") + \"--module flags occur in relation to --js flags is unimportant\"))\n    private java.util.List<java.lang.String> module = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--variable_map_input_file\", usage = \"File containing the serialized version of the variable \" + \"renaming map produced by a previous compilation\")\n    private java.lang.String variable_map_input_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--property_map_input_file\", usage = \"File containing the serialized version of the property \" + \"renaming map produced by a previous compilation\")\n    private java.lang.String property_map_input_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--variable_map_output_file\", usage = \"File where the serialized version of the variable \" + \"renaming map produced should be saved\")\n    private java.lang.String variable_map_output_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--create_name_map_files\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"If true, variable renaming and property renaming map \" + (((\"files will be produced as {binary name}_vars_map.out and \" + \"{binary name}_props_map.out. Note that this flag cannot be used \") + \"in conjunction with either variable_map_output_file or \") + \"property_map_output_file\"))\n    private boolean create_name_map_files = false;\n\n    @org.kohsuke.args4j.Option(name = \"--property_map_output_file\", usage = \"File where the serialized version of the property \" + \"renaming map produced should be saved\")\n    private java.lang.String property_map_output_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--third_party\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Check source validity but do not enforce Closure style \" + \"rules and conventions\")\n    private boolean third_party = false;\n\n    @org.kohsuke.args4j.Option(name = \"--summary_detail_level\", usage = \"Controls how detailed the compilation summary is. Values:\" + (((\" 0 (never print summary), 1 (print summary only if there are \" + \"errors or warnings), 2 (print summary if type checking is on, \") + \"see --check_types), 3 (always print summary). The default level \") + \"is 1\"))\n    private int summary_detail_level = 1;\n\n    @org.kohsuke.args4j.Option(name = \"--output_wrapper\", usage = \"Interpolate output into this string at the place denoted\" + \" by the marker token %output%. See --output_wrapper_marker\")\n    private java.lang.String output_wrapper = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--output_wrapper_marker\", usage = \"Use this token as output marker in the value of\" + \" --output_wrapper\")\n    private java.lang.String output_wrapper_marker = \"%output%\";\n\n    @org.kohsuke.args4j.Option(name = \"--module_wrapper\", usage = \"An output wrapper for a javascript module (optional). \" + ((\"The format is <name>:<wrapper>. The module name must correspond \" + \"with a module specified using --module. The wrapper must \") + \"contain %s as the code placeholder\"))\n    private java.util.List<java.lang.String> module_wrapper = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--module_output_path_prefix\", usage = \"Prefix for filenames of compiled js modules. \" + (\"<module-name>.js will be appended to this prefix. Directories \" + \"will be created as needed. Use with --module\"))\n    private java.lang.String module_output_path_prefix = \"./\";\n\n    @org.kohsuke.args4j.Option(name = \"--create_source_map\", usage = \"If specified, a source map file mapping the generated \" + (((\"source files back to the original source file will be \" + \"output to the specified path. The %outname% placeholder will \") + \"expand to the name of the output file that the source map \") + \"corresponds to.\"))\n    private java.lang.String create_source_map = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_error\", usage = \"Make the named class of warnings an error. Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private java.util.List<java.lang.String> jscomp_error = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_warning\", usage = (\"Make the named class of warnings a normal warning. \" + \"Options:\") + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private java.util.List<java.lang.String> jscomp_warning = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_off\", usage = \"Turn off the named class of warnings. Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private java.util.List<java.lang.String> jscomp_off = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--define\", aliases = { \"--D\", \"-D\" }, usage = \"Override the value of a variable annotated @define. \" + (((\"The format is <name>[=<val>], where <name> is the name of a @define \" + \"variable and <val> is a boolean, number, or a single-quoted string \") + \"that contains no single quotes. If [=<val>] is omitted, \") + \"the variable is marked true\"))\n    private java.util.List<java.lang.String> define = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--charset\", usage = \"Input and output charset for all files. By default, we \" + \"accept UTF-8 as input and output US_ASCII\")\n    private java.lang.String charset = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--compilation_level\", usage = \"Specifies the compilation level to use. Options: \" + \"WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS\")\n    private com.google.javascript.jscomp.CompilationLevel compilation_level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n\n    @org.kohsuke.args4j.Option(name = \"--warning_level\", usage = \"Specifies the warning level to use. Options: \" + \"QUIET, DEFAULT, VERBOSE\")\n    private com.google.javascript.jscomp.WarningLevel warning_level = WarningLevel.DEFAULT;\n\n    @org.kohsuke.args4j.Option(name = \"--use_only_custom_externs\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Specifies whether the default externs should be excluded\")\n    private boolean use_only_custom_externs = false;\n\n    @org.kohsuke.args4j.Option(name = \"--debug\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Enable debugging options\")\n    private boolean debug = false;\n\n    @org.kohsuke.args4j.Option(name = \"--formatting\", usage = \"Specifies which formatting options, if any, should be \" + (\"applied to the output JS. Options: \" + \"PRETTY_PRINT, PRINT_INPUT_DELIMITER\"))\n    private java.util.List<com.google.javascript.jscomp.CommandLineRunner.FormattingOption> formatting = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--process_closure_primitives\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Processes built-ins from the Closure library, such as \" + \"goog.require(), goog.provide(), and goog.exportSymbol()\")\n    private boolean process_closure_primitives = true;\n\n    @org.kohsuke.args4j.Option(name = \"--manage_closure_dependencies\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Automatically sort dependencies so that a file that \" + (((\"goog.provides symbol X will always come before a file that \" + \"goog.requires symbol X. If an input provides symbols, and \") + \"those symbols are never required, then that input will not \") + \"be included in the compilation.\"))\n    private boolean manage_closure_dependencies = false;\n\n    @org.kohsuke.args4j.Option(name = \"--output_manifest\", usage = \"Prints out a list of all the files in the compilation. \" + ((((\"If --manage_closure_dependencies is on, this will not include \" + \"files that got dropped because they were not required. \") + \"The %outname% placeholder expands to the js output file. \") + \"If you're using modularization, using %outname% will create \") + \"a manifest for each module.\"))\n    private java.lang.String output_manifest = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--version\", usage = \"Prints the compiler version to stderr.\")\n    private boolean version = false;\n\n    public static class BooleanOptionHandler extends org.kohsuke.args4j.spi.OptionHandler<java.lang.Boolean> {\n        private static final java.util.Set<java.lang.String> TRUES = com.google.common.collect.Sets.newHashSet(\"true\", \"on\", \"yes\", \"1\");\n\n        private static final java.util.Set<java.lang.String> FALSES = com.google.common.collect.Sets.newHashSet(\"false\", \"off\", \"no\", \"0\");\n\n        public BooleanOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.Boolean> setter) {\n            super(parser, option, setter);\n        }\n\n        @java.lang.Override\n        public int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException {\n            java.lang.String param = params.getParameter(0);\n            if (param == null) {\n                setter.addValue(true);\n                return 0;\n            } else {\n                java.lang.String lowerParam = param.toLowerCase();\n                if (com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.TRUES.contains(lowerParam)) {\n                    setter.addValue(true);\n                } else if (com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.FALSES.contains(lowerParam)) {\n                    setter.addValue(false);\n                } else {\n                    throw new org.kohsuke.args4j.CmdLineException(owner, \"Illegal boolean value: \" + lowerParam);\n                }\n                return 1;\n            }\n        }\n\n        @java.lang.Override\n        public java.lang.String getDefaultMetaVariable() {\n            return null;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private static final java.lang.String configResource = \"com.google.javascript.jscomp.parsing.ParserConfig\";",
            "src_parent": "public class CommandLineRunner extends com.google.javascript.jscomp.AbstractCommandLineRunner<java.lang.Compiler, com.google.javascript.jscomp.CompilerOptions> {\n    private static class Flags {\n        @org.kohsuke.args4j.Option(name = \"--help\", usage = \"Displays this message\")\n        private boolean display_help = false;\n\n        @org.kohsuke.args4j.Option(name = \"--print_tree\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints out the parse tree and exits\")\n        private boolean print_tree = false;\n\n        @org.kohsuke.args4j.Option(name = \"--compute_phase_ordering\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Runs the compile job many times, then prints out the \" + \"best phase ordering from this run\")\n        private boolean compute_phase_ordering = false;\n\n        @org.kohsuke.args4j.Option(name = \"--print_ast\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints a dot file describing the internal abstract syntax\" + \" tree and exits\")\n        private boolean print_ast = false;\n\n        @org.kohsuke.args4j.Option(name = \"--print_pass_graph\", usage = \"Prints a dot file describing the passes that will get run\" + \" and exits\")\n        private boolean print_pass_graph = false;\n\n        @org.kohsuke.args4j.Option(name = \"--jscomp_dev_mode\", usage = \"Turns on extra sanity checks\", aliases = { \"--dev_mode\" })\n        private CompilerOptions.DevMode jscomp_dev_mode = CompilerOptions.DevMode.OFF;\n\n        @org.kohsuke.args4j.Option(name = \"--logging_level\", usage = \"The logging level (standard java.util.logging.Level\" + (\" values) for Compiler progress. Does not control errors or\" + \" warnings for the JavaScript code under compilation\"))\n        private java.lang.String logging_level = java.util.logging.Level.WARNING.getName();\n\n        @org.kohsuke.args4j.Option(name = \"--externs\", usage = \"The file containing javascript externs. You may specify\" + \" multiple\")\n        private java.util.List<java.lang.String> externs = com.google.common.collect.Lists.newArrayList();\n\n        @org.kohsuke.args4j.Option(name = \"--js\", usage = \"The javascript filename. You may specify multiple\")\n        private java.util.List<java.lang.String> js = com.google.common.collect.Lists.newArrayList();\n\n        @org.kohsuke.args4j.Option(name = \"--js_output_file\", usage = \"Primary output filename. If not specified, output is \" + \"written to stdout\")\n        private java.lang.String js_output_file = \"\";\n\n        @org.kohsuke.args4j.Option(name = \"--module\", usage = \"A javascript module specification. The format is \" + ((((\"<name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be \" + \"unique. Each dep is the name of a module that this module \") + \"depends on. Modules must be listed in dependency order, and js \") + \"source files must be listed in the corresponding order. Where \") + \"--module flags occur in relation to --js flags is unimportant\"))\n        private java.util.List<java.lang.String> module = com.google.common.collect.Lists.newArrayList();\n\n        @org.kohsuke.args4j.Option(name = \"--variable_map_input_file\", usage = \"File containing the serialized version of the variable \" + \"renaming map produced by a previous compilation\")\n        private java.lang.String variable_map_input_file = \"\";\n\n        @org.kohsuke.args4j.Option(name = \"--property_map_input_file\", usage = \"File containing the serialized version of the property \" + \"renaming map produced by a previous compilation\")\n        private java.lang.String property_map_input_file = \"\";\n\n        @org.kohsuke.args4j.Option(name = \"--variable_map_output_file\", usage = \"File where the serialized version of the variable \" + \"renaming map produced should be saved\")\n        private java.lang.String variable_map_output_file = \"\";\n\n        @org.kohsuke.args4j.Option(name = \"--create_name_map_files\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"If true, variable renaming and property renaming map \" + (((\"files will be produced as {binary name}_vars_map.out and \" + \"{binary name}_props_map.out. Note that this flag cannot be used \") + \"in conjunction with either variable_map_output_file or \") + \"property_map_output_file\"))\n        private boolean create_name_map_files = false;\n\n        @org.kohsuke.args4j.Option(name = \"--property_map_output_file\", usage = \"File where the serialized version of the property \" + \"renaming map produced should be saved\")\n        private java.lang.String property_map_output_file = \"\";\n\n        @org.kohsuke.args4j.Option(name = \"--third_party\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Check source validity but do not enforce Closure style \" + \"rules and conventions\")\n        private boolean third_party = false;\n\n        @org.kohsuke.args4j.Option(name = \"--summary_detail_level\", usage = \"Controls how detailed the compilation summary is. Values:\" + (((\" 0 (never print summary), 1 (print summary only if there are \" + \"errors or warnings), 2 (print summary if type checking is on, \") + \"see --check_types), 3 (always print summary). The default level \") + \"is 1\"))\n        private int summary_detail_level = 1;\n\n        @org.kohsuke.args4j.Option(name = \"--output_wrapper\", usage = \"Interpolate output into this string at the place denoted\" + \" by the marker token %output%. See --output_wrapper_marker\")\n        private java.lang.String output_wrapper = \"\";\n\n        @org.kohsuke.args4j.Option(name = \"--output_wrapper_marker\", usage = \"Use this token as output marker in the value of\" + \" --output_wrapper\")\n        private java.lang.String output_wrapper_marker = \"%output%\";\n\n        @org.kohsuke.args4j.Option(name = \"--module_wrapper\", usage = \"An output wrapper for a javascript module (optional). \" + ((\"The format is <name>:<wrapper>. The module name must correspond \" + \"with a module specified using --module. The wrapper must \") + \"contain %s as the code placeholder\"))\n        private java.util.List<java.lang.String> module_wrapper = com.google.common.collect.Lists.newArrayList();\n\n        @org.kohsuke.args4j.Option(name = \"--module_output_path_prefix\", usage = \"Prefix for filenames of compiled js modules. \" + (\"<module-name>.js will be appended to this prefix. Directories \" + \"will be created as needed. Use with --module\"))\n        private java.lang.String module_output_path_prefix = \"./\";\n\n        @org.kohsuke.args4j.Option(name = \"--create_source_map\", usage = \"If specified, a source map file mapping the generated \" + (((\"source files back to the original source file will be \" + \"output to the specified path. The %outname% placeholder will \") + \"expand to the name of the output file that the source map \") + \"corresponds to.\"))\n        private java.lang.String create_source_map = \"\";\n\n        @org.kohsuke.args4j.Option(name = \"--jscomp_error\", usage = \"Make the named class of warnings an error. Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n        private java.util.List<java.lang.String> jscomp_error = com.google.common.collect.Lists.newArrayList();\n\n        @org.kohsuke.args4j.Option(name = \"--jscomp_warning\", usage = (\"Make the named class of warnings a normal warning. \" + \"Options:\") + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n        private java.util.List<java.lang.String> jscomp_warning = com.google.common.collect.Lists.newArrayList();\n\n        @org.kohsuke.args4j.Option(name = \"--jscomp_off\", usage = \"Turn off the named class of warnings. Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n        private java.util.List<java.lang.String> jscomp_off = com.google.common.collect.Lists.newArrayList();\n\n        @org.kohsuke.args4j.Option(name = \"--define\", aliases = { \"--D\", \"-D\" }, usage = \"Override the value of a variable annotated @define. \" + (((\"The format is <name>[=<val>], where <name> is the name of a @define \" + \"variable and <val> is a boolean, number, or a single-quoted string \") + \"that contains no single quotes. If [=<val>] is omitted, \") + \"the variable is marked true\"))\n        private java.util.List<java.lang.String> define = com.google.common.collect.Lists.newArrayList();\n\n        @org.kohsuke.args4j.Option(name = \"--charset\", usage = \"Input and output charset for all files. By default, we \" + \"accept UTF-8 as input and output US_ASCII\")\n        private java.lang.String charset = \"\";\n\n        @org.kohsuke.args4j.Option(name = \"--compilation_level\", usage = \"Specifies the compilation level to use. Options: \" + \"WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS\")\n        private com.google.javascript.jscomp.CompilationLevel compilation_level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n\n        @org.kohsuke.args4j.Option(name = \"--warning_level\", usage = \"Specifies the warning level to use. Options: \" + \"QUIET, DEFAULT, VERBOSE\")\n        private com.google.javascript.jscomp.WarningLevel warning_level = WarningLevel.DEFAULT;\n\n        @org.kohsuke.args4j.Option(name = \"--use_only_custom_externs\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Specifies whether the default externs should be excluded\")\n        private boolean use_only_custom_externs = false;\n\n        @org.kohsuke.args4j.Option(name = \"--debug\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Enable debugging options\")\n        private boolean debug = false;\n\n        @org.kohsuke.args4j.Option(name = \"--formatting\", usage = \"Specifies which formatting options, if any, should be \" + (\"applied to the output JS. Options: \" + \"PRETTY_PRINT, PRINT_INPUT_DELIMITER\"))\n        private java.util.List<com.google.javascript.jscomp.CommandLineRunner.FormattingOption> formatting = com.google.common.collect.Lists.newArrayList();\n\n        @org.kohsuke.args4j.Option(name = \"--process_closure_primitives\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Processes built-ins from the Closure library, such as \" + \"goog.require(), goog.provide(), and goog.exportSymbol()\")\n        private boolean process_closure_primitives = true;\n\n        @org.kohsuke.args4j.Option(name = \"--manage_closure_dependencies\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Automatically sort dependencies so that a file that \" + (((\"goog.provides symbol X will always come before a file that \" + \"goog.requires symbol X. If an input provides symbols, and \") + \"those symbols are never required, then that input will not \") + \"be included in the compilation.\"))\n        private boolean manage_closure_dependencies = false;\n\n        @org.kohsuke.args4j.Option(name = \"--output_manifest\", usage = \"Prints out a list of all the files in the compilation. \" + ((((\"If --manage_closure_dependencies is on, this will not include \" + \"files that got dropped because they were not required. \") + \"The %outname% placeholder expands to the js output file. \") + \"If you're using modularization, using %outname% will create \") + \"a manifest for each module.\"))\n        private java.lang.String output_manifest = \"\";\n\n        @org.kohsuke.args4j.Option(name = \"--version\", usage = \"Prints the compiler version to stderr.\")\n        private boolean version = false;\n\n        public static class BooleanOptionHandler extends org.kohsuke.args4j.spi.OptionHandler<java.lang.Boolean> {\n            private static final java.util.Set<java.lang.String> TRUES = com.google.common.collect.Sets.newHashSet(\"true\", \"on\", \"yes\", \"1\");\n\n            private static final java.util.Set<java.lang.String> FALSES = com.google.common.collect.Sets.newHashSet(\"false\", \"off\", \"no\", \"0\");\n\n            public BooleanOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.Boolean> setter) {\n                super(parser, option, setter);\n            }\n\n            @java.lang.Override\n            public int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException {\n                java.lang.String param = params.getParameter(0);\n                if (param == null) {\n                    setter.addValue(true);\n                    return 0;\n                } else {\n                    java.lang.String lowerParam = param.toLowerCase();\n                    if (com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.TRUES.contains(lowerParam)) {\n                        setter.addValue(true);\n                    } else if (com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.FALSES.contains(lowerParam)) {\n                        setter.addValue(false);\n                    } else {\n                        throw new org.kohsuke.args4j.CmdLineException(owner, \"Illegal boolean value: \" + lowerParam);\n                    }\n                    return 1;\n                }\n            }\n\n            @java.lang.Override\n            public java.lang.String getDefaultMetaVariable() {\n                return null;\n            }\n        }\n    }\n\n    private static enum FormattingOption {\n\n        PRETTY_PRINT,\n        PRINT_INPUT_DELIMITER;\n        private void applyToOptions(com.google.javascript.jscomp.CompilerOptions options) {\n            switch (this) {\n                case PRETTY_PRINT :\n                    options.prettyPrint = true;\n                    break;\n                case PRINT_INPUT_DELIMITER :\n                    options.printInputDelimiter = true;\n                    break;\n                default :\n                    throw new java.lang.RuntimeException(\"Unknown formatting option: \" + this);\n            }\n        }\n    }\n\n    private final com.google.javascript.jscomp.CommandLineRunner.Flags flags = new com.google.javascript.jscomp.CommandLineRunner.Flags();\n\n    private static final java.lang.String configResource = \"com.google.javascript.jscomp.parsing.ParserConfig\";\n\n    private boolean isConfigValid = false;\n\n    protected CommandLineRunner(java.lang.String[] args) {\n        super();\n        initConfigFromFlags(args, java.lang.System.err);\n    }\n\n    protected CommandLineRunner(java.lang.String[] args, java.io.PrintStream out, java.io.PrintStream err) {\n        super(out, err);\n        initConfigFromFlags(args, err);\n    }\n\n    private void initConfigFromFlags(java.lang.String[] args, java.io.PrintStream err) {\n        java.util.regex.Pattern argPattern = java.util.regex.Pattern.compile(\"(--[a-zA-Z_]+)=(.*)\");\n        java.util.regex.Pattern quotesPattern = java.util.regex.Pattern.compile(\"^[\\'\\\"](.*)[\\'\\\"]$\");\n        java.util.List<java.lang.String> processedArgs = com.google.common.collect.Lists.newArrayList();\n        for (java.lang.String arg : args) {\n            java.util.regex.Matcher matcher = argPattern.matcher(arg);\n            if (matcher.matches()) {\n                processedArgs.add(matcher.group(1));\n                java.lang.String value = matcher.group(2);\n                java.util.regex.Matcher quotesMatcher = quotesPattern.matcher(value);\n                if (quotesMatcher.matches()) {\n                    processedArgs.add(quotesMatcher.group(1));\n                } else {\n                    processedArgs.add(value);\n                }\n            } else {\n                processedArgs.add(arg);\n            }\n        }\n        org.kohsuke.args4j.CmdLineParser parser = new org.kohsuke.args4j.CmdLineParser(flags);\n        isConfigValid = true;\n        try {\n            parser.parseArgument(processedArgs.toArray(new java.lang.String[]{  }));\n        } catch (org.kohsuke.args4j.CmdLineException e) {\n            err.println(e.getMessage());\n            isConfigValid = false;\n        }\n        if (flags.version) {\n            java.util.ResourceBundle config = java.util.ResourceBundle.getBundle(com.google.javascript.jscomp.CommandLineRunner.configResource);\n            err.println(((((\"Closure Compiler (http://code.google.com/p/closure/compiler)\\n\" + \"Version: \") + config.getString(\"compiler.version\")) + \"\\n\") + \"Built on: \") + config.getString(\"compiler.date\"));\n            err.flush();\n        }\n        if ((!isConfigValid) || flags.display_help) {\n            isConfigValid = false;\n            parser.printUsage(err);\n        } else {\n            getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new com.google.javascript.jscomp.DefaultCodingConvention() : new com.google.javascript.jscomp.ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setOutputManifest(flags.output_manifest);\n        }\n    }\n\n    @java.lang.Override\n    protected com.google.javascript.jscomp.CompilerOptions createOptions() {\n        com.google.javascript.jscomp.CompilerOptions options = new com.google.javascript.jscomp.CompilerOptions();\n        options.setCodingConvention(new com.google.javascript.jscomp.ClosureCodingConvention());\n        com.google.javascript.jscomp.CompilationLevel level = flags.compilation_level;\n        level.setOptionsForCompilationLevel(options);\n        if (flags.debug) {\n            level.setDebugOptionsForCompilationLevel(options);\n        }\n        com.google.javascript.jscomp.WarningLevel wLevel = flags.warning_level;\n        wLevel.setOptionsForWarningLevel(options);\n        for (com.google.javascript.jscomp.CommandLineRunner.FormattingOption formattingOption : flags.formatting) {\n            formattingOption.applyToOptions(options);\n        }\n        options.closurePass = flags.process_closure_primitives;\n        return options;\n    }\n\n    @java.lang.Override\n    protected java.lang.Compiler createCompiler() {\n        return new java.lang.Compiler(getErrorPrintStream());\n    }\n\n    @java.lang.Override\n    protected java.util.List<com.google.javascript.jscomp.JSSourceFile> createExterns() throws com.google.javascript.jscomp.FlagUsageException, java.io.IOException {\n        java.util.List<com.google.javascript.jscomp.JSSourceFile> externs = super.createExterns();\n        if (flags.use_only_custom_externs || isInTestMode()) {\n            return externs;\n        } else {\n            java.util.List<com.google.javascript.jscomp.JSSourceFile> defaultExterns = com.google.javascript.jscomp.CommandLineRunner.getDefaultExterns();\n            defaultExterns.addAll(externs);\n            return defaultExterns;\n        }\n    }\n\n    private static final java.util.List<java.lang.String> DEFAULT_EXTERNS_NAMES = com.google.common.collect.ImmutableList.of(\"es3.js\", \"es5.js\", \"w3c_event.js\", \"w3c_event3.js\", \"gecko_event.js\", \"ie_event.js\", \"webkit_event.js\", \"w3c_dom1.js\", \"w3c_dom2.js\", \"w3c_dom3.js\", \"gecko_dom.js\", \"ie_dom.js\", \"webkit_dom.js\", \"w3c_css.js\", \"gecko_css.js\", \"ie_css.js\", \"webkit_css.js\", \"google.js\", \"deprecated.js\", \"fileapi.js\", \"flash.js\", \"gears_symbols.js\", \"gears_types.js\", \"gecko_xml.js\", \"html5.js\", \"ie_vml.js\", \"iphone.js\", \"webstorage.js\", \"w3c_css3d.js\", \"w3c_elementtraversal.js\", \"w3c_geolocation.js\", \"w3c_range.js\", \"w3c_selectors.js\", \"w3c_xml.js\", \"window.js\", \"webkit_notifications.js\");\n\n    public static java.util.List<com.google.javascript.jscomp.JSSourceFile> getDefaultExterns() throws java.io.IOException {\n        java.io.InputStream input = com.google.javascript.jscomp.CommandLineRunner.class.getResourceAsStream(\"/externs.zip\");\n        java.util.zip.ZipInputStream zip = new java.util.zip.ZipInputStream(input);\n        java.util.Map<java.lang.String, com.google.javascript.jscomp.JSSourceFile> externsMap = com.google.common.collect.Maps.newHashMap();\n        for (java.util.zip.ZipEntry entry = null; (entry = zip.getNextEntry()) != null;) {\n            com.google.common.io.LimitInputStream entryStream = new com.google.common.io.LimitInputStream(zip, entry.getSize());\n            externsMap.put(entry.getName(), com.google.javascript.jscomp.JSSourceFile.fromInputStream(\"externs.zip//\" + entry.getName(), entryStream));\n        }\n        com.google.common.base.Preconditions.checkState(externsMap.keySet().equals(com.google.common.collect.Sets.newHashSet(com.google.javascript.jscomp.CommandLineRunner.DEFAULT_EXTERNS_NAMES)), \"Externs zip must match our hard-coded list of externs.\");\n        java.util.List<com.google.javascript.jscomp.JSSourceFile> externs = com.google.common.collect.Lists.newArrayList();\n        for (java.lang.String key : com.google.javascript.jscomp.CommandLineRunner.DEFAULT_EXTERNS_NAMES) {\n            externs.add(externsMap.get(key));\n        }\n        return externs;\n    }\n\n    public boolean shouldRunCompiler() {\n        return this.isConfigValid;\n    }\n\n    public static void main(java.lang.String[] args) {\n        com.google.javascript.jscomp.CommandLineRunner runner = new com.google.javascript.jscomp.CommandLineRunner(args);\n        if (runner.shouldRunCompiler()) {\n            runner.run();\n        } else {\n            java.lang.System.exit(-1);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (flags.version) {\n    java.util.ResourceBundle config = java.util.ResourceBundle.getBundle(com.google.javascript.jscomp.CommandLineRunner.configResource);\n    err.println(((((\"Closure Compiler (http://code.google.com/p/closure/compiler)\\n\" + \"Version: \") + config.getString(\"compiler.version\")) + \"\\n\") + \"Built on: \") + config.getString(\"compiler.date\"));\n    err.flush();\n}",
            "src_parent": "{\n    java.util.regex.Pattern argPattern = java.util.regex.Pattern.compile(\"(--[a-zA-Z_]+)=(.*)\");\n    java.util.regex.Pattern quotesPattern = java.util.regex.Pattern.compile(\"^[\\'\\\"](.*)[\\'\\\"]$\");\n    java.util.List<java.lang.String> processedArgs = com.google.common.collect.Lists.newArrayList();\n    for (java.lang.String arg : args) {\n        java.util.regex.Matcher matcher = argPattern.matcher(arg);\n        if (matcher.matches()) {\n            processedArgs.add(matcher.group(1));\n            java.lang.String value = matcher.group(2);\n            java.util.regex.Matcher quotesMatcher = quotesPattern.matcher(value);\n            if (quotesMatcher.matches()) {\n                processedArgs.add(quotesMatcher.group(1));\n            } else {\n                processedArgs.add(value);\n            }\n        } else {\n            processedArgs.add(arg);\n        }\n    }\n    org.kohsuke.args4j.CmdLineParser parser = new org.kohsuke.args4j.CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new java.lang.String[]{  }));\n    } catch (org.kohsuke.args4j.CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        java.util.ResourceBundle config = java.util.ResourceBundle.getBundle(com.google.javascript.jscomp.CommandLineRunner.configResource);\n        err.println(((((\"Closure Compiler (http://code.google.com/p/closure/compiler)\\n\" + \"Version: \") + config.getString(\"compiler.version\")) + \"\\n\") + \"Built on: \") + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if ((!isConfigValid) || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new com.google.javascript.jscomp.DefaultCodingConvention() : new com.google.javascript.jscomp.ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setOutputManifest(flags.output_manifest);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "CommandLineRunner"
    }
  ],
  "id": "Closure_151"
}