{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    if (tq.matchChomp(\":matchText\")) {\n        evals.add(new org.jsoup.select.Evaluator.MatchText());\n    } else {\n        throw new org.jsoup.select.Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n    }\n}",
            "src_parent": "if (tq.matchChomp(\":root\")) {\n    evals.add(new org.jsoup.select.Evaluator.IsRoot());\n} else if (tq.matchChomp(\":matchText\")) {\n    evals.add(new org.jsoup.select.Evaluator.MatchText());\n} else {\n    throw new org.jsoup.select.Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    throw new org.jsoup.select.Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n}",
            "dst_parent": "if (tq.matchChomp(\":root\")) {\n    evals.add(new org.jsoup.select.Evaluator.IsRoot());\n} else {\n    throw new org.jsoup.select.Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    throw new org.jsoup.select.Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n}",
            "src_parent": "if (tq.matchChomp(\":matchText\")) {\n    evals.add(new org.jsoup.select.Evaluator.MatchText());\n} else {\n    throw new org.jsoup.select.Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        }
      ],
      "file_name": "QueryParser"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public static final class MatchText extends org.jsoup.select.Evaluator {\n    @java.lang.Override\n    public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n        if (element instanceof org.jsoup.nodes.PseudoTextElement) {\n            return true;\n        }\n        java.util.List<org.jsoup.nodes.TextNode> textNodes = element.textNodes();\n        for (org.jsoup.nodes.TextNode textNode : textNodes) {\n            org.jsoup.nodes.PseudoTextElement pel = new org.jsoup.nodes.PseudoTextElement(org.jsoup.parser.Tag.valueOf(element.tagName()), element.baseUri(), element.attributes());\n            textNode.replaceWith(pel);\n            pel.appendChild(textNode);\n        }\n        return false;\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return \":matchText\";\n    }\n}",
            "src_parent": "public abstract class Evaluator {\n    protected Evaluator() {\n    }\n\n    public abstract boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element);\n\n    public static final class Tag extends org.jsoup.select.Evaluator {\n        private java.lang.String tagName;\n\n        public Tag(java.lang.String tagName) {\n            this.tagName = tagName;\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            return element.tagName().equalsIgnoreCase(tagName);\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\"%s\", tagName);\n        }\n    }\n\n    public static final class TagEndsWith extends org.jsoup.select.Evaluator {\n        private java.lang.String tagName;\n\n        public TagEndsWith(java.lang.String tagName) {\n            this.tagName = tagName;\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            return element.tagName().endsWith(tagName);\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\"%s\", tagName);\n        }\n    }\n\n    public static final class Id extends org.jsoup.select.Evaluator {\n        private java.lang.String id;\n\n        public Id(java.lang.String id) {\n            this.id = id;\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            return id.equals(element.id());\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\"#%s\", id);\n        }\n    }\n\n    public static final class Class extends org.jsoup.select.Evaluator {\n        private java.lang.String className;\n\n        public Class(java.lang.String className) {\n            this.className = className;\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            return element.hasClass(className);\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\".%s\", className);\n        }\n    }\n\n    public static final class Attribute extends org.jsoup.select.Evaluator {\n        private java.lang.String key;\n\n        public Attribute(java.lang.String key) {\n            this.key = key;\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            return element.hasAttr(key);\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\"[%s]\", key);\n        }\n    }\n\n    public static final class AttributeStarting extends org.jsoup.select.Evaluator {\n        private java.lang.String keyPrefix;\n\n        public AttributeStarting(java.lang.String keyPrefix) {\n            org.jsoup.helper.Validate.notEmpty(keyPrefix);\n            this.keyPrefix = lowerCase(keyPrefix);\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            java.util.List<org.jsoup.nodes.Attribute> values = element.attributes().asList();\n            for (org.jsoup.nodes.Attribute attribute : values) {\n                if (lowerCase(attribute.getKey()).startsWith(keyPrefix)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\"[^%s]\", keyPrefix);\n        }\n    }\n\n    public static final class AttributeWithValue extends org.jsoup.select.Evaluator.AttributeKeyPair {\n        public AttributeWithValue(java.lang.String key, java.lang.String value) {\n            super(key, value);\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            return element.hasAttr(key) && value.equalsIgnoreCase(element.attr(key).trim());\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\"[%s=%s]\", key, value);\n        }\n    }\n\n    public static final class AttributeWithValueNot extends org.jsoup.select.Evaluator.AttributeKeyPair {\n        public AttributeWithValueNot(java.lang.String key, java.lang.String value) {\n            super(key, value);\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            return !value.equalsIgnoreCase(element.attr(key));\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\"[%s!=%s]\", key, value);\n        }\n    }\n\n    public static final class AttributeWithValueStarting extends org.jsoup.select.Evaluator.AttributeKeyPair {\n        public AttributeWithValueStarting(java.lang.String key, java.lang.String value) {\n            super(key, value);\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            return element.hasAttr(key) && lowerCase(element.attr(key)).startsWith(value);\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\"[%s^=%s]\", key, value);\n        }\n    }\n\n    public static final class AttributeWithValueEnding extends org.jsoup.select.Evaluator.AttributeKeyPair {\n        public AttributeWithValueEnding(java.lang.String key, java.lang.String value) {\n            super(key, value);\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            return element.hasAttr(key) && lowerCase(element.attr(key)).endsWith(value);\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\"[%s$=%s]\", key, value);\n        }\n    }\n\n    public static final class AttributeWithValueContaining extends org.jsoup.select.Evaluator.AttributeKeyPair {\n        public AttributeWithValueContaining(java.lang.String key, java.lang.String value) {\n            super(key, value);\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            return element.hasAttr(key) && lowerCase(element.attr(key)).contains(value);\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\"[%s*=%s]\", key, value);\n        }\n    }\n\n    public static final class AttributeWithValueMatching extends org.jsoup.select.Evaluator {\n        java.lang.String key;\n\n        java.util.regex.Pattern pattern;\n\n        public AttributeWithValueMatching(java.lang.String key, java.util.regex.Pattern pattern) {\n            this.key = normalize(key);\n            this.pattern = pattern;\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            return element.hasAttr(key) && pattern.matcher(element.attr(key)).find();\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\"[%s~=%s]\", key, pattern.toString());\n        }\n    }\n\n    public static abstract class AttributeKeyPair extends org.jsoup.select.Evaluator {\n        java.lang.String key;\n\n        java.lang.String value;\n\n        public AttributeKeyPair(java.lang.String key, java.lang.String value) {\n            org.jsoup.helper.Validate.notEmpty(key);\n            org.jsoup.helper.Validate.notEmpty(value);\n            this.key = normalize(key);\n            if ((value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")) || (value.startsWith(\"'\") && value.endsWith(\"'\"))) {\n                value = value.substring(1, value.length() - 1);\n            }\n            this.value = normalize(value);\n        }\n    }\n\n    public static final class AllElements extends org.jsoup.select.Evaluator {\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            return true;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return \"*\";\n        }\n    }\n\n    public static final class IndexLessThan extends org.jsoup.select.Evaluator.IndexEvaluator {\n        public IndexLessThan(int index) {\n            super(index);\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            return (root != element) && (element.elementSiblingIndex() < index);\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\":lt(%d)\", index);\n        }\n    }\n\n    public static final class IndexGreaterThan extends org.jsoup.select.Evaluator.IndexEvaluator {\n        public IndexGreaterThan(int index) {\n            super(index);\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            return element.elementSiblingIndex() > index;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\":gt(%d)\", index);\n        }\n    }\n\n    public static final class IndexEquals extends org.jsoup.select.Evaluator.IndexEvaluator {\n        public IndexEquals(int index) {\n            super(index);\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            return element.elementSiblingIndex() == index;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\":eq(%d)\", index);\n        }\n    }\n\n    public static final class IsLastChild extends org.jsoup.select.Evaluator {\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            final org.jsoup.nodes.Element p = element.parent();\n            return ((p != null) && (!(p instanceof org.jsoup.nodes.Document))) && (element.elementSiblingIndex() == (p.children().size() - 1));\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return \":last-child\";\n        }\n    }\n\n    public static final class IsFirstOfType extends org.jsoup.select.Evaluator.IsNthOfType {\n        public IsFirstOfType() {\n            super(0, 1);\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return \":first-of-type\";\n        }\n    }\n\n    public static final class IsLastOfType extends org.jsoup.select.Evaluator.IsNthLastOfType {\n        public IsLastOfType() {\n            super(0, 1);\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return \":last-of-type\";\n        }\n    }\n\n    public static abstract class CssNthEvaluator extends org.jsoup.select.Evaluator {\n        protected final int a;\n\n        protected final int b;\n\n        public CssNthEvaluator(int a, int b) {\n            this.a = a;\n            this.b = b;\n        }\n\n        public CssNthEvaluator(int b) {\n            this(0, b);\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            final org.jsoup.nodes.Element p = element.parent();\n            if ((p == null) || (p instanceof org.jsoup.nodes.Document)) {\n                return false;\n            }\n            final int pos = calculatePosition(root, element);\n            if (a == 0) {\n                return pos == b;\n            }\n            return (((pos - b) * a) >= 0) && (((pos - b) % a) == 0);\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            if (a == 0) {\n                return java.lang.String.format(\":%s(%d)\", getPseudoClass(), b);\n            }\n            if (b == 0) {\n                return java.lang.String.format(\":%s(%dn)\", getPseudoClass(), a);\n            }\n            return java.lang.String.format(\":%s(%dn%+d)\", getPseudoClass(), a, b);\n        }\n\n        protected abstract java.lang.String getPseudoClass();\n\n        protected abstract int calculatePosition(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element);\n    }\n\n    public static final class IsNthChild extends org.jsoup.select.Evaluator.CssNthEvaluator {\n        public IsNthChild(int a, int b) {\n            super(a, b);\n        }\n\n        protected int calculatePosition(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            return element.elementSiblingIndex() + 1;\n        }\n\n        protected java.lang.String getPseudoClass() {\n            return \"nth-child\";\n        }\n    }\n\n    public static final class IsNthLastChild extends org.jsoup.select.Evaluator.CssNthEvaluator {\n        public IsNthLastChild(int a, int b) {\n            super(a, b);\n        }\n\n        @java.lang.Override\n        protected int calculatePosition(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            return element.parent().children().size() - element.elementSiblingIndex();\n        }\n\n        @java.lang.Override\n        protected java.lang.String getPseudoClass() {\n            return \"nth-last-child\";\n        }\n    }\n\n    public static class IsNthOfType extends org.jsoup.select.Evaluator.CssNthEvaluator {\n        public IsNthOfType(int a, int b) {\n            super(a, b);\n        }\n\n        protected int calculatePosition(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            int pos = 0;\n            org.jsoup.select.Elements family = element.parent().children();\n            for (org.jsoup.nodes.Element el : family) {\n                if (el.tag().equals(element.tag())) {\n                    pos++;\n                }\n                if (el == element) {\n                    break;\n                }\n            }\n            return pos;\n        }\n\n        @java.lang.Override\n        protected java.lang.String getPseudoClass() {\n            return \"nth-of-type\";\n        }\n    }\n\n    public static class IsNthLastOfType extends org.jsoup.select.Evaluator.CssNthEvaluator {\n        public IsNthLastOfType(int a, int b) {\n            super(a, b);\n        }\n\n        @java.lang.Override\n        protected int calculatePosition(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            int pos = 0;\n            org.jsoup.select.Elements family = element.parent().children();\n            for (int i = element.elementSiblingIndex(); i < family.size(); i++) {\n                if (family.get(i).tag().equals(element.tag())) {\n                    pos++;\n                }\n            }\n            return pos;\n        }\n\n        @java.lang.Override\n        protected java.lang.String getPseudoClass() {\n            return \"nth-last-of-type\";\n        }\n    }\n\n    public static final class IsFirstChild extends org.jsoup.select.Evaluator {\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            final org.jsoup.nodes.Element p = element.parent();\n            return ((p != null) && (!(p instanceof org.jsoup.nodes.Document))) && (element.elementSiblingIndex() == 0);\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return \":first-child\";\n        }\n    }\n\n    public static final class IsRoot extends org.jsoup.select.Evaluator {\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            final org.jsoup.nodes.Element r = (root instanceof org.jsoup.nodes.Document) ? root.child(0) : root;\n            return element == r;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return \":root\";\n        }\n    }\n\n    public static final class IsOnlyChild extends org.jsoup.select.Evaluator {\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            final org.jsoup.nodes.Element p = element.parent();\n            return ((p != null) && (!(p instanceof org.jsoup.nodes.Document))) && (element.siblingElements().size() == 0);\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return \":only-child\";\n        }\n    }\n\n    public static final class IsOnlyOfType extends org.jsoup.select.Evaluator {\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            final org.jsoup.nodes.Element p = element.parent();\n            if ((p == null) || (p instanceof org.jsoup.nodes.Document)) {\n                return false;\n            }\n            int pos = 0;\n            org.jsoup.select.Elements family = p.children();\n            for (org.jsoup.nodes.Element el : family) {\n                if (el.tag().equals(element.tag())) {\n                    pos++;\n                }\n            }\n            return pos == 1;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return \":only-of-type\";\n        }\n    }\n\n    public static final class IsEmpty extends org.jsoup.select.Evaluator {\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            java.util.List<org.jsoup.nodes.Node> family = element.childNodes();\n            for (org.jsoup.nodes.Node n : family) {\n                if (!(((n instanceof org.jsoup.nodes.Comment) || (n instanceof org.jsoup.nodes.XmlDeclaration)) || (n instanceof org.jsoup.nodes.DocumentType))) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return \":empty\";\n        }\n    }\n\n    public static abstract class IndexEvaluator extends org.jsoup.select.Evaluator {\n        int index;\n\n        public IndexEvaluator(int index) {\n            this.index = index;\n        }\n    }\n\n    public static final class ContainsText extends org.jsoup.select.Evaluator {\n        private java.lang.String searchText;\n\n        public ContainsText(java.lang.String searchText) {\n            this.searchText = lowerCase(searchText);\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            return lowerCase(element.text()).contains(searchText);\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\":contains(%s)\", searchText);\n        }\n    }\n\n    public static final class ContainsData extends org.jsoup.select.Evaluator {\n        private java.lang.String searchText;\n\n        public ContainsData(java.lang.String searchText) {\n            this.searchText = lowerCase(searchText);\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            return lowerCase(element.data()).contains(searchText);\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\":containsData(%s)\", searchText);\n        }\n    }\n\n    public static final class ContainsOwnText extends org.jsoup.select.Evaluator {\n        private java.lang.String searchText;\n\n        public ContainsOwnText(java.lang.String searchText) {\n            this.searchText = lowerCase(searchText);\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            return lowerCase(element.ownText()).contains(searchText);\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\":containsOwn(%s)\", searchText);\n        }\n    }\n\n    public static final class Matches extends org.jsoup.select.Evaluator {\n        private java.util.regex.Pattern pattern;\n\n        public Matches(java.util.regex.Pattern pattern) {\n            this.pattern = pattern;\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            java.util.regex.Matcher m = pattern.matcher(element.text());\n            return m.find();\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\":matches(%s)\", pattern);\n        }\n    }\n\n    public static final class MatchesOwn extends org.jsoup.select.Evaluator {\n        private java.util.regex.Pattern pattern;\n\n        public MatchesOwn(java.util.regex.Pattern pattern) {\n            this.pattern = pattern;\n        }\n\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            java.util.regex.Matcher m = pattern.matcher(element.ownText());\n            return m.find();\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return java.lang.String.format(\":matchesOwn(%s)\", pattern);\n        }\n    }\n\n    public static final class MatchText extends org.jsoup.select.Evaluator {\n        @java.lang.Override\n        public boolean matches(org.jsoup.nodes.Element root, org.jsoup.nodes.Element element) {\n            if (element instanceof org.jsoup.nodes.PseudoTextElement) {\n                return true;\n            }\n            java.util.List<org.jsoup.nodes.TextNode> textNodes = element.textNodes();\n            for (org.jsoup.nodes.TextNode textNode : textNodes) {\n                org.jsoup.nodes.PseudoTextElement pel = new org.jsoup.nodes.PseudoTextElement(org.jsoup.parser.Tag.valueOf(element.tagName()), element.baseUri(), element.attributes());\n                textNode.replaceWith(pel);\n                pel.appendChild(textNode);\n            }\n            return false;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return \":matchText\";\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Class"
          }
        }
      ],
      "file_name": "Evaluator"
    }
  ],
  "id": "Jsoup_71"
}