{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(right.getNext() != null) || (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(right))",
            "src_parent": "if ((right.getNext() != null) || (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(right))) {\n    return n;\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (((right != null) && (right.getType() == com.google.javascript.rhino.Token.STRING)) && \",\".equals(right.getString())) {\n    n.removeChild(right);\n    reportCodeChange();\n}",
            "src_parent": "{\n    com.google.javascript.rhino.Node callTarget = n.getFirstChild();\n    if ((callTarget == null) || (!com.google.javascript.jscomp.NodeUtil.isGetProp(callTarget))) {\n        return n;\n    }\n    com.google.javascript.rhino.Node right = callTarget.getNext();\n    if (right != null) {\n        if ((right.getNext() != null) || (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(right))) {\n            return n;\n        }\n    }\n    com.google.javascript.rhino.Node arrayNode = callTarget.getFirstChild();\n    com.google.javascript.rhino.Node functionName = arrayNode.getNext();\n    if ((arrayNode.getType() != com.google.javascript.rhino.Token.ARRAYLIT) || (!functionName.getString().equals(\"join\"))) {\n        return n;\n    }\n    if (((right != null) && (right.getType() == com.google.javascript.rhino.Token.STRING)) && \",\".equals(right.getString())) {\n        n.removeChild(right);\n        reportCodeChange();\n    }\n    java.lang.String joinString = (right == null) ? \",\" : com.google.javascript.jscomp.NodeUtil.getStringValue(right);\n    java.util.List<com.google.javascript.rhino.Node> arrayFoldedChildren = com.google.common.collect.Lists.newLinkedList();\n    java.lang.StringBuilder sb = null;\n    int foldedSize = 0;\n    com.google.javascript.rhino.Node prev = null;\n    com.google.javascript.rhino.Node elem = arrayNode.getFirstChild();\n    while (elem != null) {\n        if (com.google.javascript.jscomp.NodeUtil.isImmutableValue(elem) || (elem.getType() == com.google.javascript.rhino.Token.EMPTY)) {\n            if (sb == null) {\n                sb = new java.lang.StringBuilder();\n            } else {\n                sb.append(joinString);\n            }\n            sb.append(com.google.javascript.jscomp.NodeUtil.getArrayElementStringValue(elem));\n        } else {\n            if (sb != null) {\n                com.google.common.base.Preconditions.checkNotNull(prev);\n                foldedSize += sb.length() + 2;\n                arrayFoldedChildren.add(com.google.javascript.rhino.Node.newString(sb.toString()).copyInformationFrom(prev));\n                sb = null;\n            }\n            foldedSize += com.google.javascript.jscomp.InlineCostEstimator.getCost(elem);\n            arrayFoldedChildren.add(elem);\n        }\n        prev = elem;\n        elem = elem.getNext();\n    } \n    if (sb != null) {\n        com.google.common.base.Preconditions.checkNotNull(prev);\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(com.google.javascript.rhino.Node.newString(sb.toString()).copyInformationFrom(prev));\n    }\n    foldedSize += arrayFoldedChildren.size() - 1;\n    int originalSize = com.google.javascript.jscomp.InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n        case 0 :\n            com.google.javascript.rhino.Node emptyStringNode = com.google.javascript.rhino.Node.newString(\"\");\n            n.getParent().replaceChild(n, emptyStringNode);\n            reportCodeChange();\n            return emptyStringNode;\n        case 1 :\n            com.google.javascript.rhino.Node foldedStringNode = arrayFoldedChildren.remove(0);\n            if (foldedSize > originalSize) {\n                return n;\n            }\n            arrayNode.detachChildren();\n            if (foldedStringNode.getType() != com.google.javascript.rhino.Token.STRING) {\n                com.google.javascript.rhino.Node replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ADD, com.google.javascript.rhino.Node.newString(\"\").copyInformationFrom(n), foldedStringNode);\n                foldedStringNode = replacement;\n            }\n            n.getParent().replaceChild(n, foldedStringNode);\n            reportCodeChange();\n            return foldedStringNode;\n        default :\n            if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n                return n;\n            }\n            int kJoinOverhead = \"[].join()\".length();\n            foldedSize += kJoinOverhead;\n            foldedSize += (right != null) ? com.google.javascript.jscomp.InlineCostEstimator.getCost(right) : 0;\n            if (foldedSize > originalSize) {\n                return n;\n            }\n            arrayNode.detachChildren();\n            for (com.google.javascript.rhino.Node node : arrayFoldedChildren) {\n                arrayNode.addChildToBack(node);\n            }\n            reportCodeChange();\n            break;\n    }\n    return n;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "!com.google.javascript.jscomp.NodeUtil.isImmutableValue(right)",
            "dst_parent": "if (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(right)) {\n    return n;\n}",
            "dst_parent_type": "If",
            "dst_type": "UnaryOperator",
            "operator": "MOV",
            "src": "(!com.google.javascript.jscomp.NodeUtil.isImmutableValue(right))",
            "src_parent": "(right.getNext() != null) || (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(right))",
            "src_parent_type": "BinaryOperator",
            "src_type": "UnaryOperator"
          }
        }
      ],
      "file_name": "PeepholeReplaceKnownMethods"
    }
  ],
  "id": "Closure_50"
}