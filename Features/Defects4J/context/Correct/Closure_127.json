{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(nextCfgNode == fallThrough) && (!inFinally(n.getParent(), n))",
            "src_parent": "if ((nextCfgNode == fallThrough) && (!inFinally(n.getParent(), n))) {\n    removeNode(n);\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private boolean inFinally(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node child) {\n    if ((parent == null) || parent.isFunction()) {\n        return false;\n    } else if (com.google.javascript.jscomp.NodeUtil.isTryFinallyNode(parent, child)) {\n        return true;\n    } else {\n        return inFinally(parent.getParent(), parent);\n    }\n}",
            "src_parent": "private class EliminationPass extends com.google.javascript.jscomp.NodeTraversal.AbstractShallowCallback {\n    private final com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg;\n\n    private EliminationPass(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg) {\n        this.cfg = cfg;\n    }\n\n    @java.lang.Override\n    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {\n        if (((parent == null) || n.isFunction()) || n.isScript()) {\n            return;\n        }\n        com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> gNode = cfg.getDirectedGraphNode(n);\n        if (gNode == null) {\n            return;\n        }\n        if ((gNode.getAnnotation() != com.google.javascript.jscomp.graph.GraphReachability.REACHABLE) || (removeNoOpStatements && (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n, compiler)))) {\n            removeDeadExprStatementSafely(n);\n            return;\n        }\n        tryRemoveUnconditionalBranching(n);\n    }\n\n    @java.lang.SuppressWarnings(\"fallthrough\")\n    private void tryRemoveUnconditionalBranching(com.google.javascript.rhino.Node n) {\n        if (n == null) {\n            return;\n        }\n        com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> gNode = cfg.getDirectedGraphNode(n);\n        if (gNode == null) {\n            return;\n        }\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.RETURN :\n                if (n.hasChildren()) {\n                    break;\n                }\n            case com.google.javascript.rhino.Token.BREAK :\n            case com.google.javascript.rhino.Token.CONTINUE :\n                java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> outEdges = gNode.getOutEdges();\n                if ((outEdges.size() == 1) && ((n.getNext() == null) || n.getNext().isFunction())) {\n                    com.google.common.base.Preconditions.checkState(outEdges.get(0).getValue() == com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND);\n                    com.google.javascript.rhino.Node fallThrough = computeFollowing(n);\n                    com.google.javascript.rhino.Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n                    if ((nextCfgNode == fallThrough) && (!inFinally(n.getParent(), n))) {\n                        removeNode(n);\n                    }\n                }\n        }\n    }\n\n    private boolean inFinally(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node child) {\n        if ((parent == null) || parent.isFunction()) {\n            return false;\n        } else if (com.google.javascript.jscomp.NodeUtil.isTryFinallyNode(parent, child)) {\n            return true;\n        } else {\n            return inFinally(parent.getParent(), parent);\n        }\n    }\n\n    private com.google.javascript.rhino.Node computeFollowing(com.google.javascript.rhino.Node n) {\n        com.google.javascript.rhino.Node next = com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(n);\n        while ((next != null) && next.isBlock()) {\n            if (next.hasChildren()) {\n                next = next.getFirstChild();\n            } else {\n                next = computeFollowing(next);\n            }\n        } \n        return next;\n    }\n\n    private void removeDeadExprStatementSafely(com.google.javascript.rhino.Node n) {\n        com.google.javascript.rhino.Node parent = n.getParent();\n        if (n.isEmpty() || (n.isBlock() && (!n.hasChildren()))) {\n            return;\n        }\n        if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {\n            return;\n        }\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.DO :\n                return;\n            case com.google.javascript.rhino.Token.BLOCK :\n                if (parent.isTry() && com.google.javascript.jscomp.NodeUtil.isTryCatchNodeContainer(n)) {\n                    return;\n                }\n                break;\n            case com.google.javascript.rhino.Token.CATCH :\n                com.google.javascript.rhino.Node tryNode = parent.getParent();\n                com.google.javascript.jscomp.NodeUtil.maybeAddFinally(tryNode);\n                break;\n        }\n        if (n.isVar() && (!n.getFirstChild().hasChildren())) {\n            return;\n        }\n        removeNode(n);\n    }\n\n    private void removeNode(com.google.javascript.rhino.Node n) {\n        codeChanged = true;\n        com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(n);\n        compiler.reportCodeChange();\n        if (com.google.javascript.jscomp.UnreachableCodeElimination.logger.isLoggable(java.util.logging.Level.FINE)) {\n            com.google.javascript.jscomp.UnreachableCodeElimination.logger.fine(\"Removing \" + n.toString());\n        }\n        com.google.javascript.jscomp.NodeUtil.removeChild(n.getParent(), n);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "nextCfgNode == fallThrough",
            "dst_parent": "if (nextCfgNode == fallThrough) {\n    removeNode(n);\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(nextCfgNode == fallThrough)",
            "src_parent": "(nextCfgNode == fallThrough) && (!inFinally(n.getParent(), n))",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        }
      ],
      "file_name": "UnreachableCodeElimination"
    }
  ],
  "id": "Closure_127"
}