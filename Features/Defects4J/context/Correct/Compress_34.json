{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private static final org.apache.commons.compress.archivers.zip.ZipShort ZERO = new org.apache.commons.compress.archivers.zip.ZipShort(0);",
            "src_parent": "public class X7875_NewUnix implements java.io.Serializable , java.lang.Cloneable , org.apache.commons.compress.archivers.zip.ZipExtraField {\n    private static final org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID = new org.apache.commons.compress.archivers.zip.ZipShort(0x7875);\n\n    private static final org.apache.commons.compress.archivers.zip.ZipShort ZERO = new org.apache.commons.compress.archivers.zip.ZipShort(0);\n\n    private static final java.math.BigInteger ONE_THOUSAND = java.math.BigInteger.valueOf(1000);\n\n    private static final long serialVersionUID = 1L;\n\n    private int version = 1;\n\n    private java.math.BigInteger uid;\n\n    private java.math.BigInteger gid;\n\n    public X7875_NewUnix() {\n        reset();\n    }\n\n    public org.apache.commons.compress.archivers.zip.ZipShort getHeaderId() {\n        return org.apache.commons.compress.archivers.zip.X7875_NewUnix.HEADER_ID;\n    }\n\n    public long getUID() {\n        return org.apache.commons.compress.archivers.zip.ZipUtil.bigToLong(uid);\n    }\n\n    public long getGID() {\n        return org.apache.commons.compress.archivers.zip.ZipUtil.bigToLong(gid);\n    }\n\n    public void setUID(long l) {\n        this.uid = org.apache.commons.compress.archivers.zip.ZipUtil.longToBig(l);\n    }\n\n    public void setGID(long l) {\n        this.gid = org.apache.commons.compress.archivers.zip.ZipUtil.longToBig(l);\n    }\n\n    public org.apache.commons.compress.archivers.zip.ZipShort getLocalFileDataLength() {\n        int uidSize = org.apache.commons.compress.archivers.zip.X7875_NewUnix.trimLeadingZeroesForceMinLength(uid.toByteArray()).length;\n        int gidSize = org.apache.commons.compress.archivers.zip.X7875_NewUnix.trimLeadingZeroesForceMinLength(gid.toByteArray()).length;\n        return new org.apache.commons.compress.archivers.zip.ZipShort((3 + uidSize) + gidSize);\n    }\n\n    public org.apache.commons.compress.archivers.zip.ZipShort getCentralDirectoryLength() {\n        return org.apache.commons.compress.archivers.zip.X7875_NewUnix.ZERO;\n    }\n\n    public byte[] getLocalFileDataData() {\n        byte[] uidBytes = uid.toByteArray();\n        byte[] gidBytes = gid.toByteArray();\n        uidBytes = org.apache.commons.compress.archivers.zip.X7875_NewUnix.trimLeadingZeroesForceMinLength(uidBytes);\n        gidBytes = org.apache.commons.compress.archivers.zip.X7875_NewUnix.trimLeadingZeroesForceMinLength(gidBytes);\n        byte[] data = new byte[(3 + uidBytes.length) + gidBytes.length];\n        org.apache.commons.compress.archivers.zip.ZipUtil.reverse(uidBytes);\n        org.apache.commons.compress.archivers.zip.ZipUtil.reverse(gidBytes);\n        int pos = 0;\n        data[pos++] = org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte(version);\n        data[pos++] = org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte(uidBytes.length);\n        java.lang.System.arraycopy(uidBytes, 0, data, pos, uidBytes.length);\n        pos += uidBytes.length;\n        data[pos++] = org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte(gidBytes.length);\n        java.lang.System.arraycopy(gidBytes, 0, data, pos, gidBytes.length);\n        return data;\n    }\n\n    public byte[] getCentralDirectoryData() {\n        return new byte[0];\n    }\n\n    public void parseFromLocalFileData(byte[] data, int offset, int length) throws java.util.zip.ZipException {\n        reset();\n        this.version = org.apache.commons.compress.archivers.zip.ZipUtil.signedByteToUnsignedInt(data[offset++]);\n        int uidSize = org.apache.commons.compress.archivers.zip.ZipUtil.signedByteToUnsignedInt(data[offset++]);\n        byte[] uidBytes = new byte[uidSize];\n        java.lang.System.arraycopy(data, offset, uidBytes, 0, uidSize);\n        offset += uidSize;\n        this.uid = new java.math.BigInteger(1, org.apache.commons.compress.archivers.zip.ZipUtil.reverse(uidBytes));\n        int gidSize = org.apache.commons.compress.archivers.zip.ZipUtil.signedByteToUnsignedInt(data[offset++]);\n        byte[] gidBytes = new byte[gidSize];\n        java.lang.System.arraycopy(data, offset, gidBytes, 0, gidSize);\n        this.gid = new java.math.BigInteger(1, org.apache.commons.compress.archivers.zip.ZipUtil.reverse(gidBytes));\n    }\n\n    public void parseFromCentralDirectoryData(byte[] buffer, int offset, int length) throws java.util.zip.ZipException {\n    }\n\n    private void reset() {\n        uid = org.apache.commons.compress.archivers.zip.X7875_NewUnix.ONE_THOUSAND;\n        gid = org.apache.commons.compress.archivers.zip.X7875_NewUnix.ONE_THOUSAND;\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return ((\"0x7875 Zip Extra Field: UID=\" + uid) + \" GID=\") + gid;\n    }\n\n    @java.lang.Override\n    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {\n        return super.clone();\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (o instanceof org.apache.commons.compress.archivers.zip.X7875_NewUnix) {\n            org.apache.commons.compress.archivers.zip.X7875_NewUnix xf = ((org.apache.commons.compress.archivers.zip.X7875_NewUnix) (o));\n            return ((version == xf.version) && uid.equals(xf.uid)) && gid.equals(xf.gid);\n        }\n        return false;\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        int hc = (-1234567) * version;\n        hc ^= java.lang.Integer.rotateLeft(uid.hashCode(), 16);\n        hc ^= gid.hashCode();\n        return hc;\n    }\n\n    static byte[] trimLeadingZeroesForceMinLength(byte[] array) {\n        if (array == null) {\n            return array;\n        }\n        int pos = 0;\n        for (byte b : array) {\n            if (b == 0) {\n                pos++;\n            } else {\n                break;\n            }\n        }\n        final int MIN_LENGTH = 1;\n        byte[] trimmedArray = new byte[java.lang.Math.max(MIN_LENGTH, array.length - pos)];\n        int startPos = trimmedArray.length - (array.length - pos);\n        java.lang.System.arraycopy(array, pos, trimmedArray, startPos, trimmedArray.length - startPos);\n        return trimmedArray;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "org.apache.commons.compress.archivers.zip.X7875_NewUnix.ZERO",
            "src_parent": "return org.apache.commons.compress.archivers.zip.X7875_NewUnix.ZERO",
            "src_parent_type": "Return",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "getLocalFileDataLength()",
            "src_parent": "return getLocalFileDataLength()",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "X7875_NewUnix"
    }
  ],
  "id": "Compress_34"
}