{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private java.util.List<com.google.javascript.rhino.Node> lentObjectLiterals = null;",
            "src_parent": "private abstract class AbstractScopeBuilder implements com.google.javascript.jscomp.NodeTraversal.Callback {\n    final com.google.javascript.jscomp.Scope scope;\n\n    private final java.util.List<com.google.javascript.jscomp.TypedScopeCreator.DeferredSetType> deferredSetTypes = com.google.common.collect.Lists.newArrayList();\n\n    private final java.util.List<com.google.javascript.rhino.Node> nonExternFunctions = com.google.common.collect.Lists.newArrayList();\n\n    private java.util.List<com.google.javascript.rhino.Node> lentObjectLiterals = null;\n\n    private final java.util.List<com.google.javascript.jscomp.TypedScopeCreator.StubDeclaration> stubDeclarations = com.google.common.collect.Lists.newArrayList();\n\n    private java.lang.String sourceName = null;\n\n    private com.google.javascript.rhino.InputId inputId;\n\n    private AbstractScopeBuilder(com.google.javascript.jscomp.Scope scope) {\n        this.scope = scope;\n    }\n\n    void setDeferredType(com.google.javascript.rhino.Node node, com.google.javascript.rhino.jstype.JSType type) {\n        deferredSetTypes.add(new com.google.javascript.jscomp.TypedScopeCreator.DeferredSetType(node, type));\n    }\n\n    void resolveTypes() {\n        for (com.google.javascript.jscomp.TypedScopeCreator.DeferredSetType deferred : deferredSetTypes) {\n            deferred.resolve(scope);\n        }\n        java.util.Iterator<com.google.javascript.jscomp.Scope.Var> vars = scope.getVars();\n        while (vars.hasNext()) {\n            vars.next().resolveType(typeParsingErrorReporter);\n        } \n        typeRegistry.resolveTypesInScope(scope);\n    }\n\n    @java.lang.Override\n    public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {\n        inputId = t.getInputId();\n        if (n.isFunction() || n.isScript()) {\n            com.google.common.base.Preconditions.checkNotNull(inputId);\n            sourceName = com.google.javascript.jscomp.NodeUtil.getSourceName(n);\n        }\n        boolean descend = (((parent == null) || (!parent.isFunction())) || (n == parent.getFirstChild())) || (parent == scope.getRootNode());\n        if (descend) {\n            if (com.google.javascript.jscomp.NodeUtil.isStatementParent(n)) {\n                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n                    if (com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(child)) {\n                        defineFunctionLiteral(child, n);\n                    }\n                }\n            }\n        }\n        return descend;\n    }\n\n    @java.lang.Override\n    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {\n        inputId = t.getInputId();\n        attachLiteralTypes(t, n);\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.CALL :\n                checkForClassDefiningCalls(t, n, parent);\n                checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n                break;\n            case com.google.javascript.rhino.Token.FUNCTION :\n                if ((t.getInput() == null) || (!t.getInput().isExtern())) {\n                    nonExternFunctions.add(n);\n                }\n                if (!com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(n)) {\n                    defineFunctionLiteral(n, parent);\n                }\n                break;\n            case com.google.javascript.rhino.Token.ASSIGN :\n                com.google.javascript.rhino.Node firstChild = n.getFirstChild();\n                if (firstChild.isGetProp() && firstChild.isQualifiedName()) {\n                    maybeDeclareQualifiedName(t, n.getJSDocInfo(), firstChild, n, firstChild.getNext());\n                }\n                break;\n            case com.google.javascript.rhino.Token.CATCH :\n                defineCatch(n, parent);\n                break;\n            case com.google.javascript.rhino.Token.VAR :\n                defineVar(n, parent);\n                break;\n            case com.google.javascript.rhino.Token.GETPROP :\n                if (parent.isExprResult() && n.isQualifiedName()) {\n                    maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n                }\n                break;\n        }\n        if (((n.getParent() != null) && com.google.javascript.jscomp.NodeUtil.isStatement(n)) && (lentObjectLiterals != null)) {\n            for (com.google.javascript.rhino.Node objLit : lentObjectLiterals) {\n                defineObjectLiteral(objLit);\n            }\n            lentObjectLiterals.clear();\n        }\n    }\n\n    private void attachLiteralTypes(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.NULL :\n                n.setJSType(getNativeType(com.google.javascript.jscomp.NULL_TYPE));\n                break;\n            case com.google.javascript.rhino.Token.VOID :\n                n.setJSType(getNativeType(com.google.javascript.jscomp.VOID_TYPE));\n                break;\n            case com.google.javascript.rhino.Token.STRING :\n                if (!com.google.javascript.jscomp.NodeUtil.isObjectLitKey(n, n.getParent())) {\n                    n.setJSType(getNativeType(com.google.javascript.jscomp.STRING_TYPE));\n                }\n                break;\n            case com.google.javascript.rhino.Token.NUMBER :\n                n.setJSType(getNativeType(com.google.javascript.jscomp.NUMBER_TYPE));\n                break;\n            case com.google.javascript.rhino.Token.TRUE :\n            case com.google.javascript.rhino.Token.FALSE :\n                n.setJSType(getNativeType(com.google.javascript.jscomp.BOOLEAN_TYPE));\n                break;\n            case com.google.javascript.rhino.Token.REGEXP :\n                n.setJSType(getNativeType(com.google.javascript.jscomp.REGEXP_TYPE));\n                break;\n            case com.google.javascript.rhino.Token.OBJECTLIT :\n                com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();\n                if ((info != null) && (info.getLendsName() != null)) {\n                    if (lentObjectLiterals == null) {\n                        lentObjectLiterals = com.google.common.collect.Lists.newArrayList();\n                    }\n                    lentObjectLiterals.add(n);\n                } else {\n                    defineObjectLiteral(n);\n                }\n                break;\n        }\n    }\n\n    private void defineObjectLiteral(com.google.javascript.rhino.Node objectLit) {\n        com.google.javascript.rhino.jstype.JSType type = null;\n        com.google.javascript.rhino.JSDocInfo info = objectLit.getJSDocInfo();\n        if ((info != null) && (info.getLendsName() != null)) {\n            java.lang.String lendsName = info.getLendsName();\n            com.google.javascript.jscomp.Scope.Var lendsVar = scope.getVar(lendsName);\n            if (lendsVar == null) {\n                compiler.report(com.google.javascript.jscomp.JSError.make(sourceName, objectLit, com.google.javascript.jscomp.TypedScopeCreator.UNKNOWN_LENDS, lendsName));\n            } else {\n                type = lendsVar.getType();\n                if (type == null) {\n                    type = typeRegistry.getNativeType(com.google.javascript.jscomp.UNKNOWN_TYPE);\n                }\n                if (!type.isSubtype(typeRegistry.getNativeType(com.google.javascript.jscomp.OBJECT_TYPE))) {\n                    compiler.report(com.google.javascript.jscomp.JSError.make(sourceName, objectLit, com.google.javascript.jscomp.TypedScopeCreator.LENDS_ON_NON_OBJECT, lendsName, type.toString()));\n                    type = null;\n                } else {\n                    objectLit.setJSType(type);\n                }\n            }\n        }\n        info = com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(objectLit);\n        com.google.javascript.rhino.Node lValue = com.google.javascript.jscomp.NodeUtil.getBestLValue(objectLit);\n        java.lang.String lValueName = com.google.javascript.jscomp.NodeUtil.getBestLValueName(lValue);\n        boolean createdEnumType = false;\n        if ((info != null) && info.hasEnumParameterType()) {\n            type = createEnumTypeFromNodes(objectLit, lValueName, info, lValue);\n            createdEnumType = true;\n        }\n        if (type == null) {\n            type = typeRegistry.createAnonymousObjectType();\n        }\n        setDeferredType(objectLit, type);\n        processObjectLitProperties(objectLit, com.google.javascript.rhino.jstype.ObjectType.cast(objectLit.getJSType()), !createdEnumType);\n    }\n\n    void processObjectLitProperties(com.google.javascript.rhino.Node objLit, com.google.javascript.rhino.jstype.ObjectType objLitType, boolean declareOnOwner) {\n        for (com.google.javascript.rhino.Node keyNode = objLit.getFirstChild(); keyNode != null; keyNode = keyNode.getNext()) {\n            com.google.javascript.rhino.Node value = keyNode.getFirstChild();\n            java.lang.String memberName = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(keyNode);\n            com.google.javascript.rhino.JSDocInfo info = keyNode.getJSDocInfo();\n            com.google.javascript.rhino.jstype.JSType valueType = getDeclaredType(keyNode.getSourceFileName(), info, keyNode, value);\n            com.google.javascript.rhino.jstype.JSType keyType = (objLitType.isEnumType()) ? objLitType.toMaybeEnumType().getElementsType() : com.google.javascript.jscomp.NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n            java.lang.String qualifiedName = com.google.javascript.jscomp.NodeUtil.getBestLValueName(keyNode);\n            if (qualifiedName != null) {\n                boolean inferred = keyType == null;\n                defineSlot(keyNode, objLit, qualifiedName, keyType, inferred);\n            } else if (keyType != null) {\n                setDeferredType(keyNode, keyType);\n            }\n            if (((keyType != null) && (objLitType != null)) && declareOnOwner) {\n                boolean isExtern = keyNode.isFromExterns();\n                objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n            }\n        }\n    }\n\n    private com.google.javascript.rhino.jstype.JSType getDeclaredTypeInAnnotation(java.lang.String sourceName, com.google.javascript.rhino.Node node, com.google.javascript.rhino.JSDocInfo info) {\n        com.google.javascript.rhino.jstype.JSType jsType = null;\n        com.google.javascript.rhino.Node objNode = (node.isGetProp()) ? node.getFirstChild() : com.google.javascript.jscomp.NodeUtil.isObjectLitKey(node, node.getParent()) ? node.getParent() : null;\n        if (info != null) {\n            if (info.hasType()) {\n                jsType = info.getType().evaluate(scope, typeRegistry);\n            } else if (com.google.javascript.jscomp.FunctionTypeBuilder.isFunctionTypeDeclaration(info)) {\n                java.lang.String fnName = node.getQualifiedName();\n                jsType = createFunctionTypeFromNodes(null, fnName, info, node);\n            }\n        }\n        return jsType;\n    }\n\n    void assertDefinitionNode(com.google.javascript.rhino.Node n, int type) {\n        com.google.common.base.Preconditions.checkState(sourceName != null);\n        com.google.common.base.Preconditions.checkState(n.getType() == type);\n    }\n\n    void defineCatch(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {\n        assertDefinitionNode(n, Token.CATCH);\n        com.google.javascript.rhino.Node catchName = n.getFirstChild();\n        defineSlot(catchName, n, null);\n    }\n\n    void defineVar(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {\n        assertDefinitionNode(n, Token.VAR);\n        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();\n        if (n.hasMoreThanOneChild()) {\n            if (info != null) {\n                compiler.report(com.google.javascript.jscomp.JSError.make(sourceName, n, com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF));\n            }\n            for (com.google.javascript.rhino.Node name : n.children()) {\n                defineName(name, n, parent, name.getJSDocInfo());\n            }\n        } else {\n            com.google.javascript.rhino.Node name = n.getFirstChild();\n            defineName(name, n, parent, info != null ? info : name.getJSDocInfo());\n        }\n    }\n\n    void defineFunctionLiteral(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {\n        assertDefinitionNode(n, Token.FUNCTION);\n        com.google.javascript.rhino.Node lValue = com.google.javascript.jscomp.NodeUtil.getBestLValue(n);\n        com.google.javascript.rhino.JSDocInfo info = com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(n);\n        java.lang.String functionName = com.google.javascript.jscomp.NodeUtil.getBestLValueName(lValue);\n        com.google.javascript.rhino.jstype.FunctionType functionType = createFunctionTypeFromNodes(n, functionName, info, lValue);\n        setDeferredType(n, functionType);\n        if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n)) {\n            defineSlot(n.getFirstChild(), n, functionType);\n        }\n    }\n\n    private void defineName(com.google.javascript.rhino.Node name, com.google.javascript.rhino.Node var, com.google.javascript.rhino.Node parent, com.google.javascript.rhino.JSDocInfo info) {\n        com.google.javascript.rhino.Node value = name.getFirstChild();\n        com.google.javascript.rhino.jstype.JSType type = getDeclaredType(sourceName, info, name, value);\n        if (type == null) {\n            type = (name.isFromExterns()) ? getNativeType(com.google.javascript.jscomp.UNKNOWN_TYPE) : null;\n        }\n        defineSlot(name, var, type);\n    }\n\n    private boolean shouldUseFunctionLiteralType(com.google.javascript.rhino.jstype.FunctionType type, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.Node lValue) {\n        if (info != null) {\n            return true;\n        }\n        if ((lValue != null) && com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {\n            return false;\n        }\n        return scope.isGlobal() || (!type.isReturnTypeInferred());\n    }\n\n    private com.google.javascript.rhino.jstype.FunctionType createFunctionTypeFromNodes(@javax.annotation.Nullable\n    com.google.javascript.rhino.Node rValue, @javax.annotation.Nullable\n    java.lang.String name, @javax.annotation.Nullable\n    com.google.javascript.rhino.JSDocInfo info, @javax.annotation.Nullable\n    com.google.javascript.rhino.Node lvalueNode) {\n        com.google.javascript.rhino.jstype.FunctionType functionType = null;\n        if (((rValue != null) && rValue.isQualifiedName()) && scope.isGlobal()) {\n            com.google.javascript.jscomp.Scope.Var var = scope.getVar(rValue.getQualifiedName());\n            if (((var != null) && (var.getType() != null)) && var.getType().isFunctionType()) {\n                com.google.javascript.rhino.jstype.FunctionType aliasedType = var.getType().toMaybeFunctionType();\n                if ((aliasedType.isConstructor() || aliasedType.isInterface()) && (!aliasedType.isNativeObjectType())) {\n                    functionType = aliasedType;\n                    if ((name != null) && scope.isGlobal()) {\n                        typeRegistry.declareType(name, functionType.getInstanceType());\n                    }\n                }\n            }\n        }\n        if (functionType == null) {\n            com.google.javascript.rhino.Node errorRoot = (rValue == null) ? lvalueNode : rValue;\n            boolean isFnLiteral = (rValue != null) && rValue.isFunction();\n            com.google.javascript.rhino.Node fnRoot = (isFnLiteral) ? rValue : null;\n            com.google.javascript.rhino.Node parametersNode = (isFnLiteral) ? rValue.getFirstChild().getNext() : null;\n            com.google.javascript.rhino.Node fnBlock = (isFnLiteral) ? parametersNode.getNext() : null;\n            if ((info != null) && info.hasType()) {\n                com.google.javascript.rhino.jstype.JSType type = info.getType().evaluate(scope, typeRegistry);\n                type = type.restrictByNotNullOrUndefined();\n                if (type.isFunctionType()) {\n                    functionType = type.toMaybeFunctionType();\n                    functionType.setJSDocInfo(info);\n                }\n            }\n            if (functionType == null) {\n                com.google.javascript.rhino.Node ownerNode = com.google.javascript.jscomp.NodeUtil.getBestLValueOwner(lvalueNode);\n                java.lang.String ownerName = com.google.javascript.jscomp.NodeUtil.getBestLValueName(ownerNode);\n                com.google.javascript.jscomp.Scope.Var ownerVar = null;\n                java.lang.String propName = null;\n                com.google.javascript.rhino.jstype.ObjectType ownerType = null;\n                if (ownerName != null) {\n                    ownerVar = scope.getVar(ownerName);\n                    if (ownerVar != null) {\n                        ownerType = com.google.javascript.rhino.jstype.ObjectType.cast(ownerVar.getType());\n                    }\n                    if (name != null) {\n                        propName = name.substring(ownerName.length() + 1);\n                    }\n                }\n                com.google.javascript.rhino.jstype.FunctionType overriddenPropType = null;\n                if ((ownerType != null) && (propName != null)) {\n                    overriddenPropType = findOverriddenFunction(ownerType, propName);\n                }\n                com.google.javascript.jscomp.FunctionTypeBuilder builder = new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setContents(getFunctionAnalysisResults(fnRoot)).inferFromOverriddenFunction(overriddenPropType, parametersNode).inferTemplateTypeName(info).inferReturnType(info).inferInheritance(info);\n                boolean searchedForThisType = false;\n                if ((ownerType != null) && ownerType.isFunctionPrototypeType()) {\n                    builder.inferThisType(info, ownerType.getOwnerFunction().getInstanceType());\n                    searchedForThisType = true;\n                } else if ((ownerNode != null) && ownerNode.isThis()) {\n                    builder.inferThisType(info, ownerNode.getJSType());\n                    searchedForThisType = true;\n                }\n                if (!searchedForThisType) {\n                    builder.inferThisType(info);\n                }\n                functionType = builder.inferParameterTypes(parametersNode, info).buildAndRegister();\n            }\n        }\n        return functionType;\n    }\n\n    private com.google.javascript.rhino.jstype.FunctionType findOverriddenFunction(com.google.javascript.rhino.jstype.ObjectType ownerType, java.lang.String propName) {\n        com.google.javascript.rhino.jstype.JSType propType = ownerType.getPropertyType(propName);\n        if ((propType != null) && propType.isFunctionType()) {\n            return propType.toMaybeFunctionType();\n        } else {\n            for (com.google.javascript.rhino.jstype.ObjectType iface : ownerType.getCtorImplementedInterfaces()) {\n                propType = iface.getPropertyType(propName);\n                if ((propType != null) && propType.isFunctionType()) {\n                    return propType.toMaybeFunctionType();\n                }\n            }\n        }\n        return null;\n    }\n\n    private com.google.javascript.rhino.jstype.EnumType createEnumTypeFromNodes(com.google.javascript.rhino.Node rValue, java.lang.String name, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.Node lValueNode) {\n        com.google.common.base.Preconditions.checkNotNull(info);\n        com.google.common.base.Preconditions.checkState(info.hasEnumParameterType());\n        com.google.javascript.rhino.jstype.EnumType enumType = null;\n        if ((rValue != null) && rValue.isQualifiedName()) {\n            com.google.javascript.jscomp.Scope.Var var = scope.getVar(rValue.getQualifiedName());\n            if ((var != null) && (var.getType() instanceof com.google.javascript.rhino.jstype.EnumType)) {\n                enumType = ((com.google.javascript.rhino.jstype.EnumType) (var.getType()));\n            }\n        }\n        if (enumType == null) {\n            com.google.javascript.rhino.jstype.JSType elementsType = info.getEnumParameterType().evaluate(scope, typeRegistry);\n            enumType = typeRegistry.createEnumType(name, rValue, elementsType);\n            if ((rValue != null) && rValue.isObjectLit()) {\n                com.google.javascript.rhino.Node key = rValue.getFirstChild();\n                while (key != null) {\n                    java.lang.String keyName = com.google.javascript.jscomp.NodeUtil.getStringValue(key);\n                    if (keyName == null) {\n                        compiler.report(com.google.javascript.jscomp.JSError.make(sourceName, key, com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT, keyName));\n                    } else if (!codingConvention.isValidEnumKey(keyName)) {\n                        compiler.report(com.google.javascript.jscomp.JSError.make(sourceName, key, com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT, keyName));\n                    } else {\n                        enumType.defineElement(keyName, key);\n                    }\n                    key = key.getNext();\n                } \n            }\n        }\n        if ((name != null) && scope.isGlobal()) {\n            typeRegistry.declareType(name, enumType.getElementsType());\n        }\n        return enumType;\n    }\n\n    private void defineSlot(com.google.javascript.rhino.Node name, com.google.javascript.rhino.Node parent, com.google.javascript.rhino.jstype.JSType type) {\n        defineSlot(name, parent, type, type == null);\n    }\n\n    void defineSlot(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, com.google.javascript.rhino.jstype.JSType type, boolean inferred) {\n        com.google.common.base.Preconditions.checkArgument(inferred || (type != null));\n        if (n.isName()) {\n            com.google.common.base.Preconditions.checkArgument(((parent.isFunction() || parent.isVar()) || parent.isParamList()) || parent.isCatch());\n        } else {\n            com.google.common.base.Preconditions.checkArgument(n.isGetProp() && (parent.isAssign() || parent.isExprResult()));\n        }\n        defineSlot(n, parent, n.getQualifiedName(), type, inferred);\n    }\n\n    void defineSlot(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, java.lang.String variableName, com.google.javascript.rhino.jstype.JSType type, boolean inferred) {\n        com.google.common.base.Preconditions.checkArgument(!variableName.isEmpty());\n        boolean isGlobalVar = n.isName() && scope.isGlobal();\n        boolean shouldDeclareOnGlobalThis = isGlobalVar && (parent.isVar() || parent.isFunction());\n        com.google.javascript.jscomp.Scope scopeToDeclareIn = scope;\n        if ((n.isGetProp() && (!scope.isGlobal())) && isQnameRootedInGlobalScope(n)) {\n            com.google.javascript.jscomp.Scope globalScope = scope.getGlobalScope();\n            if (!globalScope.isDeclared(variableName, false)) {\n                scopeToDeclareIn = scope.getGlobalScope();\n            }\n        }\n        boolean isExtern = n.isFromExterns();\n        com.google.javascript.jscomp.Scope.Var newVar = null;\n        com.google.javascript.jscomp.CompilerInput input = compiler.getInput(inputId);\n        if (scopeToDeclareIn.isDeclared(variableName, false)) {\n            com.google.javascript.jscomp.Scope.Var oldVar = scopeToDeclareIn.getVar(variableName);\n            newVar = validator.expectUndeclaredVariable(sourceName, input, n, parent, oldVar, variableName, type);\n        } else {\n            if (!inferred) {\n                setDeferredType(n, type);\n            }\n            newVar = scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n            if (type instanceof com.google.javascript.rhino.jstype.EnumType) {\n                com.google.javascript.rhino.Node initialValue = newVar.getInitialValue();\n                boolean isValidValue = (initialValue != null) && (initialValue.isObjectLit() || initialValue.isQualifiedName());\n                if (!isValidValue) {\n                    compiler.report(com.google.javascript.jscomp.JSError.make(sourceName, n, com.google.javascript.jscomp.TypedScopeCreator.ENUM_INITIALIZER));\n                }\n            }\n        }\n        com.google.javascript.rhino.jstype.FunctionType fnType = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(type);\n        if ((fnType != null) && (!type.isEmptyType())) {\n            if ((fnType.isConstructor() || fnType.isInterface()) && (!fnType.equals(getNativeType(com.google.javascript.jscomp.U2U_CONSTRUCTOR_TYPE)))) {\n                com.google.javascript.rhino.jstype.FunctionType superClassCtor = fnType.getSuperClassConstructor();\n                com.google.javascript.rhino.jstype.ObjectType.Property prototypeSlot = fnType.getSlot(\"prototype\");\n                prototypeSlot.setNode(n);\n                java.lang.String prototypeName = variableName + \".prototype\";\n                com.google.javascript.jscomp.Scope.Var prototypeVar = scopeToDeclareIn.getVar(prototypeName);\n                if ((prototypeVar != null) && (prototypeVar.scope == scopeToDeclareIn)) {\n                    scopeToDeclareIn.undeclare(prototypeVar);\n                }\n                scopeToDeclareIn.declare(prototypeName, n, prototypeSlot.getType(), input, (superClassCtor == null) || superClassCtor.getInstanceType().equals(getNativeType(com.google.javascript.jscomp.OBJECT_TYPE)));\n                if (((newVar.getInitialValue() == null) && (!isExtern)) && variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(com.google.javascript.jscomp.JSError.make(sourceName, n, fnType.isConstructor() ? com.google.javascript.jscomp.TypedScopeCreator.CTOR_INITIALIZER : com.google.javascript.jscomp.TypedScopeCreator.IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n        if (shouldDeclareOnGlobalThis) {\n            com.google.javascript.rhino.jstype.ObjectType globalThis = typeRegistry.getNativeObjectType(com.google.javascript.jscomp.GLOBAL_THIS);\n            if (inferred) {\n                globalThis.defineInferredProperty(variableName, type == null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n            } else {\n                globalThis.defineDeclaredProperty(variableName, type, n);\n            }\n        }\n        if ((((isGlobalVar && \"Window\".equals(variableName)) && (type != null)) && type.isFunctionType()) && type.isConstructor()) {\n            com.google.javascript.rhino.jstype.FunctionType globalThisCtor = typeRegistry.getNativeObjectType(com.google.javascript.jscomp.GLOBAL_THIS).getConstructor();\n            globalThisCtor.getInstanceType().clearCachedValues();\n            globalThisCtor.getPrototype().clearCachedValues();\n            globalThisCtor.setPrototypeBasedOn(type.toMaybeFunctionType().getInstanceType());\n        }\n    }\n\n    private boolean isQnameRootedInGlobalScope(com.google.javascript.rhino.Node n) {\n        com.google.javascript.jscomp.Scope scope = getQnameRootScope(n);\n        return (scope != null) && scope.isGlobal();\n    }\n\n    private com.google.javascript.jscomp.Scope getQnameRootScope(com.google.javascript.rhino.Node n) {\n        com.google.javascript.rhino.Node root = com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(n);\n        if (root.isName()) {\n            com.google.javascript.jscomp.Scope.Var var = scope.getVar(root.getString());\n            if (var != null) {\n                return var.getScope();\n            }\n        }\n        return null;\n    }\n\n    private com.google.javascript.rhino.jstype.JSType getDeclaredType(java.lang.String sourceName, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.Node lValue, @javax.annotation.Nullable\n    com.google.javascript.rhino.Node rValue) {\n        if ((info != null) && info.hasType()) {\n            return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n        } else if (((rValue != null) && rValue.isFunction()) && shouldUseFunctionLiteralType(com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n            return rValue.getJSType();\n        } else if (info != null) {\n            if (info.hasEnumParameterType()) {\n                if ((rValue != null) && rValue.isObjectLit()) {\n                    return rValue.getJSType();\n                } else {\n                    return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n                }\n            } else if (info.isConstructor() || info.isInterface()) {\n                return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n            } else if (info.isConstant()) {\n                com.google.javascript.rhino.jstype.JSType knownType = null;\n                if (rValue != null) {\n                    if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                        return rValue.getJSType();\n                    } else if (rValue.isOr()) {\n                        com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                        com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                        boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                        if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                            return secondClause.getJSType();\n                        }\n                    }\n                }\n            }\n        }\n        return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n    }\n\n    private com.google.javascript.rhino.jstype.FunctionType getFunctionType(@javax.annotation.Nullable\n    com.google.javascript.jscomp.Scope.Var v) {\n        com.google.javascript.rhino.jstype.JSType t = (v == null) ? null : v.getType();\n        com.google.javascript.rhino.jstype.ObjectType o = (t == null) ? null : t.dereference();\n        return com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(o);\n    }\n\n    private void checkForCallingConventionDefiningCalls(com.google.javascript.rhino.Node n, java.util.Map<java.lang.String, java.lang.String> delegateCallingConventions) {\n        codingConvention.checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n    }\n\n    private void checkForClassDefiningCalls(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {\n        com.google.javascript.jscomp.CodingConvention.SubclassRelationship relationship = codingConvention.getClassesDefinedByCall(n);\n        if (relationship != null) {\n            com.google.javascript.rhino.jstype.FunctionType superCtor = getFunctionType(scope.getVar(relationship.superclassName));\n            com.google.javascript.rhino.jstype.FunctionType subCtor = getFunctionType(scope.getVar(relationship.subclassName));\n            if ((((superCtor != null) && superCtor.isConstructor()) && (subCtor != null)) && subCtor.isConstructor()) {\n                com.google.javascript.rhino.jstype.ObjectType superClass = superCtor.getInstanceType();\n                com.google.javascript.rhino.jstype.ObjectType subClass = subCtor.getInstanceType();\n                superCtor = superClass.getConstructor();\n                subCtor = subClass.getConstructor();\n                if (((relationship.type == com.google.javascript.jscomp.CodingConvention.SubclassType.INHERITS) && (!superClass.isEmptyType())) && (!subClass.isEmptyType())) {\n                    validator.expectSuperType(t, n, superClass, subClass);\n                }\n                if ((superCtor != null) && (subCtor != null)) {\n                    codingConvention.applySubclassRelationship(superCtor, subCtor, relationship.type);\n                }\n            }\n        }\n        java.lang.String singletonGetterClassName = codingConvention.getSingletonGetterClassName(n);\n        if (singletonGetterClassName != null) {\n            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(typeRegistry.getType(singletonGetterClassName));\n            if (objectType != null) {\n                com.google.javascript.rhino.jstype.FunctionType functionType = objectType.getConstructor();\n                if (functionType != null) {\n                    com.google.javascript.rhino.jstype.FunctionType getterType = typeRegistry.createFunctionType(objectType);\n                    codingConvention.applySingletonGetter(functionType, getterType, objectType);\n                }\n            }\n        }\n        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship = codingConvention.getDelegateRelationship(n);\n        if (delegateRelationship != null) {\n            applyDelegateRelationship(delegateRelationship);\n        }\n        com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast = codingConvention.getObjectLiteralCast(t, n);\n        if (objectLiteralCast != null) {\n            com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(typeRegistry.getType(objectLiteralCast.typeName));\n            if ((type != null) && (type.getConstructor() != null)) {\n                setDeferredType(objectLiteralCast.objectNode, type);\n            } else {\n                compiler.report(com.google.javascript.jscomp.JSError.make(t.getSourceName(), n, com.google.javascript.jscomp.TypedScopeCreator.CONSTRUCTOR_EXPECTED));\n            }\n        }\n    }\n\n    private void applyDelegateRelationship(com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship) {\n        com.google.javascript.rhino.jstype.ObjectType delegatorObject = com.google.javascript.rhino.jstype.ObjectType.cast(typeRegistry.getType(delegateRelationship.delegator));\n        com.google.javascript.rhino.jstype.ObjectType delegateBaseObject = com.google.javascript.rhino.jstype.ObjectType.cast(typeRegistry.getType(delegateRelationship.delegateBase));\n        com.google.javascript.rhino.jstype.ObjectType delegateSuperObject = com.google.javascript.rhino.jstype.ObjectType.cast(typeRegistry.getType(codingConvention.getDelegateSuperclassName()));\n        if (((delegatorObject != null) && (delegateBaseObject != null)) && (delegateSuperObject != null)) {\n            com.google.javascript.rhino.jstype.FunctionType delegatorCtor = delegatorObject.getConstructor();\n            com.google.javascript.rhino.jstype.FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();\n            com.google.javascript.rhino.jstype.FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();\n            if (((delegatorCtor != null) && (delegateBaseCtor != null)) && (delegateSuperCtor != null)) {\n                com.google.javascript.rhino.jstype.FunctionParamBuilder functionParamBuilder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(typeRegistry);\n                functionParamBuilder.addRequiredParams(getNativeType(com.google.javascript.jscomp.U2U_CONSTRUCTOR_TYPE));\n                com.google.javascript.rhino.jstype.FunctionType findDelegate = typeRegistry.createFunctionType(typeRegistry.createDefaultObjectUnion(delegateBaseObject), functionParamBuilder.build());\n                com.google.javascript.rhino.jstype.FunctionType delegateProxy = typeRegistry.createConstructorType(delegateBaseObject.getReferenceName() + com.google.javascript.jscomp.TypedScopeCreator.DELEGATE_PROXY_SUFFIX, null, null, null);\n                delegateProxy.setPrototypeBasedOn(delegateBaseObject);\n                codingConvention.applyDelegateRelationship(delegateSuperObject, delegateBaseObject, delegatorObject, delegateProxy, findDelegate);\n                delegateProxyPrototypes.add(delegateProxy.getPrototype());\n            }\n        }\n    }\n\n    void maybeDeclareQualifiedName(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node rhsValue) {\n        com.google.javascript.rhino.Node ownerNode = n.getFirstChild();\n        java.lang.String ownerName = ownerNode.getQualifiedName();\n        java.lang.String qName = n.getQualifiedName();\n        java.lang.String propName = n.getLastChild().getString();\n        com.google.common.base.Preconditions.checkArgument((qName != null) && (ownerName != null));\n        com.google.javascript.rhino.jstype.JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);\n        if ((valueType == null) && (rhsValue != null)) {\n            valueType = rhsValue.getJSType();\n        }\n        if (\"prototype\".equals(propName)) {\n            com.google.javascript.jscomp.Scope.Var qVar = scope.getVar(qName);\n            if (qVar != null) {\n                com.google.javascript.rhino.jstype.ObjectType qVarType = com.google.javascript.rhino.jstype.ObjectType.cast(qVar.getType());\n                if (((qVarType != null) && (rhsValue != null)) && rhsValue.isObjectLit()) {\n                    typeRegistry.resetImplicitPrototype(rhsValue.getJSType(), qVarType.getImplicitPrototype());\n                } else if (!qVar.isTypeInferred()) {\n                    return;\n                }\n                if (qVar.getScope() == scope) {\n                    scope.undeclare(qVar);\n                }\n            }\n        }\n        if (valueType == null) {\n            if (parent.isExprResult()) {\n                stubDeclarations.add(new com.google.javascript.jscomp.TypedScopeCreator.StubDeclaration(n, (t.getInput() != null) && t.getInput().isExtern(), ownerName));\n            }\n            return;\n        }\n        boolean inferred = isQualifiedNameInferred(qName, n, info, rhsValue, valueType);\n        if (!inferred) {\n            com.google.javascript.rhino.jstype.ObjectType ownerType = getObjectSlot(ownerName);\n            if (ownerType != null) {\n                boolean isExtern = (t.getInput() != null) && t.getInput().isExtern();\n                if (((!ownerType.hasOwnProperty(propName)) || ownerType.isPropertyTypeInferred(propName)) && ((isExtern && (!ownerType.isNativeObjectType())) || (!ownerType.isInstanceType()))) {\n                    ownerType.defineDeclaredProperty(propName, valueType, n);\n                }\n            }\n            defineSlot(n, parent, valueType, inferred);\n        } else if ((rhsValue != null) && rhsValue.isTrue()) {\n            com.google.javascript.rhino.jstype.FunctionType ownerType = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(getObjectSlot(ownerName));\n            if (ownerType != null) {\n                com.google.javascript.rhino.jstype.JSType ownerTypeOfThis = ownerType.getTypeOfThis();\n                java.lang.String delegateName = codingConvention.getDelegateSuperclassName();\n                com.google.javascript.rhino.jstype.JSType delegateType = (delegateName == null) ? null : typeRegistry.getType(delegateName);\n                if ((delegateType != null) && ownerTypeOfThis.isSubtype(delegateType)) {\n                    defineSlot(n, parent, getNativeType(com.google.javascript.jscomp.BOOLEAN_TYPE), true);\n                }\n            }\n        }\n    }\n\n    private boolean isQualifiedNameInferred(java.lang.String qName, com.google.javascript.rhino.Node n, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.Node rhsValue, com.google.javascript.rhino.jstype.JSType valueType) {\n        if (valueType == null) {\n            return true;\n        }\n        boolean inferred = true;\n        if (info != null) {\n            inferred = !(((info.hasType() || info.hasEnumParameterType()) || ((info.isConstant() && (valueType != null)) && (!valueType.isUnknownType()))) || com.google.javascript.jscomp.FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n        }\n        if ((inferred && (rhsValue != null)) && rhsValue.isFunction()) {\n            if (info != null) {\n                inferred = false;\n            } else if ((!scope.isDeclared(qName, false)) && n.isUnscopedQualifiedName()) {\n                inferred = false;\n            }\n        }\n        return inferred;\n    }\n\n    private com.google.javascript.rhino.jstype.ObjectType getObjectSlot(java.lang.String slotName) {\n        com.google.javascript.jscomp.Scope.Var ownerVar = scope.getVar(slotName);\n        if (ownerVar != null) {\n            com.google.javascript.rhino.jstype.JSType ownerVarType = ownerVar.getType();\n            return com.google.javascript.rhino.jstype.ObjectType.cast(ownerVarType == null ? null : ownerVarType.restrictByNotNullOrUndefined());\n        }\n        return null;\n    }\n\n    void resolveStubDeclarations() {\n        for (com.google.javascript.jscomp.TypedScopeCreator.StubDeclaration stub : stubDeclarations) {\n            com.google.javascript.rhino.Node n = stub.node;\n            com.google.javascript.rhino.Node parent = n.getParent();\n            java.lang.String qName = n.getQualifiedName();\n            java.lang.String propName = n.getLastChild().getString();\n            java.lang.String ownerName = stub.ownerName;\n            boolean isExtern = stub.isExtern;\n            if (scope.isDeclared(qName, false)) {\n                continue;\n            }\n            com.google.javascript.rhino.jstype.ObjectType ownerType = getObjectSlot(ownerName);\n            com.google.javascript.rhino.jstype.ObjectType unknownType = typeRegistry.getNativeObjectType(com.google.javascript.jscomp.UNKNOWN_TYPE);\n            defineSlot(n, parent, unknownType, true);\n            if ((ownerType != null) && (isExtern || ownerType.isFunctionPrototypeType())) {\n                ownerType.defineInferredProperty(propName, unknownType, n);\n            } else {\n                typeRegistry.registerPropertyOnType(propName, ownerType == null ? unknownType : ownerType);\n            }\n        }\n    }\n\n    private final class CollectProperties extends com.google.javascript.jscomp.NodeTraversal.AbstractShallowStatementCallback {\n        private final com.google.javascript.rhino.jstype.ObjectType thisType;\n\n        CollectProperties(com.google.javascript.rhino.jstype.ObjectType thisType) {\n            this.thisType = thisType;\n        }\n\n        @java.lang.Override\n        public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {\n            if (n.isExprResult()) {\n                com.google.javascript.rhino.Node child = n.getFirstChild();\n                switch (child.getType()) {\n                    case com.google.javascript.rhino.Token.ASSIGN :\n                        maybeCollectMember(t, child.getFirstChild(), child, child.getLastChild());\n                        break;\n                    case com.google.javascript.rhino.Token.GETPROP :\n                        maybeCollectMember(t, child, child, null);\n                        break;\n                }\n            }\n        }\n\n        private void maybeCollectMember(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node member, com.google.javascript.rhino.Node nodeWithJsDocInfo, @javax.annotation.Nullable\n        com.google.javascript.rhino.Node value) {\n            com.google.javascript.rhino.JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();\n            if (((info == null) || (!member.isGetProp())) || (!member.getFirstChild().isThis())) {\n                return;\n            }\n            member.getFirstChild().setJSType(thisType);\n            com.google.javascript.rhino.jstype.JSType jsType = getDeclaredType(t.getSourceName(), info, member, value);\n            com.google.javascript.rhino.Node name = member.getLastChild();\n            if ((jsType != null) && (name.isName() || name.isString())) {\n                thisType.defineDeclaredProperty(name.getString(), jsType, member);\n            }\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Switch",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (((n.getParent() != null) && com.google.javascript.jscomp.NodeUtil.isStatement(n)) && (lentObjectLiterals != null)) {\n    for (com.google.javascript.rhino.Node objLit : lentObjectLiterals) {\n        defineObjectLiteral(objLit);\n    }\n    lentObjectLiterals.clear();\n}",
            "src_parent": "{\n    inputId = t.getInputId();\n    attachLiteralTypes(t, n);\n    switch (n.getType()) {\n        case com.google.javascript.rhino.Token.CALL :\n            checkForClassDefiningCalls(t, n, parent);\n            checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n            break;\n        case com.google.javascript.rhino.Token.FUNCTION :\n            if ((t.getInput() == null) || (!t.getInput().isExtern())) {\n                nonExternFunctions.add(n);\n            }\n            if (!com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(n)) {\n                defineFunctionLiteral(n, parent);\n            }\n            break;\n        case com.google.javascript.rhino.Token.ASSIGN :\n            com.google.javascript.rhino.Node firstChild = n.getFirstChild();\n            if (firstChild.isGetProp() && firstChild.isQualifiedName()) {\n                maybeDeclareQualifiedName(t, n.getJSDocInfo(), firstChild, n, firstChild.getNext());\n            }\n            break;\n        case com.google.javascript.rhino.Token.CATCH :\n            defineCatch(n, parent);\n            break;\n        case com.google.javascript.rhino.Token.VAR :\n            defineVar(n, parent);\n            break;\n        case com.google.javascript.rhino.Token.GETPROP :\n            if (parent.isExprResult() && n.isQualifiedName()) {\n                maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n            }\n            break;\n    }\n    if (((n.getParent() != null) && com.google.javascript.jscomp.NodeUtil.isStatement(n)) && (lentObjectLiterals != null)) {\n        for (com.google.javascript.rhino.Node objLit : lentObjectLiterals) {\n            defineObjectLiteral(objLit);\n        }\n        lentObjectLiterals.clear();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo()",
            "src_parent": "case com.google.javascript.rhino.Token.OBJECTLIT :\n    com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();\n    if ((info != null) && (info.getLendsName() != null)) {\n        if (lentObjectLiterals == null) {\n            lentObjectLiterals = com.google.common.collect.Lists.newArrayList();\n        }\n        lentObjectLiterals.add(n);\n    } else {\n        defineObjectLiteral(n);\n    }\n    break;",
            "src_parent_type": "Case",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if ((info != null) && (info.getLendsName() != null)) {\n    if (lentObjectLiterals == null) {\n        lentObjectLiterals = com.google.common.collect.Lists.newArrayList();\n    }\n    lentObjectLiterals.add(n);\n} else {\n    defineObjectLiteral(n);\n}",
            "src_parent": "case com.google.javascript.rhino.Token.OBJECTLIT :\n    com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();\n    if ((info != null) && (info.getLendsName() != null)) {\n        if (lentObjectLiterals == null) {\n            lentObjectLiterals = com.google.common.collect.Lists.newArrayList();\n        }\n        lentObjectLiterals.add(n);\n    } else {\n        defineObjectLiteral(n);\n    }\n    break;",
            "src_parent_type": "Case",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Break",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "defineObjectLiteral(n)",
            "dst_parent": "case com.google.javascript.rhino.Token.OBJECTLIT :\n    defineObjectLiteral(n);\n    break;",
            "dst_parent_type": "Case",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "defineObjectLiteral(n)",
            "src_parent": "{\n    defineObjectLiteral(n);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "TypedScopeCreator"
    }
  ],
  "id": "Closure_43"
}