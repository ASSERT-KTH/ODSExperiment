{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (cal.get(java.util.Calendar.ERA) == java.util.GregorianCalendar.BC) {\n    _formatBCEYear(buffer, year);\n} else {\n    if (year > 9999) {\n        buffer.append('+');\n    }\n    com.fasterxml.jackson.databind.util.StdDateFormat.pad4(buffer, year);\n}",
            "src_parent": "{\n    java.util.Calendar cal = _getCalendar(tz);\n    cal.setTime(date);\n    final int year = cal.get(java.util.Calendar.YEAR);\n    if (cal.get(java.util.Calendar.ERA) == java.util.GregorianCalendar.BC) {\n        _formatBCEYear(buffer, year);\n    } else {\n        if (year > 9999) {\n            buffer.append('+');\n        }\n        com.fasterxml.jackson.databind.util.StdDateFormat.pad4(buffer, year);\n    }\n    buffer.append('-');\n    com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, cal.get(java.util.Calendar.MONTH) + 1);\n    buffer.append('-');\n    com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, cal.get(java.util.Calendar.DAY_OF_MONTH));\n    buffer.append('T');\n    com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, cal.get(java.util.Calendar.HOUR_OF_DAY));\n    buffer.append(':');\n    com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, cal.get(java.util.Calendar.MINUTE));\n    buffer.append(':');\n    com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, cal.get(java.util.Calendar.SECOND));\n    buffer.append('.');\n    com.fasterxml.jackson.databind.util.StdDateFormat.pad3(buffer, cal.get(java.util.Calendar.MILLISECOND));\n    int offset = tz.getOffset(cal.getTimeInMillis());\n    if (offset != 0) {\n        int hours = java.lang.Math.abs((offset / (60 * 1000)) / 60);\n        int minutes = java.lang.Math.abs((offset / (60 * 1000)) % 60);\n        buffer.append(offset < 0 ? '-' : '+');\n        com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, hours);\n        if (_tzSerializedWithColon) {\n            buffer.append(':');\n        }\n        com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, minutes);\n    } else if (_tzSerializedWithColon) {\n        buffer.append(\"+00:00\");\n    } else {\n        buffer.append(\"+0000\");\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "protected void _formatBCEYear(java.lang.StringBuffer buffer, int bceYearNoSign) {\n    if (bceYearNoSign == 1) {\n        buffer.append(\"+0000\");\n        return;\n    }\n    final int isoYear = bceYearNoSign - 1;\n    buffer.append('-');\n    com.fasterxml.jackson.databind.util.StdDateFormat.pad4(buffer, isoYear);\n}",
            "src_parent": "@java.lang.SuppressWarnings(\"serial\")\npublic class StdDateFormat extends java.text.DateFormat {\n    protected static final java.lang.String PATTERN_PLAIN_STR = \"\\\\d\\\\d\\\\d\\\\d[-]\\\\d\\\\d[-]\\\\d\\\\d\";\n\n    protected static final java.util.regex.Pattern PATTERN_PLAIN = java.util.regex.Pattern.compile(com.fasterxml.jackson.databind.util.StdDateFormat.PATTERN_PLAIN_STR);\n\n    protected static final java.util.regex.Pattern PATTERN_ISO8601;\n\n    static {\n        java.util.regex.Pattern p = null;\n        try {\n            p = java.util.regex.Pattern.compile(((PATTERN_PLAIN_STR + \"[T]\\\\d\\\\d[:]\\\\d\\\\d(?:[:]\\\\d\\\\d)?\") + \"(\\\\.\\\\d+)?\") + \"(Z|[+-]\\\\d\\\\d(?:[:]?\\\\d\\\\d)?)?\");\n        } catch (java.lang.Throwable t) {\n            throw new java.lang.RuntimeException(t);\n        }\n        PATTERN_ISO8601 = p;\n    }\n\n    public static final java.lang.String DATE_FORMAT_STR_ISO8601 = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";\n\n    protected static final java.lang.String DATE_FORMAT_STR_PLAIN = \"yyyy-MM-dd\";\n\n    protected static final java.lang.String DATE_FORMAT_STR_RFC1123 = \"EEE, dd MMM yyyy HH:mm:ss zzz\";\n\n    protected static final java.lang.String[] ALL_FORMATS = new java.lang.String[]{ com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601, \"yyyy-MM-dd'T'HH:mm:ss.SSS\", com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_RFC1123, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_PLAIN };\n\n    protected static final java.util.TimeZone DEFAULT_TIMEZONE;\n\n    static {\n        DEFAULT_TIMEZONE = java.util.TimeZone.getTimeZone(\"UTC\");\n    }\n\n    protected static final java.util.Locale DEFAULT_LOCALE = java.util.Locale.US;\n\n    protected static final java.text.DateFormat DATE_FORMAT_RFC1123;\n\n    protected static final java.text.DateFormat DATE_FORMAT_ISO8601;\n\n    static {\n        DATE_FORMAT_RFC1123 = new java.text.SimpleDateFormat(DATE_FORMAT_STR_RFC1123, DEFAULT_LOCALE);\n        DATE_FORMAT_RFC1123.setTimeZone(DEFAULT_TIMEZONE);\n        DATE_FORMAT_ISO8601 = new java.text.SimpleDateFormat(DATE_FORMAT_STR_ISO8601, DEFAULT_LOCALE);\n        DATE_FORMAT_ISO8601.setTimeZone(DEFAULT_TIMEZONE);\n    }\n\n    public static final com.fasterxml.jackson.databind.util.StdDateFormat instance = new com.fasterxml.jackson.databind.util.StdDateFormat();\n\n    protected static final java.util.Calendar CALENDAR = new java.util.GregorianCalendar(com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE, com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_LOCALE);\n\n    protected transient java.util.TimeZone _timezone;\n\n    protected final java.util.Locale _locale;\n\n    protected java.lang.Boolean _lenient;\n\n    private transient java.util.Calendar _calendar;\n\n    private transient java.text.DateFormat _formatRFC1123;\n\n    private boolean _tzSerializedWithColon = false;\n\n    public StdDateFormat() {\n        _locale = com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_LOCALE;\n    }\n\n    @java.lang.Deprecated\n    public StdDateFormat(java.util.TimeZone tz, java.util.Locale loc) {\n        _timezone = tz;\n        _locale = loc;\n    }\n\n    protected StdDateFormat(java.util.TimeZone tz, java.util.Locale loc, java.lang.Boolean lenient) {\n        this(tz, loc, lenient, false);\n    }\n\n    protected StdDateFormat(java.util.TimeZone tz, java.util.Locale loc, java.lang.Boolean lenient, boolean formatTzOffsetWithColon) {\n        _timezone = tz;\n        _locale = loc;\n        _lenient = lenient;\n        _tzSerializedWithColon = formatTzOffsetWithColon;\n    }\n\n    public static java.util.TimeZone getDefaultTimeZone() {\n        return com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE;\n    }\n\n    public com.fasterxml.jackson.databind.util.StdDateFormat withTimeZone(java.util.TimeZone tz) {\n        if (tz == null) {\n            tz = com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE;\n        }\n        if ((tz == _timezone) || tz.equals(_timezone)) {\n            return this;\n        }\n        return new com.fasterxml.jackson.databind.util.StdDateFormat(tz, _locale, _lenient, _tzSerializedWithColon);\n    }\n\n    public com.fasterxml.jackson.databind.util.StdDateFormat withLocale(java.util.Locale loc) {\n        if (loc.equals(_locale)) {\n            return this;\n        }\n        return new com.fasterxml.jackson.databind.util.StdDateFormat(_timezone, loc, _lenient, _tzSerializedWithColon);\n    }\n\n    public com.fasterxml.jackson.databind.util.StdDateFormat withLenient(java.lang.Boolean b) {\n        if (com.fasterxml.jackson.databind.util.StdDateFormat._equals(b, _lenient)) {\n            return this;\n        }\n        return new com.fasterxml.jackson.databind.util.StdDateFormat(_timezone, _locale, b, _tzSerializedWithColon);\n    }\n\n    public com.fasterxml.jackson.databind.util.StdDateFormat withColonInTimeZone(boolean b) {\n        if (_tzSerializedWithColon == b) {\n            return this;\n        }\n        return new com.fasterxml.jackson.databind.util.StdDateFormat(_timezone, _locale, _lenient, b);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.util.StdDateFormat clone() {\n        return new com.fasterxml.jackson.databind.util.StdDateFormat(_timezone, _locale, _lenient, _tzSerializedWithColon);\n    }\n\n    @java.lang.Deprecated\n    public static java.text.DateFormat getISO8601Format(java.util.TimeZone tz, java.util.Locale loc) {\n        return com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_ISO8601, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601, tz, loc, null);\n    }\n\n    @java.lang.Deprecated\n    public static java.text.DateFormat getRFC1123Format(java.util.TimeZone tz, java.util.Locale loc) {\n        return com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_RFC1123, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_RFC1123, tz, loc, null);\n    }\n\n    @java.lang.Override\n    public java.util.TimeZone getTimeZone() {\n        return _timezone;\n    }\n\n    @java.lang.Override\n    public void setTimeZone(java.util.TimeZone tz) {\n        if (!tz.equals(_timezone)) {\n            _clearFormats();\n            _timezone = tz;\n        }\n    }\n\n    @java.lang.Override\n    public void setLenient(boolean enabled) {\n        java.lang.Boolean newValue = java.lang.Boolean.valueOf(enabled);\n        if (!com.fasterxml.jackson.databind.util.StdDateFormat._equals(newValue, _lenient)) {\n            _lenient = newValue;\n            _clearFormats();\n        }\n    }\n\n    @java.lang.Override\n    public boolean isLenient() {\n        return (_lenient == null) || _lenient.booleanValue();\n    }\n\n    public boolean isColonIncludedInTimeZone() {\n        return _tzSerializedWithColon;\n    }\n\n    @java.lang.Override\n    public java.util.Date parse(java.lang.String dateStr) throws java.text.ParseException {\n        dateStr = dateStr.trim();\n        java.text.ParsePosition pos = new java.text.ParsePosition(0);\n        java.util.Date dt = _parseDate(dateStr, pos);\n        if (dt != null) {\n            return dt;\n        }\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        for (java.lang.String f : com.fasterxml.jackson.databind.util.StdDateFormat.ALL_FORMATS) {\n            if (sb.length() > 0) {\n                sb.append(\"\\\", \\\"\");\n            } else {\n                sb.append('\"');\n            }\n            sb.append(f);\n        }\n        sb.append('\"');\n        throw new java.text.ParseException(java.lang.String.format(\"Cannot parse date \\\"%s\\\": not compatible with any of standard forms (%s)\", dateStr, sb.toString()), pos.getErrorIndex());\n    }\n\n    @java.lang.Override\n    public java.util.Date parse(java.lang.String dateStr, java.text.ParsePosition pos) {\n        try {\n            return _parseDate(dateStr, pos);\n        } catch (java.text.ParseException e) {\n        }\n        return null;\n    }\n\n    protected java.util.Date _parseDate(java.lang.String dateStr, java.text.ParsePosition pos) throws java.text.ParseException {\n        if (looksLikeISO8601(dateStr)) {\n            return parseAsISO8601(dateStr, pos);\n        }\n        int i = dateStr.length();\n        while ((--i) >= 0) {\n            char ch = dateStr.charAt(i);\n            if ((ch < '0') || (ch > '9')) {\n                if ((i > 0) || (ch != '-')) {\n                    break;\n                }\n            }\n        } \n        if ((i < 0) && ((dateStr.charAt(0) == '-') || com.fasterxml.jackson.core.io.NumberInput.inLongRange(dateStr, false))) {\n            return _parseDateFromLong(dateStr, pos);\n        }\n        return parseAsRFC1123(dateStr, pos);\n    }\n\n    @java.lang.Override\n    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer toAppendTo, java.text.FieldPosition fieldPosition) {\n        java.util.TimeZone tz = _timezone;\n        if (tz == null) {\n            tz = com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE;\n        }\n        _format(tz, _locale, date, toAppendTo);\n        return toAppendTo;\n    }\n\n    protected void _format(java.util.TimeZone tz, java.util.Locale loc, java.util.Date date, java.lang.StringBuffer buffer) {\n        java.util.Calendar cal = _getCalendar(tz);\n        cal.setTime(date);\n        final int year = cal.get(java.util.Calendar.YEAR);\n        if (cal.get(java.util.Calendar.ERA) == java.util.GregorianCalendar.BC) {\n            _formatBCEYear(buffer, year);\n        } else {\n            if (year > 9999) {\n                buffer.append('+');\n            }\n            com.fasterxml.jackson.databind.util.StdDateFormat.pad4(buffer, year);\n        }\n        buffer.append('-');\n        com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, cal.get(java.util.Calendar.MONTH) + 1);\n        buffer.append('-');\n        com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, cal.get(java.util.Calendar.DAY_OF_MONTH));\n        buffer.append('T');\n        com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, cal.get(java.util.Calendar.HOUR_OF_DAY));\n        buffer.append(':');\n        com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, cal.get(java.util.Calendar.MINUTE));\n        buffer.append(':');\n        com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, cal.get(java.util.Calendar.SECOND));\n        buffer.append('.');\n        com.fasterxml.jackson.databind.util.StdDateFormat.pad3(buffer, cal.get(java.util.Calendar.MILLISECOND));\n        int offset = tz.getOffset(cal.getTimeInMillis());\n        if (offset != 0) {\n            int hours = java.lang.Math.abs((offset / (60 * 1000)) / 60);\n            int minutes = java.lang.Math.abs((offset / (60 * 1000)) % 60);\n            buffer.append(offset < 0 ? '-' : '+');\n            com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, hours);\n            if (_tzSerializedWithColon) {\n                buffer.append(':');\n            }\n            com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, minutes);\n        } else if (_tzSerializedWithColon) {\n            buffer.append(\"+00:00\");\n        } else {\n            buffer.append(\"+0000\");\n        }\n    }\n\n    protected void _formatBCEYear(java.lang.StringBuffer buffer, int bceYearNoSign) {\n        if (bceYearNoSign == 1) {\n            buffer.append(\"+0000\");\n            return;\n        }\n        final int isoYear = bceYearNoSign - 1;\n        buffer.append('-');\n        com.fasterxml.jackson.databind.util.StdDateFormat.pad4(buffer, isoYear);\n    }\n\n    private static void pad2(java.lang.StringBuffer buffer, int value) {\n        int tens = value / 10;\n        if (tens == 0) {\n            buffer.append('0');\n        } else {\n            buffer.append(((char) ('0' + tens)));\n            value -= 10 * tens;\n        }\n        buffer.append(((char) ('0' + value)));\n    }\n\n    private static void pad3(java.lang.StringBuffer buffer, int value) {\n        int h = value / 100;\n        if (h == 0) {\n            buffer.append('0');\n        } else {\n            buffer.append(((char) ('0' + h)));\n            value -= h * 100;\n        }\n        com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, value);\n    }\n\n    private static void pad4(java.lang.StringBuffer buffer, int value) {\n        int h = value / 100;\n        if (h == 0) {\n            buffer.append('0').append('0');\n        } else {\n            if (h > 99) {\n                buffer.append(h);\n            } else {\n                com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, h);\n            }\n            value -= 100 * h;\n        }\n        com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, value);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return java.lang.String.format(\"DateFormat %s: (timezone: %s, locale: %s, lenient: %s)\", getClass().getName(), _timezone, _locale, _lenient);\n    }\n\n    public java.lang.String toPattern() {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder(100);\n        sb.append(\"[one of: '\").append(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601).append(\"', '\").append(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_RFC1123).append(\"' (\");\n        sb.append(java.lang.Boolean.FALSE.equals(_lenient) ? \"strict\" : \"lenient\").append(\")]\");\n        return sb.toString();\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        return o == this;\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return java.lang.System.identityHashCode(this);\n    }\n\n    protected boolean looksLikeISO8601(java.lang.String dateStr) {\n        if (((((dateStr.length() >= 7) && java.lang.Character.isDigit(dateStr.charAt(0))) && java.lang.Character.isDigit(dateStr.charAt(3))) && (dateStr.charAt(4) == '-')) && java.lang.Character.isDigit(dateStr.charAt(5))) {\n            return true;\n        }\n        return false;\n    }\n\n    private java.util.Date _parseDateFromLong(java.lang.String longStr, java.text.ParsePosition pos) throws java.text.ParseException {\n        long ts;\n        try {\n            ts = com.fasterxml.jackson.core.io.NumberInput.parseLong(longStr);\n        } catch (java.lang.NumberFormatException e) {\n            throw new java.text.ParseException(java.lang.String.format(\"Timestamp value %s out of 64-bit value range\", longStr), pos.getErrorIndex());\n        }\n        return new java.util.Date(ts);\n    }\n\n    protected java.util.Date parseAsISO8601(java.lang.String dateStr, java.text.ParsePosition pos) throws java.text.ParseException {\n        try {\n            return _parseAsISO8601(dateStr, pos);\n        } catch (java.lang.IllegalArgumentException e) {\n            throw new java.text.ParseException(java.lang.String.format(\"Cannot parse date \\\"%s\\\", problem: %s\", dateStr, e.getMessage()), pos.getErrorIndex());\n        }\n    }\n\n    protected java.util.Date _parseAsISO8601(java.lang.String dateStr, java.text.ParsePosition bogus) throws java.lang.IllegalArgumentException, java.text.ParseException {\n        final int totalLen = dateStr.length();\n        java.util.TimeZone tz = com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE;\n        if ((_timezone != null) && ('Z' != dateStr.charAt(totalLen - 1))) {\n            tz = _timezone;\n        }\n        java.util.Calendar cal = _getCalendar(tz);\n        cal.clear();\n        java.lang.String formatStr;\n        if (totalLen <= 10) {\n            java.util.regex.Matcher m = com.fasterxml.jackson.databind.util.StdDateFormat.PATTERN_PLAIN.matcher(dateStr);\n            if (m.matches()) {\n                int year = com.fasterxml.jackson.databind.util.StdDateFormat._parse4D(dateStr, 0);\n                int month = com.fasterxml.jackson.databind.util.StdDateFormat._parse2D(dateStr, 5) - 1;\n                int day = com.fasterxml.jackson.databind.util.StdDateFormat._parse2D(dateStr, 8);\n                cal.set(year, month, day, 0, 0, 0);\n                cal.set(java.util.Calendar.MILLISECOND, 0);\n                return cal.getTime();\n            }\n            formatStr = com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_PLAIN;\n        } else {\n            java.util.regex.Matcher m = com.fasterxml.jackson.databind.util.StdDateFormat.PATTERN_ISO8601.matcher(dateStr);\n            if (m.matches()) {\n                int start = m.start(2);\n                int end = m.end(2);\n                int len = end - start;\n                if (len > 1) {\n                    int offsetSecs = com.fasterxml.jackson.databind.util.StdDateFormat._parse2D(dateStr, start + 1) * 3600;\n                    if (len >= 5) {\n                        offsetSecs += com.fasterxml.jackson.databind.util.StdDateFormat._parse2D(dateStr, end - 2) * 60;\n                    }\n                    if (dateStr.charAt(start) == '-') {\n                        offsetSecs *= -1000;\n                    } else {\n                        offsetSecs *= 1000;\n                    }\n                    cal.set(java.util.Calendar.ZONE_OFFSET, offsetSecs);\n                    cal.set(java.util.Calendar.DST_OFFSET, 0);\n                }\n                int year = com.fasterxml.jackson.databind.util.StdDateFormat._parse4D(dateStr, 0);\n                int month = com.fasterxml.jackson.databind.util.StdDateFormat._parse2D(dateStr, 5) - 1;\n                int day = com.fasterxml.jackson.databind.util.StdDateFormat._parse2D(dateStr, 8);\n                int hour = com.fasterxml.jackson.databind.util.StdDateFormat._parse2D(dateStr, 11);\n                int minute = com.fasterxml.jackson.databind.util.StdDateFormat._parse2D(dateStr, 14);\n                int seconds;\n                if ((totalLen > 16) && (dateStr.charAt(16) == ':')) {\n                    seconds = com.fasterxml.jackson.databind.util.StdDateFormat._parse2D(dateStr, 17);\n                } else {\n                    seconds = 0;\n                }\n                cal.set(year, month, day, hour, minute, seconds);\n                start = m.start(1) + 1;\n                end = m.end(1);\n                int msecs = 0;\n                if (start >= end) {\n                    cal.set(java.util.Calendar.MILLISECOND, 0);\n                } else {\n                    msecs = 0;\n                    final int fractLen = end - start;\n                    switch (fractLen) {\n                        default :\n                            if (fractLen > 9) {\n                                throw new java.text.ParseException(java.lang.String.format(\"Cannot parse date \\\"%s\\\": invalid fractional seconds \\'%s\\'; can use at most 9 digits\", dateStr, m.group(1).substring(1)), start);\n                            }\n                        case 3 :\n                            msecs += dateStr.charAt(start + 2) - '0';\n                        case 2 :\n                            msecs += 10 * (dateStr.charAt(start + 1) - '0');\n                        case 1 :\n                            msecs += 100 * (dateStr.charAt(start) - '0');\n                            break;\n                        case 0 :\n                            break;\n                    }\n                    cal.set(java.util.Calendar.MILLISECOND, msecs);\n                }\n                return cal.getTime();\n            }\n            formatStr = com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_ISO8601;\n        }\n        throw new java.text.ParseException(java.lang.String.format(\"Cannot parse date \\\"%s\\\": while it seems to fit format \\'%s\\', parsing fails (leniency? %s)\", dateStr, formatStr, _lenient), 0);\n    }\n\n    private static int _parse4D(java.lang.String str, int index) {\n        return (((1000 * (str.charAt(index) - '0')) + (100 * (str.charAt(index + 1) - '0'))) + (10 * (str.charAt(index + 2) - '0'))) + (str.charAt(index + 3) - '0');\n    }\n\n    private static int _parse2D(java.lang.String str, int index) {\n        return (10 * (str.charAt(index) - '0')) + (str.charAt(index + 1) - '0');\n    }\n\n    protected java.util.Date parseAsRFC1123(java.lang.String dateStr, java.text.ParsePosition pos) {\n        if (_formatRFC1123 == null) {\n            _formatRFC1123 = com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_RFC1123, com.fasterxml.jackson.databind.util.StdDateFormat.DATE_FORMAT_STR_RFC1123, _timezone, _locale, _lenient);\n        }\n        return _formatRFC1123.parse(dateStr, pos);\n    }\n\n    private static final java.text.DateFormat _cloneFormat(java.text.DateFormat df, java.lang.String format, java.util.TimeZone tz, java.util.Locale loc, java.lang.Boolean lenient) {\n        if (!loc.equals(com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_LOCALE)) {\n            df = new java.text.SimpleDateFormat(format, loc);\n            df.setTimeZone(tz == null ? com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE : tz);\n        } else {\n            df = ((java.text.DateFormat) (df.clone()));\n            if (tz != null) {\n                df.setTimeZone(tz);\n            }\n        }\n        if (lenient != null) {\n            df.setLenient(lenient.booleanValue());\n        }\n        return df;\n    }\n\n    protected void _clearFormats() {\n        _formatRFC1123 = null;\n    }\n\n    protected java.util.Calendar _getCalendar(java.util.TimeZone tz) {\n        java.util.Calendar cal = _calendar;\n        if (cal == null) {\n            _calendar = cal = ((java.util.Calendar) (com.fasterxml.jackson.databind.util.StdDateFormat.CALENDAR.clone()));\n        }\n        if (!cal.getTimeZone().equals(tz)) {\n            cal.setTimeZone(tz);\n        }\n        cal.setLenient(isLenient());\n        return cal;\n    }\n\n    protected static <T> boolean _equals(T value1, T value2) {\n        if (value1 == value2) {\n            return true;\n        }\n        return (value1 != null) && value1.equals(value2);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    if (h > 99) {\n        buffer.append(h);\n    } else {\n        com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, h);\n    }\n    value -= 100 * h;\n}",
            "src_parent": "if (h == 0) {\n    buffer.append('0').append('0');\n} else {\n    if (h > 99) {\n        buffer.append(h);\n    } else {\n        com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, h);\n    }\n    value -= 100 * h;\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.fasterxml.jackson.databind.util.StdDateFormat.pad4(buffer, year)",
            "dst_parent": "{\n    java.util.Calendar cal = _getCalendar(tz);\n    cal.setTime(date);\n    final int year = cal.get(java.util.Calendar.YEAR);\n    com.fasterxml.jackson.databind.util.StdDateFormat.pad4(buffer, year);\n    buffer.append('-');\n    com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, cal.get(java.util.Calendar.MONTH) + 1);\n    buffer.append('-');\n    com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, cal.get(java.util.Calendar.DAY_OF_MONTH));\n    buffer.append('T');\n    com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, cal.get(java.util.Calendar.HOUR_OF_DAY));\n    buffer.append(':');\n    com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, cal.get(java.util.Calendar.MINUTE));\n    buffer.append(':');\n    com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, cal.get(java.util.Calendar.SECOND));\n    buffer.append('.');\n    com.fasterxml.jackson.databind.util.StdDateFormat.pad3(buffer, cal.get(java.util.Calendar.MILLISECOND));\n    int offset = tz.getOffset(cal.getTimeInMillis());\n    if (offset != 0) {\n        int hours = java.lang.Math.abs((offset / (60 * 1000)) / 60);\n        int minutes = java.lang.Math.abs((offset / (60 * 1000)) % 60);\n        buffer.append(offset < 0 ? '-' : '+');\n        com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, hours);\n        if (_tzSerializedWithColon) {\n            buffer.append(':');\n        }\n        com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, minutes);\n    } else if (_tzSerializedWithColon) {\n        buffer.append(\"+00:00\");\n    } else {\n        buffer.append(\"+0000\");\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "com.fasterxml.jackson.databind.util.StdDateFormat.pad4(buffer, year)",
            "src_parent": "{\n    if (year > 9999) {\n        buffer.append('+');\n    }\n    com.fasterxml.jackson.databind.util.StdDateFormat.pad4(buffer, year);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, h);\n    value -= 100 * h;\n}",
            "dst_parent": "if (h == 0) {\n    buffer.append('0').append('0');\n} else {\n    com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, h);\n    value -= 100 * h;\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, h);\n}",
            "src_parent": "if (h > 99) {\n    buffer.append(h);\n} else {\n    com.fasterxml.jackson.databind.util.StdDateFormat.pad2(buffer, h);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        }
      ],
      "file_name": "StdDateFormat"
    }
  ],
  "id": "JacksonDatabind_104"
}