{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(rValueInfo != null) && rValueInfo.hasType()",
            "src_parent": "if ((rValueInfo != null) && rValueInfo.hasType()) {\n    return rValueInfo.getType().evaluate(scope, typeRegistry);\n} else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n    return rValue.getJSType();\n} else if (rValue.isOr()) {\n    com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n    com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n    boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n    if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n        return secondClause.getJSType();\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    return rValueInfo.getType().evaluate(scope, typeRegistry);\n}",
            "src_parent": "if ((rValueInfo != null) && rValueInfo.hasType()) {\n    return rValueInfo.getType().evaluate(scope, typeRegistry);\n} else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n    return rValue.getJSType();\n} else if (rValue.isOr()) {\n    com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n    com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n    boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n    if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n        return secondClause.getJSType();\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    com.google.javascript.rhino.jstype.JSType knownType = null;\n    if (rValue != null) {\n        com.google.javascript.rhino.JSDocInfo rValueInfo = rValue.getJSDocInfo();\n        if ((rValueInfo != null) && rValueInfo.hasType()) {\n            return rValueInfo.getType().evaluate(scope, typeRegistry);\n        } else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n            return rValue.getJSType();\n        } else if (rValue.isOr()) {\n            com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n            com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n            boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n            if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                return secondClause.getJSType();\n            }\n        }\n    }\n}",
            "src_parent": "if (info.isConstant()) {\n    com.google.javascript.rhino.jstype.JSType knownType = null;\n    if (rValue != null) {\n        com.google.javascript.rhino.JSDocInfo rValueInfo = rValue.getJSDocInfo();\n        if ((rValueInfo != null) && rValueInfo.hasType()) {\n            return rValueInfo.getType().evaluate(scope, typeRegistry);\n        } else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n            return rValue.getJSType();\n        } else if (rValue.isOr()) {\n            com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n            com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n            boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n            if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                return secondClause.getJSType();\n            }\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    if (info.isConstant()) {\n        com.google.javascript.rhino.jstype.JSType knownType = null;\n        if (rValue != null) {\n            com.google.javascript.rhino.JSDocInfo rValueInfo = rValue.getJSDocInfo();\n            if ((rValueInfo != null) && rValueInfo.hasType()) {\n                return rValueInfo.getType().evaluate(scope, typeRegistry);\n            } else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                return rValue.getJSType();\n            } else if (rValue.isOr()) {\n                com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                    return secondClause.getJSType();\n                }\n            }\n        }\n    }\n}",
            "src_parent": "if (info.isConstructor() || info.isInterface()) {\n    return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n} else if (info.isConstant()) {\n    com.google.javascript.rhino.jstype.JSType knownType = null;\n    if (rValue != null) {\n        com.google.javascript.rhino.JSDocInfo rValueInfo = rValue.getJSDocInfo();\n        if ((rValueInfo != null) && rValueInfo.hasType()) {\n            return rValueInfo.getType().evaluate(scope, typeRegistry);\n        } else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n            return rValue.getJSType();\n        } else if (rValue.isOr()) {\n            com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n            com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n            boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n            if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                return secondClause.getJSType();\n            }\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    if (info.hasEnumParameterType()) {\n        if ((rValue != null) && rValue.isObjectLit()) {\n            return rValue.getJSType();\n        } else {\n            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        }\n    } else if (info.isConstructor() || info.isInterface()) {\n        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    } else if (info.isConstant()) {\n        com.google.javascript.rhino.jstype.JSType knownType = null;\n        if (rValue != null) {\n            com.google.javascript.rhino.JSDocInfo rValueInfo = rValue.getJSDocInfo();\n            if ((rValueInfo != null) && rValueInfo.hasType()) {\n                return rValueInfo.getType().evaluate(scope, typeRegistry);\n            } else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                return rValue.getJSType();\n            } else if (rValue.isOr()) {\n                com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                    return secondClause.getJSType();\n                }\n            }\n        }\n    }\n}",
            "src_parent": "if (info != null) {\n    if (info.hasEnumParameterType()) {\n        if ((rValue != null) && rValue.isObjectLit()) {\n            return rValue.getJSType();\n        } else {\n            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        }\n    } else if (info.isConstructor() || info.isInterface()) {\n        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    } else if (info.isConstant()) {\n        com.google.javascript.rhino.jstype.JSType knownType = null;\n        if (rValue != null) {\n            com.google.javascript.rhino.JSDocInfo rValueInfo = rValue.getJSDocInfo();\n            if ((rValueInfo != null) && rValueInfo.hasType()) {\n                return rValueInfo.getType().evaluate(scope, typeRegistry);\n            } else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                return rValue.getJSType();\n            } else if (rValue.isOr()) {\n                com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                    return secondClause.getJSType();\n                }\n            }\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if ((info != null) && info.hasType()) {\n    return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n} else if (((rValue != null) && rValue.isFunction()) && shouldUseFunctionLiteralType(com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n    return rValue.getJSType();\n} else if (info != null) {\n    if (info.hasEnumParameterType()) {\n        if ((rValue != null) && rValue.isObjectLit()) {\n            return rValue.getJSType();\n        } else {\n            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        }\n    } else if (info.isConstructor() || info.isInterface()) {\n        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    } else if (info.isConstant()) {\n        com.google.javascript.rhino.jstype.JSType knownType = null;\n        if (rValue != null) {\n            com.google.javascript.rhino.JSDocInfo rValueInfo = rValue.getJSDocInfo();\n            if ((rValueInfo != null) && rValueInfo.hasType()) {\n                return rValueInfo.getType().evaluate(scope, typeRegistry);\n            } else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                return rValue.getJSType();\n            } else if (rValue.isOr()) {\n                com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                    return secondClause.getJSType();\n                }\n            }\n        }\n    }\n}",
            "src_parent": "{\n    if ((info != null) && info.hasType()) {\n        return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n    } else if (((rValue != null) && rValue.isFunction()) && shouldUseFunctionLiteralType(com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n        return rValue.getJSType();\n    } else if (info != null) {\n        if (info.hasEnumParameterType()) {\n            if ((rValue != null) && rValue.isObjectLit()) {\n                return rValue.getJSType();\n            } else {\n                return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n            }\n        } else if (info.isConstructor() || info.isInterface()) {\n            return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        } else if (info.isConstant()) {\n            com.google.javascript.rhino.jstype.JSType knownType = null;\n            if (rValue != null) {\n                com.google.javascript.rhino.JSDocInfo rValueInfo = rValue.getJSDocInfo();\n                if ((rValueInfo != null) && rValueInfo.hasType()) {\n                    return rValueInfo.getType().evaluate(scope, typeRegistry);\n                } else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                    return rValue.getJSType();\n                } else if (rValue.isOr()) {\n                    com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                    com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                    boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                    if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                        return secondClause.getJSType();\n                    }\n                }\n            }\n        }\n    }\n    return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    if (((rValue != null) && rValue.isFunction()) && shouldUseFunctionLiteralType(com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n        return rValue.getJSType();\n    } else if (info != null) {\n        if (info.hasEnumParameterType()) {\n            if ((rValue != null) && rValue.isObjectLit()) {\n                return rValue.getJSType();\n            } else {\n                return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n            }\n        } else if (info.isConstructor() || info.isInterface()) {\n            return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        } else if (info.isConstant()) {\n            com.google.javascript.rhino.jstype.JSType knownType = null;\n            if (rValue != null) {\n                if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                    return rValue.getJSType();\n                } else if (rValue.isOr()) {\n                    com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                    com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                    boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                    if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                        return secondClause.getJSType();\n                    }\n                }\n            }\n        }\n    }\n}",
            "src_parent": "if ((info != null) && info.hasType()) {\n    return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n} else if (((rValue != null) && rValue.isFunction()) && shouldUseFunctionLiteralType(com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n    return rValue.getJSType();\n} else if (info != null) {\n    if (info.hasEnumParameterType()) {\n        if ((rValue != null) && rValue.isObjectLit()) {\n            return rValue.getJSType();\n        } else {\n            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        }\n    } else if (info.isConstructor() || info.isInterface()) {\n        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    } else if (info.isConstant()) {\n        com.google.javascript.rhino.jstype.JSType knownType = null;\n        if (rValue != null) {\n            if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                return rValue.getJSType();\n            } else if (rValue.isOr()) {\n                com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                    return secondClause.getJSType();\n                }\n            }\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    if (info.hasEnumParameterType()) {\n        if ((rValue != null) && rValue.isObjectLit()) {\n            return rValue.getJSType();\n        } else {\n            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        }\n    } else if (info.isConstructor() || info.isInterface()) {\n        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    } else if (info.isConstant()) {\n        com.google.javascript.rhino.jstype.JSType knownType = null;\n        if (rValue != null) {\n            if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                return rValue.getJSType();\n            } else if (rValue.isOr()) {\n                com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                    return secondClause.getJSType();\n                }\n            }\n        }\n    }\n}",
            "src_parent": "if (info != null) {\n    if (info.hasEnumParameterType()) {\n        if ((rValue != null) && rValue.isObjectLit()) {\n            return rValue.getJSType();\n        } else {\n            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        }\n    } else if (info.isConstructor() || info.isInterface()) {\n        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    } else if (info.isConstant()) {\n        com.google.javascript.rhino.jstype.JSType knownType = null;\n        if (rValue != null) {\n            if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                return rValue.getJSType();\n            } else if (rValue.isOr()) {\n                com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                    return secondClause.getJSType();\n                }\n            }\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    if (info.isConstructor() || info.isInterface()) {\n        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    } else if (info.isConstant()) {\n        com.google.javascript.rhino.jstype.JSType knownType = null;\n        if (rValue != null) {\n            if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                return rValue.getJSType();\n            } else if (rValue.isOr()) {\n                com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                    return secondClause.getJSType();\n                }\n            }\n        }\n    }\n}",
            "src_parent": "if (info.hasEnumParameterType()) {\n    if ((rValue != null) && rValue.isObjectLit()) {\n        return rValue.getJSType();\n    } else {\n        return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    }\n} else if (info.isConstructor() || info.isInterface()) {\n    return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n} else if (info.isConstant()) {\n    com.google.javascript.rhino.jstype.JSType knownType = null;\n    if (rValue != null) {\n        if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n            return rValue.getJSType();\n        } else if (rValue.isOr()) {\n            com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n            com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n            boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n            if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                return secondClause.getJSType();\n            }\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (info.isConstant()) {\n    com.google.javascript.rhino.jstype.JSType knownType = null;\n    if (rValue != null) {\n        if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n            return rValue.getJSType();\n        } else if (rValue.isOr()) {\n            com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n            com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n            boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n            if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                return secondClause.getJSType();\n            }\n        }\n    }\n}",
            "src_parent": "{\n    if (info.isConstant()) {\n        com.google.javascript.rhino.jstype.JSType knownType = null;\n        if (rValue != null) {\n            if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                return rValue.getJSType();\n            } else if (rValue.isOr()) {\n                com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                    return secondClause.getJSType();\n                }\n            }\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if ((info != null) && info.hasType()) {\n    return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n} else if (((rValue != null) && rValue.isFunction()) && shouldUseFunctionLiteralType(com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n    return rValue.getJSType();\n} else if (info != null) {\n    if (info.hasEnumParameterType()) {\n        if ((rValue != null) && rValue.isObjectLit()) {\n            return rValue.getJSType();\n        } else {\n            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        }\n    } else if (info.isConstructor() || info.isInterface()) {\n        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    } else if (info.isConstant()) {\n        com.google.javascript.rhino.jstype.JSType knownType = null;\n        if (rValue != null) {\n            if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                return rValue.getJSType();\n            } else if (rValue.isOr()) {\n                com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                    return secondClause.getJSType();\n                }\n            }\n        }\n    }\n}",
            "dst_parent": "{\n    if ((info != null) && info.hasType()) {\n        return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n    } else if (((rValue != null) && rValue.isFunction()) && shouldUseFunctionLiteralType(com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n        return rValue.getJSType();\n    } else if (info != null) {\n        if (info.hasEnumParameterType()) {\n            if ((rValue != null) && rValue.isObjectLit()) {\n                return rValue.getJSType();\n            } else {\n                return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n            }\n        } else if (info.isConstructor() || info.isInterface()) {\n            return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        } else if (info.isConstant()) {\n            com.google.javascript.rhino.jstype.JSType knownType = null;\n            if (rValue != null) {\n                if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                    return rValue.getJSType();\n                } else if (rValue.isOr()) {\n                    com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                    com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                    boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                    if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                        return secondClause.getJSType();\n                    }\n                }\n            }\n        }\n    }\n    return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (info != null) {\n    if (info.hasEnumParameterType()) {\n        if ((rValue != null) && rValue.isObjectLit()) {\n            return rValue.getJSType();\n        } else {\n            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        }\n    } else if (info.isConstructor() || info.isInterface()) {\n        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    } else if (info.isConstant()) {\n        com.google.javascript.rhino.jstype.JSType knownType = null;\n        if (rValue != null) {\n            com.google.javascript.rhino.JSDocInfo rValueInfo = rValue.getJSDocInfo();\n            if ((rValueInfo != null) && rValueInfo.hasType()) {\n                return rValueInfo.getType().evaluate(scope, typeRegistry);\n            } else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                return rValue.getJSType();\n            } else if (rValue.isOr()) {\n                com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                    return secondClause.getJSType();\n                }\n            }\n        }\n    }\n}",
            "src_parent": "{\n    if (info != null) {\n        if (info.hasEnumParameterType()) {\n            if ((rValue != null) && rValue.isObjectLit()) {\n                return rValue.getJSType();\n            } else {\n                return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n            }\n        } else if (info.isConstructor() || info.isInterface()) {\n            return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        } else if (info.isConstant()) {\n            com.google.javascript.rhino.jstype.JSType knownType = null;\n            if (rValue != null) {\n                com.google.javascript.rhino.JSDocInfo rValueInfo = rValue.getJSDocInfo();\n                if ((rValueInfo != null) && rValueInfo.hasType()) {\n                    return rValueInfo.getType().evaluate(scope, typeRegistry);\n                } else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                    return rValue.getJSType();\n                } else if (rValue.isOr()) {\n                    com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                    com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                    boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                    if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                        return secondClause.getJSType();\n                    }\n                }\n            }\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (((rValue != null) && rValue.isFunction()) && shouldUseFunctionLiteralType(com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n    return rValue.getJSType();\n} else if (info != null) {\n    if (info.hasEnumParameterType()) {\n        if ((rValue != null) && rValue.isObjectLit()) {\n            return rValue.getJSType();\n        } else {\n            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        }\n    } else if (info.isConstructor() || info.isInterface()) {\n        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    } else if (info.isConstant()) {\n        com.google.javascript.rhino.jstype.JSType knownType = null;\n        if (rValue != null) {\n            if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                return rValue.getJSType();\n            } else if (rValue.isOr()) {\n                com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                    return secondClause.getJSType();\n                }\n            }\n        }\n    }\n}",
            "dst_parent": "{\n    if (((rValue != null) && rValue.isFunction()) && shouldUseFunctionLiteralType(com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n        return rValue.getJSType();\n    } else if (info != null) {\n        if (info.hasEnumParameterType()) {\n            if ((rValue != null) && rValue.isObjectLit()) {\n                return rValue.getJSType();\n            } else {\n                return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n            }\n        } else if (info.isConstructor() || info.isInterface()) {\n            return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        } else if (info.isConstant()) {\n            com.google.javascript.rhino.jstype.JSType knownType = null;\n            if (rValue != null) {\n                if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                    return rValue.getJSType();\n                } else if (rValue.isOr()) {\n                    com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                    com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                    boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                    if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                        return secondClause.getJSType();\n                    }\n                }\n            }\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (info.hasEnumParameterType()) {\n    if ((rValue != null) && rValue.isObjectLit()) {\n        return rValue.getJSType();\n    } else {\n        return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    }\n} else if (info.isConstructor() || info.isInterface()) {\n    return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n} else if (info.isConstant()) {\n    com.google.javascript.rhino.jstype.JSType knownType = null;\n    if (rValue != null) {\n        com.google.javascript.rhino.JSDocInfo rValueInfo = rValue.getJSDocInfo();\n        if ((rValueInfo != null) && rValueInfo.hasType()) {\n            return rValueInfo.getType().evaluate(scope, typeRegistry);\n        } else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n            return rValue.getJSType();\n        } else if (rValue.isOr()) {\n            com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n            com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n            boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n            if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                return secondClause.getJSType();\n            }\n        }\n    }\n}",
            "src_parent": "{\n    if (info.hasEnumParameterType()) {\n        if ((rValue != null) && rValue.isObjectLit()) {\n            return rValue.getJSType();\n        } else {\n            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        }\n    } else if (info.isConstructor() || info.isInterface()) {\n        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    } else if (info.isConstant()) {\n        com.google.javascript.rhino.jstype.JSType knownType = null;\n        if (rValue != null) {\n            com.google.javascript.rhino.JSDocInfo rValueInfo = rValue.getJSDocInfo();\n            if ((rValueInfo != null) && rValueInfo.hasType()) {\n                return rValueInfo.getType().evaluate(scope, typeRegistry);\n            } else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                return rValue.getJSType();\n            } else if (rValue.isOr()) {\n                com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                    return secondClause.getJSType();\n                }\n            }\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "info != null",
            "dst_parent": "if (info != null) {\n    if (info.hasEnumParameterType()) {\n        if ((rValue != null) && rValue.isObjectLit()) {\n            return rValue.getJSType();\n        } else {\n            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        }\n    } else if (info.isConstructor() || info.isInterface()) {\n        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    } else if (info.isConstant()) {\n        com.google.javascript.rhino.jstype.JSType knownType = null;\n        if (rValue != null) {\n            if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                return rValue.getJSType();\n            } else if (rValue.isOr()) {\n                com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                    return secondClause.getJSType();\n                }\n            }\n        }\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "info != null",
            "src_parent": "if (info != null) {\n    if (info.hasEnumParameterType()) {\n        if ((rValue != null) && rValue.isObjectLit()) {\n            return rValue.getJSType();\n        } else {\n            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        }\n    } else if (info.isConstructor() || info.isInterface()) {\n        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    } else if (info.isConstant()) {\n        com.google.javascript.rhino.jstype.JSType knownType = null;\n        if (rValue != null) {\n            com.google.javascript.rhino.JSDocInfo rValueInfo = rValue.getJSDocInfo();\n            if ((rValueInfo != null) && rValueInfo.hasType()) {\n                return rValueInfo.getType().evaluate(scope, typeRegistry);\n            } else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                return rValue.getJSType();\n            } else if (rValue.isOr()) {\n                com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                    return secondClause.getJSType();\n                }\n            }\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (info.hasEnumParameterType()) {\n    if ((rValue != null) && rValue.isObjectLit()) {\n        return rValue.getJSType();\n    } else {\n        return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    }\n} else if (info.isConstructor() || info.isInterface()) {\n    return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n} else if (info.isConstant()) {\n    com.google.javascript.rhino.jstype.JSType knownType = null;\n    if (rValue != null) {\n        if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n            return rValue.getJSType();\n        } else if (rValue.isOr()) {\n            com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n            com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n            boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n            if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                return secondClause.getJSType();\n            }\n        }\n    }\n}",
            "dst_parent": "{\n    if (info.hasEnumParameterType()) {\n        if ((rValue != null) && rValue.isObjectLit()) {\n            return rValue.getJSType();\n        } else {\n            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        }\n    } else if (info.isConstructor() || info.isInterface()) {\n        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    } else if (info.isConstant()) {\n        com.google.javascript.rhino.jstype.JSType knownType = null;\n        if (rValue != null) {\n            if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                return rValue.getJSType();\n            } else if (rValue.isOr()) {\n                com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                    return secondClause.getJSType();\n                }\n            }\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (info.isConstant()) {\n    com.google.javascript.rhino.jstype.JSType knownType = null;\n    if (rValue != null) {\n        com.google.javascript.rhino.JSDocInfo rValueInfo = rValue.getJSDocInfo();\n        if ((rValueInfo != null) && rValueInfo.hasType()) {\n            return rValueInfo.getType().evaluate(scope, typeRegistry);\n        } else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n            return rValue.getJSType();\n        } else if (rValue.isOr()) {\n            com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n            com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n            boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n            if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                return secondClause.getJSType();\n            }\n        }\n    }\n}",
            "src_parent": "{\n    if (info.isConstant()) {\n        com.google.javascript.rhino.jstype.JSType knownType = null;\n        if (rValue != null) {\n            com.google.javascript.rhino.JSDocInfo rValueInfo = rValue.getJSDocInfo();\n            if ((rValueInfo != null) && rValueInfo.hasType()) {\n                return rValueInfo.getType().evaluate(scope, typeRegistry);\n            } else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                return rValue.getJSType();\n            } else if (rValue.isOr()) {\n                com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                    return secondClause.getJSType();\n                }\n            }\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (info.isConstructor() || info.isInterface()) {\n    return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n} else if (info.isConstant()) {\n    com.google.javascript.rhino.jstype.JSType knownType = null;\n    if (rValue != null) {\n        if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n            return rValue.getJSType();\n        } else if (rValue.isOr()) {\n            com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n            com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n            boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n            if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                return secondClause.getJSType();\n            }\n        }\n    }\n}",
            "dst_parent": "{\n    if (info.isConstructor() || info.isInterface()) {\n        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    } else if (info.isConstant()) {\n        com.google.javascript.rhino.jstype.JSType knownType = null;\n        if (rValue != null) {\n            if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n                return rValue.getJSType();\n            } else if (rValue.isOr()) {\n                com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n                com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n                boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n                if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                    return secondClause.getJSType();\n                }\n            }\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if ((rValueInfo != null) && rValueInfo.hasType()) {\n    return rValueInfo.getType().evaluate(scope, typeRegistry);\n} else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n    return rValue.getJSType();\n} else if (rValue.isOr()) {\n    com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n    com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n    boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n    if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n        return secondClause.getJSType();\n    }\n}",
            "src_parent": "{\n    com.google.javascript.rhino.JSDocInfo rValueInfo = rValue.getJSDocInfo();\n    if ((rValueInfo != null) && rValueInfo.hasType()) {\n        return rValueInfo.getType().evaluate(scope, typeRegistry);\n    } else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n        return rValue.getJSType();\n    } else if (rValue.isOr()) {\n        com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n        com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n        boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n        if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n            return secondClause.getJSType();\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "info.isConstant()",
            "dst_parent": "if (info.isConstant()) {\n    com.google.javascript.rhino.jstype.JSType knownType = null;\n    if (rValue != null) {\n        if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n            return rValue.getJSType();\n        } else if (rValue.isOr()) {\n            com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n            com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n            boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n            if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                return secondClause.getJSType();\n            }\n        }\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "info.isConstant()",
            "src_parent": "if (info.isConstant()) {\n    com.google.javascript.rhino.jstype.JSType knownType = null;\n    if (rValue != null) {\n        com.google.javascript.rhino.JSDocInfo rValueInfo = rValue.getJSDocInfo();\n        if ((rValueInfo != null) && rValueInfo.hasType()) {\n            return rValueInfo.getType().evaluate(scope, typeRegistry);\n        } else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n            return rValue.getJSType();\n        } else if (rValue.isOr()) {\n            com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n            com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n            boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n            if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                return secondClause.getJSType();\n            }\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.javascript.rhino.jstype.JSType knownType = null",
            "dst_parent": "{\n    com.google.javascript.rhino.jstype.JSType knownType = null;\n    if (rValue != null) {\n        if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n            return rValue.getJSType();\n        } else if (rValue.isOr()) {\n            com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n            com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n            boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n            if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                return secondClause.getJSType();\n            }\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "com.google.javascript.rhino.jstype.JSType knownType = null",
            "src_parent": "{\n    com.google.javascript.rhino.jstype.JSType knownType = null;\n    if (rValue != null) {\n        com.google.javascript.rhino.JSDocInfo rValueInfo = rValue.getJSDocInfo();\n        if ((rValueInfo != null) && rValueInfo.hasType()) {\n            return rValueInfo.getType().evaluate(scope, typeRegistry);\n        } else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n            return rValue.getJSType();\n        } else if (rValue.isOr()) {\n            com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n            com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n            boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n            if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n                return secondClause.getJSType();\n            }\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "rValue != null",
            "dst_parent": "if (rValue != null) {\n    if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n        return rValue.getJSType();\n    } else if (rValue.isOr()) {\n        com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n        com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n        boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n        if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n            return secondClause.getJSType();\n        }\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "rValue != null",
            "src_parent": "if (rValue != null) {\n    com.google.javascript.rhino.JSDocInfo rValueInfo = rValue.getJSDocInfo();\n    if ((rValueInfo != null) && rValueInfo.hasType()) {\n        return rValueInfo.getType().evaluate(scope, typeRegistry);\n    } else if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n        return rValue.getJSType();\n    } else if (rValue.isOr()) {\n        com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n        com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n        boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n        if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n            return secondClause.getJSType();\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n    return rValue.getJSType();\n} else if (rValue.isOr()) {\n    com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n    com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n    boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n    if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n        return secondClause.getJSType();\n    }\n}",
            "dst_parent": "{\n    if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n        return rValue.getJSType();\n    } else if (rValue.isOr()) {\n        com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n        com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n        boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n        if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n            return secondClause.getJSType();\n        }\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n    return rValue.getJSType();\n} else if (rValue.isOr()) {\n    com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n    com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n    boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n    if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n        return secondClause.getJSType();\n    }\n}",
            "src_parent": "{\n    if ((rValue.getJSType() != null) && (!rValue.getJSType().isUnknownType())) {\n        return rValue.getJSType();\n    } else if (rValue.isOr()) {\n        com.google.javascript.rhino.Node firstClause = rValue.getFirstChild();\n        com.google.javascript.rhino.Node secondClause = firstClause.getNext();\n        boolean namesMatch = (firstClause.isName() && lValue.isName()) && firstClause.getString().equals(lValue.getString());\n        if ((namesMatch && (secondClause.getJSType() != null)) && (!secondClause.getJSType().isUnknownType())) {\n            return secondClause.getJSType();\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "TypedScopeCreator"
    }
  ],
  "id": "Closure_17"
}