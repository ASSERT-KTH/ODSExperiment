{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (com.google.javascript.jscomp.Normalize.MAKE_LOCAL_NAMES_UNIQUE) {\n    com.google.javascript.jscomp.MakeDeclaredNamesUnique renamer = new com.google.javascript.jscomp.MakeDeclaredNamesUnique();\n    com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, renamer);\n    t.traverseRoots(externs, root);\n}",
            "dst_parent": "{\n    com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, new com.google.javascript.jscomp.Normalize.NormalizeStatements(compiler, assertOnChange));\n    removeDuplicateDeclarations(root);\n    if (com.google.javascript.jscomp.Normalize.MAKE_LOCAL_NAMES_UNIQUE) {\n        com.google.javascript.jscomp.MakeDeclaredNamesUnique renamer = new com.google.javascript.jscomp.MakeDeclaredNamesUnique();\n        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, renamer);\n        t.traverseRoots(externs, root);\n    }\n    new com.google.javascript.jscomp.Normalize.PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (com.google.javascript.jscomp.Normalize.MAKE_LOCAL_NAMES_UNIQUE) {\n    com.google.javascript.jscomp.MakeDeclaredNamesUnique renamer = new com.google.javascript.jscomp.MakeDeclaredNamesUnique();\n    com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, renamer);\n    t.traverseRoots(externs, root);\n}",
            "src_parent": "{\n    com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, new com.google.javascript.jscomp.Normalize.NormalizeStatements(compiler, assertOnChange));\n    if (com.google.javascript.jscomp.Normalize.MAKE_LOCAL_NAMES_UNIQUE) {\n        com.google.javascript.jscomp.MakeDeclaredNamesUnique renamer = new com.google.javascript.jscomp.MakeDeclaredNamesUnique();\n        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, renamer);\n        t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new com.google.javascript.jscomp.Normalize.PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "Normalize"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "static boolean isReferenceName(com.google.javascript.rhino.Node n) {\n    return (com.google.javascript.jscomp.NodeUtil.isName(n) && (!n.getString().isEmpty())) && (!com.google.javascript.jscomp.NodeUtil.isLabelName(n));\n}",
            "src_parent": "public final class NodeUtil {\n    private static final java.util.Set<java.lang.String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"Array\", \"Date\", \"Error\", \"Object\", \"RegExp\", \"XMLHttpRequest\"));\n\n    public static final java.lang.String CONSTANT_MARKER = \"$$constant\";\n\n    private NodeUtil() {\n    }\n\n    static boolean getBooleanValue(com.google.javascript.rhino.Node n) {\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.STRING :\n                return n.getString().length() > 0;\n            case com.google.javascript.rhino.Token.NUMBER :\n                return n.getDouble() != 0;\n            case com.google.javascript.rhino.Token.NULL :\n            case com.google.javascript.rhino.Token.FALSE :\n            case com.google.javascript.rhino.Token.VOID :\n                return false;\n            case com.google.javascript.rhino.Token.NAME :\n                java.lang.String name = n.getString();\n                if (\"undefined\".equals(name) || \"NaN\".equals(name)) {\n                    return false;\n                } else if (\"Infinity\".equals(name)) {\n                    return true;\n                }\n                break;\n            case com.google.javascript.rhino.Token.TRUE :\n            case com.google.javascript.rhino.Token.ARRAYLIT :\n            case com.google.javascript.rhino.Token.OBJECTLIT :\n            case com.google.javascript.rhino.Token.REGEXP :\n                return true;\n        }\n        throw new java.lang.IllegalArgumentException(\"Non-literal value: \" + n);\n    }\n\n    static java.lang.String getStringValue(com.google.javascript.rhino.Node n) {\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.NAME :\n            case com.google.javascript.rhino.Token.STRING :\n                return n.getString();\n            case com.google.javascript.rhino.Token.NUMBER :\n                double value = n.getDouble();\n                long longValue = ((long) (value));\n                if (longValue == value) {\n                    return java.lang.Long.toString(longValue);\n                } else {\n                    return java.lang.Double.toString(n.getDouble());\n                }\n            case com.google.javascript.rhino.Token.FALSE :\n            case com.google.javascript.rhino.Token.TRUE :\n            case com.google.javascript.rhino.Token.NULL :\n                return com.google.javascript.rhino.Node.tokenToName(n.getType());\n            case com.google.javascript.rhino.Token.VOID :\n                return \"undefined\";\n        }\n        return null;\n    }\n\n    static java.lang.String getFunctionName(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {\n        java.lang.String name = n.getFirstChild().getString();\n        switch (parent.getType()) {\n            case com.google.javascript.rhino.Token.NAME :\n                return parent.getString();\n            case com.google.javascript.rhino.Token.ASSIGN :\n                return parent.getFirstChild().getQualifiedName();\n            default :\n                return (name != null) && (name.length() != 0) ? name : null;\n        }\n    }\n\n    static boolean isImmutableValue(com.google.javascript.rhino.Node n) {\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.STRING :\n            case com.google.javascript.rhino.Token.NUMBER :\n            case com.google.javascript.rhino.Token.NULL :\n            case com.google.javascript.rhino.Token.TRUE :\n            case com.google.javascript.rhino.Token.FALSE :\n            case com.google.javascript.rhino.Token.VOID :\n                return true;\n            case com.google.javascript.rhino.Token.NEG :\n                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());\n            case com.google.javascript.rhino.Token.NAME :\n                java.lang.String name = n.getString();\n                return (\"undefined\".equals(name) || \"Infinity\".equals(name)) || \"NaN\".equals(name);\n        }\n        return false;\n    }\n\n    static boolean isLiteralValue(com.google.javascript.rhino.Node n) {\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.ARRAYLIT :\n            case com.google.javascript.rhino.Token.OBJECTLIT :\n            case com.google.javascript.rhino.Token.REGEXP :\n                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child)) {\n                        return false;\n                    }\n                }\n                return true;\n            default :\n                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n);\n        }\n    }\n\n    static boolean isValidDefineValue(com.google.javascript.rhino.Node val, java.util.Set<java.lang.String> defines) {\n        switch (val.getType()) {\n            case com.google.javascript.rhino.Token.STRING :\n            case com.google.javascript.rhino.Token.NUMBER :\n            case com.google.javascript.rhino.Token.TRUE :\n            case com.google.javascript.rhino.Token.FALSE :\n                return true;\n            case com.google.javascript.rhino.Token.BITAND :\n            case com.google.javascript.rhino.Token.BITNOT :\n            case com.google.javascript.rhino.Token.BITOR :\n            case com.google.javascript.rhino.Token.BITXOR :\n            case com.google.javascript.rhino.Token.NOT :\n            case com.google.javascript.rhino.Token.NEG :\n                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines);\n            case com.google.javascript.rhino.Token.NAME :\n            case com.google.javascript.rhino.Token.GETPROP :\n                if (val.isQualifiedName()) {\n                    return defines.contains(val.getQualifiedName());\n                }\n        }\n        return false;\n    }\n\n    static boolean isEmptyBlock(com.google.javascript.rhino.Node block) {\n        if (block.getType() != com.google.javascript.rhino.Token.BLOCK) {\n            return false;\n        }\n        for (com.google.javascript.rhino.Node n = block.getFirstChild(); n != null; n = n.getNext()) {\n            if (n.getType() != com.google.javascript.rhino.Token.EMPTY) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    static boolean isSimpleOperatorType(int type) {\n        switch (type) {\n            case com.google.javascript.rhino.Token.ADD :\n            case com.google.javascript.rhino.Token.BITAND :\n            case com.google.javascript.rhino.Token.BITNOT :\n            case com.google.javascript.rhino.Token.BITOR :\n            case com.google.javascript.rhino.Token.BITXOR :\n            case com.google.javascript.rhino.Token.COMMA :\n            case com.google.javascript.rhino.Token.DIV :\n            case com.google.javascript.rhino.Token.EQ :\n            case com.google.javascript.rhino.Token.GE :\n            case com.google.javascript.rhino.Token.GETELEM :\n            case com.google.javascript.rhino.Token.GETPROP :\n            case com.google.javascript.rhino.Token.GT :\n            case com.google.javascript.rhino.Token.INSTANCEOF :\n            case com.google.javascript.rhino.Token.LE :\n            case com.google.javascript.rhino.Token.LSH :\n            case com.google.javascript.rhino.Token.LT :\n            case com.google.javascript.rhino.Token.MOD :\n            case com.google.javascript.rhino.Token.MUL :\n            case com.google.javascript.rhino.Token.NE :\n            case com.google.javascript.rhino.Token.NOT :\n            case com.google.javascript.rhino.Token.RSH :\n            case com.google.javascript.rhino.Token.SHEQ :\n            case com.google.javascript.rhino.Token.SHNE :\n            case com.google.javascript.rhino.Token.SUB :\n            case com.google.javascript.rhino.Token.TYPEOF :\n            case com.google.javascript.rhino.Token.VOID :\n            case com.google.javascript.rhino.Token.POS :\n            case com.google.javascript.rhino.Token.NEG :\n            case com.google.javascript.rhino.Token.URSH :\n                return true;\n            default :\n                return false;\n        }\n    }\n\n    public static com.google.javascript.rhino.Node newExpr(com.google.javascript.rhino.Node child) {\n        return new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.EXPR_RESULT, child);\n    }\n\n    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n) {\n        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, true);\n    }\n\n    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n) {\n        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, false);\n    }\n\n    private static boolean checkForStateChangeHelper(com.google.javascript.rhino.Node n, boolean checkForNewObjects) {\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.AND :\n            case com.google.javascript.rhino.Token.BLOCK :\n            case com.google.javascript.rhino.Token.EXPR_RESULT :\n            case com.google.javascript.rhino.Token.HOOK :\n            case com.google.javascript.rhino.Token.IF :\n            case com.google.javascript.rhino.Token.IN :\n            case com.google.javascript.rhino.Token.LP :\n            case com.google.javascript.rhino.Token.NUMBER :\n            case com.google.javascript.rhino.Token.OR :\n            case com.google.javascript.rhino.Token.THIS :\n            case com.google.javascript.rhino.Token.TRUE :\n            case com.google.javascript.rhino.Token.FALSE :\n            case com.google.javascript.rhino.Token.NULL :\n            case com.google.javascript.rhino.Token.STRING :\n            case com.google.javascript.rhino.Token.SWITCH :\n            case com.google.javascript.rhino.Token.TRY :\n            case com.google.javascript.rhino.Token.EMPTY :\n                break;\n            case com.google.javascript.rhino.Token.THROW :\n                return true;\n            case com.google.javascript.rhino.Token.OBJECTLIT :\n            case com.google.javascript.rhino.Token.ARRAYLIT :\n            case com.google.javascript.rhino.Token.REGEXP :\n                if (checkForNewObjects) {\n                    return true;\n                }\n                break;\n            case com.google.javascript.rhino.Token.VAR :\n            case com.google.javascript.rhino.Token.NAME :\n                if (n.getFirstChild() != null) {\n                    return true;\n                }\n                break;\n            case com.google.javascript.rhino.Token.FUNCTION :\n                return !com.google.javascript.jscomp.NodeUtil.isFunctionAnonymous(n);\n            case com.google.javascript.rhino.Token.NEW :\n                {\n                    if (checkForNewObjects) {\n                        return true;\n                    }\n                    if (n.isNoSideEffectsCall()) {\n                        break;\n                    }\n                    com.google.javascript.rhino.Node constructor = n.getFirstChild();\n                    if (com.google.javascript.rhino.Token.NAME == constructor.getType()) {\n                        java.lang.String className = constructor.getString();\n                        if (com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(className)) {\n                            break;\n                        }\n                    } else {\n                    }\n                }\n                return true;\n            case com.google.javascript.rhino.Token.CALL :\n                if (n.isNoSideEffectsCall()) {\n                    break;\n                }\n                return true;\n            default :\n                if (com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType())) {\n                    break;\n                }\n                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {\n                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getFirstChild(), checkForNewObjects) || com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getLastChild(), checkForNewObjects)) {\n                        return true;\n                    }\n                    com.google.javascript.rhino.Node current = n.getFirstChild();\n                    for (; (current.getType() == com.google.javascript.rhino.Token.GETPROP) || (current.getType() == com.google.javascript.rhino.Token.GETELEM); current = current.getFirstChild()) {\n                    }\n                    return !(com.google.javascript.jscomp.NodeUtil.isLiteralValue(current) || (current.getType() == com.google.javascript.rhino.Token.FUNCTION));\n                }\n                return true;\n        }\n        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c, checkForNewObjects)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode) {\n        com.google.common.base.Preconditions.checkArgument(callNode.getType() == com.google.javascript.rhino.Token.NEW, \"Expected NEW node, got \" + com.google.javascript.rhino.Token.name(callNode.getType()));\n        if (callNode.isNoSideEffectsCall()) {\n            return false;\n        }\n        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();\n        if ((nameNode.getType() == com.google.javascript.rhino.Token.NAME) && com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {\n            return false;\n        }\n        return true;\n    }\n\n    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode) {\n        com.google.common.base.Preconditions.checkArgument(callNode.getType() == com.google.javascript.rhino.Token.CALL, \"Expected CALL node, got \" + com.google.javascript.rhino.Token.name(callNode.getType()));\n        if (callNode.isNoSideEffectsCall()) {\n            return false;\n        }\n        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();\n        if (nameNode.getType() == com.google.javascript.rhino.Token.NAME) {\n            java.lang.String name = nameNode.getString();\n            if (name.equals(\"String\")) {\n                return false;\n            }\n        }\n        if ((nameNode.getType() == com.google.javascript.rhino.Token.GETPROP) && (nameNode.getFirstChild().getType() == com.google.javascript.rhino.Token.NAME)) {\n            java.lang.String namespaceName = nameNode.getFirstChild().getString();\n            if (namespaceName.equals(\"Math\")) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n) {\n        if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {\n            return true;\n        }\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.CALL :\n            case com.google.javascript.rhino.Token.DELPROP :\n            case com.google.javascript.rhino.Token.NEW :\n            case com.google.javascript.rhino.Token.DEC :\n            case com.google.javascript.rhino.Token.INC :\n            case com.google.javascript.rhino.Token.THROW :\n                return true;\n            case com.google.javascript.rhino.Token.NAME :\n                return n.hasChildren();\n            default :\n                return false;\n        }\n    }\n\n    static boolean canBeSideEffected(com.google.javascript.rhino.Node n) {\n        java.util.Set<java.lang.String> emptySet = java.util.Collections.emptySet();\n        return com.google.javascript.jscomp.NodeUtil.canBeSideEffected(n, emptySet);\n    }\n\n    static boolean canBeSideEffected(com.google.javascript.rhino.Node n, java.util.Set<java.lang.String> knownConstants) {\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.CALL :\n            case com.google.javascript.rhino.Token.NEW :\n                return true;\n            case com.google.javascript.rhino.Token.NAME :\n                return (!com.google.javascript.jscomp.NodeUtil.isConstantName(n)) && (!knownConstants.contains(n.getString()));\n            case com.google.javascript.rhino.Token.GETPROP :\n            case com.google.javascript.rhino.Token.GETELEM :\n                return true;\n        }\n        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            if (com.google.javascript.jscomp.NodeUtil.canBeSideEffected(c, knownConstants)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    static int precedence(int type) {\n        switch (type) {\n            case com.google.javascript.rhino.Token.COMMA :\n                return 0;\n            case com.google.javascript.rhino.Token.ASSIGN_BITOR :\n            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :\n            case com.google.javascript.rhino.Token.ASSIGN_BITAND :\n            case com.google.javascript.rhino.Token.ASSIGN_LSH :\n            case com.google.javascript.rhino.Token.ASSIGN_RSH :\n            case com.google.javascript.rhino.Token.ASSIGN_URSH :\n            case com.google.javascript.rhino.Token.ASSIGN_ADD :\n            case com.google.javascript.rhino.Token.ASSIGN_SUB :\n            case com.google.javascript.rhino.Token.ASSIGN_MUL :\n            case com.google.javascript.rhino.Token.ASSIGN_DIV :\n            case com.google.javascript.rhino.Token.ASSIGN_MOD :\n            case com.google.javascript.rhino.Token.ASSIGN :\n                return 1;\n            case com.google.javascript.rhino.Token.HOOK :\n                return 2;\n            case com.google.javascript.rhino.Token.OR :\n                return 3;\n            case com.google.javascript.rhino.Token.AND :\n                return 4;\n            case com.google.javascript.rhino.Token.BITOR :\n                return 5;\n            case com.google.javascript.rhino.Token.BITXOR :\n                return 6;\n            case com.google.javascript.rhino.Token.BITAND :\n                return 7;\n            case com.google.javascript.rhino.Token.EQ :\n            case com.google.javascript.rhino.Token.NE :\n            case com.google.javascript.rhino.Token.SHEQ :\n            case com.google.javascript.rhino.Token.SHNE :\n                return 8;\n            case com.google.javascript.rhino.Token.LT :\n            case com.google.javascript.rhino.Token.GT :\n            case com.google.javascript.rhino.Token.LE :\n            case com.google.javascript.rhino.Token.GE :\n            case com.google.javascript.rhino.Token.INSTANCEOF :\n            case com.google.javascript.rhino.Token.IN :\n                return 9;\n            case com.google.javascript.rhino.Token.LSH :\n            case com.google.javascript.rhino.Token.RSH :\n            case com.google.javascript.rhino.Token.URSH :\n                return 10;\n            case com.google.javascript.rhino.Token.SUB :\n            case com.google.javascript.rhino.Token.ADD :\n                return 11;\n            case com.google.javascript.rhino.Token.MUL :\n            case com.google.javascript.rhino.Token.MOD :\n            case com.google.javascript.rhino.Token.DIV :\n                return 12;\n            case com.google.javascript.rhino.Token.INC :\n            case com.google.javascript.rhino.Token.DEC :\n            case com.google.javascript.rhino.Token.NEW :\n            case com.google.javascript.rhino.Token.DELPROP :\n            case com.google.javascript.rhino.Token.TYPEOF :\n            case com.google.javascript.rhino.Token.VOID :\n            case com.google.javascript.rhino.Token.NOT :\n            case com.google.javascript.rhino.Token.BITNOT :\n            case com.google.javascript.rhino.Token.POS :\n            case com.google.javascript.rhino.Token.NEG :\n                return 13;\n            case com.google.javascript.rhino.Token.ARRAYLIT :\n            case com.google.javascript.rhino.Token.CALL :\n            case com.google.javascript.rhino.Token.EMPTY :\n            case com.google.javascript.rhino.Token.FALSE :\n            case com.google.javascript.rhino.Token.FUNCTION :\n            case com.google.javascript.rhino.Token.GETELEM :\n            case com.google.javascript.rhino.Token.GETPROP :\n            case com.google.javascript.rhino.Token.GET_REF :\n            case com.google.javascript.rhino.Token.IF :\n            case com.google.javascript.rhino.Token.LP :\n            case com.google.javascript.rhino.Token.NAME :\n            case com.google.javascript.rhino.Token.NULL :\n            case com.google.javascript.rhino.Token.NUMBER :\n            case com.google.javascript.rhino.Token.OBJECTLIT :\n            case com.google.javascript.rhino.Token.REGEXP :\n            case com.google.javascript.rhino.Token.RETURN :\n            case com.google.javascript.rhino.Token.STRING :\n            case com.google.javascript.rhino.Token.THIS :\n            case com.google.javascript.rhino.Token.TRUE :\n                return 15;\n            default :\n                throw new java.lang.Error((((\"Unknown precedence for \" + com.google.javascript.rhino.Node.tokenToName(type)) + \" (type \") + type) + \")\");\n        }\n    }\n\n    static boolean isAssociative(int type) {\n        switch (type) {\n            case com.google.javascript.rhino.Token.MUL :\n            case com.google.javascript.rhino.Token.AND :\n            case com.google.javascript.rhino.Token.OR :\n            case com.google.javascript.rhino.Token.BITOR :\n            case com.google.javascript.rhino.Token.BITAND :\n                return true;\n            default :\n                return false;\n        }\n    }\n\n    static boolean isAssignmentOp(com.google.javascript.rhino.Node n) {\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.ASSIGN :\n            case com.google.javascript.rhino.Token.ASSIGN_BITOR :\n            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :\n            case com.google.javascript.rhino.Token.ASSIGN_BITAND :\n            case com.google.javascript.rhino.Token.ASSIGN_LSH :\n            case com.google.javascript.rhino.Token.ASSIGN_RSH :\n            case com.google.javascript.rhino.Token.ASSIGN_URSH :\n            case com.google.javascript.rhino.Token.ASSIGN_ADD :\n            case com.google.javascript.rhino.Token.ASSIGN_SUB :\n            case com.google.javascript.rhino.Token.ASSIGN_MUL :\n            case com.google.javascript.rhino.Token.ASSIGN_DIV :\n            case com.google.javascript.rhino.Token.ASSIGN_MOD :\n                return true;\n        }\n        return false;\n    }\n\n    static int getOpFromAssignmentOp(com.google.javascript.rhino.Node n) {\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.ASSIGN_BITOR :\n                return com.google.javascript.rhino.Token.BITOR;\n            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :\n                return com.google.javascript.rhino.Token.BITXOR;\n            case com.google.javascript.rhino.Token.ASSIGN_BITAND :\n                return com.google.javascript.rhino.Token.BITAND;\n            case com.google.javascript.rhino.Token.ASSIGN_LSH :\n                return com.google.javascript.rhino.Token.LSH;\n            case com.google.javascript.rhino.Token.ASSIGN_RSH :\n                return com.google.javascript.rhino.Token.RSH;\n            case com.google.javascript.rhino.Token.ASSIGN_URSH :\n                return com.google.javascript.rhino.Token.URSH;\n            case com.google.javascript.rhino.Token.ASSIGN_ADD :\n                return com.google.javascript.rhino.Token.ADD;\n            case com.google.javascript.rhino.Token.ASSIGN_SUB :\n                return com.google.javascript.rhino.Token.SUB;\n            case com.google.javascript.rhino.Token.ASSIGN_MUL :\n                return com.google.javascript.rhino.Token.MUL;\n            case com.google.javascript.rhino.Token.ASSIGN_DIV :\n                return com.google.javascript.rhino.Token.DIV;\n            case com.google.javascript.rhino.Token.ASSIGN_MOD :\n                return com.google.javascript.rhino.Token.MOD;\n        }\n        throw new java.lang.IllegalArgumentException(\"Not an assiment op\");\n    }\n\n    static boolean isExpressionNode(com.google.javascript.rhino.Node n) {\n        return n.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;\n    }\n\n    static boolean containsFunctionDeclaration(com.google.javascript.rhino.Node n) {\n        return com.google.javascript.jscomp.NodeUtil.containsType(n, Token.FUNCTION);\n    }\n\n    static boolean referencesThis(com.google.javascript.rhino.Node n) {\n        return com.google.javascript.jscomp.NodeUtil.containsType(n, Token.THIS);\n    }\n\n    static boolean isGet(com.google.javascript.rhino.Node n) {\n        return (n.getType() == com.google.javascript.rhino.Token.GETPROP) || (n.getType() == com.google.javascript.rhino.Token.GETELEM);\n    }\n\n    static boolean isGetProp(com.google.javascript.rhino.Node n) {\n        return n.getType() == com.google.javascript.rhino.Token.GETPROP;\n    }\n\n    static boolean isName(com.google.javascript.rhino.Node n) {\n        return n.getType() == com.google.javascript.rhino.Token.NAME;\n    }\n\n    static boolean isNew(com.google.javascript.rhino.Node n) {\n        return n.getType() == com.google.javascript.rhino.Token.NEW;\n    }\n\n    static boolean isVar(com.google.javascript.rhino.Node n) {\n        return n.getType() == com.google.javascript.rhino.Token.VAR;\n    }\n\n    static boolean isVarDeclaration(com.google.javascript.rhino.Node n) {\n        return (n.getType() == com.google.javascript.rhino.Token.NAME) && (n.getParent().getType() == com.google.javascript.rhino.Token.VAR);\n    }\n\n    static com.google.javascript.rhino.Node getAssignedValue(com.google.javascript.rhino.Node n) {\n        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isName(n));\n        com.google.javascript.rhino.Node parent = n.getParent();\n        if (com.google.javascript.jscomp.NodeUtil.isVar(parent)) {\n            return n.getFirstChild();\n        } else if (com.google.javascript.jscomp.NodeUtil.isAssign(parent) && (parent.getFirstChild() == n)) {\n            return n.getNext();\n        } else {\n            return null;\n        }\n    }\n\n    static boolean isString(com.google.javascript.rhino.Node n) {\n        return n.getType() == com.google.javascript.rhino.Token.STRING;\n    }\n\n    static boolean isExprAssign(com.google.javascript.rhino.Node n) {\n        return (n.getType() == com.google.javascript.rhino.Token.EXPR_RESULT) && (n.getFirstChild().getType() == com.google.javascript.rhino.Token.ASSIGN);\n    }\n\n    static boolean isAssign(com.google.javascript.rhino.Node n) {\n        return n.getType() == com.google.javascript.rhino.Token.ASSIGN;\n    }\n\n    static boolean isExprCall(com.google.javascript.rhino.Node n) {\n        return (n.getType() == com.google.javascript.rhino.Token.EXPR_RESULT) && (n.getFirstChild().getType() == com.google.javascript.rhino.Token.CALL);\n    }\n\n    static boolean isForIn(com.google.javascript.rhino.Node n) {\n        return (n.getType() == com.google.javascript.rhino.Token.FOR) && (n.getChildCount() == 3);\n    }\n\n    static boolean isLoopStructure(com.google.javascript.rhino.Node n) {\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.FOR :\n            case com.google.javascript.rhino.Token.DO :\n            case com.google.javascript.rhino.Token.WHILE :\n                return true;\n            default :\n                return false;\n        }\n    }\n\n    static com.google.javascript.rhino.Node getLoopCodeBlock(com.google.javascript.rhino.Node n) {\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.FOR :\n            case com.google.javascript.rhino.Token.WHILE :\n                return n.getLastChild();\n            case com.google.javascript.rhino.Token.DO :\n                return n.getFirstChild();\n            default :\n                return null;\n        }\n    }\n\n    static boolean isControlStructure(com.google.javascript.rhino.Node n) {\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.FOR :\n            case com.google.javascript.rhino.Token.DO :\n            case com.google.javascript.rhino.Token.WHILE :\n            case com.google.javascript.rhino.Token.WITH :\n            case com.google.javascript.rhino.Token.IF :\n            case com.google.javascript.rhino.Token.LABEL :\n            case com.google.javascript.rhino.Token.TRY :\n            case com.google.javascript.rhino.Token.CATCH :\n            case com.google.javascript.rhino.Token.SWITCH :\n            case com.google.javascript.rhino.Token.CASE :\n            case com.google.javascript.rhino.Token.DEFAULT :\n                return true;\n            default :\n                return false;\n        }\n    }\n\n    static boolean isControlStructureCodeBlock(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node n) {\n        switch (parent.getType()) {\n            case com.google.javascript.rhino.Token.FOR :\n            case com.google.javascript.rhino.Token.WHILE :\n            case com.google.javascript.rhino.Token.LABEL :\n            case com.google.javascript.rhino.Token.WITH :\n                return parent.getLastChild() == n;\n            case com.google.javascript.rhino.Token.DO :\n                return parent.getFirstChild() == n;\n            case com.google.javascript.rhino.Token.IF :\n                return parent.getFirstChild() != n;\n            case com.google.javascript.rhino.Token.TRY :\n                return (parent.getFirstChild() == n) || (parent.getLastChild() == n);\n            case com.google.javascript.rhino.Token.CATCH :\n                return parent.getLastChild() == n;\n            case com.google.javascript.rhino.Token.SWITCH :\n            case com.google.javascript.rhino.Token.CASE :\n                return parent.getFirstChild() != n;\n            case com.google.javascript.rhino.Token.DEFAULT :\n                return true;\n            default :\n                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isControlStructure(parent));\n                return false;\n        }\n    }\n\n    static com.google.javascript.rhino.Node getConditionExpression(com.google.javascript.rhino.Node n) {\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.IF :\n            case com.google.javascript.rhino.Token.WHILE :\n                return n.getFirstChild();\n            case com.google.javascript.rhino.Token.DO :\n                return n.getLastChild();\n            case com.google.javascript.rhino.Token.FOR :\n                switch (n.getChildCount()) {\n                    case 3 :\n                        return null;\n                    case 4 :\n                        return n.getFirstChild().getNext();\n                }\n                throw new java.lang.IllegalArgumentException(\"malformed 'for' statement \" + n);\n            case com.google.javascript.rhino.Token.CASE :\n                return null;\n        }\n        throw new java.lang.IllegalArgumentException(n + \" does not have a condition.\");\n    }\n\n    static boolean isStatementBlock(com.google.javascript.rhino.Node n) {\n        return (n.getType() == com.google.javascript.rhino.Token.SCRIPT) || (n.getType() == com.google.javascript.rhino.Token.BLOCK);\n    }\n\n    static boolean isStatement(com.google.javascript.rhino.Node n) {\n        com.google.javascript.rhino.Node parent = n.getParent();\n        com.google.common.base.Preconditions.checkState(parent != null);\n        switch (parent.getType()) {\n            case com.google.javascript.rhino.Token.SCRIPT :\n            case com.google.javascript.rhino.Token.BLOCK :\n            case com.google.javascript.rhino.Token.LABEL :\n                return true;\n            default :\n                return false;\n        }\n    }\n\n    static boolean isSwitchCase(com.google.javascript.rhino.Node n) {\n        return (n.getType() == com.google.javascript.rhino.Token.CASE) || (n.getType() == com.google.javascript.rhino.Token.DEFAULT);\n    }\n\n    static boolean isReferenceName(com.google.javascript.rhino.Node n) {\n        return (com.google.javascript.jscomp.NodeUtil.isName(n) && (!n.getString().isEmpty())) && (!com.google.javascript.jscomp.NodeUtil.isLabelName(n));\n    }\n\n    static boolean isLabelName(com.google.javascript.rhino.Node n) {\n        if ((n != null) && (n.getType() == com.google.javascript.rhino.Token.NAME)) {\n            com.google.javascript.rhino.Node parent = n.getParent();\n            switch (parent.getType()) {\n                case com.google.javascript.rhino.Token.LABEL :\n                case com.google.javascript.rhino.Token.BREAK :\n                case com.google.javascript.rhino.Token.CONTINUE :\n                    if (n == parent.getFirstChild()) {\n                        return true;\n                    }\n            }\n        }\n        return false;\n    }\n\n    static boolean isTryFinallyNode(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node child) {\n        return ((parent.getType() == com.google.javascript.rhino.Token.TRY) && (parent.getChildCount() == 3)) && (child == parent.getLastChild());\n    }\n\n    static void removeChild(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node node) {\n        if ((com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent) || com.google.javascript.jscomp.NodeUtil.isSwitchCase(node)) || com.google.javascript.jscomp.NodeUtil.isTryFinallyNode(parent, node)) {\n            parent.removeChild(node);\n        } else if (parent.getType() == com.google.javascript.rhino.Token.VAR) {\n            if (parent.hasMoreThanOneChild()) {\n                parent.removeChild(node);\n            } else {\n                parent.removeChild(node);\n                com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);\n            }\n        } else if (node.getType() == com.google.javascript.rhino.Token.BLOCK) {\n            node.detachChildren();\n        } else if ((parent.getType() == com.google.javascript.rhino.Token.LABEL) && (node == parent.getLastChild())) {\n            parent.removeChild(node);\n            com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);\n        } else if ((parent.getType() == com.google.javascript.rhino.Token.FOR) && (parent.getChildCount() == 4)) {\n            parent.replaceChild(node, new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.EMPTY));\n        } else {\n            throw new java.lang.IllegalStateException(((\"Invalid attempt to remove node: \" + node.toString()) + \" of \") + parent.toString());\n        }\n    }\n\n    static boolean tryMergeBlock(com.google.javascript.rhino.Node block) {\n        com.google.common.base.Preconditions.checkState(block.getType() == com.google.javascript.rhino.Token.BLOCK);\n        com.google.javascript.rhino.Node parent = block.getParent();\n        if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)) {\n            com.google.javascript.rhino.Node previous = block;\n            while (block.hasChildren()) {\n                com.google.javascript.rhino.Node child = block.removeFirstChild();\n                parent.addChildAfter(child, previous);\n                previous = child;\n            } \n            parent.removeChild(block);\n            return true;\n        } else if ((parent.getType() == com.google.javascript.rhino.Token.LABEL) && block.hasOneChild()) {\n            parent.replaceChild(block, block.removeFirstChild());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    static boolean isCall(com.google.javascript.rhino.Node n) {\n        return n.getType() == com.google.javascript.rhino.Token.CALL;\n    }\n\n    static boolean isFunction(com.google.javascript.rhino.Node n) {\n        return n.getType() == com.google.javascript.rhino.Token.FUNCTION;\n    }\n\n    static com.google.javascript.rhino.Node getFunctionBody(com.google.javascript.rhino.Node fn) {\n        com.google.common.base.Preconditions.checkArgument(com.google.javascript.jscomp.NodeUtil.isFunction(fn));\n        return fn.getLastChild();\n    }\n\n    static boolean isThis(com.google.javascript.rhino.Node node) {\n        return node.getType() == com.google.javascript.rhino.Token.THIS;\n    }\n\n    static boolean containsCall(com.google.javascript.rhino.Node n) {\n        return com.google.javascript.jscomp.NodeUtil.containsType(n, Token.CALL);\n    }\n\n    static boolean isFunctionDeclaration(com.google.javascript.rhino.Node n) {\n        return (n.getType() == com.google.javascript.rhino.Token.FUNCTION) && (!com.google.javascript.jscomp.NodeUtil.isFunctionAnonymous(n));\n    }\n\n    static boolean isHoistedFunctionDeclaration(com.google.javascript.rhino.Node n) {\n        return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) && ((n.getParent().getType() == com.google.javascript.rhino.Token.SCRIPT) || (n.getParent().getParent().getType() == com.google.javascript.rhino.Token.FUNCTION));\n    }\n\n    static boolean isAnonymousFunction(com.google.javascript.rhino.Node n) {\n        return (n.getType() == com.google.javascript.rhino.Token.FUNCTION) && com.google.javascript.jscomp.NodeUtil.isFunctionAnonymous(n);\n    }\n\n    static boolean isFunctionAnonymous(com.google.javascript.rhino.Node n) {\n        return !com.google.javascript.jscomp.NodeUtil.isStatement(n);\n    }\n\n    static boolean isVarArgsFunction(com.google.javascript.rhino.Node function) {\n        com.google.common.base.Preconditions.checkArgument(com.google.javascript.jscomp.NodeUtil.isFunction(function));\n        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(function.getLastChild(), \"arguments\", com.google.common.base.Predicates.<com.google.javascript.rhino.Node>not(new com.google.javascript.jscomp.NodeUtil.MatchNodeType(com.google.javascript.rhino.Token.FUNCTION)));\n    }\n\n    static boolean isObjectCallMethod(com.google.javascript.rhino.Node callNode, java.lang.String methodName) {\n        if (callNode.getType() == com.google.javascript.rhino.Token.CALL) {\n            com.google.javascript.rhino.Node functionIndentifyingExpression = callNode.getFirstChild();\n            if (com.google.javascript.jscomp.NodeUtil.isGet(functionIndentifyingExpression)) {\n                com.google.javascript.rhino.Node last = functionIndentifyingExpression.getLastChild();\n                if ((last != null) && (last.getType() == com.google.javascript.rhino.Token.STRING)) {\n                    java.lang.String propName = last.getString();\n                    return propName.equals(methodName);\n                }\n            }\n        }\n        return false;\n    }\n\n    static boolean isFunctionObjectCall(com.google.javascript.rhino.Node callNode) {\n        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, \"call\");\n    }\n\n    static boolean isFunctionObjectApply(com.google.javascript.rhino.Node callNode) {\n        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, \"apply\");\n    }\n\n    static boolean isSimpleFunctionObjectCall(com.google.javascript.rhino.Node callNode) {\n        if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {\n            if (callNode.getFirstChild().getFirstChild().getType() == com.google.javascript.rhino.Token.NAME) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    static boolean isLhs(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {\n        return ((parent.getType() == com.google.javascript.rhino.Token.ASSIGN) && (parent.getFirstChild() == n)) || (parent.getType() == com.google.javascript.rhino.Token.VAR);\n    }\n\n    static boolean isObjectLitKey(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {\n        if ((node.getType() == com.google.javascript.rhino.Token.STRING) && (parent.getType() == com.google.javascript.rhino.Token.OBJECTLIT)) {\n            int index = 0;\n            for (com.google.javascript.rhino.Node current = parent.getFirstChild(); current != null; current = current.getNext()) {\n                if (current == node) {\n                    return (index % 2) == 0;\n                }\n                index++;\n            }\n        }\n        return false;\n    }\n\n    static java.lang.String opToStr(int operator) {\n        switch (operator) {\n            case com.google.javascript.rhino.Token.BITOR :\n                return \"|\";\n            case com.google.javascript.rhino.Token.OR :\n                return \"||\";\n            case com.google.javascript.rhino.Token.BITXOR :\n                return \"^\";\n            case com.google.javascript.rhino.Token.AND :\n                return \"&&\";\n            case com.google.javascript.rhino.Token.BITAND :\n                return \"&\";\n            case com.google.javascript.rhino.Token.SHEQ :\n                return \"===\";\n            case com.google.javascript.rhino.Token.EQ :\n                return \"==\";\n            case com.google.javascript.rhino.Token.NOT :\n                return \"!\";\n            case com.google.javascript.rhino.Token.NE :\n                return \"!=\";\n            case com.google.javascript.rhino.Token.SHNE :\n                return \"!==\";\n            case com.google.javascript.rhino.Token.LSH :\n                return \"<<\";\n            case com.google.javascript.rhino.Token.IN :\n                return \"in\";\n            case com.google.javascript.rhino.Token.LE :\n                return \"<=\";\n            case com.google.javascript.rhino.Token.LT :\n                return \"<\";\n            case com.google.javascript.rhino.Token.URSH :\n                return \">>>\";\n            case com.google.javascript.rhino.Token.RSH :\n                return \">>\";\n            case com.google.javascript.rhino.Token.GE :\n                return \">=\";\n            case com.google.javascript.rhino.Token.GT :\n                return \">\";\n            case com.google.javascript.rhino.Token.MUL :\n                return \"*\";\n            case com.google.javascript.rhino.Token.DIV :\n                return \"/\";\n            case com.google.javascript.rhino.Token.MOD :\n                return \"%\";\n            case com.google.javascript.rhino.Token.BITNOT :\n                return \"~\";\n            case com.google.javascript.rhino.Token.ADD :\n                return \"+\";\n            case com.google.javascript.rhino.Token.SUB :\n                return \"-\";\n            case com.google.javascript.rhino.Token.POS :\n                return \"+\";\n            case com.google.javascript.rhino.Token.NEG :\n                return \"-\";\n            case com.google.javascript.rhino.Token.ASSIGN :\n                return \"=\";\n            case com.google.javascript.rhino.Token.ASSIGN_BITOR :\n                return \"|=\";\n            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :\n                return \"^=\";\n            case com.google.javascript.rhino.Token.ASSIGN_BITAND :\n                return \"&=\";\n            case com.google.javascript.rhino.Token.ASSIGN_LSH :\n                return \"<<=\";\n            case com.google.javascript.rhino.Token.ASSIGN_RSH :\n                return \">>=\";\n            case com.google.javascript.rhino.Token.ASSIGN_URSH :\n                return \">>>=\";\n            case com.google.javascript.rhino.Token.ASSIGN_ADD :\n                return \"+=\";\n            case com.google.javascript.rhino.Token.ASSIGN_SUB :\n                return \"-=\";\n            case com.google.javascript.rhino.Token.ASSIGN_MUL :\n                return \"*=\";\n            case com.google.javascript.rhino.Token.ASSIGN_DIV :\n                return \"/=\";\n            case com.google.javascript.rhino.Token.ASSIGN_MOD :\n                return \"%=\";\n            case com.google.javascript.rhino.Token.VOID :\n                return \"void\";\n            case com.google.javascript.rhino.Token.TYPEOF :\n                return \"typeof\";\n            case com.google.javascript.rhino.Token.INSTANCEOF :\n                return \"instanceof\";\n            default :\n                return null;\n        }\n    }\n\n    static java.lang.String opToStrNoFail(int operator) {\n        java.lang.String res = com.google.javascript.jscomp.NodeUtil.opToStr(operator);\n        if (res == null) {\n            throw new java.lang.Error(((\"Unknown op \" + operator) + \": \") + com.google.javascript.rhino.Token.name(operator));\n        }\n        return res;\n    }\n\n    static boolean containsTypeInOuterScope(com.google.javascript.rhino.Node node, int type) {\n        return com.google.javascript.jscomp.NodeUtil.containsType(node, type, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>not(new com.google.javascript.jscomp.NodeUtil.MatchNodeType(com.google.javascript.rhino.Token.FUNCTION)));\n    }\n\n    static boolean containsType(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {\n        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);\n    }\n\n    static boolean containsType(com.google.javascript.rhino.Node node, int type) {\n        return com.google.javascript.jscomp.NodeUtil.containsType(node, type, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());\n    }\n\n    static void redeclareVarsInsideBranch(com.google.javascript.rhino.Node branch) {\n        java.util.Collection<com.google.javascript.rhino.Node> vars = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(branch);\n        if (vars.isEmpty()) {\n            return;\n        }\n        com.google.javascript.rhino.Node parent = com.google.javascript.jscomp.NodeUtil.getAddingRoot(branch);\n        for (com.google.javascript.rhino.Node nameNode : vars) {\n            com.google.javascript.rhino.Node var = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.VAR, com.google.javascript.rhino.Node.newString(Token.NAME, nameNode.getString()));\n            com.google.javascript.jscomp.NodeUtil.copyNameAnnotations(nameNode, var.getFirstChild());\n            parent.addChildToFront(var);\n        }\n    }\n\n    static void copyNameAnnotations(com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node destination) {\n        if (source.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n            destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n    }\n\n    private static com.google.javascript.rhino.Node getAddingRoot(com.google.javascript.rhino.Node n) {\n        com.google.javascript.rhino.Node addingRoot = null;\n        com.google.javascript.rhino.Node ancestor = n;\n        while (null != (ancestor = ancestor.getParent())) {\n            int type = ancestor.getType();\n            if (type == com.google.javascript.rhino.Token.SCRIPT) {\n                addingRoot = ancestor;\n                break;\n            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {\n                addingRoot = ancestor.getLastChild();\n                break;\n            }\n        } \n        com.google.common.base.Preconditions.checkState((addingRoot.getType() == com.google.javascript.rhino.Token.BLOCK) || (addingRoot.getType() == com.google.javascript.rhino.Token.SCRIPT));\n        com.google.common.base.Preconditions.checkState((addingRoot.getFirstChild() == null) || (addingRoot.getFirstChild().getType() != com.google.javascript.rhino.Token.SCRIPT));\n        return addingRoot;\n    }\n\n    public static com.google.javascript.rhino.FunctionNode newFunctionNode(java.lang.String name, java.util.List<com.google.javascript.rhino.Node> params, com.google.javascript.rhino.Node body, int lineno, int charno) {\n        com.google.javascript.rhino.Node parameterParen = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.LP, lineno, charno);\n        for (com.google.javascript.rhino.Node param : params) {\n            parameterParen.addChildToBack(param);\n        }\n        com.google.javascript.rhino.FunctionNode function = new com.google.javascript.rhino.FunctionNode(name, lineno, charno);\n        function.addChildrenToBack(com.google.javascript.rhino.Node.newString(Token.NAME, name, lineno, charno));\n        function.addChildToBack(parameterParen);\n        function.addChildToBack(body);\n        return function;\n    }\n\n    public static com.google.javascript.rhino.Node newQualifiedNameNode(java.lang.String name, int lineno, int charno) {\n        int endPos = name.indexOf('.');\n        if (endPos == (-1)) {\n            return com.google.javascript.rhino.Node.newString(Token.NAME, name, lineno, charno);\n        }\n        com.google.javascript.rhino.Node node = com.google.javascript.rhino.Node.newString(Token.NAME, name.substring(0, endPos), lineno, charno);\n        int startPos;\n        do {\n            startPos = endPos + 1;\n            endPos = name.indexOf('.', startPos);\n            java.lang.String part = (endPos == (-1)) ? name.substring(startPos) : name.substring(startPos, endPos);\n            node = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.GETPROP, node, com.google.javascript.rhino.Node.newString(Token.STRING, part, lineno, charno), lineno, charno);\n        } while (endPos != (-1) );\n        return node;\n    }\n\n    static com.google.javascript.rhino.Node newQualifiedNameNode(java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {\n        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(name, -1, -1);\n        com.google.javascript.jscomp.NodeUtil.setDebugInformation(node, basisNode, originalName);\n        return node;\n    }\n\n    static void setDebugInformation(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {\n        node.copyInformationFromForTree(basisNode);\n        node.putProp(Node.ORIGINALNAME_PROP, originalName);\n    }\n\n    static com.google.javascript.rhino.Node newName(java.lang.String name, com.google.javascript.rhino.Node basisNode) {\n        com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.Node.newString(Token.NAME, name);\n        nameNode.copyInformationFrom(basisNode);\n        return nameNode;\n    }\n\n    static com.google.javascript.rhino.Node newName(java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {\n        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newName(name, basisNode);\n        nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);\n        return nameNode;\n    }\n\n    static boolean isLatin(java.lang.String s) {\n        char LARGEST_BASIC_LATIN = 0x7f;\n        int len = s.length();\n        for (int index = 0; index < len; index++) {\n            char c = s.charAt(index);\n            if (c > LARGEST_BASIC_LATIN) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    static boolean isValidPropertyName(java.lang.String name) {\n        return (com.google.javascript.rhino.TokenStream.isJSIdentifier(name) && (!com.google.javascript.rhino.TokenStream.isKeyword(name))) && com.google.javascript.jscomp.NodeUtil.isLatin(name);\n    }\n\n    private static class VarCollector implements com.google.javascript.jscomp.NodeUtil.Visitor {\n        final java.util.Map<java.lang.String, com.google.javascript.rhino.Node> vars = com.google.common.collect.Maps.newLinkedHashMap();\n\n        public void visit(com.google.javascript.rhino.Node n) {\n            if (n.getType() == com.google.javascript.rhino.Token.NAME) {\n                com.google.javascript.rhino.Node parent = n.getParent();\n                if ((parent != null) && (parent.getType() == com.google.javascript.rhino.Token.VAR)) {\n                    java.lang.String name = n.getString();\n                    if (!vars.containsKey(name)) {\n                        vars.put(name, n);\n                    }\n                }\n            }\n        }\n    }\n\n    public static java.util.Collection<com.google.javascript.rhino.Node> getVarsDeclaredInBranch(com.google.javascript.rhino.Node root) {\n        com.google.javascript.jscomp.NodeUtil.VarCollector collector = new com.google.javascript.jscomp.NodeUtil.VarCollector();\n        com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, collector, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>not(new com.google.javascript.jscomp.NodeUtil.MatchNodeType(com.google.javascript.rhino.Token.FUNCTION)));\n        return collector.vars.values();\n    }\n\n    static boolean isPrototypePropertyDeclaration(com.google.javascript.rhino.Node n) {\n        if (!com.google.javascript.jscomp.NodeUtil.isExprAssign(n)) {\n            return false;\n        }\n        return com.google.javascript.jscomp.NodeUtil.isPrototypeProperty(n.getFirstChild().getFirstChild());\n    }\n\n    static boolean isPrototypeProperty(com.google.javascript.rhino.Node n) {\n        java.lang.String lhsString = n.getQualifiedName();\n        if (lhsString == null) {\n            return false;\n        }\n        int prototypeIdx = lhsString.indexOf(\".prototype.\");\n        return prototypeIdx != (-1);\n    }\n\n    static com.google.javascript.rhino.Node getPrototypeClassName(com.google.javascript.rhino.Node qName) {\n        com.google.javascript.rhino.Node cur = qName;\n        while (com.google.javascript.jscomp.NodeUtil.isGetProp(cur)) {\n            if (cur.getLastChild().getString().equals(\"prototype\")) {\n                return cur.getFirstChild();\n            } else {\n                cur = cur.getFirstChild();\n            }\n        } \n        return null;\n    }\n\n    static java.lang.String getPrototypePropertyName(com.google.javascript.rhino.Node qName) {\n        java.lang.String qNameStr = qName.getQualifiedName();\n        int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");\n        int memberIndex = (prototypeIdx + \".prototype\".length()) + 1;\n        return qNameStr.substring(memberIndex);\n    }\n\n    static com.google.javascript.rhino.Node newUndefinedNode() {\n        return new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.VOID, com.google.javascript.rhino.Node.newNumber(0));\n    }\n\n    static com.google.javascript.rhino.Node newVarNode(java.lang.String name, com.google.javascript.rhino.Node value) {\n        com.google.javascript.rhino.Node nodeName = com.google.javascript.rhino.Node.newString(Token.NAME, name);\n        if (value != null) {\n            nodeName.addChildrenToBack(value);\n        }\n        com.google.javascript.rhino.Node var = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.VAR, nodeName);\n        return var;\n    }\n\n    private static class MatchNameNode implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {\n        final java.lang.String name;\n\n        MatchNameNode(java.lang.String name) {\n            this.name = name;\n        }\n\n        public boolean apply(com.google.javascript.rhino.Node n) {\n            return (n.getType() == com.google.javascript.rhino.Token.NAME) && n.getString().equals(name);\n        }\n    }\n\n    static class MatchNodeType implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {\n        final int type;\n\n        MatchNodeType(int type) {\n            this.type = type;\n        }\n\n        public boolean apply(com.google.javascript.rhino.Node n) {\n            return n.getType() == type;\n        }\n    }\n\n    static boolean isNodeTypeReferenced(com.google.javascript.rhino.Node node, int type) {\n        return com.google.javascript.jscomp.NodeUtil.isNodeTypeReferenced(node, type, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());\n    }\n\n    static boolean isNodeTypeReferenced(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {\n        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);\n    }\n\n    static int getNodeTypeReferenceCount(com.google.javascript.rhino.Node node, int type) {\n        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type));\n    }\n\n    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {\n        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), traverseChildrenPred);\n    }\n\n    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name) {\n        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(node, name, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());\n    }\n\n    static int getNameReferenceCount(com.google.javascript.rhino.Node node, java.lang.String name) {\n        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name));\n    }\n\n    static boolean has(com.google.javascript.rhino.Node node, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {\n        if (pred.apply(node)) {\n            return true;\n        }\n        if (!traverseChildrenPred.apply(node)) {\n            return false;\n        }\n        for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n            if (com.google.javascript.jscomp.NodeUtil.has(c, pred, traverseChildrenPred)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    static int getCount(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred) {\n        int total = 0;\n        if (pred.apply(n)) {\n            total++;\n        }\n        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            total += com.google.javascript.jscomp.NodeUtil.getCount(c, pred);\n        }\n        return total;\n    }\n\n    static interface Visitor {\n        public abstract void visit(com.google.javascript.rhino.Node node);\n    }\n\n    static void visitPreOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor vistor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {\n        vistor.visit(node);\n        if (traverseChildrenPred.apply(node)) {\n            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n                com.google.javascript.jscomp.NodeUtil.visitPreOrder(c, vistor, traverseChildrenPred);\n            }\n        }\n    }\n\n    static void visitPostOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor vistor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {\n        if (traverseChildrenPred.apply(node)) {\n            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n                com.google.javascript.jscomp.NodeUtil.visitPostOrder(c, vistor, traverseChildrenPred);\n            }\n        }\n        vistor.visit(node);\n    }\n\n    static boolean hasFinally(com.google.javascript.rhino.Node n) {\n        com.google.common.base.Preconditions.checkArgument(n.getType() == com.google.javascript.rhino.Token.TRY);\n        return n.getChildCount() == 3;\n    }\n\n    static com.google.javascript.rhino.Node getCatchBlock(com.google.javascript.rhino.Node n) {\n        com.google.common.base.Preconditions.checkArgument(n.getType() == com.google.javascript.rhino.Token.TRY);\n        return n.getFirstChild().getNext();\n    }\n\n    static boolean hasCatchHandler(com.google.javascript.rhino.Node n) {\n        com.google.common.base.Preconditions.checkArgument(n.getType() == com.google.javascript.rhino.Token.BLOCK);\n        return n.hasChildren() && (n.getFirstChild().getType() == com.google.javascript.rhino.Token.CATCH);\n    }\n\n    static com.google.javascript.rhino.Node getFnParameters(com.google.javascript.rhino.Node fnNode) {\n        com.google.common.base.Preconditions.checkArgument(fnNode.getType() == com.google.javascript.rhino.Token.FUNCTION);\n        return fnNode.getFirstChild().getNext();\n    }\n\n    static boolean isConstantName(com.google.javascript.rhino.Node node) {\n        return node.getBooleanProp(Node.IS_CONSTANT_NAME);\n    }\n\n    static com.google.javascript.rhino.JSDocInfo getInfoForNameNode(com.google.javascript.rhino.Node nameNode) {\n        com.google.javascript.rhino.JSDocInfo info = null;\n        com.google.javascript.rhino.Node parent = null;\n        if (nameNode != null) {\n            info = nameNode.getJSDocInfo();\n            parent = nameNode.getParent();\n        }\n        if (((info == null) && (parent != null)) && (((parent.getType() == com.google.javascript.rhino.Token.VAR) && parent.hasOneChild()) || (parent.getType() == com.google.javascript.rhino.Token.FUNCTION))) {\n            info = parent.getJSDocInfo();\n        }\n        return info;\n    }\n\n    static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {\n        java.lang.String sourceName = null;\n        while ((sourceName == null) && (n != null)) {\n            sourceName = ((java.lang.String) (n.getProp(Node.SOURCENAME_PROP)));\n            n = n.getParent();\n        } \n        return sourceName;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "NodeUtil"
    }
  ],
  "id": "Closure_137"
}